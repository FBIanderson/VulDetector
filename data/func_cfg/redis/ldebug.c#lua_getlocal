extern const char *lua_getlocal(lua_State *L, const lua_Debug *ar, int n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: IntegerLiteral 0x555e972417f0 <./llimits.h:111:33> 'int' 0
0
   2: CStyleCastExpr 0x555e97241820 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x555e972417f0 <col:33> 'int' 0
(void)[B1.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x555e97241868 <ldebug.c:134:10> 'const char *' lvalue Var 0x555e97241238 'name' 'const char *'
name
   4: ImplicitCastExpr 0x555e97241890 <ldebug.c:134:10> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x555e97241868 <col:10> 'const char *' lvalue Var 0x555e97241238 'name' 'const char *'
[B1.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: ReturnStmt 0x555e972418a8 <ldebug.c:134:3, col:10>
`-ImplicitCastExpr 0x555e97241890 <col:10> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x555e97241868 <col:10> 'const char *' lvalue Var 0x555e97241238 'name' 'const char *'
return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x555e97241508 <ldebug.c:132:7> 'void (lua_State *, const TValue *)' Function 0x555e971e0e70 'luaA_pushobject' 'void (lua_State *, const TValue *)'
luaA_pushobject
   2: ImplicitCastExpr 0x555e97241738 <ldebug.c:132:7> 'void (*)(lua_State *, const TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97241508 <col:7> 'void (lua_State *, const TValue *)' Function 0x555e971e0e70 'luaA_pushobject' 'void (lua_State *, const TValue *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *))
   3: DeclRefExpr 0x555e97241550 <ldebug.c:132:23> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x555e97241788 <ldebug.c:132:23> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e97241550 <col:23> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
[B2.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x555e97241578 <ldebug.c:132:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
ci
   6: ImplicitCastExpr 0x555e972415a0 <ldebug.c:132:26> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e97241578 <col:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
[B2.5] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   7: MemberExpr 0x555e972415b8 <ldebug.c:132:26, col:30> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
`-ImplicitCastExpr 0x555e972415a0 <col:26> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x555e97241578 <col:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
[B2.6]->base
   8: ImplicitCastExpr 0x555e97241698 <ldebug.c:132:26, col:30> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x555e972415b8 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
  `-ImplicitCastExpr 0x555e972415a0 <col:26> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x555e97241578 <col:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
[B2.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclRefExpr 0x555e972415f0 <ldebug.c:132:38> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
n
  10: ImplicitCastExpr 0x555e97241638 <ldebug.c:132:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972415f0 <col:38> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
[B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x555e97241618 <ldebug.c:132:42> 'int' 1
1
  12: BinaryOperator 0x555e97241650 <ldebug.c:132:38, col:42> 'int' '-'
|-ImplicitCastExpr 0x555e97241638 <col:38> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972415f0 <col:38> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
`-IntegerLiteral 0x555e97241618 <col:42> 'int' 1
[B2.10] - [B2.11]
  13: BinaryOperator 0x555e972416b0 <ldebug.c:132:26, col:43> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x555e97241698 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x555e972415b8 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
|   `-ImplicitCastExpr 0x555e972415a0 <col:26> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97241578 <col:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
`-ParenExpr 0x555e97241678 <col:37, col:43> 'int'
  `-BinaryOperator 0x555e97241650 <col:38, col:42> 'int' '-'
    |-ImplicitCastExpr 0x555e97241638 <col:38> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e972415f0 <col:38> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
    `-IntegerLiteral 0x555e97241618 <col:42> 'int' 1
[B2.8] + ([B2.12])
  14: ImplicitCastExpr 0x555e972417a0 <ldebug.c:132:26, col:43> 'const TValue *' <BitCast>
`-BinaryOperator 0x555e972416b0 <col:26, col:43> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x555e97241698 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
  | `-MemberExpr 0x555e972415b8 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
  |   `-ImplicitCastExpr 0x555e972415a0 <col:26> 'CallInfo *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97241578 <col:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
  `-ParenExpr 0x555e97241678 <col:37, col:43> 'int'
    `-BinaryOperator 0x555e97241650 <col:38, col:42> 'int' '-'
      |-ImplicitCastExpr 0x555e97241638 <col:38> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x555e972415f0 <col:38> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
      `-IntegerLiteral 0x555e97241618 <col:42> 'int' 1
[B2.13] (ImplicitCastExpr, BitCast, const TValue *)
  15: CallExpr 0x555e97241750 <ldebug.c:132:7, col:44> 'void'
|-ImplicitCastExpr 0x555e97241738 <col:7> 'void (*)(lua_State *, const TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97241508 <col:7> 'void (lua_State *, const TValue *)' Function 0x555e971e0e70 'luaA_pushobject' 'void (lua_State *, const TValue *)'
|-ImplicitCastExpr 0x555e97241788 <col:23> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e97241550 <col:23> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
`-ImplicitCastExpr 0x555e972417a0 <col:26, col:43> 'const TValue *' <BitCast>
  `-BinaryOperator 0x555e972416b0 <col:26, col:43> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x555e97241698 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
    | `-MemberExpr 0x555e972415b8 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
    |   `-ImplicitCastExpr 0x555e972415a0 <col:26> 'CallInfo *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97241578 <col:26> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
    `-ParenExpr 0x555e97241678 <col:37, col:43> 'int'
      `-BinaryOperator 0x555e97241650 <col:38, col:42> 'int' '-'
        |-ImplicitCastExpr 0x555e97241638 <col:38> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x555e972415f0 <col:38> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
        `-IntegerLiteral 0x555e97241618 <col:42> 'int' 1
[B2.2]([B2.4], [B2.14])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x555e972410c0 <ldebug.c:128:18> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x555e972410e8 <ldebug.c:128:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e972410c0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
[B3.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x555e97241100 <ldebug.c:128:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
`-ImplicitCastExpr 0x555e972410e8 <col:18> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x555e972410c0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
[B3.2]->base_ci
   4: ImplicitCastExpr 0x555e972411b0 <ldebug.c:128:18, col:21> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x555e97241100 <col:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
  `-ImplicitCastExpr 0x555e972410e8 <col:18> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x555e972410c0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
[B3.3] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: DeclRefExpr 0x555e97241138 <ldebug.c:128:31> 'const lua_Debug *' lvalue ParmVar 0x555e97240e80 'ar' 'const lua_Debug *'
ar
   6: ImplicitCastExpr 0x555e97241160 <ldebug.c:128:31> 'const lua_Debug *' <LValueToRValue>
`-DeclRefExpr 0x555e97241138 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97240e80 'ar' 'const lua_Debug *'
[B3.5] (ImplicitCastExpr, LValueToRValue, const lua_Debug *)
   7: MemberExpr 0x555e97241178 <ldebug.c:128:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
`-ImplicitCastExpr 0x555e97241160 <col:31> 'const lua_Debug *' <LValueToRValue>
  `-DeclRefExpr 0x555e97241138 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97240e80 'ar' 'const lua_Debug *'
[B3.6]->i_ci
   8: ImplicitCastExpr 0x555e972411c8 <ldebug.c:128:31, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x555e97241178 <col:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
  `-ImplicitCastExpr 0x555e97241160 <col:31> 'const lua_Debug *' <LValueToRValue>
    `-DeclRefExpr 0x555e97241138 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97240e80 'ar' 'const lua_Debug *'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e972411e0 <ldebug.c:128:18, col:35> 'CallInfo *' '+'
|-ImplicitCastExpr 0x555e972411b0 <col:18, col:21> 'CallInfo *' <LValueToRValue>
| `-MemberExpr 0x555e97241100 <col:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
|   `-ImplicitCastExpr 0x555e972410e8 <col:18> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x555e972410c0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
`-ImplicitCastExpr 0x555e972411c8 <col:31, col:35> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97241178 <col:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
    `-ImplicitCastExpr 0x555e97241160 <col:31> 'const lua_Debug *' <LValueToRValue>
      `-DeclRefExpr 0x555e97241138 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97240e80 'ar' 'const lua_Debug *'
[B3.4] + [B3.8]
  10: DeclStmt 0x555e97241208 <ldebug.c:128:3, col:39>col:13
`-VarDecl 0x555e97241060 <col:3, col:35> col:13 used ci 'CallInfo *' cinit
  `-BinaryOperator 0x555e972411e0 <col:18, col:35> 'CallInfo *' '+'
    |-ImplicitCastExpr 0x555e972411b0 <col:18, col:21> 'CallInfo *' <LValueToRValue>
    | `-MemberExpr 0x555e97241100 <col:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
    |   `-ImplicitCastExpr 0x555e972410e8 <col:18> 'lua_State *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e972410c0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
    `-ImplicitCastExpr 0x555e972411c8 <col:31, col:35> 'int' <LValueToRValue>
      `-MemberExpr 0x555e97241178 <col:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
        `-ImplicitCastExpr 0x555e97241160 <col:31> 'const lua_Debug *' <LValueToRValue>
          `-DeclRefExpr 0x555e97241138 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97240e80 'ar' 'const lua_Debug *'
CallInfo *ci = L->base_ci + ar->i_ci;
  11: DeclRefExpr 0x555e97241298 <ldebug.c:129:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
findlocal
  12: ImplicitCastExpr 0x555e97241398 <ldebug.c:129:22> 'const char *(*)(lua_State *, CallInfo *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97241298 <col:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
[B3.11] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(lua_State *, CallInfo *, int))
  13: DeclRefExpr 0x555e972412c0 <ldebug.c:129:32> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
L
  14: ImplicitCastExpr 0x555e972413f0 <ldebug.c:129:32> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e972412c0 <col:32> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
[B3.13] (ImplicitCastExpr, LValueToRValue, lua_State *)
  15: DeclRefExpr 0x555e972412e8 <ldebug.c:129:35> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
ci
  16: ImplicitCastExpr 0x555e97241408 <ldebug.c:129:35> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e972412e8 <col:35> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
[B3.15] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  17: DeclRefExpr 0x555e97241310 <ldebug.c:129:39> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
n
  18: ImplicitCastExpr 0x555e97241420 <ldebug.c:129:39> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97241310 <col:39> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
[B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: CallExpr 0x555e972413b0 <ldebug.c:129:22, col:40> 'const char *'
|-ImplicitCastExpr 0x555e97241398 <col:22> 'const char *(*)(lua_State *, CallInfo *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97241298 <col:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
|-ImplicitCastExpr 0x555e972413f0 <col:32> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e972412c0 <col:32> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
|-ImplicitCastExpr 0x555e97241408 <col:35> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x555e972412e8 <col:35> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x555e97241420 <col:39> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97241310 <col:39> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
[B3.12]([B3.14], [B3.16], [B3.18])
  20: DeclStmt 0x555e97241438 <ldebug.c:129:3, col:41>col:15
`-VarDecl 0x555e97241238 <col:3, col:40> col:15 used name 'const char *' cinit
  `-CallExpr 0x555e972413b0 <col:22, col:40> 'const char *'
    |-ImplicitCastExpr 0x555e97241398 <col:22> 'const char *(*)(lua_State *, CallInfo *, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97241298 <col:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
    |-ImplicitCastExpr 0x555e972413f0 <col:32> 'lua_State *' <LValueToRValue>
    | `-DeclRefExpr 0x555e972412c0 <col:32> 'lua_State *' lvalue ParmVar 0x555e97240e10 'L' 'lua_State *'
    |-ImplicitCastExpr 0x555e97241408 <col:35> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x555e972412e8 <col:35> 'CallInfo *' lvalue Var 0x555e97241060 'ci' 'CallInfo *'
    `-ImplicitCastExpr 0x555e97241420 <col:39> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97241310 <col:39> 'int' lvalue ParmVar 0x555e97240ef8 'n' 'int'
const char *name = findlocal(L, ci, n);
  21: IntegerLiteral 0x555e97241450 <./llimits.h:110:33> 'int' 0
0
  22: CStyleCastExpr 0x555e97241480 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x555e97241450 <col:33> 'int' 0
(void)[B3.21] (CStyleCastExpr, ToVoid, void)
  23: DeclRefExpr 0x555e972414c8 <ldebug.c:131:7> 'const char *' lvalue Var 0x555e97241238 'name' 'const char *'
name
  24: ImplicitCastExpr 0x555e972414f0 <ldebug.c:131:7> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x555e972414c8 <col:7> 'const char *' lvalue Var 0x555e97241238 'name' 'const char *'
[B3.23] (ImplicitCastExpr, LValueToRValue, const char *)
   T: if [B3.24]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
