static void trydecpoint(LexState *ls, SemInfo *seminfo)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: DeclRefExpr 0x561ce74528a8 <llex.c:187:5> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
buffreplace
   2: ImplicitCastExpr 0x561ce7452988 <llex.c:187:5> 'void (*)(LexState *, char, char)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74528a8 <col:5> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, char, char))
   3: DeclRefExpr 0x561ce74528d0 <llex.c:187:17> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74529e0 <llex.c:187:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74528d0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce74528f8 <llex.c:187:21> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7452920 <llex.c:187:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74528f8 <col:21> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7452938 <llex.c:187:21, col:25> 'char' lvalue ->decpoint 0x561ce7426d10
`-ImplicitCastExpr 0x561ce7452920 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74528f8 <col:21> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B1.6]->decpoint
   8: ImplicitCastExpr 0x561ce74529f8 <llex.c:187:21, col:25> 'char' <LValueToRValue>
`-MemberExpr 0x561ce7452938 <col:21, col:25> 'char' lvalue ->decpoint 0x561ce7426d10
  `-ImplicitCastExpr 0x561ce7452920 <col:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74528f8 <col:21> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, char)
   9: CharacterLiteral 0x561ce7452970 <llex.c:187:35> 'int' 46
'.'
  10: ImplicitCastExpr 0x561ce7452a10 <llex.c:187:35> 'char' <IntegralCast>
`-CharacterLiteral 0x561ce7452970 <col:35> 'int' 46
[B1.9] (ImplicitCastExpr, IntegralCast, char)
  11: CallExpr 0x561ce74529a0 <llex.c:187:5, col:38> 'void'
|-ImplicitCastExpr 0x561ce7452988 <col:5> 'void (*)(LexState *, char, char)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74528a8 <col:5> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
|-ImplicitCastExpr 0x561ce74529e0 <col:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74528d0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce74529f8 <col:21, col:25> 'char' <LValueToRValue>
| `-MemberExpr 0x561ce7452938 <col:21, col:25> 'char' lvalue ->decpoint 0x561ce7426d10
|   `-ImplicitCastExpr 0x561ce7452920 <col:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce74528f8 <col:21> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7452a10 <col:35> 'char' <IntegralCast>
  `-CharacterLiteral 0x561ce7452970 <col:35> 'int' 46
[B1.2]([B1.4], [B1.8], [B1.10])
  12: DeclRefExpr 0x561ce7452a28 <llex.c:188:5> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
  13: ImplicitCastExpr 0x561ce7452ad8 <llex.c:188:5> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7452a28 <col:5> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B1.12] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
  14: DeclRefExpr 0x561ce7452a50 <llex.c:188:19> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x561ce7452b30 <llex.c:188:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452a50 <col:19> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B1.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: StringLiteral 0x561ce7452a78 <llex.c:188:23> 'char [17]' lvalue "malformed number"
"malformed number"
  17: ImplicitCastExpr 0x561ce7452b48 <llex.c:188:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7452a78 <col:23> 'char [17]' lvalue "malformed number"
[B1.16] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  18: ImplicitCastExpr 0x561ce7452b60 <llex.c:188:23> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7452b48 <col:23> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7452a78 <col:23> 'char [17]' lvalue "malformed number"
[B1.17] (ImplicitCastExpr, BitCast, const char *)
  19: DeclRefExpr 0x561ce7452ab0 <llex.c:188:43> 'int' EnumConstant 0x561ce7424ea8 'TK_NUMBER' 'int'
TK_NUMBER
  20: CallExpr 0x561ce7452af0 <llex.c:188:5, col:52> 'void'
|-ImplicitCastExpr 0x561ce7452ad8 <col:5> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7452a28 <col:5> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce7452b30 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7452a50 <col:19> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7452b60 <col:23> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce7452b48 <col:23> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561ce7452a78 <col:23> 'char [17]' lvalue "malformed number"
`-DeclRefExpr 0x561ce7452ab0 <col:43> 'int' EnumConstant 0x561ce7424ea8 'TK_NUMBER' 'int'
[B1.13]([B1.15], [B1.18], [B1.19])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: ConditionalOperator 0x561ce7451f30 <llex.c:183:19, col:47> 'int'
|-ImplicitCastExpr 0x561ce7451ee8 <col:19> 'struct lconv *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7451dd0 <col:19> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
|-ImplicitCastExpr 0x561ce7451f18 <col:24, col:43> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce7451f00 <col:24, col:43> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce7451ea8 <col:24, col:43> 'char' lvalue
|     |-ImplicitCastExpr 0x561ce7451e90 <col:24, col:28> 'char *' <LValueToRValue>
|     | `-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
|     |   `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
|     |     `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
|     `-IntegerLiteral 0x561ce7451e70 <col:42> 'int' 0
`-CharacterLiteral 0x561ce7451ed0 <col:47> 'int' 46
[B5.11] ? [B3.8] : [B4.1]
   2: ImplicitCastExpr 0x561ce7451f80 <llex.c:183:18, col:50> 'char' <IntegralCast>
`-ParenExpr 0x561ce7451f60 <col:18, col:50> 'int'
  `-ConditionalOperator 0x561ce7451f30 <col:19, col:47> 'int'
    |-ImplicitCastExpr 0x561ce7451ee8 <col:19> 'struct lconv *' <LValueToRValue>
    | `-DeclRefExpr 0x561ce7451dd0 <col:19> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
    |-ImplicitCastExpr 0x561ce7451f18 <col:24, col:43> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x561ce7451f00 <col:24, col:43> 'char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x561ce7451ea8 <col:24, col:43> 'char' lvalue
    |     |-ImplicitCastExpr 0x561ce7451e90 <col:24, col:28> 'char *' <LValueToRValue>
    |     | `-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
    |     |   `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
    |     `-IntegerLiteral 0x561ce7451e70 <col:42> 'int' 0
    `-CharacterLiteral 0x561ce7451ed0 <col:47> 'int' 46
([B2.1]) (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x561ce7451d58 <llex.c:183:3> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7451d80 <llex.c:183:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7451d58 <col:3> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7451d98 <llex.c:183:3, col:7> 'char' lvalue ->decpoint 0x561ce7426d10
`-ImplicitCastExpr 0x561ce7451d80 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7451d58 <col:3> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.4]->decpoint
   6: BinaryOperator 0x561ce7451f98 <llex.c:183:3, col:50> 'char' '='
|-MemberExpr 0x561ce7451d98 <col:3, col:7> 'char' lvalue ->decpoint 0x561ce7426d10
| `-ImplicitCastExpr 0x561ce7451d80 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7451d58 <col:3> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7451f80 <col:18, col:50> 'char' <IntegralCast>
  `-ParenExpr 0x561ce7451f60 <col:18, col:50> 'int'
    `-ConditionalOperator 0x561ce7451f30 <col:19, col:47> 'int'
      |-ImplicitCastExpr 0x561ce7451ee8 <col:19> 'struct lconv *' <LValueToRValue>
      | `-DeclRefExpr 0x561ce7451dd0 <col:19> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
      |-ImplicitCastExpr 0x561ce7451f18 <col:24, col:43> 'int' <IntegralCast>
      | `-ImplicitCastExpr 0x561ce7451f00 <col:24, col:43> 'char' <LValueToRValue>
      |   `-ArraySubscriptExpr 0x561ce7451ea8 <col:24, col:43> 'char' lvalue
      |     |-ImplicitCastExpr 0x561ce7451e90 <col:24, col:28> 'char *' <LValueToRValue>
      |     | `-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
      |     |   `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
      |     |     `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
      |     `-IntegerLiteral 0x561ce7451e70 <col:42> 'int' 0
      `-CharacterLiteral 0x561ce7451ed0 <col:47> 'int' 46
[B2.5] = [B2.2]
   7: DeclRefExpr 0x561ce7451fc0 <llex.c:184:3> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
buffreplace
   8: ImplicitCastExpr 0x561ce7452548 <llex.c:184:3> 'void (*)(LexState *, char, char)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7451fc0 <col:3> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
[B2.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, char, char))
   9: DeclRefExpr 0x561ce7452420 <llex.c:184:15> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce74525a0 <llex.c:184:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452420 <col:15> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: DeclRefExpr 0x561ce7452448 <llex.c:184:19> 'char' lvalue Var 0x561ce7451c50 'old' 'char'
old
  12: ImplicitCastExpr 0x561ce74525b8 <llex.c:184:19> 'char' <LValueToRValue>
`-DeclRefExpr 0x561ce7452448 <col:19> 'char' lvalue Var 0x561ce7451c50 'old' 'char'
[B2.11] (ImplicitCastExpr, LValueToRValue, char)
  13: DeclRefExpr 0x561ce7452470 <llex.c:184:24> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
  14: ImplicitCastExpr 0x561ce7452498 <llex.c:184:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452470 <col:24> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.13] (ImplicitCastExpr, LValueToRValue, LexState *)
  15: MemberExpr 0x561ce74524b0 <llex.c:184:24, col:28> 'char' lvalue ->decpoint 0x561ce7426d10
`-ImplicitCastExpr 0x561ce7452498 <col:24> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7452470 <col:24> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.14]->decpoint
  16: ImplicitCastExpr 0x561ce74525d0 <llex.c:184:24, col:28> 'char' <LValueToRValue>
`-MemberExpr 0x561ce74524b0 <col:24, col:28> 'char' lvalue ->decpoint 0x561ce7426d10
  `-ImplicitCastExpr 0x561ce7452498 <col:24> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7452470 <col:24> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.15] (ImplicitCastExpr, LValueToRValue, char)
  17: CallExpr 0x561ce7452560 <llex.c:184:3, col:36> 'void'
|-ImplicitCastExpr 0x561ce7452548 <col:3> 'void (*)(LexState *, char, char)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7451fc0 <col:3> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
|-ImplicitCastExpr 0x561ce74525a0 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7452420 <col:15> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce74525b8 <col:19> 'char' <LValueToRValue>
| `-DeclRefExpr 0x561ce7452448 <col:19> 'char' lvalue Var 0x561ce7451c50 'old' 'char'
`-ImplicitCastExpr 0x561ce74525d0 <col:24, col:28> 'char' <LValueToRValue>
  `-MemberExpr 0x561ce74524b0 <col:24, col:28> 'char' lvalue ->decpoint 0x561ce7426d10
    `-ImplicitCastExpr 0x561ce7452498 <col:24> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7452470 <col:24> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.8]([B2.10], [B2.12], [B2.16])
  18: DeclRefExpr 0x561ce74525e8 <llex.c:185:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
luaO_str2d
  19: ImplicitCastExpr 0x561ce7452808 <llex.c:185:8> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74525e8 <col:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
[B2.18] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, lua_Number *))
  20: DeclRefExpr 0x561ce7452610 <llex.c:185:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
  21: ImplicitCastExpr 0x561ce7452638 <llex.c:185:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.20] (ImplicitCastExpr, LValueToRValue, LexState *)
  22: MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.21]->buff
  23: ImplicitCastExpr 0x561ce74526a8 <./lzio.h:32:28, col:33> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7452688 <col:28, col:33> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
([B2.22]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  24: MemberExpr 0x561ce74526c0 <./lzio.h:32:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce74526a8 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7452688 <col:28, col:33> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.23]->buffer
  25: ImplicitCastExpr 0x561ce7452858 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
`-ParenExpr 0x561ce74526f8 <col:27, col:42> 'char *' lvalue
  `-MemberExpr 0x561ce74526c0 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
    `-ImplicitCastExpr 0x561ce74526a8 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce7452688 <col:28, col:33> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
([B2.24]) (ImplicitCastExpr, LValueToRValue, char *)
  26: ImplicitCastExpr 0x561ce7452870 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7452858 <col:27, col:42> 'char *' <LValueToRValue>
  `-ParenExpr 0x561ce74526f8 <col:27, col:42> 'char *' lvalue
    `-MemberExpr 0x561ce74526c0 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
      `-ImplicitCastExpr 0x561ce74526a8 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
        `-ParenExpr 0x561ce7452688 <col:28, col:33> 'Mbuffer *' lvalue
          `-MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
            `-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B2.25] (ImplicitCastExpr, BitCast, const char *)
  27: DeclRefExpr 0x561ce7452718 <llex.c:185:43> 'SemInfo *' lvalue ParmVar 0x561ce7451918 'seminfo' 'SemInfo *'
seminfo
  28: ImplicitCastExpr 0x561ce7452740 <llex.c:185:43> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452718 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7451918 'seminfo' 'SemInfo *'
[B2.27] (ImplicitCastExpr, LValueToRValue, SemInfo *)
  29: MemberExpr 0x561ce7452758 <llex.c:185:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
`-ImplicitCastExpr 0x561ce7452740 <col:43> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7452718 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7451918 'seminfo' 'SemInfo *'
[B2.28]->r
  30: UnaryOperator 0x561ce7452790 <llex.c:185:42, col:52> 'lua_Number *' prefix '&'
`-MemberExpr 0x561ce7452758 <col:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
  `-ImplicitCastExpr 0x561ce7452740 <col:43> 'SemInfo *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7452718 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7451918 'seminfo' 'SemInfo *'
&[B2.29]
  31: CallExpr 0x561ce7452820 <llex.c:185:8, col:53> 'int'
|-ImplicitCastExpr 0x561ce7452808 <col:8> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74525e8 <col:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
|-ImplicitCastExpr 0x561ce7452870 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce7452858 <col:27, col:42> 'char *' <LValueToRValue>
|   `-ParenExpr 0x561ce74526f8 <col:27, col:42> 'char *' lvalue
|     `-MemberExpr 0x561ce74526c0 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|       `-ImplicitCastExpr 0x561ce74526a8 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|         `-ParenExpr 0x561ce7452688 <col:28, col:33> 'Mbuffer *' lvalue
|           `-MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|             `-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
|               `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
`-UnaryOperator 0x561ce7452790 <col:42, col:52> 'lua_Number *' prefix '&'
  `-MemberExpr 0x561ce7452758 <col:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
    `-ImplicitCastExpr 0x561ce7452740 <col:43> 'SemInfo *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7452718 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7451918 'seminfo' 'SemInfo *'
[B2.19]([B2.26], [B2.30])
  32: UnaryOperator 0x561ce7452888 <llex.c:185:7, col:53> 'int' prefix '!'
`-CallExpr 0x561ce7452820 <col:8, col:53> 'int'
  |-ImplicitCastExpr 0x561ce7452808 <col:8> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce74525e8 <col:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
  |-ImplicitCastExpr 0x561ce7452870 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
  | `-ImplicitCastExpr 0x561ce7452858 <col:27, col:42> 'char *' <LValueToRValue>
  |   `-ParenExpr 0x561ce74526f8 <col:27, col:42> 'char *' lvalue
  |     `-MemberExpr 0x561ce74526c0 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |       `-ImplicitCastExpr 0x561ce74526a8 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |         `-ParenExpr 0x561ce7452688 <col:28, col:33> 'Mbuffer *' lvalue
  |           `-MemberExpr 0x561ce7452650 <llex.c:185:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |             `-ImplicitCastExpr 0x561ce7452638 <col:31> 'LexState *' <LValueToRValue>
  |               `-DeclRefExpr 0x561ce7452610 <col:31> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
  `-UnaryOperator 0x561ce7452790 <col:42, col:52> 'lua_Number *' prefix '&'
    `-MemberExpr 0x561ce7452758 <col:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
      `-ImplicitCastExpr 0x561ce7452740 <col:43> 'SemInfo *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7452718 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7451918 'seminfo' 'SemInfo *'
![B2.31]
   T: if [B2.32]
   Preds (2): B3 B4
   Succs (2): B1 B0

 [B3]
   1: DeclRefExpr 0x561ce7451df8 <llex.c:183:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
cv
   2: ImplicitCastExpr 0x561ce7451e20 <llex.c:183:24> 'struct lconv *' <LValueToRValue>
`-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
[B3.1] (ImplicitCastExpr, LValueToRValue, struct lconv *)
   3: MemberExpr 0x561ce7451e38 <llex.c:183:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
`-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
[B3.2]->decimal_point
   4: ImplicitCastExpr 0x561ce7451e90 <llex.c:183:24, col:28> 'char *' <LValueToRValue>
`-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
  `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
[B3.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: IntegerLiteral 0x561ce7451e70 <llex.c:183:42> 'int' 0
0
   6: ArraySubscriptExpr 0x561ce7451ea8 <llex.c:183:24, col:43> 'char' lvalue
|-ImplicitCastExpr 0x561ce7451e90 <col:24, col:28> 'char *' <LValueToRValue>
| `-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
|   `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
`-IntegerLiteral 0x561ce7451e70 <col:42> 'int' 0
[B3.4][[B3.5]]
   7: ImplicitCastExpr 0x561ce7451f00 <llex.c:183:24, col:43> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce7451ea8 <col:24, col:43> 'char' lvalue
  |-ImplicitCastExpr 0x561ce7451e90 <col:24, col:28> 'char *' <LValueToRValue>
  | `-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
  |   `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
  |     `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
  `-IntegerLiteral 0x561ce7451e70 <col:42> 'int' 0
[B3.6] (ImplicitCastExpr, LValueToRValue, char)
   8: ImplicitCastExpr 0x561ce7451f18 <llex.c:183:24, col:43> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce7451f00 <col:24, col:43> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce7451ea8 <col:24, col:43> 'char' lvalue
    |-ImplicitCastExpr 0x561ce7451e90 <col:24, col:28> 'char *' <LValueToRValue>
    | `-MemberExpr 0x561ce7451e38 <col:24, col:28> 'char *' lvalue ->decimal_point 0x561ce7316258
    |   `-ImplicitCastExpr 0x561ce7451e20 <col:24> 'struct lconv *' <LValueToRValue>
    |     `-DeclRefExpr 0x561ce7451df8 <col:24> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
    `-IntegerLiteral 0x561ce7451e70 <col:42> 'int' 0
[B3.7] (ImplicitCastExpr, IntegralCast, int)
   Preds (1): B5
   Succs (1): B2

 [B4]
   1: CharacterLiteral 0x561ce7451ed0 <llex.c:183:47> 'int' 46
'.'
   Preds (1): B5
   Succs (1): B2

 [B5]
   1: DeclRefExpr 0x561ce7451b68 <llex.c:181:22> 'struct lconv *(void)' Function 0x561ce7316ec8 'localeconv' 'struct lconv *(void)'
localeconv
   2: ImplicitCastExpr 0x561ce7451be8 <llex.c:181:22> 'struct lconv *(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7451b68 <col:22> 'struct lconv *(void)' Function 0x561ce7316ec8 'localeconv' 'struct lconv *(void)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, struct lconv *(*)(void))
   3: CallExpr 0x561ce7451c00 <llex.c:181:22, col:33> 'struct lconv *'
`-ImplicitCastExpr 0x561ce7451be8 <col:22> 'struct lconv *(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce7451b68 <col:22> 'struct lconv *(void)' Function 0x561ce7316ec8 'localeconv' 'struct lconv *(void)'
[B5.2]()
   4: DeclStmt 0x561ce7451c28 <llex.c:181:3, col:34>col:17
`-VarDecl 0x561ce7451b08 <col:3, col:33> col:17 used cv 'struct lconv *' cinit
  `-CallExpr 0x561ce7451c00 <col:22, col:33> 'struct lconv *'
    `-ImplicitCastExpr 0x561ce7451be8 <col:22> 'struct lconv *(*)(void)' <FunctionToPointerDecay>
      `-DeclRefExpr 0x561ce7451b68 <col:22> 'struct lconv *(void)' Function 0x561ce7316ec8 'localeconv' 'struct lconv *(void)'
struct lconv *cv = localeconv();
   5: DeclRefExpr 0x561ce7451cb0 <llex.c:182:14> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7451cd8 <llex.c:182:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7451cb0 <col:14> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B5.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7451cf0 <llex.c:182:14, col:18> 'char' lvalue ->decpoint 0x561ce7426d10
`-ImplicitCastExpr 0x561ce7451cd8 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7451cb0 <col:14> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B5.6]->decpoint
   8: ImplicitCastExpr 0x561ce7451d28 <llex.c:182:14, col:18> 'char' <LValueToRValue>
`-MemberExpr 0x561ce7451cf0 <col:14, col:18> 'char' lvalue ->decpoint 0x561ce7426d10
  `-ImplicitCastExpr 0x561ce7451cd8 <col:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7451cb0 <col:14> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
[B5.7] (ImplicitCastExpr, LValueToRValue, char)
   9: DeclStmt 0x561ce7451d40 <llex.c:182:3, col:26>col:8
`-VarDecl 0x561ce7451c50 <col:3, col:18> col:8 used old 'char' cinit
  `-ImplicitCastExpr 0x561ce7451d28 <col:14, col:18> 'char' <LValueToRValue>
    `-MemberExpr 0x561ce7451cf0 <col:14, col:18> 'char' lvalue ->decpoint 0x561ce7426d10
      `-ImplicitCastExpr 0x561ce7451cd8 <col:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7451cb0 <col:14> 'LexState *' lvalue ParmVar 0x561ce7451850 'ls' 'LexState *'
char old = ls->decpoint;
  10: DeclRefExpr 0x561ce7451dd0 <llex.c:183:19> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
cv
  11: ImplicitCastExpr 0x561ce7451ee8 <llex.c:183:19> 'struct lconv *' <LValueToRValue>
`-DeclRefExpr 0x561ce7451dd0 <col:19> 'struct lconv *' lvalue Var 0x561ce7451b08 'cv' 'struct lconv *'
[B5.10] (ImplicitCastExpr, LValueToRValue, struct lconv *)
   T: [B5.11] ? ... : ...
   Preds (1): B6
   Succs (2): B3 B4

 [B0 (EXIT)]
   Preds (2): B1 B2
