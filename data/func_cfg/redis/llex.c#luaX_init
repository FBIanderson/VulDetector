void luaX_init(lua_State *L)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x561ce7445758 <llex.c:66:29> 'int' lvalue Var 0x561ce7445480 'i' 'int'
i
   2: UnaryOperator 0x561ce7445780 <llex.c:66:29, col:30> 'int' postfix '++'
`-DeclRefExpr 0x561ce7445758 <col:29> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B1.1]++
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: DeclRefExpr 0x561ce7445810 <./lstring.h:20:25> 'TString *(lua_State *, const char *, size_t)' Function 0x561ce743a1e0 'luaS_newlstr' 'TString *(lua_State *, const char *, size_t)'
luaS_newlstr
   2: ImplicitCastExpr 0x561ce7445b08 <./lstring.h:20:25> 'TString *(*)(lua_State *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7445810 <col:25> 'TString *(lua_State *, const char *, size_t)' Function 0x561ce743a1e0 'luaS_newlstr' 'TString *(lua_State *, const char *, size_t)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(lua_State *, const char *, size_t))
   3: DeclRefExpr 0x561ce7445838 <llex.c:67:28> 'lua_State *' lvalue ParmVar 0x561ce74452f0 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x561ce7445b60 <llex.c:67:28> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x561ce7445838 <col:28> 'lua_State *' lvalue ParmVar 0x561ce74452f0 'L' 'lua_State *'
[B2.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x561ce7445860 <llex.c:67:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
luaX_tokens
   6: ImplicitCastExpr 0x561ce74458d8 <llex.c:67:31> 'const char *const *' <ArrayToPointerDecay>
`-DeclRefExpr 0x561ce7445860 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
[B2.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *const *)
   7: DeclRefExpr 0x561ce7445888 <llex.c:67:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
i
   8: ImplicitCastExpr 0x561ce74458f0 <llex.c:67:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7445888 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ArraySubscriptExpr 0x561ce7445908 <llex.c:67:31, col:44> 'const char *const' lvalue
|-ImplicitCastExpr 0x561ce74458d8 <col:31> 'const char *const *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x561ce7445860 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
`-ImplicitCastExpr 0x561ce74458f0 <col:43> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7445888 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.6][[B2.8]]
  10: ImplicitCastExpr 0x561ce7445b78 <llex.c:67:31, col:44> 'const char *' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce7445908 <col:31, col:44> 'const char *const' lvalue
  |-ImplicitCastExpr 0x561ce74458d8 <col:31> 'const char *const *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x561ce7445860 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
  `-ImplicitCastExpr 0x561ce74458f0 <col:43> 'int' <LValueToRValue>
    `-DeclRefExpr 0x561ce7445888 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.9] (ImplicitCastExpr, LValueToRValue, const char *)
  11: DeclRefExpr 0x561ce7445930 <./lstring.h:20:44> 'unsigned long (const char *)' Function 0x561ce73346d8 'strlen' 'unsigned long (const char *)'
strlen
  12: ImplicitCastExpr 0x561ce7445a48 <./lstring.h:20:44> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7445930 <col:44> 'unsigned long (const char *)' Function 0x561ce73346d8 'strlen' 'unsigned long (const char *)'
[B2.11] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long (*)(const char *))
  13: DeclRefExpr 0x561ce7445958 <llex.c:67:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
luaX_tokens
  14: ImplicitCastExpr 0x561ce74459a8 <llex.c:67:31> 'const char *const *' <ArrayToPointerDecay>
`-DeclRefExpr 0x561ce7445958 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
[B2.13] (ImplicitCastExpr, ArrayToPointerDecay, const char *const *)
  15: DeclRefExpr 0x561ce7445980 <llex.c:67:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
i
  16: ImplicitCastExpr 0x561ce74459c0 <llex.c:67:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7445980 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: ArraySubscriptExpr 0x561ce74459d8 <llex.c:67:31, col:44> 'const char *const' lvalue
|-ImplicitCastExpr 0x561ce74459a8 <col:31> 'const char *const *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x561ce7445958 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
`-ImplicitCastExpr 0x561ce74459c0 <col:43> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7445980 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.14][[B2.16]]
  18: ImplicitCastExpr 0x561ce7445a90 <llex.c:67:31, col:44> 'const char *' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce74459d8 <col:31, col:44> 'const char *const' lvalue
  |-ImplicitCastExpr 0x561ce74459a8 <col:31> 'const char *const *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x561ce7445958 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
  `-ImplicitCastExpr 0x561ce74459c0 <col:43> 'int' <LValueToRValue>
    `-DeclRefExpr 0x561ce7445980 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.17] (ImplicitCastExpr, LValueToRValue, const char *)
  19: CallExpr 0x561ce7445a60 <./lstring.h:20:44, col:52> 'unsigned long'
|-ImplicitCastExpr 0x561ce7445a48 <col:44> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7445930 <col:44> 'unsigned long (const char *)' Function 0x561ce73346d8 'strlen' 'unsigned long (const char *)'
`-ImplicitCastExpr 0x561ce7445a90 <llex.c:67:31, col:44> 'const char *' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce74459d8 <col:31, col:44> 'const char *const' lvalue
    |-ImplicitCastExpr 0x561ce74459a8 <col:31> 'const char *const *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x561ce7445958 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
    `-ImplicitCastExpr 0x561ce74459c0 <col:43> 'int' <LValueToRValue>
      `-DeclRefExpr 0x561ce7445980 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.12]([B2.18])
  20: CallExpr 0x561ce7445b20 <./lstring.h:20:25, col:53> 'TString *'
|-ImplicitCastExpr 0x561ce7445b08 <col:25> 'TString *(*)(lua_State *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7445810 <col:25> 'TString *(lua_State *, const char *, size_t)' Function 0x561ce743a1e0 'luaS_newlstr' 'TString *(lua_State *, const char *, size_t)'
|-ImplicitCastExpr 0x561ce7445b60 <llex.c:67:28> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7445838 <col:28> 'lua_State *' lvalue ParmVar 0x561ce74452f0 'L' 'lua_State *'
|-ImplicitCastExpr 0x561ce7445b78 <col:31, col:44> 'const char *' <LValueToRValue>
| `-ArraySubscriptExpr 0x561ce7445908 <col:31, col:44> 'const char *const' lvalue
|   |-ImplicitCastExpr 0x561ce74458d8 <col:31> 'const char *const *' <ArrayToPointerDecay>
|   | `-DeclRefExpr 0x561ce7445860 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
|   `-ImplicitCastExpr 0x561ce74458f0 <col:43> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7445888 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
`-CallExpr 0x561ce7445a60 <./lstring.h:20:44, col:52> 'unsigned long'
  |-ImplicitCastExpr 0x561ce7445a48 <col:44> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7445930 <col:44> 'unsigned long (const char *)' Function 0x561ce73346d8 'strlen' 'unsigned long (const char *)'
  `-ImplicitCastExpr 0x561ce7445a90 <llex.c:67:31, col:44> 'const char *' <LValueToRValue>
    `-ArraySubscriptExpr 0x561ce74459d8 <col:31, col:44> 'const char *const' lvalue
      |-ImplicitCastExpr 0x561ce74459a8 <col:31> 'const char *const *' <ArrayToPointerDecay>
      | `-DeclRefExpr 0x561ce7445958 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
      `-ImplicitCastExpr 0x561ce74459c0 <col:43> 'int' <LValueToRValue>
        `-DeclRefExpr 0x561ce7445980 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.2]([B2.4], [B2.10], [B2.19])
  21: DeclStmt 0x561ce7445bb0 <llex.c:67:5, col:46>col:14
`-VarDecl 0x561ce74457b0 <col:5, ./lstring.h:20:54> llex.c:67:14 used ts 'TString *' cinit
  `-ParenExpr 0x561ce7445b90 <./lstring.h:20:24, col:54> 'TString *'
    `-CallExpr 0x561ce7445b20 <col:25, col:53> 'TString *'
      |-ImplicitCastExpr 0x561ce7445b08 <col:25> 'TString *(*)(lua_State *, const char *, size_t)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7445810 <col:25> 'TString *(lua_State *, const char *, size_t)' Function 0x561ce743a1e0 'luaS_newlstr' 'TString *(lua_State *, const char *, size_t)'
      |-ImplicitCastExpr 0x561ce7445b60 <llex.c:67:28> 'lua_State *' <LValueToRValue>
      | `-DeclRefExpr 0x561ce7445838 <col:28> 'lua_State *' lvalue ParmVar 0x561ce74452f0 'L' 'lua_State *'
      |-ImplicitCastExpr 0x561ce7445b78 <col:31, col:44> 'const char *' <LValueToRValue>
      | `-ArraySubscriptExpr 0x561ce7445908 <col:31, col:44> 'const char *const' lvalue
      |   |-ImplicitCastExpr 0x561ce74458d8 <col:31> 'const char *const *' <ArrayToPointerDecay>
      |   | `-DeclRefExpr 0x561ce7445860 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
      |   `-ImplicitCastExpr 0x561ce74458f0 <col:43> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x561ce7445888 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
      `-CallExpr 0x561ce7445a60 <./lstring.h:20:44, col:52> 'unsigned long'
        |-ImplicitCastExpr 0x561ce7445a48 <col:44> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x561ce7445930 <col:44> 'unsigned long (const char *)' Function 0x561ce73346d8 'strlen' 'unsigned long (const char *)'
        `-ImplicitCastExpr 0x561ce7445a90 <llex.c:67:31, col:44> 'const char *' <LValueToRValue>
          `-ArraySubscriptExpr 0x561ce74459d8 <col:31, col:44> 'const char *const' lvalue
            |-ImplicitCastExpr 0x561ce74459a8 <col:31> 'const char *const *' <ArrayToPointerDecay>
            | `-DeclRefExpr 0x561ce7445958 <col:31> 'const char *const [32]' lvalue Var 0x561ce743dfc0 'luaX_tokens' 'const char *const [32]'
            `-ImplicitCastExpr 0x561ce74459c0 <col:43> 'int' <LValueToRValue>
              `-DeclRefExpr 0x561ce7445980 <col:43> 'int' lvalue Var 0x561ce7445480 'i' 'int'
TString *ts = (luaS_newlstr(L, luaX_tokens[i], strlen(luaX_tokens[i])));
  22: DeclRefExpr 0x561ce7445bc8 <llex.c:68:14> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
ts
  23: ImplicitCastExpr 0x561ce7445c10 <./lstring.h:24:30, col:32> 'TString *' <LValueToRValue>
`-ParenExpr 0x561ce7445bf0 <col:30, col:32> 'TString *' lvalue
  `-DeclRefExpr 0x561ce7445bc8 <llex.c:68:14> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
([B2.22]) (ImplicitCastExpr, LValueToRValue, TString *)
  24: MemberExpr 0x561ce7445c28 <./lstring.h:24:30, col:35> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
`-ImplicitCastExpr 0x561ce7445c10 <col:30, col:32> 'TString *' <LValueToRValue>
  `-ParenExpr 0x561ce7445bf0 <col:30, col:32> 'TString *' lvalue
    `-DeclRefExpr 0x561ce7445bc8 <llex.c:68:14> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
[B2.23]->tsv
  25: MemberExpr 0x561ce7445c60 <./lstring.h:24:30, col:39> 'lu_byte':'unsigned char' lvalue .marked 0x561ce73f3370
`-MemberExpr 0x561ce7445c28 <col:30, col:35> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
  `-ImplicitCastExpr 0x561ce7445c10 <col:30, col:32> 'TString *' <LValueToRValue>
    `-ParenExpr 0x561ce7445bf0 <col:30, col:32> 'TString *' lvalue
      `-DeclRefExpr 0x561ce7445bc8 <llex.c:68:14> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
[B2.24].marked
  26: IntegerLiteral 0x561ce7445cb8 <./lgc.h:30:21> 'int' 1
1
  27: IntegerLiteral 0x561ce7445cd8 <./lgc.h:60:18> 'int' 5
5
  28: BinaryOperator 0x561ce7445d18 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x561ce7445cb8 <col:21> 'int' 1
`-ParenExpr 0x561ce7445cf8 <col:24, col:26> 'int'
  `-IntegerLiteral 0x561ce7445cd8 <line:60:18> 'int' 5
[B2.26] << ([B2.27])
  29: CompoundAssignOperator 0x561ce7445d80 <./lgc.h:28:23, col:32> 'lu_byte':'unsigned char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|-ParenExpr 0x561ce7445c98 <col:23, col:25> 'lu_byte':'unsigned char' lvalue
| `-MemberExpr 0x561ce7445c60 <./lstring.h:24:30, col:39> 'lu_byte':'unsigned char' lvalue .marked 0x561ce73f3370
|   `-MemberExpr 0x561ce7445c28 <col:30, col:35> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
|     `-ImplicitCastExpr 0x561ce7445c10 <col:30, col:32> 'TString *' <LValueToRValue>
|       `-ParenExpr 0x561ce7445bf0 <col:30, col:32> 'TString *' lvalue
|         `-DeclRefExpr 0x561ce7445bc8 <llex.c:68:14> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
`-ParenExpr 0x561ce7445d60 <./lgc.h:28:30, col:32> 'int'
  `-ParenExpr 0x561ce7445d40 <line:30:20, col:27> 'int'
    `-BinaryOperator 0x561ce7445d18 <col:21, col:26> 'int' '<<'
      |-IntegerLiteral 0x561ce7445cb8 <col:21> 'int' 1
      `-ParenExpr 0x561ce7445cf8 <col:24, col:26> 'int'
        `-IntegerLiteral 0x561ce7445cd8 <line:60:18> 'int' 5
([B2.25]) |= (([B2.28]))
  30: IntegerLiteral 0x561ce7445dd8 <./llimits.h:62:31> 'int' 0
0
  31: CStyleCastExpr 0x561ce7445e08 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x561ce7445dd8 <col:31> 'int' 0
(void)[B2.30] (CStyleCastExpr, ToVoid, void)
  32: DeclRefExpr 0x561ce7445f00 <llex.c:70:34> 'int' lvalue Var 0x561ce7445480 'i' 'int'
i
  33: ImplicitCastExpr 0x561ce7445f48 <llex.c:70:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7445f00 <col:34> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B2.32] (ImplicitCastExpr, LValueToRValue, int)
  34: IntegerLiteral 0x561ce7445f28 <llex.c:70:36> 'int' 1
1
  35: BinaryOperator 0x561ce7445f60 <llex.c:70:34, col:36> 'int' '+'
|-ImplicitCastExpr 0x561ce7445f48 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce7445f00 <col:34> 'int' lvalue Var 0x561ce7445480 'i' 'int'
`-IntegerLiteral 0x561ce7445f28 <col:36> 'int' 1
[B2.33] + [B2.34]
  36: CStyleCastExpr 0x561ce7446008 <./llimits.h:75:23, col:30> 'lu_byte':'unsigned char' <IntegralCast>
`-ParenExpr 0x561ce7445fe8 <col:26, col:30> 'int'
  `-ParenExpr 0x561ce7445f88 <line:78:36, col:38> 'int'
    `-BinaryOperator 0x561ce7445f60 <llex.c:70:34, col:36> 'int' '+'
      |-ImplicitCastExpr 0x561ce7445f48 <col:34> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x561ce7445f00 <col:34> 'int' lvalue Var 0x561ce7445480 'i' 'int'
      `-IntegerLiteral 0x561ce7445f28 <col:36> 'int' 1
(lu_byte)(([B2.35])) (CStyleCastExpr, IntegralCast, lu_byte)
  37: DeclRefExpr 0x561ce7445e50 <llex.c:70:5> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
ts
  38: ImplicitCastExpr 0x561ce7445e78 <llex.c:70:5> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x561ce7445e50 <col:5> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
[B2.37] (ImplicitCastExpr, LValueToRValue, TString *)
  39: MemberExpr 0x561ce7445e90 <llex.c:70:5, col:9> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
`-ImplicitCastExpr 0x561ce7445e78 <col:5> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7445e50 <col:5> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
[B2.38]->tsv
  40: MemberExpr 0x561ce7445ec8 <llex.c:70:5, col:13> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
`-MemberExpr 0x561ce7445e90 <col:5, col:9> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
  `-ImplicitCastExpr 0x561ce7445e78 <col:5> 'TString *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7445e50 <col:5> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
[B2.39].reserved
  41: BinaryOperator 0x561ce7446050 <llex.c:70:5, ./llimits.h:75:31> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x561ce7445ec8 <llex.c:70:5, col:13> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
| `-MemberExpr 0x561ce7445e90 <col:5, col:9> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
|   `-ImplicitCastExpr 0x561ce7445e78 <col:5> 'TString *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7445e50 <col:5> 'TString *' lvalue Var 0x561ce74457b0 'ts' 'TString *'
`-ParenExpr 0x561ce7446030 <./llimits.h:75:22, col:31> 'lu_byte':'unsigned char'
  `-CStyleCastExpr 0x561ce7446008 <col:23, col:30> 'lu_byte':'unsigned char' <IntegralCast>
    `-ParenExpr 0x561ce7445fe8 <col:26, col:30> 'int'
      `-ParenExpr 0x561ce7445f88 <line:78:36, col:38> 'int'
        `-BinaryOperator 0x561ce7445f60 <llex.c:70:34, col:36> 'int' '+'
          |-ImplicitCastExpr 0x561ce7445f48 <col:34> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x561ce7445f00 <col:34> 'int' lvalue Var 0x561ce7445480 'i' 'int'
          `-IntegerLiteral 0x561ce7445f28 <col:36> 'int' 1
[B2.40] = ([B2.36])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x561ce7445568 <llex.c:66:13> 'int' lvalue Var 0x561ce7445480 'i' 'int'
i
   2: ImplicitCastExpr 0x561ce7445718 <llex.c:66:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7445568 <col:13> 'int' lvalue Var 0x561ce7445480 'i' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x561ce7445590 <./llex.h:36:33> 'int' EnumConstant 0x561ce7424cb0 'TK_WHILE' 'int'
TK_WHILE
   4: IntegerLiteral 0x561ce74455b8 <./llex.h:14:24> 'int' 257
257
   5: BinaryOperator 0x561ce74455d8 <./llex.h:36:33, line:14:24> 'int' '-'
|-DeclRefExpr 0x561ce7445590 <line:36:33> 'int' EnumConstant 0x561ce7424cb0 'TK_WHILE' 'int'
`-IntegerLiteral 0x561ce74455b8 <line:14:24> 'int' 257
[B3.3] - [B3.4]
   6: IntegerLiteral 0x561ce7445600 <./llex.h:36:57> 'int' 1
1
   7: BinaryOperator 0x561ce7445620 <./llex.h:36:33, col:57> 'int' '+'
|-BinaryOperator 0x561ce74455d8 <col:33, line:14:24> 'int' '-'
| |-DeclRefExpr 0x561ce7445590 <line:36:33> 'int' EnumConstant 0x561ce7424cb0 'TK_WHILE' 'int'
| `-IntegerLiteral 0x561ce74455b8 <line:14:24> 'int' 257
`-IntegerLiteral 0x561ce7445600 <line:36:57> 'int' 1
[B3.5] + [B3.6]
   8: CStyleCastExpr 0x561ce74456b0 <./llimits.h:75:23, col:30> 'int' <NoOp>
`-ParenExpr 0x561ce7445690 <col:26, col:30> 'int'
  `-BinaryOperator 0x561ce7445620 <./llex.h:36:33, col:57> 'int' '+'
    |-BinaryOperator 0x561ce74455d8 <col:33, line:14:24> 'int' '-'
    | |-DeclRefExpr 0x561ce7445590 <line:36:33> 'int' EnumConstant 0x561ce7424cb0 'TK_WHILE' 'int'
    | `-IntegerLiteral 0x561ce74455b8 <line:14:24> 'int' 257
    `-IntegerLiteral 0x561ce7445600 <line:36:57> 'int' 1
(int)([B3.7]) (CStyleCastExpr, NoOp, int)
   9: BinaryOperator 0x561ce7445730 <llex.c:66:13, ./llex.h:36:59> 'int' '<'
|-ImplicitCastExpr 0x561ce7445718 <llex.c:66:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce7445568 <col:13> 'int' lvalue Var 0x561ce7445480 'i' 'int'
`-ParenExpr 0x561ce74456f8 <./llex.h:36:22, col:59> 'int'
  `-ParenExpr 0x561ce74456d8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x561ce74456b0 <col:23, col:30> 'int' <NoOp>
      `-ParenExpr 0x561ce7445690 <col:26, col:30> 'int'
        `-BinaryOperator 0x561ce7445620 <./llex.h:36:33, col:57> 'int' '+'
          |-BinaryOperator 0x561ce74455d8 <col:33, line:14:24> 'int' '-'
          | |-DeclRefExpr 0x561ce7445590 <line:36:33> 'int' EnumConstant 0x561ce7424cb0 'TK_WHILE' 'int'
          | `-IntegerLiteral 0x561ce74455b8 <line:14:24> 'int' 257
          `-IntegerLiteral 0x561ce7445600 <line:36:57> 'int' 1
[B3.2] < (([B3.8]))
   T: for (...; [B3.9]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: DeclStmt 0x561ce74454e0 <llex.c:65:3, col:8>col:7
`-VarDecl 0x561ce7445480 <col:3, col:7> col:7 used i 'int'
int i;
   2: IntegerLiteral 0x561ce7445520 <llex.c:66:10> 'int' 0
0
   3: DeclRefExpr 0x561ce74454f8 <llex.c:66:8> 'int' lvalue Var 0x561ce7445480 'i' 'int'
i
   4: BinaryOperator 0x561ce7445540 <llex.c:66:8, col:10> 'int' '='
|-DeclRefExpr 0x561ce74454f8 <col:8> 'int' lvalue Var 0x561ce7445480 'i' 'int'
`-IntegerLiteral 0x561ce7445520 <col:10> 'int' 0
[B4.3] = [B4.2]
   Preds (1): B5
   Succs (1): B3

 [B0 (EXIT)]
   Preds (1): B3
