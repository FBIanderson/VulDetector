static int read_number(lua_State *L, FILE *f)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x5643dfe681c0 <liolib.c:280:5> 'void (lua_State *)':'void (lua_State *)' Function 0x5643dfe39fa8 'lua_pushnil' 'void (lua_State *)':'void (lua_State *)'
lua_pushnil
   2: ImplicitCastExpr 0x5643dfe68220 <liolib.c:280:5> 'void (*)(lua_State *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5643dfe681c0 <col:5> 'void (lua_State *)':'void (lua_State *)' Function 0x5643dfe39fa8 'lua_pushnil' 'void (lua_State *)':'void (lua_State *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *))
   3: DeclRefExpr 0x5643dfe681e8 <liolib.c:280:17> 'lua_State *' lvalue ParmVar 0x5643dfe67b08 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5643dfe68268 <liolib.c:280:17> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5643dfe681e8 <col:17> 'lua_State *' lvalue ParmVar 0x5643dfe67b08 'L' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: CallExpr 0x5643dfe68238 <liolib.c:280:5, col:18> 'void'
|-ImplicitCastExpr 0x5643dfe68220 <col:5> 'void (*)(lua_State *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5643dfe681c0 <col:5> 'void (lua_State *)':'void (lua_State *)' Function 0x5643dfe39fa8 'lua_pushnil' 'void (lua_State *)':'void (lua_State *)'
`-ImplicitCastExpr 0x5643dfe68268 <col:17> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5643dfe681e8 <col:17> 'lua_State *' lvalue ParmVar 0x5643dfe67b08 'L' 'lua_State *'
[B1.2]([B1.4])
   6: IntegerLiteral 0x5643dfe68280 <liolib.c:281:12> 'int' 0
0
   7: ReturnStmt 0x5643dfe682a0 <liolib.c:281:5, col:12>
`-IntegerLiteral 0x5643dfe68280 <col:12> 'int' 0
return [B1.6];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5643dfe68010 <liolib.c:276:5> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x5643dfe3a230 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
lua_pushnumber
   2: ImplicitCastExpr 0x5643dfe680e8 <liolib.c:276:5> 'void (*)(lua_State *, lua_Number)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5643dfe68010 <col:5> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x5643dfe3a230 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, lua_Number))
   3: DeclRefExpr 0x5643dfe68038 <liolib.c:276:20> 'lua_State *' lvalue ParmVar 0x5643dfe67b08 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5643dfe68138 <liolib.c:276:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5643dfe68038 <col:20> 'lua_State *' lvalue ParmVar 0x5643dfe67b08 'L' 'lua_State *'
[B2.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5643dfe68060 <liolib.c:276:23> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
d
   6: ImplicitCastExpr 0x5643dfe68150 <liolib.c:276:23> 'lua_Number':'double' <LValueToRValue>
`-DeclRefExpr 0x5643dfe68060 <col:23> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
[B2.5] (ImplicitCastExpr, LValueToRValue, lua_Number)
   7: CallExpr 0x5643dfe68100 <liolib.c:276:5, col:24> 'void'
|-ImplicitCastExpr 0x5643dfe680e8 <col:5> 'void (*)(lua_State *, lua_Number)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5643dfe68010 <col:5> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x5643dfe3a230 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
|-ImplicitCastExpr 0x5643dfe68138 <col:20> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5643dfe68038 <col:20> 'lua_State *' lvalue ParmVar 0x5643dfe67b08 'L' 'lua_State *'
`-ImplicitCastExpr 0x5643dfe68150 <col:23> 'lua_Number':'double' <LValueToRValue>
  `-DeclRefExpr 0x5643dfe68060 <col:23> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
[B2.2]([B2.4], [B2.6])
   8: IntegerLiteral 0x5643dfe68168 <liolib.c:277:12> 'int' 1
1
   9: ReturnStmt 0x5643dfe68188 <liolib.c:277:5, col:12>
`-IntegerLiteral 0x5643dfe68168 <col:12> 'int' 1
return [B2.8];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclStmt 0x5643dfe67db8 <liolib.c:274:3, col:15>col:14
`-VarDecl 0x5643dfe67d58 <col:3, col:14> col:14 used d 'lua_Number':'double'
lua_Number d;
   2: DeclRefExpr 0x5643dfe67dd0 <liolib.c:275:7> 'int (FILE *__restrict, const char *__restrict, ...)' Function 0x5643dfd89cf0 'fscanf' 'int (FILE *__restrict, const char *__restrict, ...)'
fscanf
   3: ImplicitCastExpr 0x5643dfe67f28 <liolib.c:275:7> 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5643dfe67dd0 <col:7> 'int (FILE *__restrict, const char *__restrict, ...)' Function 0x5643dfd89cf0 'fscanf' 'int (FILE *__restrict, const char *__restrict, ...)'
[B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FILE *__restrict, const char *__restrict, ...))
   4: DeclRefExpr 0x5643dfe67df8 <liolib.c:275:14> 'FILE *' lvalue ParmVar 0x5643dfe67b78 'f' 'FILE *'
f
   5: ImplicitCastExpr 0x5643dfe67f80 <liolib.c:275:14> 'FILE *' <LValueToRValue>
`-DeclRefExpr 0x5643dfe67df8 <col:14> 'FILE *' lvalue ParmVar 0x5643dfe67b78 'f' 'FILE *'
[B3.4] (ImplicitCastExpr, LValueToRValue, FILE *)
   6: StringLiteral 0x5643dfe67e20 <./luaconf.h:521:26> 'char [4]' lvalue "%lf"
"%lf"
   7: ImplicitCastExpr 0x5643dfe67f98 <./luaconf.h:521:26> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5643dfe67e20 <col:26> 'char [4]' lvalue "%lf"
[B3.6] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   8: ImplicitCastExpr 0x5643dfe67fb0 <./luaconf.h:521:26> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5643dfe67f98 <col:26> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5643dfe67e20 <col:26> 'char [4]' lvalue "%lf"
[B3.7] (ImplicitCastExpr, BitCast, const char *)
   9: DeclRefExpr 0x5643dfe67e50 <liolib.c:275:35> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
d
  10: UnaryOperator 0x5643dfe67ea8 <liolib.c:275:34, col:35> 'lua_Number *' prefix '&'
`-DeclRefExpr 0x5643dfe67e50 <col:35> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
&[B3.9]
  11: CallExpr 0x5643dfe67f40 <liolib.c:275:7, col:36> 'int'
|-ImplicitCastExpr 0x5643dfe67f28 <col:7> 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5643dfe67dd0 <col:7> 'int (FILE *__restrict, const char *__restrict, ...)' Function 0x5643dfd89cf0 'fscanf' 'int (FILE *__restrict, const char *__restrict, ...)'
|-ImplicitCastExpr 0x5643dfe67f80 <col:14> 'FILE *' <LValueToRValue>
| `-DeclRefExpr 0x5643dfe67df8 <col:14> 'FILE *' lvalue ParmVar 0x5643dfe67b78 'f' 'FILE *'
|-ImplicitCastExpr 0x5643dfe67fb0 <./luaconf.h:521:26> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x5643dfe67f98 <col:26> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x5643dfe67e20 <col:26> 'char [4]' lvalue "%lf"
`-UnaryOperator 0x5643dfe67ea8 <liolib.c:275:34, col:35> 'lua_Number *' prefix '&'
  `-DeclRefExpr 0x5643dfe67e50 <col:35> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
[B3.3]([B3.5], [B3.8], [B3.10])
  12: IntegerLiteral 0x5643dfe67fc8 <liolib.c:275:41> 'int' 1
1
  13: BinaryOperator 0x5643dfe67fe8 <liolib.c:275:7, col:41> 'int' '=='
|-CallExpr 0x5643dfe67f40 <col:7, col:36> 'int'
| |-ImplicitCastExpr 0x5643dfe67f28 <col:7> 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5643dfe67dd0 <col:7> 'int (FILE *__restrict, const char *__restrict, ...)' Function 0x5643dfd89cf0 'fscanf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |-ImplicitCastExpr 0x5643dfe67f80 <col:14> 'FILE *' <LValueToRValue>
| | `-DeclRefExpr 0x5643dfe67df8 <col:14> 'FILE *' lvalue ParmVar 0x5643dfe67b78 'f' 'FILE *'
| |-ImplicitCastExpr 0x5643dfe67fb0 <./luaconf.h:521:26> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x5643dfe67f98 <col:26> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x5643dfe67e20 <col:26> 'char [4]' lvalue "%lf"
| `-UnaryOperator 0x5643dfe67ea8 <liolib.c:275:34, col:35> 'lua_Number *' prefix '&'
|   `-DeclRefExpr 0x5643dfe67e50 <col:35> 'lua_Number':'double' lvalue Var 0x5643dfe67d58 'd' 'lua_Number':'double'
`-IntegerLiteral 0x5643dfe67fc8 <col:41> 'int' 1
[B3.11] == [B3.12]
   T: if [B3.13]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
