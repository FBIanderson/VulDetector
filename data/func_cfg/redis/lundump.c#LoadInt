static int LoadInt(LoadState *S)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x56282186b0b0 <lundump.c:66:9> 'int' lvalue Var 0x56282186abf8 'x' 'int'
x
   2: ImplicitCastExpr 0x56282186b0d8 <lundump.c:66:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x56282186b0b0 <col:9> 'int' lvalue Var 0x56282186abf8 'x' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x56282186b0f0 <lundump.c:66:2, col:9>
`-ImplicitCastExpr 0x56282186b0d8 <col:9> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56282186b0b0 <col:9> 'int' lvalue Var 0x56282186abf8 'x' 'int'
return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x56282186af20 <lundump.c:34:25> 'void (LoadState *, const char *)' Function 0x562821869290 'error' 'void (LoadState *, const char *)'
error
   2: ImplicitCastExpr 0x56282186afe0 <lundump.c:34:25> 'void (*)(LoadState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56282186af20 <col:25> 'void (LoadState *, const char *)' Function 0x562821869290 'error' 'void (LoadState *, const char *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LoadState *, const char *))
   3: DeclRefExpr 0x56282186af48 <lundump.c:34:31> 'LoadState *' lvalue ParmVar 0x56282186aaa8 'S' 'LoadState *'
S
   4: ImplicitCastExpr 0x56282186b030 <lundump.c:34:31> 'LoadState *' <LValueToRValue>
`-DeclRefExpr 0x56282186af48 <col:31> 'LoadState *' lvalue ParmVar 0x56282186aaa8 'S' 'LoadState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LoadState *)
   5: StringLiteral 0x56282186afa8 <lundump.c:65:11> 'char [12]' lvalue "bad integer"
"bad integer"
   6: ImplicitCastExpr 0x56282186b048 <lundump.c:65:11> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x56282186afa8 <col:11> 'char [12]' lvalue "bad integer"
[B2.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x56282186b060 <lundump.c:65:11> 'const char *' <BitCast>
`-ImplicitCastExpr 0x56282186b048 <col:11> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x56282186afa8 <col:11> 'char [12]' lvalue "bad integer"
[B2.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x56282186aff8 <lundump.c:34:25, col:34> 'void'
|-ImplicitCastExpr 0x56282186afe0 <col:25> 'void (*)(LoadState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56282186af20 <col:25> 'void (LoadState *, const char *)' Function 0x562821869290 'error' 'void (LoadState *, const char *)'
|-ImplicitCastExpr 0x56282186b030 <col:31> 'LoadState *' <LValueToRValue>
| `-DeclRefExpr 0x56282186af48 <col:31> 'LoadState *' lvalue ParmVar 0x56282186aaa8 'S' 'LoadState *'
`-ImplicitCastExpr 0x56282186b060 <line:65:11> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x56282186b048 <col:11> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x56282186afa8 <col:11> 'char [12]' lvalue "bad integer"
[B2.2]([B2.4], [B2.7])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclStmt 0x56282186ac58 <lundump.c:63:2, col:7>col:6
`-VarDecl 0x56282186abf8 <col:2, col:6> col:6 used x 'int'
int x;
   2: DeclRefExpr 0x56282186ac70 <lundump.c:43:29> 'void (LoadState *, void *, size_t)' Function 0x562821869a00 'LoadBlock' 'void (LoadState *, void *, size_t)'
LoadBlock
   3: ImplicitCastExpr 0x56282186ae10 <lundump.c:43:29> 'void (*)(LoadState *, void *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56282186ac70 <col:29> 'void (LoadState *, void *, size_t)' Function 0x562821869a00 'LoadBlock' 'void (LoadState *, void *, size_t)'
[B3.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LoadState *, void *, size_t))
   4: DeclRefExpr 0x56282186ac98 <lundump.c:64:10> 'LoadState *' lvalue ParmVar 0x56282186aaa8 'S' 'LoadState *'
S
   5: ImplicitCastExpr 0x56282186ae68 <lundump.c:64:10> 'LoadState *' <LValueToRValue>
`-DeclRefExpr 0x56282186ac98 <col:10> 'LoadState *' lvalue ParmVar 0x56282186aaa8 'S' 'LoadState *'
[B3.4] (ImplicitCastExpr, LValueToRValue, LoadState *)
   6: DeclRefExpr 0x56282186acc0 <lundump.c:64:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
x
   7: UnaryOperator 0x56282186ace8 <lundump.c:45:33, line:64:12> 'int *' prefix '&'
`-DeclRefExpr 0x56282186acc0 <col:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
&[B3.6]
   8: ImplicitCastExpr 0x56282186ae80 <lundump.c:45:33, line:64:12> 'void *' <BitCast>
`-UnaryOperator 0x56282186ace8 <line:45:33, line:64:12> 'int *' prefix '&'
  `-DeclRefExpr 0x56282186acc0 <col:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
[B3.7] (ImplicitCastExpr, BitCast, void *)
   9: IntegerLiteral 0x56282186ad08 <lundump.c:45:36> 'int' 1
1
  10: ImplicitCastExpr 0x56282186add0 <lundump.c:43:43, col:45> 'unsigned long' <IntegralCast>
`-ParenExpr 0x56282186ad28 <col:43, col:45> 'int'
  `-IntegerLiteral 0x56282186ad08 <line:45:36> 'int' 1
([B3.9]) (ImplicitCastExpr, IntegralCast, unsigned long)
  11: UnaryExprOrTypeTraitExpr 0x56282186ad90 <lundump.c:45:38, col:46> 'unsigned long' sizeof
`-ParenExpr 0x56282186ad70 <col:44, col:46> 'int' lvalue
  `-DeclRefExpr 0x56282186ad48 <line:64:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
sizeof (x)
  12: BinaryOperator 0x56282186ade8 <lundump.c:43:43, col:52> 'unsigned long' '*'
|-ImplicitCastExpr 0x56282186add0 <col:43, col:45> 'unsigned long' <IntegralCast>
| `-ParenExpr 0x56282186ad28 <col:43, col:45> 'int'
|   `-IntegerLiteral 0x56282186ad08 <line:45:36> 'int' 1
`-ParenExpr 0x56282186adb0 <line:43:47, col:52> 'unsigned long'
  `-UnaryExprOrTypeTraitExpr 0x56282186ad90 <line:45:38, col:46> 'unsigned long' sizeof
    `-ParenExpr 0x56282186ad70 <col:44, col:46> 'int' lvalue
      `-DeclRefExpr 0x56282186ad48 <line:64:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
[B3.10] * ([B3.11])
  13: CallExpr 0x56282186ae28 <lundump.c:43:29, col:53> 'void'
|-ImplicitCastExpr 0x56282186ae10 <col:29> 'void (*)(LoadState *, void *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56282186ac70 <col:29> 'void (LoadState *, void *, size_t)' Function 0x562821869a00 'LoadBlock' 'void (LoadState *, void *, size_t)'
|-ImplicitCastExpr 0x56282186ae68 <line:64:10> 'LoadState *' <LValueToRValue>
| `-DeclRefExpr 0x56282186ac98 <col:10> 'LoadState *' lvalue ParmVar 0x56282186aaa8 'S' 'LoadState *'
|-ImplicitCastExpr 0x56282186ae80 <line:45:33, line:64:12> 'void *' <BitCast>
| `-UnaryOperator 0x56282186ace8 <line:45:33, line:64:12> 'int *' prefix '&'
|   `-DeclRefExpr 0x56282186acc0 <col:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
`-BinaryOperator 0x56282186ade8 <line:43:43, col:52> 'unsigned long' '*'
  |-ImplicitCastExpr 0x56282186add0 <col:43, col:45> 'unsigned long' <IntegralCast>
  | `-ParenExpr 0x56282186ad28 <col:43, col:45> 'int'
  |   `-IntegerLiteral 0x56282186ad08 <line:45:36> 'int' 1
  `-ParenExpr 0x56282186adb0 <line:43:47, col:52> 'unsigned long'
    `-UnaryExprOrTypeTraitExpr 0x56282186ad90 <line:45:38, col:46> 'unsigned long' sizeof
      `-ParenExpr 0x56282186ad70 <col:44, col:46> 'int' lvalue
        `-DeclRefExpr 0x56282186ad48 <line:64:12> 'int' lvalue Var 0x56282186abf8 'x' 'int'
[B3.3]([B3.5], [B3.8], [B3.12])
  14: DeclRefExpr 0x56282186ae98 <lundump.c:65:6> 'int' lvalue Var 0x56282186abf8 'x' 'int'
x
  15: ImplicitCastExpr 0x56282186aee0 <lundump.c:65:6> 'int' <LValueToRValue>
`-DeclRefExpr 0x56282186ae98 <col:6> 'int' lvalue Var 0x56282186abf8 'x' 'int'
[B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: IntegerLiteral 0x56282186aec0 <lundump.c:65:8> 'int' 0
0
  17: BinaryOperator 0x56282186aef8 <lundump.c:65:6, col:8> 'int' '<'
|-ImplicitCastExpr 0x56282186aee0 <col:6> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56282186ae98 <col:6> 'int' lvalue Var 0x56282186abf8 'x' 'int'
`-IntegerLiteral 0x56282186aec0 <col:8> 'int' 0
[B3.15] < [B3.16]
   T: if [B3.17]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
