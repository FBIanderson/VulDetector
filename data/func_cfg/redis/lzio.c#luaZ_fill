int luaZ_fill(ZIO *z)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x55936bccb880 <lzio.c:29:10> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
size
   2: ImplicitCastExpr 0x55936bccb8c8 <lzio.c:29:10> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x55936bccb880 <col:10> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
[B1.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: IntegerLiteral 0x55936bccb8a8 <lzio.c:29:17> 'int' 1
1
   4: ImplicitCastExpr 0x55936bccb8e0 <lzio.c:29:17> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x55936bccb8a8 <col:17> 'int' 1
[B1.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: BinaryOperator 0x55936bccb8f8 <lzio.c:29:10, col:17> 'unsigned long' '-'
|-ImplicitCastExpr 0x55936bccb8c8 <col:10> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x55936bccb880 <col:10> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x55936bccb8e0 <col:17> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x55936bccb8a8 <col:17> 'int' 1
[B1.2] - [B1.4]
   6: DeclRefExpr 0x55936bccb808 <lzio.c:29:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
z
   7: ImplicitCastExpr 0x55936bccb830 <lzio.c:29:3> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x55936bccb808 <col:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.6] (ImplicitCastExpr, LValueToRValue, ZIO *)
   8: MemberExpr 0x55936bccb848 <lzio.c:29:3, col:6> 'size_t':'unsigned long' lvalue ->n 0x55936bcc1d80
`-ImplicitCastExpr 0x55936bccb830 <col:3> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x55936bccb808 <col:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.7]->n
   9: BinaryOperator 0x55936bccb920 <lzio.c:29:3, col:17> 'size_t':'unsigned long' '='
|-MemberExpr 0x55936bccb848 <col:3, col:6> 'size_t':'unsigned long' lvalue ->n 0x55936bcc1d80
| `-ImplicitCastExpr 0x55936bccb830 <col:3> 'ZIO *' <LValueToRValue>
|   `-DeclRefExpr 0x55936bccb808 <col:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
`-BinaryOperator 0x55936bccb8f8 <col:10, col:17> 'unsigned long' '-'
  |-ImplicitCastExpr 0x55936bccb8c8 <col:10> 'size_t':'unsigned long' <LValueToRValue>
  | `-DeclRefExpr 0x55936bccb880 <col:10> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
  `-ImplicitCastExpr 0x55936bccb8e0 <col:17> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x55936bccb8a8 <col:17> 'int' 1
[B1.8] = [B1.5]
  10: DeclRefExpr 0x55936bccb9c0 <lzio.c:30:10> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
buff
  11: ImplicitCastExpr 0x55936bccb9e8 <lzio.c:30:10> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55936bccb9c0 <col:10> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
[B1.10] (ImplicitCastExpr, LValueToRValue, const char *)
  12: DeclRefExpr 0x55936bccb948 <lzio.c:30:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
z
  13: ImplicitCastExpr 0x55936bccb970 <lzio.c:30:3> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x55936bccb948 <col:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.12] (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x55936bccb988 <lzio.c:30:3, col:6> 'const char *' lvalue ->p 0x55936bcc1de0
`-ImplicitCastExpr 0x55936bccb970 <col:3> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x55936bccb948 <col:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.13]->p
  15: BinaryOperator 0x55936bccba00 <lzio.c:30:3, col:10> 'const char *' '='
|-MemberExpr 0x55936bccb988 <col:3, col:6> 'const char *' lvalue ->p 0x55936bcc1de0
| `-ImplicitCastExpr 0x55936bccb970 <col:3> 'ZIO *' <LValueToRValue>
|   `-DeclRefExpr 0x55936bccb948 <col:3> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
`-ImplicitCastExpr 0x55936bccb9e8 <col:10> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55936bccb9c0 <col:10> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
[B1.14] = [B1.11]
  16: DeclRefExpr 0x55936bccba28 <lzio.c:31:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
z
  17: ImplicitCastExpr 0x55936bccba50 <lzio.c:31:21> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.16] (ImplicitCastExpr, LValueToRValue, ZIO *)
  18: MemberExpr 0x55936bccba68 <lzio.c:31:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
`-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.17]->p
  19: UnaryOperator 0x55936bccbaa0 <lzio.c:31:21, col:25> 'const char *' postfix '++'
`-MemberExpr 0x55936bccba68 <col:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
  `-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
    `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B1.18]++
  20: UnaryOperator 0x55936bccbae0 <lzio.c:31:19, col:27> 'const char' lvalue prefix '*'
`-ParenExpr 0x55936bccbac0 <col:20, col:27> 'const char *'
  `-UnaryOperator 0x55936bccbaa0 <col:21, col:25> 'const char *' postfix '++'
    `-MemberExpr 0x55936bccba68 <col:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
      `-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
        `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
*([B1.19])
  21: ImplicitCastExpr 0x55936bccbb88 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x55936bccbb68 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x55936bccbb00 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x55936bccbae0 <lzio.c:31:19, col:27> 'const char' lvalue prefix '*'
      `-ParenExpr 0x55936bccbac0 <col:20, col:27> 'const char *'
        `-UnaryOperator 0x55936bccbaa0 <col:21, col:25> 'const char *' postfix '++'
          `-MemberExpr 0x55936bccba68 <col:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
            `-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
              `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
(([B1.20])) (ImplicitCastExpr, LValueToRValue, char)
  22: CStyleCastExpr 0x55936bccbba0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x55936bccbb88 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x55936bccbb68 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x55936bccbb00 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x55936bccbae0 <lzio.c:31:19, col:27> 'const char' lvalue prefix '*'
        `-ParenExpr 0x55936bccbac0 <col:20, col:27> 'const char *'
          `-UnaryOperator 0x55936bccbaa0 <col:21, col:25> 'const char *' postfix '++'
            `-MemberExpr 0x55936bccba68 <col:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
              `-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
                `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
(unsigned char)[B1.21] (CStyleCastExpr, IntegralCast, unsigned char)
  23: CStyleCastExpr 0x55936bccbc50 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x55936bccbc30 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x55936bccbbc8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x55936bccbba0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x55936bccbb88 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x55936bccbb68 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x55936bccbb00 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x55936bccbae0 <lzio.c:31:19, col:27> 'const char' lvalue prefix '*'
              `-ParenExpr 0x55936bccbac0 <col:20, col:27> 'const char *'
                `-UnaryOperator 0x55936bccbaa0 <col:21, col:25> 'const char *' postfix '++'
                  `-MemberExpr 0x55936bccba68 <col:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
                    `-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
                      `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
(int)(([B1.22])) (CStyleCastExpr, IntegralCast, int)
  24: ReturnStmt 0x55936bccbc98 <lzio.c:31:3, ./llimits.h:75:31>
`-ParenExpr 0x55936bccbc78 <col:22, col:31> 'int'
  `-CStyleCastExpr 0x55936bccbc50 <col:23, col:30> 'int' <IntegralCast>
    `-ParenExpr 0x55936bccbc30 <col:26, col:30> 'unsigned char'
      `-ParenExpr 0x55936bccbbc8 <col:22, col:31> 'unsigned char'
        `-CStyleCastExpr 0x55936bccbba0 <col:23, col:30> 'unsigned char' <IntegralCast>
          `-ImplicitCastExpr 0x55936bccbb88 <col:26, col:30> 'char' <LValueToRValue>
            `-ParenExpr 0x55936bccbb68 <col:26, col:30> 'const char' lvalue
              `-ParenExpr 0x55936bccbb00 <./lzio.h:20:51, col:53> 'const char' lvalue
                `-UnaryOperator 0x55936bccbae0 <lzio.c:31:19, col:27> 'const char' lvalue prefix '*'
                  `-ParenExpr 0x55936bccbac0 <col:20, col:27> 'const char *'
                    `-UnaryOperator 0x55936bccbaa0 <col:21, col:25> 'const char *' postfix '++'
                      `-MemberExpr 0x55936bccba68 <col:21, col:24> 'const char *' lvalue ->p 0x55936bcc1de0
                        `-ImplicitCastExpr 0x55936bccba50 <col:21> 'ZIO *' <LValueToRValue>
                          `-DeclRefExpr 0x55936bccba28 <col:21> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
return ([B1.23]);
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x55936bccb758 <./lzio.h:16:15> 'int' 1
1
   2: UnaryOperator 0x55936bccb778 <./lzio.h:16:14, col:15> 'int' prefix '-'
`-IntegerLiteral 0x55936bccb758 <col:15> 'int' 1
-[B2.1]
   3: ReturnStmt 0x55936bccb7b8 <lzio.c:28:34, ./lzio.h:16:16>
`-ParenExpr 0x55936bccb798 <col:13, col:16> 'int'
  `-UnaryOperator 0x55936bccb778 <col:14, col:15> 'int' prefix '-'
    `-IntegerLiteral 0x55936bccb758 <col:15> 'int' 1
return ([B2.2]);
   Preds (2): B3 B4
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x55936bccb690 <lzio.c:28:23> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
size
   2: ImplicitCastExpr 0x55936bccb6d8 <lzio.c:28:23> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x55936bccb690 <col:23> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
[B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: IntegerLiteral 0x55936bccb6b8 <lzio.c:28:31> 'int' 0
0
   4: ImplicitCastExpr 0x55936bccb6f0 <lzio.c:28:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x55936bccb6b8 <col:31> 'int' 0
[B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: BinaryOperator 0x55936bccb708 <lzio.c:28:23, col:31> 'int' '=='
|-ImplicitCastExpr 0x55936bccb6d8 <col:23> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x55936bccb690 <col:23> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x55936bccb6f0 <col:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x55936bccb6b8 <col:31> 'int' 0
[B3.2] == [B3.4]
   T: if [B4.32] || [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclStmt 0x55936bcc7458 <lzio.c:22:3, col:14>col:10
`-VarDecl 0x55936bcc73f8 <col:3, col:10> col:10 used size 'size_t':'unsigned long'
size_t size;
   2: DeclRefExpr 0x55936bcc74e0 <lzio.c:23:18> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
z
   3: ImplicitCastExpr 0x55936bcc7508 <lzio.c:23:18> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x55936bcc74e0 <col:18> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.2] (ImplicitCastExpr, LValueToRValue, ZIO *)
   4: MemberExpr 0x55936bcc7520 <lzio.c:23:18, col:21> 'lua_State *' lvalue ->L 0x55936bcc1ef0
`-ImplicitCastExpr 0x55936bcc7508 <col:18> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x55936bcc74e0 <col:18> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.3]->L
   5: ImplicitCastExpr 0x55936bcc7558 <lzio.c:23:18, col:21> 'lua_State *' <LValueToRValue>
`-MemberExpr 0x55936bcc7520 <col:18, col:21> 'lua_State *' lvalue ->L 0x55936bcc1ef0
  `-ImplicitCastExpr 0x55936bcc7508 <col:18> 'ZIO *' <LValueToRValue>
    `-DeclRefExpr 0x55936bcc74e0 <col:18> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.4] (ImplicitCastExpr, LValueToRValue, lua_State *)
   6: DeclStmt 0x55936bcc7570 <lzio.c:23:3, col:22>col:14
`-VarDecl 0x55936bcc7480 <col:3, col:21> col:14 used L 'lua_State *' cinit
  `-ImplicitCastExpr 0x55936bcc7558 <col:18, col:21> 'lua_State *' <LValueToRValue>
    `-MemberExpr 0x55936bcc7520 <col:18, col:21> 'lua_State *' lvalue ->L 0x55936bcc1ef0
      `-ImplicitCastExpr 0x55936bcc7508 <col:18> 'ZIO *' <LValueToRValue>
        `-DeclRefExpr 0x55936bcc74e0 <col:18> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
lua_State *L = z->L;
   7: DeclStmt 0x55936bcc7600 <lzio.c:24:3, col:19>col:15
`-VarDecl 0x55936bcc75a0 <col:3, col:15> col:15 used buff 'const char *'
const char *buff;
   8: IntegerLiteral 0x55936bcc7618 <./llimits.h:111:33> 'int' 0
0
   9: CStyleCastExpr 0x55936bcc7648 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x55936bcc7618 <col:33> 'int' 0
(void)[B4.8] (CStyleCastExpr, ToVoid, void)
  10: DeclRefExpr 0x55936bcc76b8 <lzio.c:26:10> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
z
  11: ImplicitCastExpr 0x55936bcc76e0 <lzio.c:26:10> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x55936bcc76b8 <col:10> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.10] (ImplicitCastExpr, LValueToRValue, ZIO *)
  12: MemberExpr 0x55936bcc76f8 <lzio.c:26:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' lvalue ->reader 0x55936bcc1e38
`-ImplicitCastExpr 0x55936bcc76e0 <col:10> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x55936bcc76b8 <col:10> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.11]->reader
  13: ImplicitCastExpr 0x55936bcc7818 <lzio.c:26:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' <LValueToRValue>
`-MemberExpr 0x55936bcc76f8 <col:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' lvalue ->reader 0x55936bcc1e38
  `-ImplicitCastExpr 0x55936bcc76e0 <col:10> 'ZIO *' <LValueToRValue>
    `-DeclRefExpr 0x55936bcc76b8 <col:10> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.12] (ImplicitCastExpr, LValueToRValue, lua_Reader)
  14: DeclRefExpr 0x55936bcc7730 <lzio.c:26:20> 'lua_State *' lvalue Var 0x55936bcc7480 'L' 'lua_State *'
L
  15: ImplicitCastExpr 0x55936bccb4c0 <lzio.c:26:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55936bcc7730 <col:20> 'lua_State *' lvalue Var 0x55936bcc7480 'L' 'lua_State *'
[B4.14] (ImplicitCastExpr, LValueToRValue, lua_State *)
  16: DeclRefExpr 0x55936bcc7758 <lzio.c:26:23> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
z
  17: ImplicitCastExpr 0x55936bcc7780 <lzio.c:26:23> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x55936bcc7758 <col:23> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.16] (ImplicitCastExpr, LValueToRValue, ZIO *)
  18: MemberExpr 0x55936bcc7798 <lzio.c:26:23, col:26> 'void *' lvalue ->data 0x55936bcc1e98
`-ImplicitCastExpr 0x55936bcc7780 <col:23> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x55936bcc7758 <col:23> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.17]->data
  19: ImplicitCastExpr 0x55936bccb4d8 <lzio.c:26:23, col:26> 'void *' <LValueToRValue>
`-MemberExpr 0x55936bcc7798 <col:23, col:26> 'void *' lvalue ->data 0x55936bcc1e98
  `-ImplicitCastExpr 0x55936bcc7780 <col:23> 'ZIO *' <LValueToRValue>
    `-DeclRefExpr 0x55936bcc7758 <col:23> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
[B4.18] (ImplicitCastExpr, LValueToRValue, void *)
  20: DeclRefExpr 0x55936bcc77d0 <lzio.c:26:33> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
size
  21: UnaryOperator 0x55936bcc77f8 <lzio.c:26:32, col:33> 'size_t *' prefix '&'
`-DeclRefExpr 0x55936bcc77d0 <col:33> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
&[B4.20]
  22: CallExpr 0x55936bccb480 <lzio.c:26:10, col:37> 'const char *'
|-ImplicitCastExpr 0x55936bcc7818 <col:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' <LValueToRValue>
| `-MemberExpr 0x55936bcc76f8 <col:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' lvalue ->reader 0x55936bcc1e38
|   `-ImplicitCastExpr 0x55936bcc76e0 <col:10> 'ZIO *' <LValueToRValue>
|     `-DeclRefExpr 0x55936bcc76b8 <col:10> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
|-ImplicitCastExpr 0x55936bccb4c0 <col:20> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55936bcc7730 <col:20> 'lua_State *' lvalue Var 0x55936bcc7480 'L' 'lua_State *'
|-ImplicitCastExpr 0x55936bccb4d8 <col:23, col:26> 'void *' <LValueToRValue>
| `-MemberExpr 0x55936bcc7798 <col:23, col:26> 'void *' lvalue ->data 0x55936bcc1e98
|   `-ImplicitCastExpr 0x55936bcc7780 <col:23> 'ZIO *' <LValueToRValue>
|     `-DeclRefExpr 0x55936bcc7758 <col:23> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
`-UnaryOperator 0x55936bcc77f8 <col:32, col:33> 'size_t *' prefix '&'
  `-DeclRefExpr 0x55936bcc77d0 <col:33> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
[B4.13]([B4.15], [B4.19], [B4.21])
  23: DeclRefExpr 0x55936bcc7690 <lzio.c:26:3> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
buff
  24: BinaryOperator 0x55936bccb4f0 <lzio.c:26:3, col:37> 'const char *' '='
|-DeclRefExpr 0x55936bcc7690 <col:3> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
`-CallExpr 0x55936bccb480 <col:10, col:37> 'const char *'
  |-ImplicitCastExpr 0x55936bcc7818 <col:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' <LValueToRValue>
  | `-MemberExpr 0x55936bcc76f8 <col:10, col:13> 'lua_Reader':'const char *(*)(lua_State *, void *, size_t *)' lvalue ->reader 0x55936bcc1e38
  |   `-ImplicitCastExpr 0x55936bcc76e0 <col:10> 'ZIO *' <LValueToRValue>
  |     `-DeclRefExpr 0x55936bcc76b8 <col:10> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
  |-ImplicitCastExpr 0x55936bccb4c0 <col:20> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x55936bcc7730 <col:20> 'lua_State *' lvalue Var 0x55936bcc7480 'L' 'lua_State *'
  |-ImplicitCastExpr 0x55936bccb4d8 <col:23, col:26> 'void *' <LValueToRValue>
  | `-MemberExpr 0x55936bcc7798 <col:23, col:26> 'void *' lvalue ->data 0x55936bcc1e98
  |   `-ImplicitCastExpr 0x55936bcc7780 <col:23> 'ZIO *' <LValueToRValue>
  |     `-DeclRefExpr 0x55936bcc7758 <col:23> 'ZIO *' lvalue ParmVar 0x55936bcc7268 'z' 'ZIO *'
  `-UnaryOperator 0x55936bcc77f8 <col:32, col:33> 'size_t *' prefix '&'
    `-DeclRefExpr 0x55936bcc77d0 <col:33> 'size_t':'unsigned long' lvalue Var 0x55936bcc73f8 'size' 'size_t':'unsigned long'
[B4.23] = [B4.22]
  25: IntegerLiteral 0x55936bccb518 <./llimits.h:110:33> 'int' 0
0
  26: CStyleCastExpr 0x55936bccb548 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x55936bccb518 <col:33> 'int' 0
(void)[B4.25] (CStyleCastExpr, ToVoid, void)
  27: DeclRefExpr 0x55936bccb590 <lzio.c:28:7> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
buff
  28: ImplicitCastExpr 0x55936bccb638 <lzio.c:28:7> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55936bccb590 <col:7> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
[B4.27] (ImplicitCastExpr, LValueToRValue, const char *)
  29: IntegerLiteral 0x55936bccb5b8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  30: CStyleCastExpr 0x55936bccb5f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55936bccb5b8 <col:24> 'int' 0
(void *)[B4.29] (CStyleCastExpr, NullToPointer, void *)
  31: ImplicitCastExpr 0x55936bccb650 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
`-ParenExpr 0x55936bccb618 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55936bccb5f0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55936bccb5b8 <col:24> 'int' 0
([B4.30]) (ImplicitCastExpr, BitCast, const char *)
  32: BinaryOperator 0x55936bccb668 <lzio.c:28:7, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x55936bccb638 <lzio.c:28:7> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55936bccb590 <col:7> 'const char *' lvalue Var 0x55936bcc75a0 'buff' 'const char *'
`-ImplicitCastExpr 0x55936bccb650 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
  `-ParenExpr 0x55936bccb618 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55936bccb5f0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55936bccb5b8 <col:24> 'int' 0
[B4.28] == [B4.31]
   T: [B4.32] || ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (2): B1 B2
