static void chunk(LexState *ls)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: DeclRefExpr 0x558fa8f444b8 <lparser.c:1336:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f44500 <lparser.c:282:25, col:28> 'LexState *' <LValueToRValue>
`-ParenExpr 0x558fa8f444e0 <col:25, col:28> 'LexState *' lvalue
  `-DeclRefExpr 0x558fa8f444b8 <line:1336:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
([B1.1]) (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f44518 <lparser.c:282:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8f44500 <col:25, col:28> 'LexState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f444e0 <col:25, col:28> 'LexState *' lvalue
    `-DeclRefExpr 0x558fa8f444b8 <line:1336:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B1.2]->L
   4: ImplicitCastExpr 0x558fa8f44550 <lparser.c:282:25, col:31> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8f44518 <col:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8f44500 <col:25, col:28> 'LexState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f444e0 <col:25, col:28> 'LexState *' lvalue
      `-DeclRefExpr 0x558fa8f444b8 <line:1336:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   5: MemberExpr 0x558fa8f44568 <lparser.c:282:25, col:34> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
`-ImplicitCastExpr 0x558fa8f44550 <col:25, col:31> 'struct lua_State *' <LValueToRValue>
  `-MemberExpr 0x558fa8f44518 <col:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
    `-ImplicitCastExpr 0x558fa8f44500 <col:25, col:28> 'LexState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f444e0 <col:25, col:28> 'LexState *' lvalue
        `-DeclRefExpr 0x558fa8f444b8 <line:1336:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B1.4]->nCcalls
   6: UnaryOperator 0x558fa8f445a0 <lparser.c:282:25, col:41> 'unsigned short' postfix '--'
`-MemberExpr 0x558fa8f44568 <col:25, col:34> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
  `-ImplicitCastExpr 0x558fa8f44550 <col:25, col:31> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x558fa8f44518 <col:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
      `-ImplicitCastExpr 0x558fa8f44500 <col:25, col:28> 'LexState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f444e0 <col:25, col:28> 'LexState *' lvalue
          `-DeclRefExpr 0x558fa8f444b8 <line:1336:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B1.5]--
   Preds (2): B4 B5
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B5

 [B3]
   1: DeclRefExpr 0x558fa8f44060 <lparser.c:1330:14> 'int (LexState *)' Function 0x558fa8f423d8 'statement' 'int (LexState *)'
statement
   2: ImplicitCastExpr 0x558fa8f440b0 <lparser.c:1330:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f44060 <col:14> 'int (LexState *)' Function 0x558fa8f423d8 'statement' 'int (LexState *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
   3: DeclRefExpr 0x558fa8f44088 <lparser.c:1330:24> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f440f8 <lparser.c:1330:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f44088 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f440c8 <lparser.c:1330:14, col:26> 'int'
|-ImplicitCastExpr 0x558fa8f440b0 <col:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f44060 <col:14> 'int (LexState *)' Function 0x558fa8f423d8 'statement' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f440f8 <col:24> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f44088 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.2]([B3.4])
   6: DeclRefExpr 0x558fa8f44038 <lparser.c:1330:5> 'int' lvalue Var 0x558fa8f43d10 'islast' 'int'
islast
   7: BinaryOperator 0x558fa8f44110 <lparser.c:1330:5, col:26> 'int' '='
|-DeclRefExpr 0x558fa8f44038 <col:5> 'int' lvalue Var 0x558fa8f43d10 'islast' 'int'
`-CallExpr 0x558fa8f440c8 <col:14, col:26> 'int'
  |-ImplicitCastExpr 0x558fa8f440b0 <col:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f44060 <col:14> 'int (LexState *)' Function 0x558fa8f423d8 'statement' 'int (LexState *)'
  `-ImplicitCastExpr 0x558fa8f440f8 <col:24> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f44088 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.6] = [B3.5]
   8: DeclRefExpr 0x558fa8f44138 <lparser.c:1331:5> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   9: ImplicitCastExpr 0x558fa8f441a0 <lparser.c:1331:5> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f44138 <col:5> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B3.8] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
  10: DeclRefExpr 0x558fa8f44160 <lparser.c:1331:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8f441f0 <lparser.c:1331:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f44160 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: CharacterLiteral 0x558fa8f44188 <lparser.c:1331:18> 'int' 59
';'
  13: CallExpr 0x558fa8f441b8 <lparser.c:1331:5, col:21> 'int'
|-ImplicitCastExpr 0x558fa8f441a0 <col:5> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f44138 <col:5> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f441f0 <col:14> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f44160 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f44188 <col:18> 'int' 59
[B3.9]([B3.11], [B3.12])
  14: IntegerLiteral 0x558fa8f44208 <./llimits.h:62:31> 'int' 0
0
  15: CStyleCastExpr 0x558fa8f44238 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f44208 <col:31> 'int' 0
(void)[B3.14] (CStyleCastExpr, ToVoid, void)
  16: DeclRefExpr 0x558fa8f44348 <lparser.c:1334:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
  17: ImplicitCastExpr 0x558fa8f44370 <lparser.c:1334:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.16] (ImplicitCastExpr, LValueToRValue, LexState *)
  18: MemberExpr 0x558fa8f44388 <lparser.c:1334:23, col:27> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f44370 <col:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.17]->fs
  19: ImplicitCastExpr 0x558fa8f443c0 <lparser.c:1334:23, col:27> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f44388 <col:23, col:27> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f44370 <col:23> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.18] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  20: MemberExpr 0x558fa8f443d8 <lparser.c:1334:23, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f443c0 <col:23, col:27> 'struct FuncState *' <LValueToRValue>
  `-MemberExpr 0x558fa8f44388 <col:23, col:27> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
    `-ImplicitCastExpr 0x558fa8f44370 <col:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.19]->nactvar
  21: ImplicitCastExpr 0x558fa8f44410 <lparser.c:1334:23, col:31> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f443d8 <col:23, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f443c0 <col:23, col:27> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f44388 <col:23, col:27> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f44370 <col:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.20] (ImplicitCastExpr, LValueToRValue, lu_byte)
  22: ImplicitCastExpr 0x558fa8f44428 <lparser.c:1334:23, col:31> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f44410 <col:23, col:31> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f443d8 <col:23, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f443c0 <col:23, col:27> 'struct FuncState *' <LValueToRValue>
      `-MemberExpr 0x558fa8f44388 <col:23, col:27> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
        `-ImplicitCastExpr 0x558fa8f44370 <col:23> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.21] (ImplicitCastExpr, IntegralCast, int)
  23: DeclRefExpr 0x558fa8f44280 <lparser.c:1334:5> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
  24: ImplicitCastExpr 0x558fa8f442a8 <lparser.c:1334:5> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f44280 <col:5> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.23] (ImplicitCastExpr, LValueToRValue, LexState *)
  25: MemberExpr 0x558fa8f442c0 <lparser.c:1334:5, col:9> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f442a8 <col:5> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f44280 <col:5> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.24]->fs
  26: ImplicitCastExpr 0x558fa8f442f8 <lparser.c:1334:5, col:9> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f442c0 <col:5, col:9> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f442a8 <col:5> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f44280 <col:5> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.25] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  27: MemberExpr 0x558fa8f44310 <lparser.c:1334:5, col:13> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f442f8 <col:5, col:9> 'struct FuncState *' <LValueToRValue>
  `-MemberExpr 0x558fa8f442c0 <col:5, col:9> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
    `-ImplicitCastExpr 0x558fa8f442a8 <col:5> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f44280 <col:5> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.26]->freereg
  28: BinaryOperator 0x558fa8f44440 <lparser.c:1334:5, col:31> 'int' '='
|-MemberExpr 0x558fa8f44310 <col:5, col:13> 'int' lvalue ->freereg 0x558fa8eb42f0
| `-ImplicitCastExpr 0x558fa8f442f8 <col:5, col:9> 'struct FuncState *' <LValueToRValue>
|   `-MemberExpr 0x558fa8f442c0 <col:5, col:9> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|     `-ImplicitCastExpr 0x558fa8f442a8 <col:5> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f44280 <col:5> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f44428 <col:23, col:31> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f44410 <col:23, col:31> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f443d8 <col:23, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      `-ImplicitCastExpr 0x558fa8f443c0 <col:23, col:27> 'struct FuncState *' <LValueToRValue>
        `-MemberExpr 0x558fa8f44388 <col:23, col:27> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
          `-ImplicitCastExpr 0x558fa8f44370 <col:23> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x558fa8f44348 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B3.27] = [B3.22]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x558fa8f43eb8 <lparser.c:1329:22> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
block_follow
   2: ImplicitCastExpr 0x558fa8f43f90 <lparser.c:1329:22> 'int (*)(int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f43eb8 <col:22> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
   3: DeclRefExpr 0x558fa8f43ee0 <lparser.c:1329:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f43f08 <lparser.c:1329:35> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f43ee0 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f43f20 <lparser.c:1329:35, col:39> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f43f08 <col:35> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f43ee0 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B4.4]->t
   6: MemberExpr 0x558fa8f43f58 <lparser.c:1329:35, col:41> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f43f20 <col:35, col:39> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f43f08 <col:35> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f43ee0 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B4.5].token
   7: ImplicitCastExpr 0x558fa8f43fd8 <lparser.c:1329:35, col:41> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f43f58 <col:35, col:41> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f43f20 <col:35, col:39> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f43f08 <col:35> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f43ee0 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B4.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CallExpr 0x558fa8f43fa8 <lparser.c:1329:22, col:46> 'int'
|-ImplicitCastExpr 0x558fa8f43f90 <col:22> 'int (*)(int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f43eb8 <col:22> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
`-ImplicitCastExpr 0x558fa8f43fd8 <col:35, col:41> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f43f58 <col:35, col:41> 'int' lvalue .token 0x558fa8e9ec88
    `-MemberExpr 0x558fa8f43f20 <col:35, col:39> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
      `-ImplicitCastExpr 0x558fa8f43f08 <col:35> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f43ee0 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B4.2]([B4.7])
   9: UnaryOperator 0x558fa8f43ff0 <lparser.c:1329:21, col:46> 'int' prefix '!'
`-CallExpr 0x558fa8f43fa8 <col:22, col:46> 'int'
  |-ImplicitCastExpr 0x558fa8f43f90 <col:22> 'int (*)(int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f43eb8 <col:22> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
  `-ImplicitCastExpr 0x558fa8f43fd8 <col:35, col:41> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f43f58 <col:35, col:41> 'int' lvalue .token 0x558fa8e9ec88
      `-MemberExpr 0x558fa8f43f20 <col:35, col:39> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
        `-ImplicitCastExpr 0x558fa8f43f08 <col:35> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f43ee0 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
![B4.8]
   T: while [B5.3] && [B4.9]
   Preds (1): B5
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x558fa8f43e58 <lparser.c:1329:11> 'int' lvalue Var 0x558fa8f43d10 'islast' 'int'
islast
   2: ImplicitCastExpr 0x558fa8f43e80 <lparser.c:1329:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f43e58 <col:11> 'int' lvalue Var 0x558fa8f43d10 'islast' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: UnaryOperator 0x558fa8f43e98 <lparser.c:1329:10, col:11> 'int' prefix '!'
`-ImplicitCastExpr 0x558fa8f43e80 <col:11> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f43e58 <col:11> 'int' lvalue Var 0x558fa8f43d10 'islast' 'int'
![B5.2]
   T: [B5.3] && ...
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: IntegerLiteral 0x558fa8f43d70 <lparser.c:1327:16> 'int' 0
0
   2: DeclStmt 0x558fa8f43d90 <lparser.c:1327:3, col:17>col:7
`-VarDecl 0x558fa8f43d10 <col:3, col:16> col:7 used islast 'int' cinit
  `-IntegerLiteral 0x558fa8f43d70 <col:16> 'int' 0
int islast = 0;
   3: DeclRefExpr 0x558fa8f43da8 <lparser.c:1328:3> 'void (LexState *)' Function 0x558fa8effe10 'enterlevel' 'void (LexState *)'
enterlevel
   4: ImplicitCastExpr 0x558fa8f43df8 <lparser.c:1328:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f43da8 <col:3> 'void (LexState *)' Function 0x558fa8effe10 'enterlevel' 'void (LexState *)'
[B6.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   5: DeclRefExpr 0x558fa8f43dd0 <lparser.c:1328:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x558fa8f43e40 <lparser.c:1328:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f43dd0 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B6.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: CallExpr 0x558fa8f43e10 <lparser.c:1328:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f43df8 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f43da8 <col:3> 'void (LexState *)' Function 0x558fa8effe10 'enterlevel' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f43e40 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f43dd0 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f43bc8 'ls' 'LexState *'
[B6.4]([B6.6])
   Preds (1): B7
   Succs (1): B5

 [B0 (EXIT)]
   Preds (1): B1
