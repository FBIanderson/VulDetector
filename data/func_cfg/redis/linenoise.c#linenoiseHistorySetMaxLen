int linenoiseHistorySetMaxLen(int len)
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: IntegerLiteral 0x56555a4c1a30 <linenoise.c:1184:12> 'int' 1
1
   2: ReturnStmt 0x56555a4c1a50 <linenoise.c:1184:5, col:12>
`-IntegerLiteral 0x56555a4c1a30 <col:12> 'int' 1
return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x56555a4c1990 <linenoise.c:1183:23> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
history_max_len
   2: ImplicitCastExpr 0x56555a4c19b8 <linenoise.c:1183:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1990 <col:23> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
[B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x56555a4c1968 <linenoise.c:1183:9> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
history_len
   4: BinaryOperator 0x56555a4c19d0 <linenoise.c:1183:9, col:23> 'int' '='
|-DeclRefExpr 0x56555a4c1968 <col:9> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
`-ImplicitCastExpr 0x56555a4c19b8 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1990 <col:23> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
[B2.3] = [B2.2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x56555a4c1858 <linenoise.c:1181:23> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   2: ImplicitCastExpr 0x56555a4c1880 <linenoise.c:1181:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1858 <col:23> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x56555a4c1830 <linenoise.c:1181:5> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
history_max_len
   4: BinaryOperator 0x56555a4c1898 <linenoise.c:1181:5, col:23> 'int' '='
|-DeclRefExpr 0x56555a4c1830 <col:5> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
`-ImplicitCastExpr 0x56555a4c1880 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1858 <col:23> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B3.3] = [B3.2]
   5: DeclRefExpr 0x56555a4c18c0 <linenoise.c:1182:9> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
history_len
   6: ImplicitCastExpr 0x56555a4c1910 <linenoise.c:1182:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c18c0 <col:9> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
[B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x56555a4c18e8 <linenoise.c:1182:23> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
history_max_len
   8: ImplicitCastExpr 0x56555a4c1928 <linenoise.c:1182:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c18e8 <col:23> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x56555a4c1940 <linenoise.c:1182:9, col:23> 'int' '>'
|-ImplicitCastExpr 0x56555a4c1910 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c18c0 <col:9> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
`-ImplicitCastExpr 0x56555a4c1928 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c18e8 <col:23> 'int' lvalue Var 0x56555a48dab8 'history_max_len' 'int'
[B3.6] > [B3.8]
   T: if [B3.9]
   Preds (2): B4 B13
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x56555a4c1198 <linenoise.c:1176:9> 'void *(void *, int, unsigned long)' Function 0x56555a42b690 'memset' 'void *(void *, int, unsigned long)'
memset
   2: ImplicitCastExpr 0x56555a4c12d8 <linenoise.c:1176:9> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4c1198 <col:9> 'void *(void *, int, unsigned long)' Function 0x56555a42b690 'memset' 'void *(void *, int, unsigned long)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(void *, int, unsigned long))
   3: DeclRefExpr 0x56555a4c11c0 <linenoise.c:1176:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
new
   4: ImplicitCastExpr 0x56555a4c1330 <linenoise.c:1176:16> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c11c0 <col:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B4.3] (ImplicitCastExpr, LValueToRValue, char **)
   5: ImplicitCastExpr 0x56555a4c1348 <linenoise.c:1176:16> 'void *' <BitCast>
`-ImplicitCastExpr 0x56555a4c1330 <col:16> 'char **' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c11c0 <col:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B4.4] (ImplicitCastExpr, BitCast, void *)
   6: IntegerLiteral 0x56555a4c11e8 <linenoise.c:1176:20> 'int' 0
0
   7: UnaryExprOrTypeTraitExpr 0x56555a4c1220 <linenoise.c:1176:22, col:34> 'unsigned long' sizeof 'char *'
sizeof(char *)
   8: DeclRefExpr 0x56555a4c1240 <linenoise.c:1176:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   9: ImplicitCastExpr 0x56555a4c1268 <linenoise.c:1176:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1240 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: ImplicitCastExpr 0x56555a4c1280 <linenoise.c:1176:36> 'unsigned long' <IntegralCast>
`-ImplicitCastExpr 0x56555a4c1268 <col:36> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1240 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B4.9] (ImplicitCastExpr, IntegralCast, unsigned long)
  11: BinaryOperator 0x56555a4c1298 <linenoise.c:1176:22, col:36> 'unsigned long' '*'
|-UnaryExprOrTypeTraitExpr 0x56555a4c1220 <col:22, col:34> 'unsigned long' sizeof 'char *'
`-ImplicitCastExpr 0x56555a4c1280 <col:36> 'unsigned long' <IntegralCast>
  `-ImplicitCastExpr 0x56555a4c1268 <col:36> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c1240 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B4.7] * [B4.10]
  12: CallExpr 0x56555a4c12f0 <linenoise.c:1176:9, col:39> 'void *'
|-ImplicitCastExpr 0x56555a4c12d8 <col:9> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4c1198 <col:9> 'void *(void *, int, unsigned long)' Function 0x56555a42b690 'memset' 'void *(void *, int, unsigned long)'
|-ImplicitCastExpr 0x56555a4c1348 <col:16> 'void *' <BitCast>
| `-ImplicitCastExpr 0x56555a4c1330 <col:16> 'char **' <LValueToRValue>
|   `-DeclRefExpr 0x56555a4c11c0 <col:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
|-IntegerLiteral 0x56555a4c11e8 <col:20> 'int' 0
`-BinaryOperator 0x56555a4c1298 <col:22, col:36> 'unsigned long' '*'
  |-UnaryExprOrTypeTraitExpr 0x56555a4c1220 <col:22, col:34> 'unsigned long' sizeof 'char *'
  `-ImplicitCastExpr 0x56555a4c1280 <col:36> 'unsigned long' <IntegralCast>
    `-ImplicitCastExpr 0x56555a4c1268 <col:36> 'int' <LValueToRValue>
      `-DeclRefExpr 0x56555a4c1240 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B4.2]([B4.5], [B4.6], [B4.11])
  13: DeclRefExpr 0x56555a4c1360 <linenoise.c:1177:9> 'void *(void *, const void *, unsigned long)' Function 0x56555a41ae90 'memcpy' 'void *(void *, const void *, unsigned long)'
memcpy
  14: ImplicitCastExpr 0x56555a4c15b0 <linenoise.c:1177:9> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4c1360 <col:9> 'void *(void *, const void *, unsigned long)' Function 0x56555a41ae90 'memcpy' 'void *(void *, const void *, unsigned long)'
[B4.13] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(void *, const void *, unsigned long))
  15: DeclRefExpr 0x56555a4c1388 <linenoise.c:1177:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
new
  16: ImplicitCastExpr 0x56555a4c1608 <linenoise.c:1177:16> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1388 <col:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B4.15] (ImplicitCastExpr, LValueToRValue, char **)
  17: ImplicitCastExpr 0x56555a4c1620 <linenoise.c:1177:16> 'void *' <BitCast>
`-ImplicitCastExpr 0x56555a4c1608 <col:16> 'char **' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1388 <col:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B4.16] (ImplicitCastExpr, BitCast, void *)
  18: DeclRefExpr 0x56555a4c13b0 <linenoise.c:1177:20> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
history
  19: ImplicitCastExpr 0x56555a4c14a0 <linenoise.c:1177:20> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c13b0 <col:20> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
[B4.18] (ImplicitCastExpr, LValueToRValue, char **)
  20: DeclRefExpr 0x56555a4c13d8 <linenoise.c:1177:29> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
history_len
  21: ImplicitCastExpr 0x56555a4c1428 <linenoise.c:1177:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c13d8 <col:29> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
[B4.20] (ImplicitCastExpr, LValueToRValue, int)
  22: DeclRefExpr 0x56555a4c1400 <linenoise.c:1177:41> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
tocopy
  23: ImplicitCastExpr 0x56555a4c1440 <linenoise.c:1177:41> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1400 <col:41> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.22] (ImplicitCastExpr, LValueToRValue, int)
  24: BinaryOperator 0x56555a4c1458 <linenoise.c:1177:29, col:41> 'int' '-'
|-ImplicitCastExpr 0x56555a4c1428 <col:29> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c13d8 <col:29> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
`-ImplicitCastExpr 0x56555a4c1440 <col:41> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1400 <col:41> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.21] - [B4.23]
  25: BinaryOperator 0x56555a4c14b8 <linenoise.c:1177:20, col:47> 'char **' '+'
|-ImplicitCastExpr 0x56555a4c14a0 <col:20> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c13b0 <col:20> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
`-ParenExpr 0x56555a4c1480 <col:28, col:47> 'int'
  `-BinaryOperator 0x56555a4c1458 <col:29, col:41> 'int' '-'
    |-ImplicitCastExpr 0x56555a4c1428 <col:29> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x56555a4c13d8 <col:29> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
    `-ImplicitCastExpr 0x56555a4c1440 <col:41> 'int' <LValueToRValue>
      `-DeclRefExpr 0x56555a4c1400 <col:41> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.19] + ([B4.24])
  26: ImplicitCastExpr 0x56555a4c1638 <linenoise.c:1177:20, col:47> 'const void *' <BitCast>
`-BinaryOperator 0x56555a4c14b8 <col:20, col:47> 'char **' '+'
  |-ImplicitCastExpr 0x56555a4c14a0 <col:20> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x56555a4c13b0 <col:20> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
  `-ParenExpr 0x56555a4c1480 <col:28, col:47> 'int'
    `-BinaryOperator 0x56555a4c1458 <col:29, col:41> 'int' '-'
      |-ImplicitCastExpr 0x56555a4c1428 <col:29> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x56555a4c13d8 <col:29> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
      `-ImplicitCastExpr 0x56555a4c1440 <col:41> 'int' <LValueToRValue>
        `-DeclRefExpr 0x56555a4c1400 <col:41> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.25] (ImplicitCastExpr, BitCast, const void *)
  27: UnaryExprOrTypeTraitExpr 0x56555a4c14f8 <linenoise.c:1177:50, col:62> 'unsigned long' sizeof 'char *'
sizeof(char *)
  28: DeclRefExpr 0x56555a4c1518 <linenoise.c:1177:64> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
tocopy
  29: ImplicitCastExpr 0x56555a4c1540 <linenoise.c:1177:64> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1518 <col:64> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.28] (ImplicitCastExpr, LValueToRValue, int)
  30: ImplicitCastExpr 0x56555a4c1558 <linenoise.c:1177:64> 'unsigned long' <IntegralCast>
`-ImplicitCastExpr 0x56555a4c1540 <col:64> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1518 <col:64> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.29] (ImplicitCastExpr, IntegralCast, unsigned long)
  31: BinaryOperator 0x56555a4c1570 <linenoise.c:1177:50, col:64> 'unsigned long' '*'
|-UnaryExprOrTypeTraitExpr 0x56555a4c14f8 <col:50, col:62> 'unsigned long' sizeof 'char *'
`-ImplicitCastExpr 0x56555a4c1558 <col:64> 'unsigned long' <IntegralCast>
  `-ImplicitCastExpr 0x56555a4c1540 <col:64> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c1518 <col:64> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.27] * [B4.30]
  32: CallExpr 0x56555a4c15c8 <linenoise.c:1177:9, col:70> 'void *'
|-ImplicitCastExpr 0x56555a4c15b0 <col:9> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4c1360 <col:9> 'void *(void *, const void *, unsigned long)' Function 0x56555a41ae90 'memcpy' 'void *(void *, const void *, unsigned long)'
|-ImplicitCastExpr 0x56555a4c1620 <col:16> 'void *' <BitCast>
| `-ImplicitCastExpr 0x56555a4c1608 <col:16> 'char **' <LValueToRValue>
|   `-DeclRefExpr 0x56555a4c1388 <col:16> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
|-ImplicitCastExpr 0x56555a4c1638 <col:20, col:47> 'const void *' <BitCast>
| `-BinaryOperator 0x56555a4c14b8 <col:20, col:47> 'char **' '+'
|   |-ImplicitCastExpr 0x56555a4c14a0 <col:20> 'char **' <LValueToRValue>
|   | `-DeclRefExpr 0x56555a4c13b0 <col:20> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
|   `-ParenExpr 0x56555a4c1480 <col:28, col:47> 'int'
|     `-BinaryOperator 0x56555a4c1458 <col:29, col:41> 'int' '-'
|       |-ImplicitCastExpr 0x56555a4c1428 <col:29> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x56555a4c13d8 <col:29> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
|       `-ImplicitCastExpr 0x56555a4c1440 <col:41> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x56555a4c1400 <col:41> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
`-BinaryOperator 0x56555a4c1570 <col:50, col:64> 'unsigned long' '*'
  |-UnaryExprOrTypeTraitExpr 0x56555a4c14f8 <col:50, col:62> 'unsigned long' sizeof 'char *'
  `-ImplicitCastExpr 0x56555a4c1558 <col:64> 'unsigned long' <IntegralCast>
    `-ImplicitCastExpr 0x56555a4c1540 <col:64> 'int' <LValueToRValue>
      `-DeclRefExpr 0x56555a4c1518 <col:64> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B4.14]([B4.17], [B4.26], [B4.31])
  33: DeclRefExpr 0x56555a4c1650 <linenoise.c:1178:9> 'void (void *)' Function 0x56555a3e63c0 'free' 'void (void *)'
free
  34: ImplicitCastExpr 0x56555a4c16a0 <linenoise.c:1178:9> 'void (*)(void *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4c1650 <col:9> 'void (void *)' Function 0x56555a3e63c0 'free' 'void (void *)'
[B4.33] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *))
  35: DeclRefExpr 0x56555a4c1678 <linenoise.c:1178:14> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
history
  36: ImplicitCastExpr 0x56555a4c16e8 <linenoise.c:1178:14> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1678 <col:14> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
[B4.35] (ImplicitCastExpr, LValueToRValue, char **)
  37: ImplicitCastExpr 0x56555a4c1700 <linenoise.c:1178:14> 'void *' <BitCast>
`-ImplicitCastExpr 0x56555a4c16e8 <col:14> 'char **' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1678 <col:14> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
[B4.36] (ImplicitCastExpr, BitCast, void *)
  38: CallExpr 0x56555a4c16b8 <linenoise.c:1178:9, col:21> 'void'
|-ImplicitCastExpr 0x56555a4c16a0 <col:9> 'void (*)(void *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4c1650 <col:9> 'void (void *)' Function 0x56555a3e63c0 'free' 'void (void *)'
`-ImplicitCastExpr 0x56555a4c1700 <col:14> 'void *' <BitCast>
  `-ImplicitCastExpr 0x56555a4c16e8 <col:14> 'char **' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c1678 <col:14> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
[B4.34]([B4.37])
  39: DeclRefExpr 0x56555a4c1740 <linenoise.c:1179:19> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
new
  40: ImplicitCastExpr 0x56555a4c1768 <linenoise.c:1179:19> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c1740 <col:19> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B4.39] (ImplicitCastExpr, LValueToRValue, char **)
  41: DeclRefExpr 0x56555a4c1718 <linenoise.c:1179:9> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
history
  42: BinaryOperator 0x56555a4c1780 <linenoise.c:1179:9, col:19> 'char **' '='
|-DeclRefExpr 0x56555a4c1718 <col:9> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
`-ImplicitCastExpr 0x56555a4c1768 <col:19> 'char **' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c1740 <col:19> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B4.41] = [B4.40]
   Preds (2): B5 B10
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x56555a4c10d0 <linenoise.c:1174:22> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   2: ImplicitCastExpr 0x56555a4c10f8 <linenoise.c:1174:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c10d0 <col:22> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x56555a4c10a8 <linenoise.c:1174:13> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
tocopy
   4: BinaryOperator 0x56555a4c1110 <linenoise.c:1174:13, col:22> 'int' '='
|-DeclRefExpr 0x56555a4c10a8 <col:13> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
`-ImplicitCastExpr 0x56555a4c10f8 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c10d0 <col:22> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B5.3] = [B5.2]
   Preds (1): B8
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x56555a4c0ee0 <linenoise.c:1173:41> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
j
   2: UnaryOperator 0x56555a4c0f08 <linenoise.c:1173:41, col:42> 'int' postfix '++'
`-DeclRefExpr 0x56555a4c0ee0 <col:41> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B6.1]++
   Preds (1): B7
   Succs (1): B8

 [B7]
   1: DeclRefExpr 0x56555a4c0f28 <linenoise.c:1173:46> 'void (void *)' Function 0x56555a3e63c0 'free' 'void (void *)'
free
   2: ImplicitCastExpr 0x56555a4c0ff8 <linenoise.c:1173:46> 'void (*)(void *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4c0f28 <col:46> 'void (void *)' Function 0x56555a3e63c0 'free' 'void (void *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *))
   3: DeclRefExpr 0x56555a4c0f50 <linenoise.c:1173:51> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
history
   4: ImplicitCastExpr 0x56555a4c0fa0 <linenoise.c:1173:51> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0f50 <col:51> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
[B7.3] (ImplicitCastExpr, LValueToRValue, char **)
   5: DeclRefExpr 0x56555a4c0f78 <linenoise.c:1173:59> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
j
   6: ImplicitCastExpr 0x56555a4c0fb8 <linenoise.c:1173:59> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0f78 <col:59> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x56555a4c0fd0 <linenoise.c:1173:51, col:60> 'char *' lvalue
|-ImplicitCastExpr 0x56555a4c0fa0 <col:51> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c0f50 <col:51> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
`-ImplicitCastExpr 0x56555a4c0fb8 <col:59> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c0f78 <col:59> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B7.4][[B7.6]]
   8: ImplicitCastExpr 0x56555a4c1040 <linenoise.c:1173:51, col:60> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x56555a4c0fd0 <col:51, col:60> 'char *' lvalue
  |-ImplicitCastExpr 0x56555a4c0fa0 <col:51> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x56555a4c0f50 <col:51> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
  `-ImplicitCastExpr 0x56555a4c0fb8 <col:59> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c0f78 <col:59> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B7.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: ImplicitCastExpr 0x56555a4c1058 <linenoise.c:1173:51, col:60> 'void *' <BitCast>
`-ImplicitCastExpr 0x56555a4c1040 <col:51, col:60> 'char *' <LValueToRValue>
  `-ArraySubscriptExpr 0x56555a4c0fd0 <col:51, col:60> 'char *' lvalue
    |-ImplicitCastExpr 0x56555a4c0fa0 <col:51> 'char **' <LValueToRValue>
    | `-DeclRefExpr 0x56555a4c0f50 <col:51> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
    `-ImplicitCastExpr 0x56555a4c0fb8 <col:59> 'int' <LValueToRValue>
      `-DeclRefExpr 0x56555a4c0f78 <col:59> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B7.8] (ImplicitCastExpr, BitCast, void *)
  10: CallExpr 0x56555a4c1010 <linenoise.c:1173:46, col:61> 'void'
|-ImplicitCastExpr 0x56555a4c0ff8 <col:46> 'void (*)(void *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4c0f28 <col:46> 'void (void *)' Function 0x56555a3e63c0 'free' 'void (void *)'
`-ImplicitCastExpr 0x56555a4c1058 <col:51, col:60> 'void *' <BitCast>
  `-ImplicitCastExpr 0x56555a4c1040 <col:51, col:60> 'char *' <LValueToRValue>
    `-ArraySubscriptExpr 0x56555a4c0fd0 <col:51, col:60> 'char *' lvalue
      |-ImplicitCastExpr 0x56555a4c0fa0 <col:51> 'char **' <LValueToRValue>
      | `-DeclRefExpr 0x56555a4c0f50 <col:51> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
      `-ImplicitCastExpr 0x56555a4c0fb8 <col:59> 'int' <LValueToRValue>
        `-DeclRefExpr 0x56555a4c0f78 <col:59> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B7.2]([B7.9])
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x56555a4c0dd0 <linenoise.c:1173:25> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
j
   2: ImplicitCastExpr 0x56555a4c0ea0 <linenoise.c:1173:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0dd0 <col:25> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
[B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x56555a4c0df8 <linenoise.c:1173:29> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
tocopy
   4: ImplicitCastExpr 0x56555a4c0e48 <linenoise.c:1173:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0df8 <col:29> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x56555a4c0e20 <linenoise.c:1173:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   6: ImplicitCastExpr 0x56555a4c0e60 <linenoise.c:1173:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0e20 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B8.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x56555a4c0e78 <linenoise.c:1173:29, col:36> 'int' '-'
|-ImplicitCastExpr 0x56555a4c0e48 <col:29> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c0df8 <col:29> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
`-ImplicitCastExpr 0x56555a4c0e60 <col:36> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c0e20 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B8.4] - [B8.6]
   8: BinaryOperator 0x56555a4c0eb8 <linenoise.c:1173:25, col:36> 'int' '<'
|-ImplicitCastExpr 0x56555a4c0ea0 <col:25> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c0dd0 <col:25> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
`-BinaryOperator 0x56555a4c0e78 <col:29, col:36> 'int' '-'
  |-ImplicitCastExpr 0x56555a4c0e48 <col:29> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x56555a4c0df8 <col:29> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
  `-ImplicitCastExpr 0x56555a4c0e60 <col:36> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c0e20 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B8.2] < [B8.7]
   T: for (...; [B8.8]; ...)
   Preds (2): B6 B9
   Succs (2): B7 B5

 [B9]
   1: DeclStmt 0x56555a4c0d48 <linenoise.c:1171:13, col:18>col:17
`-VarDecl 0x56555a4c0ce8 <col:13, col:17> col:17 used j 'int'
int j;
   2: IntegerLiteral 0x56555a4c0d88 <linenoise.c:1173:22> 'int' 0
0
   3: DeclRefExpr 0x56555a4c0d60 <linenoise.c:1173:18> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
j
   4: BinaryOperator 0x56555a4c0da8 <linenoise.c:1173:18, col:22> 'int' '='
|-DeclRefExpr 0x56555a4c0d60 <col:18> 'int' lvalue Var 0x56555a4c0ce8 'j' 'int'
`-IntegerLiteral 0x56555a4c0d88 <col:22> 'int' 0
[B9.3] = [B9.2]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: DeclRefExpr 0x56555a4c0c28 <linenoise.c:1170:13> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   2: ImplicitCastExpr 0x56555a4c0c78 <linenoise.c:1170:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0c28 <col:13> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x56555a4c0c50 <linenoise.c:1170:19> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
tocopy
   4: ImplicitCastExpr 0x56555a4c0c90 <linenoise.c:1170:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0c50 <col:19> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x56555a4c0ca8 <linenoise.c:1170:13, col:19> 'int' '<'
|-ImplicitCastExpr 0x56555a4c0c78 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c0c28 <col:13> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
`-ImplicitCastExpr 0x56555a4c0c90 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c0c50 <col:19> 'int' lvalue Var 0x56555a4c0870 'tocopy' 'int'
[B10.2] < [B10.4]
   T: if [B10.5]
   Preds (1): B12
   Succs (2): B9 B4

 [B11]
   1: IntegerLiteral 0x56555a4c0bb8 <linenoise.c:1167:33> 'int' 0
0
   2: ReturnStmt 0x56555a4c0bd8 <linenoise.c:1167:26, col:33>
`-IntegerLiteral 0x56555a4c0bb8 <col:33> 'int' 0
return [B11.1];
   Preds (1): B12
   Succs (1): B0

 [B12]
   1: DeclRefExpr 0x56555a4c08d0 <linenoise.c:1164:22> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
history_len
   2: ImplicitCastExpr 0x56555a4c08f8 <linenoise.c:1164:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c08d0 <col:22> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
[B12.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclStmt 0x56555a4c0910 <linenoise.c:1164:9, col:33>col:13
`-VarDecl 0x56555a4c0870 <col:9, col:22> col:13 used tocopy 'int' cinit
  `-ImplicitCastExpr 0x56555a4c08f8 <col:22> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c08d0 <col:22> 'int' lvalue Var 0x56555a48fbf0 'history_len' 'int'
int tocopy = history_len;
   4: DeclRefExpr 0x56555a4c0950 <linenoise.c:1166:15> 'void *(unsigned long)' Function 0x56555a3e55d0 'malloc' 'void *(unsigned long)'
malloc
   5: ImplicitCastExpr 0x56555a4c0a30 <linenoise.c:1166:15> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4c0950 <col:15> 'void *(unsigned long)' Function 0x56555a3e55d0 'malloc' 'void *(unsigned long)'
[B12.4] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(unsigned long))
   6: UnaryExprOrTypeTraitExpr 0x56555a4c0990 <linenoise.c:1166:22, col:34> 'unsigned long' sizeof 'char *'
sizeof(char *)
   7: DeclRefExpr 0x56555a4c09b0 <linenoise.c:1166:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   8: ImplicitCastExpr 0x56555a4c09d8 <linenoise.c:1166:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c09b0 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B12.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ImplicitCastExpr 0x56555a4c09f0 <linenoise.c:1166:36> 'unsigned long' <IntegralCast>
`-ImplicitCastExpr 0x56555a4c09d8 <col:36> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4c09b0 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B12.8] (ImplicitCastExpr, IntegralCast, unsigned long)
  10: BinaryOperator 0x56555a4c0a08 <linenoise.c:1166:22, col:36> 'unsigned long' '*'
|-UnaryExprOrTypeTraitExpr 0x56555a4c0990 <col:22, col:34> 'unsigned long' sizeof 'char *'
`-ImplicitCastExpr 0x56555a4c09f0 <col:36> 'unsigned long' <IntegralCast>
  `-ImplicitCastExpr 0x56555a4c09d8 <col:36> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4c09b0 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B12.6] * [B12.9]
  11: CallExpr 0x56555a4c0a48 <linenoise.c:1166:15, col:39> 'void *'
|-ImplicitCastExpr 0x56555a4c0a30 <col:15> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4c0950 <col:15> 'void *(unsigned long)' Function 0x56555a3e55d0 'malloc' 'void *(unsigned long)'
`-BinaryOperator 0x56555a4c0a08 <col:22, col:36> 'unsigned long' '*'
  |-UnaryExprOrTypeTraitExpr 0x56555a4c0990 <col:22, col:34> 'unsigned long' sizeof 'char *'
  `-ImplicitCastExpr 0x56555a4c09f0 <col:36> 'unsigned long' <IntegralCast>
    `-ImplicitCastExpr 0x56555a4c09d8 <col:36> 'int' <LValueToRValue>
      `-DeclRefExpr 0x56555a4c09b0 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B12.5]([B12.10])
  12: ImplicitCastExpr 0x56555a4c0a78 <linenoise.c:1166:15, col:39> 'char **' <BitCast>
`-CallExpr 0x56555a4c0a48 <col:15, col:39> 'void *'
  |-ImplicitCastExpr 0x56555a4c0a30 <col:15> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x56555a4c0950 <col:15> 'void *(unsigned long)' Function 0x56555a3e55d0 'malloc' 'void *(unsigned long)'
  `-BinaryOperator 0x56555a4c0a08 <col:22, col:36> 'unsigned long' '*'
    |-UnaryExprOrTypeTraitExpr 0x56555a4c0990 <col:22, col:34> 'unsigned long' sizeof 'char *'
    `-ImplicitCastExpr 0x56555a4c09f0 <col:36> 'unsigned long' <IntegralCast>
      `-ImplicitCastExpr 0x56555a4c09d8 <col:36> 'int' <LValueToRValue>
        `-DeclRefExpr 0x56555a4c09b0 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B12.11] (ImplicitCastExpr, BitCast, char **)
  13: DeclRefExpr 0x56555a4c0928 <linenoise.c:1166:9> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
new
  14: BinaryOperator 0x56555a4c0a90 <linenoise.c:1166:9, col:39> 'char **' '='
|-DeclRefExpr 0x56555a4c0928 <col:9> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
`-ImplicitCastExpr 0x56555a4c0a78 <col:15, col:39> 'char **' <BitCast>
  `-CallExpr 0x56555a4c0a48 <col:15, col:39> 'void *'
    |-ImplicitCastExpr 0x56555a4c0a30 <col:15> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x56555a4c0950 <col:15> 'void *(unsigned long)' Function 0x56555a3e55d0 'malloc' 'void *(unsigned long)'
    `-BinaryOperator 0x56555a4c0a08 <col:22, col:36> 'unsigned long' '*'
      |-UnaryExprOrTypeTraitExpr 0x56555a4c0990 <col:22, col:34> 'unsigned long' sizeof 'char *'
      `-ImplicitCastExpr 0x56555a4c09f0 <col:36> 'unsigned long' <IntegralCast>
        `-ImplicitCastExpr 0x56555a4c09d8 <col:36> 'int' <LValueToRValue>
          `-DeclRefExpr 0x56555a4c09b0 <col:36> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B12.13] = [B12.12]
  15: DeclRefExpr 0x56555a4c0ab8 <linenoise.c:1167:13> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
new
  16: ImplicitCastExpr 0x56555a4c0b60 <linenoise.c:1167:13> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0ab8 <col:13> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
[B12.15] (ImplicitCastExpr, LValueToRValue, char **)
  17: IntegerLiteral 0x56555a4c0ae0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  18: CStyleCastExpr 0x56555a4c0b18 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x56555a4c0ae0 <col:24> 'int' 0
(void *)[B12.17] (CStyleCastExpr, NullToPointer, void *)
  19: ImplicitCastExpr 0x56555a4c0b78 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <BitCast>
`-ParenExpr 0x56555a4c0b40 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x56555a4c0b18 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x56555a4c0ae0 <col:24> 'int' 0
([B12.18]) (ImplicitCastExpr, BitCast, char **)
  20: BinaryOperator 0x56555a4c0b90 <linenoise.c:1167:13, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x56555a4c0b60 <linenoise.c:1167:13> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c0ab8 <col:13> 'char **' lvalue Var 0x56555a4c0690 'new' 'char **'
`-ImplicitCastExpr 0x56555a4c0b78 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <BitCast>
  `-ParenExpr 0x56555a4c0b40 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x56555a4c0b18 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x56555a4c0ae0 <col:24> 'int' 0
[B12.16] == [B12.19]
   T: if [B12.20]
   Preds (1): B13
   Succs (2): B11 B10

 [B13]
   1: DeclRefExpr 0x56555a4c0800 <linenoise.c:1163:9> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
history
   2: ImplicitCastExpr 0x56555a4c0840 <linenoise.c:1163:9> 'char **' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0800 <col:9> 'char **' lvalue Var 0x56555a48fc88 'history' 'char **'
[B13.1] (ImplicitCastExpr, LValueToRValue, char **)
   T: if [B13.2]
   Preds (1): B15
   Succs (2): B12 B3

 [B14]
   1: IntegerLiteral 0x56555a4c0790 <linenoise.c:1162:25> 'int' 0
0
   2: ReturnStmt 0x56555a4c07b0 <linenoise.c:1162:18, col:25>
`-IntegerLiteral 0x56555a4c0790 <col:25> 'int' 0
return [B14.1];
   Preds (1): B15
   Succs (1): B0

 [B15]
   1: DeclStmt 0x56555a4c06f0 <linenoise.c:1160:5, col:15>col:12
`-VarDecl 0x56555a4c0690 <col:5, col:12> col:12 used new 'char **'
char **new;
   2: DeclRefExpr 0x56555a4c0708 <linenoise.c:1162:9> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
len
   3: ImplicitCastExpr 0x56555a4c0750 <linenoise.c:1162:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4c0708 <col:9> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
[B15.2] (ImplicitCastExpr, LValueToRValue, int)
   4: IntegerLiteral 0x56555a4c0730 <linenoise.c:1162:15> 'int' 1
1
   5: BinaryOperator 0x56555a4c0768 <linenoise.c:1162:9, col:15> 'int' '<'
|-ImplicitCastExpr 0x56555a4c0750 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4c0708 <col:9> 'int' lvalue ParmVar 0x56555a4c0540 'len' 'int'
`-IntegerLiteral 0x56555a4c0730 <col:15> 'int' 1
[B15.3] < [B15.4]
   T: if [B15.5]
   Preds (1): B16
   Succs (2): B14 B13

 [B0 (EXIT)]
   Preds (3): B1 B11 B14
