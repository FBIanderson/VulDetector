int luaO_fb2int(int x)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x5569011e6c10 <lobject.c:50:17> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
x
   2: ImplicitCastExpr 0x5569011e6c58 <lobject.c:50:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6c10 <col:17> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5569011e6c38 <lobject.c:50:21> 'int' 7
7
   4: BinaryOperator 0x5569011e6c70 <lobject.c:50:17, col:21> 'int' '&'
|-ImplicitCastExpr 0x5569011e6c58 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e6c10 <col:17> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
`-IntegerLiteral 0x5569011e6c38 <col:21> 'int' 7
[B1.2] & [B1.3]
   5: IntegerLiteral 0x5569011e6cb8 <lobject.c:50:24> 'int' 8
8
   6: BinaryOperator 0x5569011e6cd8 <lobject.c:50:16, col:24> 'int' '+'
|-ParenExpr 0x5569011e6c98 <col:16, col:22> 'int'
| `-BinaryOperator 0x5569011e6c70 <col:17, col:21> 'int' '&'
|   |-ImplicitCastExpr 0x5569011e6c58 <col:17> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5569011e6c10 <col:17> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
|   `-IntegerLiteral 0x5569011e6c38 <col:21> 'int' 7
`-IntegerLiteral 0x5569011e6cb8 <col:24> 'int' 8
([B1.4]) + [B1.5]
   7: DeclRefExpr 0x5569011e6d20 <lobject.c:50:31> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
e
   8: ImplicitCastExpr 0x5569011e6d68 <lobject.c:50:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6d20 <col:31> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x5569011e6d48 <lobject.c:50:35> 'int' 1
1
  10: BinaryOperator 0x5569011e6d80 <lobject.c:50:31, col:35> 'int' '-'
|-ImplicitCastExpr 0x5569011e6d68 <col:31> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e6d20 <col:31> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
`-IntegerLiteral 0x5569011e6d48 <col:35> 'int' 1
[B1.8] - [B1.9]
  11: BinaryOperator 0x5569011e6df0 <lobject.c:50:15, col:36> 'int' '<<'
|-ParenExpr 0x5569011e6d00 <col:15, col:25> 'int'
| `-BinaryOperator 0x5569011e6cd8 <col:16, col:24> 'int' '+'
|   |-ParenExpr 0x5569011e6c98 <col:16, col:22> 'int'
|   | `-BinaryOperator 0x5569011e6c70 <col:17, col:21> 'int' '&'
|   |   |-ImplicitCastExpr 0x5569011e6c58 <col:17> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5569011e6c10 <col:17> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
|   |   `-IntegerLiteral 0x5569011e6c38 <col:21> 'int' 7
|   `-IntegerLiteral 0x5569011e6cb8 <col:24> 'int' 8
`-ParenExpr 0x5569011e6dd0 <col:30, col:36> 'int'
  `-BinaryOperator 0x5569011e6d80 <col:31, col:35> 'int' '-'
    |-ImplicitCastExpr 0x5569011e6d68 <col:31> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x5569011e6d20 <col:31> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
    `-IntegerLiteral 0x5569011e6d48 <col:35> 'int' 1
([B1.6]) << ([B1.10])
  12: ReturnStmt 0x5569011e6e18 <lobject.c:50:8, col:36>
`-BinaryOperator 0x5569011e6df0 <col:15, col:36> 'int' '<<'
  |-ParenExpr 0x5569011e6d00 <col:15, col:25> 'int'
  | `-BinaryOperator 0x5569011e6cd8 <col:16, col:24> 'int' '+'
  |   |-ParenExpr 0x5569011e6c98 <col:16, col:22> 'int'
  |   | `-BinaryOperator 0x5569011e6c70 <col:17, col:21> 'int' '&'
  |   |   |-ImplicitCastExpr 0x5569011e6c58 <col:17> 'int' <LValueToRValue>
  |   |   | `-DeclRefExpr 0x5569011e6c10 <col:17> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
  |   |   `-IntegerLiteral 0x5569011e6c38 <col:21> 'int' 7
  |   `-IntegerLiteral 0x5569011e6cb8 <col:24> 'int' 8
  `-ParenExpr 0x5569011e6dd0 <col:30, col:36> 'int'
    `-BinaryOperator 0x5569011e6d80 <col:31, col:35> 'int' '-'
      |-ImplicitCastExpr 0x5569011e6d68 <col:31> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x5569011e6d20 <col:31> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
      `-IntegerLiteral 0x5569011e6d48 <col:35> 'int' 1
return [B1.11];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5569011e6bb8 <lobject.c:49:22> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
x
   2: ImplicitCastExpr 0x5569011e6be0 <lobject.c:49:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6bb8 <col:22> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
[B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x5569011e6bf8 <lobject.c:49:15, col:22>
`-ImplicitCastExpr 0x5569011e6be0 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5569011e6bb8 <col:22> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5569011e6a28 <lobject.c:48:12> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
x
   2: ImplicitCastExpr 0x5569011e6a70 <lobject.c:48:12> 'int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6a28 <col:12> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5569011e6a50 <lobject.c:48:17> 'int' 3
3
   4: BinaryOperator 0x5569011e6a88 <lobject.c:48:12, col:17> 'int' '>>'
|-ImplicitCastExpr 0x5569011e6a70 <col:12> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e6a28 <col:12> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
`-IntegerLiteral 0x5569011e6a50 <col:17> 'int' 3
[B3.2] >> [B3.3]
   5: IntegerLiteral 0x5569011e6ad0 <lobject.c:48:22> 'int' 31
31
   6: BinaryOperator 0x5569011e6af0 <lobject.c:48:11, col:22> 'int' '&'
|-ParenExpr 0x5569011e6ab0 <col:11, col:18> 'int'
| `-BinaryOperator 0x5569011e6a88 <col:12, col:17> 'int' '>>'
|   |-ImplicitCastExpr 0x5569011e6a70 <col:12> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5569011e6a28 <col:12> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
|   `-IntegerLiteral 0x5569011e6a50 <col:17> 'int' 3
`-IntegerLiteral 0x5569011e6ad0 <col:22> 'int' 31
([B3.4]) & [B3.5]
   7: DeclStmt 0x5569011e6b18 <lobject.c:48:3, col:24>col:7
`-VarDecl 0x5569011e69c8 <col:3, col:22> col:7 used e 'int' cinit
  `-BinaryOperator 0x5569011e6af0 <col:11, col:22> 'int' '&'
    |-ParenExpr 0x5569011e6ab0 <col:11, col:18> 'int'
    | `-BinaryOperator 0x5569011e6a88 <col:12, col:17> 'int' '>>'
    |   |-ImplicitCastExpr 0x5569011e6a70 <col:12> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5569011e6a28 <col:12> 'int' lvalue ParmVar 0x5569011e6830 'x' 'int'
    |   `-IntegerLiteral 0x5569011e6a50 <col:17> 'int' 3
    `-IntegerLiteral 0x5569011e6ad0 <col:22> 'int' 31
int e = (x >> 3) & 31;
   8: DeclRefExpr 0x5569011e6b30 <lobject.c:49:7> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
e
   9: ImplicitCastExpr 0x5569011e6b78 <lobject.c:49:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6b30 <col:7> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
[B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: IntegerLiteral 0x5569011e6b58 <lobject.c:49:12> 'int' 0
0
  11: BinaryOperator 0x5569011e6b90 <lobject.c:49:7, col:12> 'int' '=='
|-ImplicitCastExpr 0x5569011e6b78 <col:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e6b30 <col:7> 'int' lvalue Var 0x5569011e69c8 'e' 'int'
`-IntegerLiteral 0x5569011e6b58 <col:12> 'int' 0
[B3.9] == [B3.10]
   T: if [B3.11]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
