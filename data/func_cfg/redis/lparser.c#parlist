static void parlist(LexState *ls)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: DeclRefExpr 0x558fa8f1cca0 <lparser.c:570:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
adjustlocalvars
   2: ImplicitCastExpr 0x558fa8f1cd18 <lparser.c:570:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1cca0 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f1ccc8 <lparser.c:570:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1cd68 <lparser.c:570:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ccc8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f1ccf0 <lparser.c:570:23> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
nparams
   6: ImplicitCastExpr 0x558fa8f1cd80 <lparser.c:570:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ccf0 <col:23> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x558fa8f1cd30 <lparser.c:570:3, col:30> 'void'
|-ImplicitCastExpr 0x558fa8f1cd18 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1cca0 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f1cd68 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1ccc8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f1cd80 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ccf0 <col:23> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
[B1.2]([B1.4], [B1.6])
   8: DeclRefExpr 0x558fa8f1ce10 <lparser.c:571:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
fs
   9: ImplicitCastExpr 0x558fa8f1ce38 <lparser.c:571:28> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.8] (ImplicitCastExpr, LValueToRValue, FuncState *)
  10: MemberExpr 0x558fa8f1ce50 <lparser.c:571:28, col:32> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f1ce38 <col:28> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.9]->nactvar
  11: ImplicitCastExpr 0x558fa8f1cf98 <lparser.c:571:28, col:32> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f1ce50 <col:28, col:32> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f1ce38 <col:28> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x558fa8f1cfb0 <lparser.c:571:28, col:32> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f1cf98 <col:28, col:32> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f1ce50 <col:28, col:32> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f1ce38 <col:28> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.11] (ImplicitCastExpr, IntegralCast, int)
  13: DeclRefExpr 0x558fa8f1ce88 <lparser.c:571:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
f
  14: ImplicitCastExpr 0x558fa8f1ceb0 <lparser.c:571:43> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B1.13] (ImplicitCastExpr, LValueToRValue, Proto *)
  15: MemberExpr 0x558fa8f1cec8 <lparser.c:571:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
`-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B1.14]->is_vararg
  16: ImplicitCastExpr 0x558fa8f1cf20 <lparser.c:571:43, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f1cec8 <col:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
  `-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B1.15] (ImplicitCastExpr, LValueToRValue, lu_byte)
  17: ImplicitCastExpr 0x558fa8f1cf38 <lparser.c:571:43, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f1cf20 <col:43, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f1cec8 <col:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
    `-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B1.16] (ImplicitCastExpr, IntegralCast, int)
  18: IntegerLiteral 0x558fa8f1cf00 <./lobject.h:257:24> 'int' 1
1
  19: BinaryOperator 0x558fa8f1cf50 <lparser.c:571:43, ./lobject.h:257:24> 'int' '&'
|-ImplicitCastExpr 0x558fa8f1cf38 <lparser.c:571:43, col:46> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f1cf20 <col:43, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f1cec8 <col:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
|     `-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
`-IntegerLiteral 0x558fa8f1cf00 <./lobject.h:257:24> 'int' 1
[B1.17] & [B1.18]
  20: BinaryOperator 0x558fa8f1cfc8 <lparser.c:571:28, col:71> 'int' '-'
|-ImplicitCastExpr 0x558fa8f1cfb0 <col:28, col:32> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f1cf98 <col:28, col:32> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f1ce50 <col:28, col:32> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|     `-ImplicitCastExpr 0x558fa8f1ce38 <col:28> 'FuncState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
`-ParenExpr 0x558fa8f1cf78 <col:42, col:71> 'int'
  `-BinaryOperator 0x558fa8f1cf50 <col:43, ./lobject.h:257:24> 'int' '&'
    |-ImplicitCastExpr 0x558fa8f1cf38 <lparser.c:571:43, col:46> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x558fa8f1cf20 <col:43, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x558fa8f1cec8 <col:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
    |     `-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
    `-IntegerLiteral 0x558fa8f1cf00 <./lobject.h:257:24> 'int' 1
[B1.12] - ([B1.19])
  21: CStyleCastExpr 0x558fa8f1d070 <./llimits.h:75:23, col:30> 'lu_byte':'unsigned char' <IntegralCast>
`-ParenExpr 0x558fa8f1d050 <col:26, col:30> 'int'
  `-ParenExpr 0x558fa8f1cff0 <line:78:36, col:38> 'int'
    `-BinaryOperator 0x558fa8f1cfc8 <lparser.c:571:28, col:71> 'int' '-'
      |-ImplicitCastExpr 0x558fa8f1cfb0 <col:28, col:32> 'int' <IntegralCast>
      | `-ImplicitCastExpr 0x558fa8f1cf98 <col:28, col:32> 'lu_byte':'unsigned char' <LValueToRValue>
      |   `-MemberExpr 0x558fa8f1ce50 <col:28, col:32> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      |     `-ImplicitCastExpr 0x558fa8f1ce38 <col:28> 'FuncState *' <LValueToRValue>
      |       `-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
      `-ParenExpr 0x558fa8f1cf78 <col:42, col:71> 'int'
        `-BinaryOperator 0x558fa8f1cf50 <col:43, ./lobject.h:257:24> 'int' '&'
          |-ImplicitCastExpr 0x558fa8f1cf38 <lparser.c:571:43, col:46> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x558fa8f1cf20 <col:43, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
          |   `-MemberExpr 0x558fa8f1cec8 <col:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
          |     `-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
          |       `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
          `-IntegerLiteral 0x558fa8f1cf00 <./lobject.h:257:24> 'int' 1
(lu_byte)(([B1.20])) (CStyleCastExpr, IntegralCast, lu_byte)
  22: DeclRefExpr 0x558fa8f1cd98 <lparser.c:571:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
f
  23: ImplicitCastExpr 0x558fa8f1cdc0 <lparser.c:571:3> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1cd98 <col:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B1.22] (ImplicitCastExpr, LValueToRValue, Proto *)
  24: MemberExpr 0x558fa8f1cdd8 <lparser.c:571:3, col:6> 'lu_byte':'unsigned char' lvalue ->numparams 0x558fa8e8f7f0
`-ImplicitCastExpr 0x558fa8f1cdc0 <col:3> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1cd98 <col:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B1.23]->numparams
  25: BinaryOperator 0x558fa8f1d0b8 <lparser.c:571:3, ./llimits.h:75:31> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f1cdd8 <lparser.c:571:3, col:6> 'lu_byte':'unsigned char' lvalue ->numparams 0x558fa8e8f7f0
| `-ImplicitCastExpr 0x558fa8f1cdc0 <col:3> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f1cd98 <col:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
`-ParenExpr 0x558fa8f1d098 <./llimits.h:75:22, col:31> 'lu_byte':'unsigned char'
  `-CStyleCastExpr 0x558fa8f1d070 <col:23, col:30> 'lu_byte':'unsigned char' <IntegralCast>
    `-ParenExpr 0x558fa8f1d050 <col:26, col:30> 'int'
      `-ParenExpr 0x558fa8f1cff0 <line:78:36, col:38> 'int'
        `-BinaryOperator 0x558fa8f1cfc8 <lparser.c:571:28, col:71> 'int' '-'
          |-ImplicitCastExpr 0x558fa8f1cfb0 <col:28, col:32> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x558fa8f1cf98 <col:28, col:32> 'lu_byte':'unsigned char' <LValueToRValue>
          |   `-MemberExpr 0x558fa8f1ce50 <col:28, col:32> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
          |     `-ImplicitCastExpr 0x558fa8f1ce38 <col:28> 'FuncState *' <LValueToRValue>
          |       `-DeclRefExpr 0x558fa8f1ce10 <col:28> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
          `-ParenExpr 0x558fa8f1cf78 <col:42, col:71> 'int'
            `-BinaryOperator 0x558fa8f1cf50 <col:43, ./lobject.h:257:24> 'int' '&'
              |-ImplicitCastExpr 0x558fa8f1cf38 <lparser.c:571:43, col:46> 'int' <IntegralCast>
              | `-ImplicitCastExpr 0x558fa8f1cf20 <col:43, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
              |   `-MemberExpr 0x558fa8f1cec8 <col:43, col:46> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
              |     `-ImplicitCastExpr 0x558fa8f1ceb0 <col:43> 'Proto *' <LValueToRValue>
              |       `-DeclRefExpr 0x558fa8f1ce88 <col:43> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
              `-IntegerLiteral 0x558fa8f1cf00 <./lobject.h:257:24> 'int' 1
[B1.24] = ([B1.21])
  26: DeclRefExpr 0x558fa8f1d0e0 <lparser.c:572:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
  27: ImplicitCastExpr 0x558fa8f1d1a8 <lparser.c:572:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1d0e0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
[B1.26] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  28: DeclRefExpr 0x558fa8f1d108 <lparser.c:572:20> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
fs
  29: ImplicitCastExpr 0x558fa8f1d1f8 <lparser.c:572:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1d108 <col:20> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.28] (ImplicitCastExpr, LValueToRValue, FuncState *)
  30: DeclRefExpr 0x558fa8f1d130 <lparser.c:572:24> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
fs
  31: ImplicitCastExpr 0x558fa8f1d158 <lparser.c:572:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1d130 <col:24> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.30] (ImplicitCastExpr, LValueToRValue, FuncState *)
  32: MemberExpr 0x558fa8f1d170 <lparser.c:572:24, col:28> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f1d158 <col:24> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1d130 <col:24> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.31]->nactvar
  33: ImplicitCastExpr 0x558fa8f1d210 <lparser.c:572:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f1d170 <col:24, col:28> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f1d158 <col:24> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1d130 <col:24> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.32] (ImplicitCastExpr, LValueToRValue, lu_byte)
  34: ImplicitCastExpr 0x558fa8f1d228 <lparser.c:572:24, col:28> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f1d210 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f1d170 <col:24, col:28> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f1d158 <col:24> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1d130 <col:24> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.33] (ImplicitCastExpr, IntegralCast, int)
  35: CallExpr 0x558fa8f1d1c0 <lparser.c:572:3, col:35> 'void'
|-ImplicitCastExpr 0x558fa8f1d1a8 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1d0e0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f1d1f8 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1d108 <col:20> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f1d228 <col:24, col:28> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f1d210 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f1d170 <col:24, col:28> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      `-ImplicitCastExpr 0x558fa8f1d158 <col:24> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1d130 <col:24> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B1.27]([B1.29], [B1.34])
   Preds (2): B2 B10
   Succs (1): B0

 [B2]
   1: BinaryOperator 0x558fa8f1cc08 <lparser.c:568:14, col:47> 'int' '&&'
|-UnaryOperator 0x558fa8f1cb18 <col:14, col:18> 'int' prefix '!'
| `-ImplicitCastExpr 0x558fa8f1cb00 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f1cac8 <col:15, col:18> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
|     `-ImplicitCastExpr 0x558fa8f1cab0 <col:15> 'Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f1ca88 <col:15> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
`-CallExpr 0x558fa8f1cbb8 <col:31, col:47> 'int'
  |-ImplicitCastExpr 0x558fa8f1cba0 <col:31> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f1cb38 <col:31> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
  |-ImplicitCastExpr 0x558fa8f1cbf0 <col:40> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f1cb60 <col:40> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
  `-CharacterLiteral 0x558fa8f1cb88 <col:44> 'int' 44
[B4.5] && [B3.6]
   T: do ... while [B2.1]
   Preds (2): B3 B4
   Succs (2): B9 B1

 [B3]
   1: DeclRefExpr 0x558fa8f1cb38 <lparser.c:568:31> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   2: ImplicitCastExpr 0x558fa8f1cba0 <lparser.c:568:31> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1cb38 <col:31> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f1cb60 <lparser.c:568:40> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1cbf0 <lparser.c:568:40> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1cb60 <col:40> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f1cb88 <lparser.c:568:44> 'int' 44
','
   6: CallExpr 0x558fa8f1cbb8 <lparser.c:568:31, col:47> 'int'
|-ImplicitCastExpr 0x558fa8f1cba0 <col:31> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1cb38 <col:31> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f1cbf0 <col:40> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1cb60 <col:40> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f1cb88 <col:44> 'int' 44
[B3.2]([B3.4], [B3.5])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x558fa8f1ca88 <lparser.c:568:15> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
f
   2: ImplicitCastExpr 0x558fa8f1cab0 <lparser.c:568:15> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ca88 <col:15> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B4.1] (ImplicitCastExpr, LValueToRValue, Proto *)
   3: MemberExpr 0x558fa8f1cac8 <lparser.c:568:15, col:18> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
`-ImplicitCastExpr 0x558fa8f1cab0 <col:15> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ca88 <col:15> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B4.2]->is_vararg
   4: ImplicitCastExpr 0x558fa8f1cb00 <lparser.c:568:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f1cac8 <col:15, col:18> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
  `-ImplicitCastExpr 0x558fa8f1cab0 <col:15> 'Proto *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1ca88 <col:15> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B4.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: UnaryOperator 0x558fa8f1cb18 <lparser.c:568:14, col:18> 'int' prefix '!'
`-ImplicitCastExpr 0x558fa8f1cb00 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f1cac8 <col:15, col:18> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
    `-ImplicitCastExpr 0x558fa8f1cab0 <col:15> 'Proto *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1ca88 <col:15> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
![B4.4]
   T: [B4.5] && ...
   Preds (3): B6 B7 B8
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x558fa8f1be70 <lparser.c:551:15> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f1be98 <lparser.c:551:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1be70 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B5.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f1beb0 <lparser.c:551:15, col:19> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f1be98 <col:15> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1be70 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B5.2]->t
   4: MemberExpr 0x558fa8f1bee8 <lparser.c:551:15, col:21> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f1beb0 <col:15, col:19> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f1be98 <col:15> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1be70 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B5.3].token
   5: ImplicitCastExpr 0x558fa8f1bf20 <lparser.c:551:15, col:21> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1bee8 <col:15, col:21> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f1beb0 <col:15, col:19> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f1be98 <col:15> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1be70 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B5.4] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B5.5]
   Preds (2): B9 B10
   Succs (3): B7 B8 B6

 [B6]
  default:
   1: DeclRefExpr 0x558fa8f1c8f0 <lparser.c:566:18> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f1c990 <lparser.c:566:18> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1c8f0 <col:18> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f1c918 <lparser.c:566:35> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1c9e0 <lparser.c:566:35> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c918 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f1c940 <lparser.c:566:39, col:66> 'char [25]' lvalue "<name> or '...' expected"
"<name> or '...' expected"
   6: ImplicitCastExpr 0x558fa8f1c9f8 <lparser.c:566:39, col:66> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f1c940 <col:39, col:66> 'char [25]' lvalue "<name> or '...' expected"
[B6.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f1ca10 <lparser.c:566:39, col:66> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f1c9f8 <col:39, col:66> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f1c940 <col:39, col:66> 'char [25]' lvalue "<name> or '...' expected"
[B6.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f1c9a8 <lparser.c:566:18, col:77> 'void'
|-ImplicitCastExpr 0x558fa8f1c990 <col:18> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1c8f0 <col:18> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f1c9e0 <col:35> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1c918 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f1ca10 <col:39, col:66> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f1c9f8 <col:39, col:66> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f1c940 <col:39, col:66> 'char [25]' lvalue "<name> or '...' expected"
[B6.2]([B6.4], [B6.7])
   Preds (1): B5
   Succs (1): B4

 [B7]
  case TK_DOTS:
   1: DeclRefExpr 0x558fa8f1c260 <lparser.c:557:11> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
   2: ImplicitCastExpr 0x558fa8f1c2b0 <lparser.c:557:11> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1c260 <col:11> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x558fa8f1c288 <lparser.c:557:21> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1c2f8 <lparser.c:557:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c288 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f1c2c8 <lparser.c:557:11, col:23> 'void'
|-ImplicitCastExpr 0x558fa8f1c2b0 <col:11> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1c260 <col:11> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f1c2f8 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1c288 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B7.2]([B7.4])
   6: DeclRefExpr 0x558fa8f1c310 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
   7: ImplicitCastExpr 0x558fa8f1c650 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1c310 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B7.6] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
   8: DeclRefExpr 0x558fa8f1c338 <lparser.c:560:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f1c6a8 <lparser.c:560:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c338 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B7.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: DeclRefExpr 0x558fa8f1c360 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  11: ImplicitCastExpr 0x558fa8f1c568 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1c360 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B7.10] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  12: DeclRefExpr 0x558fa8f1c388 <lparser.c:560:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
  13: ImplicitCastExpr 0x558fa8f1c5c0 <lparser.c:560:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c388 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B7.12] (ImplicitCastExpr, LValueToRValue, LexState *)
  14: StringLiteral 0x558fa8f1c3e8 <lparser.c:157:39, line:560:35> 'char [4]' lvalue "arg"
"arg"
  15: ImplicitCastExpr 0x558fa8f1c5d8 <lparser.c:157:39, line:560:35> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f1c3e8 <line:157:39, line:560:35> 'char [4]' lvalue "arg"
[B7.14] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  16: ImplicitCastExpr 0x558fa8f1c5f0 <lparser.c:157:39, line:560:35> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f1c5d8 <line:157:39, line:560:35> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f1c3e8 <line:157:39, line:560:35> 'char [4]' lvalue "arg"
[B7.15] (ImplicitCastExpr, BitCast, const char *)
  17: UnaryExprOrTypeTraitExpr 0x558fa8f1c470 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f1c450 <col:52, col:54> 'char [4]' lvalue
  `-StringLiteral 0x558fa8f1c420 <line:560:35> 'char [4]' lvalue "arg"
sizeof ("arg")
  18: UnaryExprOrTypeTraitExpr 0x558fa8f1c4a0 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  19: BinaryOperator 0x558fa8f1c4c0 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f1c470 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f1c450 <col:52, col:54> 'char [4]' lvalue
|   `-StringLiteral 0x558fa8f1c420 <line:560:35> 'char [4]' lvalue "arg"
`-UnaryExprOrTypeTraitExpr 0x558fa8f1c4a0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B7.17] / [B7.18]
  20: IntegerLiteral 0x558fa8f1c508 <lparser.c:157:70> 'int' 1
1
  21: ImplicitCastExpr 0x558fa8f1c528 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f1c508 <col:70> 'int' 1
[B7.20] (ImplicitCastExpr, IntegralCast, unsigned long)
  22: BinaryOperator 0x558fa8f1c540 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f1c4e8 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f1c4c0 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f1c470 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f1c450 <col:52, col:54> 'char [4]' lvalue
|   |   `-StringLiteral 0x558fa8f1c420 <line:560:35> 'char [4]' lvalue "arg"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f1c4a0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f1c528 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f1c508 <col:70> 'int' 1
([B7.19]) - [B7.21]
  23: CallExpr 0x558fa8f1c580 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f1c568 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1c360 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f1c5c0 <line:560:31> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1c388 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f1c5f0 <line:157:39, line:560:35> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f1c5d8 <line:157:39, line:560:35> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f1c3e8 <line:157:39, line:560:35> 'char [4]' lvalue "arg"
`-BinaryOperator 0x558fa8f1c540 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f1c4e8 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f1c4c0 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f1c470 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f1c450 <col:52, col:54> 'char [4]' lvalue
  |   |   `-StringLiteral 0x558fa8f1c420 <line:560:35> 'char [4]' lvalue "arg"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f1c4a0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f1c528 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f1c508 <col:70> 'int' 1
[B7.11]([B7.13], [B7.16], [B7.22])
  24: DeclRefExpr 0x558fa8f1c608 <lparser.c:560:42> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
nparams
  25: UnaryOperator 0x558fa8f1c630 <lparser.c:560:42, col:49> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f1c608 <col:42> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
[B7.24]++
  26: CallExpr 0x558fa8f1c668 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f1c650 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1c310 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f1c6a8 <line:560:31> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1c338 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
|-CallExpr 0x558fa8f1c580 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f1c568 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f1c360 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f1c5c0 <line:560:31> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f1c388 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f1c5f0 <line:157:39, line:560:35> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f1c5d8 <line:157:39, line:560:35> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f1c3e8 <line:157:39, line:560:35> 'char [4]' lvalue "arg"
| `-BinaryOperator 0x558fa8f1c540 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f1c4e8 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f1c4c0 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f1c470 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f1c450 <col:52, col:54> 'char [4]' lvalue
|   |   |   `-StringLiteral 0x558fa8f1c420 <line:560:35> 'char [4]' lvalue "arg"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f1c4a0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f1c528 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f1c508 <col:70> 'int' 1
`-UnaryOperator 0x558fa8f1c630 <line:560:42, col:49> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f1c608 <col:42> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
[B7.7]([B7.9], [B7.23], [B7.25])
  27: IntegerLiteral 0x558fa8f1c738 <./lobject.h:257:24> 'int' 1
1
  28: IntegerLiteral 0x558fa8f1c758 <./lobject.h:259:26> 'int' 4
4
  29: BinaryOperator 0x558fa8f1c778 <./lobject.h:257:24, line:259:26> 'int' '|'
|-IntegerLiteral 0x558fa8f1c738 <line:257:24> 'int' 1
`-IntegerLiteral 0x558fa8f1c758 <line:259:26> 'int' 4
[B7.27] | [B7.28]
  30: ImplicitCastExpr 0x558fa8f1c7a0 <./lobject.h:257:24, line:259:26> 'lu_byte':'unsigned char' <IntegralCast>
`-BinaryOperator 0x558fa8f1c778 <line:257:24, line:259:26> 'int' '|'
  |-IntegerLiteral 0x558fa8f1c738 <line:257:24> 'int' 1
  `-IntegerLiteral 0x558fa8f1c758 <line:259:26> 'int' 4
[B7.29] (ImplicitCastExpr, IntegralCast, lu_byte)
  31: DeclRefExpr 0x558fa8f1c6c0 <lparser.c:561:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
f
  32: ImplicitCastExpr 0x558fa8f1c6e8 <lparser.c:561:11> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c6c0 <col:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B7.31] (ImplicitCastExpr, LValueToRValue, Proto *)
  33: MemberExpr 0x558fa8f1c700 <lparser.c:561:11, col:14> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
`-ImplicitCastExpr 0x558fa8f1c6e8 <col:11> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1c6c0 <col:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B7.32]->is_vararg
  34: BinaryOperator 0x558fa8f1c7b8 <lparser.c:561:11, ./lobject.h:259:26> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f1c700 <lparser.c:561:11, col:14> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
| `-ImplicitCastExpr 0x558fa8f1c6e8 <col:11> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f1c6c0 <col:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
`-ImplicitCastExpr 0x558fa8f1c7a0 <./lobject.h:257:24, line:259:26> 'lu_byte':'unsigned char' <IntegralCast>
  `-BinaryOperator 0x558fa8f1c778 <line:257:24, line:259:26> 'int' '|'
    |-IntegerLiteral 0x558fa8f1c738 <line:257:24> 'int' 1
    `-IntegerLiteral 0x558fa8f1c758 <line:259:26> 'int' 4
[B7.33] = [B7.30]
  35: DeclRefExpr 0x558fa8f1c7e0 <lparser.c:563:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
f
  36: ImplicitCastExpr 0x558fa8f1c808 <lparser.c:563:11> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c7e0 <col:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B7.35] (ImplicitCastExpr, LValueToRValue, Proto *)
  37: MemberExpr 0x558fa8f1c820 <lparser.c:563:11, col:14> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
`-ImplicitCastExpr 0x558fa8f1c808 <col:11> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1c7e0 <col:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B7.36]->is_vararg
  38: IntegerLiteral 0x558fa8f1c858 <./lobject.h:258:26> 'int' 2
2
  39: CompoundAssignOperator 0x558fa8f1c878 <lparser.c:563:11, ./lobject.h:258:26> 'lu_byte':'unsigned char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|-MemberExpr 0x558fa8f1c820 <lparser.c:563:11, col:14> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
| `-ImplicitCastExpr 0x558fa8f1c808 <col:11> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f1c7e0 <col:11> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
`-IntegerLiteral 0x558fa8f1c858 <./lobject.h:258:26> 'int' 2
[B7.37] |= [B7.38]
   T: break;
   Preds (1): B5
   Succs (1): B4

 [B8]
  case TK_NAME:
   1: DeclRefExpr 0x558fa8f1bfc8 <lparser.c:553:11> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
   2: ImplicitCastExpr 0x558fa8f1c168 <lparser.c:553:11> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1bfc8 <col:11> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
   3: DeclRefExpr 0x558fa8f1bff0 <lparser.c:553:24> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1c1c0 <lparser.c:553:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1bff0 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f1c018 <lparser.c:553:28> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
str_checkname
   6: ImplicitCastExpr 0x558fa8f1c068 <lparser.c:553:28> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1c018 <col:28> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
[B8.5] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *))
   7: DeclRefExpr 0x558fa8f1c040 <lparser.c:553:42> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f1c0b0 <lparser.c:553:42> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1c040 <col:42> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B8.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: CallExpr 0x558fa8f1c080 <lparser.c:553:28, col:44> 'TString *'
|-ImplicitCastExpr 0x558fa8f1c068 <col:28> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1c018 <col:28> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
`-ImplicitCastExpr 0x558fa8f1c0b0 <col:42> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1c040 <col:42> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B8.6]([B8.8])
  10: DeclRefExpr 0x558fa8f1c0c8 <lparser.c:553:47> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
nparams
  11: UnaryOperator 0x558fa8f1c0f0 <lparser.c:553:47, col:54> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f1c0c8 <col:47> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
[B8.10]++
  12: CallExpr 0x558fa8f1c180 <lparser.c:553:11, col:56> 'void'
|-ImplicitCastExpr 0x558fa8f1c168 <col:11> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1bfc8 <col:11> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f1c1c0 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1bff0 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
|-CallExpr 0x558fa8f1c080 <col:28, col:44> 'TString *'
| |-ImplicitCastExpr 0x558fa8f1c068 <col:28> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f1c018 <col:28> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
| `-ImplicitCastExpr 0x558fa8f1c0b0 <col:42> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f1c040 <col:42> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f1c0f0 <col:47, col:54> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f1c0c8 <col:47> 'int' lvalue Var 0x558fa8f1bbf8 'nparams' 'int'
[B8.2]([B8.4], [B8.9], [B8.11])
   T: break;
   Preds (1): B5
   Succs (1): B4

 [B9]
   Preds (1): B2
   Succs (1): B5

 [B10]
   1: DeclRefExpr 0x558fa8f1ba20 <lparser.c:545:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f1ba48 <lparser.c:545:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ba20 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f1ba60 <lparser.c:545:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f1ba48 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ba20 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.2]->fs
   4: ImplicitCastExpr 0x558fa8f1ba98 <lparser.c:545:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f1ba60 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f1ba48 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1ba20 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f1bab0 <lparser.c:545:3, col:25>col:14
`-VarDecl 0x558fa8f1b9c0 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f1ba98 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f1ba60 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f1ba48 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1ba20 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclRefExpr 0x558fa8f1bb38 <lparser.c:546:14> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x558fa8f1bb60 <lparser.c:546:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1bb38 <col:14> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B10.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: MemberExpr 0x558fa8f1bb78 <lparser.c:546:14, col:18> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f1bb60 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1bb38 <col:14> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B10.7]->f
   9: ImplicitCastExpr 0x558fa8f1bbb0 <lparser.c:546:14, col:18> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f1bb78 <col:14, col:18> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f1bb60 <col:14> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1bb38 <col:14> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
[B10.8] (ImplicitCastExpr, LValueToRValue, Proto *)
  10: DeclStmt 0x558fa8f1bbc8 <lparser.c:546:3, col:19>col:10
`-VarDecl 0x558fa8f1bad8 <col:3, col:18> col:10 used f 'Proto *' cinit
  `-ImplicitCastExpr 0x558fa8f1bbb0 <col:14, col:18> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f1bb78 <col:14, col:18> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f1bb60 <col:14> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1bb38 <col:14> 'FuncState *' lvalue Var 0x558fa8f1b9c0 'fs' 'FuncState *'
Proto *f = fs->f;
  11: IntegerLiteral 0x558fa8f1bc58 <lparser.c:547:17> 'int' 0
0
  12: DeclStmt 0x558fa8f1bc78 <lparser.c:547:3, col:18>col:7
`-VarDecl 0x558fa8f1bbf8 <col:3, col:17> col:7 used nparams 'int' cinit
  `-IntegerLiteral 0x558fa8f1bc58 <col:17> 'int' 0
int nparams = 0;
  13: IntegerLiteral 0x558fa8f1bd08 <lparser.c:548:18> 'int' 0
0
  14: ImplicitCastExpr 0x558fa8f1bd28 <lparser.c:548:18> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f1bd08 <col:18> 'int' 0
[B10.13] (ImplicitCastExpr, IntegralCast, lu_byte)
  15: DeclRefExpr 0x558fa8f1bc90 <lparser.c:548:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
f
  16: ImplicitCastExpr 0x558fa8f1bcb8 <lparser.c:548:3> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1bc90 <col:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B10.15] (ImplicitCastExpr, LValueToRValue, Proto *)
  17: MemberExpr 0x558fa8f1bcd0 <lparser.c:548:3, col:6> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
`-ImplicitCastExpr 0x558fa8f1bcb8 <col:3> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1bc90 <col:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
[B10.16]->is_vararg
  18: BinaryOperator 0x558fa8f1bd40 <lparser.c:548:3, col:18> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f1bcd0 <col:3, col:6> 'lu_byte':'unsigned char' lvalue ->is_vararg 0x558fa8e8f848
| `-ImplicitCastExpr 0x558fa8f1bcb8 <col:3> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f1bc90 <col:3> 'Proto *' lvalue Var 0x558fa8f1bad8 'f' 'Proto *'
`-ImplicitCastExpr 0x558fa8f1bd28 <col:18> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f1bd08 <col:18> 'int' 0
[B10.17] = [B10.14]
  19: DeclRefExpr 0x558fa8f1bd68 <lparser.c:549:7> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
ls
  20: ImplicitCastExpr 0x558fa8f1bd90 <lparser.c:549:7> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1bd68 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.19] (ImplicitCastExpr, LValueToRValue, LexState *)
  21: MemberExpr 0x558fa8f1bda8 <lparser.c:549:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f1bd90 <col:7> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1bd68 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.20]->t
  22: MemberExpr 0x558fa8f1bde0 <lparser.c:549:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f1bda8 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f1bd90 <col:7> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1bd68 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.21].token
  23: ImplicitCastExpr 0x558fa8f1be30 <lparser.c:549:7, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1bde0 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f1bda8 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f1bd90 <col:7> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1bd68 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
[B10.22] (ImplicitCastExpr, LValueToRValue, int)
  24: CharacterLiteral 0x558fa8f1be18 <lparser.c:549:22> 'int' 41
')'
  25: BinaryOperator 0x558fa8f1be48 <lparser.c:549:7, col:22> 'int' '!='
|-ImplicitCastExpr 0x558fa8f1be30 <col:7, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f1bde0 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f1bda8 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f1bd90 <col:7> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f1bd68 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f1b880 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f1be18 <col:22> 'int' 41
[B10.23] != [B10.24]
   T: if [B10.25]
   Preds (1): B11
   Succs (2): B5 B1

 [B0 (EXIT)]
   Preds (1): B1
