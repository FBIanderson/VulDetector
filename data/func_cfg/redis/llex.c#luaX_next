void luaX_next(LexState *ls)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x561ce746cd38 <llex.c:455:19> 'int (LexState *, SemInfo *)' Function 0x561ce7461848 'llex' 'int (LexState *, SemInfo *)'
llex
   2: ImplicitCastExpr 0x561ce746ceb8 <llex.c:455:19> 'int (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746cd38 <col:19> 'int (LexState *, SemInfo *)' Function 0x561ce7461848 'llex' 'int (LexState *, SemInfo *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, SemInfo *))
   3: DeclRefExpr 0x561ce746cd60 <llex.c:455:24> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce746cf08 <llex.c:455:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746cd60 <col:24> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce746cd88 <llex.c:455:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce746cdb0 <llex.c:455:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746cd88 <col:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce746cdc8 <llex.c:455:29, col:33> 'Token':'struct Token' lvalue ->t 0x561ce7426930
`-ImplicitCastExpr 0x561ce746cdb0 <col:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746cd88 <col:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.6]->t
   8: MemberExpr 0x561ce746ce00 <llex.c:455:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x561ce7425420
`-MemberExpr 0x561ce746cdc8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x561ce7426930
  `-ImplicitCastExpr 0x561ce746cdb0 <col:29> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746cd88 <col:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.7].seminfo
   9: UnaryOperator 0x561ce746ce38 <llex.c:455:28, col:35> 'SemInfo *' prefix '&'
`-MemberExpr 0x561ce746ce00 <col:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x561ce7425420
  `-MemberExpr 0x561ce746cdc8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x561ce7426930
    `-ImplicitCastExpr 0x561ce746cdb0 <col:29> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746cd88 <col:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
&[B1.8]
  10: CallExpr 0x561ce746ced0 <llex.c:455:19, col:42> 'int'
|-ImplicitCastExpr 0x561ce746ceb8 <col:19> 'int (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce746cd38 <col:19> 'int (LexState *, SemInfo *)' Function 0x561ce7461848 'llex' 'int (LexState *, SemInfo *)'
|-ImplicitCastExpr 0x561ce746cf08 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce746cd60 <col:24> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
`-UnaryOperator 0x561ce746ce38 <col:28, col:35> 'SemInfo *' prefix '&'
  `-MemberExpr 0x561ce746ce00 <col:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x561ce7425420
    `-MemberExpr 0x561ce746cdc8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x561ce7426930
      `-ImplicitCastExpr 0x561ce746cdb0 <col:29> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746cd88 <col:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.2]([B1.4], [B1.9])
  11: DeclRefExpr 0x561ce746cc88 <llex.c:455:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x561ce746ccb0 <llex.c:455:5> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746cc88 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: MemberExpr 0x561ce746ccc8 <llex.c:455:5, col:9> 'Token':'struct Token' lvalue ->t 0x561ce7426930
`-ImplicitCastExpr 0x561ce746ccb0 <col:5> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746cc88 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.12]->t
  14: MemberExpr 0x561ce746cd00 <llex.c:455:5, col:11> 'int' lvalue .token 0x561ce74253a8
`-MemberExpr 0x561ce746ccc8 <col:5, col:9> 'Token':'struct Token' lvalue ->t 0x561ce7426930
  `-ImplicitCastExpr 0x561ce746ccb0 <col:5> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746cc88 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.13].token
  15: BinaryOperator 0x561ce746cf20 <llex.c:455:5, col:42> 'int' '='
|-MemberExpr 0x561ce746cd00 <col:5, col:11> 'int' lvalue .token 0x561ce74253a8
| `-MemberExpr 0x561ce746ccc8 <col:5, col:9> 'Token':'struct Token' lvalue ->t 0x561ce7426930
|   `-ImplicitCastExpr 0x561ce746ccb0 <col:5> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce746cc88 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
`-CallExpr 0x561ce746ced0 <col:19, col:42> 'int'
  |-ImplicitCastExpr 0x561ce746ceb8 <col:19> 'int (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce746cd38 <col:19> 'int (LexState *, SemInfo *)' Function 0x561ce7461848 'llex' 'int (LexState *, SemInfo *)'
  |-ImplicitCastExpr 0x561ce746cf08 <col:24> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x561ce746cd60 <col:24> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
  `-UnaryOperator 0x561ce746ce38 <col:28, col:35> 'SemInfo *' prefix '&'
    `-MemberExpr 0x561ce746ce00 <col:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x561ce7425420
      `-MemberExpr 0x561ce746cdc8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x561ce7426930
        `-ImplicitCastExpr 0x561ce746cdb0 <col:29> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746cd88 <col:29> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B1.14] = [B1.10]
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce746cab0 <llex.c:451:13> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746cad8 <llex.c:451:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746cab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746caf0 <llex.c:451:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
`-ImplicitCastExpr 0x561ce746cad8 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746cab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.2]->lookahead
   4: ImplicitCastExpr 0x561ce746cb28 <llex.c:451:13, col:17> 'Token':'struct Token' <LValueToRValue>
`-MemberExpr 0x561ce746caf0 <col:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
  `-ImplicitCastExpr 0x561ce746cad8 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746cab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, Token)
   5: DeclRefExpr 0x561ce746ca38 <llex.c:451:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce746ca60 <llex.c:451:5> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746ca38 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce746ca78 <llex.c:451:5, col:9> 'Token':'struct Token' lvalue ->t 0x561ce7426930
`-ImplicitCastExpr 0x561ce746ca60 <col:5> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746ca38 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.6]->t
   8: BinaryOperator 0x561ce746cb40 <llex.c:451:5, col:17> 'Token':'struct Token' '='
|-MemberExpr 0x561ce746ca78 <col:5, col:9> 'Token':'struct Token' lvalue ->t 0x561ce7426930
| `-ImplicitCastExpr 0x561ce746ca60 <col:5> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce746ca38 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746cb28 <col:13, col:17> 'Token':'struct Token' <LValueToRValue>
  `-MemberExpr 0x561ce746caf0 <col:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
    `-ImplicitCastExpr 0x561ce746cad8 <col:13> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746cab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.7] = [B2.4]
   9: DeclRefExpr 0x561ce746cc18 <llex.c:452:27> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
TK_EOS
  10: DeclRefExpr 0x561ce746cb68 <llex.c:452:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce746cb90 <llex.c:452:5> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746cb68 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce746cba8 <llex.c:452:5, col:9> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
`-ImplicitCastExpr 0x561ce746cb90 <col:5> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746cb68 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.11]->lookahead
  13: MemberExpr 0x561ce746cbe0 <llex.c:452:5, col:19> 'int' lvalue .token 0x561ce74253a8
`-MemberExpr 0x561ce746cba8 <col:5, col:9> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
  `-ImplicitCastExpr 0x561ce746cb90 <col:5> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746cb68 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B2.12].token
  14: BinaryOperator 0x561ce746cc40 <llex.c:452:5, col:27> 'int' '='
|-MemberExpr 0x561ce746cbe0 <col:5, col:19> 'int' lvalue .token 0x561ce74253a8
| `-MemberExpr 0x561ce746cba8 <col:5, col:9> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
|   `-ImplicitCastExpr 0x561ce746cb90 <col:5> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce746cb68 <col:5> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
`-DeclRefExpr 0x561ce746cc18 <col:27> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
[B2.13] = [B2.9]
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x561ce746c868 <llex.c:449:18> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746c890 <llex.c:449:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746c868 <col:18> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746c8a8 <llex.c:449:18, col:22> 'int' lvalue ->linenumber 0x561ce7426850
`-ImplicitCastExpr 0x561ce746c890 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746c868 <col:18> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.2]->linenumber
   4: ImplicitCastExpr 0x561ce746c8e0 <llex.c:449:18, col:22> 'int' <LValueToRValue>
`-MemberExpr 0x561ce746c8a8 <col:18, col:22> 'int' lvalue ->linenumber 0x561ce7426850
  `-ImplicitCastExpr 0x561ce746c890 <col:18> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746c868 <col:18> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x561ce746c7f0 <llex.c:449:3> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce746c818 <llex.c:449:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746c7f0 <col:3> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce746c830 <llex.c:449:3, col:7> 'int' lvalue ->lastline 0x561ce74268b0
`-ImplicitCastExpr 0x561ce746c818 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746c7f0 <col:3> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.6]->lastline
   8: BinaryOperator 0x561ce746c8f8 <llex.c:449:3, col:22> 'int' '='
|-MemberExpr 0x561ce746c830 <col:3, col:7> 'int' lvalue ->lastline 0x561ce74268b0
| `-ImplicitCastExpr 0x561ce746c818 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce746c7f0 <col:3> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746c8e0 <col:18, col:22> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce746c8a8 <col:18, col:22> 'int' lvalue ->linenumber 0x561ce7426850
    `-ImplicitCastExpr 0x561ce746c890 <col:18> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746c868 <col:18> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.7] = [B3.4]
   9: DeclRefExpr 0x561ce746c920 <llex.c:450:7> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce746c948 <llex.c:450:7> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746c920 <col:7> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: MemberExpr 0x561ce746c960 <llex.c:450:7, col:11> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
`-ImplicitCastExpr 0x561ce746c948 <col:7> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746c920 <col:7> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.10]->lookahead
  12: MemberExpr 0x561ce746c998 <llex.c:450:7, col:21> 'int' lvalue .token 0x561ce74253a8
`-MemberExpr 0x561ce746c960 <col:7, col:11> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
  `-ImplicitCastExpr 0x561ce746c948 <col:7> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746c920 <col:7> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.11].token
  13: ImplicitCastExpr 0x561ce746c9f8 <llex.c:450:7, col:21> 'int' <LValueToRValue>
`-MemberExpr 0x561ce746c998 <col:7, col:21> 'int' lvalue .token 0x561ce74253a8
  `-MemberExpr 0x561ce746c960 <col:7, col:11> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
    `-ImplicitCastExpr 0x561ce746c948 <col:7> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746c920 <col:7> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
[B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: DeclRefExpr 0x561ce746c9d0 <llex.c:450:30> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
TK_EOS
  15: BinaryOperator 0x561ce746ca10 <llex.c:450:7, col:30> 'int' '!='
|-ImplicitCastExpr 0x561ce746c9f8 <col:7, col:21> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce746c998 <col:7, col:21> 'int' lvalue .token 0x561ce74253a8
|   `-MemberExpr 0x561ce746c960 <col:7, col:11> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
|     `-ImplicitCastExpr 0x561ce746c948 <col:7> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce746c920 <col:7> 'LexState *' lvalue ParmVar 0x561ce746c678 'ls' 'LexState *'
`-DeclRefExpr 0x561ce746c9d0 <col:30> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
[B3.13] != [B3.14]
   T: if [B3.15]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
