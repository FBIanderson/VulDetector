static void check(LexState *ls, int c)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x558fa8eed9f0 <lparser.c:91:5> 'void (LexState *, int)' Function 0x558fa8eead40 'error_expected' 'void (LexState *, int)'
error_expected
   2: ImplicitCastExpr 0x558fa8eedac8 <lparser.c:91:5> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eed9f0 <col:5> 'void (LexState *, int)' Function 0x558fa8eead40 'error_expected' 'void (LexState *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8eeda18 <lparser.c:91:20> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8eedb18 <lparser.c:91:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eeda18 <col:20> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8eeda40 <lparser.c:91:24> 'int' lvalue ParmVar 0x558fa8eed780 'c' 'int'
c
   6: ImplicitCastExpr 0x558fa8eedb30 <lparser.c:91:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eeda40 <col:24> 'int' lvalue ParmVar 0x558fa8eed780 'c' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x558fa8eedae0 <lparser.c:91:5, col:25> 'void'
|-ImplicitCastExpr 0x558fa8eedac8 <col:5> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eed9f0 <col:5> 'void (LexState *, int)' Function 0x558fa8eead40 'error_expected' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8eedb18 <col:20> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eeda18 <col:20> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8eedb30 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eeda40 <col:24> 'int' lvalue ParmVar 0x558fa8eed780 'c' 'int'
[B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8eed8c0 <lparser.c:90:7> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8eed8e8 <lparser.c:90:7> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eed8c0 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8eed900 <lparser.c:90:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8eed8e8 <col:7> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eed8c0 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
[B2.2]->t
   4: MemberExpr 0x558fa8eed938 <lparser.c:90:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8eed900 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8eed8e8 <col:7> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eed8c0 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
[B2.3].token
   5: ImplicitCastExpr 0x558fa8eed998 <lparser.c:90:7, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8eed938 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8eed900 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8eed8e8 <col:7> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eed8c0 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
[B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x558fa8eed970 <lparser.c:90:22> 'int' lvalue ParmVar 0x558fa8eed780 'c' 'int'
c
   7: ImplicitCastExpr 0x558fa8eed9b0 <lparser.c:90:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eed970 <col:22> 'int' lvalue ParmVar 0x558fa8eed780 'c' 'int'
[B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: BinaryOperator 0x558fa8eed9c8 <lparser.c:90:7, col:22> 'int' '!='
|-ImplicitCastExpr 0x558fa8eed998 <col:7, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8eed938 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8eed900 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8eed8e8 <col:7> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8eed8c0 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eed708 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8eed9b0 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eed970 <col:22> 'int' lvalue ParmVar 0x558fa8eed780 'c' 'int'
[B2.5] != [B2.7]
   T: if [B2.8]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2
