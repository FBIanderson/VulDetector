static void discharge2anyreg(FuncState *fs, expdesc *e)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x5637768cfee0 <lcode.c:384:5> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
   2: ImplicitCastExpr 0x5637768cff50 <lcode.c:384:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768cfee0 <col:5> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768cff08 <lcode.c:384:22> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768cffa0 <lcode.c:384:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768cff08 <col:22> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: IntegerLiteral 0x5637768cff30 <lcode.c:384:26> 'int' 1
1
   6: CallExpr 0x5637768cff68 <lcode.c:384:5, col:27> 'void'
|-ImplicitCastExpr 0x5637768cff50 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768cfee0 <col:5> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768cffa0 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768cff08 <col:22> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
`-IntegerLiteral 0x5637768cff30 <col:26> 'int' 1
[B1.2]([B1.4], [B1.5])
   7: DeclRefExpr 0x5637768cffb8 <lcode.c:385:5> 'void (FuncState *, expdesc *, int)' Function 0x5637768cd6b0 'discharge2reg' 'void (FuncState *, expdesc *, int)'
discharge2reg
   8: ImplicitCastExpr 0x5637768d0168 <lcode.c:385:5> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768cffb8 <col:5> 'void (FuncState *, expdesc *, int)' Function 0x5637768cd6b0 'discharge2reg' 'void (FuncState *, expdesc *, int)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, int))
   9: DeclRefExpr 0x5637768cffe0 <lcode.c:385:19> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x5637768d01c0 <lcode.c:385:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768cffe0 <col:19> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: DeclRefExpr 0x5637768d0008 <lcode.c:385:23> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
e
  12: ImplicitCastExpr 0x5637768d01d8 <lcode.c:385:23> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0008 <col:23> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
[B1.11] (ImplicitCastExpr, LValueToRValue, expdesc *)
  13: DeclRefExpr 0x5637768d0030 <lcode.c:385:26> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x5637768d0058 <lcode.c:385:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0030 <col:26> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
[B1.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: MemberExpr 0x5637768d0070 <lcode.c:385:26, col:30> 'int' lvalue ->freereg 0x56377687e268
`-ImplicitCastExpr 0x5637768d0058 <col:26> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d0030 <col:26> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
[B1.14]->freereg
  16: ImplicitCastExpr 0x5637768d00c8 <lcode.c:385:26, col:30> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d0070 <col:26, col:30> 'int' lvalue ->freereg 0x56377687e268
  `-ImplicitCastExpr 0x5637768d0058 <col:26> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d0030 <col:26> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
[B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: IntegerLiteral 0x5637768d00a8 <lcode.c:385:38> 'int' 1
1
  18: BinaryOperator 0x5637768d00e0 <lcode.c:385:26, col:38> 'int' '-'
|-ImplicitCastExpr 0x5637768d00c8 <col:26, col:30> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d0070 <col:26, col:30> 'int' lvalue ->freereg 0x56377687e268
|   `-ImplicitCastExpr 0x5637768d0058 <col:26> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768d0030 <col:26> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
`-IntegerLiteral 0x5637768d00a8 <col:38> 'int' 1
[B1.16] - [B1.17]
  19: CallExpr 0x5637768d0180 <lcode.c:385:5, col:39> 'void'
|-ImplicitCastExpr 0x5637768d0168 <col:5> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768cffb8 <col:5> 'void (FuncState *, expdesc *, int)' Function 0x5637768cd6b0 'discharge2reg' 'void (FuncState *, expdesc *, int)'
|-ImplicitCastExpr 0x5637768d01c0 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768cffe0 <col:19> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d01d8 <col:23> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d0008 <col:23> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
`-BinaryOperator 0x5637768d00e0 <col:26, col:38> 'int' '-'
  |-ImplicitCastExpr 0x5637768d00c8 <col:26, col:30> 'int' <LValueToRValue>
  | `-MemberExpr 0x5637768d0070 <col:26, col:30> 'int' lvalue ->freereg 0x56377687e268
  |   `-ImplicitCastExpr 0x5637768d0058 <col:26> 'FuncState *' <LValueToRValue>
  |     `-DeclRefExpr 0x5637768d0030 <col:26> 'FuncState *' lvalue ParmVar 0x5637768cfc20 'fs' 'FuncState *'
  `-IntegerLiteral 0x5637768d00a8 <col:38> 'int' 1
[B1.8]([B1.10], [B1.12], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768cfdd0 <lcode.c:383:7> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768cfdf8 <lcode.c:383:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cfdd0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
[B2.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768cfe10 <lcode.c:383:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768cfdf8 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cfdd0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
[B2.2]->k
   4: ImplicitCastExpr 0x5637768cfe70 <lcode.c:383:7, col:10> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768cfe10 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768cfdf8 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768cfdd0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
[B2.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768cfe88 <lcode.c:383:7, col:10> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768cfe70 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768cfe10 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768cfdf8 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cfdd0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
[B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768cfe48 <lcode.c:383:15> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
VNONRELOC
   7: ImplicitCastExpr 0x5637768cfea0 <lcode.c:383:15> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768cfe48 <col:15> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B2.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768cfeb8 <lcode.c:383:7, col:15> 'int' '!='
|-ImplicitCastExpr 0x5637768cfe88 <col:7, col:10> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768cfe70 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768cfe10 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768cfdf8 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768cfdd0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768cfc90 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768cfea0 <col:15> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768cfe48 <col:15> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B2.5] != [B2.7]
   T: if [B2.8]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2
