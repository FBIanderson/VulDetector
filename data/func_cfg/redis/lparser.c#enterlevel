static void enterlevel(LexState *ls)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x558fa8f00000 <lparser.c:278:2> 'void (LexState *, const char *, int)' Function 0x558fa8ea1940 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x558fa8f000f0 <lparser.c:278:2> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f00000 <col:2> 'void (LexState *, const char *, int)' Function 0x558fa8ea1940 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x558fa8f00028 <lparser.c:278:16> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f00148 <lparser.c:278:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00028 <col:16> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f00088 <lparser.c:278:20> 'char [33]' lvalue "chunk has too many syntax levels"
"chunk has too many syntax levels"
   6: ImplicitCastExpr 0x558fa8f00160 <lparser.c:278:20> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f00088 <col:20> 'char [33]' lvalue "chunk has too many syntax levels"
[B1.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f00178 <lparser.c:278:20> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f00160 <col:20> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f00088 <col:20> 'char [33]' lvalue "chunk has too many syntax levels"
[B1.6] (ImplicitCastExpr, BitCast, const char *)
   8: IntegerLiteral 0x558fa8f000d0 <lparser.c:278:56> 'int' 0
0
   9: CallExpr 0x558fa8f00108 <lparser.c:278:2, col:57> 'void'
|-ImplicitCastExpr 0x558fa8f000f0 <col:2> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f00000 <col:2> 'void (LexState *, const char *, int)' Function 0x558fa8ea1940 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x558fa8f00148 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f00028 <col:16> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f00178 <col:20> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f00160 <col:20> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f00088 <col:20> 'char [33]' lvalue "chunk has too many syntax levels"
`-IntegerLiteral 0x558fa8f000d0 <col:56> 'int' 0
[B1.2]([B1.4], [B1.7], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8effeb8 <lparser.c:277:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8effee0 <lparser.c:277:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8effef8 <lparser.c:277:9, col:13> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8effee0 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
[B2.2]->L
   4: ImplicitCastExpr 0x558fa8efff30 <lparser.c:277:9, col:13> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8effef8 <col:9, col:13> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8effee0 <col:9> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   5: MemberExpr 0x558fa8efff48 <lparser.c:277:9, col:16> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
`-ImplicitCastExpr 0x558fa8efff30 <col:9, col:13> 'struct lua_State *' <LValueToRValue>
  `-MemberExpr 0x558fa8effef8 <col:9, col:13> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
    `-ImplicitCastExpr 0x558fa8effee0 <col:9> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
[B2.4]->nCcalls
   6: UnaryOperator 0x558fa8efff80 <lparser.c:277:7, col:16> 'unsigned short' prefix '++'
`-MemberExpr 0x558fa8efff48 <col:9, col:16> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
  `-ImplicitCastExpr 0x558fa8efff30 <col:9, col:13> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x558fa8effef8 <col:9, col:13> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
      `-ImplicitCastExpr 0x558fa8effee0 <col:9> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
++[B2.5]
   7: ImplicitCastExpr 0x558fa8efffc0 <lparser.c:277:7, col:16> 'int' <IntegralCast>
`-UnaryOperator 0x558fa8efff80 <col:7, col:16> 'unsigned short' prefix '++'
  `-MemberExpr 0x558fa8efff48 <col:9, col:16> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
    `-ImplicitCastExpr 0x558fa8efff30 <col:9, col:13> 'struct lua_State *' <LValueToRValue>
      `-MemberExpr 0x558fa8effef8 <col:9, col:13> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
        `-ImplicitCastExpr 0x558fa8effee0 <col:9> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
[B2.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x558fa8efffa0 <./luaconf.h:468:25> 'int' 200
200
   9: BinaryOperator 0x558fa8efffd8 <lparser.c:277:7, ./luaconf.h:468:25> 'int' '>'
|-ImplicitCastExpr 0x558fa8efffc0 <lparser.c:277:7, col:16> 'int' <IntegralCast>
| `-UnaryOperator 0x558fa8efff80 <col:7, col:16> 'unsigned short' prefix '++'
|   `-MemberExpr 0x558fa8efff48 <col:9, col:16> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
|     `-ImplicitCastExpr 0x558fa8efff30 <col:9, col:13> 'struct lua_State *' <LValueToRValue>
|       `-MemberExpr 0x558fa8effef8 <col:9, col:13> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
|         `-ImplicitCastExpr 0x558fa8effee0 <col:9> 'LexState *' <LValueToRValue>
|           `-DeclRefExpr 0x558fa8effeb8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8effd88 'ls' 'LexState *'
`-IntegerLiteral 0x558fa8efffa0 <./luaconf.h:468:25> 'int' 200
[B2.7] > [B2.8]
   T: if [B2.9]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2
