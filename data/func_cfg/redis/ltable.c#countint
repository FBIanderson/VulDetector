static int countint(const TValue *key, int *nums)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: IntegerLiteral 0x5654000dafc0 <ltable.c:218:12> 'int' 0
0
   2: ReturnStmt 0x5654000dafe0 <ltable.c:218:5, col:12>
`-IntegerLiteral 0x5654000dafc0 <col:12> 'int' 0
return [B1.1];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5654000dad08 <ltable.c:214:5> 'int *' lvalue ParmVar 0x5654000da860 'nums' 'int *'
nums
   2: ImplicitCastExpr 0x5654000daef0 <ltable.c:214:5> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000dad08 <col:5> 'int *' lvalue ParmVar 0x5654000da860 'nums' 'int *'
[B2.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: DeclRefExpr 0x5654000dad30 <./lobject.h:367:22> 'int (unsigned int)' Function 0x56540009b178 'luaO_log2' 'int (unsigned int)'
luaO_log2
   4: ImplicitCastExpr 0x5654000dae28 <./lobject.h:367:22> 'int (*)(unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000dad30 <col:22> 'int (unsigned int)' Function 0x56540009b178 'luaO_log2' 'int (unsigned int)'
[B2.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(unsigned int))
   5: DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
k
   6: ImplicitCastExpr 0x5654000dadc0 <./lobject.h:367:32, col:34> 'int' <LValueToRValue>
`-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
  `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
([B2.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
1
   8: BinaryOperator 0x5654000dadd8 <./lobject.h:367:32, col:36> 'int' '-'
|-ImplicitCastExpr 0x5654000dadc0 <col:32, col:34> 'int' <LValueToRValue>
| `-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
|   `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
`-IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
[B2.6] - [B2.7]
   9: ImplicitCastExpr 0x5654000dae70 <./lobject.h:367:32, col:36> 'unsigned int' <IntegralCast>
`-BinaryOperator 0x5654000dadd8 <col:32, col:36> 'int' '-'
  |-ImplicitCastExpr 0x5654000dadc0 <col:32, col:34> 'int' <LValueToRValue>
  | `-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
  |   `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
  `-IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
[B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: CallExpr 0x5654000dae40 <./lobject.h:367:22, col:37> 'int'
|-ImplicitCastExpr 0x5654000dae28 <col:22> 'int (*)(unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000dad30 <col:22> 'int (unsigned int)' Function 0x56540009b178 'luaO_log2' 'int (unsigned int)'
`-ImplicitCastExpr 0x5654000dae70 <col:32, col:36> 'unsigned int' <IntegralCast>
  `-BinaryOperator 0x5654000dadd8 <col:32, col:36> 'int' '-'
    |-ImplicitCastExpr 0x5654000dadc0 <col:32, col:34> 'int' <LValueToRValue>
    | `-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
    |   `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
    `-IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
[B2.4]([B2.9])
  11: IntegerLiteral 0x5654000dae88 <./lobject.h:367:41> 'int' 1
1
  12: BinaryOperator 0x5654000daea8 <./lobject.h:367:22, col:41> 'int' '+'
|-CallExpr 0x5654000dae40 <col:22, col:37> 'int'
| |-ImplicitCastExpr 0x5654000dae28 <col:22> 'int (*)(unsigned int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5654000dad30 <col:22> 'int (unsigned int)' Function 0x56540009b178 'luaO_log2' 'int (unsigned int)'
| `-ImplicitCastExpr 0x5654000dae70 <col:32, col:36> 'unsigned int' <IntegralCast>
|   `-BinaryOperator 0x5654000dadd8 <col:32, col:36> 'int' '-'
|     |-ImplicitCastExpr 0x5654000dadc0 <col:32, col:34> 'int' <LValueToRValue>
|     | `-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
|     |   `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
|     `-IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
`-IntegerLiteral 0x5654000dae88 <col:41> 'int' 1
[B2.10] + [B2.11]
  13: ArraySubscriptExpr 0x5654000daf08 <ltable.c:214:5, col:21> 'int' lvalue
|-ImplicitCastExpr 0x5654000daef0 <col:5> 'int *' <LValueToRValue>
| `-DeclRefExpr 0x5654000dad08 <col:5> 'int *' lvalue ParmVar 0x5654000da860 'nums' 'int *'
`-ParenExpr 0x5654000daed0 <./lobject.h:367:21, col:42> 'int'
  `-BinaryOperator 0x5654000daea8 <col:22, col:41> 'int' '+'
    |-CallExpr 0x5654000dae40 <col:22, col:37> 'int'
    | |-ImplicitCastExpr 0x5654000dae28 <col:22> 'int (*)(unsigned int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5654000dad30 <col:22> 'int (unsigned int)' Function 0x56540009b178 'luaO_log2' 'int (unsigned int)'
    | `-ImplicitCastExpr 0x5654000dae70 <col:32, col:36> 'unsigned int' <IntegralCast>
    |   `-BinaryOperator 0x5654000dadd8 <col:32, col:36> 'int' '-'
    |     |-ImplicitCastExpr 0x5654000dadc0 <col:32, col:34> 'int' <LValueToRValue>
    |     | `-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
    |     |   `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
    |     `-IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
    `-IntegerLiteral 0x5654000dae88 <col:41> 'int' 1
[B2.2][([B2.12])]
  14: UnaryOperator 0x5654000daf30 <ltable.c:214:5, col:22> 'int' postfix '++'
`-ArraySubscriptExpr 0x5654000daf08 <col:5, col:21> 'int' lvalue
  |-ImplicitCastExpr 0x5654000daef0 <col:5> 'int *' <LValueToRValue>
  | `-DeclRefExpr 0x5654000dad08 <col:5> 'int *' lvalue ParmVar 0x5654000da860 'nums' 'int *'
  `-ParenExpr 0x5654000daed0 <./lobject.h:367:21, col:42> 'int'
    `-BinaryOperator 0x5654000daea8 <col:22, col:41> 'int' '+'
      |-CallExpr 0x5654000dae40 <col:22, col:37> 'int'
      | |-ImplicitCastExpr 0x5654000dae28 <col:22> 'int (*)(unsigned int)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x5654000dad30 <col:22> 'int (unsigned int)' Function 0x56540009b178 'luaO_log2' 'int (unsigned int)'
      | `-ImplicitCastExpr 0x5654000dae70 <col:32, col:36> 'unsigned int' <IntegralCast>
      |   `-BinaryOperator 0x5654000dadd8 <col:32, col:36> 'int' '-'
      |     |-ImplicitCastExpr 0x5654000dadc0 <col:32, col:34> 'int' <LValueToRValue>
      |     | `-ParenExpr 0x5654000dad80 <col:32, col:34> 'int' lvalue
      |     |   `-DeclRefExpr 0x5654000dad58 <ltable.c:214:19> 'int' lvalue Var 0x5654000daa40 'k' 'int'
      |     `-IntegerLiteral 0x5654000dada0 <./lobject.h:367:36> 'int' 1
      `-IntegerLiteral 0x5654000dae88 <col:41> 'int' 1
[B2.13]++
  15: IntegerLiteral 0x5654000daf50 <ltable.c:215:12> 'int' 1
1
  16: ReturnStmt 0x5654000daf70 <ltable.c:215:5, col:12>
`-IntegerLiteral 0x5654000daf50 <col:12> 'int' 1
return [B2.15];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5654000dabf0 <ltable.c:213:16> 'int' lvalue Var 0x5654000daa40 'k' 'int'
k
   2: ImplicitCastExpr 0x5654000daca0 <ltable.c:213:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dabf0 <col:16> 'int' lvalue Var 0x5654000daa40 'k' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5654000dac18 <ltable.c:47:19> 'int' 1
1
   4: IntegerLiteral 0x5654000dac38 <ltable.c:42:18> 'int' 26
26
   5: BinaryOperator 0x5654000dac58 <ltable.c:47:19, line:42:18> 'int' '<<'
|-IntegerLiteral 0x5654000dac18 <line:47:19> 'int' 1
`-IntegerLiteral 0x5654000dac38 <line:42:18> 'int' 26
[B3.3] << [B3.4]
   6: BinaryOperator 0x5654000dacb8 <ltable.c:213:16, line:47:31> 'int' '<='
|-ImplicitCastExpr 0x5654000daca0 <line:213:16> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000dabf0 <col:16> 'int' lvalue Var 0x5654000daa40 'k' 'int'
`-ParenExpr 0x5654000dac80 <line:47:18, col:31> 'int'
  `-BinaryOperator 0x5654000dac58 <col:19, line:42:18> 'int' '<<'
    |-IntegerLiteral 0x5654000dac18 <line:47:19> 'int' 1
    `-IntegerLiteral 0x5654000dac38 <line:42:18> 'int' 26
[B3.2] <= ([B3.5])
   T: if [B4.10] && [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5654000daaa0 <ltable.c:212:11> 'int (const TValue *)' Function 0x5654000d1d18 'arrayindex' 'int (const TValue *)'
arrayindex
   2: ImplicitCastExpr 0x5654000daaf0 <ltable.c:212:11> 'int (*)(const TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000daaa0 <col:11> 'int (const TValue *)' Function 0x5654000d1d18 'arrayindex' 'int (const TValue *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const TValue *))
   3: DeclRefExpr 0x5654000daac8 <ltable.c:212:22> 'const TValue *' lvalue ParmVar 0x5654000da7e8 'key' 'const TValue *'
key
   4: ImplicitCastExpr 0x5654000dab38 <ltable.c:212:22> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5654000daac8 <col:22> 'const TValue *' lvalue ParmVar 0x5654000da7e8 'key' 'const TValue *'
[B4.3] (ImplicitCastExpr, LValueToRValue, const TValue *)
   5: CallExpr 0x5654000dab08 <ltable.c:212:11, col:25> 'int'
|-ImplicitCastExpr 0x5654000daaf0 <col:11> 'int (*)(const TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000daaa0 <col:11> 'int (const TValue *)' Function 0x5654000d1d18 'arrayindex' 'int (const TValue *)'
`-ImplicitCastExpr 0x5654000dab38 <col:22> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5654000daac8 <col:22> 'const TValue *' lvalue ParmVar 0x5654000da7e8 'key' 'const TValue *'
[B4.2]([B4.4])
   6: DeclStmt 0x5654000dab50 <ltable.c:212:3, col:26>col:7
`-VarDecl 0x5654000daa40 <col:3, col:25> col:7 used k 'int' cinit
  `-CallExpr 0x5654000dab08 <col:11, col:25> 'int'
    |-ImplicitCastExpr 0x5654000daaf0 <col:11> 'int (*)(const TValue *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5654000daaa0 <col:11> 'int (const TValue *)' Function 0x5654000d1d18 'arrayindex' 'int (const TValue *)'
    `-ImplicitCastExpr 0x5654000dab38 <col:22> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5654000daac8 <col:22> 'const TValue *' lvalue ParmVar 0x5654000da7e8 'key' 'const TValue *'
int k = arrayindex(key);
   7: IntegerLiteral 0x5654000dab68 <ltable.c:213:7> 'int' 0
0
   8: DeclRefExpr 0x5654000dab88 <ltable.c:213:11> 'int' lvalue Var 0x5654000daa40 'k' 'int'
k
   9: ImplicitCastExpr 0x5654000dabb0 <ltable.c:213:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dab88 <col:11> 'int' lvalue Var 0x5654000daa40 'k' 'int'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: BinaryOperator 0x5654000dabc8 <ltable.c:213:7, col:11> 'int' '<'
|-IntegerLiteral 0x5654000dab68 <col:7> 'int' 0
`-ImplicitCastExpr 0x5654000dabb0 <col:11> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dab88 <col:11> 'int' lvalue Var 0x5654000daa40 'k' 'int'
[B4.7] < [B4.9]
   T: [B4.10] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
