int luaO_int2fb(unsigned int x)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: DeclRefExpr 0x5569011e64f0 <lobject.c:42:17> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
e
   2: ImplicitCastExpr 0x5569011e6538 <lobject.c:42:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5569011e64f0 <col:17> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5569011e6518 <lobject.c:42:19> 'int' 1
1
   4: BinaryOperator 0x5569011e6550 <lobject.c:42:17, col:19> 'int' '+'
|-ImplicitCastExpr 0x5569011e6538 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e64f0 <col:17> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
`-IntegerLiteral 0x5569011e6518 <col:19> 'int' 1
[B1.2] + [B1.3]
   5: IntegerLiteral 0x5569011e6598 <lobject.c:42:25> 'int' 3
3
   6: BinaryOperator 0x5569011e65b8 <lobject.c:42:16, col:25> 'int' '<<'
|-ParenExpr 0x5569011e6578 <col:16, col:20> 'int'
| `-BinaryOperator 0x5569011e6550 <col:17, col:19> 'int' '+'
|   |-ImplicitCastExpr 0x5569011e6538 <col:17> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5569011e64f0 <col:17> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
|   `-IntegerLiteral 0x5569011e6518 <col:19> 'int' 1
`-IntegerLiteral 0x5569011e6598 <col:25> 'int' 3
([B1.4]) << [B1.5]
   7: DeclRefExpr 0x5569011e6600 <lobject.c:42:40> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
x
   8: ImplicitCastExpr 0x5569011e66b0 <./llimits.h:75:26, col:30> 'unsigned int' <LValueToRValue>
`-ParenExpr 0x5569011e6690 <col:26, col:30> 'unsigned int' lvalue
  `-ParenExpr 0x5569011e6628 <line:80:31, col:33> 'unsigned int' lvalue
    `-DeclRefExpr 0x5569011e6600 <lobject.c:42:40> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
(([B1.7])) (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: CStyleCastExpr 0x5569011e66c8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5569011e66b0 <col:26, col:30> 'unsigned int' <LValueToRValue>
  `-ParenExpr 0x5569011e6690 <col:26, col:30> 'unsigned int' lvalue
    `-ParenExpr 0x5569011e6628 <line:80:31, col:33> 'unsigned int' lvalue
      `-DeclRefExpr 0x5569011e6600 <lobject.c:42:40> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
(int)[B1.8] (CStyleCastExpr, IntegralCast, int)
  10: IntegerLiteral 0x5569011e6710 <lobject.c:42:45> 'int' 8
8
  11: BinaryOperator 0x5569011e6730 <./llimits.h:75:22, lobject.c:42:45> 'int' '-'
|-ParenExpr 0x5569011e66f0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x5569011e66c8 <col:23, col:30> 'int' <IntegralCast>
|   `-ImplicitCastExpr 0x5569011e66b0 <col:26, col:30> 'unsigned int' <LValueToRValue>
|     `-ParenExpr 0x5569011e6690 <col:26, col:30> 'unsigned int' lvalue
|       `-ParenExpr 0x5569011e6628 <line:80:31, col:33> 'unsigned int' lvalue
|         `-DeclRefExpr 0x5569011e6600 <lobject.c:42:40> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
`-IntegerLiteral 0x5569011e6710 <col:45> 'int' 8
([B1.9]) - [B1.10]
  12: BinaryOperator 0x5569011e6778 <lobject.c:42:15, col:46> 'int' '|'
|-ParenExpr 0x5569011e65e0 <col:15, col:26> 'int'
| `-BinaryOperator 0x5569011e65b8 <col:16, col:25> 'int' '<<'
|   |-ParenExpr 0x5569011e6578 <col:16, col:20> 'int'
|   | `-BinaryOperator 0x5569011e6550 <col:17, col:19> 'int' '+'
|   |   |-ImplicitCastExpr 0x5569011e6538 <col:17> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5569011e64f0 <col:17> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
|   |   `-IntegerLiteral 0x5569011e6518 <col:19> 'int' 1
|   `-IntegerLiteral 0x5569011e6598 <col:25> 'int' 3
`-ParenExpr 0x5569011e6758 <col:30, col:46> 'int'
  `-BinaryOperator 0x5569011e6730 <./llimits.h:75:22, lobject.c:42:45> 'int' '-'
    |-ParenExpr 0x5569011e66f0 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x5569011e66c8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5569011e66b0 <col:26, col:30> 'unsigned int' <LValueToRValue>
    |     `-ParenExpr 0x5569011e6690 <col:26, col:30> 'unsigned int' lvalue
    |       `-ParenExpr 0x5569011e6628 <line:80:31, col:33> 'unsigned int' lvalue
    |         `-DeclRefExpr 0x5569011e6600 <lobject.c:42:40> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
    `-IntegerLiteral 0x5569011e6710 <col:45> 'int' 8
([B1.6]) | ([B1.11])
  13: ReturnStmt 0x5569011e67a0 <lobject.c:42:8, col:46>
`-BinaryOperator 0x5569011e6778 <col:15, col:46> 'int' '|'
  |-ParenExpr 0x5569011e65e0 <col:15, col:26> 'int'
  | `-BinaryOperator 0x5569011e65b8 <col:16, col:25> 'int' '<<'
  |   |-ParenExpr 0x5569011e6578 <col:16, col:20> 'int'
  |   | `-BinaryOperator 0x5569011e6550 <col:17, col:19> 'int' '+'
  |   |   |-ImplicitCastExpr 0x5569011e6538 <col:17> 'int' <LValueToRValue>
  |   |   | `-DeclRefExpr 0x5569011e64f0 <col:17> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
  |   |   `-IntegerLiteral 0x5569011e6518 <col:19> 'int' 1
  |   `-IntegerLiteral 0x5569011e6598 <col:25> 'int' 3
  `-ParenExpr 0x5569011e6758 <col:30, col:46> 'int'
    `-BinaryOperator 0x5569011e6730 <./llimits.h:75:22, lobject.c:42:45> 'int' '-'
      |-ParenExpr 0x5569011e66f0 <./llimits.h:75:22, col:31> 'int'
      | `-CStyleCastExpr 0x5569011e66c8 <col:23, col:30> 'int' <IntegralCast>
      |   `-ImplicitCastExpr 0x5569011e66b0 <col:26, col:30> 'unsigned int' <LValueToRValue>
      |     `-ParenExpr 0x5569011e6690 <col:26, col:30> 'unsigned int' lvalue
      |       `-ParenExpr 0x5569011e6628 <line:80:31, col:33> 'unsigned int' lvalue
      |         `-DeclRefExpr 0x5569011e6600 <lobject.c:42:40> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
      `-IntegerLiteral 0x5569011e6710 <col:45> 'int' 8
return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5569011e6480 <lobject.c:41:21> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
x
   2: ImplicitCastExpr 0x5569011e64a8 <lobject.c:41:21> 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6480 <col:21> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
[B2.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: ImplicitCastExpr 0x5569011e64c0 <lobject.c:41:21> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5569011e64a8 <col:21> 'unsigned int' <LValueToRValue>
  `-DeclRefExpr 0x5569011e6480 <col:21> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
[B2.2] (ImplicitCastExpr, IntegralCast, int)
   4: ReturnStmt 0x5569011e64d8 <lobject.c:41:14, col:21>
`-ImplicitCastExpr 0x5569011e64c0 <col:21> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x5569011e64a8 <col:21> 'unsigned int' <LValueToRValue>
    `-DeclRefExpr 0x5569011e6480 <col:21> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
return [B2.3];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5569011e63e0 <lobject.c:41:7> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
x
   2: ImplicitCastExpr 0x5569011e6428 <lobject.c:41:7> 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x5569011e63e0 <col:7> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
[B3.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: IntegerLiteral 0x5569011e6408 <lobject.c:41:11> 'int' 8
8
   4: ImplicitCastExpr 0x5569011e6440 <lobject.c:41:11> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5569011e6408 <col:11> 'int' 8
[B3.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: BinaryOperator 0x5569011e6458 <lobject.c:41:7, col:11> 'int' '<'
|-ImplicitCastExpr 0x5569011e6428 <col:7> 'unsigned int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e63e0 <col:7> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
`-ImplicitCastExpr 0x5569011e6440 <col:11> 'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5569011e6408 <col:11> 'int' 8
[B3.2] < [B3.4]
   T: if [B3.5]
   Preds (1): B6
   Succs (2): B2 B1

 [B4]
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: DeclRefExpr 0x5569011e6228 <lobject.c:38:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
x
   2: ImplicitCastExpr 0x5569011e6270 <lobject.c:38:10> 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6228 <col:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
[B5.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: IntegerLiteral 0x5569011e6250 <lobject.c:38:12> 'int' 1
1
   4: ImplicitCastExpr 0x5569011e6288 <lobject.c:38:12> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5569011e6250 <col:12> 'int' 1
[B5.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: BinaryOperator 0x5569011e62a0 <lobject.c:38:10, col:12> 'unsigned int' '+'
|-ImplicitCastExpr 0x5569011e6270 <col:10> 'unsigned int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e6228 <col:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
`-ImplicitCastExpr 0x5569011e6288 <col:12> 'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5569011e6250 <col:12> 'int' 1
[B5.2] + [B5.4]
   6: IntegerLiteral 0x5569011e62e8 <lobject.c:38:18> 'int' 1
1
   7: BinaryOperator 0x5569011e6308 <lobject.c:38:9, col:18> 'unsigned int' '>>'
|-ParenExpr 0x5569011e62c8 <col:9, col:13> 'unsigned int'
| `-BinaryOperator 0x5569011e62a0 <col:10, col:12> 'unsigned int' '+'
|   |-ImplicitCastExpr 0x5569011e6270 <col:10> 'unsigned int' <LValueToRValue>
|   | `-DeclRefExpr 0x5569011e6228 <col:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
|   `-ImplicitCastExpr 0x5569011e6288 <col:12> 'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5569011e6250 <col:12> 'int' 1
`-IntegerLiteral 0x5569011e62e8 <col:18> 'int' 1
([B5.5]) >> [B5.6]
   8: DeclRefExpr 0x5569011e6200 <lobject.c:38:5> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
x
   9: BinaryOperator 0x5569011e6330 <lobject.c:38:5, col:18> 'unsigned int' '='
|-DeclRefExpr 0x5569011e6200 <col:5> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
`-BinaryOperator 0x5569011e6308 <col:9, col:18> 'unsigned int' '>>'
  |-ParenExpr 0x5569011e62c8 <col:9, col:13> 'unsigned int'
  | `-BinaryOperator 0x5569011e62a0 <col:10, col:12> 'unsigned int' '+'
  |   |-ImplicitCastExpr 0x5569011e6270 <col:10> 'unsigned int' <LValueToRValue>
  |   | `-DeclRefExpr 0x5569011e6228 <col:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
  |   `-ImplicitCastExpr 0x5569011e6288 <col:12> 'unsigned int' <IntegralCast>
  |     `-IntegerLiteral 0x5569011e6250 <col:12> 'int' 1
  `-IntegerLiteral 0x5569011e62e8 <col:18> 'int' 1
[B5.8] = [B5.7]
  10: DeclRefExpr 0x5569011e6358 <lobject.c:39:5> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
e
  11: UnaryOperator 0x5569011e6380 <lobject.c:39:5, col:6> 'int' postfix '++'
`-DeclRefExpr 0x5569011e6358 <col:5> 'int' lvalue Var 0x5569011e60c8 'e' 'int'
[B5.10]++
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x5569011e6160 <lobject.c:37:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
x
   2: ImplicitCastExpr 0x5569011e61a8 <lobject.c:37:10> 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x5569011e6160 <col:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
[B6.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: IntegerLiteral 0x5569011e6188 <lobject.c:37:15> 'int' 16
16
   4: ImplicitCastExpr 0x5569011e61c0 <lobject.c:37:15> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5569011e6188 <col:15> 'int' 16
[B6.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: BinaryOperator 0x5569011e61d8 <lobject.c:37:10, col:15> 'int' '>='
|-ImplicitCastExpr 0x5569011e61a8 <col:10> 'unsigned int' <LValueToRValue>
| `-DeclRefExpr 0x5569011e6160 <col:10> 'unsigned int' lvalue ParmVar 0x5569011e5f30 'x' 'unsigned int'
`-ImplicitCastExpr 0x5569011e61c0 <col:15> 'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5569011e6188 <col:15> 'int' 16
[B6.2] >= [B6.4]
   T: while [B6.5]
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: IntegerLiteral 0x5569011e6128 <lobject.c:36:11> 'int' 0
0
   2: DeclStmt 0x5569011e6148 <lobject.c:36:3, col:12>col:7
`-VarDecl 0x5569011e60c8 <col:3, col:11> col:7 used e 'int' cinit
  `-IntegerLiteral 0x5569011e6128 <col:11> 'int' 0
int e = 0;
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (2): B1 B2
