static int skip_sep(LexState *ls)
 [B15 (ENTRY)]
   Succs (1): B14

 [B1]
   1: ConditionalOperator 0x561ce7456778 <llex.c:219:10, col:50> 'int'
|-ParenExpr 0x561ce7456650 <col:10, col:27> 'int'
| `-BinaryOperator 0x561ce7456628 <col:11, col:26> 'int' '=='
|   |-ImplicitCastExpr 0x561ce74565f8 <col:11, col:15> 'int' <LValueToRValue>
|   | `-MemberExpr 0x561ce7456598 <col:11, col:15> 'int' lvalue ->current 0x561ce74267f0
|   |   `-ImplicitCastExpr 0x561ce7456580 <col:11> 'LexState *' <LValueToRValue>
|   |     `-DeclRefExpr 0x561ce7456558 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
|   `-ImplicitCastExpr 0x561ce7456610 <col:26> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x561ce74565d0 <col:26> 'int' lvalue Var 0x561ce7455288 's' 'int'
|-ImplicitCastExpr 0x561ce7456760 <col:31> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce7456670 <col:31> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
`-BinaryOperator 0x561ce7456738 <col:39, col:50> 'int' '-'
  |-ParenExpr 0x561ce74566f8 <col:39, col:46> 'int'
  | `-UnaryOperator 0x561ce74566d8 <col:40, col:41> 'int' prefix '-'
  |   `-ImplicitCastExpr 0x561ce74566c0 <col:41> 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x561ce7456698 <col:41> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
  `-IntegerLiteral 0x561ce7456718 <col:50> 'int' 1
([B4.7]) ? [B2.2] : [B3.5]
   2: ReturnStmt 0x561ce74567a8 <llex.c:219:3, col:50>
`-ConditionalOperator 0x561ce7456778 <col:10, col:50> 'int'
  |-ParenExpr 0x561ce7456650 <col:10, col:27> 'int'
  | `-BinaryOperator 0x561ce7456628 <col:11, col:26> 'int' '=='
  |   |-ImplicitCastExpr 0x561ce74565f8 <col:11, col:15> 'int' <LValueToRValue>
  |   | `-MemberExpr 0x561ce7456598 <col:11, col:15> 'int' lvalue ->current 0x561ce74267f0
  |   |   `-ImplicitCastExpr 0x561ce7456580 <col:11> 'LexState *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x561ce7456558 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
  |   `-ImplicitCastExpr 0x561ce7456610 <col:26> 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x561ce74565d0 <col:26> 'int' lvalue Var 0x561ce7455288 's' 'int'
  |-ImplicitCastExpr 0x561ce7456760 <col:31> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x561ce7456670 <col:31> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
  `-BinaryOperator 0x561ce7456738 <col:39, col:50> 'int' '-'
    |-ParenExpr 0x561ce74566f8 <col:39, col:46> 'int'
    | `-UnaryOperator 0x561ce74566d8 <col:40, col:41> 'int' prefix '-'
    |   `-ImplicitCastExpr 0x561ce74566c0 <col:41> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x561ce7456698 <col:41> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
    `-IntegerLiteral 0x561ce7456718 <col:50> 'int' 1
return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce7456670 <llex.c:219:31> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
count
   2: ImplicitCastExpr 0x561ce7456760 <llex.c:219:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7456670 <col:31> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
[B2.1] (ImplicitCastExpr, LValueToRValue, int)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x561ce7456698 <llex.c:219:41> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
count
   2: ImplicitCastExpr 0x561ce74566c0 <llex.c:219:41> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7456698 <col:41> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: UnaryOperator 0x561ce74566d8 <llex.c:219:40, col:41> 'int' prefix '-'
`-ImplicitCastExpr 0x561ce74566c0 <col:41> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456698 <col:41> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
-[B3.2]
   4: IntegerLiteral 0x561ce7456718 <llex.c:219:50> 'int' 1
1
   5: BinaryOperator 0x561ce7456738 <llex.c:219:39, col:50> 'int' '-'
|-ParenExpr 0x561ce74566f8 <col:39, col:46> 'int'
| `-UnaryOperator 0x561ce74566d8 <col:40, col:41> 'int' prefix '-'
|   `-ImplicitCastExpr 0x561ce74566c0 <col:41> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7456698 <col:41> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
`-IntegerLiteral 0x561ce7456718 <col:50> 'int' 1
([B3.3]) - [B3.4]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x561ce7456558 <llex.c:219:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7456580 <llex.c:219:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456558 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7456598 <llex.c:219:11, col:15> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7456580 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456558 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B4.2]->current
   4: ImplicitCastExpr 0x561ce74565f8 <llex.c:219:11, col:15> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7456598 <col:11, col:15> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7456580 <col:11> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7456558 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x561ce74565d0 <llex.c:219:26> 'int' lvalue Var 0x561ce7455288 's' 'int'
s
   6: ImplicitCastExpr 0x561ce7456610 <llex.c:219:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce74565d0 <col:26> 'int' lvalue Var 0x561ce7455288 's' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x561ce7456628 <llex.c:219:11, col:26> 'int' '=='
|-ImplicitCastExpr 0x561ce74565f8 <col:11, col:15> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7456598 <col:11, col:15> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7456580 <col:11> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7456558 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7456610 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce74565d0 <col:26> 'int' lvalue Var 0x561ce7455288 's' 'int'
[B4.4] == [B4.6]
   T: ([B4.7]) ? ... : ...
   Preds (1): B10
   Succs (2): B2 B3

 [B5]
   Preds (1): B6
   Succs (1): B10

 [B6]
   1: ConditionalOperator 0x561ce74563c8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7455fe0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7455f88 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7455f68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7455f30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7455f18 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7455fc8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7455fa8 <col:31> 'int' 0
|-ParenExpr 0x561ce74562a8 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7456280 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7456260 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce74561f8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce74561d0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce74561b8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7456198 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7456130 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7456110 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-CallExpr 0x561ce7456380 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7456368 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce74562c8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce74563b0 <llex.c:216:19, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7456330 <line:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7456318 <line:216:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.18] ? ([B7.10]) : [B8.7]
   2: DeclRefExpr 0x561ce7455e08 <llex.c:216:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7455e30 <llex.c:216:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455e08 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B6.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7455e48 <llex.c:216:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7455e30 <line:216:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455e08 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B6.3]->current
   5: BinaryOperator 0x561ce7456440 <llex.c:216:19, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7455e48 <llex.c:216:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7455e30 <line:216:19> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7455e08 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ParenExpr 0x561ce74563f8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce74563c8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7455fe0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7455f88 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7455f68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7455f30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7455f18 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7455fc8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7455fa8 <col:31> 'int' 0
    |-ParenExpr 0x561ce74562a8 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7456280 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7456260 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce74561f8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce74561d0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce74561b8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7456198 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7456130 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7456110 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
    `-CallExpr 0x561ce7456380 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7456368 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce74562c8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce74563b0 <llex.c:216:19, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7456330 <line:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7456318 <line:216:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B6.4] = ([B6.1])
   6: BinaryOperator 0x561ce7456488 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7455da0 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7455d88 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7455cc0 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7455dd8 <line:216:19> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7455ce8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7455df0 <col:19, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7455d50 <line:216:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7455d38 <line:216:19> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7455d10 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ParenExpr 0x561ce7456468 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7456440 <line:216:19, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7455e48 <llex.c:216:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7455e30 <line:216:19> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7455e08 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
    `-ParenExpr 0x561ce74563f8 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce74563c8 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7455fe0 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7455f88 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7455f68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7455f30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7455f18 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7455fc8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7455fa8 <col:31> 'int' 0
        |-ParenExpr 0x561ce74562a8 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7456280 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce7456260 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce74561f8 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce74561d0 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce74561b8 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7456198 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce7456130 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7456110 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
        `-CallExpr 0x561ce7456380 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7456368 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce74562c8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce74563b0 <llex.c:216:19, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce7456330 <line:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce7456318 <line:216:19> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
... , 
   7: DeclRefExpr 0x561ce74564d0 <llex.c:217:5> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
count
   8: UnaryOperator 0x561ce74564f8 <llex.c:217:5, col:10> 'int' postfix '++'
`-DeclRefExpr 0x561ce74564d0 <col:5> 'int' lvalue Var 0x561ce74551d8 'count' 'int'
[B6.7]++
   Preds (2): B7 B8
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x561ce7456008 <llex.c:216:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7456030 <llex.c:216:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B7.2]->z
   4: ImplicitCastExpr 0x561ce74560a0 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
([B7.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce74560b8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B7.4]->p
   6: UnaryOperator 0x561ce74560f0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B7.5]++
   7: UnaryOperator 0x561ce7456110 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
*[B7.6]
   8: ImplicitCastExpr 0x561ce74561b8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7456198 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7456130 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7456110 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
(([B7.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce74561d0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce74561b8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7456198 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7456130 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7456110 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
(unsigned char)[B7.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7456280 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7456260 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce74561f8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce74561d0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce74561b8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7456198 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7456130 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7456110 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce74560f0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce74560b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce74560a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7456080 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7456048 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7456030 <line:216:19> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7456008 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
(int)(([B7.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B9
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x561ce74562c8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7456368 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74562c8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce74562f0 <llex.c:216:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7456318 <llex.c:216:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7456330 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7456318 <line:216:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B8.4]->z
   6: ImplicitCastExpr 0x561ce74563b0 <llex.c:216:19, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7456330 <line:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7456318 <line:216:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B8.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7456380 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7456368 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74562c8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce74563b0 <llex.c:216:19, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7456330 <line:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7456318 <line:216:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74562f0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B8.2]([B8.6])
   Preds (1): B9
   Succs (1): B6

 [B9]
   1: DeclRefExpr 0x561ce7455cc0 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7455d88 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7455cc0 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7455ce8 <llex.c:216:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7455dd8 <llex.c:216:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455ce8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7455d10 <llex.c:216:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7455d38 <llex.c:216:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455d10 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7455d50 <llex.c:216:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7455d38 <line:216:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455d10 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.6]->current
   8: ImplicitCastExpr 0x561ce7455df0 <llex.c:216:19, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7455d50 <line:216:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7455d38 <line:216:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7455d10 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7455da0 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7455d88 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7455cc0 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7455dd8 <line:216:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7455ce8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7455df0 <col:19, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7455d50 <line:216:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7455d38 <line:216:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7455d10 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.2]([B9.4], [B9.8])
  10: DeclRefExpr 0x561ce7455e80 <llex.c:216:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7455ea8 <llex.c:216:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.11]->z
  13: ImplicitCastExpr 0x561ce7455f18 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
([B9.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7455f30 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7455f18 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.13]->n
  15: UnaryOperator 0x561ce7455f68 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7455f30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7455f18 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B9.14]--
  16: IntegerLiteral 0x561ce7455fa8 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7455fc8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7455fa8 <col:31> 'int' 0
[B9.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7455fe0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7455f88 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7455f68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7455f30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7455f18 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7455ef8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7455ec0 <llex.c:216:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7455ea8 <line:216:19> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7455e80 <col:19> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7455fc8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7455fa8 <col:31> 'int' 0
([B9.15]) > [B9.17]
   T: [B9.18] ? ... : ...
   Preds (1): B10
   Succs (2): B7 B8

 [B10]
   1: DeclRefExpr 0x561ce7455bf0 <llex.c:215:10> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7455c18 <llex.c:215:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455bf0 <col:10> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B10.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7455c30 <llex.c:215:10, col:14> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7455c18 <col:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455bf0 <col:10> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B10.2]->current
   4: ImplicitCastExpr 0x561ce7455c80 <llex.c:215:10, col:14> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7455c30 <col:10, col:14> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7455c18 <col:10> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7455bf0 <col:10> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce7455c68 <llex.c:215:25> 'int' 61
'='
   6: BinaryOperator 0x561ce7455c98 <llex.c:215:10, col:25> 'int' '=='
|-ImplicitCastExpr 0x561ce7455c80 <col:10, col:14> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7455c30 <col:10, col:14> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7455c18 <col:10> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7455bf0 <col:10> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7455c68 <col:25> 'int' 61
[B10.4] == [B10.5]
   T: while [B10.6]
   Preds (2): B5 B11
   Succs (2): B9 B4

 [B11]
   1: ConditionalOperator 0x561ce7455b10 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7455728 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce74556d0 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74556b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7455678 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7455660 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7455710 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce74556f0 <col:31> 'int' 0
|-ParenExpr 0x561ce74559f0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce74559c8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74559a8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7455940 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7455918 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7455900 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce74558e0 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7455878 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7455858 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-CallExpr 0x561ce7455ac8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7455ab0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7455a10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7455af8 <llex.c:214:17, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7455a78 <line:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7455a60 <line:214:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.27] ? ([B12.10]) : [B13.7]
   2: DeclRefExpr 0x561ce7455550 <llex.c:214:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7455578 <llex.c:214:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455550 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B11.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7455590 <llex.c:214:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7455578 <line:214:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455550 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B11.3]->current
   5: BinaryOperator 0x561ce7455b60 <llex.c:214:17, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7455590 <llex.c:214:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7455578 <line:214:17> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7455550 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ParenExpr 0x561ce7455b40 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7455b10 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7455728 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce74556d0 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74556b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7455678 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7455660 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7455710 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce74556f0 <col:31> 'int' 0
    |-ParenExpr 0x561ce74559f0 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce74559c8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74559a8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7455940 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7455918 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7455900 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce74558e0 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7455878 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7455858 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
    `-CallExpr 0x561ce7455ac8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7455ab0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7455a10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7455af8 <llex.c:214:17, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7455a78 <line:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7455a60 <line:214:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B11.4] = ([B11.1])
   6: BinaryOperator 0x561ce7455ba8 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce74554e8 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce74554d0 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7455408 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7455520 <line:214:17> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7455430 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7455538 <col:17, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7455498 <line:214:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7455480 <line:214:17> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7455458 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ParenExpr 0x561ce7455b88 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7455b60 <line:214:17, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7455590 <llex.c:214:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7455578 <line:214:17> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7455550 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
    `-ParenExpr 0x561ce7455b40 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7455b10 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7455728 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce74556d0 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce74556b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7455678 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7455660 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7455710 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce74556f0 <col:31> 'int' 0
        |-ParenExpr 0x561ce74559f0 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce74559c8 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce74559a8 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7455940 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7455918 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7455900 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce74558e0 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce7455878 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7455858 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
        `-CallExpr 0x561ce7455ac8 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7455ab0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7455a10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7455af8 <llex.c:214:17, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce7455a78 <line:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce7455a60 <line:214:17> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
... , 
   Preds (2): B12 B13
   Succs (1): B10

 [B12]
   1: DeclRefExpr 0x561ce7455750 <llex.c:214:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7455778 <llex.c:214:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B12.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B12.2]->z
   4: ImplicitCastExpr 0x561ce74557e8 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
([B12.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7455800 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B12.4]->p
   6: UnaryOperator 0x561ce7455838 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B12.5]++
   7: UnaryOperator 0x561ce7455858 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
*[B12.6]
   8: ImplicitCastExpr 0x561ce7455900 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce74558e0 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7455878 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7455858 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
(([B12.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7455918 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7455900 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce74558e0 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7455878 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7455858 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
(unsigned char)[B12.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce74559c8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74559a8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7455940 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7455918 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7455900 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce74558e0 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7455878 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7455858 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7455838 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7455800 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce74557e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce74557c8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7455790 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7455778 <line:214:17> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7455750 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
(int)(([B12.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B14
   Succs (1): B11

 [B13]
   1: DeclRefExpr 0x561ce7455a10 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7455ab0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7455a10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B13.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7455a38 <llex.c:214:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7455a60 <llex.c:214:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7455a78 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7455a60 <line:214:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B13.4]->z
   6: ImplicitCastExpr 0x561ce7455af8 <llex.c:214:17, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7455a78 <line:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7455a60 <line:214:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B13.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7455ac8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7455ab0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7455a10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7455af8 <llex.c:214:17, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7455a78 <line:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7455a60 <line:214:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7455a38 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B13.2]([B13.6])
   Preds (1): B14
   Succs (1): B11

 [B14]
   1: IntegerLiteral 0x561ce7455238 <llex.c:211:15> 'int' 0
0
   2: DeclStmt 0x561ce7455258 <llex.c:211:3, col:16>col:7
`-VarDecl 0x561ce74551d8 <col:3, col:15> col:7 used count 'int' cinit
  `-IntegerLiteral 0x561ce7455238 <col:15> 'int' 0
int count = 0;
   3: DeclRefExpr 0x561ce74552e8 <llex.c:212:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7455310 <llex.c:212:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74552e8 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7455328 <llex.c:212:11, col:15> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7455310 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74552e8 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.4]->current
   6: ImplicitCastExpr 0x561ce7455360 <llex.c:212:11, col:15> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7455328 <col:11, col:15> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7455310 <col:11> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74552e8 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclStmt 0x561ce7455378 <llex.c:212:3, col:22>col:7
`-VarDecl 0x561ce7455288 <col:3, col:15> col:7 used s 'int' cinit
  `-ImplicitCastExpr 0x561ce7455360 <col:11, col:15> 'int' <LValueToRValue>
    `-MemberExpr 0x561ce7455328 <col:11, col:15> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7455310 <col:11> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74552e8 <col:11> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
int s = ls->current;
   8: IntegerLiteral 0x561ce7455390 <./llimits.h:62:31> 'int' 0
0
   9: CStyleCastExpr 0x561ce74553c0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x561ce7455390 <col:31> 'int' 0
(void)[B14.8] (CStyleCastExpr, ToVoid, void)
  10: DeclRefExpr 0x561ce7455408 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
  11: ImplicitCastExpr 0x561ce74554d0 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7455408 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B14.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  12: DeclRefExpr 0x561ce7455430 <llex.c:214:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
  13: ImplicitCastExpr 0x561ce7455520 <llex.c:214:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455430 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.12] (ImplicitCastExpr, LValueToRValue, LexState *)
  14: DeclRefExpr 0x561ce7455458 <llex.c:214:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x561ce7455480 <llex.c:214:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7455458 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: MemberExpr 0x561ce7455498 <llex.c:214:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7455480 <line:214:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7455458 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.15]->current
  17: ImplicitCastExpr 0x561ce7455538 <llex.c:214:17, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7455498 <line:214:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7455480 <line:214:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7455458 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.16] (ImplicitCastExpr, LValueToRValue, int)
  18: CallExpr 0x561ce74554e8 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce74554d0 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7455408 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7455520 <line:214:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7455430 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7455538 <col:17, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7455498 <line:214:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7455480 <line:214:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7455458 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.11]([B14.13], [B14.17])
  19: DeclRefExpr 0x561ce74555c8 <llex.c:214:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
ls
  20: ImplicitCastExpr 0x561ce74555f0 <llex.c:214:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.19] (ImplicitCastExpr, LValueToRValue, LexState *)
  21: MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.20]->z
  22: ImplicitCastExpr 0x561ce7455660 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
([B14.21]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  23: MemberExpr 0x561ce7455678 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7455660 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.22]->n
  24: UnaryOperator 0x561ce74556b0 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7455678 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7455660 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
[B14.23]--
  25: IntegerLiteral 0x561ce74556f0 <./lzio.h:22:31> 'int' 0
0
  26: ImplicitCastExpr 0x561ce7455710 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce74556f0 <col:31> 'int' 0
[B14.25] (ImplicitCastExpr, IntegralCast, unsigned long)
  27: BinaryOperator 0x561ce7455728 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce74556d0 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74556b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7455678 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7455660 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7455640 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7455608 <llex.c:214:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce74555f0 <line:214:17> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74555c8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7455008 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7455710 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce74556f0 <col:31> 'int' 0
([B14.24]) > [B14.26]
   T: [B14.27] ? ... : ...
   Preds (1): B15
   Succs (2): B12 B13

 [B0 (EXIT)]
   Preds (1): B1
