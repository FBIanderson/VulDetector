static inline int valid_number_character(char ch)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: IntegerLiteral 0x55be977a24c8 <fpconv.c:89:12> 'int' 0
0
   2: ReturnStmt 0x55be977a24e8 <fpconv.c:89:5, col:12>
`-IntegerLiteral 0x55be977a24c8 <col:12> 'int' 0
return [B1.1];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x55be977a2458 <fpconv.c:87:16> 'int' 1
1
   2: ReturnStmt 0x55be977a2478 <fpconv.c:87:9, col:16>
`-IntegerLiteral 0x55be977a2458 <col:16> 'int' 1
return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x55be977a2398 <fpconv.c:86:28> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
lower_ch
   2: ImplicitCastExpr 0x55be977a23d8 <fpconv.c:86:28> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a2398 <col:28> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
[B3.1] (ImplicitCastExpr, LValueToRValue, char)
   3: ImplicitCastExpr 0x55be977a23f0 <fpconv.c:86:28> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a23d8 <col:28> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a2398 <col:28> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
[B3.2] (ImplicitCastExpr, IntegralCast, int)
   4: CharacterLiteral 0x55be977a23c0 <fpconv.c:86:40> 'int' 121
'y'
   5: BinaryOperator 0x55be977a2408 <fpconv.c:86:28, col:40> 'int' '<='
|-ImplicitCastExpr 0x55be977a23f0 <col:28> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55be977a23d8 <col:28> 'char' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a2398 <col:28> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
`-CharacterLiteral 0x55be977a23c0 <col:40> 'int' 121
[B3.3] <= [B3.4]
   T: if [B4.13] && [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x55be977a2220 <fpconv.c:85:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
ch
   2: ImplicitCastExpr 0x55be977a2268 <fpconv.c:85:16> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a2220 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B4.1] (ImplicitCastExpr, LValueToRValue, char)
   3: ImplicitCastExpr 0x55be977a2280 <fpconv.c:85:16> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a2268 <col:16> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a2220 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B4.2] (ImplicitCastExpr, IntegralCast, int)
   4: IntegerLiteral 0x55be977a2248 <fpconv.c:85:21> 'int' 32
32
   5: BinaryOperator 0x55be977a2298 <fpconv.c:85:16, col:21> 'int' '|'
|-ImplicitCastExpr 0x55be977a2280 <col:16> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55be977a2268 <col:16> 'char' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a2220 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
`-IntegerLiteral 0x55be977a2248 <col:21> 'int' 32
[B4.3] | [B4.4]
   6: ImplicitCastExpr 0x55be977a22c0 <fpconv.c:85:16, col:21> 'char' <IntegralCast>
`-BinaryOperator 0x55be977a2298 <col:16, col:21> 'int' '|'
  |-ImplicitCastExpr 0x55be977a2280 <col:16> 'int' <IntegralCast>
  | `-ImplicitCastExpr 0x55be977a2268 <col:16> 'char' <LValueToRValue>
  |   `-DeclRefExpr 0x55be977a2220 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
  `-IntegerLiteral 0x55be977a2248 <col:21> 'int' 32
[B4.5] (ImplicitCastExpr, IntegralCast, char)
   7: DeclRefExpr 0x55be977a21f8 <fpconv.c:85:5> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
lower_ch
   8: BinaryOperator 0x55be977a22d8 <fpconv.c:85:5, col:21> 'char' '='
|-DeclRefExpr 0x55be977a21f8 <col:5> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
`-ImplicitCastExpr 0x55be977a22c0 <col:16, col:21> 'char' <IntegralCast>
  `-BinaryOperator 0x55be977a2298 <col:16, col:21> 'int' '|'
    |-ImplicitCastExpr 0x55be977a2280 <col:16> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x55be977a2268 <col:16> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x55be977a2220 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
    `-IntegerLiteral 0x55be977a2248 <col:21> 'int' 32
[B4.7] = [B4.6]
   9: CharacterLiteral 0x55be977a2300 <fpconv.c:86:9> 'int' 97
'a'
  10: DeclRefExpr 0x55be977a2318 <fpconv.c:86:16> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
lower_ch
  11: ImplicitCastExpr 0x55be977a2340 <fpconv.c:86:16> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a2318 <col:16> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
[B4.10] (ImplicitCastExpr, LValueToRValue, char)
  12: ImplicitCastExpr 0x55be977a2358 <fpconv.c:86:16> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a2340 <col:16> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a2318 <col:16> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
[B4.11] (ImplicitCastExpr, IntegralCast, int)
  13: BinaryOperator 0x55be977a2370 <fpconv.c:86:9, col:16> 'int' '<='
|-CharacterLiteral 0x55be977a2300 <col:9> 'int' 97
`-ImplicitCastExpr 0x55be977a2358 <col:16> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x55be977a2340 <col:16> 'char' <LValueToRValue>
    `-DeclRefExpr 0x55be977a2318 <col:16> 'char' lvalue Var 0x55be977a1d30 'lower_ch' 'char'
[B4.9] <= [B4.12]
   T: [B4.13] && ...
   Preds (1): B6
   Succs (2): B3 B1

 [B5]
   1: IntegerLiteral 0x55be977a2188 <fpconv.c:82:16> 'int' 1
1
   2: ReturnStmt 0x55be977a21a8 <fpconv.c:82:9, col:16>
`-IntegerLiteral 0x55be977a2188 <col:16> 'int' 1
return [B5.1];
   Preds (3): B6 B7 B8
   Succs (1): B0

 [B6]
   1: DeclRefExpr 0x55be977a20c8 <fpconv.c:81:35> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
ch
   2: ImplicitCastExpr 0x55be977a2108 <fpconv.c:81:35> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a20c8 <col:35> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B6.1] (ImplicitCastExpr, LValueToRValue, char)
   3: ImplicitCastExpr 0x55be977a2120 <fpconv.c:81:35> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a2108 <col:35> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a20c8 <col:35> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B6.2] (ImplicitCastExpr, IntegralCast, int)
   4: CharacterLiteral 0x55be977a20f0 <fpconv.c:81:41> 'int' 46
'.'
   5: BinaryOperator 0x55be977a2138 <fpconv.c:81:35, col:41> 'int' '=='
|-ImplicitCastExpr 0x55be977a2120 <col:35> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55be977a2108 <col:35> 'char' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a20c8 <col:35> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
`-CharacterLiteral 0x55be977a20f0 <col:41> 'int' 46
[B6.3] == [B6.4]
   T: if [B8.5] || [B7.5] || [B6.5]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclRefExpr 0x55be977a2008 <fpconv.c:81:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
ch
   2: ImplicitCastExpr 0x55be977a2048 <fpconv.c:81:22> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a2008 <col:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B7.1] (ImplicitCastExpr, LValueToRValue, char)
   3: ImplicitCastExpr 0x55be977a2060 <fpconv.c:81:22> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a2048 <col:22> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a2008 <col:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B7.2] (ImplicitCastExpr, IntegralCast, int)
   4: CharacterLiteral 0x55be977a2030 <fpconv.c:81:28> 'int' 43
'+'
   5: BinaryOperator 0x55be977a2078 <fpconv.c:81:22, col:28> 'int' '=='
|-ImplicitCastExpr 0x55be977a2060 <col:22> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55be977a2048 <col:22> 'char' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a2008 <col:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
`-CharacterLiteral 0x55be977a2030 <col:28> 'int' 43
[B7.3] == [B7.4]
   T: [B8.5] || [B7.5] || ...
   Preds (1): B8
   Succs (2): B5 B6

 [B8]
   1: DeclRefExpr 0x55be977a1f70 <fpconv.c:81:9> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
ch
   2: ImplicitCastExpr 0x55be977a1fb0 <fpconv.c:81:9> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a1f70 <col:9> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B8.1] (ImplicitCastExpr, LValueToRValue, char)
   3: ImplicitCastExpr 0x55be977a1fc8 <fpconv.c:81:9> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a1fb0 <col:9> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a1f70 <col:9> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B8.2] (ImplicitCastExpr, IntegralCast, int)
   4: CharacterLiteral 0x55be977a1f98 <fpconv.c:81:15> 'int' 45
'-'
   5: BinaryOperator 0x55be977a1fe0 <fpconv.c:81:9, col:15> 'int' '=='
|-ImplicitCastExpr 0x55be977a1fc8 <col:9> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55be977a1fb0 <col:9> 'char' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a1f70 <col:9> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
`-CharacterLiteral 0x55be977a1f98 <col:15> 'int' 45
[B8.3] == [B8.4]
   T: [B8.5] || ...
   Preds (2): B10 B11
   Succs (2): B5 B7

 [B9]
   1: IntegerLiteral 0x55be977a1f00 <fpconv.c:80:16> 'int' 1
1
   2: ReturnStmt 0x55be977a1f20 <fpconv.c:80:9, col:16>
`-IntegerLiteral 0x55be977a1f00 <col:16> 'int' 1
return [B9.1];
   Preds (1): B10
   Succs (1): B0

 [B10]
   1: DeclRefExpr 0x55be977a1e40 <fpconv.c:79:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
ch
   2: ImplicitCastExpr 0x55be977a1e80 <fpconv.c:79:22> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a1e40 <col:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B10.1] (ImplicitCastExpr, LValueToRValue, char)
   3: ImplicitCastExpr 0x55be977a1e98 <fpconv.c:79:22> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a1e80 <col:22> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a1e40 <col:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B10.2] (ImplicitCastExpr, IntegralCast, int)
   4: CharacterLiteral 0x55be977a1e68 <fpconv.c:79:28> 'int' 57
'9'
   5: BinaryOperator 0x55be977a1eb0 <fpconv.c:79:22, col:28> 'int' '<='
|-ImplicitCastExpr 0x55be977a1e98 <col:22> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55be977a1e80 <col:22> 'char' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a1e40 <col:22> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
`-CharacterLiteral 0x55be977a1e68 <col:28> 'int' 57
[B10.3] <= [B10.4]
   T: if [B11.6] && [B10.5]
   Preds (1): B11
   Succs (2): B9 B8

 [B11]
   1: DeclStmt 0x55be977a1d90 <fpconv.c:77:5, col:18>col:10
`-VarDecl 0x55be977a1d30 <col:5, col:10> col:10 used lower_ch 'char'
char lower_ch;
   2: CharacterLiteral 0x55be977a1da8 <fpconv.c:79:9> 'int' 48
'0'
   3: DeclRefExpr 0x55be977a1dc0 <fpconv.c:79:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
ch
   4: ImplicitCastExpr 0x55be977a1de8 <fpconv.c:79:16> 'char' <LValueToRValue>
`-DeclRefExpr 0x55be977a1dc0 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B11.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55be977a1e00 <fpconv.c:79:16> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55be977a1de8 <col:16> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55be977a1dc0 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B11.4] (ImplicitCastExpr, IntegralCast, int)
   6: BinaryOperator 0x55be977a1e18 <fpconv.c:79:9, col:16> 'int' '<='
|-CharacterLiteral 0x55be977a1da8 <col:9> 'int' 48
`-ImplicitCastExpr 0x55be977a1e00 <col:16> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x55be977a1de8 <col:16> 'char' <LValueToRValue>
    `-DeclRefExpr 0x55be977a1dc0 <col:16> 'char' lvalue ParmVar 0x55be977a1bb0 'ch' 'char'
[B11.2] <= [B11.5]
   T: [B11.6] && ...
   Preds (1): B12
   Succs (2): B10 B8

 [B0 (EXIT)]
   Preds (4): B1 B2 B5 B9
