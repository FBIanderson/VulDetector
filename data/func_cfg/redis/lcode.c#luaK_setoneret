void luaK_setoneret(FuncState *fs, expdesc *e)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768c9938 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
([B1.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768c9950 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.2]->f
   4: ImplicitCastExpr 0x5637768c9988 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768c99a0 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.4]->code
   6: ImplicitCastExpr 0x5637768c9ae0 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c99a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768c9a20 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
([B1.7]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768c9a38 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.8]->u
  10: MemberExpr 0x5637768c9a70 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.9].s
  11: MemberExpr 0x5637768c9aa8 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.10].info
  12: ImplicitCastExpr 0x5637768c9af8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c9aa8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x5637768c9b10 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c9ae0 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c99a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c9af8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c9aa8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.6][[B1.12]]
  14: ImplicitCastExpr 0x5637768c9e98 <./lopcodes.h:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768c9b58 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768c9b38 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768c9b10 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768c9ae0 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768c99a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768c9af8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768c9aa8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
(([B1.13])) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: IntegerLiteral 0x5637768c9b78 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x5637768c9ba8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
(Instruction)[B1.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x5637768c9bd0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
~[B1.16]
  18: IntegerLiteral 0x5637768c9c10 <./lopcodes.h:38:17> 'int' 9
9
  19: BinaryOperator 0x5637768c9c30 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
([B1.17]) << [B1.18]
  20: UnaryOperator 0x5637768c9c78 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c9c58 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c9c30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
~([B1.19])
  21: IntegerLiteral 0x5637768c9cb8 <./lopcodes.h:44:17> 'int' 0
0
  22: IntegerLiteral 0x5637768c9cd8 <./lopcodes.h:42:18> 'int' 6
6
  23: BinaryOperator 0x5637768c9cf8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
[B1.21] + [B1.22]
  24: IntegerLiteral 0x5637768c9d40 <./lopcodes.h:40:17> 'int' 8
8
  25: BinaryOperator 0x5637768c9d60 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
([B1.23]) + [B1.24]
  26: IntegerLiteral 0x5637768c9da8 <./lopcodes.h:37:17> 'int' 9
9
  27: BinaryOperator 0x5637768c9dc8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768c9d88 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768c9d60 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768c9da8 <line:37:17> 'int' 9
([B1.25]) + [B1.26]
  28: BinaryOperator 0x5637768c9e10 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c9c98 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c9c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c9c58 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c9c30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
`-ParenExpr 0x5637768c9df0 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768c9dc8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768c9d88 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768c9d60 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768c9da8 <line:37:17> 'int' 9
([B1.20]) << ([B1.27])
  29: UnaryOperator 0x5637768c9e58 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c9e38 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c9e10 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c9c98 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c9c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c9c58 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c9c30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768c9df0 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768c9dc8 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768c9d88 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768c9d60 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768c9da8 <line:37:17> 'int' 9
~([B1.28])
  30: BinaryOperator 0x5637768c9eb0 <./lopcodes.h:89:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768c9e98 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768c9b58 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768c9b38 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768c9b10 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768c9ae0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768c99a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768c9af8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768c9aa8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ParenExpr 0x5637768c9e78 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768c9e58 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768c9e38 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c9e10 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c9c98 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c9c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c9c58 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c9c30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768c9df0 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768c9dc8 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768c9d88 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768c9d60 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768c9da8 <line:37:17> 'int' 9
[B1.14] & ([B1.29])
  31: IntegerLiteral 0x5637768c9ef8 <lcode.c:298:30> 'int' 2
2
  32: CStyleCastExpr 0x5637768c9f78 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768c9f58 <col:26, col:30> 'int'
  `-IntegerLiteral 0x5637768c9ef8 <lcode.c:298:30> 'int' 2
(Instruction)([B1.31]) (CStyleCastExpr, IntegralCast, Instruction)
  33: IntegerLiteral 0x5637768c9fc0 <./lopcodes.h:44:17> 'int' 0
0
  34: IntegerLiteral 0x5637768c9fe0 <./lopcodes.h:42:18> 'int' 6
6
  35: BinaryOperator 0x5637768ca000 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
[B1.33] + [B1.34]
  36: IntegerLiteral 0x5637768ca048 <./lopcodes.h:40:17> 'int' 8
8
  37: BinaryOperator 0x5637768ca068 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768ca028 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768ca000 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768ca048 <line:40:17> 'int' 8
([B1.35]) + [B1.36]
  38: IntegerLiteral 0x5637768ca0b0 <./lopcodes.h:37:17> 'int' 9
9
  39: BinaryOperator 0x5637768ca0d0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768ca090 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768ca068 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768ca028 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768ca000 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768ca048 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768ca0b0 <line:37:17> 'int' 9
([B1.37]) + [B1.38]
  40: BinaryOperator 0x5637768ca118 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c9fa0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768c9f78 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x5637768c9f58 <col:26, col:30> 'int'
|     `-IntegerLiteral 0x5637768c9ef8 <lcode.c:298:30> 'int' 2
`-ParenExpr 0x5637768ca0f8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768ca0d0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768ca090 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768ca068 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768ca028 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768ca000 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768ca048 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768ca0b0 <line:37:17> 'int' 9
([B1.32]) << ([B1.39])
  41: IntegerLiteral 0x5637768ca160 <./lopcodes.h:71:39> 'int' 0
0
  42: CStyleCastExpr 0x5637768ca190 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
(Instruction)[B1.41] (CStyleCastExpr, IntegralCast, Instruction)
  43: UnaryOperator 0x5637768ca1b8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
~[B1.42]
  44: IntegerLiteral 0x5637768ca1f8 <./lopcodes.h:38:17> 'int' 9
9
  45: BinaryOperator 0x5637768ca218 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ca1d8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768ca1b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
`-IntegerLiteral 0x5637768ca1f8 <line:38:17> 'int' 9
([B1.43]) << [B1.44]
  46: UnaryOperator 0x5637768ca260 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768ca240 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ca218 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ca1d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768ca1b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768ca1f8 <line:38:17> 'int' 9
~([B1.45])
  47: IntegerLiteral 0x5637768ca2a0 <./lopcodes.h:44:17> 'int' 0
0
  48: IntegerLiteral 0x5637768ca2c0 <./lopcodes.h:42:18> 'int' 6
6
  49: BinaryOperator 0x5637768ca2e0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
[B1.47] + [B1.48]
  50: IntegerLiteral 0x5637768ca328 <./lopcodes.h:40:17> 'int' 8
8
  51: BinaryOperator 0x5637768ca348 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768ca308 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768ca2e0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768ca328 <line:40:17> 'int' 8
([B1.49]) + [B1.50]
  52: IntegerLiteral 0x5637768ca390 <./lopcodes.h:37:17> 'int' 9
9
  53: BinaryOperator 0x5637768ca3b0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768ca370 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768ca348 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768ca308 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768ca2e0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768ca328 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768ca390 <line:37:17> 'int' 9
([B1.51]) + [B1.52]
  54: BinaryOperator 0x5637768ca3f8 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ca280 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768ca260 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768ca240 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768ca218 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768ca1d8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768ca1b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768ca1f8 <line:38:17> 'int' 9
`-ParenExpr 0x5637768ca3d8 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768ca3b0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768ca370 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768ca348 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768ca308 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768ca2e0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768ca328 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768ca390 <line:37:17> 'int' 9
([B1.46]) << ([B1.53])
  55: BinaryOperator 0x5637768ca440 <./lopcodes.h:90:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768ca140 <line:90:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768ca118 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768c9fa0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768c9f78 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x5637768c9f58 <col:26, col:30> 'int'
|   |     `-IntegerLiteral 0x5637768c9ef8 <lcode.c:298:30> 'int' 2
|   `-ParenExpr 0x5637768ca0f8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5637768ca0d0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5637768ca090 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5637768ca068 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5637768ca028 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5637768ca000 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5637768ca048 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5637768ca0b0 <line:37:17> 'int' 9
`-ParenExpr 0x5637768ca420 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ca3f8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ca280 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768ca260 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768ca240 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768ca218 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768ca1d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768ca1b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768ca1f8 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768ca3d8 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768ca3b0 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768ca370 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768ca348 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768ca308 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768ca2e0 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768ca328 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768ca390 <line:37:17> 'int' 9
([B1.40]) & ([B1.54])
  56: BinaryOperator 0x5637768ca488 <./lopcodes.h:89:31, line:90:53> 'unsigned int' '|'
|-ParenExpr 0x5637768c9ed8 <line:89:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768c9eb0 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768c9e98 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768c9b58 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768c9b38 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768c9b10 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768c9ae0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768c99a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768c9af8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768c9aa8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
|   `-ParenExpr 0x5637768c9e78 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768c9e58 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768c9e38 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768c9e10 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768c9c98 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768c9c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768c9c58 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768c9c30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
|           `-ParenExpr 0x5637768c9df0 <line:47:16, col:31> 'int'
|             `-BinaryOperator 0x5637768c9dc8 <line:46:16, line:37:17> 'int' '+'
|               |-ParenExpr 0x5637768c9d88 <line:46:16, col:31> 'int'
|               | `-BinaryOperator 0x5637768c9d60 <line:45:16, line:40:17> 'int' '+'
|               |   |-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
|               |   | `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
|               |   |   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
|               |   |   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
|               |   `-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
|               `-IntegerLiteral 0x5637768c9da8 <line:37:17> 'int' 9
`-ParenExpr 0x5637768ca468 <line:90:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768ca440 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768ca140 <line:90:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768ca118 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768c9fa0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768c9f78 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x5637768c9f58 <col:26, col:30> 'int'
    |   |     `-IntegerLiteral 0x5637768c9ef8 <lcode.c:298:30> 'int' 2
    |   `-ParenExpr 0x5637768ca0f8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768ca0d0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5637768ca090 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5637768ca068 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5637768ca028 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5637768ca000 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5637768ca048 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5637768ca0b0 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768ca420 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768ca3f8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768ca280 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768ca260 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768ca240 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768ca218 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768ca1d8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768ca1b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768ca1f8 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768ca3d8 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768ca3b0 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768ca370 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768ca348 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768ca308 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768ca2e0 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768ca328 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768ca390 <line:37:17> 'int' 9
([B1.30]) | ([B1.55])
  57: DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
fs
  58: ImplicitCastExpr 0x5637768c96b0 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
([B1.57]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  59: MemberExpr 0x5637768c96c8 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c96b0 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.58]->f
  60: ImplicitCastExpr 0x5637768c9700 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c96c8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c96b0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.59] (ImplicitCastExpr, LValueToRValue, Proto *)
  61: MemberExpr 0x5637768c9718 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c9700 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c96c8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c96b0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.60]->code
  62: ImplicitCastExpr 0x5637768c9858 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c9718 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c9700 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c96c8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c96b0 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B1.61] (ImplicitCastExpr, LValueToRValue, Instruction *)
  63: DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
  64: ImplicitCastExpr 0x5637768c9798 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
([B1.63]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  65: MemberExpr 0x5637768c97b0 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c9798 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.64]->u
  66: MemberExpr 0x5637768c97e8 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c97b0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c9798 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.65].s
  67: MemberExpr 0x5637768c9820 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c97e8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c97b0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c9798 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.66].info
  68: ImplicitCastExpr 0x5637768c9870 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c9820 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c97e8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c97b0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c9798 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.67] (ImplicitCastExpr, LValueToRValue, int)
  69: ArraySubscriptExpr 0x5637768c9888 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c9858 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c9718 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c9700 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c96c8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c96b0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c9870 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c9820 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c97e8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c97b0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c9798 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.62][[B1.68]]
  70: BinaryOperator 0x5637768ca4d0 <./lopcodes.h:89:24, line:90:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768c98d0 <line:89:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x5637768c98b0 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x5637768c9888 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x5637768c9858 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x5637768c9718 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|     |   `-ImplicitCastExpr 0x5637768c9700 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x5637768c96c8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|     |       `-ImplicitCastExpr 0x5637768c96b0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x5637768c9690 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x5637768c9668 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768c9870 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x5637768c9820 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|         `-MemberExpr 0x5637768c97e8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           `-MemberExpr 0x5637768c97b0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|             `-ImplicitCastExpr 0x5637768c9798 <col:38, col:40> 'expdesc *' <LValueToRValue>
|               `-ParenExpr 0x5637768c9778 <col:38, col:40> 'expdesc *' lvalue
|                 `-DeclRefExpr 0x5637768c9750 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ParenExpr 0x5637768ca4b0 <./lopcodes.h:89:30, line:90:54> 'unsigned int'
  `-BinaryOperator 0x5637768ca488 <line:89:31, line:90:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768c9ed8 <line:89:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768c9eb0 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768c9e98 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768c9b58 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768c9b38 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768c9b10 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768c9ae0 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768c99a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768c9988 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768c9950 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768c9938 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768c9918 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768c98f0 <lcode.c:298:22> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768c9af8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768c9aa8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768c9a70 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768c9a38 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768c9a20 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768c9a00 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768c99d8 <lcode.c:298:26> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
    |   `-ParenExpr 0x5637768c9e78 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768c9e58 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768c9e38 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768c9e10 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768c9c98 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768c9c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768c9c58 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768c9c30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768c9bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768c9bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768c9ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768c9b78 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768c9c10 <line:38:17> 'int' 9
    |           `-ParenExpr 0x5637768c9df0 <line:47:16, col:31> 'int'
    |             `-BinaryOperator 0x5637768c9dc8 <line:46:16, line:37:17> 'int' '+'
    |               |-ParenExpr 0x5637768c9d88 <line:46:16, col:31> 'int'
    |               | `-BinaryOperator 0x5637768c9d60 <line:45:16, line:40:17> 'int' '+'
    |               |   |-ParenExpr 0x5637768c9d20 <line:45:16, col:33> 'int'
    |               |   | `-BinaryOperator 0x5637768c9cf8 <line:44:17, line:42:18> 'int' '+'
    |               |   |   |-IntegerLiteral 0x5637768c9cb8 <line:44:17> 'int' 0
    |               |   |   `-IntegerLiteral 0x5637768c9cd8 <line:42:18> 'int' 6
    |               |   `-IntegerLiteral 0x5637768c9d40 <line:40:17> 'int' 8
    |               `-IntegerLiteral 0x5637768c9da8 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768ca468 <line:90:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768ca440 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768ca140 <line:90:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768ca118 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768c9fa0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768c9f78 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x5637768c9f58 <col:26, col:30> 'int'
        |   |     `-IntegerLiteral 0x5637768c9ef8 <lcode.c:298:30> 'int' 2
        |   `-ParenExpr 0x5637768ca0f8 <./lopcodes.h:47:16, col:31> 'int'
        |     `-BinaryOperator 0x5637768ca0d0 <line:46:16, line:37:17> 'int' '+'
        |       |-ParenExpr 0x5637768ca090 <line:46:16, col:31> 'int'
        |       | `-BinaryOperator 0x5637768ca068 <line:45:16, line:40:17> 'int' '+'
        |       |   |-ParenExpr 0x5637768ca028 <line:45:16, col:33> 'int'
        |       |   | `-BinaryOperator 0x5637768ca000 <line:44:17, line:42:18> 'int' '+'
        |       |   |   |-IntegerLiteral 0x5637768c9fc0 <line:44:17> 'int' 0
        |       |   |   `-IntegerLiteral 0x5637768c9fe0 <line:42:18> 'int' 6
        |       |   `-IntegerLiteral 0x5637768ca048 <line:40:17> 'int' 8
        |       `-IntegerLiteral 0x5637768ca0b0 <line:37:17> 'int' 9
        `-ParenExpr 0x5637768ca420 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768ca3f8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768ca280 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768ca260 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768ca240 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768ca218 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768ca1d8 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768ca1b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768ca190 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768ca160 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768ca1f8 <line:38:17> 'int' 9
            `-ParenExpr 0x5637768ca3d8 <line:47:16, col:31> 'int'
              `-BinaryOperator 0x5637768ca3b0 <line:46:16, line:37:17> 'int' '+'
                |-ParenExpr 0x5637768ca370 <line:46:16, col:31> 'int'
                | `-BinaryOperator 0x5637768ca348 <line:45:16, line:40:17> 'int' '+'
                |   |-ParenExpr 0x5637768ca308 <line:45:16, col:33> 'int'
                |   | `-BinaryOperator 0x5637768ca2e0 <line:44:17, line:42:18> 'int' '+'
                |   |   |-IntegerLiteral 0x5637768ca2a0 <line:44:17> 'int' 0
                |   |   `-IntegerLiteral 0x5637768ca2c0 <line:42:18> 'int' 6
                |   `-IntegerLiteral 0x5637768ca328 <line:40:17> 'int' 8
                `-IntegerLiteral 0x5637768ca390 <line:37:17> 'int' 9
(([B1.69])) = ([B1.56])
  71: DeclRefExpr 0x5637768ca590 <lcode.c:299:12> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
VRELOCABLE
  72: ImplicitCastExpr 0x5637768ca5b8 <lcode.c:299:12> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768ca590 <col:12> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B1.71] (ImplicitCastExpr, IntegralCast, expkind)
  73: DeclRefExpr 0x5637768ca518 <lcode.c:299:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
  74: ImplicitCastExpr 0x5637768ca540 <lcode.c:299:5> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ca518 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.73] (ImplicitCastExpr, LValueToRValue, expdesc *)
  75: MemberExpr 0x5637768ca558 <lcode.c:299:5, col:8> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768ca540 <col:5> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ca518 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B1.74]->k
  76: BinaryOperator 0x5637768ca5d0 <lcode.c:299:5, col:12> 'expkind':'expkind' '='
|-MemberExpr 0x5637768ca558 <col:5, col:8> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768ca540 <col:5> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768ca518 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768ca5b8 <col:12> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768ca590 <col:12> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B1.75] = [B1.72]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768c9558 <lcode.c:297:12> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768c9580 <lcode.c:297:12> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768c9558 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B2.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768c9598 <lcode.c:297:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768c9580 <col:12> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c9558 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B2.2]->k
   4: ImplicitCastExpr 0x5637768c95f8 <lcode.c:297:12, col:15> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768c9598 <col:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768c9580 <col:12> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768c9558 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B2.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768c9610 <lcode.c:297:12, col:15> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768c95f8 <col:12, col:15> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768c9598 <col:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768c9580 <col:12> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768c9558 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768c95d0 <lcode.c:297:20> 'int' EnumConstant 0x56377687d258 'VVARARG' 'int'
VVARARG
   7: ImplicitCastExpr 0x5637768c9628 <lcode.c:297:20> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768c95d0 <col:20> 'int' EnumConstant 0x56377687d258 'VVARARG' 'int'
[B2.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768c9640 <lcode.c:297:12, col:20> 'int' '=='
|-ImplicitCastExpr 0x5637768c9610 <col:12, col:15> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768c95f8 <col:12, col:15> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768c9598 <col:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768c9580 <col:12> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768c9558 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768c9628 <col:20> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768c95d0 <col:20> 'int' EnumConstant 0x56377687d258 'VVARARG' 'int'
[B2.5] == [B2.7]
   T: if [B2.8]
   Preds (1): B4
   Succs (2): B1 B0

 [B3]
   1: DeclRefExpr 0x5637768c8db0 <lcode.c:294:12> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
VNONRELOC
   2: ImplicitCastExpr 0x5637768c8dd8 <lcode.c:294:12> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768c8db0 <col:12> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B3.1] (ImplicitCastExpr, IntegralCast, expkind)
   3: DeclRefExpr 0x5637768c8d38 <lcode.c:294:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768c8d60 <lcode.c:294:5> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768c8d38 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x5637768c8d78 <lcode.c:294:5, col:8> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768c8d60 <col:5> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c8d38 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.4]->k
   6: BinaryOperator 0x5637768c8df0 <lcode.c:294:5, col:12> 'expkind':'expkind' '='
|-MemberExpr 0x5637768c8d78 <col:5, col:8> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768c8d60 <col:5> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768c8d38 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768c8dd8 <col:12> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768c8db0 <col:12> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B3.5] = [B3.2]
   7: DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
fs
   8: ImplicitCastExpr 0x5637768c8f48 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
([B3.7]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   9: MemberExpr 0x5637768c8f60 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B3.8]->f
  10: ImplicitCastExpr 0x5637768c8f98 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B3.9] (ImplicitCastExpr, LValueToRValue, Proto *)
  11: MemberExpr 0x5637768c8fb0 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B3.10]->code
  12: ImplicitCastExpr 0x5637768c90f0 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
[B3.11] (ImplicitCastExpr, LValueToRValue, Instruction *)
  13: DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
  14: ImplicitCastExpr 0x5637768c9030 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
([B3.13]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: MemberExpr 0x5637768c9048 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.14]->u
  16: MemberExpr 0x5637768c9080 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.15].s
  17: MemberExpr 0x5637768c90b8 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.16].info
  18: ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: ArraySubscriptExpr 0x5637768c9120 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c90f0 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.12][[B3.18]]
  20: ImplicitCastExpr 0x5637768c9210 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768c9168 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768c9148 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768c9120 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768c90f0 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
(([B3.19])) (ImplicitCastExpr, LValueToRValue, Instruction)
  21: IntegerLiteral 0x5637768c9188 <./lopcodes.h:44:17> 'int' 0
0
  22: IntegerLiteral 0x5637768c91a8 <./lopcodes.h:42:18> 'int' 6
6
  23: BinaryOperator 0x5637768c91c8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c9188 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c91a8 <line:42:18> 'int' 6
[B3.21] + [B3.22]
  24: BinaryOperator 0x5637768c9228 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768c9210 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768c9168 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768c9148 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768c9120 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768c90f0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ParenExpr 0x5637768c91f0 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768c91c8 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768c9188 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768c91a8 <line:42:18> 'int' 6
[B3.20] >> ([B3.23])
  25: IntegerLiteral 0x5637768c9270 <./lopcodes.h:71:39> 'int' 0
0
  26: CStyleCastExpr 0x5637768c92a0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
(Instruction)[B3.25] (CStyleCastExpr, IntegralCast, Instruction)
  27: UnaryOperator 0x5637768c92c8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
~[B3.26]
  28: IntegerLiteral 0x5637768c9308 <./lopcodes.h:40:17> 'int' 8
8
  29: BinaryOperator 0x5637768c9328 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c92e8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c92c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c9308 <line:40:17> 'int' 8
([B3.27]) << [B3.28]
  30: UnaryOperator 0x5637768c9370 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c9350 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c9328 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c92e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c92c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c9308 <line:40:17> 'int' 8
~([B3.29])
  31: IntegerLiteral 0x5637768c93b0 <./lopcodes.h:84:60> 'int' 0
0
  32: BinaryOperator 0x5637768c93d0 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c9390 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c9370 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c9350 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c9328 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c92e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c92c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c9308 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768c93b0 <line:84:60> 'int' 0
([B3.30]) << [B3.31]
  33: BinaryOperator 0x5637768c9418 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768c9250 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768c9228 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768c9210 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768c9168 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768c9148 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768c9120 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768c90f0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
|   `-ParenExpr 0x5637768c91f0 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5637768c91c8 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5637768c9188 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5637768c91a8 <line:42:18> 'int' 6
`-ParenExpr 0x5637768c93f8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c93d0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c9390 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c9370 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c9350 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c9328 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c92e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c92c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c9308 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768c93b0 <line:84:60> 'int' 0
([B3.24]) & ([B3.32])
  34: CStyleCastExpr 0x5637768c94a8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5637768c9488 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768c9418 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768c9250 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768c9228 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768c9210 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768c9168 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768c9148 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768c9120 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768c90f0 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
    |   `-ParenExpr 0x5637768c91f0 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5637768c91c8 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5637768c9188 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5637768c91a8 <line:42:18> 'int' 6
    `-ParenExpr 0x5637768c93f8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c93d0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c9390 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c9370 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c9350 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c9328 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c92e8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c92c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c9308 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768c93b0 <line:84:60> 'int' 0
(int)([B3.33]) (CStyleCastExpr, IntegralCast, int)
  35: DeclRefExpr 0x5637768c8e18 <lcode.c:295:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
  36: ImplicitCastExpr 0x5637768c8e40 <lcode.c:295:5> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768c8e18 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.35] (ImplicitCastExpr, LValueToRValue, expdesc *)
  37: MemberExpr 0x5637768c8e58 <lcode.c:295:5, col:8> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c8e40 <col:5> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c8e18 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.36]->u
  38: MemberExpr 0x5637768c8e90 <lcode.c:295:5, col:10> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c8e58 <col:5, col:8> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c8e40 <col:5> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768c8e18 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.37].s
  39: MemberExpr 0x5637768c8ec8 <lcode.c:295:5, col:12> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c8e90 <col:5, col:10> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c8e58 <col:5, col:8> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c8e40 <col:5> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768c8e18 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B3.38].info
  40: BinaryOperator 0x5637768c9510 <lcode.c:295:5, ./lopcodes.h:84:63> 'int' '='
|-MemberExpr 0x5637768c8ec8 <lcode.c:295:5, col:12> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768c8e90 <col:5, col:10> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768c8e58 <col:5, col:8> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768c8e40 <col:5> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768c8e18 <col:5> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ParenExpr 0x5637768c94f0 <./lopcodes.h:84:21, col:63> 'int'
  `-ParenExpr 0x5637768c94d0 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5637768c94a8 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5637768c9488 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5637768c9418 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5637768c9250 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5637768c9228 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5637768c9210 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5637768c9168 <col:33, col:35> 'Instruction':'unsigned int' lvalue
          |   |   `-ParenExpr 0x5637768c9148 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
          |   |     `-ArraySubscriptExpr 0x5637768c9120 <col:24, col:51> 'Instruction':'unsigned int' lvalue
          |   |       |-ImplicitCastExpr 0x5637768c90f0 <col:24, col:33> 'Instruction *' <LValueToRValue>
          |   |       | `-MemberExpr 0x5637768c8fb0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
          |   |       |   `-ImplicitCastExpr 0x5637768c8f98 <col:24, col:30> 'Proto *' <LValueToRValue>
          |   |       |     `-MemberExpr 0x5637768c8f60 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
          |   |       |       `-ImplicitCastExpr 0x5637768c8f48 <col:24, col:27> 'FuncState *' <LValueToRValue>
          |   |       |         `-ParenExpr 0x5637768c8f28 <col:24, col:27> 'FuncState *' lvalue
          |   |       |           `-DeclRefExpr 0x5637768c8f00 <lcode.c:295:36> 'FuncState *' lvalue ParmVar 0x5637768c8550 'fs' 'FuncState *'
          |   |       `-ImplicitCastExpr 0x5637768c9108 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
          |   |         `-MemberExpr 0x5637768c90b8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          |   |           `-MemberExpr 0x5637768c9080 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
          |   |             `-MemberExpr 0x5637768c9048 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
          |   |               `-ImplicitCastExpr 0x5637768c9030 <col:38, col:40> 'expdesc *' <LValueToRValue>
          |   |                 `-ParenExpr 0x5637768c9010 <col:38, col:40> 'expdesc *' lvalue
          |   |                   `-DeclRefExpr 0x5637768c8fe8 <lcode.c:295:40> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
          |   `-ParenExpr 0x5637768c91f0 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5637768c91c8 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5637768c9188 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5637768c91a8 <line:42:18> 'int' 6
          `-ParenExpr 0x5637768c93f8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5637768c93d0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5637768c9390 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5637768c9370 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5637768c9350 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5637768c9328 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5637768c92e8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5637768c92c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5637768c92a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5637768c9270 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5637768c9308 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5637768c93b0 <line:84:60> 'int' 0
[B3.39] = (([B3.34]))
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x5637768c8c28 <lcode.c:293:7> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768c8c50 <lcode.c:293:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768c8c28 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B4.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768c8c68 <lcode.c:293:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768c8c50 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c8c28 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B4.2]->k
   4: ImplicitCastExpr 0x5637768c8cc8 <lcode.c:293:7, col:10> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768c8c68 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768c8c50 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768c8c28 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B4.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768c8ce0 <lcode.c:293:7, col:10> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768c8cc8 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768c8c68 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768c8c50 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768c8c28 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
[B4.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768c8ca0 <lcode.c:293:15> 'int' EnumConstant 0x56377687d210 'VCALL' 'int'
VCALL
   7: ImplicitCastExpr 0x5637768c8cf8 <lcode.c:293:15> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768c8ca0 <col:15> 'int' EnumConstant 0x56377687d210 'VCALL' 'int'
[B4.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768c8d10 <lcode.c:293:7, col:15> 'int' '=='
|-ImplicitCastExpr 0x5637768c8ce0 <col:7, col:10> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768c8cc8 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768c8c68 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768c8c50 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768c8c28 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c85c0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768c8cf8 <col:15> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768c8ca0 <col:15> 'int' EnumConstant 0x56377687d210 'VCALL' 'int'
[B4.5] == [B4.7]
   T: if [B4.8]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (3): B1 B2 B3
