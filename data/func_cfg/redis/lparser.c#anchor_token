static void anchor_token(LexState *ls)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x558fa8eea6d8 <lparser.c:59:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8eea700 <lparser.c:59:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eea6d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B1.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8eea718 <lparser.c:59:19, col:23> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8eea700 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eea6d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B1.2]->t
   4: MemberExpr 0x558fa8eea750 <lparser.c:59:19, col:25> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
`-MemberExpr 0x558fa8eea718 <col:19, col:23> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8eea700 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eea6d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B1.3].seminfo
   5: MemberExpr 0x558fa8eea788 <lparser.c:59:19, col:33> 'TString *' lvalue .ts 0x558fa8e9eab8
`-MemberExpr 0x558fa8eea750 <col:19, col:25> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
  `-MemberExpr 0x558fa8eea718 <col:19, col:23> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8eea700 <col:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eea6d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B1.4].ts
   6: ImplicitCastExpr 0x558fa8eea7c0 <lparser.c:59:19, col:33> 'TString *' <LValueToRValue>
`-MemberExpr 0x558fa8eea788 <col:19, col:33> 'TString *' lvalue .ts 0x558fa8e9eab8
  `-MemberExpr 0x558fa8eea750 <col:19, col:25> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
    `-MemberExpr 0x558fa8eea718 <col:19, col:23> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
      `-ImplicitCastExpr 0x558fa8eea700 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8eea6d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, TString *)
   7: DeclStmt 0x558fa8eea7d8 <lparser.c:59:5, col:35>col:14
`-VarDecl 0x558fa8eea678 <col:5, col:33> col:14 used ts 'TString *' cinit
  `-ImplicitCastExpr 0x558fa8eea7c0 <col:19, col:33> 'TString *' <LValueToRValue>
    `-MemberExpr 0x558fa8eea788 <col:19, col:33> 'TString *' lvalue .ts 0x558fa8e9eab8
      `-MemberExpr 0x558fa8eea750 <col:19, col:25> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
        `-MemberExpr 0x558fa8eea718 <col:19, col:23> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
          `-ImplicitCastExpr 0x558fa8eea700 <col:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x558fa8eea6d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
TString *ts = ls->t.seminfo.ts;
   8: DeclRefExpr 0x558fa8eea7f0 <lparser.c:60:5> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
   9: ImplicitCastExpr 0x558fa8eeaaa8 <lparser.c:60:5> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eea7f0 <col:5> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B1.8] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  10: DeclRefExpr 0x558fa8eea818 <lparser.c:60:20> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8eeab00 <lparser.c:60:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eea818 <col:20> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B1.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: DeclRefExpr 0x558fa8eea840 <lparser.c:60:31> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
ts
  13: ImplicitCastExpr 0x558fa8eea8a8 <./lobject.h:210:39, col:42> 'TString *' <LValueToRValue>
`-ParenExpr 0x558fa8eea868 <col:39, col:42> 'TString *' lvalue
  `-DeclRefExpr 0x558fa8eea840 <lparser.c:60:31> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
([B1.12]) (ImplicitCastExpr, LValueToRValue, TString *)
  14: IntegerLiteral 0x558fa8eea888 <./lobject.h:210:46> 'int' 1
1
  15: BinaryOperator 0x558fa8eea8c0 <./lobject.h:210:39, col:46> 'TString *' '+'
|-ImplicitCastExpr 0x558fa8eea8a8 <col:39, col:42> 'TString *' <LValueToRValue>
| `-ParenExpr 0x558fa8eea868 <col:39, col:42> 'TString *' lvalue
|   `-DeclRefExpr 0x558fa8eea840 <lparser.c:60:31> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
`-IntegerLiteral 0x558fa8eea888 <./lobject.h:210:46> 'int' 1
[B1.13] + [B1.14]
  16: CStyleCastExpr 0x558fa8eea950 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x558fa8eea930 <col:26, col:30> 'TString *'
  `-BinaryOperator 0x558fa8eea8c0 <./lobject.h:210:39, col:46> 'TString *' '+'
    |-ImplicitCastExpr 0x558fa8eea8a8 <col:39, col:42> 'TString *' <LValueToRValue>
    | `-ParenExpr 0x558fa8eea868 <col:39, col:42> 'TString *' lvalue
    |   `-DeclRefExpr 0x558fa8eea840 <lparser.c:60:31> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
    `-IntegerLiteral 0x558fa8eea888 <./lobject.h:210:46> 'int' 1
(const char *)([B1.15]) (CStyleCastExpr, BitCast, const char *)
  17: DeclRefExpr 0x558fa8eea998 <lparser.c:60:36> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
ts
  18: ImplicitCastExpr 0x558fa8eea9c0 <lparser.c:60:36> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eea998 <col:36> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
[B1.17] (ImplicitCastExpr, LValueToRValue, TString *)
  19: MemberExpr 0x558fa8eea9d8 <lparser.c:60:36, col:40> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x558fa8e82460
`-ImplicitCastExpr 0x558fa8eea9c0 <col:36> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eea998 <col:36> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
[B1.18]->tsv
  20: MemberExpr 0x558fa8eeaa10 <lparser.c:60:36, col:44> 'size_t':'unsigned long' lvalue .len 0x558fa8e823c0
`-MemberExpr 0x558fa8eea9d8 <col:36, col:40> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x558fa8e82460
  `-ImplicitCastExpr 0x558fa8eea9c0 <col:36> 'TString *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eea998 <col:36> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
[B1.19].len
  21: ImplicitCastExpr 0x558fa8eeab18 <lparser.c:60:36, col:44> 'size_t':'unsigned long' <LValueToRValue>
`-MemberExpr 0x558fa8eeaa10 <col:36, col:44> 'size_t':'unsigned long' lvalue .len 0x558fa8e823c0
  `-MemberExpr 0x558fa8eea9d8 <col:36, col:40> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x558fa8e82460
    `-ImplicitCastExpr 0x558fa8eea9c0 <col:36> 'TString *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eea998 <col:36> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
[B1.20] (ImplicitCastExpr, LValueToRValue, size_t)
  22: CallExpr 0x558fa8eeaac0 <lparser.c:60:5, col:47> 'TString *'
|-ImplicitCastExpr 0x558fa8eeaaa8 <col:5> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eea7f0 <col:5> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8eeab00 <col:20> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eea818 <col:20> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
|-ParenExpr 0x558fa8eea978 <./llimits.h:75:22, col:31> 'const char *'
| `-CStyleCastExpr 0x558fa8eea950 <col:23, col:30> 'const char *' <BitCast>
|   `-ParenExpr 0x558fa8eea930 <col:26, col:30> 'TString *'
|     `-BinaryOperator 0x558fa8eea8c0 <./lobject.h:210:39, col:46> 'TString *' '+'
|       |-ImplicitCastExpr 0x558fa8eea8a8 <col:39, col:42> 'TString *' <LValueToRValue>
|       | `-ParenExpr 0x558fa8eea868 <col:39, col:42> 'TString *' lvalue
|       |   `-DeclRefExpr 0x558fa8eea840 <lparser.c:60:31> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
|       `-IntegerLiteral 0x558fa8eea888 <./lobject.h:210:46> 'int' 1
`-ImplicitCastExpr 0x558fa8eeab18 <lparser.c:60:36, col:44> 'size_t':'unsigned long' <LValueToRValue>
  `-MemberExpr 0x558fa8eeaa10 <col:36, col:44> 'size_t':'unsigned long' lvalue .len 0x558fa8e823c0
    `-MemberExpr 0x558fa8eea9d8 <col:36, col:40> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x558fa8e82460
      `-ImplicitCastExpr 0x558fa8eea9c0 <col:36> 'TString *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8eea998 <col:36> 'TString *' lvalue Var 0x558fa8eea678 'ts' 'TString *'
[B1.9]([B1.11], ([B1.16]), [B1.21])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8eea528 <lparser.c:58:33> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8eea550 <lparser.c:58:33> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eea528 <col:33> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8eea568 <lparser.c:58:33, col:37> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8eea550 <col:33> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eea528 <col:33> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B2.2]->t
   4: MemberExpr 0x558fa8eea5a0 <lparser.c:58:33, col:39> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8eea568 <col:33, col:37> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8eea550 <col:33> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eea528 <col:33> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B2.3].token
   5: ImplicitCastExpr 0x558fa8eea600 <lparser.c:58:33, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8eea5a0 <col:33, col:39> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8eea568 <col:33, col:37> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8eea550 <col:33> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eea528 <col:33> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x558fa8eea5d8 <lparser.c:58:48> 'int' EnumConstant 0x558fa8e9e7b8 'TK_STRING' 'int'
TK_STRING
   7: BinaryOperator 0x558fa8eea618 <lparser.c:58:33, col:48> 'int' '=='
|-ImplicitCastExpr 0x558fa8eea600 <col:33, col:39> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8eea5a0 <col:33, col:39> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8eea568 <col:33, col:37> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8eea550 <col:33> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8eea528 <col:33> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8eea5d8 <col:48> 'int' EnumConstant 0x558fa8e9e7b8 'TK_STRING' 'int'
[B2.5] == [B2.6]
   T: if [B3.7] || [B2.7]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: DeclRefExpr 0x558fa8eea410 <lparser.c:58:7> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8eea438 <lparser.c:58:7> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eea410 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8eea450 <lparser.c:58:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8eea438 <col:7> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eea410 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B3.2]->t
   4: MemberExpr 0x558fa8eea488 <lparser.c:58:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8eea450 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8eea438 <col:7> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eea410 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B3.3].token
   5: ImplicitCastExpr 0x558fa8eea4e8 <lparser.c:58:7, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8eea488 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8eea450 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8eea438 <col:7> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eea410 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
[B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x558fa8eea4c0 <lparser.c:58:22> 'int' EnumConstant 0x558fa8e9e770 'TK_NAME' 'int'
TK_NAME
   7: BinaryOperator 0x558fa8eea500 <lparser.c:58:7, col:22> 'int' '=='
|-ImplicitCastExpr 0x558fa8eea4e8 <col:7, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8eea488 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8eea450 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8eea438 <col:7> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8eea410 <col:7> 'LexState *' lvalue ParmVar 0x558fa8eea2e0 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8eea4c0 <col:22> 'int' EnumConstant 0x558fa8e9e770 'TK_NAME' 'int'
[B3.5] == [B3.6]
   T: [B3.7] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2
