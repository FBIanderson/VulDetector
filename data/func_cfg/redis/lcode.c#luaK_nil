void luaK_nil(FuncState *fs, int from, int n)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: DeclRefExpr 0x5637768ad118 <lcode.c:55:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768ad328 <lcode.c:55:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ad118 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768ad140 <lcode.c:55:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ad390 <lcode.c:55:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ad140 <col:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ad168 <lcode.c:55:20> 'int' EnumConstant 0x56377686b5b8 'OP_LOADNIL' 'int'
OP_LOADNIL
   6: ImplicitCastExpr 0x5637768ad3a8 <lcode.c:55:20> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ad168 <col:20> 'int' EnumConstant 0x56377686b5b8 'OP_LOADNIL' 'int'
[B1.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768ad190 <lcode.c:55:32> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
   8: ImplicitCastExpr 0x5637768ad3c0 <lcode.c:55:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ad190 <col:32> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768ad1b8 <lcode.c:55:38> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
  10: ImplicitCastExpr 0x5637768ad208 <lcode.c:55:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ad1b8 <col:38> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x5637768ad1e0 <lcode.c:55:43> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
n
  12: ImplicitCastExpr 0x5637768ad220 <lcode.c:55:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ad1e0 <col:43> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: BinaryOperator 0x5637768ad238 <lcode.c:55:38, col:43> 'int' '+'
|-ImplicitCastExpr 0x5637768ad208 <col:38> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ad1b8 <col:38> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
`-ImplicitCastExpr 0x5637768ad220 <col:43> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768ad1e0 <col:43> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
[B1.10] + [B1.12]
  14: IntegerLiteral 0x5637768ad260 <lcode.c:55:45> 'int' 1
1
  15: BinaryOperator 0x5637768ad280 <lcode.c:55:38, col:45> 'int' '-'
|-BinaryOperator 0x5637768ad238 <col:38, col:43> 'int' '+'
| |-ImplicitCastExpr 0x5637768ad208 <col:38> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x5637768ad1b8 <col:38> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
| `-ImplicitCastExpr 0x5637768ad220 <col:43> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5637768ad1e0 <col:43> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
`-IntegerLiteral 0x5637768ad260 <col:45> 'int' 1
[B1.13] - [B1.14]
  16: IntegerLiteral 0x5637768ad2a8 <lcode.c:55:48> 'int' 0
0
  17: CallExpr 0x5637768ad340 <lcode.c:55:3, col:49> 'int'
|-ImplicitCastExpr 0x5637768ad328 <col:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ad118 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768ad390 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ad140 <col:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ad3a8 <col:20> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ad168 <col:20> 'int' EnumConstant 0x56377686b5b8 'OP_LOADNIL' 'int'
|-ImplicitCastExpr 0x5637768ad3c0 <col:32> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ad190 <col:32> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
|-BinaryOperator 0x5637768ad280 <col:38, col:45> 'int' '-'
| |-BinaryOperator 0x5637768ad238 <col:38, col:43> 'int' '+'
| | |-ImplicitCastExpr 0x5637768ad208 <col:38> 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x5637768ad1b8 <col:38> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
| | `-ImplicitCastExpr 0x5637768ad220 <col:43> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5637768ad1e0 <col:43> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
| `-IntegerLiteral 0x5637768ad260 <col:45> 'int' 1
`-IntegerLiteral 0x5637768ad2a8 <col:48> 'int' 0
[B1.2]([B1.4], [B1.6], [B1.8], [B1.15], [B1.16])
   Preds (5): B5 B6 B7 B9 B11
   Succs (1): B0

 [B2]
   1: ReturnStmt 0x5637768acfa0 <lcode.c:50:11>
return;
   Preds (2): B3 B4
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5637768ac478 <lcode.c:49:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
previous
   2: ImplicitCastExpr 0x5637768ac4a0 <lcode.c:49:23> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768ac478 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
[B3.1] (ImplicitCastExpr, LValueToRValue, Instruction *)
   3: UnaryOperator 0x5637768ac4b8 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768ac4a0 <col:23> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ac478 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
*[B3.2]
   4: ImplicitCastExpr 0x5637768ac818 <./lopcodes.h:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768ac4d8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-UnaryOperator 0x5637768ac4b8 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768ac4a0 <col:23> 'Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5637768ac478 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
([B3.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5637768ac4f8 <./lopcodes.h:71:39> 'int' 0
0
   6: CStyleCastExpr 0x5637768ac528 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
(Instruction)[B3.5] (CStyleCastExpr, IntegralCast, Instruction)
   7: UnaryOperator 0x5637768ac550 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
~[B3.6]
   8: IntegerLiteral 0x5637768ac590 <./lopcodes.h:38:17> 'int' 9
9
   9: BinaryOperator 0x5637768ac5b0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
`-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
([B3.7]) << [B3.8]
  10: UnaryOperator 0x5637768ac5f8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768ac5d8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ac5b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
~([B3.9])
  11: IntegerLiteral 0x5637768ac638 <./lopcodes.h:44:17> 'int' 0
0
  12: IntegerLiteral 0x5637768ac658 <./lopcodes.h:42:18> 'int' 6
6
  13: BinaryOperator 0x5637768ac678 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
[B3.11] + [B3.12]
  14: IntegerLiteral 0x5637768ac6c0 <./lopcodes.h:40:17> 'int' 8
8
  15: BinaryOperator 0x5637768ac6e0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
([B3.13]) + [B3.14]
  16: IntegerLiteral 0x5637768ac728 <./lopcodes.h:37:17> 'int' 9
9
  17: BinaryOperator 0x5637768ac748 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768ac708 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768ac6e0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768ac728 <line:37:17> 'int' 9
([B3.15]) + [B3.16]
  18: BinaryOperator 0x5637768ac790 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ac618 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768ac5f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768ac5d8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768ac5b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
`-ParenExpr 0x5637768ac770 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768ac748 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768ac708 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768ac6e0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768ac728 <line:37:17> 'int' 9
([B3.10]) << ([B3.17])
  19: UnaryOperator 0x5637768ac7d8 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768ac7b8 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ac790 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ac618 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768ac5f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768ac5d8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768ac5b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768ac770 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768ac748 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768ac708 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768ac6e0 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768ac728 <line:37:17> 'int' 9
~([B3.18])
  20: BinaryOperator 0x5637768ac830 <./lopcodes.h:89:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768ac818 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768ac4d8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-UnaryOperator 0x5637768ac4b8 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5637768ac4a0 <col:23> 'Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768ac478 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
`-ParenExpr 0x5637768ac7f8 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768ac7d8 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768ac7b8 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768ac790 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768ac618 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768ac5f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768ac5d8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768ac5b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768ac770 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768ac748 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768ac708 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768ac6e0 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768ac728 <line:37:17> 'int' 9
[B3.4] & ([B3.19])
  21: DeclRefExpr 0x5637768ac878 <lcode.c:49:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
  22: ImplicitCastExpr 0x5637768ac8c8 <lcode.c:49:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B3.21] (ImplicitCastExpr, LValueToRValue, int)
  23: DeclRefExpr 0x5637768ac8a0 <lcode.c:49:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
n
  24: ImplicitCastExpr 0x5637768ac8e0 <lcode.c:49:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
[B3.23] (ImplicitCastExpr, LValueToRValue, int)
  25: BinaryOperator 0x5637768ac8f8 <lcode.c:49:33, col:38> 'int' '+'
|-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
`-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
[B3.22] + [B3.24]
  26: IntegerLiteral 0x5637768ac920 <lcode.c:49:40> 'int' 1
1
  27: BinaryOperator 0x5637768ac940 <lcode.c:49:33, col:40> 'int' '-'
|-BinaryOperator 0x5637768ac8f8 <col:33, col:38> 'int' '+'
| |-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
| `-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
`-IntegerLiteral 0x5637768ac920 <col:40> 'int' 1
[B3.25] - [B3.26]
  28: CStyleCastExpr 0x5637768ac9c8 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768ac9a8 <col:26, col:30> 'int'
  `-BinaryOperator 0x5637768ac940 <lcode.c:49:33, col:40> 'int' '-'
    |-BinaryOperator 0x5637768ac8f8 <col:33, col:38> 'int' '+'
    | |-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
    | `-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
    `-IntegerLiteral 0x5637768ac920 <col:40> 'int' 1
(Instruction)([B3.27]) (CStyleCastExpr, IntegralCast, Instruction)
  29: IntegerLiteral 0x5637768aca10 <./lopcodes.h:44:17> 'int' 0
0
  30: IntegerLiteral 0x5637768aca30 <./lopcodes.h:42:18> 'int' 6
6
  31: BinaryOperator 0x5637768aca50 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
[B3.29] + [B3.30]
  32: IntegerLiteral 0x5637768aca98 <./lopcodes.h:40:17> 'int' 8
8
  33: BinaryOperator 0x5637768acab8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768aca78 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768aca50 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768aca98 <line:40:17> 'int' 8
([B3.31]) + [B3.32]
  34: IntegerLiteral 0x5637768acb00 <./lopcodes.h:37:17> 'int' 9
9
  35: BinaryOperator 0x5637768acb20 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768acae0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768acab8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768aca78 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768aca50 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768aca98 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768acb00 <line:37:17> 'int' 9
([B3.33]) + [B3.34]
  36: BinaryOperator 0x5637768acb68 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ac9f0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768ac9c8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x5637768ac9a8 <col:26, col:30> 'int'
|     `-BinaryOperator 0x5637768ac940 <lcode.c:49:33, col:40> 'int' '-'
|       |-BinaryOperator 0x5637768ac8f8 <col:33, col:38> 'int' '+'
|       | |-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
|       | `-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
|       `-IntegerLiteral 0x5637768ac920 <col:40> 'int' 1
`-ParenExpr 0x5637768acb48 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768acb20 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768acae0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768acab8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768aca78 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768aca50 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768aca98 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768acb00 <line:37:17> 'int' 9
([B3.28]) << ([B3.35])
  37: IntegerLiteral 0x5637768acbb0 <./lopcodes.h:71:39> 'int' 0
0
  38: CStyleCastExpr 0x5637768acbe0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
(Instruction)[B3.37] (CStyleCastExpr, IntegralCast, Instruction)
  39: UnaryOperator 0x5637768acc08 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
~[B3.38]
  40: IntegerLiteral 0x5637768acc48 <./lopcodes.h:38:17> 'int' 9
9
  41: BinaryOperator 0x5637768acc68 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768acc28 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768acc08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
`-IntegerLiteral 0x5637768acc48 <line:38:17> 'int' 9
([B3.39]) << [B3.40]
  42: UnaryOperator 0x5637768accb0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768acc90 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768acc68 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768acc28 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768acc08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768acc48 <line:38:17> 'int' 9
~([B3.41])
  43: IntegerLiteral 0x5637768accf0 <./lopcodes.h:44:17> 'int' 0
0
  44: IntegerLiteral 0x5637768acd10 <./lopcodes.h:42:18> 'int' 6
6
  45: BinaryOperator 0x5637768acd30 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
[B3.43] + [B3.44]
  46: IntegerLiteral 0x5637768acd78 <./lopcodes.h:40:17> 'int' 8
8
  47: BinaryOperator 0x5637768acd98 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768acd58 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768acd30 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768acd78 <line:40:17> 'int' 8
([B3.45]) + [B3.46]
  48: IntegerLiteral 0x5637768acde0 <./lopcodes.h:37:17> 'int' 9
9
  49: BinaryOperator 0x5637768ace00 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768acdc0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768acd98 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768acd58 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768acd30 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768acd78 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768acde0 <line:37:17> 'int' 9
([B3.47]) + [B3.48]
  50: BinaryOperator 0x5637768ace48 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768accd0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768accb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768acc90 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768acc68 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768acc28 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768acc08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768acc48 <line:38:17> 'int' 9
`-ParenExpr 0x5637768ace28 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768ace00 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768acdc0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768acd98 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768acd58 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768acd30 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768acd78 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768acde0 <line:37:17> 'int' 9
([B3.42]) << ([B3.49])
  51: BinaryOperator 0x5637768ace90 <./lopcodes.h:90:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768acb90 <line:90:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768acb68 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768ac9f0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768ac9c8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x5637768ac9a8 <col:26, col:30> 'int'
|   |     `-BinaryOperator 0x5637768ac940 <lcode.c:49:33, col:40> 'int' '-'
|   |       |-BinaryOperator 0x5637768ac8f8 <col:33, col:38> 'int' '+'
|   |       | |-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
|   |       | `-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
|   |       `-IntegerLiteral 0x5637768ac920 <col:40> 'int' 1
|   `-ParenExpr 0x5637768acb48 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5637768acb20 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5637768acae0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5637768acab8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5637768aca78 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5637768aca50 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5637768aca98 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5637768acb00 <line:37:17> 'int' 9
`-ParenExpr 0x5637768ace70 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ace48 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768accd0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768accb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768acc90 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768acc68 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768acc28 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768acc08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768acc48 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768ace28 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768ace00 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768acdc0 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768acd98 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768acd58 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768acd30 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768acd78 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768acde0 <line:37:17> 'int' 9
([B3.36]) & ([B3.50])
  52: BinaryOperator 0x5637768aced8 <./lopcodes.h:89:31, line:90:53> 'unsigned int' '|'
|-ParenExpr 0x5637768ac858 <line:89:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768ac830 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768ac818 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768ac4d8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-UnaryOperator 0x5637768ac4b8 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5637768ac4a0 <col:23> 'Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768ac478 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
|   `-ParenExpr 0x5637768ac7f8 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768ac7d8 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768ac7b8 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768ac790 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768ac618 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768ac5f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768ac5d8 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768ac5b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
|           `-ParenExpr 0x5637768ac770 <line:47:16, col:31> 'int'
|             `-BinaryOperator 0x5637768ac748 <line:46:16, line:37:17> 'int' '+'
|               |-ParenExpr 0x5637768ac708 <line:46:16, col:31> 'int'
|               | `-BinaryOperator 0x5637768ac6e0 <line:45:16, line:40:17> 'int' '+'
|               |   |-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
|               |   | `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
|               |   |   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
|               |   |   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
|               |   `-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
|               `-IntegerLiteral 0x5637768ac728 <line:37:17> 'int' 9
`-ParenExpr 0x5637768aceb8 <line:90:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768ace90 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768acb90 <line:90:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768acb68 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768ac9f0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768ac9c8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x5637768ac9a8 <col:26, col:30> 'int'
    |   |     `-BinaryOperator 0x5637768ac940 <lcode.c:49:33, col:40> 'int' '-'
    |   |       |-BinaryOperator 0x5637768ac8f8 <col:33, col:38> 'int' '+'
    |   |       | |-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
    |   |       | `-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
    |   |       |   `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
    |   |       `-IntegerLiteral 0x5637768ac920 <col:40> 'int' 1
    |   `-ParenExpr 0x5637768acb48 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768acb20 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5637768acae0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5637768acab8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5637768aca78 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5637768aca50 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5637768aca98 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5637768acb00 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768ace70 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768ace48 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768accd0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768accb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768acc90 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768acc68 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768acc28 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768acc08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768acc48 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768ace28 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768ace00 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768acdc0 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768acd98 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768acd58 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768acd30 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768acd78 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768acde0 <line:37:17> 'int' 9
([B3.20]) | ([B3.51])
  53: DeclRefExpr 0x5637768ac3f8 <lcode.c:49:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
previous
  54: ImplicitCastExpr 0x5637768ac420 <lcode.c:49:23> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768ac3f8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
[B3.53] (ImplicitCastExpr, LValueToRValue, Instruction *)
  55: UnaryOperator 0x5637768ac438 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768ac420 <col:23> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ac3f8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
*[B3.54]
  56: BinaryOperator 0x5637768acf20 <./lopcodes.h:89:24, line:90:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768ac458 <line:89:24, col:26> 'Instruction':'unsigned int' lvalue
| `-UnaryOperator 0x5637768ac438 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
|   `-ImplicitCastExpr 0x5637768ac420 <col:23> 'Instruction *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768ac3f8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
`-ParenExpr 0x5637768acf00 <./lopcodes.h:89:30, line:90:54> 'unsigned int'
  `-BinaryOperator 0x5637768aced8 <line:89:31, line:90:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768ac858 <line:89:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768ac830 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768ac818 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768ac4d8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-UnaryOperator 0x5637768ac4b8 <lcode.c:49:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5637768ac4a0 <col:23> 'Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768ac478 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
    |   `-ParenExpr 0x5637768ac7f8 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768ac7d8 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768ac7b8 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768ac790 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768ac618 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768ac5f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768ac5d8 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768ac5b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768ac570 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768ac550 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768ac528 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768ac4f8 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768ac590 <line:38:17> 'int' 9
    |           `-ParenExpr 0x5637768ac770 <line:47:16, col:31> 'int'
    |             `-BinaryOperator 0x5637768ac748 <line:46:16, line:37:17> 'int' '+'
    |               |-ParenExpr 0x5637768ac708 <line:46:16, col:31> 'int'
    |               | `-BinaryOperator 0x5637768ac6e0 <line:45:16, line:40:17> 'int' '+'
    |               |   |-ParenExpr 0x5637768ac6a0 <line:45:16, col:33> 'int'
    |               |   | `-BinaryOperator 0x5637768ac678 <line:44:17, line:42:18> 'int' '+'
    |               |   |   |-IntegerLiteral 0x5637768ac638 <line:44:17> 'int' 0
    |               |   |   `-IntegerLiteral 0x5637768ac658 <line:42:18> 'int' 6
    |               |   `-IntegerLiteral 0x5637768ac6c0 <line:40:17> 'int' 8
    |               `-IntegerLiteral 0x5637768ac728 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768aceb8 <line:90:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768ace90 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768acb90 <line:90:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768acb68 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768ac9f0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768ac9c8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x5637768ac9a8 <col:26, col:30> 'int'
        |   |     `-BinaryOperator 0x5637768ac940 <lcode.c:49:33, col:40> 'int' '-'
        |   |       |-BinaryOperator 0x5637768ac8f8 <col:33, col:38> 'int' '+'
        |   |       | |-ImplicitCastExpr 0x5637768ac8c8 <col:33> 'int' <LValueToRValue>
        |   |       | | `-DeclRefExpr 0x5637768ac878 <col:33> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
        |   |       | `-ImplicitCastExpr 0x5637768ac8e0 <col:38> 'int' <LValueToRValue>
        |   |       |   `-DeclRefExpr 0x5637768ac8a0 <col:38> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
        |   |       `-IntegerLiteral 0x5637768ac920 <col:40> 'int' 1
        |   `-ParenExpr 0x5637768acb48 <./lopcodes.h:47:16, col:31> 'int'
        |     `-BinaryOperator 0x5637768acb20 <line:46:16, line:37:17> 'int' '+'
        |       |-ParenExpr 0x5637768acae0 <line:46:16, col:31> 'int'
        |       | `-BinaryOperator 0x5637768acab8 <line:45:16, line:40:17> 'int' '+'
        |       |   |-ParenExpr 0x5637768aca78 <line:45:16, col:33> 'int'
        |       |   | `-BinaryOperator 0x5637768aca50 <line:44:17, line:42:18> 'int' '+'
        |       |   |   |-IntegerLiteral 0x5637768aca10 <line:44:17> 'int' 0
        |       |   |   `-IntegerLiteral 0x5637768aca30 <line:42:18> 'int' 6
        |       |   `-IntegerLiteral 0x5637768aca98 <line:40:17> 'int' 8
        |       `-IntegerLiteral 0x5637768acb00 <line:37:17> 'int' 9
        `-ParenExpr 0x5637768ace70 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768ace48 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768accd0 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768accb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768acc90 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768acc68 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768acc28 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768acc08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768acbe0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768acbb0 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768acc48 <line:38:17> 'int' 9
            `-ParenExpr 0x5637768ace28 <line:47:16, col:31> 'int'
              `-BinaryOperator 0x5637768ace00 <line:46:16, line:37:17> 'int' '+'
                |-ParenExpr 0x5637768acdc0 <line:46:16, col:31> 'int'
                | `-BinaryOperator 0x5637768acd98 <line:45:16, line:40:17> 'int' '+'
                |   |-ParenExpr 0x5637768acd58 <line:45:16, col:33> 'int'
                |   | `-BinaryOperator 0x5637768acd30 <line:44:17, line:42:18> 'int' '+'
                |   |   |-IntegerLiteral 0x5637768accf0 <line:44:17> 'int' 0
                |   |   `-IntegerLiteral 0x5637768acd10 <line:42:18> 'int' 6
                |   `-IntegerLiteral 0x5637768acd78 <line:40:17> 'int' 8
                `-IntegerLiteral 0x5637768acde0 <line:37:17> 'int' 9
([B3.55]) = ([B3.52])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x5637768ac2a0 <lcode.c:48:15> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
   2: ImplicitCastExpr 0x5637768ac2f0 <lcode.c:48:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ac2a0 <col:15> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768ac2c8 <lcode.c:48:20> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
n
   4: ImplicitCastExpr 0x5637768ac308 <lcode.c:48:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ac2c8 <col:20> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5637768ac320 <lcode.c:48:15, col:20> 'int' '+'
|-ImplicitCastExpr 0x5637768ac2f0 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ac2a0 <col:15> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
`-ImplicitCastExpr 0x5637768ac308 <col:20> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768ac2c8 <col:20> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
[B4.2] + [B4.4]
   6: IntegerLiteral 0x5637768ac348 <lcode.c:48:22> 'int' 1
1
   7: BinaryOperator 0x5637768ac368 <lcode.c:48:15, col:22> 'int' '-'
|-BinaryOperator 0x5637768ac320 <col:15, col:20> 'int' '+'
| |-ImplicitCastExpr 0x5637768ac2f0 <col:15> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x5637768ac2a0 <col:15> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
| `-ImplicitCastExpr 0x5637768ac308 <col:20> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5637768ac2c8 <col:20> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
`-IntegerLiteral 0x5637768ac348 <col:22> 'int' 1
[B4.5] - [B4.6]
   8: DeclRefExpr 0x5637768ac390 <lcode.c:48:26> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
pto
   9: ImplicitCastExpr 0x5637768ac3b8 <lcode.c:48:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ac390 <col:26> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: BinaryOperator 0x5637768ac3d0 <lcode.c:48:15, col:26> 'int' '>'
|-BinaryOperator 0x5637768ac368 <col:15, col:22> 'int' '-'
| |-BinaryOperator 0x5637768ac320 <col:15, col:20> 'int' '+'
| | |-ImplicitCastExpr 0x5637768ac2f0 <col:15> 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x5637768ac2a0 <col:15> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
| | `-ImplicitCastExpr 0x5637768ac308 <col:20> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5637768ac2c8 <col:20> 'int' lvalue ParmVar 0x5637768a98b0 'n' 'int'
| `-IntegerLiteral 0x5637768ac348 <col:22> 'int' 1
`-ImplicitCastExpr 0x5637768ac3b8 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768ac390 <col:26> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
[B4.7] > [B4.9]
   T: if [B4.10]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x5637768aaf78 <lcode.c:47:30> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
   2: ImplicitCastExpr 0x5637768ac238 <lcode.c:47:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aaf78 <col:30> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768aafa0 <lcode.c:47:38> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
pto
   4: ImplicitCastExpr 0x5637768aafe8 <lcode.c:47:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aafa0 <col:38> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
[B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5637768aafc8 <lcode.c:47:42> 'int' 1
1
   6: BinaryOperator 0x5637768ac210 <lcode.c:47:38, col:42> 'int' '+'
|-ImplicitCastExpr 0x5637768aafe8 <col:38> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768aafa0 <col:38> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
`-IntegerLiteral 0x5637768aafc8 <col:42> 'int' 1
[B5.4] + [B5.5]
   7: BinaryOperator 0x5637768ac250 <lcode.c:47:30, col:42> 'int' '<='
|-ImplicitCastExpr 0x5637768ac238 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768aaf78 <col:30> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
`-BinaryOperator 0x5637768ac210 <col:38, col:42> 'int' '+'
  |-ImplicitCastExpr 0x5637768aafe8 <col:38> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768aafa0 <col:38> 'int' lvalue Var 0x5637768aa980 'pto' 'int'
  `-IntegerLiteral 0x5637768aafc8 <col:42> 'int' 1
[B5.2] <= [B5.6]
   T: if [B6.47] && [B5.7]
   Preds (1): B6
   Succs (2): B4 B1

 [B6]
   1: DeclRefExpr 0x5637768aa548 <lcode.c:45:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
previous
   2: ImplicitCastExpr 0x5637768aa570 <lcode.c:45:31> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
[B6.1] (ImplicitCastExpr, LValueToRValue, Instruction *)
   3: UnaryOperator 0x5637768aa588 <lcode.c:45:30, col:31> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768aa570 <col:31> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
*[B6.2]
   4: ImplicitCastExpr 0x5637768aa650 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768aa5a8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-UnaryOperator 0x5637768aa588 <lcode.c:45:30, col:31> 'Instruction':'unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768aa570 <col:31> 'Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
([B6.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5637768aa5c8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5637768aa5e8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5637768aa608 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768aa5c8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768aa5e8 <line:42:18> 'int' 6
[B6.5] + [B6.6]
   8: BinaryOperator 0x5637768aa668 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768aa650 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768aa5a8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-UnaryOperator 0x5637768aa588 <lcode.c:45:30, col:31> 'Instruction':'unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5637768aa570 <col:31> 'Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
`-ParenExpr 0x5637768aa630 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768aa608 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768aa5c8 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768aa5e8 <line:42:18> 'int' 6
[B6.4] >> ([B6.7])
   9: IntegerLiteral 0x5637768aa6b0 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x5637768aa6e0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
(Instruction)[B6.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x5637768aa708 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
~[B6.10]
  12: IntegerLiteral 0x5637768aa748 <./lopcodes.h:40:17> 'int' 8
8
  13: BinaryOperator 0x5637768aa768 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768aa728 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768aa708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
`-IntegerLiteral 0x5637768aa748 <line:40:17> 'int' 8
([B6.11]) << [B6.12]
  14: UnaryOperator 0x5637768aa7b0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768aa790 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768aa768 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768aa728 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768aa708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768aa748 <line:40:17> 'int' 8
~([B6.13])
  15: IntegerLiteral 0x5637768aa7f0 <./lopcodes.h:84:60> 'int' 0
0
  16: BinaryOperator 0x5637768aa810 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768aa7d0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768aa7b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768aa790 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768aa768 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768aa728 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768aa708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768aa748 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768aa7f0 <line:84:60> 'int' 0
([B6.14]) << [B6.15]
  17: BinaryOperator 0x5637768aa858 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768aa690 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768aa668 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768aa650 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768aa5a8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-UnaryOperator 0x5637768aa588 <lcode.c:45:30, col:31> 'Instruction':'unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5637768aa570 <col:31> 'Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
|   `-ParenExpr 0x5637768aa630 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5637768aa608 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5637768aa5c8 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5637768aa5e8 <line:42:18> 'int' 6
`-ParenExpr 0x5637768aa838 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768aa810 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768aa7d0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768aa7b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768aa790 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768aa768 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768aa728 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768aa708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768aa748 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768aa7f0 <line:84:60> 'int' 0
([B6.8]) & ([B6.16])
  18: CStyleCastExpr 0x5637768aa8e8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5637768aa8c8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768aa858 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768aa690 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768aa668 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768aa650 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768aa5a8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-UnaryOperator 0x5637768aa588 <lcode.c:45:30, col:31> 'Instruction':'unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5637768aa570 <col:31> 'Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
    |   `-ParenExpr 0x5637768aa630 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5637768aa608 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5637768aa5c8 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5637768aa5e8 <line:42:18> 'int' 6
    `-ParenExpr 0x5637768aa838 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768aa810 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768aa7d0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768aa7b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768aa790 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768aa768 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768aa728 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768aa708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768aa748 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768aa7f0 <line:84:60> 'int' 0
(int)([B6.17]) (CStyleCastExpr, IntegralCast, int)
  19: DeclStmt 0x5637768aa950 <lcode.c:45:9, col:40>col:13
`-VarDecl 0x5637768aa4e8 <col:9, ./lopcodes.h:84:63> lcode.c:45:13 used pfrom 'int' cinit
  `-ParenExpr 0x5637768aa930 <./lopcodes.h:84:21, col:63> 'int'
    `-ParenExpr 0x5637768aa910 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5637768aa8e8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5637768aa8c8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5637768aa858 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5637768aa690 <line:84:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5637768aa668 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5637768aa650 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5637768aa5a8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-UnaryOperator 0x5637768aa588 <lcode.c:45:30, col:31> 'Instruction':'unsigned int' lvalue prefix '*'
            |   |     `-ImplicitCastExpr 0x5637768aa570 <col:31> 'Instruction *' <LValueToRValue>
            |   |       `-DeclRefExpr 0x5637768aa548 <col:31> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
            |   `-ParenExpr 0x5637768aa630 <./lopcodes.h:45:16, col:33> 'int'
            |     `-BinaryOperator 0x5637768aa608 <line:44:17, line:42:18> 'int' '+'
            |       |-IntegerLiteral 0x5637768aa5c8 <line:44:17> 'int' 0
            |       `-IntegerLiteral 0x5637768aa5e8 <line:42:18> 'int' 6
            `-ParenExpr 0x5637768aa838 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5637768aa810 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5637768aa7d0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5637768aa7b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5637768aa790 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5637768aa768 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5637768aa728 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5637768aa708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5637768aa6e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5637768aa6b0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5637768aa748 <line:40:17> 'int' 8
                `-IntegerLiteral 0x5637768aa7f0 <line:84:60> 'int' 0
int pfrom = (((int)(((*previous) >> (0 + 6)) & ((~((~(Instruction)0) << 8)) << 0))));
  20: DeclRefExpr 0x5637768aa9e0 <lcode.c:46:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
previous
  21: ImplicitCastExpr 0x5637768aaa08 <lcode.c:46:29> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
[B6.20] (ImplicitCastExpr, LValueToRValue, Instruction *)
  22: UnaryOperator 0x5637768aaa20 <lcode.c:46:28, col:29> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768aaa08 <col:29> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
*[B6.21]
  23: ImplicitCastExpr 0x5637768aabb8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768aaa40 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-UnaryOperator 0x5637768aaa20 <lcode.c:46:28, col:29> 'Instruction':'unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768aaa08 <col:29> 'Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
([B6.22]) (ImplicitCastExpr, LValueToRValue, Instruction)
  24: IntegerLiteral 0x5637768aaa60 <./lopcodes.h:44:17> 'int' 0
0
  25: IntegerLiteral 0x5637768aaa80 <./lopcodes.h:42:18> 'int' 6
6
  26: BinaryOperator 0x5637768aaaa0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
[B6.24] + [B6.25]
  27: IntegerLiteral 0x5637768aaae8 <./lopcodes.h:40:17> 'int' 8
8
  28: BinaryOperator 0x5637768aab08 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768aaac8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768aaaa0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768aaae8 <line:40:17> 'int' 8
([B6.26]) + [B6.27]
  29: IntegerLiteral 0x5637768aab50 <./lopcodes.h:37:17> 'int' 9
9
  30: BinaryOperator 0x5637768aab70 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768aab30 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768aab08 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768aaac8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768aaaa0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768aaae8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768aab50 <line:37:17> 'int' 9
([B6.28]) + [B6.29]
  31: BinaryOperator 0x5637768aabd0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768aabb8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768aaa40 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-UnaryOperator 0x5637768aaa20 <lcode.c:46:28, col:29> 'Instruction':'unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5637768aaa08 <col:29> 'Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
`-ParenExpr 0x5637768aab98 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768aab70 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768aab30 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768aab08 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768aaac8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768aaaa0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768aaae8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768aab50 <line:37:17> 'int' 9
[B6.23] >> ([B6.30])
  32: IntegerLiteral 0x5637768aac18 <./lopcodes.h:71:39> 'int' 0
0
  33: CStyleCastExpr 0x5637768aac48 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
(Instruction)[B6.32] (CStyleCastExpr, IntegralCast, Instruction)
  34: UnaryOperator 0x5637768aac70 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
~[B6.33]
  35: IntegerLiteral 0x5637768aacb0 <./lopcodes.h:38:17> 'int' 9
9
  36: BinaryOperator 0x5637768aacd0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768aac90 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768aac70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
`-IntegerLiteral 0x5637768aacb0 <line:38:17> 'int' 9
([B6.34]) << [B6.35]
  37: UnaryOperator 0x5637768aad18 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768aacf8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768aacd0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768aac90 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768aac70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768aacb0 <line:38:17> 'int' 9
~([B6.36])
  38: IntegerLiteral 0x5637768aad58 <./lopcodes.h:88:60> 'int' 0
0
  39: BinaryOperator 0x5637768aad78 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768aad38 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768aad18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768aacf8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768aacd0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768aac90 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768aac70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768aacb0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768aad58 <line:88:60> 'int' 0
([B6.37]) << [B6.38]
  40: BinaryOperator 0x5637768aadc0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768aabf8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768aabd0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768aabb8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768aaa40 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-UnaryOperator 0x5637768aaa20 <lcode.c:46:28, col:29> 'Instruction':'unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5637768aaa08 <col:29> 'Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
|   `-ParenExpr 0x5637768aab98 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5637768aab70 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5637768aab30 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5637768aab08 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5637768aaac8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5637768aaaa0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5637768aaae8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5637768aab50 <line:37:17> 'int' 9
`-ParenExpr 0x5637768aada0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768aad78 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768aad38 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768aad18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768aacf8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768aacd0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768aac90 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768aac70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768aacb0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768aad58 <line:88:60> 'int' 0
([B6.31]) & ([B6.39])
  41: CStyleCastExpr 0x5637768aae50 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5637768aae30 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768aadc0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768aabf8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768aabd0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768aabb8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768aaa40 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-UnaryOperator 0x5637768aaa20 <lcode.c:46:28, col:29> 'Instruction':'unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5637768aaa08 <col:29> 'Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
    |   `-ParenExpr 0x5637768aab98 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768aab70 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5637768aab30 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5637768aab08 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5637768aaac8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5637768aaaa0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5637768aaae8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5637768aab50 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768aada0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768aad78 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768aad38 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768aad18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768aacf8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768aacd0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768aac90 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768aac70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768aacb0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5637768aad58 <line:88:60> 'int' 0
(int)([B6.40]) (CStyleCastExpr, IntegralCast, int)
  42: DeclStmt 0x5637768aaeb8 <lcode.c:46:9, col:38>col:13
`-VarDecl 0x5637768aa980 <col:9, ./lopcodes.h:88:63> lcode.c:46:13 used pto 'int' cinit
  `-ParenExpr 0x5637768aae98 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5637768aae78 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5637768aae50 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5637768aae30 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5637768aadc0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5637768aabf8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5637768aabd0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5637768aabb8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5637768aaa40 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-UnaryOperator 0x5637768aaa20 <lcode.c:46:28, col:29> 'Instruction':'unsigned int' lvalue prefix '*'
            |   |     `-ImplicitCastExpr 0x5637768aaa08 <col:29> 'Instruction *' <LValueToRValue>
            |   |       `-DeclRefExpr 0x5637768aa9e0 <col:29> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
            |   `-ParenExpr 0x5637768aab98 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5637768aab70 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5637768aab30 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5637768aab08 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5637768aaac8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5637768aaaa0 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5637768aaa60 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5637768aaa80 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5637768aaae8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5637768aab50 <line:37:17> 'int' 9
            `-ParenExpr 0x5637768aada0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5637768aad78 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5637768aad38 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5637768aad18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5637768aacf8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5637768aacd0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5637768aac90 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5637768aac70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5637768aac48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5637768aac18 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5637768aacb0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5637768aad58 <line:88:60> 'int' 0
int pto = (((int)(((*previous) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  43: DeclRefExpr 0x5637768aaed0 <lcode.c:47:13> 'int' lvalue Var 0x5637768aa4e8 'pfrom' 'int'
pfrom
  44: ImplicitCastExpr 0x5637768aaf20 <lcode.c:47:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aaed0 <col:13> 'int' lvalue Var 0x5637768aa4e8 'pfrom' 'int'
[B6.43] (ImplicitCastExpr, LValueToRValue, int)
  45: DeclRefExpr 0x5637768aaef8 <lcode.c:47:22> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
  46: ImplicitCastExpr 0x5637768aaf38 <lcode.c:47:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aaef8 <col:22> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B6.45] (ImplicitCastExpr, LValueToRValue, int)
  47: BinaryOperator 0x5637768aaf50 <lcode.c:47:13, col:22> 'int' '<='
|-ImplicitCastExpr 0x5637768aaf20 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768aaed0 <col:13> 'int' lvalue Var 0x5637768aa4e8 'pfrom' 'int'
`-ImplicitCastExpr 0x5637768aaf38 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768aaef8 <col:22> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B6.44] <= [B6.46]
   T: [B6.47] && ...
   Preds (1): B7
   Succs (2): B5 B1

 [B7]
   1: DeclRefExpr 0x5637768a9e90 <lcode.c:43:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768a9eb8 <lcode.c:43:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768a9ed0 <lcode.c:43:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.2]->f
   4: ImplicitCastExpr 0x5637768a9f08 <lcode.c:43:19, col:23> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768a9ed0 <col:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768a9f20 <lcode.c:43:19, col:26> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768a9f08 <col:19, col:23> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768a9ed0 <col:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.4]->code
   6: ImplicitCastExpr 0x5637768aa030 <lcode.c:43:19, col:26> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768a9f20 <col:19, col:26> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768a9f08 <col:19, col:23> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768a9ed0 <col:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768a9f58 <lcode.c:43:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   8: ImplicitCastExpr 0x5637768a9f80 <lcode.c:43:31> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.7] (ImplicitCastExpr, LValueToRValue, FuncState *)
   9: MemberExpr 0x5637768a9f98 <lcode.c:43:31, col:35> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768a9f80 <col:31> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.8]->pc
  10: ImplicitCastExpr 0x5637768a9ff0 <lcode.c:43:31, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x5637768a9f98 <col:31, col:35> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768a9f80 <col:31> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x5637768a9fd0 <lcode.c:43:38> 'int' 1
1
  12: BinaryOperator 0x5637768aa008 <lcode.c:43:31, col:38> 'int' '-'
|-ImplicitCastExpr 0x5637768a9ff0 <col:31, col:35> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768a9f98 <col:31, col:35> 'int' lvalue ->pc 0x56377687e130
|   `-ImplicitCastExpr 0x5637768a9f80 <col:31> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
`-IntegerLiteral 0x5637768a9fd0 <col:38> 'int' 1
[B7.10] - [B7.11]
  13: ArraySubscriptExpr 0x5637768aa048 <lcode.c:43:19, col:39> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768aa030 <col:19, col:26> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768a9f20 <col:19, col:26> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768a9f08 <col:19, col:23> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768a9ed0 <col:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
`-BinaryOperator 0x5637768aa008 <col:31, col:38> 'int' '-'
  |-ImplicitCastExpr 0x5637768a9ff0 <col:31, col:35> 'int' <LValueToRValue>
  | `-MemberExpr 0x5637768a9f98 <col:31, col:35> 'int' lvalue ->pc 0x56377687e130
  |   `-ImplicitCastExpr 0x5637768a9f80 <col:31> 'FuncState *' <LValueToRValue>
  |     `-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
  `-IntegerLiteral 0x5637768a9fd0 <col:38> 'int' 1
[B7.6][[B7.12]]
  14: UnaryOperator 0x5637768aa070 <lcode.c:43:18, col:39> 'Instruction *' prefix '&'
`-ArraySubscriptExpr 0x5637768aa048 <col:19, col:39> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x5637768aa030 <col:19, col:26> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x5637768a9f20 <col:19, col:26> 'Instruction *' lvalue ->code 0x563776857e38
  |   `-ImplicitCastExpr 0x5637768a9f08 <col:19, col:23> 'Proto *' <LValueToRValue>
  |     `-MemberExpr 0x5637768a9ed0 <col:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
  |       `-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
  |         `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
  `-BinaryOperator 0x5637768aa008 <col:31, col:38> 'int' '-'
    |-ImplicitCastExpr 0x5637768a9ff0 <col:31, col:35> 'int' <LValueToRValue>
    | `-MemberExpr 0x5637768a9f98 <col:31, col:35> 'int' lvalue ->pc 0x56377687e130
    |   `-ImplicitCastExpr 0x5637768a9f80 <col:31> 'FuncState *' <LValueToRValue>
    |     `-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
    `-IntegerLiteral 0x5637768a9fd0 <col:38> 'int' 1
&[B7.13]
  15: DeclRefExpr 0x5637768a9e68 <lcode.c:43:7> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
previous
  16: BinaryOperator 0x5637768aa090 <lcode.c:43:7, col:39> 'Instruction *' '='
|-DeclRefExpr 0x5637768a9e68 <col:7> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
`-UnaryOperator 0x5637768aa070 <col:18, col:39> 'Instruction *' prefix '&'
  `-ArraySubscriptExpr 0x5637768aa048 <col:19, col:39> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x5637768aa030 <col:19, col:26> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x5637768a9f20 <col:19, col:26> 'Instruction *' lvalue ->code 0x563776857e38
    |   `-ImplicitCastExpr 0x5637768a9f08 <col:19, col:23> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x5637768a9ed0 <col:19, col:23> 'Proto *' lvalue ->f 0x56377687ddb8
    |       `-ImplicitCastExpr 0x5637768a9eb8 <col:19> 'FuncState *' <LValueToRValue>
    |         `-DeclRefExpr 0x5637768a9e90 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
    `-BinaryOperator 0x5637768aa008 <col:31, col:38> 'int' '-'
      |-ImplicitCastExpr 0x5637768a9ff0 <col:31, col:35> 'int' <LValueToRValue>
      | `-MemberExpr 0x5637768a9f98 <col:31, col:35> 'int' lvalue ->pc 0x56377687e130
      |   `-ImplicitCastExpr 0x5637768a9f80 <col:31> 'FuncState *' <LValueToRValue>
      |     `-DeclRefExpr 0x5637768a9f58 <col:31> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
      `-IntegerLiteral 0x5637768a9fd0 <col:38> 'int' 1
[B7.15] = [B7.14]
  17: DeclRefExpr 0x5637768aa0b8 <lcode.c:44:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
previous
  18: ImplicitCastExpr 0x5637768aa0e0 <lcode.c:44:23> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
[B7.17] (ImplicitCastExpr, LValueToRValue, Instruction *)
  19: UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
*[B7.18]
  20: ImplicitCastExpr 0x5637768aa158 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768aa118 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
([B7.19]) (ImplicitCastExpr, LValueToRValue, Instruction)
  21: IntegerLiteral 0x5637768aa138 <./lopcodes.h:44:17> 'int' 0
0
  22: BinaryOperator 0x5637768aa170 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768aa158 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768aa118 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
`-IntegerLiteral 0x5637768aa138 <./lopcodes.h:44:17> 'int' 0
[B7.20] >> [B7.21]
  23: IntegerLiteral 0x5637768aa1b8 <./lopcodes.h:71:39> 'int' 0
0
  24: CStyleCastExpr 0x5637768aa1e8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
(Instruction)[B7.23] (CStyleCastExpr, IntegralCast, Instruction)
  25: UnaryOperator 0x5637768aa210 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
~[B7.24]
  26: IntegerLiteral 0x5637768aa250 <./lopcodes.h:42:18> 'int' 6
6
  27: BinaryOperator 0x5637768aa270 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
`-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
([B7.25]) << [B7.26]
  28: UnaryOperator 0x5637768aa2b8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768aa298 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768aa270 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
~([B7.27])
  29: IntegerLiteral 0x5637768aa2f8 <./lopcodes.h:80:67> 'int' 0
0
  30: BinaryOperator 0x5637768aa318 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768aa2d8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768aa2b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768aa298 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768aa270 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768aa2f8 <line:80:67> 'int' 0
([B7.28]) << [B7.29]
  31: BinaryOperator 0x5637768aa360 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768aa198 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768aa170 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768aa158 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768aa118 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
|   `-IntegerLiteral 0x5637768aa138 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768aa340 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768aa318 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768aa2d8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768aa2b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768aa298 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768aa270 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768aa2f8 <line:80:67> 'int' 0
([B7.22]) & ([B7.30])
  32: CStyleCastExpr 0x5637768aa3e8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5637768aa3c8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768aa360 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768aa198 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768aa170 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768aa158 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768aa118 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
    |   `-IntegerLiteral 0x5637768aa138 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5637768aa340 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768aa318 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768aa2d8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768aa2b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768aa298 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768aa270 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768aa2f8 <line:80:67> 'int' 0
(OpCode)([B7.31]) (CStyleCastExpr, IntegralCast, OpCode)
  33: ImplicitCastExpr 0x5637768aa478 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768aa430 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5637768aa410 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5637768aa3e8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5637768aa3c8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5637768aa360 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5637768aa198 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5637768aa170 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5637768aa158 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5637768aa118 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
          |   |     `-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
          |   |       `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
          |   `-IntegerLiteral 0x5637768aa138 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5637768aa340 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5637768aa318 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5637768aa2d8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5637768aa2b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5637768aa298 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5637768aa270 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5637768aa2f8 <line:80:67> 'int' 0
(([B7.32])) (ImplicitCastExpr, IntegralCast, unsigned int)
  34: DeclRefExpr 0x5637768aa450 <lcode.c:44:36> 'int' EnumConstant 0x56377686b5b8 'OP_LOADNIL' 'int'
OP_LOADNIL
  35: ImplicitCastExpr 0x5637768aa490 <lcode.c:44:36> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768aa450 <col:36> 'int' EnumConstant 0x56377686b5b8 'OP_LOADNIL' 'int'
[B7.34] (ImplicitCastExpr, IntegralCast, unsigned int)
  36: BinaryOperator 0x5637768aa4a8 <./lopcodes.h:80:23, lcode.c:44:36> 'int' '=='
|-ImplicitCastExpr 0x5637768aa478 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x5637768aa430 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x5637768aa410 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x5637768aa3e8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x5637768aa3c8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5637768aa360 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5637768aa198 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5637768aa170 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5637768aa158 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5637768aa118 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-UnaryOperator 0x5637768aa0f8 <lcode.c:44:22, col:23> 'Instruction':'unsigned int' lvalue prefix '*'
|           |   |     `-ImplicitCastExpr 0x5637768aa0e0 <col:23> 'Instruction *' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x5637768aa0b8 <col:23> 'Instruction *' lvalue Var 0x5637768a9a58 'previous' 'Instruction *'
|           |   `-IntegerLiteral 0x5637768aa138 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x5637768aa340 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5637768aa318 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5637768aa2d8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5637768aa2b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5637768aa298 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5637768aa270 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5637768aa230 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5637768aa210 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5637768aa1e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5637768aa1b8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5637768aa250 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x5637768aa2f8 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x5637768aa490 <lcode.c:44:36> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768aa450 <col:36> 'int' EnumConstant 0x56377686b5b8 'OP_LOADNIL' 'int'
[B7.33] == [B7.35]
   T: if [B7.36]
   Preds (1): B10
   Succs (2): B6 B1

 [B8]
   1: ReturnStmt 0x5637768a9e00 <lcode.c:40:9>
return;
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: DeclRefExpr 0x5637768a9cf0 <lcode.c:39:11> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
from
   2: ImplicitCastExpr 0x5637768a9d90 <lcode.c:39:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768a9cf0 <col:11> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
[B9.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768a9d18 <lcode.c:39:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768a9d40 <lcode.c:39:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9d18 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: MemberExpr 0x5637768a9d58 <lcode.c:39:19, col:23> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
`-ImplicitCastExpr 0x5637768a9d40 <col:19> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9d18 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B9.4]->nactvar
   6: ImplicitCastExpr 0x5637768a9da8 <lcode.c:39:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5637768a9d58 <col:19, col:23> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
  `-ImplicitCastExpr 0x5637768a9d40 <col:19> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9d18 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B9.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x5637768a9dc0 <lcode.c:39:19, col:23> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5637768a9da8 <col:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5637768a9d58 <col:19, col:23> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
    `-ImplicitCastExpr 0x5637768a9d40 <col:19> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768a9d18 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B9.6] (ImplicitCastExpr, IntegralCast, int)
   8: BinaryOperator 0x5637768a9dd8 <lcode.c:39:11, col:23> 'int' '>='
|-ImplicitCastExpr 0x5637768a9d90 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768a9cf0 <col:11> 'int' lvalue ParmVar 0x5637768a9838 'from' 'int'
`-ImplicitCastExpr 0x5637768a9dc0 <col:19, col:23> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x5637768a9da8 <col:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x5637768a9d58 <col:19, col:23> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
      `-ImplicitCastExpr 0x5637768a9d40 <col:19> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768a9d18 <col:19> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B9.2] >= [B9.7]
   T: if [B9.8]
   Preds (1): B10
   Succs (2): B8 B1

 [B10]
   1: DeclRefExpr 0x5637768a9c18 <lcode.c:38:9> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768a9c40 <lcode.c:38:9> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9c18 <col:9> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B10.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768a9c58 <lcode.c:38:9, col:13> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768a9c40 <col:9> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9c18 <col:9> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B10.2]->pc
   4: ImplicitCastExpr 0x5637768a9cb0 <lcode.c:38:9, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x5637768a9c58 <col:9, col:13> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768a9c40 <col:9> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9c18 <col:9> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5637768a9c90 <lcode.c:38:19> 'int' 0
0
   6: BinaryOperator 0x5637768a9cc8 <lcode.c:38:9, col:19> 'int' '=='
|-ImplicitCastExpr 0x5637768a9cb0 <col:9, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768a9c58 <col:9, col:13> 'int' lvalue ->pc 0x56377687e130
|   `-ImplicitCastExpr 0x5637768a9c40 <col:9> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768a9c18 <col:9> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
`-IntegerLiteral 0x5637768a9c90 <col:19> 'int' 0
[B10.4] == [B10.5]
   T: if [B10.6]
   Preds (1): B11
   Succs (2): B9 B7

 [B11]
   1: DeclStmt 0x5637768a9ab8 <lcode.c:36:3, col:24>col:16
`-VarDecl 0x5637768a9a58 <col:3, col:16> col:16 used previous 'Instruction *'
Instruction *previous;
   2: DeclRefExpr 0x5637768a9ad0 <lcode.c:37:7> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   3: ImplicitCastExpr 0x5637768a9af8 <lcode.c:37:7> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9ad0 <col:7> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.2] (ImplicitCastExpr, LValueToRValue, FuncState *)
   4: MemberExpr 0x5637768a9b10 <lcode.c:37:7, col:11> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768a9af8 <col:7> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9ad0 <col:7> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.3]->pc
   5: ImplicitCastExpr 0x5637768a9bc0 <lcode.c:37:7, col:11> 'int' <LValueToRValue>
`-MemberExpr 0x5637768a9b10 <col:7, col:11> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768a9af8 <col:7> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9ad0 <col:7> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x5637768a9b48 <lcode.c:37:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x5637768a9b70 <lcode.c:37:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9b48 <col:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: MemberExpr 0x5637768a9b88 <lcode.c:37:16, col:20> 'int' lvalue ->lasttarget 0x56377687e1a8
`-ImplicitCastExpr 0x5637768a9b70 <col:16> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9b48 <col:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.7]->lasttarget
   9: ImplicitCastExpr 0x5637768a9bd8 <lcode.c:37:16, col:20> 'int' <LValueToRValue>
`-MemberExpr 0x5637768a9b88 <col:16, col:20> 'int' lvalue ->lasttarget 0x56377687e1a8
  `-ImplicitCastExpr 0x5637768a9b70 <col:16> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9b48 <col:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.8] (ImplicitCastExpr, LValueToRValue, int)
  10: BinaryOperator 0x5637768a9bf0 <lcode.c:37:7, col:20> 'int' '>'
|-ImplicitCastExpr 0x5637768a9bc0 <col:7, col:11> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768a9b10 <col:7, col:11> 'int' lvalue ->pc 0x56377687e130
|   `-ImplicitCastExpr 0x5637768a9af8 <col:7> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768a9ad0 <col:7> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768a9bd8 <col:16, col:20> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768a9b88 <col:16, col:20> 'int' lvalue ->lasttarget 0x56377687e1a8
    `-ImplicitCastExpr 0x5637768a9b70 <col:16> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768a9b48 <col:16> 'FuncState *' lvalue ParmVar 0x5637768a97c0 'fs' 'FuncState *'
[B11.5] > [B11.9]
   T: if [B11.10]
   Preds (1): B12
   Succs (2): B10 B1

 [B0 (EXIT)]
   Preds (3): B1 B2 B8
