static void exprstat(LexState *ls)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: IntegerLiteral 0x558fa8f3fd28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x558fa8f3fd60 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x558fa8f3fd28 <col:24> 'int' 0
(void *)[B1.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x558fa8f3fda8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'struct LHS_assign *' <NullToPointer>
`-ParenExpr 0x558fa8f3fd88 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x558fa8f3fd60 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x558fa8f3fd28 <col:24> 'int' 0
([B1.2]) (ImplicitCastExpr, NullToPointer, struct LHS_assign *)
   4: DeclRefExpr 0x558fa8f3fcc8 <lparser.c:1232:5> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
v
   5: MemberExpr 0x558fa8f3fcf0 <lparser.c:1232:5, col:7> 'struct LHS_assign *' lvalue .prev 0x558fa8f2adf0
`-DeclRefExpr 0x558fa8f3fcc8 <col:5> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B1.4].prev
   6: BinaryOperator 0x558fa8f3fdc0 <lparser.c:1232:5, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'struct LHS_assign *' '='
|-MemberExpr 0x558fa8f3fcf0 <lparser.c:1232:5, col:7> 'struct LHS_assign *' lvalue .prev 0x558fa8f2adf0
| `-DeclRefExpr 0x558fa8f3fcc8 <col:5> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
`-ImplicitCastExpr 0x558fa8f3fda8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'struct LHS_assign *' <NullToPointer>
  `-ParenExpr 0x558fa8f3fd88 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x558fa8f3fd60 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x558fa8f3fd28 <col:24> 'int' 0
[B1.5] = [B1.3]
   7: DeclRefExpr 0x558fa8f3fde8 <lparser.c:1233:5> 'void (LexState *, struct LHS_assign *, int)' Function 0x558fa8f2cba0 'assignment' 'void (LexState *, struct LHS_assign *, int)'
assignment
   8: ImplicitCastExpr 0x558fa8f3fea0 <lparser.c:1233:5> 'void (*)(LexState *, struct LHS_assign *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3fde8 <col:5> 'void (LexState *, struct LHS_assign *, int)' Function 0x558fa8f2cba0 'assignment' 'void (LexState *, struct LHS_assign *, int)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct LHS_assign *, int))
   9: DeclRefExpr 0x558fa8f3fe10 <lparser.c:1233:16> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x558fa8f3fef8 <lparser.c:1233:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3fe10 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: DeclRefExpr 0x558fa8f3fe38 <lparser.c:1233:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
v
  12: UnaryOperator 0x558fa8f3fe60 <lparser.c:1233:20, col:21> 'struct LHS_assign *' prefix '&'
`-DeclRefExpr 0x558fa8f3fe38 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
&[B1.11]
  13: IntegerLiteral 0x558fa8f3fe80 <lparser.c:1233:24> 'int' 1
1
  14: CallExpr 0x558fa8f3feb8 <lparser.c:1233:5, col:25> 'void'
|-ImplicitCastExpr 0x558fa8f3fea0 <col:5> 'void (*)(LexState *, struct LHS_assign *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3fde8 <col:5> 'void (LexState *, struct LHS_assign *, int)' Function 0x558fa8f2cba0 'assignment' 'void (LexState *, struct LHS_assign *, int)'
|-ImplicitCastExpr 0x558fa8f3fef8 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3fe10 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f3fe60 <col:20, col:21> 'struct LHS_assign *' prefix '&'
| `-DeclRefExpr 0x558fa8f3fe38 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
`-IntegerLiteral 0x558fa8f3fe80 <col:24> 'int' 1
[B1.8]([B1.10], [B1.12], [B1.13])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8f3f1e0 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
([B2.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x558fa8f3f1f8 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.2]->f
   4: ImplicitCastExpr 0x558fa8f3f230 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x558fa8f3f248 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.4]->code
   6: ImplicitCastExpr 0x558fa8f3f3c8 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f3f248 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x558fa8f3f280 <lparser.c:1230:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
v
   8: MemberExpr 0x558fa8f3f2a8 <lparser.c:1230:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.7].v
   9: UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
&[B2.8]
  10: MemberExpr 0x558fa8f3f320 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
  `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
    `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
      `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
([B2.9])->u
  11: MemberExpr 0x558fa8f3f358 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
    `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
      `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
        `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.10].s
  12: MemberExpr 0x558fa8f3f390 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
      `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
        `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
          `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.11].info
  13: ImplicitCastExpr 0x558fa8f3f3e0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3f390 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
  `-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
      `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
        `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
          `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
            `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: ArraySubscriptExpr 0x558fa8f3f3f8 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f3f3c8 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f3f248 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f3f3e0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f3f390 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
    `-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
      `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
        `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
          `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
            `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
              `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.6][[B2.13]]
  15: ImplicitCastExpr 0x558fa8f3f718 <./lopcodes.h:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x558fa8f3f440 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x558fa8f3f420 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x558fa8f3f3f8 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x558fa8f3f3c8 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x558fa8f3f248 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
      |   `-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
      |       `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x558fa8f3f3e0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x558fa8f3f390 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
          `-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
            `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
              `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
                `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
                  `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
                    `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
(([B2.14])) (ImplicitCastExpr, LValueToRValue, Instruction)
  16: IntegerLiteral 0x558fa8f3f460 <./lopcodes.h:71:39> 'int' 0
0
  17: CStyleCastExpr 0x558fa8f3f490 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
(Instruction)[B2.16] (CStyleCastExpr, IntegralCast, Instruction)
  18: UnaryOperator 0x558fa8f3f4b8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
~[B2.17]
  19: IntegerLiteral 0x558fa8f3f4f8 <./lopcodes.h:37:17> 'int' 9
9
  20: BinaryOperator 0x558fa8f3f518 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
([B2.18]) << [B2.19]
  21: UnaryOperator 0x558fa8f3f560 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f3f540 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f3f518 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
~([B2.20])
  22: IntegerLiteral 0x558fa8f3f5a0 <./lopcodes.h:44:17> 'int' 0
0
  23: IntegerLiteral 0x558fa8f3f5c0 <./lopcodes.h:42:18> 'int' 6
6
  24: BinaryOperator 0x558fa8f3f5e0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
[B2.22] + [B2.23]
  25: IntegerLiteral 0x558fa8f3f628 <./lopcodes.h:40:17> 'int' 8
8
  26: BinaryOperator 0x558fa8f3f648 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f3f608 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f3f5e0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f3f628 <line:40:17> 'int' 8
([B2.24]) + [B2.25]
  27: BinaryOperator 0x558fa8f3f690 <./lopcodes.h:71:21, line:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f3f580 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f3f560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f3f540 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f3f518 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
`-ParenExpr 0x558fa8f3f670 <line:46:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f3f648 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x558fa8f3f608 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x558fa8f3f5e0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f3f628 <line:40:17> 'int' 8
([B2.21]) << ([B2.26])
  28: UnaryOperator 0x558fa8f3f6d8 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f3f6b8 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f3f690 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f3f580 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f3f560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f3f540 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f3f518 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
    `-ParenExpr 0x558fa8f3f670 <line:46:16, col:31> 'int'
      `-BinaryOperator 0x558fa8f3f648 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x558fa8f3f608 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x558fa8f3f5e0 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
        `-IntegerLiteral 0x558fa8f3f628 <line:40:17> 'int' 8
~([B2.27])
  29: BinaryOperator 0x558fa8f3f730 <./lopcodes.h:93:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x558fa8f3f718 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x558fa8f3f440 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x558fa8f3f420 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x558fa8f3f3f8 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x558fa8f3f3c8 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x558fa8f3f248 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|       |   `-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       |       `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x558fa8f3f3e0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x558fa8f3f390 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
|           `-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|             `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|               `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
|                 `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
|                   `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
|                     `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
`-ParenExpr 0x558fa8f3f6f8 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x558fa8f3f6d8 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x558fa8f3f6b8 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f3f690 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f3f580 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f3f560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f3f540 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f3f518 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
        `-ParenExpr 0x558fa8f3f670 <line:46:16, col:31> 'int'
          `-BinaryOperator 0x558fa8f3f648 <line:45:16, line:40:17> 'int' '+'
            |-ParenExpr 0x558fa8f3f608 <line:45:16, col:33> 'int'
            | `-BinaryOperator 0x558fa8f3f5e0 <line:44:17, line:42:18> 'int' '+'
            |   |-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
            |   `-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
            `-IntegerLiteral 0x558fa8f3f628 <line:40:17> 'int' 8
[B2.15] & ([B2.28])
  30: IntegerLiteral 0x558fa8f3f778 <lparser.c:1230:33> 'int' 1
1
  31: CStyleCastExpr 0x558fa8f3f7f8 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x558fa8f3f7d8 <col:26, col:30> 'int'
  `-IntegerLiteral 0x558fa8f3f778 <lparser.c:1230:33> 'int' 1
(Instruction)([B2.30]) (CStyleCastExpr, IntegralCast, Instruction)
  32: IntegerLiteral 0x558fa8f3f840 <./lopcodes.h:44:17> 'int' 0
0
  33: IntegerLiteral 0x558fa8f3f860 <./lopcodes.h:42:18> 'int' 6
6
  34: BinaryOperator 0x558fa8f3f880 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f3f840 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f3f860 <line:42:18> 'int' 6
[B2.32] + [B2.33]
  35: IntegerLiteral 0x558fa8f3f8c8 <./lopcodes.h:40:17> 'int' 8
8
  36: BinaryOperator 0x558fa8f3f8e8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f3f8a8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f3f880 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f3f840 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f3f860 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f3f8c8 <line:40:17> 'int' 8
([B2.34]) + [B2.35]
  37: BinaryOperator 0x558fa8f3f930 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f3f820 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x558fa8f3f7f8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x558fa8f3f7d8 <col:26, col:30> 'int'
|     `-IntegerLiteral 0x558fa8f3f778 <lparser.c:1230:33> 'int' 1
`-ParenExpr 0x558fa8f3f910 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f3f8e8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x558fa8f3f8a8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x558fa8f3f880 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x558fa8f3f840 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x558fa8f3f860 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f3f8c8 <line:40:17> 'int' 8
([B2.31]) << ([B2.36])
  38: IntegerLiteral 0x558fa8f3f978 <./lopcodes.h:71:39> 'int' 0
0
  39: CStyleCastExpr 0x558fa8f3f9a8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
(Instruction)[B2.38] (CStyleCastExpr, IntegralCast, Instruction)
  40: UnaryOperator 0x558fa8f3f9d0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
~[B2.39]
  41: IntegerLiteral 0x558fa8f3fa10 <./lopcodes.h:37:17> 'int' 9
9
  42: BinaryOperator 0x558fa8f3fa30 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f3f9f0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f3f9d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f3fa10 <line:37:17> 'int' 9
([B2.40]) << [B2.41]
  43: UnaryOperator 0x558fa8f3fa78 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f3fa58 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f3fa30 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f3f9f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f3f9d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f3fa10 <line:37:17> 'int' 9
~([B2.42])
  44: IntegerLiteral 0x558fa8f3fab8 <./lopcodes.h:44:17> 'int' 0
0
  45: IntegerLiteral 0x558fa8f3fad8 <./lopcodes.h:42:18> 'int' 6
6
  46: BinaryOperator 0x558fa8f3faf8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f3fab8 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f3fad8 <line:42:18> 'int' 6
[B2.44] + [B2.45]
  47: IntegerLiteral 0x558fa8f3fb40 <./lopcodes.h:40:17> 'int' 8
8
  48: BinaryOperator 0x558fa8f3fb60 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f3fb20 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f3faf8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f3fab8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f3fad8 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f3fb40 <line:40:17> 'int' 8
([B2.46]) + [B2.47]
  49: BinaryOperator 0x558fa8f3fba8 <./lopcodes.h:71:21, line:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f3fa98 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f3fa78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f3fa58 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f3fa30 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f3f9f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f3f9d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f3fa10 <line:37:17> 'int' 9
`-ParenExpr 0x558fa8f3fb88 <line:46:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f3fb60 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x558fa8f3fb20 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x558fa8f3faf8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x558fa8f3fab8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x558fa8f3fad8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f3fb40 <line:40:17> 'int' 8
([B2.43]) << ([B2.48])
  50: BinaryOperator 0x558fa8f3fbf0 <./lopcodes.h:94:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x558fa8f3f958 <line:94:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x558fa8f3f930 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x558fa8f3f820 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x558fa8f3f7f8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x558fa8f3f7d8 <col:26, col:30> 'int'
|   |     `-IntegerLiteral 0x558fa8f3f778 <lparser.c:1230:33> 'int' 1
|   `-ParenExpr 0x558fa8f3f910 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x558fa8f3f8e8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x558fa8f3f8a8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x558fa8f3f880 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x558fa8f3f840 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x558fa8f3f860 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x558fa8f3f8c8 <line:40:17> 'int' 8
`-ParenExpr 0x558fa8f3fbd0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f3fba8 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f3fa98 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f3fa78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f3fa58 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f3fa30 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f3f9f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f3f9d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f3fa10 <line:37:17> 'int' 9
    `-ParenExpr 0x558fa8f3fb88 <line:46:16, col:31> 'int'
      `-BinaryOperator 0x558fa8f3fb60 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x558fa8f3fb20 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x558fa8f3faf8 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x558fa8f3fab8 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x558fa8f3fad8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x558fa8f3fb40 <line:40:17> 'int' 8
([B2.37]) & ([B2.49])
  51: BinaryOperator 0x558fa8f3fc38 <./lopcodes.h:93:31, line:94:53> 'unsigned int' '|'
|-ParenExpr 0x558fa8f3f758 <line:93:31, col:55> 'unsigned int'
| `-BinaryOperator 0x558fa8f3f730 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x558fa8f3f718 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x558fa8f3f440 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x558fa8f3f420 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x558fa8f3f3f8 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x558fa8f3f3c8 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x558fa8f3f248 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   |       |   `-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|   |       |       `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x558fa8f3f3e0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x558fa8f3f390 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
|   |           `-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|   |             `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|   |               `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
|   |                 `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
|   |                   `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
|   |                     `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
|   `-ParenExpr 0x558fa8f3f6f8 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x558fa8f3f6d8 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x558fa8f3f6b8 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x558fa8f3f690 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x558fa8f3f580 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x558fa8f3f560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x558fa8f3f540 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x558fa8f3f518 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
|           `-ParenExpr 0x558fa8f3f670 <line:46:16, col:31> 'int'
|             `-BinaryOperator 0x558fa8f3f648 <line:45:16, line:40:17> 'int' '+'
|               |-ParenExpr 0x558fa8f3f608 <line:45:16, col:33> 'int'
|               | `-BinaryOperator 0x558fa8f3f5e0 <line:44:17, line:42:18> 'int' '+'
|               |   |-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
|               |   `-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x558fa8f3f628 <line:40:17> 'int' 8
`-ParenExpr 0x558fa8f3fc18 <line:94:3, col:53> 'unsigned int'
  `-BinaryOperator 0x558fa8f3fbf0 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x558fa8f3f958 <line:94:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x558fa8f3f930 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x558fa8f3f820 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x558fa8f3f7f8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x558fa8f3f7d8 <col:26, col:30> 'int'
    |   |     `-IntegerLiteral 0x558fa8f3f778 <lparser.c:1230:33> 'int' 1
    |   `-ParenExpr 0x558fa8f3f910 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x558fa8f3f8e8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x558fa8f3f8a8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x558fa8f3f880 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x558fa8f3f840 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x558fa8f3f860 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x558fa8f3f8c8 <line:40:17> 'int' 8
    `-ParenExpr 0x558fa8f3fbd0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f3fba8 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f3fa98 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f3fa78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f3fa58 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f3fa30 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f3f9f0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f3f9d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f3fa10 <line:37:17> 'int' 9
        `-ParenExpr 0x558fa8f3fb88 <line:46:16, col:31> 'int'
          `-BinaryOperator 0x558fa8f3fb60 <line:45:16, line:40:17> 'int' '+'
            |-ParenExpr 0x558fa8f3fb20 <line:45:16, col:33> 'int'
            | `-BinaryOperator 0x558fa8f3faf8 <line:44:17, line:42:18> 'int' '+'
            |   |-IntegerLiteral 0x558fa8f3fab8 <line:44:17> 'int' 0
            |   `-IntegerLiteral 0x558fa8f3fad8 <line:42:18> 'int' 6
            `-IntegerLiteral 0x558fa8f3fb40 <line:40:17> 'int' 8
([B2.29]) | ([B2.50])
  52: DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
fs
  53: ImplicitCastExpr 0x558fa8f3ef18 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
([B2.52]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  54: MemberExpr 0x558fa8f3ef30 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f3ef18 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.53]->f
  55: ImplicitCastExpr 0x558fa8f3ef68 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f3ef30 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f3ef18 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.54] (ImplicitCastExpr, LValueToRValue, Proto *)
  56: MemberExpr 0x558fa8f3ef80 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f3ef68 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f3ef30 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f3ef18 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.55]->code
  57: ImplicitCastExpr 0x558fa8f3f100 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f3ef80 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f3ef68 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f3ef30 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f3ef18 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
[B2.56] (ImplicitCastExpr, LValueToRValue, Instruction *)
  58: DeclRefExpr 0x558fa8f3efb8 <lparser.c:1230:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
v
  59: MemberExpr 0x558fa8f3efe0 <lparser.c:1230:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.58].v
  60: UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
&[B2.59]
  61: MemberExpr 0x558fa8f3f058 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ParenExpr 0x558fa8f3f038 <col:38, col:40> 'expdesc *'
  `-UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
    `-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
      `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
([B2.60])->u
  62: MemberExpr 0x558fa8f3f090 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8f3f058 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ParenExpr 0x558fa8f3f038 <col:38, col:40> 'expdesc *'
    `-UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
      `-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
        `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.61].s
  63: MemberExpr 0x558fa8f3f0c8 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8f3f090 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8f3f058 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ParenExpr 0x558fa8f3f038 <col:38, col:40> 'expdesc *'
      `-UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
        `-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
          `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.62].info
  64: ImplicitCastExpr 0x558fa8f3f118 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3f0c8 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
  `-MemberExpr 0x558fa8f3f090 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    `-MemberExpr 0x558fa8f3f058 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
      `-ParenExpr 0x558fa8f3f038 <col:38, col:40> 'expdesc *'
        `-UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
          `-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
            `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.63] (ImplicitCastExpr, LValueToRValue, int)
  65: ArraySubscriptExpr 0x558fa8f3f130 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f3f100 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f3ef80 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f3ef68 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f3ef30 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f3ef18 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f3f118 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f3f0c8 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
    `-MemberExpr 0x558fa8f3f090 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
      `-MemberExpr 0x558fa8f3f058 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
        `-ParenExpr 0x558fa8f3f038 <col:38, col:40> 'expdesc *'
          `-UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
            `-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
              `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B2.57][[B2.64]]
  66: BinaryOperator 0x558fa8f3fc80 <./lopcodes.h:93:24, line:94:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x558fa8f3f178 <line:93:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x558fa8f3f158 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x558fa8f3f130 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x558fa8f3f100 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x558fa8f3ef80 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|     |   `-ImplicitCastExpr 0x558fa8f3ef68 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x558fa8f3ef30 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|     |       `-ImplicitCastExpr 0x558fa8f3ef18 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x558fa8f3eef8 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x558fa8f3eed0 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x558fa8f3f118 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x558fa8f3f0c8 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
|         `-MemberExpr 0x558fa8f3f090 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|           `-MemberExpr 0x558fa8f3f058 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|             `-ParenExpr 0x558fa8f3f038 <col:38, col:40> 'expdesc *'
|               `-UnaryOperator 0x558fa8f3f018 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
|                 `-MemberExpr 0x558fa8f3efe0 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
|                   `-DeclRefExpr 0x558fa8f3efb8 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
`-ParenExpr 0x558fa8f3fc60 <./lopcodes.h:93:30, line:94:54> 'unsigned int'
  `-BinaryOperator 0x558fa8f3fc38 <line:93:31, line:94:53> 'unsigned int' '|'
    |-ParenExpr 0x558fa8f3f758 <line:93:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x558fa8f3f730 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x558fa8f3f718 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x558fa8f3f440 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x558fa8f3f420 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x558fa8f3f3f8 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x558fa8f3f3c8 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x558fa8f3f248 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
    |   |       |   `-ImplicitCastExpr 0x558fa8f3f230 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x558fa8f3f1f8 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |   |       |       `-ImplicitCastExpr 0x558fa8f3f1e0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x558fa8f3f1c0 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x558fa8f3f198 <lparser.c:1230:22> 'FuncState *' lvalue Var 0x558fa8f3eac8 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x558fa8f3f3e0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x558fa8f3f390 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
    |   |           `-MemberExpr 0x558fa8f3f358 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    |   |             `-MemberExpr 0x558fa8f3f320 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    |   |               `-ParenExpr 0x558fa8f3f300 <col:38, col:40> 'expdesc *'
    |   |                 `-UnaryOperator 0x558fa8f3f2e0 <lparser.c:1230:26, col:29> 'expdesc *' prefix '&'
    |   |                   `-MemberExpr 0x558fa8f3f2a8 <col:27, col:29> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
    |   |                     `-DeclRefExpr 0x558fa8f3f280 <col:27> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
    |   `-ParenExpr 0x558fa8f3f6f8 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x558fa8f3f6d8 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x558fa8f3f6b8 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x558fa8f3f690 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x558fa8f3f580 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x558fa8f3f560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x558fa8f3f540 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x558fa8f3f518 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x558fa8f3f4d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x558fa8f3f4b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x558fa8f3f490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x558fa8f3f460 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x558fa8f3f4f8 <line:37:17> 'int' 9
    |           `-ParenExpr 0x558fa8f3f670 <line:46:16, col:31> 'int'
    |             `-BinaryOperator 0x558fa8f3f648 <line:45:16, line:40:17> 'int' '+'
    |               |-ParenExpr 0x558fa8f3f608 <line:45:16, col:33> 'int'
    |               | `-BinaryOperator 0x558fa8f3f5e0 <line:44:17, line:42:18> 'int' '+'
    |               |   |-IntegerLiteral 0x558fa8f3f5a0 <line:44:17> 'int' 0
    |               |   `-IntegerLiteral 0x558fa8f3f5c0 <line:42:18> 'int' 6
    |               `-IntegerLiteral 0x558fa8f3f628 <line:40:17> 'int' 8
    `-ParenExpr 0x558fa8f3fc18 <line:94:3, col:53> 'unsigned int'
      `-BinaryOperator 0x558fa8f3fbf0 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x558fa8f3f958 <line:94:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x558fa8f3f930 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x558fa8f3f820 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x558fa8f3f7f8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x558fa8f3f7d8 <col:26, col:30> 'int'
        |   |     `-IntegerLiteral 0x558fa8f3f778 <lparser.c:1230:33> 'int' 1
        |   `-ParenExpr 0x558fa8f3f910 <./lopcodes.h:46:16, col:31> 'int'
        |     `-BinaryOperator 0x558fa8f3f8e8 <line:45:16, line:40:17> 'int' '+'
        |       |-ParenExpr 0x558fa8f3f8a8 <line:45:16, col:33> 'int'
        |       | `-BinaryOperator 0x558fa8f3f880 <line:44:17, line:42:18> 'int' '+'
        |       |   |-IntegerLiteral 0x558fa8f3f840 <line:44:17> 'int' 0
        |       |   `-IntegerLiteral 0x558fa8f3f860 <line:42:18> 'int' 6
        |       `-IntegerLiteral 0x558fa8f3f8c8 <line:40:17> 'int' 8
        `-ParenExpr 0x558fa8f3fbd0 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x558fa8f3fba8 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x558fa8f3fa98 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x558fa8f3fa78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x558fa8f3fa58 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x558fa8f3fa30 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x558fa8f3f9f0 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x558fa8f3f9d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x558fa8f3f9a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x558fa8f3f978 <col:39> 'int' 0
            |       `-IntegerLiteral 0x558fa8f3fa10 <line:37:17> 'int' 9
            `-ParenExpr 0x558fa8f3fb88 <line:46:16, col:31> 'int'
              `-BinaryOperator 0x558fa8f3fb60 <line:45:16, line:40:17> 'int' '+'
                |-ParenExpr 0x558fa8f3fb20 <line:45:16, col:33> 'int'
                | `-BinaryOperator 0x558fa8f3faf8 <line:44:17, line:42:18> 'int' '+'
                |   |-IntegerLiteral 0x558fa8f3fab8 <line:44:17> 'int' 0
                |   `-IntegerLiteral 0x558fa8f3fad8 <line:42:18> 'int' 6
                `-IntegerLiteral 0x558fa8f3fb40 <line:40:17> 'int' 8
(([B2.65])) = ([B2.51])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x558fa8f3eb28 <lparser.c:1226:19> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f3eb50 <lparser.c:1226:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3eb28 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f3eb68 <lparser.c:1226:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f3eb50 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3eb28 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
[B3.2]->fs
   4: ImplicitCastExpr 0x558fa8f3eba0 <lparser.c:1226:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f3eb68 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f3eb50 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3eb28 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f3ebb8 <lparser.c:1226:3, col:25>col:14
`-VarDecl 0x558fa8f3eac8 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f3eba0 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f3eb68 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f3eb50 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f3eb28 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f3ec50 <lparser.c:1227:3, col:22>col:21
`-VarDecl 0x558fa8f3ebf0 <col:3, col:21> col:21 used v 'struct LHS_assign':'struct LHS_assign'
struct LHS_assign v;
   7: DeclRefExpr 0x558fa8f3ec68 <lparser.c:1228:3> 'void (LexState *, expdesc *)' Function 0x558fa8f223d8 'primaryexp' 'void (LexState *, expdesc *)'
primaryexp
   8: ImplicitCastExpr 0x558fa8f3ed38 <lparser.c:1228:3> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3ec68 <col:3> 'void (LexState *, expdesc *)' Function 0x558fa8f223d8 'primaryexp' 'void (LexState *, expdesc *)'
[B3.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   9: DeclRefExpr 0x558fa8f3ec90 <lparser.c:1228:14> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x558fa8f3ed88 <lparser.c:1228:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3ec90 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
[B3.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: DeclRefExpr 0x558fa8f3ecb8 <lparser.c:1228:19> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
v
  12: MemberExpr 0x558fa8f3ece0 <lparser.c:1228:19, col:21> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f3ecb8 <col:19> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B3.11].v
  13: UnaryOperator 0x558fa8f3ed18 <lparser.c:1228:18, col:21> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f3ece0 <col:19, col:21> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f3ecb8 <col:19> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
&[B3.12]
  14: CallExpr 0x558fa8f3ed50 <lparser.c:1228:3, col:22> 'void'
|-ImplicitCastExpr 0x558fa8f3ed38 <col:3> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3ec68 <col:3> 'void (LexState *, expdesc *)' Function 0x558fa8f223d8 'primaryexp' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f3ed88 <col:14> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3ec90 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f3e988 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f3ed18 <col:18, col:21> 'expdesc *' prefix '&'
  `-MemberExpr 0x558fa8f3ece0 <col:19, col:21> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
    `-DeclRefExpr 0x558fa8f3ecb8 <col:19> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B3.8]([B3.10], [B3.13])
  15: DeclRefExpr 0x558fa8f3eda0 <lparser.c:1229:7> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
v
  16: MemberExpr 0x558fa8f3edc8 <lparser.c:1229:7, col:9> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f3eda0 <col:7> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B3.15].v
  17: MemberExpr 0x558fa8f3ee00 <lparser.c:1229:7, col:11> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-MemberExpr 0x558fa8f3edc8 <col:7, col:9> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f3eda0 <col:7> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B3.16].k
  18: ImplicitCastExpr 0x558fa8f3ee60 <lparser.c:1229:7, col:11> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f3ee00 <col:7, col:11> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-MemberExpr 0x558fa8f3edc8 <col:7, col:9> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
    `-DeclRefExpr 0x558fa8f3eda0 <col:7> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B3.17] (ImplicitCastExpr, LValueToRValue, expkind)
  19: ImplicitCastExpr 0x558fa8f3ee78 <lparser.c:1229:7, col:11> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f3ee60 <col:7, col:11> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f3ee00 <col:7, col:11> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-MemberExpr 0x558fa8f3edc8 <col:7, col:9> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
      `-DeclRefExpr 0x558fa8f3eda0 <col:7> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
[B3.18] (ImplicitCastExpr, IntegralCast, unsigned int)
  20: DeclRefExpr 0x558fa8f3ee38 <lparser.c:1229:16> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
VCALL
  21: ImplicitCastExpr 0x558fa8f3ee90 <lparser.c:1229:16> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f3ee38 <col:16> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B3.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: BinaryOperator 0x558fa8f3eea8 <lparser.c:1229:7, col:16> 'int' '=='
|-ImplicitCastExpr 0x558fa8f3ee78 <col:7, col:11> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f3ee60 <col:7, col:11> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x558fa8f3ee00 <col:7, col:11> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|     `-MemberExpr 0x558fa8f3edc8 <col:7, col:9> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
|       `-DeclRefExpr 0x558fa8f3eda0 <col:7> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f3ebf0 'v' 'struct LHS_assign':'struct LHS_assign'
`-ImplicitCastExpr 0x558fa8f3ee90 <col:16> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f3ee38 <col:16> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B3.19] == [B3.21]
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
