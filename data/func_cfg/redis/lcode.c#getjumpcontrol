static Instruction *getjumpcontrol(FuncState *fs, int pc)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x5637768b46c0 <lcode.c:114:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
pi
   2: ImplicitCastExpr 0x5637768b46e8 <lcode.c:114:12> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768b46c0 <col:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
[B1.1] (ImplicitCastExpr, LValueToRValue, Instruction *)
   3: ReturnStmt 0x5637768b4700 <lcode.c:114:5, col:12>
`-ImplicitCastExpr 0x5637768b46e8 <col:12> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768b46c0 <col:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
return [B1.2];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768b4620 <lcode.c:112:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
pi
   2: ImplicitCastExpr 0x5637768b4668 <lcode.c:112:12> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768b4620 <col:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
[B2.1] (ImplicitCastExpr, LValueToRValue, Instruction *)
   3: IntegerLiteral 0x5637768b4648 <lcode.c:112:15> 'int' 1
1
   4: BinaryOperator 0x5637768b4680 <lcode.c:112:12, col:15> 'Instruction *' '-'
|-ImplicitCastExpr 0x5637768b4668 <col:12> 'Instruction *' <LValueToRValue>
| `-DeclRefExpr 0x5637768b4620 <col:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
`-IntegerLiteral 0x5637768b4648 <col:15> 'int' 1
[B2.2] - [B2.3]
   5: ReturnStmt 0x5637768b46a8 <lcode.c:112:5, col:15>
`-BinaryOperator 0x5637768b4680 <col:12, col:15> 'Instruction *' '-'
  |-ImplicitCastExpr 0x5637768b4668 <col:12> 'Instruction *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768b4620 <col:12> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
  `-IntegerLiteral 0x5637768b4648 <col:15> 'int' 1
return [B2.4];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5637768b4038 <./lopcodes.h:258:23> 'const lu_byte [38]' lvalue Var 0x5637768779a8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   2: ImplicitCastExpr 0x5637768b44b8 <./lopcodes.h:258:23> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5637768b4038 <col:23> 'const lu_byte [38]' lvalue Var 0x5637768779a8 'luaP_opmodes' 'const lu_byte [38]'
[B3.1] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   3: DeclRefExpr 0x5637768b4060 <lcode.c:111:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
pi
   4: ImplicitCastExpr 0x5637768b40a8 <lcode.c:111:41> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
[B3.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: IntegerLiteral 0x5637768b4088 <lcode.c:111:44> 'int' 1
1
   6: BinaryOperator 0x5637768b40c0 <lcode.c:111:41, col:44> 'Instruction *' '-'
|-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
| `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
`-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
[B3.4] - [B3.5]
   7: UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
`-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
  `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
    |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
    `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
*([B3.6])
   8: ImplicitCastExpr 0x5637768b4168 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
    `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
      `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
        |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
        | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
        `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
([B3.7]) (ImplicitCastExpr, LValueToRValue, Instruction)
   9: IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
0
  10: BinaryOperator 0x5637768b4180 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
|     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
|       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
|         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
|         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
|         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
`-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
[B3.8] >> [B3.9]
  11: IntegerLiteral 0x5637768b41c8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5637768b41f8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
(Instruction)[B3.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5637768b4220 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
~[B3.12]
  14: IntegerLiteral 0x5637768b4260 <./lopcodes.h:42:18> 'int' 6
6
  15: BinaryOperator 0x5637768b4280 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
`-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
([B3.13]) << [B3.14]
  16: UnaryOperator 0x5637768b42c8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
~([B3.15])
  17: IntegerLiteral 0x5637768b4308 <./lopcodes.h:80:67> 'int' 0
0
  18: BinaryOperator 0x5637768b4328 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
([B3.16]) << [B3.17]
  19: BinaryOperator 0x5637768b4370 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768b41a8 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768b4180 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
|   |     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
|   |       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
|   |         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
|   |         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
|   `-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768b4350 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768b4328 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
([B3.10]) & ([B3.18])
  20: CStyleCastExpr 0x5637768b43f8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5637768b43d8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768b4370 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768b41a8 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768b4180 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
    |   |     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
    |   |       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
    |   |         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
    |   |         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
    |   `-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5637768b4350 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768b4328 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
(OpCode)([B3.19]) (CStyleCastExpr, IntegralCast, OpCode)
  21: ArraySubscriptExpr 0x5637768b44d0 <./lopcodes.h:258:23, col:37> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x5637768b44b8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x5637768b4038 <col:23> 'const lu_byte [38]' lvalue Var 0x5637768779a8 'luaP_opmodes' 'const lu_byte [38]'
`-ParenExpr 0x5637768b4440 <line:80:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5637768b4420 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5637768b43f8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5637768b43d8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5637768b4370 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5637768b41a8 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5637768b4180 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
          |   |     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
          |   |       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
          |   |         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
          |   |         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
          |   |         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
          |   `-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5637768b4350 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5637768b4328 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
[B3.2][(([B3.20]))]
  22: ImplicitCastExpr 0x5637768b4580 <./lopcodes.h:258:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x5637768b44d0 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x5637768b44b8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x5637768b4038 <col:23> 'const lu_byte [38]' lvalue Var 0x5637768779a8 'luaP_opmodes' 'const lu_byte [38]'
  `-ParenExpr 0x5637768b4440 <line:80:23, col:70> 'OpCode':'OpCode'
    `-ParenExpr 0x5637768b4420 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
      `-CStyleCastExpr 0x5637768b43f8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
        `-ParenExpr 0x5637768b43d8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5637768b4370 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5637768b41a8 <line:80:37, col:49> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5637768b4180 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
            |   |   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
            |   |     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
            |   |       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
            |   |         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
            |   |         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
            |   |         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
            |   `-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
            `-ParenExpr 0x5637768b4350 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5637768b4328 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
                `-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
[B3.21] (ImplicitCastExpr, LValueToRValue, lu_byte)
  23: ImplicitCastExpr 0x5637768b4598 <./lopcodes.h:258:23, col:37> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5637768b4580 <col:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x5637768b44d0 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x5637768b44b8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x5637768b4038 <col:23> 'const lu_byte [38]' lvalue Var 0x5637768779a8 'luaP_opmodes' 'const lu_byte [38]'
    `-ParenExpr 0x5637768b4440 <line:80:23, col:70> 'OpCode':'OpCode'
      `-ParenExpr 0x5637768b4420 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
        `-CStyleCastExpr 0x5637768b43f8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
          `-ParenExpr 0x5637768b43d8 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5637768b4370 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5637768b41a8 <line:80:37, col:49> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5637768b4180 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
              |   |   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
              |   |     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
              |   |       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
              |   |         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
              |   |         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
              |   |         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
              |   `-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
              `-ParenExpr 0x5637768b4350 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5637768b4328 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
                  `-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
[B3.22] (ImplicitCastExpr, IntegralCast, int)
  24: IntegerLiteral 0x5637768b44f8 <./lopcodes.h:258:42> 'int' 1
1
  25: IntegerLiteral 0x5637768b4518 <./lopcodes.h:258:47> 'int' 7
7
  26: BinaryOperator 0x5637768b4538 <./lopcodes.h:258:42, col:47> 'int' '<<'
|-IntegerLiteral 0x5637768b44f8 <col:42> 'int' 1
`-IntegerLiteral 0x5637768b4518 <col:47> 'int' 7
[B3.24] << [B3.25]
  27: BinaryOperator 0x5637768b45b0 <./lopcodes.h:258:23, col:48> 'int' '&'
|-ImplicitCastExpr 0x5637768b4598 <col:23, col:37> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768b4580 <col:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x5637768b44d0 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x5637768b44b8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x5637768b4038 <col:23> 'const lu_byte [38]' lvalue Var 0x5637768779a8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ParenExpr 0x5637768b4440 <line:80:23, col:70> 'OpCode':'OpCode'
|       `-ParenExpr 0x5637768b4420 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|         `-CStyleCastExpr 0x5637768b43f8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|           `-ParenExpr 0x5637768b43d8 <col:26, col:30> 'unsigned int'
|             `-BinaryOperator 0x5637768b4370 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|               |-ParenExpr 0x5637768b41a8 <line:80:37, col:49> 'Instruction':'unsigned int'
|               | `-BinaryOperator 0x5637768b4180 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|               |   |-ImplicitCastExpr 0x5637768b4168 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|               |   | `-ParenExpr 0x5637768b4128 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|               |   |   `-UnaryOperator 0x5637768b4108 <lcode.c:111:39, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
|               |   |     `-ParenExpr 0x5637768b40e8 <col:40, col:45> 'Instruction *'
|               |   |       `-BinaryOperator 0x5637768b40c0 <col:41, col:44> 'Instruction *' '-'
|               |   |         |-ImplicitCastExpr 0x5637768b40a8 <col:41> 'Instruction *' <LValueToRValue>
|               |   |         | `-DeclRefExpr 0x5637768b4060 <col:41> 'Instruction *' lvalue Var 0x5637768b3dd0 'pi' 'Instruction *'
|               |   |         `-IntegerLiteral 0x5637768b4088 <col:44> 'int' 1
|               |   `-IntegerLiteral 0x5637768b4148 <./lopcodes.h:44:17> 'int' 0
|               `-ParenExpr 0x5637768b4350 <line:71:20, col:49> 'Instruction':'unsigned int'
|                 `-BinaryOperator 0x5637768b4328 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|                   |-ParenExpr 0x5637768b42e8 <line:71:21, col:45> 'Instruction':'unsigned int'
|                   | `-UnaryOperator 0x5637768b42c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                   |   `-ParenExpr 0x5637768b42a8 <col:23, col:44> 'Instruction':'unsigned int'
|                   |     `-BinaryOperator 0x5637768b4280 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|                   |       |-ParenExpr 0x5637768b4240 <line:71:24, col:40> 'Instruction':'unsigned int'
|                   |       | `-UnaryOperator 0x5637768b4220 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                   |       |   `-CStyleCastExpr 0x5637768b41f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                   |       |     `-IntegerLiteral 0x5637768b41c8 <col:39> 'int' 0
|                   |       `-IntegerLiteral 0x5637768b4260 <line:42:18> 'int' 6
|                   `-IntegerLiteral 0x5637768b4308 <line:80:67> 'int' 0
`-ParenExpr 0x5637768b4560 <line:258:41, col:48> 'int'
  `-BinaryOperator 0x5637768b4538 <col:42, col:47> 'int' '<<'
    |-IntegerLiteral 0x5637768b44f8 <col:42> 'int' 1
    `-IntegerLiteral 0x5637768b4518 <col:47> 'int' 7
[B3.23] & ([B3.26])
   T: if [B4.15] && ([B3.27])
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5637768b3e30 <lcode.c:110:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768b3e58 <lcode.c:110:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768b3e70 <lcode.c:110:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
[B4.2]->f
   4: ImplicitCastExpr 0x5637768b3ea8 <lcode.c:110:22, col:26> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768b3e70 <col:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768b3ec0 <lcode.c:110:22, col:29> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768b3ea8 <col:22, col:26> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768b3e70 <col:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
[B4.4]->code
   6: ImplicitCastExpr 0x5637768b3f20 <lcode.c:110:22, col:29> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768b3ec0 <col:22, col:29> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768b3ea8 <col:22, col:26> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768b3e70 <col:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
[B4.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768b3ef8 <lcode.c:110:34> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
pc
   8: ImplicitCastExpr 0x5637768b3f38 <lcode.c:110:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b3ef8 <col:34> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
[B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ArraySubscriptExpr 0x5637768b3f50 <lcode.c:110:22, col:36> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768b3f20 <col:22, col:29> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768b3ec0 <col:22, col:29> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768b3ea8 <col:22, col:26> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768b3e70 <col:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768b3f38 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768b3ef8 <col:34> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
[B4.6][[B4.8]]
  10: UnaryOperator 0x5637768b3f78 <lcode.c:110:21, col:36> 'Instruction *' prefix '&'
`-ArraySubscriptExpr 0x5637768b3f50 <col:22, col:36> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x5637768b3f20 <col:22, col:29> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x5637768b3ec0 <col:22, col:29> 'Instruction *' lvalue ->code 0x563776857e38
  |   `-ImplicitCastExpr 0x5637768b3ea8 <col:22, col:26> 'Proto *' <LValueToRValue>
  |     `-MemberExpr 0x5637768b3e70 <col:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
  |       `-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
  |         `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768b3f38 <col:34> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768b3ef8 <col:34> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
&[B4.9]
  11: DeclStmt 0x5637768b3f98 <lcode.c:110:3, col:37>col:16
`-VarDecl 0x5637768b3dd0 <col:3, col:36> col:16 used pi 'Instruction *' cinit
  `-UnaryOperator 0x5637768b3f78 <col:21, col:36> 'Instruction *' prefix '&'
    `-ArraySubscriptExpr 0x5637768b3f50 <col:22, col:36> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768b3f20 <col:22, col:29> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768b3ec0 <col:22, col:29> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768b3ea8 <col:22, col:26> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768b3e70 <col:22, col:26> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768b3e58 <col:22> 'FuncState *' <LValueToRValue>
      |         `-DeclRefExpr 0x5637768b3e30 <col:22> 'FuncState *' lvalue ParmVar 0x5637768b3b80 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768b3f38 <col:34> 'int' <LValueToRValue>
        `-DeclRefExpr 0x5637768b3ef8 <col:34> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
Instruction *pi = &fs->f->code[pc];
  12: DeclRefExpr 0x5637768b3fb0 <lcode.c:111:7> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
pc
  13: ImplicitCastExpr 0x5637768b3ff8 <lcode.c:111:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b3fb0 <col:7> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
[B4.12] (ImplicitCastExpr, LValueToRValue, int)
  14: IntegerLiteral 0x5637768b3fd8 <lcode.c:111:13> 'int' 1
1
  15: BinaryOperator 0x5637768b4010 <lcode.c:111:7, col:13> 'int' '>='
|-ImplicitCastExpr 0x5637768b3ff8 <col:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768b3fb0 <col:7> 'int' lvalue ParmVar 0x5637768b3bf8 'pc' 'int'
`-IntegerLiteral 0x5637768b3fd8 <col:13> 'int' 1
[B4.13] >= [B4.14]
   T: [B4.15] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
