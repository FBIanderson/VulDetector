static void set_number_format(char *fmt, int precision)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: CharacterLiteral 0x55be977a6820 <fpconv.c:168:16> 'int' 48
'0'
   2: DeclRefExpr 0x55be977a6838 <fpconv.c:168:22> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
d2
   3: ImplicitCastExpr 0x55be977a6860 <fpconv.c:168:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a6838 <col:22> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
[B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: BinaryOperator 0x55be977a6878 <fpconv.c:168:16, col:22> 'int' '+'
|-CharacterLiteral 0x55be977a6820 <col:16> 'int' 48
`-ImplicitCastExpr 0x55be977a6860 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55be977a6838 <col:22> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
[B1.1] + [B1.3]
   5: ImplicitCastExpr 0x55be977a68a0 <fpconv.c:168:16, col:22> 'char' <IntegralCast>
`-BinaryOperator 0x55be977a6878 <col:16, col:22> 'int' '+'
  |-CharacterLiteral 0x55be977a6820 <col:16> 'int' 48
  `-ImplicitCastExpr 0x55be977a6860 <col:22> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55be977a6838 <col:22> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
[B1.4] (ImplicitCastExpr, IntegralCast, char)
   6: DeclRefExpr 0x55be977a6770 <fpconv.c:168:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
fmt
   7: ImplicitCastExpr 0x55be977a67e0 <fpconv.c:168:5> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55be977a6770 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
[B1.6] (ImplicitCastExpr, LValueToRValue, char *)
   8: DeclRefExpr 0x55be977a6798 <fpconv.c:168:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
i
   9: UnaryOperator 0x55be977a67c0 <fpconv.c:168:9, col:10> 'int' postfix '++'
`-DeclRefExpr 0x55be977a6798 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B1.8]++
  10: ArraySubscriptExpr 0x55be977a67f8 <fpconv.c:168:5, col:12> 'char' lvalue
|-ImplicitCastExpr 0x55be977a67e0 <col:5> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55be977a6770 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
`-UnaryOperator 0x55be977a67c0 <col:9, col:10> 'int' postfix '++'
  `-DeclRefExpr 0x55be977a6798 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B1.7][[B1.9]]
  11: BinaryOperator 0x55be977a68b8 <fpconv.c:168:5, col:22> 'char' '='
|-ArraySubscriptExpr 0x55be977a67f8 <col:5, col:12> 'char' lvalue
| |-ImplicitCastExpr 0x55be977a67e0 <col:5> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55be977a6770 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
| `-UnaryOperator 0x55be977a67c0 <col:9, col:10> 'int' postfix '++'
|   `-DeclRefExpr 0x55be977a6798 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
`-ImplicitCastExpr 0x55be977a68a0 <col:16, col:22> 'char' <IntegralCast>
  `-BinaryOperator 0x55be977a6878 <col:16, col:22> 'int' '+'
    |-CharacterLiteral 0x55be977a6820 <col:16> 'int' 48
    `-ImplicitCastExpr 0x55be977a6860 <col:22> 'int' <LValueToRValue>
      `-DeclRefExpr 0x55be977a6838 <col:22> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
[B1.10] = [B1.5]
  12: CharacterLiteral 0x55be977a6990 <fpconv.c:169:16> 'int' 103
'g'
  13: ImplicitCastExpr 0x55be977a69a8 <fpconv.c:169:16> 'char' <IntegralCast>
`-CharacterLiteral 0x55be977a6990 <col:16> 'int' 103
[B1.12] (ImplicitCastExpr, IntegralCast, char)
  14: DeclRefExpr 0x55be977a68e0 <fpconv.c:169:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
fmt
  15: ImplicitCastExpr 0x55be977a6950 <fpconv.c:169:5> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55be977a68e0 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
[B1.14] (ImplicitCastExpr, LValueToRValue, char *)
  16: DeclRefExpr 0x55be977a6908 <fpconv.c:169:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
i
  17: UnaryOperator 0x55be977a6930 <fpconv.c:169:9, col:10> 'int' postfix '++'
`-DeclRefExpr 0x55be977a6908 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B1.16]++
  18: ArraySubscriptExpr 0x55be977a6968 <fpconv.c:169:5, col:12> 'char' lvalue
|-ImplicitCastExpr 0x55be977a6950 <col:5> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55be977a68e0 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
`-UnaryOperator 0x55be977a6930 <col:9, col:10> 'int' postfix '++'
  `-DeclRefExpr 0x55be977a6908 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B1.15][[B1.17]]
  19: BinaryOperator 0x55be977a69c0 <fpconv.c:169:5, col:16> 'char' '='
|-ArraySubscriptExpr 0x55be977a6968 <col:5, col:12> 'char' lvalue
| |-ImplicitCastExpr 0x55be977a6950 <col:5> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55be977a68e0 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
| `-UnaryOperator 0x55be977a6930 <col:9, col:10> 'int' postfix '++'
|   `-DeclRefExpr 0x55be977a6908 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
`-ImplicitCastExpr 0x55be977a69a8 <col:16> 'char' <IntegralCast>
  `-CharacterLiteral 0x55be977a6990 <col:16> 'int' 103
[B1.18] = [B1.13]
  20: IntegerLiteral 0x55be977a6a90 <fpconv.c:170:14> 'int' 0
0
  21: ImplicitCastExpr 0x55be977a6ab0 <fpconv.c:170:14> 'char' <IntegralCast>
`-IntegerLiteral 0x55be977a6a90 <col:14> 'int' 0
[B1.20] (ImplicitCastExpr, IntegralCast, char)
  22: DeclRefExpr 0x55be977a69e8 <fpconv.c:170:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
fmt
  23: ImplicitCastExpr 0x55be977a6a38 <fpconv.c:170:5> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55be977a69e8 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
[B1.22] (ImplicitCastExpr, LValueToRValue, char *)
  24: DeclRefExpr 0x55be977a6a10 <fpconv.c:170:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
i
  25: ImplicitCastExpr 0x55be977a6a50 <fpconv.c:170:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a6a10 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B1.24] (ImplicitCastExpr, LValueToRValue, int)
  26: ArraySubscriptExpr 0x55be977a6a68 <fpconv.c:170:5, col:10> 'char' lvalue
|-ImplicitCastExpr 0x55be977a6a38 <col:5> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55be977a69e8 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
`-ImplicitCastExpr 0x55be977a6a50 <col:9> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55be977a6a10 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B1.23][[B1.25]]
  27: BinaryOperator 0x55be977a6ac8 <fpconv.c:170:5, col:14> 'char' '='
|-ArraySubscriptExpr 0x55be977a6a68 <col:5, col:10> 'char' lvalue
| |-ImplicitCastExpr 0x55be977a6a38 <col:5> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55be977a69e8 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
| `-ImplicitCastExpr 0x55be977a6a50 <col:9> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55be977a6a10 <col:9> 'int' lvalue Var 0x55be977a5908 'i' 'int'
`-ImplicitCastExpr 0x55be977a6ab0 <col:14> 'char' <IntegralCast>
  `-IntegerLiteral 0x55be977a6a90 <col:14> 'int' 0
[B1.26] = [B1.21]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: CharacterLiteral 0x55be977a6660 <fpconv.c:166:20> 'int' 48
'0'
   2: DeclRefExpr 0x55be977a6678 <fpconv.c:166:26> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
d1
   3: ImplicitCastExpr 0x55be977a66a0 <fpconv.c:166:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a6678 <col:26> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
[B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: BinaryOperator 0x55be977a66b8 <fpconv.c:166:20, col:26> 'int' '+'
|-CharacterLiteral 0x55be977a6660 <col:20> 'int' 48
`-ImplicitCastExpr 0x55be977a66a0 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55be977a6678 <col:26> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
[B2.1] + [B2.3]
   5: ImplicitCastExpr 0x55be977a66e0 <fpconv.c:166:20, col:26> 'char' <IntegralCast>
`-BinaryOperator 0x55be977a66b8 <col:20, col:26> 'int' '+'
  |-CharacterLiteral 0x55be977a6660 <col:20> 'int' 48
  `-ImplicitCastExpr 0x55be977a66a0 <col:26> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55be977a6678 <col:26> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
[B2.4] (ImplicitCastExpr, IntegralCast, char)
   6: DeclRefExpr 0x55be977a65b0 <fpconv.c:166:9> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
fmt
   7: ImplicitCastExpr 0x55be977a6620 <fpconv.c:166:9> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55be977a65b0 <col:9> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
[B2.6] (ImplicitCastExpr, LValueToRValue, char *)
   8: DeclRefExpr 0x55be977a65d8 <fpconv.c:166:13> 'int' lvalue Var 0x55be977a5908 'i' 'int'
i
   9: UnaryOperator 0x55be977a6600 <fpconv.c:166:13, col:14> 'int' postfix '++'
`-DeclRefExpr 0x55be977a65d8 <col:13> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B2.8]++
  10: ArraySubscriptExpr 0x55be977a6638 <fpconv.c:166:9, col:16> 'char' lvalue
|-ImplicitCastExpr 0x55be977a6620 <col:9> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55be977a65b0 <col:9> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
`-UnaryOperator 0x55be977a6600 <col:13, col:14> 'int' postfix '++'
  `-DeclRefExpr 0x55be977a65d8 <col:13> 'int' lvalue Var 0x55be977a5908 'i' 'int'
[B2.7][[B2.9]]
  11: BinaryOperator 0x55be977a66f8 <fpconv.c:166:9, col:26> 'char' '='
|-ArraySubscriptExpr 0x55be977a6638 <col:9, col:16> 'char' lvalue
| |-ImplicitCastExpr 0x55be977a6620 <col:9> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55be977a65b0 <col:9> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
| `-UnaryOperator 0x55be977a6600 <col:13, col:14> 'int' postfix '++'
|   `-DeclRefExpr 0x55be977a65d8 <col:13> 'int' lvalue Var 0x55be977a5908 'i' 'int'
`-ImplicitCastExpr 0x55be977a66e0 <col:20, col:26> 'char' <IntegralCast>
  `-BinaryOperator 0x55be977a66b8 <col:20, col:26> 'int' '+'
    |-CharacterLiteral 0x55be977a6660 <col:20> 'int' 48
    `-ImplicitCastExpr 0x55be977a66a0 <col:26> 'int' <LValueToRValue>
      `-DeclRefExpr 0x55be977a6678 <col:26> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
[B2.10] = [B2.5]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: StmtExpr 0x55be977a6108 </usr/include/assert.h:108:50, line:113:6> 'void'
`-CompoundStmt 0x55be977a60f0 <line:108:51, line:113:5>
  `-IfStmt 0x55be977a60b8 <line:109:7, line:112:68>
    |-<<<NULL>>>
    |-<<<NULL>>>
    |-BinaryOperator 0x55be977a5d08 <fpconv.c:157:12, col:43> 'int' '&&'
    | |-BinaryOperator 0x55be977a5c58 <col:12, col:17> 'int' '<='
    | | |-IntegerLiteral 0x55be977a5bf8 <col:12> 'int' 1
    | | `-ImplicitCastExpr 0x55be977a5c40 <col:17> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55be977a5c18 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
    | `-BinaryOperator 0x55be977a5ce0 <col:30, col:43> 'int' '<='
    |   |-ImplicitCastExpr 0x55be977a5cc8 <col:30> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55be977a5c80 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
    |   `-IntegerLiteral 0x55be977a5ca8 <col:43> 'int' 14
    |-NullStmt 0x55be977a5d30 </usr/include/assert.h:110:9>
    `-CallExpr 0x55be977a5fe0 <line:112:9, col:68> 'void'
      |-ImplicitCastExpr 0x55be977a5fc8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x55be977a5d40 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55be97788b10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
      |-ImplicitCastExpr 0x55be977a6040 <<scratch space>:65:1> 'const char *' <BitCast>
      | `-ImplicitCastExpr 0x55be977a6028 <col:1> 'char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x55be977a5da8 <col:1> 'char [34]' lvalue "1 <= precision && precision <= 14"
      |-ImplicitCastExpr 0x55be977a6070 <line:66:1> 'const char *' <BitCast>
      | `-ImplicitCastExpr 0x55be977a6058 <col:1> 'char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x55be977a5e38 <col:1> 'char [9]' lvalue "fpconv.c"
      |-ImplicitCastExpr 0x55be977a6088 <line:67:1> 'unsigned int' <IntegralCast>
      | `-IntegerLiteral 0x55be977a5e68 <col:1> 'int' 157
      `-ImplicitCastExpr 0x55be977a60a0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
        `-UnaryOperator 0x55be977a5f78 <col:30, col:44> 'const char [36]' lvalue prefix '__extension__'
          `-PredefinedExpr 0x55be977a5f58 <col:44> 'const char [36]' lvalue __PRETTY_FUNCTION__
            `-StringLiteral 0x55be977a5f08 <col:44> 'const char [36]' lvalue "void set_number_format(char *, int)"
({ ... ;  })
   2: BinaryOperator 0x55be977a6148 </usr/include/assert.h:108:4, line:113:6> 'void' ','
|-CStyleCastExpr 0x55be977a5bd0 <line:108:4, col:33> 'void' <ToVoid>
| `-UnaryExprOrTypeTraitExpr 0x55be977a5ba0 <col:11, col:33> 'unsigned long' sizeof
|   `-ParenExpr 0x55be977a5b80 <col:18, col:33> 'int'
|     `-ConditionalOperator 0x55be977a5b50 <col:19, col:32> 'int'
|       |-ParenExpr 0x55be977a5ad8 <col:19, col:24> 'int'
|       | `-BinaryOperator 0x55be977a5ab0 <fpconv.c:157:12, col:43> 'int' '&&'
|       |   |-BinaryOperator 0x55be977a5a00 <col:12, col:17> 'int' '<='
|       |   | |-IntegerLiteral 0x55be977a59a0 <col:12> 'int' 1
|       |   | `-ImplicitCastExpr 0x55be977a59e8 <col:17> 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55be977a59c0 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
|       |   `-BinaryOperator 0x55be977a5a88 <col:30, col:43> 'int' '<='
|       |     |-ImplicitCastExpr 0x55be977a5a70 <col:30> 'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x55be977a5a28 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
|       |     `-IntegerLiteral 0x55be977a5a50 <col:43> 'int' 14
|       |-IntegerLiteral 0x55be977a5b10 </usr/include/assert.h:108:28> 'int' 1
|       `-IntegerLiteral 0x55be977a5b30 <col:32> 'int' 0
`-UnaryOperator 0x55be977a6128 <col:36, line:113:6> 'void' prefix '__extension__'
  `-StmtExpr 0x55be977a6108 <line:108:50, line:113:6> 'void'
    `-CompoundStmt 0x55be977a60f0 <line:108:51, line:113:5>
      `-IfStmt 0x55be977a60b8 <line:109:7, line:112:68>
        |-<<<NULL>>>
        |-<<<NULL>>>
        |-BinaryOperator 0x55be977a5d08 <fpconv.c:157:12, col:43> 'int' '&&'
        | |-BinaryOperator 0x55be977a5c58 <col:12, col:17> 'int' '<='
        | | |-IntegerLiteral 0x55be977a5bf8 <col:12> 'int' 1
        | | `-ImplicitCastExpr 0x55be977a5c40 <col:17> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x55be977a5c18 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
        | `-BinaryOperator 0x55be977a5ce0 <col:30, col:43> 'int' '<='
        |   |-ImplicitCastExpr 0x55be977a5cc8 <col:30> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x55be977a5c80 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
        |   `-IntegerLiteral 0x55be977a5ca8 <col:43> 'int' 14
        |-NullStmt 0x55be977a5d30 </usr/include/assert.h:110:9>
        `-CallExpr 0x55be977a5fe0 <line:112:9, col:68> 'void'
          |-ImplicitCastExpr 0x55be977a5fc8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x55be977a5d40 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55be97788b10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
          |-ImplicitCastExpr 0x55be977a6040 <<scratch space>:65:1> 'const char *' <BitCast>
          | `-ImplicitCastExpr 0x55be977a6028 <col:1> 'char *' <ArrayToPointerDecay>
          |   `-StringLiteral 0x55be977a5da8 <col:1> 'char [34]' lvalue "1 <= precision && precision <= 14"
          |-ImplicitCastExpr 0x55be977a6070 <line:66:1> 'const char *' <BitCast>
          | `-ImplicitCastExpr 0x55be977a6058 <col:1> 'char *' <ArrayToPointerDecay>
          |   `-StringLiteral 0x55be977a5e38 <col:1> 'char [9]' lvalue "fpconv.c"
          |-ImplicitCastExpr 0x55be977a6088 <line:67:1> 'unsigned int' <IntegralCast>
          | `-IntegerLiteral 0x55be977a5e68 <col:1> 'int' 157
          `-ImplicitCastExpr 0x55be977a60a0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
            `-UnaryOperator 0x55be977a5f78 <col:30, col:44> 'const char [36]' lvalue prefix '__extension__'
              `-PredefinedExpr 0x55be977a5f58 <col:44> 'const char [36]' lvalue __PRETTY_FUNCTION__
                `-StringLiteral 0x55be977a5f08 <col:44> 'const char [36]' lvalue "void set_number_format(char *, int)"
... , 
   3: DeclRefExpr 0x55be977a61b8 <fpconv.c:160:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
precision
   4: ImplicitCastExpr 0x55be977a6200 <fpconv.c:160:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a61b8 <col:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
[B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x55be977a61e0 <fpconv.c:160:22> 'int' 10
10
   6: BinaryOperator 0x55be977a6218 <fpconv.c:160:10, col:22> 'int' '/'
|-ImplicitCastExpr 0x55be977a6200 <col:10> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55be977a61b8 <col:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
`-IntegerLiteral 0x55be977a61e0 <col:22> 'int' 10
[B3.4] / [B3.5]
   7: DeclRefExpr 0x55be977a6190 <fpconv.c:160:5> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
d1
   8: BinaryOperator 0x55be977a6240 <fpconv.c:160:5, col:22> 'int' '='
|-DeclRefExpr 0x55be977a6190 <col:5> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
`-BinaryOperator 0x55be977a6218 <col:10, col:22> 'int' '/'
  |-ImplicitCastExpr 0x55be977a6200 <col:10> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55be977a61b8 <col:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
  `-IntegerLiteral 0x55be977a61e0 <col:22> 'int' 10
[B3.7] = [B3.6]
   9: DeclRefExpr 0x55be977a6290 <fpconv.c:161:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
precision
  10: ImplicitCastExpr 0x55be977a62d8 <fpconv.c:161:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a6290 <col:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
[B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x55be977a62b8 <fpconv.c:161:22> 'int' 10
10
  12: BinaryOperator 0x55be977a62f0 <fpconv.c:161:10, col:22> 'int' '%'
|-ImplicitCastExpr 0x55be977a62d8 <col:10> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55be977a6290 <col:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
`-IntegerLiteral 0x55be977a62b8 <col:22> 'int' 10
[B3.10] % [B3.11]
  13: DeclRefExpr 0x55be977a6268 <fpconv.c:161:5> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
d2
  14: BinaryOperator 0x55be977a6318 <fpconv.c:161:5, col:22> 'int' '='
|-DeclRefExpr 0x55be977a6268 <col:5> 'int' lvalue Var 0x55be977a5890 'd2' 'int'
`-BinaryOperator 0x55be977a62f0 <col:10, col:22> 'int' '%'
  |-ImplicitCastExpr 0x55be977a62d8 <col:10> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55be977a6290 <col:10> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
  `-IntegerLiteral 0x55be977a62b8 <col:22> 'int' 10
[B3.13] = [B3.12]
  15: CharacterLiteral 0x55be977a63c8 <fpconv.c:162:14> 'int' 37
'%'
  16: ImplicitCastExpr 0x55be977a63e0 <fpconv.c:162:14> 'char' <IntegralCast>
`-CharacterLiteral 0x55be977a63c8 <col:14> 'int' 37
[B3.15] (ImplicitCastExpr, IntegralCast, char)
  17: DeclRefExpr 0x55be977a6340 <fpconv.c:162:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
fmt
  18: ImplicitCastExpr 0x55be977a6388 <fpconv.c:162:5> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55be977a6340 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
[B3.17] (ImplicitCastExpr, LValueToRValue, char *)
  19: IntegerLiteral 0x55be977a6368 <fpconv.c:162:9> 'int' 0
0
  20: ArraySubscriptExpr 0x55be977a63a0 <fpconv.c:162:5, col:10> 'char' lvalue
|-ImplicitCastExpr 0x55be977a6388 <col:5> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55be977a6340 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
`-IntegerLiteral 0x55be977a6368 <col:9> 'int' 0
[B3.18][[B3.19]]
  21: BinaryOperator 0x55be977a63f8 <fpconv.c:162:5, col:14> 'char' '='
|-ArraySubscriptExpr 0x55be977a63a0 <col:5, col:10> 'char' lvalue
| |-ImplicitCastExpr 0x55be977a6388 <col:5> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55be977a6340 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
| `-IntegerLiteral 0x55be977a6368 <col:9> 'int' 0
`-ImplicitCastExpr 0x55be977a63e0 <col:14> 'char' <IntegralCast>
  `-CharacterLiteral 0x55be977a63c8 <col:14> 'int' 37
[B3.20] = [B3.16]
  22: CharacterLiteral 0x55be977a64a8 <fpconv.c:163:14> 'int' 46
'.'
  23: ImplicitCastExpr 0x55be977a64c0 <fpconv.c:163:14> 'char' <IntegralCast>
`-CharacterLiteral 0x55be977a64a8 <col:14> 'int' 46
[B3.22] (ImplicitCastExpr, IntegralCast, char)
  24: DeclRefExpr 0x55be977a6420 <fpconv.c:163:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
fmt
  25: ImplicitCastExpr 0x55be977a6468 <fpconv.c:163:5> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55be977a6420 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
[B3.24] (ImplicitCastExpr, LValueToRValue, char *)
  26: IntegerLiteral 0x55be977a6448 <fpconv.c:163:9> 'int' 1
1
  27: ArraySubscriptExpr 0x55be977a6480 <fpconv.c:163:5, col:10> 'char' lvalue
|-ImplicitCastExpr 0x55be977a6468 <col:5> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55be977a6420 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
`-IntegerLiteral 0x55be977a6448 <col:9> 'int' 1
[B3.25][[B3.26]]
  28: BinaryOperator 0x55be977a64d8 <fpconv.c:163:5, col:14> 'char' '='
|-ArraySubscriptExpr 0x55be977a6480 <col:5, col:10> 'char' lvalue
| |-ImplicitCastExpr 0x55be977a6468 <col:5> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55be977a6420 <col:5> 'char *' lvalue ParmVar 0x55be977a5608 'fmt' 'char *'
| `-IntegerLiteral 0x55be977a6448 <col:9> 'int' 1
`-ImplicitCastExpr 0x55be977a64c0 <col:14> 'char' <IntegralCast>
  `-CharacterLiteral 0x55be977a64a8 <col:14> 'int' 46
[B3.27] = [B3.23]
  29: IntegerLiteral 0x55be977a6528 <fpconv.c:164:9> 'int' 2
2
  30: DeclRefExpr 0x55be977a6500 <fpconv.c:164:5> 'int' lvalue Var 0x55be977a5908 'i' 'int'
i
  31: BinaryOperator 0x55be977a6548 <fpconv.c:164:5, col:9> 'int' '='
|-DeclRefExpr 0x55be977a6500 <col:5> 'int' lvalue Var 0x55be977a5908 'i' 'int'
`-IntegerLiteral 0x55be977a6528 <col:9> 'int' 2
[B3.30] = [B3.29]
  32: DeclRefExpr 0x55be977a6570 <fpconv.c:165:9> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
d1
  33: ImplicitCastExpr 0x55be977a6598 <fpconv.c:165:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a6570 <col:9> 'int' lvalue Var 0x55be977a5818 'd1' 'int'
[B3.32] (ImplicitCastExpr, LValueToRValue, int)
   T: if [B3.33]
   Preds (2): B4(Unreachable) B5
   Succs (2): B2 B1

 [B4 (NORETURN)]
   1: DeclRefExpr 0x55be977a5d40 </usr/include/assert.h:112:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55be97788b10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
__assert_fail
   2: ImplicitCastExpr 0x55be977a5fc8 </usr/include/assert.h:112:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
`-DeclRefExpr 0x55be977a5d40 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55be97788b10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)))
   3: StringLiteral 0x55be977a5da8 <<scratch space>:65:1> 'char [34]' lvalue "1 <= precision && precision <= 14"
"1 <= precision && precision <= 14"
   4: ImplicitCastExpr 0x55be977a6028 <<scratch space>:65:1> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55be977a5da8 <col:1> 'char [34]' lvalue "1 <= precision && precision <= 14"
[B4.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55be977a6040 <<scratch space>:65:1> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55be977a6028 <col:1> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55be977a5da8 <col:1> 'char [34]' lvalue "1 <= precision && precision <= 14"
[B4.4] (ImplicitCastExpr, BitCast, const char *)
   6: StringLiteral 0x55be977a5e38 <<scratch space>:66:1> 'char [9]' lvalue "fpconv.c"
"fpconv.c"
   7: ImplicitCastExpr 0x55be977a6058 <<scratch space>:66:1> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55be977a5e38 <col:1> 'char [9]' lvalue "fpconv.c"
[B4.6] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   8: ImplicitCastExpr 0x55be977a6070 <<scratch space>:66:1> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55be977a6058 <col:1> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55be977a5e38 <col:1> 'char [9]' lvalue "fpconv.c"
[B4.7] (ImplicitCastExpr, BitCast, const char *)
   9: IntegerLiteral 0x55be977a5e68 <<scratch space>:67:1> 'int' 157
157
  10: ImplicitCastExpr 0x55be977a6088 <<scratch space>:67:1> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55be977a5e68 <col:1> 'int' 157
[B4.9] (ImplicitCastExpr, IntegralCast, unsigned int)
  11: StringLiteral 0x55be977a5f08 </usr/include/assert.h:129:44> 'const char [36]' lvalue "void set_number_format(char *, int)"
"void set_number_format(char *, int)"
  12: PredefinedExpr 0x55be977a5f58 </usr/include/assert.h:129:44> 'const char [36]' lvalue __PRETTY_FUNCTION__
`-StringLiteral 0x55be977a5f08 <col:44> 'const char [36]' lvalue "void set_number_format(char *, int)"
__PRETTY_FUNCTION__
  13: ImplicitCastExpr 0x55be977a60a0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
`-UnaryOperator 0x55be977a5f78 <col:30, col:44> 'const char [36]' lvalue prefix '__extension__'
  `-PredefinedExpr 0x55be977a5f58 <col:44> 'const char [36]' lvalue __PRETTY_FUNCTION__
    `-StringLiteral 0x55be977a5f08 <col:44> 'const char [36]' lvalue "void set_number_format(char *, int)"
__extension__ [B4.12] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  14: CallExpr 0x55be977a5fe0 </usr/include/assert.h:112:9, col:68> 'void'
|-ImplicitCastExpr 0x55be977a5fc8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55be977a5d40 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55be97788b10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|-ImplicitCastExpr 0x55be977a6040 <<scratch space>:65:1> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55be977a6028 <col:1> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55be977a5da8 <col:1> 'char [34]' lvalue "1 <= precision && precision <= 14"
|-ImplicitCastExpr 0x55be977a6070 <line:66:1> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55be977a6058 <col:1> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55be977a5e38 <col:1> 'char [9]' lvalue "fpconv.c"
|-ImplicitCastExpr 0x55be977a6088 <line:67:1> 'unsigned int' <IntegralCast>
| `-IntegerLiteral 0x55be977a5e68 <col:1> 'int' 157
`-ImplicitCastExpr 0x55be977a60a0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
  `-UnaryOperator 0x55be977a5f78 <col:30, col:44> 'const char [36]' lvalue prefix '__extension__'
    `-PredefinedExpr 0x55be977a5f58 <col:44> 'const char [36]' lvalue __PRETTY_FUNCTION__
      `-StringLiteral 0x55be977a5f08 <col:44> 'const char [36]' lvalue "void set_number_format(char *, int)"
[B4.2]([B4.5], [B4.8], [B4.10], [B4.13])
   Preds (2): B6 B7
   Succs (1): B0

 [B5]
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: DeclRefExpr 0x55be977a5c80 <fpconv.c:157:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
precision
   2: ImplicitCastExpr 0x55be977a5cc8 <fpconv.c:157:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a5c80 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x55be977a5ca8 <fpconv.c:157:43> 'int' 14
14
   4: BinaryOperator 0x55be977a5ce0 <fpconv.c:157:30, col:43> 'int' '<='
|-ImplicitCastExpr 0x55be977a5cc8 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55be977a5c80 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
`-IntegerLiteral 0x55be977a5ca8 <col:43> 'int' 14
[B6.2] <= [B6.3]
   T: if [B7.9] && [B6.4]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclStmt 0x55be977b5d10 <fpconv.c:155:9>col:9
`-VarDecl 0x55be977a5818 <col:5, col:9> col:9 used d1 'int'
int d1;
   2: DeclStmt 0x55be977b5cf8 <fpconv.c:155:13>col:13
`-VarDecl 0x55be977a5890 <col:5, col:13> col:13 used d2 'int'
int d2;
   3: DeclStmt 0x55be977b5ce0 <fpconv.c:155:17>col:17
`-VarDecl 0x55be977a5908 <col:5, col:17> col:17 used i 'int'
int i;
   4: UnaryExprOrTypeTraitExpr 0x55be977a5ba0 </usr/include/assert.h:108:11, col:33> 'unsigned long' sizeof
`-ParenExpr 0x55be977a5b80 <col:18, col:33> 'int'
  `-ConditionalOperator 0x55be977a5b50 <col:19, col:32> 'int'
    |-ParenExpr 0x55be977a5ad8 <col:19, col:24> 'int'
    | `-BinaryOperator 0x55be977a5ab0 <fpconv.c:157:12, col:43> 'int' '&&'
    |   |-BinaryOperator 0x55be977a5a00 <col:12, col:17> 'int' '<='
    |   | |-IntegerLiteral 0x55be977a59a0 <col:12> 'int' 1
    |   | `-ImplicitCastExpr 0x55be977a59e8 <col:17> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55be977a59c0 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
    |   `-BinaryOperator 0x55be977a5a88 <col:30, col:43> 'int' '<='
    |     |-ImplicitCastExpr 0x55be977a5a70 <col:30> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55be977a5a28 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
    |     `-IntegerLiteral 0x55be977a5a50 <col:43> 'int' 14
    |-IntegerLiteral 0x55be977a5b10 </usr/include/assert.h:108:28> 'int' 1
    `-IntegerLiteral 0x55be977a5b30 <col:32> 'int' 0
sizeof ((1 <= precision && precision <= 14) ? 1 : 0)
   5: CStyleCastExpr 0x55be977a5bd0 </usr/include/assert.h:108:4, col:33> 'void' <ToVoid>
`-UnaryExprOrTypeTraitExpr 0x55be977a5ba0 <col:11, col:33> 'unsigned long' sizeof
  `-ParenExpr 0x55be977a5b80 <col:18, col:33> 'int'
    `-ConditionalOperator 0x55be977a5b50 <col:19, col:32> 'int'
      |-ParenExpr 0x55be977a5ad8 <col:19, col:24> 'int'
      | `-BinaryOperator 0x55be977a5ab0 <fpconv.c:157:12, col:43> 'int' '&&'
      |   |-BinaryOperator 0x55be977a5a00 <col:12, col:17> 'int' '<='
      |   | |-IntegerLiteral 0x55be977a59a0 <col:12> 'int' 1
      |   | `-ImplicitCastExpr 0x55be977a59e8 <col:17> 'int' <LValueToRValue>
      |   |   `-DeclRefExpr 0x55be977a59c0 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
      |   `-BinaryOperator 0x55be977a5a88 <col:30, col:43> 'int' '<='
      |     |-ImplicitCastExpr 0x55be977a5a70 <col:30> 'int' <LValueToRValue>
      |     | `-DeclRefExpr 0x55be977a5a28 <col:30> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
      |     `-IntegerLiteral 0x55be977a5a50 <col:43> 'int' 14
      |-IntegerLiteral 0x55be977a5b10 </usr/include/assert.h:108:28> 'int' 1
      `-IntegerLiteral 0x55be977a5b30 <col:32> 'int' 0
(void)[B7.4] (CStyleCastExpr, ToVoid, void)
   6: IntegerLiteral 0x55be977a5bf8 <fpconv.c:157:12> 'int' 1
1
   7: DeclRefExpr 0x55be977a5c18 <fpconv.c:157:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
precision
   8: ImplicitCastExpr 0x55be977a5c40 <fpconv.c:157:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x55be977a5c18 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
[B7.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x55be977a5c58 <fpconv.c:157:12, col:17> 'int' '<='
|-IntegerLiteral 0x55be977a5bf8 <col:12> 'int' 1
`-ImplicitCastExpr 0x55be977a5c40 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55be977a5c18 <col:17> 'int' lvalue ParmVar 0x55be977a5680 'precision' 'int'
[B7.6] <= [B7.8]
   T: [B7.9] && ...
   Preds (1): B8
   Succs (2): B6 B4

 [B0 (EXIT)]
   Preds (2): B1 B4
