static void init_exp(expdesc *e, expkind k, int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: IntegerLiteral 0x558fa8eefaf8 <./lcode.h:20:19> 'int' 1
1
   2: UnaryOperator 0x558fa8eefb18 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x558fa8eefaf8 <col:19> 'int' 1
-[B1.1]
   3: DeclRefExpr 0x558fa8eefa80 <lparser.c:127:10> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x558fa8eefaa8 <lparser.c:127:10> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eefa80 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x558fa8eefac0 <lparser.c:127:10, col:13> 'int' lvalue ->t 0x558fa8eb12c0
`-ImplicitCastExpr 0x558fa8eefaa8 <col:10> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eefa80 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.4]->t
   6: BinaryOperator 0x558fa8eefb58 <lparser.c:127:10, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x558fa8eefac0 <lparser.c:127:10, col:13> 'int' lvalue ->t 0x558fa8eb12c0
| `-ImplicitCastExpr 0x558fa8eefaa8 <col:10> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8eefa80 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
`-ParenExpr 0x558fa8eefb38 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x558fa8eefb18 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8eefaf8 <col:19> 'int' 1
[B1.5] = ([B1.2])
   7: DeclRefExpr 0x558fa8eefa08 <lparser.c:127:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x558fa8eefa30 <lparser.c:127:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eefa08 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x558fa8eefa48 <lparser.c:127:3, col:6> 'int' lvalue ->f 0x558fa8eb1320
`-ImplicitCastExpr 0x558fa8eefa30 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eefa08 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.8]->f
  10: BinaryOperator 0x558fa8eefb80 <lparser.c:127:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x558fa8eefa48 <lparser.c:127:3, col:6> 'int' lvalue ->f 0x558fa8eb1320
| `-ImplicitCastExpr 0x558fa8eefa30 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8eefa08 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
`-BinaryOperator 0x558fa8eefb58 <col:10, ./lcode.h:20:20> 'int' '='
  |-MemberExpr 0x558fa8eefac0 <lparser.c:127:10, col:13> 'int' lvalue ->t 0x558fa8eb12c0
  | `-ImplicitCastExpr 0x558fa8eefaa8 <col:10> 'expdesc *' <LValueToRValue>
  |   `-DeclRefExpr 0x558fa8eefa80 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
  `-ParenExpr 0x558fa8eefb38 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x558fa8eefb18 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x558fa8eefaf8 <col:19> 'int' 1
[B1.9] = [B1.6]
  11: DeclRefExpr 0x558fa8eefc20 <lparser.c:128:10> 'expkind':'expkind' lvalue ParmVar 0x558fa8eef7a0 'k' 'expkind':'expkind'
k
  12: ImplicitCastExpr 0x558fa8eefc48 <lparser.c:128:10> 'expkind':'expkind' <LValueToRValue>
`-DeclRefExpr 0x558fa8eefc20 <col:10> 'expkind':'expkind' lvalue ParmVar 0x558fa8eef7a0 'k' 'expkind':'expkind'
[B1.11] (ImplicitCastExpr, LValueToRValue, expkind)
  13: DeclRefExpr 0x558fa8eefba8 <lparser.c:128:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
e
  14: ImplicitCastExpr 0x558fa8eefbd0 <lparser.c:128:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eefba8 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.13] (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: MemberExpr 0x558fa8eefbe8 <lparser.c:128:3, col:6> 'expkind':'expkind' lvalue ->k 0x558fa8eb0e70
`-ImplicitCastExpr 0x558fa8eefbd0 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eefba8 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.14]->k
  16: BinaryOperator 0x558fa8eefc60 <lparser.c:128:3, col:10> 'expkind':'expkind' '='
|-MemberExpr 0x558fa8eefbe8 <col:3, col:6> 'expkind':'expkind' lvalue ->k 0x558fa8eb0e70
| `-ImplicitCastExpr 0x558fa8eefbd0 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8eefba8 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
`-ImplicitCastExpr 0x558fa8eefc48 <col:10> 'expkind':'expkind' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eefc20 <col:10> 'expkind':'expkind' lvalue ParmVar 0x558fa8eef7a0 'k' 'expkind':'expkind'
[B1.15] = [B1.12]
  17: DeclRefExpr 0x558fa8eefd70 <lparser.c:129:17> 'int' lvalue ParmVar 0x558fa8eef818 'i' 'int'
i
  18: ImplicitCastExpr 0x558fa8eefd98 <lparser.c:129:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eefd70 <col:17> 'int' lvalue ParmVar 0x558fa8eef818 'i' 'int'
[B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: DeclRefExpr 0x558fa8eefc88 <lparser.c:129:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
e
  20: ImplicitCastExpr 0x558fa8eefcb0 <lparser.c:129:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eefc88 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.19] (ImplicitCastExpr, LValueToRValue, expdesc *)
  21: MemberExpr 0x558fa8eefcc8 <lparser.c:129:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ImplicitCastExpr 0x558fa8eefcb0 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eefc88 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.20]->u
  22: MemberExpr 0x558fa8eefd00 <lparser.c:129:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8eefcc8 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ImplicitCastExpr 0x558fa8eefcb0 <col:3> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eefc88 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.21].s
  23: MemberExpr 0x558fa8eefd38 <lparser.c:129:3, col:10> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8eefd00 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8eefcc8 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ImplicitCastExpr 0x558fa8eefcb0 <col:3> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eefc88 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
[B1.22].info
  24: BinaryOperator 0x558fa8eefdb0 <lparser.c:129:3, col:17> 'int' '='
|-MemberExpr 0x558fa8eefd38 <col:3, col:10> 'int' lvalue .info 0x558fa8eb1028
| `-MemberExpr 0x558fa8eefd00 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|   `-MemberExpr 0x558fa8eefcc8 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|     `-ImplicitCastExpr 0x558fa8eefcb0 <col:3> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8eefc88 <col:3> 'expdesc *' lvalue ParmVar 0x558fa8eef730 'e' 'expdesc *'
`-ImplicitCastExpr 0x558fa8eefd98 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eefd70 <col:17> 'int' lvalue ParmVar 0x558fa8eef818 'i' 'int'
[B1.23] = [B1.18]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
