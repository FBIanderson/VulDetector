static void codecomp(FuncState *fs, OpCode op, int cond, expdesc *e1, expdesc *e2)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x5637768e3d20 <lcode.c:684:18> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
condjump
   2: ImplicitCastExpr 0x5637768e3e10 <lcode.c:684:18> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e3d20 <col:18> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768e3d48 <lcode.c:684:27> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e3e78 <lcode.c:684:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3d48 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e3d70 <lcode.c:684:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
op
   6: ImplicitCastExpr 0x5637768e3e90 <lcode.c:684:31> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768e3d70 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
[B1.5] (ImplicitCastExpr, LValueToRValue, OpCode)
   7: DeclRefExpr 0x5637768e3d98 <lcode.c:684:35> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
cond
   8: ImplicitCastExpr 0x5637768e3ea8 <lcode.c:684:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e3d98 <col:35> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768e3dc0 <lcode.c:684:41> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
o1
  10: ImplicitCastExpr 0x5637768e3ec0 <lcode.c:684:41> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e3dc0 <col:41> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x5637768e3de8 <lcode.c:684:45> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
o2
  12: ImplicitCastExpr 0x5637768e3ed8 <lcode.c:684:45> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e3de8 <col:45> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: CallExpr 0x5637768e3e28 <lcode.c:684:18, col:47> 'int'
|-ImplicitCastExpr 0x5637768e3e10 <col:18> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e3d20 <col:18> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768e3e78 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e3d48 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e3e90 <col:31> 'OpCode':'OpCode' <LValueToRValue>
| `-DeclRefExpr 0x5637768e3d70 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
|-ImplicitCastExpr 0x5637768e3ea8 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768e3d98 <col:35> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
|-ImplicitCastExpr 0x5637768e3ec0 <col:41> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768e3dc0 <col:41> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
`-ImplicitCastExpr 0x5637768e3ed8 <col:45> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3de8 <col:45> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
[B1.2]([B1.4], [B1.6], [B1.8], [B1.10], [B1.12])
  14: DeclRefExpr 0x5637768e3c38 <lcode.c:684:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
e1
  15: ImplicitCastExpr 0x5637768e3c60 <lcode.c:684:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3c38 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B1.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: MemberExpr 0x5637768e3c78 <lcode.c:684:3, col:7> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e3c60 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3c38 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B1.15]->u
  17: MemberExpr 0x5637768e3cb0 <lcode.c:684:3, col:9> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e3c78 <col:3, col:7> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e3c60 <col:3> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e3c38 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B1.16].s
  18: MemberExpr 0x5637768e3ce8 <lcode.c:684:3, col:11> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e3cb0 <col:3, col:9> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e3c78 <col:3, col:7> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e3c60 <col:3> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e3c38 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B1.17].info
  19: BinaryOperator 0x5637768e3ef0 <lcode.c:684:3, col:47> 'int' '='
|-MemberExpr 0x5637768e3ce8 <col:3, col:11> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768e3cb0 <col:3, col:9> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768e3c78 <col:3, col:7> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768e3c60 <col:3> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768e3c38 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
`-CallExpr 0x5637768e3e28 <col:18, col:47> 'int'
  |-ImplicitCastExpr 0x5637768e3e10 <col:18> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768e3d20 <col:18> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x5637768e3e78 <col:27> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e3d48 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768e3e90 <col:31> 'OpCode':'OpCode' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e3d70 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
  |-ImplicitCastExpr 0x5637768e3ea8 <col:35> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e3d98 <col:35> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
  |-ImplicitCastExpr 0x5637768e3ec0 <col:41> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e3dc0 <col:41> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
  `-ImplicitCastExpr 0x5637768e3ed8 <col:45> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768e3de8 <col:45> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
[B1.18] = [B1.13]
  20: DeclRefExpr 0x5637768e3f90 <lcode.c:685:11> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
VJMP
  21: ImplicitCastExpr 0x5637768e3fb8 <lcode.c:685:11> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768e3f90 <col:11> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
[B1.20] (ImplicitCastExpr, IntegralCast, expkind)
  22: DeclRefExpr 0x5637768e3f18 <lcode.c:685:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
e1
  23: ImplicitCastExpr 0x5637768e3f40 <lcode.c:685:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3f18 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B1.22] (ImplicitCastExpr, LValueToRValue, expdesc *)
  24: MemberExpr 0x5637768e3f58 <lcode.c:685:3, col:7> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768e3f40 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3f18 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B1.23]->k
  25: BinaryOperator 0x5637768e3fd0 <lcode.c:685:3, col:11> 'expkind':'expkind' '='
|-MemberExpr 0x5637768e3f58 <col:3, col:7> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768e3f40 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e3f18 <col:3> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e3fb8 <col:11> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768e3f90 <col:11> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
[B1.24] = [B1.21]
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: DeclStmt 0x5637768e3990 <lcode.c:680:5, col:13>col:9
`-VarDecl 0x5637768e3930 <col:5, col:9> col:9 used temp 'int'
int temp;
   2: DeclRefExpr 0x5637768e39d0 <lcode.c:681:12> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
o1
   3: ImplicitCastExpr 0x5637768e39f8 <lcode.c:681:12> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e39d0 <col:12> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
[B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: DeclRefExpr 0x5637768e39a8 <lcode.c:681:5> 'int' lvalue Var 0x5637768e3930 'temp' 'int'
temp
   5: BinaryOperator 0x5637768e3a10 <lcode.c:681:5, col:12> 'int' '='
|-DeclRefExpr 0x5637768e39a8 <col:5> 'int' lvalue Var 0x5637768e3930 'temp' 'int'
`-ImplicitCastExpr 0x5637768e39f8 <col:12> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768e39d0 <col:12> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
[B2.4] = [B2.3]
   6: DeclRefExpr 0x5637768e3a60 <lcode.c:681:21> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
o2
   7: ImplicitCastExpr 0x5637768e3a88 <lcode.c:681:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e3a60 <col:21> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
[B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x5637768e3a38 <lcode.c:681:16> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
o1
   9: BinaryOperator 0x5637768e3aa0 <lcode.c:681:16, col:21> 'int' '='
|-DeclRefExpr 0x5637768e3a38 <col:16> 'int' lvalue Var 0x5637768e32c0 'o1' 'int'
`-ImplicitCastExpr 0x5637768e3a88 <col:21> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3a60 <col:21> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
[B2.8] = [B2.7]
  10: DeclRefExpr 0x5637768e3af0 <lcode.c:681:30> 'int' lvalue Var 0x5637768e3930 'temp' 'int'
temp
  11: ImplicitCastExpr 0x5637768e3b18 <lcode.c:681:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e3af0 <col:30> 'int' lvalue Var 0x5637768e3930 'temp' 'int'
[B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: DeclRefExpr 0x5637768e3ac8 <lcode.c:681:25> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
o2
  13: BinaryOperator 0x5637768e3b30 <lcode.c:681:25, col:30> 'int' '='
|-DeclRefExpr 0x5637768e3ac8 <col:25> 'int' lvalue Var 0x5637768e3448 'o2' 'int'
`-ImplicitCastExpr 0x5637768e3b18 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3af0 <col:30> 'int' lvalue Var 0x5637768e3930 'temp' 'int'
[B2.12] = [B2.11]
  14: IntegerLiteral 0x5637768e3b80 <lcode.c:682:12> 'int' 1
1
  15: DeclRefExpr 0x5637768e3b58 <lcode.c:682:5> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
cond
  16: BinaryOperator 0x5637768e3ba0 <lcode.c:682:5, col:12> 'int' '='
|-DeclRefExpr 0x5637768e3b58 <col:5> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
`-IntegerLiteral 0x5637768e3b80 <col:12> 'int' 1
[B2.15] = [B2.14]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5637768e3830 <lcode.c:679:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
op
   2: ImplicitCastExpr 0x5637768e3880 <lcode.c:679:20> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768e3830 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
[B3.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x5637768e3898 <lcode.c:679:20> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e3880 <col:20> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3830 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
[B3.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x5637768e3858 <lcode.c:679:26> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
OP_EQ
   5: ImplicitCastExpr 0x5637768e38b0 <lcode.c:679:26> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768e3858 <col:26> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
[B3.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: BinaryOperator 0x5637768e38c8 <lcode.c:679:20, col:26> 'int' '!='
|-ImplicitCastExpr 0x5637768e3898 <col:20> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768e3880 <col:20> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e3830 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e24f0 'op' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x5637768e38b0 <col:26> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768e3858 <col:26> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
[B3.3] != [B3.5]
   T: if [B4.34] && [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5637768e3320 <lcode.c:675:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
   2: ImplicitCastExpr 0x5637768e3398 <lcode.c:675:12> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e3320 <col:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e3348 <lcode.c:675:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e33e8 <lcode.c:675:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3348 <col:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e3370 <lcode.c:675:28> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
e1
   6: ImplicitCastExpr 0x5637768e3400 <lcode.c:675:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3370 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B4.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e33b0 <lcode.c:675:12, col:30> 'int'
|-ImplicitCastExpr 0x5637768e3398 <col:12> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e3320 <col:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e33e8 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e3348 <col:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e3400 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3370 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B4.2]([B4.4], [B4.6])
   8: DeclStmt 0x5637768e3418 <lcode.c:675:3, col:31>col:7
`-VarDecl 0x5637768e32c0 <col:3, col:30> col:7 used o1 'int' cinit
  `-CallExpr 0x5637768e33b0 <col:12, col:30> 'int'
    |-ImplicitCastExpr 0x5637768e3398 <col:12> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768e3320 <col:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
    |-ImplicitCastExpr 0x5637768e33e8 <col:24> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768e3348 <col:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768e3400 <col:28> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e3370 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
int o1 = luaK_exp2RK(fs, e1);
   9: DeclRefExpr 0x5637768e34a8 <lcode.c:676:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
  10: ImplicitCastExpr 0x5637768e3520 <lcode.c:676:12> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e34a8 <col:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B4.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
  11: DeclRefExpr 0x5637768e34d0 <lcode.c:676:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768e3570 <lcode.c:676:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e34d0 <col:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
[B4.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: DeclRefExpr 0x5637768e34f8 <lcode.c:676:28> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
e2
  14: ImplicitCastExpr 0x5637768e3588 <lcode.c:676:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e34f8 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
[B4.13] (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: CallExpr 0x5637768e3538 <lcode.c:676:12, col:30> 'int'
|-ImplicitCastExpr 0x5637768e3520 <col:12> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e34a8 <col:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e3570 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e34d0 <col:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e3588 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e34f8 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
[B4.10]([B4.12], [B4.14])
  16: DeclStmt 0x5637768e35a0 <lcode.c:676:3, col:31>col:7
`-VarDecl 0x5637768e3448 <col:3, col:30> col:7 used o2 'int' cinit
  `-CallExpr 0x5637768e3538 <col:12, col:30> 'int'
    |-ImplicitCastExpr 0x5637768e3520 <col:12> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768e34a8 <col:12> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
    |-ImplicitCastExpr 0x5637768e3570 <col:24> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768e34d0 <col:24> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768e3588 <col:28> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e34f8 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
int o2 = luaK_exp2RK(fs, e2);
  17: DeclRefExpr 0x5637768e35b8 <lcode.c:677:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
  18: ImplicitCastExpr 0x5637768e3630 <lcode.c:677:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e35b8 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B4.17] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  19: DeclRefExpr 0x5637768e35e0 <lcode.c:677:11> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
fs
  20: ImplicitCastExpr 0x5637768e3680 <lcode.c:677:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e35e0 <col:11> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
[B4.19] (ImplicitCastExpr, LValueToRValue, FuncState *)
  21: DeclRefExpr 0x5637768e3608 <lcode.c:677:15> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
e2
  22: ImplicitCastExpr 0x5637768e3698 <lcode.c:677:15> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3608 <col:15> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
[B4.21] (ImplicitCastExpr, LValueToRValue, expdesc *)
  23: CallExpr 0x5637768e3648 <lcode.c:677:3, col:17> 'void'
|-ImplicitCastExpr 0x5637768e3630 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e35b8 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e3680 <col:11> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e35e0 <col:11> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e3698 <col:15> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3608 <col:15> 'expdesc *' lvalue ParmVar 0x5637768e2648 'e2' 'expdesc *'
[B4.18]([B4.20], [B4.22])
  24: DeclRefExpr 0x5637768e36b0 <lcode.c:678:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
  25: ImplicitCastExpr 0x5637768e3728 <lcode.c:678:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e36b0 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B4.24] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  26: DeclRefExpr 0x5637768e36d8 <lcode.c:678:11> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
fs
  27: ImplicitCastExpr 0x5637768e3778 <lcode.c:678:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e36d8 <col:11> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
[B4.26] (ImplicitCastExpr, LValueToRValue, FuncState *)
  28: DeclRefExpr 0x5637768e3700 <lcode.c:678:15> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
e1
  29: ImplicitCastExpr 0x5637768e3790 <lcode.c:678:15> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e3700 <col:15> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B4.28] (ImplicitCastExpr, LValueToRValue, expdesc *)
  30: CallExpr 0x5637768e3740 <lcode.c:678:3, col:17> 'void'
|-ImplicitCastExpr 0x5637768e3728 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e36b0 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e3778 <col:11> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e36d8 <col:11> 'FuncState *' lvalue ParmVar 0x5637768e2480 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e3790 <col:15> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e3700 <col:15> 'expdesc *' lvalue ParmVar 0x5637768e25d8 'e1' 'expdesc *'
[B4.25]([B4.27], [B4.29])
  31: DeclRefExpr 0x5637768e37a8 <lcode.c:679:7> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
cond
  32: ImplicitCastExpr 0x5637768e37f0 <lcode.c:679:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e37a8 <col:7> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
[B4.31] (ImplicitCastExpr, LValueToRValue, int)
  33: IntegerLiteral 0x5637768e37d0 <lcode.c:679:15> 'int' 0
0
  34: BinaryOperator 0x5637768e3808 <lcode.c:679:7, col:15> 'int' '=='
|-ImplicitCastExpr 0x5637768e37f0 <col:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768e37a8 <col:7> 'int' lvalue ParmVar 0x5637768e2568 'cond' 'int'
`-IntegerLiteral 0x5637768e37d0 <col:15> 'int' 0
[B4.32] == [B4.33]
   T: [B4.34] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1
