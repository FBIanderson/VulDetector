static void read_long_string(LexState *ls, SemInfo *seminfo, int sep)
 [B42 (ENTRY)]
   Succs (1): B41

 [B1]
   1: DeclRefExpr 0x561ce745ae48 <llex.c:273:19> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
   2: ImplicitCastExpr 0x561ce745b338 <llex.c:273:19> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745ae48 <col:19> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
   3: DeclRefExpr 0x561ce745ae70 <llex.c:273:34> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745b390 <llex.c:273:34> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745ae70 <col:34> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce745ae98 <llex.c:273:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce745aec0 <llex.c:273:50> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.6]->buff
   8: ImplicitCastExpr 0x561ce745af30 <./lzio.h:32:28, col:33> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B1.7]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
   9: MemberExpr 0x561ce745af48 <./lzio.h:32:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce745af30 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.8]->buffer
  10: ImplicitCastExpr 0x561ce745b048 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
`-ParenExpr 0x561ce745af80 <col:27, col:42> 'char *' lvalue
  `-MemberExpr 0x561ce745af48 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
    `-ImplicitCastExpr 0x561ce745af30 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B1.9]) (ImplicitCastExpr, LValueToRValue, char *)
  11: IntegerLiteral 0x561ce745afa0 <llex.c:273:63> 'int' 2
2
  12: DeclRefExpr 0x561ce745afc0 <llex.c:273:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
sep
  13: ImplicitCastExpr 0x561ce745afe8 <llex.c:273:67> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745afc0 <col:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: BinaryOperator 0x561ce745b000 <llex.c:273:63, col:67> 'int' '+'
|-IntegerLiteral 0x561ce745afa0 <col:63> 'int' 2
`-ImplicitCastExpr 0x561ce745afe8 <col:67> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce745afc0 <col:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.11] + [B1.13]
  15: BinaryOperator 0x561ce745b060 <./lzio.h:32:27, llex.c:273:70> 'char *' '+'
|-ImplicitCastExpr 0x561ce745b048 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
| `-ParenExpr 0x561ce745af80 <col:27, col:42> 'char *' lvalue
|   `-MemberExpr 0x561ce745af48 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|     `-ImplicitCastExpr 0x561ce745af30 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|       `-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
|         `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|           `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce745b028 <col:62, col:70> 'int'
  `-BinaryOperator 0x561ce745b000 <col:63, col:67> 'int' '+'
    |-IntegerLiteral 0x561ce745afa0 <col:63> 'int' 2
    `-ImplicitCastExpr 0x561ce745afe8 <col:67> 'int' <LValueToRValue>
      `-DeclRefExpr 0x561ce745afc0 <col:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.10] + ([B1.14])
  16: ImplicitCastExpr 0x561ce745b3a8 <./lzio.h:32:27, llex.c:273:70> 'const char *' <BitCast>
`-BinaryOperator 0x561ce745b060 <./lzio.h:32:27, llex.c:273:70> 'char *' '+'
  |-ImplicitCastExpr 0x561ce745b048 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
  | `-ParenExpr 0x561ce745af80 <col:27, col:42> 'char *' lvalue
  |   `-MemberExpr 0x561ce745af48 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |     `-ImplicitCastExpr 0x561ce745af30 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |       `-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
  |         `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |           `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
  |             `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
  `-ParenExpr 0x561ce745b028 <col:62, col:70> 'int'
    `-BinaryOperator 0x561ce745b000 <col:63, col:67> 'int' '+'
      |-IntegerLiteral 0x561ce745afa0 <col:63> 'int' 2
      `-ImplicitCastExpr 0x561ce745afe8 <col:67> 'int' <LValueToRValue>
        `-DeclRefExpr 0x561ce745afc0 <col:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.15] (ImplicitCastExpr, BitCast, const char *)
  17: DeclRefExpr 0x561ce745b088 <llex.c:274:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  18: ImplicitCastExpr 0x561ce745b0b0 <llex.c:274:51> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.17] (ImplicitCastExpr, LValueToRValue, LexState *)
  19: MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.18]->buff
  20: ImplicitCastExpr 0x561ce745b120 <./lzio.h:34:29, col:34> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce745b100 <col:29, col:34> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B1.19]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  21: MemberExpr 0x561ce745b138 <./lzio.h:34:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce745b120 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce745b100 <col:29, col:34> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B1.20]->n
  22: ImplicitCastExpr 0x561ce745b280 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
`-ParenExpr 0x561ce745b170 <col:28, col:38> 'size_t':'unsigned long' lvalue
  `-MemberExpr 0x561ce745b138 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
    `-ImplicitCastExpr 0x561ce745b120 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce745b100 <col:29, col:34> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B1.21]) (ImplicitCastExpr, LValueToRValue, size_t)
  23: IntegerLiteral 0x561ce745b190 <llex.c:274:63> 'int' 2
2
  24: IntegerLiteral 0x561ce745b1b0 <llex.c:274:66> 'int' 2
2
  25: DeclRefExpr 0x561ce745b1d0 <llex.c:274:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
sep
  26: ImplicitCastExpr 0x561ce745b1f8 <llex.c:274:70> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.25] (ImplicitCastExpr, LValueToRValue, int)
  27: BinaryOperator 0x561ce745b210 <llex.c:274:66, col:70> 'int' '+'
|-IntegerLiteral 0x561ce745b1b0 <col:66> 'int' 2
`-ImplicitCastExpr 0x561ce745b1f8 <col:70> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.24] + [B1.26]
  28: BinaryOperator 0x561ce745b258 <llex.c:274:63, col:73> 'int' '*'
|-IntegerLiteral 0x561ce745b190 <col:63> 'int' 2
`-ParenExpr 0x561ce745b238 <col:65, col:73> 'int'
  `-BinaryOperator 0x561ce745b210 <col:66, col:70> 'int' '+'
    |-IntegerLiteral 0x561ce745b1b0 <col:66> 'int' 2
    `-ImplicitCastExpr 0x561ce745b1f8 <col:70> 'int' <LValueToRValue>
      `-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.23] * ([B1.27])
  29: ImplicitCastExpr 0x561ce745b298 <llex.c:274:63, col:73> 'unsigned long' <IntegralCast>
`-BinaryOperator 0x561ce745b258 <col:63, col:73> 'int' '*'
  |-IntegerLiteral 0x561ce745b190 <col:63> 'int' 2
  `-ParenExpr 0x561ce745b238 <col:65, col:73> 'int'
    `-BinaryOperator 0x561ce745b210 <col:66, col:70> 'int' '+'
      |-IntegerLiteral 0x561ce745b1b0 <col:66> 'int' 2
      `-ImplicitCastExpr 0x561ce745b1f8 <col:70> 'int' <LValueToRValue>
        `-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.28] (ImplicitCastExpr, IntegralCast, unsigned long)
  30: BinaryOperator 0x561ce745b2b0 <./lzio.h:34:28, llex.c:274:73> 'unsigned long' '-'
|-ImplicitCastExpr 0x561ce745b280 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
| `-ParenExpr 0x561ce745b170 <col:28, col:38> 'size_t':'unsigned long' lvalue
|   `-MemberExpr 0x561ce745b138 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
|     `-ImplicitCastExpr 0x561ce745b120 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
|       `-ParenExpr 0x561ce745b100 <col:29, col:34> 'Mbuffer *' lvalue
|         `-MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|           `-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745b298 <col:63, col:73> 'unsigned long' <IntegralCast>
  `-BinaryOperator 0x561ce745b258 <col:63, col:73> 'int' '*'
    |-IntegerLiteral 0x561ce745b190 <col:63> 'int' 2
    `-ParenExpr 0x561ce745b238 <col:65, col:73> 'int'
      `-BinaryOperator 0x561ce745b210 <col:66, col:70> 'int' '+'
        |-IntegerLiteral 0x561ce745b1b0 <col:66> 'int' 2
        `-ImplicitCastExpr 0x561ce745b1f8 <col:70> 'int' <LValueToRValue>
          `-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.22] - [B1.29]
  31: CallExpr 0x561ce745b350 <llex.c:273:19, line:274:74> 'TString *'
|-ImplicitCastExpr 0x561ce745b338 <line:273:19> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745ae48 <col:19> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x561ce745b390 <col:34> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745ae70 <col:34> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce745b3a8 <./lzio.h:32:27, llex.c:273:70> 'const char *' <BitCast>
| `-BinaryOperator 0x561ce745b060 <./lzio.h:32:27, llex.c:273:70> 'char *' '+'
|   |-ImplicitCastExpr 0x561ce745b048 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
|   | `-ParenExpr 0x561ce745af80 <col:27, col:42> 'char *' lvalue
|   |   `-MemberExpr 0x561ce745af48 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|   |     `-ImplicitCastExpr 0x561ce745af30 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|   |       `-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
|   |         `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|   |           `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
|   |             `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
|   `-ParenExpr 0x561ce745b028 <col:62, col:70> 'int'
|     `-BinaryOperator 0x561ce745b000 <col:63, col:67> 'int' '+'
|       |-IntegerLiteral 0x561ce745afa0 <col:63> 'int' 2
|       `-ImplicitCastExpr 0x561ce745afe8 <col:67> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x561ce745afc0 <col:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
`-BinaryOperator 0x561ce745b2b0 <./lzio.h:34:28, llex.c:274:73> 'unsigned long' '-'
  |-ImplicitCastExpr 0x561ce745b280 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
  | `-ParenExpr 0x561ce745b170 <col:28, col:38> 'size_t':'unsigned long' lvalue
  |   `-MemberExpr 0x561ce745b138 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
  |     `-ImplicitCastExpr 0x561ce745b120 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
  |       `-ParenExpr 0x561ce745b100 <col:29, col:34> 'Mbuffer *' lvalue
  |         `-MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |           `-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
  |             `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
  `-ImplicitCastExpr 0x561ce745b298 <col:63, col:73> 'unsigned long' <IntegralCast>
    `-BinaryOperator 0x561ce745b258 <col:63, col:73> 'int' '*'
      |-IntegerLiteral 0x561ce745b190 <col:63> 'int' 2
      `-ParenExpr 0x561ce745b238 <col:65, col:73> 'int'
        `-BinaryOperator 0x561ce745b210 <col:66, col:70> 'int' '+'
          |-IntegerLiteral 0x561ce745b1b0 <col:66> 'int' 2
          `-ImplicitCastExpr 0x561ce745b1f8 <col:70> 'int' <LValueToRValue>
            `-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.2]([B1.4], [B1.16], [B1.30])
  32: DeclRefExpr 0x561ce745add0 <llex.c:273:5> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
seminfo
  33: ImplicitCastExpr 0x561ce745adf8 <llex.c:273:5> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce745add0 <col:5> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
[B1.32] (ImplicitCastExpr, LValueToRValue, SemInfo *)
  34: MemberExpr 0x561ce745ae10 <llex.c:273:5, col:14> 'TString *' lvalue ->ts 0x561ce74251d8
`-ImplicitCastExpr 0x561ce745adf8 <col:5> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745add0 <col:5> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
[B1.33]->ts
  35: BinaryOperator 0x561ce745b3c0 <llex.c:273:5, line:274:74> 'TString *' '='
|-MemberExpr 0x561ce745ae10 <line:273:5, col:14> 'TString *' lvalue ->ts 0x561ce74251d8
| `-ImplicitCastExpr 0x561ce745adf8 <col:5> 'SemInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745add0 <col:5> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
`-CallExpr 0x561ce745b350 <col:19, line:274:74> 'TString *'
  |-ImplicitCastExpr 0x561ce745b338 <line:273:19> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745ae48 <col:19> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
  |-ImplicitCastExpr 0x561ce745b390 <col:34> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x561ce745ae70 <col:34> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
  |-ImplicitCastExpr 0x561ce745b3a8 <./lzio.h:32:27, llex.c:273:70> 'const char *' <BitCast>
  | `-BinaryOperator 0x561ce745b060 <./lzio.h:32:27, llex.c:273:70> 'char *' '+'
  |   |-ImplicitCastExpr 0x561ce745b048 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
  |   | `-ParenExpr 0x561ce745af80 <col:27, col:42> 'char *' lvalue
  |   |   `-MemberExpr 0x561ce745af48 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |   |     `-ImplicitCastExpr 0x561ce745af30 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |   |       `-ParenExpr 0x561ce745af10 <col:28, col:33> 'Mbuffer *' lvalue
  |   |         `-MemberExpr 0x561ce745aed8 <llex.c:273:50, col:54> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |   |           `-ImplicitCastExpr 0x561ce745aec0 <col:50> 'LexState *' <LValueToRValue>
  |   |             `-DeclRefExpr 0x561ce745ae98 <col:50> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
  |   `-ParenExpr 0x561ce745b028 <col:62, col:70> 'int'
  |     `-BinaryOperator 0x561ce745b000 <col:63, col:67> 'int' '+'
  |       |-IntegerLiteral 0x561ce745afa0 <col:63> 'int' 2
  |       `-ImplicitCastExpr 0x561ce745afe8 <col:67> 'int' <LValueToRValue>
  |         `-DeclRefExpr 0x561ce745afc0 <col:67> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
  `-BinaryOperator 0x561ce745b2b0 <./lzio.h:34:28, llex.c:274:73> 'unsigned long' '-'
    |-ImplicitCastExpr 0x561ce745b280 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
    | `-ParenExpr 0x561ce745b170 <col:28, col:38> 'size_t':'unsigned long' lvalue
    |   `-MemberExpr 0x561ce745b138 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
    |     `-ImplicitCastExpr 0x561ce745b120 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
    |       `-ParenExpr 0x561ce745b100 <col:29, col:34> 'Mbuffer *' lvalue
    |         `-MemberExpr 0x561ce745b0c8 <llex.c:274:51, col:55> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    |           `-ImplicitCastExpr 0x561ce745b0b0 <col:51> 'LexState *' <LValueToRValue>
    |             `-DeclRefExpr 0x561ce745b088 <col:51> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-ImplicitCastExpr 0x561ce745b298 <col:63, col:73> 'unsigned long' <IntegralCast>
      `-BinaryOperator 0x561ce745b258 <col:63, col:73> 'int' '*'
        |-IntegerLiteral 0x561ce745b190 <col:63> 'int' 2
        `-ParenExpr 0x561ce745b238 <col:65, col:73> 'int'
          `-BinaryOperator 0x561ce745b210 <col:66, col:70> 'int' '+'
            |-IntegerLiteral 0x561ce745b1b0 <col:66> 'int' 2
            `-ImplicitCastExpr 0x561ce745b1f8 <col:70> 'int' <LValueToRValue>
              `-DeclRefExpr 0x561ce745b1d0 <col:70> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B1.34] = [B1.31]
   Preds (1): B2
   Succs (1): B0

 [B2]
  endloop:
   1: DeclRefExpr 0x561ce745ad90 <llex.c:272:7> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
seminfo
   2: ImplicitCastExpr 0x561ce745adb8 <llex.c:272:7> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce745ad90 <col:7> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
[B2.1] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   T: if [B2.2]
   Preds (1): B19
   Succs (2): B1 B0

 [B3]
   Preds (6): B5 B9 B15 B18 B24 B31
   Succs (1): B35

 [B4]
   1: DeclRefExpr 0x561ce7457770 <llex.c:230:13> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7457798 <llex.c:230:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457770 <col:13> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74577b0 <llex.c:230:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7457798 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457770 <col:13> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B4.2]->current
   4: ImplicitCastExpr 0x561ce74577e8 <llex.c:230:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce74577b0 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7457798 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7457770 <col:13> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B4.4]
   Preds (1): B35
   Succs (6): B14 B17 B23 B30 B34 B13

 [B5]
   1: ConditionalOperator 0x561ce745abf8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce745a470 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce745a418 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce745a3f8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce745a3c0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce745a3a8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce745a388 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745a458 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce745a438 <col:31> 'int' 0
|-ParenExpr 0x561ce745a738 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745a710 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745a6f0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce745a688 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce745a660 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce745a648 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce745a628 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce745a5c0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce745a5a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce745a580 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CallExpr 0x561ce745abb0 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745ab98 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745a758 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745abe0 <llex.c:268:19, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745ab60 <line:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745a7a8 <line:268:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745a780 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B8.9] ? ([B6.10]) : [B7.7]
   2: DeclRefExpr 0x561ce745a298 <llex.c:268:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745a2c0 <llex.c:268:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745a298 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B5.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745a2d8 <llex.c:268:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745a2c0 <line:268:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745a298 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B5.3]->current
   5: BinaryOperator 0x561ce745ac48 <llex.c:268:19, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce745a2d8 <llex.c:268:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce745a2c0 <line:268:19> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745a298 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce745ac28 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745abf8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce745a470 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce745a418 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce745a3f8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce745a3c0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce745a3a8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce745a388 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce745a458 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce745a438 <col:31> 'int' 0
    |-ParenExpr 0x561ce745a738 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745a710 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745a6f0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce745a688 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce745a660 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce745a648 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce745a628 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce745a5c0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce745a5a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce745a580 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-CallExpr 0x561ce745abb0 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745ab98 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745a758 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745abe0 <llex.c:268:19, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745ab60 <line:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745a7a8 <line:268:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745a780 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B5.4] = ([B5.1])
   Preds (2): B6 B7
   Succs (1): B3

 [B6]
   1: DeclRefExpr 0x561ce745a498 <llex.c:268:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745a4c0 <llex.c:268:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B6.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B6.2]->z
   4: ImplicitCastExpr 0x561ce745a530 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B6.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745a548 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B6.4]->p
   6: UnaryOperator 0x561ce745a580 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B6.5]++
   7: UnaryOperator 0x561ce745a5a0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce745a580 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
*[B6.6]
   8: ImplicitCastExpr 0x561ce745a648 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce745a628 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce745a5c0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce745a5a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce745a580 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(([B6.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce745a660 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce745a648 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce745a628 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce745a5c0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce745a5a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce745a580 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(unsigned char)[B6.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745a710 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745a6f0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce745a688 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce745a660 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce745a648 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce745a628 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce745a5c0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce745a5a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce745a580 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce745a548 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce745a530 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce745a510 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce745a4d8 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce745a4c0 <line:268:19> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce745a498 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(int)(([B6.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x561ce745a758 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745ab98 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745a758 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745a780 <llex.c:268:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745a7a8 <llex.c:268:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745a780 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745ab60 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745a7a8 <line:268:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745a780 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B7.4]->z
   6: ImplicitCastExpr 0x561ce745abe0 <llex.c:268:19, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745ab60 <line:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745a7a8 <line:268:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745a780 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B7.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745abb0 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745ab98 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745a758 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745abe0 <llex.c:268:19, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745ab60 <line:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745a7a8 <line:268:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745a780 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B7.2]([B7.6])
   Preds (1): B8
   Succs (1): B5

 [B8]
   1: DeclRefExpr 0x561ce745a310 <llex.c:268:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745a338 <llex.c:268:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B8.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B8.2]->z
   4: ImplicitCastExpr 0x561ce745a3a8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745a388 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B8.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745a3c0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce745a3a8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745a388 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B8.4]->n
   6: UnaryOperator 0x561ce745a3f8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce745a3c0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce745a3a8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745a388 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B8.5]--
   7: IntegerLiteral 0x561ce745a438 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce745a458 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce745a438 <col:31> 'int' 0
[B8.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce745a470 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce745a418 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce745a3f8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce745a3c0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce745a3a8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce745a388 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce745a350 <llex.c:268:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce745a338 <line:268:19> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745a310 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745a458 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce745a438 <col:31> 'int' 0
([B8.6]) > [B8.8]
   T: [B8.9] ? ... : ...
   Preds (1): B13
   Succs (2): B6 B7

 [B9]
   1: ConditionalOperator 0x561ce745a1b8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7459dd0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7459d78 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7459d58 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7459d20 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7459d08 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7459db8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7459d98 <col:31> 'int' 0
|-ParenExpr 0x561ce745a098 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745a070 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745a050 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7459fe8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7459fc0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7459fa8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7459f88 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7459f20 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7459f00 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CallExpr 0x561ce745a170 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745a158 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745a0b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745a1a0 <llex.c:267:36, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745a120 <line:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745a108 <line:267:36> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.18] ? ([B10.10]) : [B11.7]
   2: DeclRefExpr 0x561ce7459bf8 <llex.c:267:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7459c20 <llex.c:267:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459bf8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B9.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7459c38 <llex.c:267:36, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7459c20 <line:267:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459bf8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B9.3]->current
   5: BinaryOperator 0x561ce745a208 <llex.c:267:36, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7459c38 <llex.c:267:36, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7459c20 <line:267:36> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7459bf8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce745a1e8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745a1b8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7459dd0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7459d78 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7459d58 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7459d20 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7459d08 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7459db8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7459d98 <col:31> 'int' 0
    |-ParenExpr 0x561ce745a098 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745a070 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745a050 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7459fe8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7459fc0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7459fa8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7459f88 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7459f20 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7459f00 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-CallExpr 0x561ce745a170 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745a158 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745a0b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745a1a0 <llex.c:267:36, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745a120 <line:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745a108 <line:267:36> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B9.4] = ([B9.1])
   6: BinaryOperator 0x561ce745a250 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7459b90 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7459b78 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7459ab0 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7459bc8 <line:267:36> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7459ad8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7459be0 <col:36, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7459b40 <line:267:36, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7459b28 <line:267:36> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7459b00 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce745a230 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce745a208 <line:267:36, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7459c38 <llex.c:267:36, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7459c20 <line:267:36> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7459bf8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-ParenExpr 0x561ce745a1e8 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce745a1b8 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7459dd0 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7459d78 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7459d58 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7459d20 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7459d08 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7459db8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7459d98 <col:31> 'int' 0
        |-ParenExpr 0x561ce745a098 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce745a070 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce745a050 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7459fe8 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7459fc0 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7459fa8 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7459f88 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce7459f20 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7459f00 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        `-CallExpr 0x561ce745a170 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce745a158 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce745a0b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce745a1a0 <llex.c:267:36, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce745a120 <line:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce745a108 <line:267:36> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
... , 
   Preds (2): B10 B11
   Succs (1): B3

 [B10]
   1: DeclRefExpr 0x561ce7459df8 <llex.c:267:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7459e20 <llex.c:267:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B10.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B10.2]->z
   4: ImplicitCastExpr 0x561ce7459e90 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B10.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7459ea8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B10.4]->p
   6: UnaryOperator 0x561ce7459ee0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B10.5]++
   7: UnaryOperator 0x561ce7459f00 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
*[B10.6]
   8: ImplicitCastExpr 0x561ce7459fa8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7459f88 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7459f20 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7459f00 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(([B10.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7459fc0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7459fa8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7459f88 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7459f20 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7459f00 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(unsigned char)[B10.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745a070 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745a050 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7459fe8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7459fc0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7459fa8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7459f88 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7459f20 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7459f00 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7459ee0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7459ea8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7459e90 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7459e70 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7459e38 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7459e20 <line:267:36> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7459df8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(int)(([B10.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B12
   Succs (1): B9

 [B11]
   1: DeclRefExpr 0x561ce745a0b8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745a158 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745a0b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745a0e0 <llex.c:267:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745a108 <llex.c:267:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745a120 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745a108 <line:267:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B11.4]->z
   6: ImplicitCastExpr 0x561ce745a1a0 <llex.c:267:36, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745a120 <line:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745a108 <line:267:36> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B11.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745a170 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745a158 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745a0b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745a1a0 <llex.c:267:36, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745a120 <line:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745a108 <line:267:36> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745a0e0 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B11.2]([B11.6])
   Preds (1): B12
   Succs (1): B9

 [B12]
   1: DeclRefExpr 0x561ce7459ab0 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7459b78 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7459ab0 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7459ad8 <llex.c:267:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7459bc8 <llex.c:267:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459ad8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7459b00 <llex.c:267:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7459b28 <llex.c:267:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459b00 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7459b40 <llex.c:267:36, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7459b28 <line:267:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459b00 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.6]->current
   8: ImplicitCastExpr 0x561ce7459be0 <llex.c:267:36, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7459b40 <line:267:36, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7459b28 <line:267:36> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7459b00 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7459b90 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7459b78 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7459ab0 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7459bc8 <line:267:36> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7459ad8 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7459be0 <col:36, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7459b40 <line:267:36, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7459b28 <line:267:36> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7459b00 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.2]([B12.4], [B12.8])
  10: DeclRefExpr 0x561ce7459c70 <llex.c:267:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7459c98 <llex.c:267:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.11]->z
  13: ImplicitCastExpr 0x561ce7459d08 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B12.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7459d20 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7459d08 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.13]->n
  15: UnaryOperator 0x561ce7459d58 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7459d20 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7459d08 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B12.14]--
  16: IntegerLiteral 0x561ce7459d98 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7459db8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7459d98 <col:31> 'int' 0
[B12.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7459dd0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7459d78 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7459d58 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7459d20 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7459d08 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7459ce8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7459cb0 <llex.c:267:36, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7459c98 <line:267:36> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7459c70 <col:36> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7459db8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7459d98 <col:31> 'int' 0
([B12.15]) > [B12.17]
   T: [B12.18] ? ... : ...
   Preds (1): B13
   Succs (2): B10 B11

 [B13]
  default:
   1: DeclRefExpr 0x561ce7459a70 <llex.c:267:13> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
seminfo
   2: ImplicitCastExpr 0x561ce7459a98 <llex.c:267:13> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459a70 <col:13> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
[B13.1] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   T: if [B13.2]
   Preds (1): B4
   Succs (2): B12 B8

 [B14]
  case '\n':
   Preds (1): B4
   Succs (1): B17

 [B15]
   T: break;
   Preds (2): B16 B17
   Succs (1): B3

 [B16]
   1: IntegerLiteral 0x561ce7459980 <./lzio.h:36:45> 'int' 0
0
   2: ImplicitCastExpr 0x561ce74599a0 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7459980 <col:45> 'int' 0
[B16.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: DeclRefExpr 0x561ce7459898 <llex.c:263:40> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74598c0 <llex.c:263:40> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459898 <col:40> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B16.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74598d8 <llex.c:263:40, col:44> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce74598c0 <col:40> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459898 <col:40> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B16.4]->buff
   6: ImplicitCastExpr 0x561ce7459930 <./lzio.h:36:33, col:38> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7459910 <col:33, col:38> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce74598d8 <llex.c:263:40, col:44> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce74598c0 <col:40> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7459898 <col:40> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B16.5]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
   7: MemberExpr 0x561ce7459948 <./lzio.h:36:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce7459930 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7459910 <col:33, col:38> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce74598d8 <llex.c:263:40, col:44> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce74598c0 <col:40> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7459898 <col:40> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B16.6]->n
   8: BinaryOperator 0x561ce74599b8 <./lzio.h:36:33, col:45> 'size_t':'unsigned long' '='
|-MemberExpr 0x561ce7459948 <col:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
| `-ImplicitCastExpr 0x561ce7459930 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
|   `-ParenExpr 0x561ce7459910 <col:33, col:38> 'Mbuffer *' lvalue
|     `-MemberExpr 0x561ce74598d8 <llex.c:263:40, col:44> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|       `-ImplicitCastExpr 0x561ce74598c0 <col:40> 'LexState *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce7459898 <col:40> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74599a0 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7459980 <col:45> 'int' 0
[B16.7] = [B16.2]
   Preds (1): B17
   Succs (1): B15

 [B17]
  case '\r':
   1: DeclRefExpr 0x561ce74596b8 <llex.c:261:9> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7459720 <llex.c:261:9> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74596b8 <col:9> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B17.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce74596e0 <llex.c:261:14> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7459770 <llex.c:261:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74596e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B17.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x561ce7459708 <llex.c:261:18> 'int' 10
'\n'
   6: CallExpr 0x561ce7459738 <llex.c:261:9, col:22> 'void'
|-ImplicitCastExpr 0x561ce7459720 <col:9> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74596b8 <col:9> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7459770 <col:14> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74596e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7459708 <col:18> 'int' 10
[B17.2]([B17.4], [B17.5])
   7: DeclRefExpr 0x561ce7459788 <llex.c:262:9> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
inclinenumber
   8: ImplicitCastExpr 0x561ce74597d8 <llex.c:262:9> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7459788 <col:9> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
[B17.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   9: DeclRefExpr 0x561ce74597b0 <llex.c:262:23> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce7459820 <llex.c:262:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74597b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B17.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: CallExpr 0x561ce74597f0 <llex.c:262:9, col:25> 'void'
|-ImplicitCastExpr 0x561ce74597d8 <col:9> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7459788 <col:9> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
`-ImplicitCastExpr 0x561ce7459820 <col:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74597b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B17.8]([B17.10])
  12: DeclRefExpr 0x561ce7459838 <llex.c:263:14> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
seminfo
  13: ImplicitCastExpr 0x561ce7459860 <llex.c:263:14> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459838 <col:14> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
[B17.12] (ImplicitCastExpr, LValueToRValue, SemInfo *)
  14: UnaryOperator 0x561ce7459878 <llex.c:263:13, col:14> 'int' prefix '!'
`-ImplicitCastExpr 0x561ce7459860 <col:14> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459838 <col:14> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
![B17.13]
   T: if [B17.14]
   Preds (2): B4 B14
   Succs (2): B16 B15

 [B18]
   T: break;
   Preds (1): B23
   Succs (1): B3

 [B19]
   1: ConditionalOperator 0x561ce7459458 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7459070 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7459018 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7458ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7458fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7458fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7459058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7459038 <col:31> 'int' 0
|-ParenExpr 0x561ce7459338 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7459310 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74592f0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7459288 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7459260 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7459248 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7459228 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74591c0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce74591a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CallExpr 0x561ce7459410 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74593f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7459358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7459440 <llex.c:250:25, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74593c0 <line:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74593a8 <line:250:25> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.18] ? ([B20.10]) : [B21.7]
   2: DeclRefExpr 0x561ce7458e98 <llex.c:250:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7458ec0 <llex.c:250:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B19.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7458ed8 <llex.c:250:25, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7458ec0 <line:250:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B19.3]->current
   5: BinaryOperator 0x561ce74594a8 <llex.c:250:25, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7458ed8 <llex.c:250:25, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7458ec0 <line:250:25> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7458e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce7459488 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7459458 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7459070 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7459018 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7458ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7458fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7458fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7459058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7459038 <col:31> 'int' 0
    |-ParenExpr 0x561ce7459338 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7459310 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74592f0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7459288 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7459260 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7459248 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7459228 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74591c0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce74591a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-CallExpr 0x561ce7459410 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74593f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7459358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7459440 <llex.c:250:25, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74593c0 <line:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74593a8 <line:250:25> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B19.4] = ([B19.1])
   6: BinaryOperator 0x561ce74594f0 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7458e30 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7458e18 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7458d50 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7458e68 <line:250:25> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7458d78 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7458e80 <col:25, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7458de0 <line:250:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7458dc8 <line:250:25> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7458da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce74594d0 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce74594a8 <line:250:25, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7458ed8 <llex.c:250:25, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7458ec0 <line:250:25> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7458e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-ParenExpr 0x561ce7459488 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7459458 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7459070 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7459018 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7458ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7458fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7458fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7459058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7459038 <col:31> 'int' 0
        |-ParenExpr 0x561ce7459338 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7459310 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce74592f0 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7459288 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7459260 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7459248 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7459228 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce74591c0 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce74591a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        `-CallExpr 0x561ce7459410 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce74593f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7459358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7459440 <llex.c:250:25, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce74593c0 <line:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce74593a8 <line:250:25> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
... , 
   T: goto endloop;
   Preds (2): B20 B21
   Succs (1): B2

 [B20]
   1: DeclRefExpr 0x561ce7459098 <llex.c:250:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74590c0 <llex.c:250:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B20.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B20.2]->z
   4: ImplicitCastExpr 0x561ce7459130 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B20.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7459148 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B20.4]->p
   6: UnaryOperator 0x561ce7459180 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B20.5]++
   7: UnaryOperator 0x561ce74591a0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
*[B20.6]
   8: ImplicitCastExpr 0x561ce7459248 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7459228 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74591c0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce74591a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(([B20.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7459260 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7459248 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7459228 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74591c0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce74591a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(unsigned char)[B20.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7459310 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74592f0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7459288 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7459260 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7459248 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7459228 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74591c0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce74591a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7459180 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7459148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7459130 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7459110 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74590d8 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74590c0 <line:250:25> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7459098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(int)(([B20.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B22
   Succs (1): B19

 [B21]
   1: DeclRefExpr 0x561ce7459358 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74593f8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7459358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B21.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7459380 <llex.c:250:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74593a8 <llex.c:250:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B21.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74593c0 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74593a8 <line:250:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B21.4]->z
   6: ImplicitCastExpr 0x561ce7459440 <llex.c:250:25, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74593c0 <line:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74593a8 <line:250:25> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B21.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7459410 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74593f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7459358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7459440 <llex.c:250:25, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74593c0 <line:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74593a8 <line:250:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7459380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B21.2]([B21.6])
   Preds (1): B22
   Succs (1): B19

 [B22]
   1: DeclRefExpr 0x561ce7458d50 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7458e18 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7458d50 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B22.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7458d78 <llex.c:250:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7458e68 <llex.c:250:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458d78 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7458da0 <llex.c:250:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7458dc8 <llex.c:250:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7458de0 <llex.c:250:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7458dc8 <line:250:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.6]->current
   8: ImplicitCastExpr 0x561ce7458e80 <llex.c:250:25, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7458de0 <line:250:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7458dc8 <line:250:25> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7458da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7458e30 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7458e18 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7458d50 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7458e68 <line:250:25> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7458d78 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7458e80 <col:25, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7458de0 <line:250:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7458dc8 <line:250:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7458da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.2]([B22.4], [B22.8])
  10: DeclRefExpr 0x561ce7458f10 <llex.c:250:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7458f38 <llex.c:250:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.11]->z
  13: ImplicitCastExpr 0x561ce7458fa8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B22.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7458fc0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7458fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.13]->n
  15: UnaryOperator 0x561ce7458ff8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7458fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7458fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B22.14]--
  16: IntegerLiteral 0x561ce7459038 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7459058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7459038 <col:31> 'int' 0
[B22.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7459070 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7459018 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7458ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7458fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7458fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7458f88 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7458f50 <llex.c:250:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7458f38 <line:250:25> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7458f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7459058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7459038 <col:31> 'int' 0
([B22.15]) > [B22.17]
   T: [B22.18] ? ... : ...
   Preds (1): B23
   Succs (2): B20 B21

 [B23]
  case ']':
   1: DeclRefExpr 0x561ce7458c38 <llex.c:249:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
skip_sep
   2: ImplicitCastExpr 0x561ce7458c88 <llex.c:249:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7458c38 <col:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
[B23.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
   3: DeclRefExpr 0x561ce7458c60 <llex.c:249:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7458cd0 <llex.c:249:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458c60 <col:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B23.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x561ce7458ca0 <llex.c:249:13, col:24> 'int'
|-ImplicitCastExpr 0x561ce7458c88 <col:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7458c38 <col:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
`-ImplicitCastExpr 0x561ce7458cd0 <col:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458c60 <col:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B23.2]([B23.4])
   6: DeclRefExpr 0x561ce7458ce8 <llex.c:249:29> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
sep
   7: ImplicitCastExpr 0x561ce7458d10 <llex.c:249:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7458ce8 <col:29> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B23.6] (ImplicitCastExpr, LValueToRValue, int)
   8: BinaryOperator 0x561ce7458d28 <llex.c:249:13, col:29> 'int' '=='
|-CallExpr 0x561ce7458ca0 <col:13, col:24> 'int'
| |-ImplicitCastExpr 0x561ce7458c88 <col:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7458c38 <col:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
| `-ImplicitCastExpr 0x561ce7458cd0 <col:22> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7458c60 <col:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7458d10 <col:29> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458ce8 <col:29> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B23.5] == [B23.7]
   T: if [B23.8]
   Preds (1): B4
   Succs (2): B22 B18

 [B24]
   T: break;
   Preds (3): B25 B26 B30
   Succs (1): B3

 [B25]
   1: DeclRefExpr 0x561ce7458998 <llex.c:242:13> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x561ce7458a88 <llex.c:242:13> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7458998 <col:13> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B25.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x561ce74589c0 <llex.c:242:27> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7458ae0 <llex.c:242:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74589c0 <col:27> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B25.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce7458a28 <llex.c:242:31> 'char [33]' lvalue "nesting of [[...]] is deprecated"
"nesting of [[...]] is deprecated"
   6: ImplicitCastExpr 0x561ce7458af8 <llex.c:242:31> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7458a28 <col:31> 'char [33]' lvalue "nesting of [[...]] is deprecated"
[B25.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce7458b10 <llex.c:242:31> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7458af8 <col:31> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7458a28 <col:31> 'char [33]' lvalue "nesting of [[...]] is deprecated"
[B25.6] (ImplicitCastExpr, BitCast, const char *)
   8: CharacterLiteral 0x561ce7458a70 <llex.c:242:67> 'int' 91
'['
   9: CallExpr 0x561ce7458aa0 <llex.c:242:13, col:70> 'void'
|-ImplicitCastExpr 0x561ce7458a88 <col:13> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7458998 <col:13> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce7458ae0 <col:27> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74589c0 <col:27> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7458b10 <col:31> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce7458af8 <col:31> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561ce7458a28 <col:31> 'char [33]' lvalue "nesting of [[...]] is deprecated"
`-CharacterLiteral 0x561ce7458a70 <col:67> 'int' 91
[B25.2]([B25.4], [B25.7], [B25.8])
   Preds (1): B26
   Succs (1): B24

 [B26]
   1: ConditionalOperator 0x561ce74587e8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7458070 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7458018 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7457ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7457fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7457fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7458058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7458038 <col:31> 'int' 0
|-ParenExpr 0x561ce7458338 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7458310 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74582f0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7458288 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7458260 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7458248 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7458228 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74581c0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce74581a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CallExpr 0x561ce7458410 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74583f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7458358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce74587d0 <llex.c:238:25, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74583c0 <line:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74583a8 <line:238:25> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.18] ? ([B27.10]) : [B28.7]
   2: DeclRefExpr 0x561ce7457e98 <llex.c:238:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7457ec0 <llex.c:238:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B26.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7457ed8 <llex.c:238:25, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7457ec0 <line:238:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B26.3]->current
   5: BinaryOperator 0x561ce7458838 <llex.c:238:25, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7457ed8 <llex.c:238:25, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7457ec0 <line:238:25> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7457e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce7458818 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce74587e8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7458070 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7458018 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7457ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7457fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7457fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7458058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7458038 <col:31> 'int' 0
    |-ParenExpr 0x561ce7458338 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7458310 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74582f0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7458288 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7458260 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7458248 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7458228 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74581c0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce74581a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-CallExpr 0x561ce7458410 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74583f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7458358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce74587d0 <llex.c:238:25, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74583c0 <line:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74583a8 <line:238:25> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B26.4] = ([B26.1])
   6: BinaryOperator 0x561ce7458880 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7457e30 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7457e18 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7457d50 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7457e68 <line:238:25> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7457d78 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7457e80 <col:25, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7457de0 <line:238:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7457dc8 <line:238:25> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7457da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce7458860 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7458838 <line:238:25, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7457ed8 <llex.c:238:25, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7457ec0 <line:238:25> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7457e98 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-ParenExpr 0x561ce7458818 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce74587e8 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7458070 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7458018 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7457ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7457fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7457fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7458058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7458038 <col:31> 'int' 0
        |-ParenExpr 0x561ce7458338 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7458310 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce74582f0 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7458288 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7458260 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7458248 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7458228 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce74581c0 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce74581a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        `-CallExpr 0x561ce7458410 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce74583f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7458358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce74587d0 <llex.c:238:25, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce74583c0 <line:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce74583a8 <line:238:25> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
... , 
   7: DeclRefExpr 0x561ce74588c8 <llex.c:239:11> 'int' lvalue Var 0x561ce7456b00 'cont' 'int'
cont
   8: UnaryOperator 0x561ce74588f0 <llex.c:239:11, col:15> 'int' postfix '++'
`-DeclRefExpr 0x561ce74588c8 <col:11> 'int' lvalue Var 0x561ce7456b00 'cont' 'int'
[B26.7]++
   9: DeclRefExpr 0x561ce7458910 <llex.c:241:15> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
sep
  10: ImplicitCastExpr 0x561ce7458958 <llex.c:241:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7458910 <col:15> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B26.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x561ce7458938 <llex.c:241:22> 'int' 0
0
  12: BinaryOperator 0x561ce7458970 <llex.c:241:15, col:22> 'int' '=='
|-ImplicitCastExpr 0x561ce7458958 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce7458910 <col:15> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
`-IntegerLiteral 0x561ce7458938 <col:22> 'int' 0
[B26.10] == [B26.11]
   T: if [B26.12]
   Preds (2): B27 B28
   Succs (2): B25 B24

 [B27]
   1: DeclRefExpr 0x561ce7458098 <llex.c:238:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74580c0 <llex.c:238:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B27.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B27.2]->z
   4: ImplicitCastExpr 0x561ce7458130 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B27.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7458148 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B27.4]->p
   6: UnaryOperator 0x561ce7458180 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B27.5]++
   7: UnaryOperator 0x561ce74581a0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
*[B27.6]
   8: ImplicitCastExpr 0x561ce7458248 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7458228 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74581c0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce74581a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(([B27.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7458260 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7458248 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7458228 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74581c0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce74581a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(unsigned char)[B27.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7458310 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74582f0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7458288 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7458260 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7458248 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7458228 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74581c0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce74581a0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7458180 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7458148 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7458130 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7458110 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74580d8 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74580c0 <line:238:25> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7458098 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(int)(([B27.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B29
   Succs (1): B26

 [B28]
   1: DeclRefExpr 0x561ce7458358 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74583f8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7458358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B28.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7458380 <llex.c:238:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74583a8 <llex.c:238:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B28.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74583c0 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74583a8 <line:238:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B28.4]->z
   6: ImplicitCastExpr 0x561ce74587d0 <llex.c:238:25, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74583c0 <line:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74583a8 <line:238:25> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B28.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7458410 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74583f8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7458358 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce74587d0 <llex.c:238:25, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74583c0 <line:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74583a8 <line:238:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7458380 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B28.2]([B28.6])
   Preds (1): B29
   Succs (1): B26

 [B29]
   1: DeclRefExpr 0x561ce7457d50 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7457e18 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7457d50 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B29.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7457d78 <llex.c:238:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7457e68 <llex.c:238:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457d78 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7457da0 <llex.c:238:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7457dc8 <llex.c:238:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7457de0 <llex.c:238:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7457dc8 <line:238:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.6]->current
   8: ImplicitCastExpr 0x561ce7457e80 <llex.c:238:25, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7457de0 <line:238:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7457dc8 <line:238:25> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7457da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7457e30 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7457e18 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7457d50 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7457e68 <line:238:25> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7457d78 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7457e80 <col:25, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7457de0 <line:238:25, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7457dc8 <line:238:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7457da0 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.2]([B29.4], [B29.8])
  10: DeclRefExpr 0x561ce7457f10 <llex.c:238:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7457f38 <llex.c:238:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.11]->z
  13: ImplicitCastExpr 0x561ce7457fa8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B29.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7457fc0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7457fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.13]->n
  15: UnaryOperator 0x561ce7457ff8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7457fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7457fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B29.14]--
  16: IntegerLiteral 0x561ce7458038 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7458058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7458038 <col:31> 'int' 0
[B29.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7458070 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7458018 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7457ff8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7457fc0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7457fa8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7457f88 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7457f50 <llex.c:238:25, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7457f38 <line:238:25> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7457f10 <col:25> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7458058 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7458038 <col:31> 'int' 0
([B29.15]) > [B29.17]
   T: [B29.18] ? ... : ...
   Preds (1): B30
   Succs (2): B27 B28

 [B30]
  case '[':
   1: DeclRefExpr 0x561ce7457bd8 <llex.c:237:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
skip_sep
   2: ImplicitCastExpr 0x561ce7457c88 <llex.c:237:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7457bd8 <col:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
[B30.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
   3: DeclRefExpr 0x561ce7457c00 <llex.c:237:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7457cd0 <llex.c:237:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457c00 <col:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B30.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x561ce7457ca0 <llex.c:237:13, col:24> 'int'
|-ImplicitCastExpr 0x561ce7457c88 <col:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7457bd8 <col:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
`-ImplicitCastExpr 0x561ce7457cd0 <col:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457c00 <col:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B30.2]([B30.4])
   6: DeclRefExpr 0x561ce7457ce8 <llex.c:237:29> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
sep
   7: ImplicitCastExpr 0x561ce7457d10 <llex.c:237:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7457ce8 <col:29> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B30.6] (ImplicitCastExpr, LValueToRValue, int)
   8: BinaryOperator 0x561ce7457d28 <llex.c:237:13, col:29> 'int' '=='
|-CallExpr 0x561ce7457ca0 <col:13, col:24> 'int'
| |-ImplicitCastExpr 0x561ce7457c88 <col:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7457bd8 <col:13> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
| `-ImplicitCastExpr 0x561ce7457cd0 <col:22> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7457c00 <col:22> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7457d10 <col:29> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457ce8 <col:29> 'int' lvalue ParmVar 0x561ce74568f8 'sep' 'int'
[B30.5] == [B30.7]
   T: if [B30.8]
   Preds (1): B4
   Succs (2): B29 B24

 [B31]
   1: ConditionalOperator 0x561ce7457aa0 <llex.c:232:27, line:233:36> 'char *'
|-ImplicitCastExpr 0x561ce7457a58 <line:232:27, col:35> 'SemInfo *' <LValueToRValue>
| `-ParenExpr 0x561ce7457940 <col:27, col:35> 'SemInfo *' lvalue
|   `-DeclRefExpr 0x561ce7457918 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
|-ImplicitCastExpr 0x561ce7457a70 <col:39> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x561ce7457998 <col:39> 'char [23]' lvalue "unfinished long string"
`-ImplicitCastExpr 0x561ce7457a88 <line:233:36> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7457a18 <col:36> 'char [24]' lvalue "unfinished long comment"
[B34.6] ? [B32.2] : [B33.2]
   2: ImplicitCastExpr 0x561ce7457b68 <llex.c:232:27, line:233:36> 'const char *' <BitCast>
`-ConditionalOperator 0x561ce7457aa0 <line:232:27, line:233:36> 'char *'
  |-ImplicitCastExpr 0x561ce7457a58 <line:232:27, col:35> 'SemInfo *' <LValueToRValue>
  | `-ParenExpr 0x561ce7457940 <col:27, col:35> 'SemInfo *' lvalue
  |   `-DeclRefExpr 0x561ce7457918 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
  |-ImplicitCastExpr 0x561ce7457a70 <col:39> 'char *' <ArrayToPointerDecay>
  | `-StringLiteral 0x561ce7457998 <col:39> 'char [23]' lvalue "unfinished long string"
  `-ImplicitCastExpr 0x561ce7457a88 <line:233:36> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561ce7457a18 <col:36> 'char [24]' lvalue "unfinished long comment"
[B31.1] (ImplicitCastExpr, BitCast, const char *)
   3: DeclRefExpr 0x561ce7457ad0 <llex.c:233:63> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
TK_EOS
   4: CallExpr 0x561ce7457b10 <llex.c:232:9, line:233:69> 'void'
|-ImplicitCastExpr 0x561ce7457af8 <line:232:9> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74578c8 <col:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce7457b50 <col:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74578f0 <col:23> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7457b68 <col:27, line:233:36> 'const char *' <BitCast>
| `-ConditionalOperator 0x561ce7457aa0 <line:232:27, line:233:36> 'char *'
|   |-ImplicitCastExpr 0x561ce7457a58 <line:232:27, col:35> 'SemInfo *' <LValueToRValue>
|   | `-ParenExpr 0x561ce7457940 <col:27, col:35> 'SemInfo *' lvalue
|   |   `-DeclRefExpr 0x561ce7457918 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
|   |-ImplicitCastExpr 0x561ce7457a70 <col:39> 'char *' <ArrayToPointerDecay>
|   | `-StringLiteral 0x561ce7457998 <col:39> 'char [23]' lvalue "unfinished long string"
|   `-ImplicitCastExpr 0x561ce7457a88 <line:233:36> 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x561ce7457a18 <col:36> 'char [24]' lvalue "unfinished long comment"
`-DeclRefExpr 0x561ce7457ad0 <col:63> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
[B34.2]([B34.4], [B31.2], [B31.3])
   T: break;
   Preds (2): B32 B33
   Succs (1): B3

 [B32]
   1: StringLiteral 0x561ce7457998 <llex.c:232:39> 'char [23]' lvalue "unfinished long string"
"unfinished long string"
   2: ImplicitCastExpr 0x561ce7457a70 <llex.c:232:39> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7457998 <col:39> 'char [23]' lvalue "unfinished long string"
[B32.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B34
   Succs (1): B31

 [B33]
   1: StringLiteral 0x561ce7457a18 <llex.c:233:36> 'char [24]' lvalue "unfinished long comment"
"unfinished long comment"
   2: ImplicitCastExpr 0x561ce7457a88 <llex.c:233:36> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7457a18 <col:36> 'char [24]' lvalue "unfinished long comment"
[B33.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B34
   Succs (1): B31

 [B34]
  case (-1):
   1: DeclRefExpr 0x561ce74578c8 <llex.c:232:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x561ce7457af8 <llex.c:232:9> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74578c8 <col:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B34.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x561ce74578f0 <llex.c:232:23> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7457b50 <llex.c:232:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74578f0 <col:23> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B34.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7457918 <llex.c:232:28> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
seminfo
   6: ImplicitCastExpr 0x561ce7457a58 <llex.c:232:27, col:35> 'SemInfo *' <LValueToRValue>
`-ParenExpr 0x561ce7457940 <col:27, col:35> 'SemInfo *' lvalue
  `-DeclRefExpr 0x561ce7457918 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7456880 'seminfo' 'SemInfo *'
([B34.5]) (ImplicitCastExpr, LValueToRValue, SemInfo *)
   T: [B34.6] ? ... : ...
   Preds (1): B4
   Succs (2): B32 B33

 [B35]
   T: for (; ; )
   Preds (3): B3 B36 B37
   Succs (2): B4 NULL

 [B36]
   1: DeclRefExpr 0x561ce7457630 <llex.c:228:5> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
inclinenumber
   2: ImplicitCastExpr 0x561ce74576d8 <llex.c:228:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7457630 <col:5> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
[B36.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x561ce7457658 <llex.c:228:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7457720 <llex.c:228:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457658 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B36.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x561ce74576f0 <llex.c:228:5, col:21> 'void'
|-ImplicitCastExpr 0x561ce74576d8 <col:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7457630 <col:5> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
`-ImplicitCastExpr 0x561ce7457720 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457658 <col:19> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B36.2]([B36.4])
   Preds (2): B37 B38
   Succs (1): B35

 [B37]
   1: DeclRefExpr 0x561ce7457518 <llex.c:227:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7457540 <llex.c:227:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457518 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B37.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7457558 <llex.c:227:21, line:33:55> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7457540 <line:227:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457518 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B37.2]->current
   4: ImplicitCastExpr 0x561ce74575a8 <llex.c:227:21, line:33:55> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7457558 <line:227:21, line:33:55> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7457540 <line:227:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7457518 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B37.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce7457590 <llex.c:33:66> 'int' 13
'\r'
   6: BinaryOperator 0x561ce74575c0 <llex.c:227:21, line:33:66> 'int' '=='
|-ImplicitCastExpr 0x561ce74575a8 <line:227:21, line:33:55> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7457558 <line:227:21, line:33:55> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7457540 <line:227:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7457518 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7457590 <line:33:66> 'int' 13
[B37.4] == [B37.5]
   T: if ([B38.12] || [B37.6])
   Preds (1): B38
   Succs (2): B36 B35

 [B38]
   1: ConditionalOperator 0x561ce7457368 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7456f80 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7456f28 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7456f08 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7456ed0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7456eb8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7456f68 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7456f48 <col:31> 'int' 0
|-ParenExpr 0x561ce7457248 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7457220 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7457200 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7457198 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7457170 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7457158 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7457138 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74570d0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce74570b0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CallExpr 0x561ce7457320 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7457308 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7457268 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7457350 <llex.c:226:17, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74572d0 <line:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74572b8 <line:226:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.23] ? ([B39.10]) : [B40.7]
   2: DeclRefExpr 0x561ce7456da8 <llex.c:226:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7456dd0 <llex.c:226:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456da8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B38.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7456de8 <llex.c:226:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7456dd0 <line:226:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456da8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B38.3]->current
   5: BinaryOperator 0x561ce74573b8 <llex.c:226:17, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7456de8 <llex.c:226:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7456dd0 <line:226:17> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7456da8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce7457398 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7457368 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7456f80 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7456f28 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7456f08 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7456ed0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7456eb8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7456f68 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7456f48 <col:31> 'int' 0
    |-ParenExpr 0x561ce7457248 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7457220 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7457200 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7457198 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7457170 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7457158 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7457138 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74570d0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce74570b0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-CallExpr 0x561ce7457320 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7457308 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7457268 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7457350 <llex.c:226:17, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74572d0 <line:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74572b8 <line:226:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B38.4] = ([B38.1])
   6: BinaryOperator 0x561ce7457400 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7456d40 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7456d28 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7456c60 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7456d78 <line:226:17> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7456c88 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7456d90 <col:17, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7456cf0 <line:226:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7456cd8 <line:226:17> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7456cb0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ParenExpr 0x561ce74573e0 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce74573b8 <line:226:17, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7456de8 <llex.c:226:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7456dd0 <line:226:17> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7456da8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
    `-ParenExpr 0x561ce7457398 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7457368 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7456f80 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7456f28 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7456f08 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7456ed0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7456eb8 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7456f68 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7456f48 <col:31> 'int' 0
        |-ParenExpr 0x561ce7457248 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7457220 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce7457200 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7457198 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7457170 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7457158 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7457138 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce74570d0 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce74570b0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
        `-CallExpr 0x561ce7457320 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7457308 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7457268 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7457350 <llex.c:226:17, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce74572d0 <line:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce74572b8 <line:226:17> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
... , 
   7: DeclRefExpr 0x561ce7457448 <llex.c:227:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x561ce7457470 <llex.c:227:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457448 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B38.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: MemberExpr 0x561ce7457488 <llex.c:227:21, line:33:32> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7457470 <line:227:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457448 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B38.8]->current
  10: ImplicitCastExpr 0x561ce74574d8 <llex.c:227:21, line:33:32> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7457488 <line:227:21, line:33:32> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7457470 <line:227:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7457448 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B38.9] (ImplicitCastExpr, LValueToRValue, int)
  11: CharacterLiteral 0x561ce74574c0 <llex.c:33:43> 'int' 10
'\n'
  12: BinaryOperator 0x561ce74574f0 <llex.c:227:21, line:33:43> 'int' '=='
|-ImplicitCastExpr 0x561ce74574d8 <line:227:21, line:33:32> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7457488 <line:227:21, line:33:32> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7457470 <line:227:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7457448 <col:21> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-CharacterLiteral 0x561ce74574c0 <line:33:43> 'int' 10
[B38.10] == [B38.11]
   T: [B38.12] || ...
   Preds (2): B39 B40
   Succs (2): B36 B37

 [B39]
   1: DeclRefExpr 0x561ce7456fa8 <llex.c:226:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7456fd0 <llex.c:226:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B39.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B39.2]->z
   4: ImplicitCastExpr 0x561ce7457040 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B39.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7457058 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B39.4]->p
   6: UnaryOperator 0x561ce7457090 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B39.5]++
   7: UnaryOperator 0x561ce74570b0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
*[B39.6]
   8: ImplicitCastExpr 0x561ce7457158 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7457138 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74570d0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce74570b0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(([B39.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7457170 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7457158 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7457138 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74570d0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce74570b0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(unsigned char)[B39.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7457220 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7457200 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7457198 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7457170 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7457158 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7457138 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74570d0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce74570b0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7457090 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7457058 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7457040 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7457020 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7456fe8 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7456fd0 <line:226:17> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7456fa8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
(int)(([B39.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B41
   Succs (1): B38

 [B40]
   1: DeclRefExpr 0x561ce7457268 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7457308 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7457268 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B40.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7457290 <llex.c:226:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74572b8 <llex.c:226:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B40.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74572d0 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74572b8 <line:226:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B40.4]->z
   6: ImplicitCastExpr 0x561ce7457350 <llex.c:226:17, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74572d0 <line:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74572b8 <line:226:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B40.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7457320 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7457308 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7457268 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7457350 <llex.c:226:17, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74572d0 <line:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74572b8 <line:226:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7457290 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B40.2]([B40.6])
   Preds (1): B41
   Succs (1): B38

 [B41]
   1: IntegerLiteral 0x561ce7456b60 <llex.c:224:14> 'int' 0
0
   2: DeclStmt 0x561ce7456b80 <llex.c:224:3, col:15>col:7
`-VarDecl 0x561ce7456b00 <col:3, col:14> col:7 used cont 'int' cinit
  `-IntegerLiteral 0x561ce7456b60 <col:14> 'int' 0
int cont = 0;
   3: DeclRefExpr 0x561ce7456b98 <llex.c:225:10> 'int' lvalue Var 0x561ce7456b00 'cont' 'int'
cont
   4: ImplicitCastExpr 0x561ce7456c20 <llex.c:225:9, col:14> 'int' <LValueToRValue>
`-ParenExpr 0x561ce7456c00 <col:9, col:14> 'int' lvalue
  `-DeclRefExpr 0x561ce7456b98 <col:10> 'int' lvalue Var 0x561ce7456b00 'cont' 'int'
([B41.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: CStyleCastExpr 0x561ce7456c38 <llex.c:225:3, col:14> 'void' <ToVoid>
`-ImplicitCastExpr 0x561ce7456c20 <col:9, col:14> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce7456c00 <col:9, col:14> 'int' lvalue
    `-DeclRefExpr 0x561ce7456b98 <col:10> 'int' lvalue Var 0x561ce7456b00 'cont' 'int'
(void)[B41.4] (CStyleCastExpr, ToVoid, void)
   6: DeclRefExpr 0x561ce7456c60 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   7: ImplicitCastExpr 0x561ce7456d28 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7456c60 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B41.6] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   8: DeclRefExpr 0x561ce7456c88 <llex.c:226:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x561ce7456d78 <llex.c:226:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456c88 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: DeclRefExpr 0x561ce7456cb0 <llex.c:226:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7456cd8 <llex.c:226:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456cb0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7456cf0 <llex.c:226:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7456cd8 <line:226:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456cb0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.11]->current
  13: ImplicitCastExpr 0x561ce7456d90 <llex.c:226:17, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7456cf0 <line:226:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7456cd8 <line:226:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7456cb0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.12] (ImplicitCastExpr, LValueToRValue, int)
  14: CallExpr 0x561ce7456d40 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7456d28 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7456c60 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7456d78 <line:226:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7456c88 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7456d90 <col:17, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7456cf0 <line:226:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7456cd8 <line:226:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7456cb0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.7]([B41.9], [B41.13])
  15: DeclRefExpr 0x561ce7456e20 <llex.c:226:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
ls
  16: ImplicitCastExpr 0x561ce7456e48 <llex.c:226:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.15] (ImplicitCastExpr, LValueToRValue, LexState *)
  17: MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.16]->z
  18: ImplicitCastExpr 0x561ce7456eb8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
([B41.17]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  19: MemberExpr 0x561ce7456ed0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7456eb8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.18]->n
  20: UnaryOperator 0x561ce7456f08 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7456ed0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7456eb8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
[B41.19]--
  21: IntegerLiteral 0x561ce7456f48 <./lzio.h:22:31> 'int' 0
0
  22: ImplicitCastExpr 0x561ce7456f68 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7456f48 <col:31> 'int' 0
[B41.21] (ImplicitCastExpr, IntegralCast, unsigned long)
  23: BinaryOperator 0x561ce7456f80 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7456f28 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7456f08 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7456ed0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7456eb8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7456e98 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7456e60 <llex.c:226:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7456e48 <line:226:17> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7456e20 <col:17> 'LexState *' lvalue ParmVar 0x561ce7456810 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7456f68 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7456f48 <col:31> 'int' 0
([B41.20]) > [B41.22]
   T: [B41.23] ? ... : ...
   Preds (1): B42
   Succs (2): B39 B40

 [B0 (EXIT)]
   Preds (2): B1 B2
