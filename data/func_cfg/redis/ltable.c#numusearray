static int numusearray(const Table *t, int *nums)
 [B13 (ENTRY)]
   Succs (1): B12

 [B1]
   1: DeclRefExpr 0x5654000dc2d8 <ltable.c:243:10> 'int' lvalue Var 0x5654000db3e0 'ause' 'int'
ause
   2: ImplicitCastExpr 0x5654000dc300 <ltable.c:243:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dc2d8 <col:10> 'int' lvalue Var 0x5654000db3e0 'ause' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x5654000dc318 <ltable.c:243:3, col:10>
`-ImplicitCastExpr 0x5654000dc300 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dc2d8 <col:10> 'int' lvalue Var 0x5654000db3e0 'ause' 'int'
return [B1.2];
   Preds (2): B8 B11
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5654000db6b8 <ltable.c:227:35> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
lg
   2: UnaryOperator 0x5654000db6e0 <ltable.c:227:35, col:37> 'int' postfix '++'
`-DeclRefExpr 0x5654000db6b8 <col:35> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
[B2.1]++
   3: DeclRefExpr 0x5654000db700 <ltable.c:227:41> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
ttlg
   4: IntegerLiteral 0x5654000db728 <ltable.c:227:47> 'int' 2
2
   5: CompoundAssignOperator 0x5654000db748 <ltable.c:227:41, col:47> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x5654000db700 <col:41> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
`-IntegerLiteral 0x5654000db728 <col:47> 'int' 2
[B2.3] *= [B2.4]
   6: BinaryOperator 0x5654000db780 <ltable.c:227:35, col:47> 'int' ','
|-UnaryOperator 0x5654000db6e0 <col:35, col:37> 'int' postfix '++'
| `-DeclRefExpr 0x5654000db6b8 <col:35> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
`-CompoundAssignOperator 0x5654000db748 <col:41, col:47> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |-DeclRefExpr 0x5654000db700 <col:41> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
  `-IntegerLiteral 0x5654000db728 <col:47> 'int' 2
... , [B2.5]
   Preds (1): B3
   Succs (1): B11

 [B3]
   1: DeclRefExpr 0x5654000dc0a0 <ltable.c:240:5> 'int *' lvalue ParmVar 0x5654000db0d8 'nums' 'int *'
nums
   2: ImplicitCastExpr 0x5654000dc0f0 <ltable.c:240:5> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000dc0a0 <col:5> 'int *' lvalue ParmVar 0x5654000db0d8 'nums' 'int *'
[B3.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: DeclRefExpr 0x5654000dc0c8 <ltable.c:240:10> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
lg
   4: ImplicitCastExpr 0x5654000dc108 <ltable.c:240:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dc0c8 <col:10> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
[B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x5654000dc120 <ltable.c:240:5, col:12> 'int' lvalue
|-ImplicitCastExpr 0x5654000dc0f0 <col:5> 'int *' <LValueToRValue>
| `-DeclRefExpr 0x5654000dc0a0 <col:5> 'int *' lvalue ParmVar 0x5654000db0d8 'nums' 'int *'
`-ImplicitCastExpr 0x5654000dc108 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dc0c8 <col:10> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
[B3.2][[B3.4]]
   6: DeclRefExpr 0x5654000dc148 <ltable.c:240:17> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
lc
   7: ImplicitCastExpr 0x5654000dc170 <ltable.c:240:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dc148 <col:17> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
[B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CompoundAssignOperator 0x5654000dc188 <ltable.c:240:5, col:17> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-ArraySubscriptExpr 0x5654000dc120 <col:5, col:12> 'int' lvalue
| |-ImplicitCastExpr 0x5654000dc0f0 <col:5> 'int *' <LValueToRValue>
| | `-DeclRefExpr 0x5654000dc0a0 <col:5> 'int *' lvalue ParmVar 0x5654000db0d8 'nums' 'int *'
| `-ImplicitCastExpr 0x5654000dc108 <col:10> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5654000dc0c8 <col:10> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
`-ImplicitCastExpr 0x5654000dc170 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dc148 <col:17> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
[B3.5] += [B3.7]
   9: DeclRefExpr 0x5654000dc1c0 <ltable.c:241:5> 'int' lvalue Var 0x5654000db3e0 'ause' 'int'
ause
  10: DeclRefExpr 0x5654000dc1e8 <ltable.c:241:13> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
lc
  11: ImplicitCastExpr 0x5654000dc210 <ltable.c:241:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dc1e8 <col:13> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
[B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: CompoundAssignOperator 0x5654000dc228 <ltable.c:241:5, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x5654000dc1c0 <col:5> 'int' lvalue Var 0x5654000db3e0 'ause' 'int'
`-ImplicitCastExpr 0x5654000dc210 <col:13> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dc1e8 <col:13> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
[B3.9] += [B3.11]
   Preds (1): B7
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x5654000dbce8 <ltable.c:236:22> 'int' lvalue Var 0x5654000db490 'i' 'int'
i
   2: UnaryOperator 0x5654000dbd10 <ltable.c:236:22, col:23> 'int' postfix '++'
`-DeclRefExpr 0x5654000dbce8 <col:22> 'int' lvalue Var 0x5654000db490 'i' 'int'
[B4.1]++
   Preds (2): B5 B6
   Succs (1): B7

 [B5]
   1: DeclRefExpr 0x5654000dbfd0 <ltable.c:238:9> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
lc
   2: UnaryOperator 0x5654000dbff8 <ltable.c:238:9, col:11> 'int' postfix '++'
`-DeclRefExpr 0x5654000dbfd0 <col:9> 'int' lvalue Var 0x5654000db7c0 'lc' 'int'
[B5.1]++
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x5654000dbd30 <ltable.c:237:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
t
   2: ImplicitCastExpr 0x5654000dbd58 <ltable.c:237:21> 'const Table *' <LValueToRValue>
`-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B6.1] (ImplicitCastExpr, LValueToRValue, const Table *)
   3: MemberExpr 0x5654000dbd70 <ltable.c:237:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
`-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
  `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B6.2]->array
   4: ImplicitCastExpr 0x5654000dbe30 <ltable.c:237:21, col:24> 'TValue *' <LValueToRValue>
`-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
  `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
    `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B6.3] (ImplicitCastExpr, LValueToRValue, TValue *)
   5: DeclRefExpr 0x5654000dbda8 <ltable.c:237:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
i
   6: ImplicitCastExpr 0x5654000dbdf0 <ltable.c:237:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
[B6.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5654000dbdd0 <ltable.c:237:32> 'int' 1
1
   8: BinaryOperator 0x5654000dbe08 <ltable.c:237:30, col:32> 'int' '-'
|-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
`-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
[B6.6] - [B6.7]
   9: ArraySubscriptExpr 0x5654000dbe48 <ltable.c:237:21, col:33> 'TValue':'struct lua_TValue' lvalue
|-ImplicitCastExpr 0x5654000dbe30 <col:21, col:24> 'TValue *' <LValueToRValue>
| `-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
|   `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
|     `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
`-BinaryOperator 0x5654000dbe08 <col:30, col:32> 'int' '-'
  |-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
  `-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
[B6.4][[B6.8]]
  10: UnaryOperator 0x5654000dbe70 <ltable.c:237:20, col:33> 'TValue *' prefix '&'
`-ArraySubscriptExpr 0x5654000dbe48 <col:21, col:33> 'TValue':'struct lua_TValue' lvalue
  |-ImplicitCastExpr 0x5654000dbe30 <col:21, col:24> 'TValue *' <LValueToRValue>
  | `-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
  |   `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
  |     `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
  `-BinaryOperator 0x5654000dbe08 <col:30, col:32> 'int' '-'
    |-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
    `-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
&[B6.9]
  11: MemberExpr 0x5654000dbeb0 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5654000899e0
`-ParenExpr 0x5654000dbe90 <col:19, col:21> 'TValue *'
  `-UnaryOperator 0x5654000dbe70 <ltable.c:237:20, col:33> 'TValue *' prefix '&'
    `-ArraySubscriptExpr 0x5654000dbe48 <col:21, col:33> 'TValue':'struct lua_TValue' lvalue
      |-ImplicitCastExpr 0x5654000dbe30 <col:21, col:24> 'TValue *' <LValueToRValue>
      | `-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
      |   `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
      |     `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
      `-BinaryOperator 0x5654000dbe08 <col:30, col:32> 'int' '-'
        |-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
        `-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
([B6.10])->tt
  12: ImplicitCastExpr 0x5654000dbf28 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5654000dbee8 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5654000dbeb0 <col:19, col:24> 'int' lvalue ->tt 0x5654000899e0
    `-ParenExpr 0x5654000dbe90 <col:19, col:21> 'TValue *'
      `-UnaryOperator 0x5654000dbe70 <ltable.c:237:20, col:33> 'TValue *' prefix '&'
        `-ArraySubscriptExpr 0x5654000dbe48 <col:21, col:33> 'TValue':'struct lua_TValue' lvalue
          |-ImplicitCastExpr 0x5654000dbe30 <col:21, col:24> 'TValue *' <LValueToRValue>
          | `-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
          |   `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
          |     `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
          `-BinaryOperator 0x5654000dbe08 <col:30, col:32> 'int' '-'
            |-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
            `-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
([B6.11]) (ImplicitCastExpr, LValueToRValue, int)
  13: IntegerLiteral 0x5654000dbf08 <./lua.h:74:19> 'int' 0
0
  14: BinaryOperator 0x5654000dbf40 <./lobject.h:90:18, ./lua.h:74:19> 'int' '=='
|-ImplicitCastExpr 0x5654000dbf28 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5654000dbee8 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5654000dbeb0 <col:19, col:24> 'int' lvalue ->tt 0x5654000899e0
|     `-ParenExpr 0x5654000dbe90 <col:19, col:21> 'TValue *'
|       `-UnaryOperator 0x5654000dbe70 <ltable.c:237:20, col:33> 'TValue *' prefix '&'
|         `-ArraySubscriptExpr 0x5654000dbe48 <col:21, col:33> 'TValue':'struct lua_TValue' lvalue
|           |-ImplicitCastExpr 0x5654000dbe30 <col:21, col:24> 'TValue *' <LValueToRValue>
|           | `-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
|           |   `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
|           `-BinaryOperator 0x5654000dbe08 <col:30, col:32> 'int' '-'
|             |-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
|             `-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
`-IntegerLiteral 0x5654000dbf08 <./lua.h:74:19> 'int' 0
[B6.12] == [B6.13]
  15: UnaryOperator 0x5654000dbf88 <ltable.c:237:11, ./lobject.h:79:41> 'int' prefix '!'
`-ParenExpr 0x5654000dbf68 <col:20, col:41> 'int'
  `-BinaryOperator 0x5654000dbf40 <line:90:18, ./lua.h:74:19> 'int' '=='
    |-ImplicitCastExpr 0x5654000dbf28 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    | `-ParenExpr 0x5654000dbee8 <col:18, col:26> 'int' lvalue
    |   `-MemberExpr 0x5654000dbeb0 <col:19, col:24> 'int' lvalue ->tt 0x5654000899e0
    |     `-ParenExpr 0x5654000dbe90 <col:19, col:21> 'TValue *'
    |       `-UnaryOperator 0x5654000dbe70 <ltable.c:237:20, col:33> 'TValue *' prefix '&'
    |         `-ArraySubscriptExpr 0x5654000dbe48 <col:21, col:33> 'TValue':'struct lua_TValue' lvalue
    |           |-ImplicitCastExpr 0x5654000dbe30 <col:21, col:24> 'TValue *' <LValueToRValue>
    |           | `-MemberExpr 0x5654000dbd70 <col:21, col:24> 'TValue *const' lvalue ->array 0x56540009acb8
    |           |   `-ImplicitCastExpr 0x5654000dbd58 <col:21> 'const Table *' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5654000dbd30 <col:21> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
    |           `-BinaryOperator 0x5654000dbe08 <col:30, col:32> 'int' '-'
    |             |-ImplicitCastExpr 0x5654000dbdf0 <col:30> 'int' <LValueToRValue>
    |             | `-DeclRefExpr 0x5654000dbda8 <col:30> 'int' lvalue Var 0x5654000db490 'i' 'int'
    |             `-IntegerLiteral 0x5654000dbdd0 <col:32> 'int' 1
    `-IntegerLiteral 0x5654000dbf08 <./lua.h:74:19> 'int' 0
!([B6.14])
   T: if [B6.15]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclRefExpr 0x5654000dbc40 <ltable.c:236:12> 'int' lvalue Var 0x5654000db490 'i' 'int'
i
   2: ImplicitCastExpr 0x5654000dbc90 <ltable.c:236:12> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dbc40 <col:12> 'int' lvalue Var 0x5654000db490 'i' 'int'
[B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5654000dbc68 <ltable.c:236:17> 'int' lvalue Var 0x5654000db870 'lim' 'int'
lim
   4: ImplicitCastExpr 0x5654000dbca8 <ltable.c:236:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dbc68 <col:17> 'int' lvalue Var 0x5654000db870 'lim' 'int'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5654000dbcc0 <ltable.c:236:12, col:17> 'int' '<='
|-ImplicitCastExpr 0x5654000dbc90 <col:12> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000dbc40 <col:12> 'int' lvalue Var 0x5654000db490 'i' 'int'
`-ImplicitCastExpr 0x5654000dbca8 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dbc68 <col:17> 'int' lvalue Var 0x5654000db870 'lim' 'int'
[B7.2] <= [B7.4]
   T: for (; [B7.5]; ...)
   Preds (3): B4 B9 B10
   Succs (2): B6 B3

 [B8]
   T: break;
   Preds (1): B9
   Succs (1): B1

 [B9]
   1: DeclRefExpr 0x5654000dba48 <ltable.c:231:13> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
t
   2: ImplicitCastExpr 0x5654000dba70 <ltable.c:231:13> 'const Table *' <LValueToRValue>
`-DeclRefExpr 0x5654000dba48 <col:13> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B9.1] (ImplicitCastExpr, LValueToRValue, const Table *)
   3: MemberExpr 0x5654000dba88 <ltable.c:231:13, col:16> 'const int' lvalue ->sizearray 0x56540009ae68
`-ImplicitCastExpr 0x5654000dba70 <col:13> 'const Table *' <LValueToRValue>
  `-DeclRefExpr 0x5654000dba48 <col:13> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B9.2]->sizearray
   4: ImplicitCastExpr 0x5654000dbac0 <ltable.c:231:13, col:16> 'int' <LValueToRValue>
`-MemberExpr 0x5654000dba88 <col:13, col:16> 'const int' lvalue ->sizearray 0x56540009ae68
  `-ImplicitCastExpr 0x5654000dba70 <col:13> 'const Table *' <LValueToRValue>
    `-DeclRefExpr 0x5654000dba48 <col:13> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x5654000dba20 <ltable.c:231:7> 'int' lvalue Var 0x5654000db870 'lim' 'int'
lim
   6: BinaryOperator 0x5654000dbad8 <ltable.c:231:7, col:16> 'int' '='
|-DeclRefExpr 0x5654000dba20 <col:7> 'int' lvalue Var 0x5654000db870 'lim' 'int'
`-ImplicitCastExpr 0x5654000dbac0 <col:13, col:16> 'int' <LValueToRValue>
  `-MemberExpr 0x5654000dba88 <col:13, col:16> 'const int' lvalue ->sizearray 0x56540009ae68
    `-ImplicitCastExpr 0x5654000dba70 <col:13> 'const Table *' <LValueToRValue>
      `-DeclRefExpr 0x5654000dba48 <col:13> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B9.5] = [B9.4]
   7: DeclRefExpr 0x5654000dbb00 <ltable.c:232:11> 'int' lvalue Var 0x5654000db490 'i' 'int'
i
   8: ImplicitCastExpr 0x5654000dbb50 <ltable.c:232:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dbb00 <col:11> 'int' lvalue Var 0x5654000db490 'i' 'int'
[B9.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5654000dbb28 <ltable.c:232:15> 'int' lvalue Var 0x5654000db870 'lim' 'int'
lim
  10: ImplicitCastExpr 0x5654000dbb68 <ltable.c:232:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000dbb28 <col:15> 'int' lvalue Var 0x5654000db870 'lim' 'int'
[B9.9] (ImplicitCastExpr, LValueToRValue, int)
  11: BinaryOperator 0x5654000dbb80 <ltable.c:232:11, col:15> 'int' '>'
|-ImplicitCastExpr 0x5654000dbb50 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000dbb00 <col:11> 'int' lvalue Var 0x5654000db490 'i' 'int'
`-ImplicitCastExpr 0x5654000dbb68 <col:15> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000dbb28 <col:15> 'int' lvalue Var 0x5654000db870 'lim' 'int'
[B9.8] > [B9.10]
   T: if [B9.11]
   Preds (1): B10
   Succs (2): B8 B7

 [B10]
   1: IntegerLiteral 0x5654000db820 <ltable.c:228:14> 'int' 0
0
   2: DeclStmt 0x5654000db840 <ltable.c:228:5, col:15>col:9
`-VarDecl 0x5654000db7c0 <col:5, col:14> col:9 used lc 'int' cinit
  `-IntegerLiteral 0x5654000db820 <col:14> 'int' 0
int lc = 0;
   3: DeclRefExpr 0x5654000db8d0 <ltable.c:229:15> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
ttlg
   4: ImplicitCastExpr 0x5654000db8f8 <ltable.c:229:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000db8d0 <col:15> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x5654000db910 <ltable.c:229:5, col:19>col:9
`-VarDecl 0x5654000db870 <col:5, col:15> col:9 used lim 'int' cinit
  `-ImplicitCastExpr 0x5654000db8f8 <col:15> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5654000db8d0 <col:15> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
int lim = ttlg;
   6: DeclRefExpr 0x5654000db928 <ltable.c:230:9> 'int' lvalue Var 0x5654000db870 'lim' 'int'
lim
   7: ImplicitCastExpr 0x5654000db9c8 <ltable.c:230:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000db928 <col:9> 'int' lvalue Var 0x5654000db870 'lim' 'int'
[B10.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x5654000db950 <ltable.c:230:15> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
t
   9: ImplicitCastExpr 0x5654000db978 <ltable.c:230:15> 'const Table *' <LValueToRValue>
`-DeclRefExpr 0x5654000db950 <col:15> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B10.8] (ImplicitCastExpr, LValueToRValue, const Table *)
  10: MemberExpr 0x5654000db990 <ltable.c:230:15, col:18> 'const int' lvalue ->sizearray 0x56540009ae68
`-ImplicitCastExpr 0x5654000db978 <col:15> 'const Table *' <LValueToRValue>
  `-DeclRefExpr 0x5654000db950 <col:15> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B10.9]->sizearray
  11: ImplicitCastExpr 0x5654000db9e0 <ltable.c:230:15, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x5654000db990 <col:15, col:18> 'const int' lvalue ->sizearray 0x56540009ae68
  `-ImplicitCastExpr 0x5654000db978 <col:15> 'const Table *' <LValueToRValue>
    `-DeclRefExpr 0x5654000db950 <col:15> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B10.10] (ImplicitCastExpr, LValueToRValue, int)
  12: BinaryOperator 0x5654000db9f8 <ltable.c:230:9, col:18> 'int' '>'
|-ImplicitCastExpr 0x5654000db9c8 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000db928 <col:9> 'int' lvalue Var 0x5654000db870 'lim' 'int'
`-ImplicitCastExpr 0x5654000db9e0 <col:15, col:18> 'int' <LValueToRValue>
  `-MemberExpr 0x5654000db990 <col:15, col:18> 'const int' lvalue ->sizearray 0x56540009ae68
    `-ImplicitCastExpr 0x5654000db978 <col:15> 'const Table *' <LValueToRValue>
      `-DeclRefExpr 0x5654000db950 <col:15> 'const Table *' lvalue ParmVar 0x5654000db060 't' 'const Table *'
[B10.7] > [B10.11]
   T: if [B10.12]
   Preds (1): B11
   Succs (2): B9 B7

 [B11]
   1: DeclRefExpr 0x5654000db630 <ltable.c:227:22> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
lg
   2: ImplicitCastExpr 0x5654000db678 <ltable.c:227:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000db630 <col:22> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
[B11.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5654000db658 <ltable.c:42:18> 'int' 26
26
   4: BinaryOperator 0x5654000db690 <ltable.c:227:22, line:42:18> 'int' '<='
|-ImplicitCastExpr 0x5654000db678 <line:227:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000db630 <col:22> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
`-IntegerLiteral 0x5654000db658 <line:42:18> 'int' 26
[B11.2] <= [B11.3]
   T: for (...; [B11.4]; ...)
   Preds (2): B2 B12
   Succs (2): B10 B1

 [B12]
   1: DeclStmt 0x5654000db320 <ltable.c:223:3, col:9>col:7
`-VarDecl 0x5654000db2c0 <col:3, col:7> col:7 used lg 'int'
int lg;
   2: DeclStmt 0x5654000db3b0 <ltable.c:224:3, col:11>col:7
`-VarDecl 0x5654000db350 <col:3, col:7> col:7 used ttlg 'int'
int ttlg;
   3: IntegerLiteral 0x5654000db440 <ltable.c:225:14> 'int' 0
0
   4: DeclStmt 0x5654000db460 <ltable.c:225:3, col:15>col:7
`-VarDecl 0x5654000db3e0 <col:3, col:14> col:7 used ause 'int' cinit
  `-IntegerLiteral 0x5654000db440 <col:14> 'int' 0
int ause = 0;
   5: IntegerLiteral 0x5654000db4f0 <ltable.c:226:11> 'int' 1
1
   6: DeclStmt 0x5654000db510 <ltable.c:226:3, col:12>col:7
`-VarDecl 0x5654000db490 <col:3, col:11> col:7 used i 'int' cinit
  `-IntegerLiteral 0x5654000db4f0 <col:11> 'int' 1
int i = 1;
   7: IntegerLiteral 0x5654000db550 <ltable.c:227:11> 'int' 0
0
   8: DeclRefExpr 0x5654000db528 <ltable.c:227:8> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
lg
   9: BinaryOperator 0x5654000db570 <ltable.c:227:8, col:11> 'int' '='
|-DeclRefExpr 0x5654000db528 <col:8> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
`-IntegerLiteral 0x5654000db550 <col:11> 'int' 0
[B12.8] = [B12.7]
  10: IntegerLiteral 0x5654000db5c0 <ltable.c:227:19> 'int' 1
1
  11: DeclRefExpr 0x5654000db598 <ltable.c:227:14> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
ttlg
  12: BinaryOperator 0x5654000db5e0 <ltable.c:227:14, col:19> 'int' '='
|-DeclRefExpr 0x5654000db598 <col:14> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
`-IntegerLiteral 0x5654000db5c0 <col:19> 'int' 1
[B12.11] = [B12.10]
  13: BinaryOperator 0x5654000db608 <ltable.c:227:8, col:19> 'int' ','
|-BinaryOperator 0x5654000db570 <col:8, col:11> 'int' '='
| |-DeclRefExpr 0x5654000db528 <col:8> 'int' lvalue Var 0x5654000db2c0 'lg' 'int'
| `-IntegerLiteral 0x5654000db550 <col:11> 'int' 0
`-BinaryOperator 0x5654000db5e0 <col:14, col:19> 'int' '='
  |-DeclRefExpr 0x5654000db598 <col:14> 'int' lvalue Var 0x5654000db350 'ttlg' 'int'
  `-IntegerLiteral 0x5654000db5c0 <col:19> 'int' 1
... , [B12.12]
   Preds (1): B13
   Succs (1): B11

 [B0 (EXIT)]
   Preds (1): B1
