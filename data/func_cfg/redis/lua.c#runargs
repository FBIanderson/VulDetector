static int runargs(lua_State *L, char **argv, int n)
 [B19 (ENTRY)]
   Succs (1): B18

 [B1]
   1: IntegerLiteral 0x55cfe63719c8 <lua.c:319:10> 'int' 0
0
   2: ReturnStmt 0x55cfe63719e8 <lua.c:319:3, col:10>
`-IntegerLiteral 0x55cfe63719c8 <col:10> 'int' 0
return [B1.1];
   Preds (1): B17
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x55cfe6370700 <lua.c:296:22> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   2: UnaryOperator 0x55cfe6370728 <lua.c:296:22, col:23> 'int' postfix '++'
`-DeclRefExpr 0x55cfe6370700 <col:22> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B2.1]++
   Preds (4): B4 B5 B10 B15
   Succs (1): B17

 [B3]
   1: IntegerLiteral 0x55cfe6370908 <./lualib.h:49:30> 'int' 0
0
   2: CStyleCastExpr 0x55cfe6370938 <./lualib.h:49:24, col:30> 'void' <ToVoid>
`-IntegerLiteral 0x55cfe6370908 <col:30> 'int' 0
(void)[B3.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x55cfe6370980 <lua.c:299:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
argv
   4: ImplicitCastExpr 0x55cfe63709d0 <lua.c:299:13> 'char **' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370980 <col:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
[B3.3] (ImplicitCastExpr, LValueToRValue, char **)
   5: DeclRefExpr 0x55cfe63709a8 <lua.c:299:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   6: ImplicitCastExpr 0x55cfe63709e8 <lua.c:299:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe63709a8 <col:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x55cfe6370a00 <lua.c:299:13, col:19> 'char *' lvalue
|-ImplicitCastExpr 0x55cfe63709d0 <col:13> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370980 <col:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
`-ImplicitCastExpr 0x55cfe63709e8 <col:18> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55cfe63709a8 <col:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B3.4][[B3.6]]
   8: ImplicitCastExpr 0x55cfe6370a48 <lua.c:299:13, col:19> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe6370a00 <col:13, col:19> 'char *' lvalue
  |-ImplicitCastExpr 0x55cfe63709d0 <col:13> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x55cfe6370980 <col:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  `-ImplicitCastExpr 0x55cfe63709e8 <col:18> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55cfe63709a8 <col:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B3.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: IntegerLiteral 0x55cfe6370a28 <lua.c:299:21> 'int' 1
1
  10: ArraySubscriptExpr 0x55cfe6370a60 <lua.c:299:13, col:22> 'char' lvalue
|-ImplicitCastExpr 0x55cfe6370a48 <col:13, col:19> 'char *' <LValueToRValue>
| `-ArraySubscriptExpr 0x55cfe6370a00 <col:13, col:19> 'char *' lvalue
|   |-ImplicitCastExpr 0x55cfe63709d0 <col:13> 'char **' <LValueToRValue>
|   | `-DeclRefExpr 0x55cfe6370980 <col:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
|   `-ImplicitCastExpr 0x55cfe63709e8 <col:18> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55cfe63709a8 <col:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
`-IntegerLiteral 0x55cfe6370a28 <col:21> 'int' 1
[B3.8][[B3.9]]
  11: ImplicitCastExpr 0x55cfe6370a88 <lua.c:299:13, col:22> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe6370a60 <col:13, col:22> 'char' lvalue
  |-ImplicitCastExpr 0x55cfe6370a48 <col:13, col:19> 'char *' <LValueToRValue>
  | `-ArraySubscriptExpr 0x55cfe6370a00 <col:13, col:19> 'char *' lvalue
  |   |-ImplicitCastExpr 0x55cfe63709d0 <col:13> 'char **' <LValueToRValue>
  |   | `-DeclRefExpr 0x55cfe6370980 <col:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  |   `-ImplicitCastExpr 0x55cfe63709e8 <col:18> 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x55cfe63709a8 <col:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
  `-IntegerLiteral 0x55cfe6370a28 <col:21> 'int' 1
[B3.10] (ImplicitCastExpr, LValueToRValue, char)
  12: ImplicitCastExpr 0x55cfe6370aa0 <lua.c:299:13, col:22> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55cfe6370a88 <col:13, col:22> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55cfe6370a60 <col:13, col:22> 'char' lvalue
    |-ImplicitCastExpr 0x55cfe6370a48 <col:13, col:19> 'char *' <LValueToRValue>
    | `-ArraySubscriptExpr 0x55cfe6370a00 <col:13, col:19> 'char *' lvalue
    |   |-ImplicitCastExpr 0x55cfe63709d0 <col:13> 'char **' <LValueToRValue>
    |   | `-DeclRefExpr 0x55cfe6370980 <col:13> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
    |   `-ImplicitCastExpr 0x55cfe63709e8 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55cfe63709a8 <col:18> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
    `-IntegerLiteral 0x55cfe6370a28 <col:21> 'int' 1
[B3.11] (ImplicitCastExpr, IntegralCast, int)
   T: switch [B3.12]
   Preds (1): B16
   Succs (3): B9 B14 B4

 [B4]
  default:
   T: break;
   Preds (1): B3
   Succs (1): B2

 [B5]
   T: break;
   Preds (1): B7
   Succs (1): B2

 [B6]
   1: IntegerLiteral 0x55cfe6371868 <lua.c:313:18> 'int' 1
1
   2: ReturnStmt 0x55cfe6371888 <lua.c:313:11, col:18>
`-IntegerLiteral 0x55cfe6371868 <col:18> 'int' 1
return [B6.1];
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: IntegerLiteral 0x55cfe63716c8 <./lualib.h:49:30> 'int' 0
0
   2: CStyleCastExpr 0x55cfe63716f8 <./lualib.h:49:24, col:30> 'void' <ToVoid>
`-IntegerLiteral 0x55cfe63716c8 <col:30> 'int' 0
(void)[B7.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x55cfe6371740 <lua.c:312:13> 'int (lua_State *, const char *)' Function 0x55cfe62d2ca0 'dolibrary' 'int (lua_State *, const char *)'
dolibrary
   4: ImplicitCastExpr 0x55cfe63717e8 <lua.c:312:13> 'int (*)(lua_State *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55cfe6371740 <col:13> 'int (lua_State *, const char *)' Function 0x55cfe62d2ca0 'dolibrary' 'int (lua_State *, const char *)'
[B7.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const char *))
   5: DeclRefExpr 0x55cfe6371768 <lua.c:312:23> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x55cfe6371838 <lua.c:312:23> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55cfe6371768 <col:23> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
[B7.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: DeclRefExpr 0x55cfe6371790 <lua.c:312:26> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
filename
   8: ImplicitCastExpr 0x55cfe6371850 <lua.c:312:26> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe6371790 <col:26> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
[B7.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: CallExpr 0x55cfe6371800 <lua.c:312:13, col:34> 'int'
|-ImplicitCastExpr 0x55cfe63717e8 <col:13> 'int (*)(lua_State *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55cfe6371740 <col:13> 'int (lua_State *, const char *)' Function 0x55cfe62d2ca0 'dolibrary' 'int (lua_State *, const char *)'
|-ImplicitCastExpr 0x55cfe6371838 <col:23> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6371768 <col:23> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
`-ImplicitCastExpr 0x55cfe6371850 <col:26> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6371790 <col:26> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
[B7.4]([B7.6], [B7.8])
   T: if [B7.9]
   Preds (2): B8 B9
   Succs (2): B6 B5

 [B8]
   1: DeclRefExpr 0x55cfe6371550 <lua.c:310:43> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
argv
   2: ImplicitCastExpr 0x55cfe63715c0 <lua.c:310:43> 'char **' <LValueToRValue>
`-DeclRefExpr 0x55cfe6371550 <col:43> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
[B8.1] (ImplicitCastExpr, LValueToRValue, char **)
   3: DeclRefExpr 0x55cfe6371578 <lua.c:310:50> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   4: UnaryOperator 0x55cfe63715a0 <lua.c:310:48, col:50> 'int' prefix '++'
`-DeclRefExpr 0x55cfe6371578 <col:50> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
++[B8.3]
   5: ArraySubscriptExpr 0x55cfe63715d8 <lua.c:310:43, col:51> 'char *' lvalue
|-ImplicitCastExpr 0x55cfe63715c0 <col:43> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6371550 <col:43> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
`-UnaryOperator 0x55cfe63715a0 <col:48, col:50> 'int' prefix '++'
  `-DeclRefExpr 0x55cfe6371578 <col:50> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B8.2][[B8.4]]
   6: ImplicitCastExpr 0x55cfe6371600 <lua.c:310:43, col:51> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe63715d8 <col:43, col:51> 'char *' lvalue
  |-ImplicitCastExpr 0x55cfe63715c0 <col:43> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x55cfe6371550 <col:43> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  `-UnaryOperator 0x55cfe63715a0 <col:48, col:50> 'int' prefix '++'
    `-DeclRefExpr 0x55cfe6371578 <col:50> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B8.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: ImplicitCastExpr 0x55cfe6371618 <lua.c:310:43, col:51> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55cfe6371600 <col:43, col:51> 'char *' <LValueToRValue>
  `-ArraySubscriptExpr 0x55cfe63715d8 <col:43, col:51> 'char *' lvalue
    |-ImplicitCastExpr 0x55cfe63715c0 <col:43> 'char **' <LValueToRValue>
    | `-DeclRefExpr 0x55cfe6371550 <col:43> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
    `-UnaryOperator 0x55cfe63715a0 <col:48, col:50> 'int' prefix '++'
      `-DeclRefExpr 0x55cfe6371578 <col:50> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B8.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x55cfe6371528 <lua.c:310:32> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
filename
   9: BinaryOperator 0x55cfe6371630 <lua.c:310:32, col:51> 'const char *' '='
|-DeclRefExpr 0x55cfe6371528 <col:32> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
`-ImplicitCastExpr 0x55cfe6371618 <col:43, col:51> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55cfe6371600 <col:43, col:51> 'char *' <LValueToRValue>
    `-ArraySubscriptExpr 0x55cfe63715d8 <col:43, col:51> 'char *' lvalue
      |-ImplicitCastExpr 0x55cfe63715c0 <col:43> 'char **' <LValueToRValue>
      | `-DeclRefExpr 0x55cfe6371550 <col:43> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
      `-UnaryOperator 0x55cfe63715a0 <col:48, col:50> 'int' prefix '++'
        `-DeclRefExpr 0x55cfe6371578 <col:50> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B8.8] = [B8.7]
   Preds (1): B9
   Succs (1): B7

 [B9]
  case 'l':
   1: DeclRefExpr 0x55cfe6371320 <lua.c:309:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
argv
   2: ImplicitCastExpr 0x55cfe6371370 <lua.c:309:32> 'char **' <LValueToRValue>
`-DeclRefExpr 0x55cfe6371320 <col:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
[B9.1] (ImplicitCastExpr, LValueToRValue, char **)
   3: DeclRefExpr 0x55cfe6371348 <lua.c:309:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   4: ImplicitCastExpr 0x55cfe6371388 <lua.c:309:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe6371348 <col:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x55cfe63713a0 <lua.c:309:32, col:38> 'char *' lvalue
|-ImplicitCastExpr 0x55cfe6371370 <col:32> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6371320 <col:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
`-ImplicitCastExpr 0x55cfe6371388 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6371348 <col:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B9.2][[B9.4]]
   6: ImplicitCastExpr 0x55cfe63713e8 <lua.c:309:32, col:38> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe63713a0 <col:32, col:38> 'char *' lvalue
  |-ImplicitCastExpr 0x55cfe6371370 <col:32> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x55cfe6371320 <col:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  `-ImplicitCastExpr 0x55cfe6371388 <col:37> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55cfe6371348 <col:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B9.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: IntegerLiteral 0x55cfe63713c8 <lua.c:309:42> 'int' 2
2
   8: BinaryOperator 0x55cfe6371400 <lua.c:309:32, col:42> 'char *' '+'
|-ImplicitCastExpr 0x55cfe63713e8 <col:32, col:38> 'char *' <LValueToRValue>
| `-ArraySubscriptExpr 0x55cfe63713a0 <col:32, col:38> 'char *' lvalue
|   |-ImplicitCastExpr 0x55cfe6371370 <col:32> 'char **' <LValueToRValue>
|   | `-DeclRefExpr 0x55cfe6371320 <col:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
|   `-ImplicitCastExpr 0x55cfe6371388 <col:37> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55cfe6371348 <col:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
`-IntegerLiteral 0x55cfe63713c8 <col:42> 'int' 2
[B9.6] + [B9.7]
   9: ImplicitCastExpr 0x55cfe6371428 <lua.c:309:32, col:42> 'const char *' <BitCast>
`-BinaryOperator 0x55cfe6371400 <col:32, col:42> 'char *' '+'
  |-ImplicitCastExpr 0x55cfe63713e8 <col:32, col:38> 'char *' <LValueToRValue>
  | `-ArraySubscriptExpr 0x55cfe63713a0 <col:32, col:38> 'char *' lvalue
  |   |-ImplicitCastExpr 0x55cfe6371370 <col:32> 'char **' <LValueToRValue>
  |   | `-DeclRefExpr 0x55cfe6371320 <col:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  |   `-ImplicitCastExpr 0x55cfe6371388 <col:37> 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x55cfe6371348 <col:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
  `-IntegerLiteral 0x55cfe63713c8 <col:42> 'int' 2
[B9.8] (ImplicitCastExpr, BitCast, const char *)
  10: DeclStmt 0x55cfe6371440 <lua.c:309:9, col:43>col:21
`-VarDecl 0x55cfe63712c0 <col:9, col:42> col:21 used filename 'const char *' cinit
  `-ImplicitCastExpr 0x55cfe6371428 <col:32, col:42> 'const char *' <BitCast>
    `-BinaryOperator 0x55cfe6371400 <col:32, col:42> 'char *' '+'
      |-ImplicitCastExpr 0x55cfe63713e8 <col:32, col:38> 'char *' <LValueToRValue>
      | `-ArraySubscriptExpr 0x55cfe63713a0 <col:32, col:38> 'char *' lvalue
      |   |-ImplicitCastExpr 0x55cfe6371370 <col:32> 'char **' <LValueToRValue>
      |   | `-DeclRefExpr 0x55cfe6371320 <col:32> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
      |   `-ImplicitCastExpr 0x55cfe6371388 <col:37> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x55cfe6371348 <col:37> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
      `-IntegerLiteral 0x55cfe63713c8 <col:42> 'int' 2
const char *filename = argv[i] + 2;
  11: DeclRefExpr 0x55cfe6371458 <lua.c:310:14> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
filename
  12: ImplicitCastExpr 0x55cfe6371480 <lua.c:310:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe6371458 <col:14> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
[B9.11] (ImplicitCastExpr, LValueToRValue, const char *)
  13: UnaryOperator 0x55cfe6371498 <lua.c:310:13, col:14> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55cfe6371480 <col:14> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6371458 <col:14> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
*[B9.12]
  14: ImplicitCastExpr 0x55cfe63714d0 <lua.c:310:13, col:14> 'char' <LValueToRValue>
`-UnaryOperator 0x55cfe6371498 <col:13, col:14> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55cfe6371480 <col:14> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55cfe6371458 <col:14> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
[B9.13] (ImplicitCastExpr, LValueToRValue, char)
  15: ImplicitCastExpr 0x55cfe63714e8 <lua.c:310:13, col:14> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55cfe63714d0 <col:13, col:14> 'char' <LValueToRValue>
  `-UnaryOperator 0x55cfe6371498 <col:13, col:14> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55cfe6371480 <col:14> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55cfe6371458 <col:14> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
[B9.14] (ImplicitCastExpr, IntegralCast, int)
  16: CharacterLiteral 0x55cfe63714b8 <lua.c:310:26> 'int' 0
'\x00'
  17: BinaryOperator 0x55cfe6371500 <lua.c:310:13, col:26> 'int' '=='
|-ImplicitCastExpr 0x55cfe63714e8 <col:13, col:14> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55cfe63714d0 <col:13, col:14> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55cfe6371498 <col:13, col:14> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55cfe6371480 <col:14> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6371458 <col:14> 'const char *' lvalue Var 0x55cfe63712c0 'filename' 'const char *'
`-CharacterLiteral 0x55cfe63714b8 <col:26> 'int' 0
[B9.15] == [B9.16]
   T: if [B9.17]
   Preds (1): B3
   Succs (2): B8 B7

 [B10]
   T: break;
   Preds (1): B12
   Succs (1): B2

 [B11]
   1: IntegerLiteral 0x55cfe63711a8 <lua.c:305:18> 'int' 1
1
   2: ReturnStmt 0x55cfe63711c8 <lua.c:305:11, col:18>
`-IntegerLiteral 0x55cfe63711a8 <col:18> 'int' 1
return [B11.1];
   Preds (1): B12
   Succs (1): B0

 [B12]
   1: IntegerLiteral 0x55cfe6370f20 <./lualib.h:49:30> 'int' 0
0
   2: CStyleCastExpr 0x55cfe6370f50 <./lualib.h:49:24, col:30> 'void' <ToVoid>
`-IntegerLiteral 0x55cfe6370f20 <col:30> 'int' 0
(void)[B12.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x55cfe6370f98 <lua.c:304:13> 'int (lua_State *, const char *, const char *)' Function 0x55cfe62d2548 'dostring' 'int (lua_State *, const char *, const char *)'
dostring
   4: ImplicitCastExpr 0x55cfe63710a8 <lua.c:304:13> 'int (*)(lua_State *, const char *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55cfe6370f98 <col:13> 'int (lua_State *, const char *, const char *)' Function 0x55cfe62d2548 'dostring' 'int (lua_State *, const char *, const char *)'
[B12.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const char *, const char *))
   5: DeclRefExpr 0x55cfe6370fc0 <lua.c:304:22> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x55cfe6371100 <lua.c:304:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370fc0 <col:22> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
[B12.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: DeclRefExpr 0x55cfe6370fe8 <lua.c:304:25> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
chunk
   8: ImplicitCastExpr 0x55cfe6371118 <lua.c:304:25> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370fe8 <col:25> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
[B12.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: StringLiteral 0x55cfe6371010 <lua.c:304:32> 'char [16]' lvalue "=(command line)"
"=(command line)"
  10: ImplicitCastExpr 0x55cfe6371130 <lua.c:304:32> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55cfe6371010 <col:32> 'char [16]' lvalue "=(command line)"
[B12.9] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  11: ImplicitCastExpr 0x55cfe6371148 <lua.c:304:32> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55cfe6371130 <col:32> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55cfe6371010 <col:32> 'char [16]' lvalue "=(command line)"
[B12.10] (ImplicitCastExpr, BitCast, const char *)
  12: CallExpr 0x55cfe63710c0 <lua.c:304:13, col:49> 'int'
|-ImplicitCastExpr 0x55cfe63710a8 <col:13> 'int (*)(lua_State *, const char *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55cfe6370f98 <col:13> 'int (lua_State *, const char *, const char *)' Function 0x55cfe62d2548 'dostring' 'int (lua_State *, const char *, const char *)'
|-ImplicitCastExpr 0x55cfe6371100 <col:22> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370fc0 <col:22> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
|-ImplicitCastExpr 0x55cfe6371118 <col:25> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370fe8 <col:25> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
`-ImplicitCastExpr 0x55cfe6371148 <col:32> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55cfe6371130 <col:32> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55cfe6371010 <col:32> 'char [16]' lvalue "=(command line)"
[B12.4]([B12.6], [B12.8], [B12.11])
  13: IntegerLiteral 0x55cfe6371160 <lua.c:304:54> 'int' 0
0
  14: BinaryOperator 0x55cfe6371180 <lua.c:304:13, col:54> 'int' '!='
|-CallExpr 0x55cfe63710c0 <col:13, col:49> 'int'
| |-ImplicitCastExpr 0x55cfe63710a8 <col:13> 'int (*)(lua_State *, const char *, const char *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55cfe6370f98 <col:13> 'int (lua_State *, const char *, const char *)' Function 0x55cfe62d2548 'dostring' 'int (lua_State *, const char *, const char *)'
| |-ImplicitCastExpr 0x55cfe6371100 <col:22> 'lua_State *' <LValueToRValue>
| | `-DeclRefExpr 0x55cfe6370fc0 <col:22> 'lua_State *' lvalue ParmVar 0x55cfe63702f8 'L' 'lua_State *'
| |-ImplicitCastExpr 0x55cfe6371118 <col:25> 'const char *' <LValueToRValue>
| | `-DeclRefExpr 0x55cfe6370fe8 <col:25> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
| `-ImplicitCastExpr 0x55cfe6371148 <col:32> 'const char *' <BitCast>
|   `-ImplicitCastExpr 0x55cfe6371130 <col:32> 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x55cfe6371010 <col:32> 'char [16]' lvalue "=(command line)"
`-IntegerLiteral 0x55cfe6371160 <col:54> 'int' 0
[B12.12] != [B12.13]
   T: if [B12.14]
   Preds (2): B13 B14
   Succs (2): B11 B10

 [B13]
   1: DeclRefExpr 0x55cfe6370de0 <lua.c:302:37> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
argv
   2: ImplicitCastExpr 0x55cfe6370e50 <lua.c:302:37> 'char **' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370de0 <col:37> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
[B13.1] (ImplicitCastExpr, LValueToRValue, char **)
   3: DeclRefExpr 0x55cfe6370e08 <lua.c:302:44> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   4: UnaryOperator 0x55cfe6370e30 <lua.c:302:42, col:44> 'int' prefix '++'
`-DeclRefExpr 0x55cfe6370e08 <col:44> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
++[B13.3]
   5: ArraySubscriptExpr 0x55cfe6370e68 <lua.c:302:37, col:45> 'char *' lvalue
|-ImplicitCastExpr 0x55cfe6370e50 <col:37> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370de0 <col:37> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
`-UnaryOperator 0x55cfe6370e30 <col:42, col:44> 'int' prefix '++'
  `-DeclRefExpr 0x55cfe6370e08 <col:44> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B13.2][[B13.4]]
   6: ImplicitCastExpr 0x55cfe6370e90 <lua.c:302:37, col:45> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe6370e68 <col:37, col:45> 'char *' lvalue
  |-ImplicitCastExpr 0x55cfe6370e50 <col:37> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x55cfe6370de0 <col:37> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  `-UnaryOperator 0x55cfe6370e30 <col:42, col:44> 'int' prefix '++'
    `-DeclRefExpr 0x55cfe6370e08 <col:44> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B13.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: ImplicitCastExpr 0x55cfe6370ea8 <lua.c:302:37, col:45> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55cfe6370e90 <col:37, col:45> 'char *' <LValueToRValue>
  `-ArraySubscriptExpr 0x55cfe6370e68 <col:37, col:45> 'char *' lvalue
    |-ImplicitCastExpr 0x55cfe6370e50 <col:37> 'char **' <LValueToRValue>
    | `-DeclRefExpr 0x55cfe6370de0 <col:37> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
    `-UnaryOperator 0x55cfe6370e30 <col:42, col:44> 'int' prefix '++'
      `-DeclRefExpr 0x55cfe6370e08 <col:44> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B13.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x55cfe6370db8 <lua.c:302:29> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
chunk
   9: BinaryOperator 0x55cfe6370ec0 <lua.c:302:29, col:45> 'const char *' '='
|-DeclRefExpr 0x55cfe6370db8 <col:29> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
`-ImplicitCastExpr 0x55cfe6370ea8 <col:37, col:45> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55cfe6370e90 <col:37, col:45> 'char *' <LValueToRValue>
    `-ArraySubscriptExpr 0x55cfe6370e68 <col:37, col:45> 'char *' lvalue
      |-ImplicitCastExpr 0x55cfe6370e50 <col:37> 'char **' <LValueToRValue>
      | `-DeclRefExpr 0x55cfe6370de0 <col:37> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
      `-UnaryOperator 0x55cfe6370e30 <col:42, col:44> 'int' prefix '++'
        `-DeclRefExpr 0x55cfe6370e08 <col:44> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B13.8] = [B13.7]
   Preds (1): B14
   Succs (1): B12

 [B14]
  case 'e':
   1: DeclRefExpr 0x55cfe6370bb0 <lua.c:301:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
argv
   2: ImplicitCastExpr 0x55cfe6370c00 <lua.c:301:29> 'char **' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370bb0 <col:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
[B14.1] (ImplicitCastExpr, LValueToRValue, char **)
   3: DeclRefExpr 0x55cfe6370bd8 <lua.c:301:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   4: ImplicitCastExpr 0x55cfe6370c18 <lua.c:301:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370bd8 <col:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B14.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x55cfe6370c30 <lua.c:301:29, col:35> 'char *' lvalue
|-ImplicitCastExpr 0x55cfe6370c00 <col:29> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370bb0 <col:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
`-ImplicitCastExpr 0x55cfe6370c18 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6370bd8 <col:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B14.2][[B14.4]]
   6: ImplicitCastExpr 0x55cfe6370c78 <lua.c:301:29, col:35> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe6370c30 <col:29, col:35> 'char *' lvalue
  |-ImplicitCastExpr 0x55cfe6370c00 <col:29> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x55cfe6370bb0 <col:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  `-ImplicitCastExpr 0x55cfe6370c18 <col:34> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55cfe6370bd8 <col:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B14.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: IntegerLiteral 0x55cfe6370c58 <lua.c:301:39> 'int' 2
2
   8: BinaryOperator 0x55cfe6370c90 <lua.c:301:29, col:39> 'char *' '+'
|-ImplicitCastExpr 0x55cfe6370c78 <col:29, col:35> 'char *' <LValueToRValue>
| `-ArraySubscriptExpr 0x55cfe6370c30 <col:29, col:35> 'char *' lvalue
|   |-ImplicitCastExpr 0x55cfe6370c00 <col:29> 'char **' <LValueToRValue>
|   | `-DeclRefExpr 0x55cfe6370bb0 <col:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
|   `-ImplicitCastExpr 0x55cfe6370c18 <col:34> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55cfe6370bd8 <col:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
`-IntegerLiteral 0x55cfe6370c58 <col:39> 'int' 2
[B14.6] + [B14.7]
   9: ImplicitCastExpr 0x55cfe6370cb8 <lua.c:301:29, col:39> 'const char *' <BitCast>
`-BinaryOperator 0x55cfe6370c90 <col:29, col:39> 'char *' '+'
  |-ImplicitCastExpr 0x55cfe6370c78 <col:29, col:35> 'char *' <LValueToRValue>
  | `-ArraySubscriptExpr 0x55cfe6370c30 <col:29, col:35> 'char *' lvalue
  |   |-ImplicitCastExpr 0x55cfe6370c00 <col:29> 'char **' <LValueToRValue>
  |   | `-DeclRefExpr 0x55cfe6370bb0 <col:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  |   `-ImplicitCastExpr 0x55cfe6370c18 <col:34> 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x55cfe6370bd8 <col:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
  `-IntegerLiteral 0x55cfe6370c58 <col:39> 'int' 2
[B14.8] (ImplicitCastExpr, BitCast, const char *)
  10: DeclStmt 0x55cfe6370cd0 <lua.c:301:9, col:40>col:21
`-VarDecl 0x55cfe6370b50 <col:9, col:39> col:21 used chunk 'const char *' cinit
  `-ImplicitCastExpr 0x55cfe6370cb8 <col:29, col:39> 'const char *' <BitCast>
    `-BinaryOperator 0x55cfe6370c90 <col:29, col:39> 'char *' '+'
      |-ImplicitCastExpr 0x55cfe6370c78 <col:29, col:35> 'char *' <LValueToRValue>
      | `-ArraySubscriptExpr 0x55cfe6370c30 <col:29, col:35> 'char *' lvalue
      |   |-ImplicitCastExpr 0x55cfe6370c00 <col:29> 'char **' <LValueToRValue>
      |   | `-DeclRefExpr 0x55cfe6370bb0 <col:29> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
      |   `-ImplicitCastExpr 0x55cfe6370c18 <col:34> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x55cfe6370bd8 <col:34> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
      `-IntegerLiteral 0x55cfe6370c58 <col:39> 'int' 2
const char *chunk = argv[i] + 2;
  11: DeclRefExpr 0x55cfe6370ce8 <lua.c:302:14> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
chunk
  12: ImplicitCastExpr 0x55cfe6370d10 <lua.c:302:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370ce8 <col:14> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
[B14.11] (ImplicitCastExpr, LValueToRValue, const char *)
  13: UnaryOperator 0x55cfe6370d28 <lua.c:302:13, col:14> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55cfe6370d10 <col:14> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6370ce8 <col:14> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
*[B14.12]
  14: ImplicitCastExpr 0x55cfe6370d60 <lua.c:302:13, col:14> 'char' <LValueToRValue>
`-UnaryOperator 0x55cfe6370d28 <col:13, col:14> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55cfe6370d10 <col:14> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55cfe6370ce8 <col:14> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
[B14.13] (ImplicitCastExpr, LValueToRValue, char)
  15: ImplicitCastExpr 0x55cfe6370d78 <lua.c:302:13, col:14> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55cfe6370d60 <col:13, col:14> 'char' <LValueToRValue>
  `-UnaryOperator 0x55cfe6370d28 <col:13, col:14> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55cfe6370d10 <col:14> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55cfe6370ce8 <col:14> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
[B14.14] (ImplicitCastExpr, IntegralCast, int)
  16: CharacterLiteral 0x55cfe6370d48 <lua.c:302:23> 'int' 0
'\x00'
  17: BinaryOperator 0x55cfe6370d90 <lua.c:302:13, col:23> 'int' '=='
|-ImplicitCastExpr 0x55cfe6370d78 <col:13, col:14> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55cfe6370d60 <col:13, col:14> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55cfe6370d28 <col:13, col:14> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55cfe6370d10 <col:14> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6370ce8 <col:14> 'const char *' lvalue Var 0x55cfe6370b50 'chunk' 'const char *'
`-CharacterLiteral 0x55cfe6370d48 <col:23> 'int' 0
[B14.15] == [B14.16]
   T: if [B14.17]
   Preds (1): B3
   Succs (2): B13 B12

 [B15]
   T: continue;
   Preds (1): B16
   Succs (1): B2

 [B16]
   1: DeclRefExpr 0x55cfe6370748 <lua.c:297:9> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
argv
   2: ImplicitCastExpr 0x55cfe6370798 <lua.c:297:9> 'char **' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370748 <col:9> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
[B16.1] (ImplicitCastExpr, LValueToRValue, char **)
   3: DeclRefExpr 0x55cfe6370770 <lua.c:297:14> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   4: ImplicitCastExpr 0x55cfe63707b0 <lua.c:297:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370770 <col:14> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B16.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x55cfe63707c8 <lua.c:297:9, col:15> 'char *' lvalue
|-ImplicitCastExpr 0x55cfe6370798 <col:9> 'char **' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370748 <col:9> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
`-ImplicitCastExpr 0x55cfe63707b0 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6370770 <col:14> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B16.2][[B16.4]]
   6: ImplicitCastExpr 0x55cfe6370870 <lua.c:297:9, col:15> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55cfe63707c8 <col:9, col:15> 'char *' lvalue
  |-ImplicitCastExpr 0x55cfe6370798 <col:9> 'char **' <LValueToRValue>
  | `-DeclRefExpr 0x55cfe6370748 <col:9> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
  `-ImplicitCastExpr 0x55cfe63707b0 <col:14> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55cfe6370770 <col:14> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B16.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: IntegerLiteral 0x55cfe63707f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   8: CStyleCastExpr 0x55cfe6370828 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55cfe63707f0 <col:24> 'int' 0
(void *)[B16.7] (CStyleCastExpr, NullToPointer, void *)
   9: ImplicitCastExpr 0x55cfe6370888 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char *' <BitCast>
`-ParenExpr 0x55cfe6370850 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55cfe6370828 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55cfe63707f0 <col:24> 'int' 0
([B16.8]) (ImplicitCastExpr, BitCast, char *)
  10: BinaryOperator 0x55cfe63708a0 <lua.c:297:9, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x55cfe6370870 <lua.c:297:9, col:15> 'char *' <LValueToRValue>
| `-ArraySubscriptExpr 0x55cfe63707c8 <col:9, col:15> 'char *' lvalue
|   |-ImplicitCastExpr 0x55cfe6370798 <col:9> 'char **' <LValueToRValue>
|   | `-DeclRefExpr 0x55cfe6370748 <col:9> 'char **' lvalue ParmVar 0x55cfe6370370 'argv' 'char **'
|   `-ImplicitCastExpr 0x55cfe63707b0 <col:14> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55cfe6370770 <col:14> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
`-ImplicitCastExpr 0x55cfe6370888 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char *' <BitCast>
  `-ParenExpr 0x55cfe6370850 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55cfe6370828 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55cfe63707f0 <col:24> 'int' 0
[B16.6] == [B16.9]
   T: if [B16.10]
   Preds (1): B17
   Succs (2): B15 B3

 [B17]
   1: DeclRefExpr 0x55cfe6370640 <lua.c:296:15> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   2: ImplicitCastExpr 0x55cfe63706a8 <lua.c:296:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370640 <col:15> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
[B17.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x55cfe6370680 <lua.c:296:19> 'int' lvalue ParmVar 0x55cfe63703e8 'n' 'int'
n
   4: ImplicitCastExpr 0x55cfe63706c0 <lua.c:296:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe6370680 <col:19> 'int' lvalue ParmVar 0x55cfe63703e8 'n' 'int'
[B17.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x55cfe63706d8 <lua.c:296:15, col:19> 'int' '<'
|-ImplicitCastExpr 0x55cfe63706a8 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55cfe6370640 <col:15> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
`-ImplicitCastExpr 0x55cfe63706c0 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55cfe6370680 <col:19> 'int' lvalue ParmVar 0x55cfe63703e8 'n' 'int'
[B17.2] < [B17.4]
   T: for (...; [B17.5]; ...)
   Preds (2): B2 B18
   Succs (2): B16 B1

 [B18]
   1: DeclStmt 0x55cfe63705b8 <lua.c:295:3, col:8>col:7
`-VarDecl 0x55cfe6370558 <col:3, col:7> col:7 used i 'int'
int i;
   2: IntegerLiteral 0x55cfe63705f8 <lua.c:296:12> 'int' 1
1
   3: DeclRefExpr 0x55cfe63705d0 <lua.c:296:8> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
i
   4: BinaryOperator 0x55cfe6370618 <lua.c:296:8, col:12> 'int' '='
|-DeclRefExpr 0x55cfe63705d0 <col:8> 'int' lvalue Var 0x55cfe6370558 'i' 'int'
`-IntegerLiteral 0x55cfe63705f8 <col:12> 'int' 1
[B18.3] = [B18.2]
   Preds (1): B19
   Succs (1): B17

 [B0 (EXIT)]
   Preds (3): B1 B6 B11
