int luaD_poscall(lua_State *L, StkId firstResult)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: DeclRefExpr 0x55f42eedbe38 <ldo.c:359:12> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
res
   2: ImplicitCastExpr 0x55f42eedbe60 <ldo.c:359:12> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedbe38 <col:12> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
[B1.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x55f42eedbdc0 <ldo.c:359:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55f42eedbde8 <ldo.c:359:3> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedbdc0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x55f42eedbe00 <ldo.c:359:3, col:6> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
`-ImplicitCastExpr 0x55f42eedbde8 <col:3> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedbdc0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B1.4]->top
   6: BinaryOperator 0x55f42eedbe78 <ldo.c:359:3, col:12> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eedbe00 <col:3, col:6> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
| `-ImplicitCastExpr 0x55f42eedbde8 <col:3> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eedbdc0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
`-ImplicitCastExpr 0x55f42eedbe60 <col:12> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedbe38 <col:12> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
[B1.5] = [B1.2]
   7: DeclRefExpr 0x55f42eedbea0 <ldo.c:360:11> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
wanted
   8: ImplicitCastExpr 0x55f42eedbf28 <ldo.c:360:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x55f42eedbea0 <col:11> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x55f42eedbec8 <./lua.h:30:23> 'int' 1
1
  10: UnaryOperator 0x55f42eedbee8 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x55f42eedbec8 <col:23> 'int' 1
-[B1.9]
  11: BinaryOperator 0x55f42eedbf40 <ldo.c:360:11, ./lua.h:30:24> 'int' '-'
|-ImplicitCastExpr 0x55f42eedbf28 <ldo.c:360:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55f42eedbea0 <col:11> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
`-ParenExpr 0x55f42eedbf08 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x55f42eedbee8 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x55f42eedbec8 <col:23> 'int' 1
[B1.8] - ([B1.10])
  12: ReturnStmt 0x55f42eedbf88 <ldo.c:360:3, col:31>
`-ParenExpr 0x55f42eedbf68 <col:10, col:31> 'int'
  `-BinaryOperator 0x55f42eedbf40 <col:11, ./lua.h:30:24> 'int' '-'
    |-ImplicitCastExpr 0x55f42eedbf28 <ldo.c:360:11> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x55f42eedbea0 <col:11> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
    `-ParenExpr 0x55f42eedbf08 <./lua.h:30:21, col:24> 'int'
      `-UnaryOperator 0x55f42eedbee8 <col:22, col:23> 'int' prefix '-'
        `-IntegerLiteral 0x55f42eedbec8 <col:23> 'int' 1
return ([B1.11]);
   Preds (1): B4
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: IntegerLiteral 0x55f42eedbd38 <./lua.h:74:19> 'int' 0
0
   2: DeclRefExpr 0x55f42eedb7c8 <ldo.c:358:17> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
res
   3: UnaryOperator 0x55f42eedb7f0 <ldo.c:358:17, col:20> 'StkId':'TValue *' postfix '++'
`-DeclRefExpr 0x55f42eedb7c8 <col:17> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
[B3.2]++
   4: MemberExpr 0x55f42eedbd00 <./lobject.h:117:27, col:34> 'int' lvalue ->tt 0x55f42ee5e980
`-ParenExpr 0x55f42eedb810 <col:27, col:31> 'StkId':'TValue *'
  `-UnaryOperator 0x55f42eedb7f0 <ldo.c:358:17, col:20> 'StkId':'TValue *' postfix '++'
    `-DeclRefExpr 0x55f42eedb7c8 <col:17> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
([B3.3])->tt
   5: BinaryOperator 0x55f42eedbd58 <./lobject.h:117:27, ./lua.h:74:19> 'int' '='
|-MemberExpr 0x55f42eedbd00 <./lobject.h:117:27, col:34> 'int' lvalue ->tt 0x55f42ee5e980
| `-ParenExpr 0x55f42eedb810 <col:27, col:31> 'StkId':'TValue *'
|   `-UnaryOperator 0x55f42eedb7f0 <ldo.c:358:17, col:20> 'StkId':'TValue *' postfix '++'
|     `-DeclRefExpr 0x55f42eedb7c8 <col:17> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
`-IntegerLiteral 0x55f42eedbd38 <./lua.h:74:19> 'int' 0
[B3.4] = [B3.1]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x55f42eedb738 <ldo.c:357:10> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
i
   2: UnaryOperator 0x55f42eedb760 <ldo.c:357:10, col:11> 'int' postfix '--'
`-DeclRefExpr 0x55f42eedb738 <col:10> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
[B4.1]--
   3: IntegerLiteral 0x55f42eedb780 <ldo.c:357:16> 'int' 0
0
   4: BinaryOperator 0x55f42eedb7a0 <ldo.c:357:10, col:16> 'int' '>'
|-UnaryOperator 0x55f42eedb760 <col:10, col:11> 'int' postfix '--'
| `-DeclRefExpr 0x55f42eedb738 <col:10> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
`-IntegerLiteral 0x55f42eedb780 <col:16> 'int' 0
[B4.2] > [B4.3]
   T: while [B4.4]
   Preds (3): B2 B7 B8
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x55f42eedb1a0 <ldo.c:355:52> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
i
   2: UnaryOperator 0x55f42eedb1c8 <ldo.c:355:52, col:53> 'int' postfix '--'
`-DeclRefExpr 0x55f42eedb1a0 <col:52> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
[B5.1]--
   Preds (1): B6
   Succs (1): B8

 [B6]
   1: DeclRefExpr 0x55f42eedb258 <ldo.c:356:25> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
firstResult
   2: UnaryOperator 0x55f42eedb280 <ldo.c:356:25, col:36> 'StkId':'TValue *' postfix '++'
`-DeclRefExpr 0x55f42eedb258 <col:25> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
[B6.1]++
   3: ImplicitCastExpr 0x55f42eedb2c0 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x55f42eedb2a0 <col:22, col:27> 'StkId':'TValue *'
  `-UnaryOperator 0x55f42eedb280 <ldo.c:356:25, col:36> 'StkId':'TValue *' postfix '++'
    `-DeclRefExpr 0x55f42eedb258 <col:25> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
([B6.2]) (ImplicitCastExpr, BitCast, const TValue *)
   4: DeclStmt 0x55f42eedb2d8 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x55f42eedb1f8 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x55f42eedb2c0 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x55f42eedb2a0 <col:22, col:27> 'StkId':'TValue *'
      `-UnaryOperator 0x55f42eedb280 <ldo.c:356:25, col:36> 'StkId':'TValue *' postfix '++'
        `-DeclRefExpr 0x55f42eedb258 <col:25> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
const TValue *o2 = (firstResult++);
   5: DeclRefExpr 0x55f42eedb360 <ldo.c:356:18> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
res
   6: UnaryOperator 0x55f42eedb388 <ldo.c:356:18, col:21> 'StkId':'TValue *' postfix '++'
`-DeclRefExpr 0x55f42eedb360 <col:18> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
[B6.5]++
   7: DeclStmt 0x55f42eedb3c8 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x55f42eedb300 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x55f42eedb3a8 <col:41, col:46> 'StkId':'TValue *'
    `-UnaryOperator 0x55f42eedb388 <ldo.c:356:18, col:21> 'StkId':'TValue *' postfix '++'
      `-DeclRefExpr 0x55f42eedb360 <col:18> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
TValue *o1 = (res++);
   8: DeclRefExpr 0x55f42eedb458 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
o2
   9: ImplicitCastExpr 0x55f42eedb480 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedb458 <col:17> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.8] (ImplicitCastExpr, LValueToRValue, const TValue *)
  10: MemberExpr 0x55f42eedb498 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x55f42ee5e920
`-ImplicitCastExpr 0x55f42eedb480 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedb458 <col:17> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.9]->value
  11: ImplicitCastExpr 0x55f42eedb4d0 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x55f42eedb498 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x55f42ee5e920
  `-ImplicitCastExpr 0x55f42eedb480 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eedb458 <col:17> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.10] (ImplicitCastExpr, LValueToRValue, Value)
  12: DeclRefExpr 0x55f42eedb3e0 <./lobject.h:163:5> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
o1
  13: ImplicitCastExpr 0x55f42eedb408 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedb3e0 <col:5> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
[B6.12] (ImplicitCastExpr, LValueToRValue, TValue *)
  14: MemberExpr 0x55f42eedb420 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x55f42ee5e920
`-ImplicitCastExpr 0x55f42eedb408 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedb3e0 <col:5> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
[B6.13]->value
  15: BinaryOperator 0x55f42eedb4e8 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x55f42eedb420 <col:5, col:9> 'Value':'Value' lvalue ->value 0x55f42ee5e920
| `-ImplicitCastExpr 0x55f42eedb408 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eedb3e0 <col:5> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
`-ImplicitCastExpr 0x55f42eedb4d0 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x55f42eedb498 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x55f42ee5e920
    `-ImplicitCastExpr 0x55f42eedb480 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eedb458 <col:17> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.14] = [B6.11]
  16: DeclRefExpr 0x55f42eedb588 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
o2
  17: ImplicitCastExpr 0x55f42eedb5b0 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedb588 <col:35> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.16] (ImplicitCastExpr, LValueToRValue, const TValue *)
  18: MemberExpr 0x55f42eedb5c8 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x55f42ee5e980
`-ImplicitCastExpr 0x55f42eedb5b0 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedb588 <col:35> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.17]->tt
  19: ImplicitCastExpr 0x55f42eedb600 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x55f42eedb5c8 <col:35, col:39> 'const int' lvalue ->tt 0x55f42ee5e980
  `-ImplicitCastExpr 0x55f42eedb5b0 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eedb588 <col:35> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.18] (ImplicitCastExpr, LValueToRValue, int)
  20: DeclRefExpr 0x55f42eedb510 <./lobject.h:163:28> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
o1
  21: ImplicitCastExpr 0x55f42eedb538 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedb510 <col:28> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
[B6.20] (ImplicitCastExpr, LValueToRValue, TValue *)
  22: MemberExpr 0x55f42eedb550 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x55f42ee5e980
`-ImplicitCastExpr 0x55f42eedb538 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedb510 <col:28> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
[B6.21]->tt
  23: BinaryOperator 0x55f42eedb618 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x55f42eedb550 <col:28, col:32> 'int' lvalue ->tt 0x55f42ee5e980
| `-ImplicitCastExpr 0x55f42eedb538 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eedb510 <col:28> 'TValue *' lvalue Var 0x55f42eedb300 'o1' 'TValue *'
`-ImplicitCastExpr 0x55f42eedb600 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x55f42eedb5c8 <col:35, col:39> 'const int' lvalue ->tt 0x55f42ee5e980
    `-ImplicitCastExpr 0x55f42eedb5b0 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eedb588 <col:35> 'const TValue *' lvalue Var 0x55f42eedb1f8 'o2' 'const TValue *'
[B6.22] = [B6.19]
  24: IntegerLiteral 0x55f42eedb640 <./llimits.h:62:31> 'int' 0
0
  25: CStyleCastExpr 0x55f42eedb670 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x55f42eedb640 <col:31> 'int' 0
(void)[B6.24] (CStyleCastExpr, ToVoid, void)
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x55f42eedb080 <ldo.c:355:30> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
firstResult
   2: ImplicitCastExpr 0x55f42eedb120 <ldo.c:355:30> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedb080 <col:30> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
[B7.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x55f42eedb0a8 <ldo.c:355:44> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55f42eedb0d0 <ldo.c:355:44> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedb0a8 <col:44> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B7.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x55f42eedb0e8 <ldo.c:355:44, col:47> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
`-ImplicitCastExpr 0x55f42eedb0d0 <col:44> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedb0a8 <col:44> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B7.4]->top
   6: ImplicitCastExpr 0x55f42eedb138 <ldo.c:355:44, col:47> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eedb0e8 <col:44, col:47> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
  `-ImplicitCastExpr 0x55f42eedb0d0 <col:44> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eedb0a8 <col:44> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B7.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: BinaryOperator 0x55f42eedb150 <ldo.c:355:30, col:47> 'int' '<'
|-ImplicitCastExpr 0x55f42eedb120 <col:30> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x55f42eedb080 <col:30> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
`-ImplicitCastExpr 0x55f42eedb138 <col:44, col:47> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eedb0e8 <col:44, col:47> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
    `-ImplicitCastExpr 0x55f42eedb0d0 <col:44> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eedb0a8 <col:44> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B7.2] < [B7.6]
   T: for (...; [B8.4] && [B7.7]; ...)
   Preds (1): B8
   Succs (2): B6 B4

 [B8]
   1: DeclRefExpr 0x55f42eedaff8 <ldo.c:355:20> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
i
   2: ImplicitCastExpr 0x55f42eedb040 <ldo.c:355:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x55f42eedaff8 <col:20> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
[B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x55f42eedb020 <ldo.c:355:25> 'int' 0
0
   4: BinaryOperator 0x55f42eedb058 <ldo.c:355:20, col:25> 'int' '!='
|-ImplicitCastExpr 0x55f42eedb040 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55f42eedaff8 <col:20> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
`-IntegerLiteral 0x55f42eedb020 <col:25> 'int' 0
[B8.2] != [B8.3]
   T: [B8.4] && ...
   Preds (2): B5 B9
   Succs (2): B7 B4

 [B9]
   1: DeclRefExpr 0x55f42eeda9b8 <ldo.c:349:8> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x55f42eeda9e0 <ldo.c:349:8> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eeda9b8 <col:8> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x55f42eeda9f8 <ldo.c:349:8, col:11> 'CallInfo *' lvalue ->ci 0x55f42ee88928
`-ImplicitCastExpr 0x55f42eeda9e0 <col:8> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eeda9b8 <col:8> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.2]->ci
   4: UnaryOperator 0x55f42eedaa30 <ldo.c:349:8, col:13> 'CallInfo *' postfix '--'
`-MemberExpr 0x55f42eeda9f8 <col:8, col:11> 'CallInfo *' lvalue ->ci 0x55f42ee88928
  `-ImplicitCastExpr 0x55f42eeda9e0 <col:8> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eeda9b8 <col:8> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.3]--
   5: DeclRefExpr 0x55f42eeda990 <ldo.c:349:3> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
ci
   6: BinaryOperator 0x55f42eedaa50 <ldo.c:349:3, col:13> 'CallInfo *' '='
|-DeclRefExpr 0x55f42eeda990 <col:3> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
`-UnaryOperator 0x55f42eedaa30 <col:8, col:13> 'CallInfo *' postfix '--'
  `-MemberExpr 0x55f42eeda9f8 <col:8, col:11> 'CallInfo *' lvalue ->ci 0x55f42ee88928
    `-ImplicitCastExpr 0x55f42eeda9e0 <col:8> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eeda9b8 <col:8> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.5] = [B9.4]
   7: DeclRefExpr 0x55f42eedaaa0 <ldo.c:350:9> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
ci
   8: ImplicitCastExpr 0x55f42eedaac8 <ldo.c:350:9> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedaaa0 <col:9> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.7] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   9: MemberExpr 0x55f42eedaae0 <ldo.c:350:9, col:13> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
`-ImplicitCastExpr 0x55f42eedaac8 <col:9> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedaaa0 <col:9> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.8]->func
  10: ImplicitCastExpr 0x55f42eedab18 <ldo.c:350:9, col:13> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eedaae0 <col:9, col:13> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
  `-ImplicitCastExpr 0x55f42eedaac8 <col:9> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eedaaa0 <col:9> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.9] (ImplicitCastExpr, LValueToRValue, StkId)
  11: DeclRefExpr 0x55f42eedaa78 <ldo.c:350:3> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
res
  12: BinaryOperator 0x55f42eedab30 <ldo.c:350:3, col:13> 'StkId':'TValue *' '='
|-DeclRefExpr 0x55f42eedaa78 <col:3> 'StkId':'TValue *' lvalue Var 0x55f42eeda498 'res' 'StkId':'TValue *'
`-ImplicitCastExpr 0x55f42eedab18 <col:9, col:13> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eedaae0 <col:9, col:13> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
    `-ImplicitCastExpr 0x55f42eedaac8 <col:9> 'CallInfo *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eedaaa0 <col:9> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.11] = [B9.10]
  13: DeclRefExpr 0x55f42eedab80 <ldo.c:351:12> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
ci
  14: ImplicitCastExpr 0x55f42eedaba8 <ldo.c:351:12> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedab80 <col:12> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.13] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  15: MemberExpr 0x55f42eedabc0 <ldo.c:351:12, col:16> 'int' lvalue ->nresults 0x55f42ee82de8
`-ImplicitCastExpr 0x55f42eedaba8 <col:12> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedab80 <col:12> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.14]->nresults
  16: ImplicitCastExpr 0x55f42eedabf8 <ldo.c:351:12, col:16> 'int' <LValueToRValue>
`-MemberExpr 0x55f42eedabc0 <col:12, col:16> 'int' lvalue ->nresults 0x55f42ee82de8
  `-ImplicitCastExpr 0x55f42eedaba8 <col:12> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eedab80 <col:12> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.15] (ImplicitCastExpr, LValueToRValue, int)
  17: DeclRefExpr 0x55f42eedab58 <ldo.c:351:3> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
wanted
  18: BinaryOperator 0x55f42eedac10 <ldo.c:351:3, col:16> 'int' '='
|-DeclRefExpr 0x55f42eedab58 <col:3> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
`-ImplicitCastExpr 0x55f42eedabf8 <col:12, col:16> 'int' <LValueToRValue>
  `-MemberExpr 0x55f42eedabc0 <col:12, col:16> 'int' lvalue ->nresults 0x55f42ee82de8
    `-ImplicitCastExpr 0x55f42eedaba8 <col:12> 'CallInfo *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eedab80 <col:12> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.17] = [B9.16]
  19: DeclRefExpr 0x55f42eedacb0 <ldo.c:352:14> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
ci
  20: ImplicitCastExpr 0x55f42eedacf8 <ldo.c:352:14> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedacb0 <col:14> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.19] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  21: IntegerLiteral 0x55f42eedacd8 <ldo.c:352:19> 'int' 1
1
  22: BinaryOperator 0x55f42eedad10 <ldo.c:352:14, col:19> 'CallInfo *' '-'
|-ImplicitCastExpr 0x55f42eedacf8 <col:14> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x55f42eedacb0 <col:14> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
`-IntegerLiteral 0x55f42eedacd8 <col:19> 'int' 1
[B9.20] - [B9.21]
  23: MemberExpr 0x55f42eedad58 <ldo.c:352:13, col:23> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
`-ParenExpr 0x55f42eedad38 <col:13, col:20> 'CallInfo *'
  `-BinaryOperator 0x55f42eedad10 <col:14, col:19> 'CallInfo *' '-'
    |-ImplicitCastExpr 0x55f42eedacf8 <col:14> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x55f42eedacb0 <col:14> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
    `-IntegerLiteral 0x55f42eedacd8 <col:19> 'int' 1
([B9.22])->base
  24: ImplicitCastExpr 0x55f42eedad90 <ldo.c:352:13, col:23> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eedad58 <col:13, col:23> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
  `-ParenExpr 0x55f42eedad38 <col:13, col:20> 'CallInfo *'
    `-BinaryOperator 0x55f42eedad10 <col:14, col:19> 'CallInfo *' '-'
      |-ImplicitCastExpr 0x55f42eedacf8 <col:14> 'CallInfo *' <LValueToRValue>
      | `-DeclRefExpr 0x55f42eedacb0 <col:14> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
      `-IntegerLiteral 0x55f42eedacd8 <col:19> 'int' 1
[B9.23] (ImplicitCastExpr, LValueToRValue, StkId)
  25: DeclRefExpr 0x55f42eedac38 <ldo.c:352:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
  26: ImplicitCastExpr 0x55f42eedac60 <ldo.c:352:3> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedac38 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.25] (ImplicitCastExpr, LValueToRValue, lua_State *)
  27: MemberExpr 0x55f42eedac78 <ldo.c:352:3, col:6> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
`-ImplicitCastExpr 0x55f42eedac60 <col:3> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedac38 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.26]->base
  28: BinaryOperator 0x55f42eedada8 <ldo.c:352:3, col:23> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eedac78 <col:3, col:6> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
| `-ImplicitCastExpr 0x55f42eedac60 <col:3> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eedac38 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
`-ImplicitCastExpr 0x55f42eedad90 <col:13, col:23> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eedad58 <col:13, col:23> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
    `-ParenExpr 0x55f42eedad38 <col:13, col:20> 'CallInfo *'
      `-BinaryOperator 0x55f42eedad10 <col:14, col:19> 'CallInfo *' '-'
        |-ImplicitCastExpr 0x55f42eedacf8 <col:14> 'CallInfo *' <LValueToRValue>
        | `-DeclRefExpr 0x55f42eedacb0 <col:14> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
        `-IntegerLiteral 0x55f42eedacd8 <col:19> 'int' 1
[B9.27] = [B9.24]
  29: DeclRefExpr 0x55f42eedae48 <ldo.c:353:17> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
ci
  30: ImplicitCastExpr 0x55f42eedae90 <ldo.c:353:17> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedae48 <col:17> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
[B9.29] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  31: IntegerLiteral 0x55f42eedae70 <ldo.c:353:22> 'int' 1
1
  32: BinaryOperator 0x55f42eedaea8 <ldo.c:353:17, col:22> 'CallInfo *' '-'
|-ImplicitCastExpr 0x55f42eedae90 <col:17> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x55f42eedae48 <col:17> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
`-IntegerLiteral 0x55f42eedae70 <col:22> 'int' 1
[B9.30] - [B9.31]
  33: MemberExpr 0x55f42eedaef0 <ldo.c:353:16, col:26> 'const Instruction *' lvalue ->savedpc 0x55f42ee82d88
`-ParenExpr 0x55f42eedaed0 <col:16, col:23> 'CallInfo *'
  `-BinaryOperator 0x55f42eedaea8 <col:17, col:22> 'CallInfo *' '-'
    |-ImplicitCastExpr 0x55f42eedae90 <col:17> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x55f42eedae48 <col:17> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
    `-IntegerLiteral 0x55f42eedae70 <col:22> 'int' 1
([B9.32])->savedpc
  34: ImplicitCastExpr 0x55f42eedaf28 <ldo.c:353:16, col:26> 'const Instruction *' <LValueToRValue>
`-MemberExpr 0x55f42eedaef0 <col:16, col:26> 'const Instruction *' lvalue ->savedpc 0x55f42ee82d88
  `-ParenExpr 0x55f42eedaed0 <col:16, col:23> 'CallInfo *'
    `-BinaryOperator 0x55f42eedaea8 <col:17, col:22> 'CallInfo *' '-'
      |-ImplicitCastExpr 0x55f42eedae90 <col:17> 'CallInfo *' <LValueToRValue>
      | `-DeclRefExpr 0x55f42eedae48 <col:17> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
      `-IntegerLiteral 0x55f42eedae70 <col:22> 'int' 1
[B9.33] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  35: DeclRefExpr 0x55f42eedadd0 <ldo.c:353:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
  36: ImplicitCastExpr 0x55f42eedadf8 <ldo.c:353:3> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eedadd0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.35] (ImplicitCastExpr, LValueToRValue, lua_State *)
  37: MemberExpr 0x55f42eedae10 <ldo.c:353:3, col:6> 'const Instruction *' lvalue ->savedpc 0x55f42ee88980
`-ImplicitCastExpr 0x55f42eedadf8 <col:3> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedadd0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B9.36]->savedpc
  38: BinaryOperator 0x55f42eedaf40 <ldo.c:353:3, col:26> 'const Instruction *' '='
|-MemberExpr 0x55f42eedae10 <col:3, col:6> 'const Instruction *' lvalue ->savedpc 0x55f42ee88980
| `-ImplicitCastExpr 0x55f42eedadf8 <col:3> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eedadd0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
`-ImplicitCastExpr 0x55f42eedaf28 <col:16, col:26> 'const Instruction *' <LValueToRValue>
  `-MemberExpr 0x55f42eedaef0 <col:16, col:26> 'const Instruction *' lvalue ->savedpc 0x55f42ee82d88
    `-ParenExpr 0x55f42eedaed0 <col:16, col:23> 'CallInfo *'
      `-BinaryOperator 0x55f42eedaea8 <col:17, col:22> 'CallInfo *' '-'
        |-ImplicitCastExpr 0x55f42eedae90 <col:17> 'CallInfo *' <LValueToRValue>
        | `-DeclRefExpr 0x55f42eedae48 <col:17> 'CallInfo *' lvalue Var 0x55f42eeda640 'ci' 'CallInfo *'
        `-IntegerLiteral 0x55f42eedae70 <col:22> 'int' 1
[B9.37] = [B9.34]
  39: DeclRefExpr 0x55f42eedaf90 <ldo.c:355:12> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
wanted
  40: ImplicitCastExpr 0x55f42eedafb8 <ldo.c:355:12> 'int' <LValueToRValue>
`-DeclRefExpr 0x55f42eedaf90 <col:12> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
[B9.39] (ImplicitCastExpr, LValueToRValue, int)
  41: DeclRefExpr 0x55f42eedaf68 <ldo.c:355:8> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
i
  42: BinaryOperator 0x55f42eedafd0 <ldo.c:355:8, col:12> 'int' '='
|-DeclRefExpr 0x55f42eedaf68 <col:8> 'int' lvalue Var 0x55f42eeda5a0 'i' 'int'
`-ImplicitCastExpr 0x55f42eedafb8 <col:12> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55f42eedaf90 <col:12> 'int' lvalue Var 0x55f42eeda528 'wanted' 'int'
[B9.41] = [B9.40]
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   1: DeclRefExpr 0x55f42eeda838 <ldo.c:348:19> 'StkId (lua_State *, StkId)' Function 0x55f42eed9038 'callrethooks' 'StkId (lua_State *, StkId)'
callrethooks
   2: ImplicitCastExpr 0x55f42eeda8b0 <ldo.c:348:19> 'StkId (*)(lua_State *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55f42eeda838 <col:19> 'StkId (lua_State *, StkId)' Function 0x55f42eed9038 'callrethooks' 'StkId (lua_State *, StkId)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, StkId (*)(lua_State *, StkId))
   3: DeclRefExpr 0x55f42eeda860 <ldo.c:348:32> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55f42eeda900 <ldo.c:348:32> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eeda860 <col:32> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B10.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x55f42eeda888 <ldo.c:348:35> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
firstResult
   6: ImplicitCastExpr 0x55f42eeda918 <ldo.c:348:35> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eeda888 <col:35> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
[B10.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: CallExpr 0x55f42eeda8c8 <ldo.c:348:19, col:46> 'StkId':'TValue *'
|-ImplicitCastExpr 0x55f42eeda8b0 <col:19> 'StkId (*)(lua_State *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55f42eeda838 <col:19> 'StkId (lua_State *, StkId)' Function 0x55f42eed9038 'callrethooks' 'StkId (lua_State *, StkId)'
|-ImplicitCastExpr 0x55f42eeda900 <col:32> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55f42eeda860 <col:32> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
`-ImplicitCastExpr 0x55f42eeda918 <col:35> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eeda888 <col:35> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
[B10.2]([B10.4], [B10.6])
   8: DeclRefExpr 0x55f42eeda810 <ldo.c:348:5> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
firstResult
   9: BinaryOperator 0x55f42eeda930 <ldo.c:348:5, col:46> 'StkId':'TValue *' '='
|-DeclRefExpr 0x55f42eeda810 <col:5> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
`-CallExpr 0x55f42eeda8c8 <col:19, col:46> 'StkId':'TValue *'
  |-ImplicitCastExpr 0x55f42eeda8b0 <col:19> 'StkId (*)(lua_State *, StkId)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55f42eeda838 <col:19> 'StkId (lua_State *, StkId)' Function 0x55f42eed9038 'callrethooks' 'StkId (lua_State *, StkId)'
  |-ImplicitCastExpr 0x55f42eeda900 <col:32> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x55f42eeda860 <col:32> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
  `-ImplicitCastExpr 0x55f42eeda918 <col:35> 'StkId':'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eeda888 <col:35> 'StkId':'TValue *' lvalue ParmVar 0x55f42eeda2f8 'firstResult' 'StkId':'TValue *'
[B10.8] = [B10.7]
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: DeclStmt 0x55f42eeda4f8 <ldo.c:344:3, col:12>col:9
`-VarDecl 0x55f42eeda498 <col:3, col:9> col:9 used res 'StkId':'TValue *'
StkId res;
   2: DeclStmt 0x55f42eef9778 <ldo.c:345:7>col:7
`-VarDecl 0x55f42eeda528 <col:3, col:7> col:7 used wanted 'int'
int wanted;
   3: DeclStmt 0x55f42eef9760 <ldo.c:345:15>col:15
`-VarDecl 0x55f42eeda5a0 <col:3, col:15> col:15 used i 'int'
int i;
   4: DeclStmt 0x55f42eeda6a0 <ldo.c:346:3, col:15>col:13
`-VarDecl 0x55f42eeda640 <col:3, col:13> col:13 used ci 'CallInfo *'
CallInfo *ci;
   5: DeclRefExpr 0x55f42eeda6b8 <ldo.c:347:7> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x55f42eeda6e0 <ldo.c:347:7> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eeda6b8 <col:7> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B11.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: MemberExpr 0x55f42eeda6f8 <ldo.c:347:7, col:10> 'lu_byte':'unsigned char' lvalue ->hookmask 0x55f42ee88cb8
`-ImplicitCastExpr 0x55f42eeda6e0 <col:7> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eeda6b8 <col:7> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B11.6]->hookmask
   8: ImplicitCastExpr 0x55f42eeda7b8 <ldo.c:347:7, col:10> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55f42eeda6f8 <col:7, col:10> 'lu_byte':'unsigned char' lvalue ->hookmask 0x55f42ee88cb8
  `-ImplicitCastExpr 0x55f42eeda6e0 <col:7> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eeda6b8 <col:7> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B11.7] (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x55f42eeda7d0 <ldo.c:347:7, col:10> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55f42eeda7b8 <col:7, col:10> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55f42eeda6f8 <col:7, col:10> 'lu_byte':'unsigned char' lvalue ->hookmask 0x55f42ee88cb8
    `-ImplicitCastExpr 0x55f42eeda6e0 <col:7> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eeda6b8 <col:7> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
[B11.8] (ImplicitCastExpr, IntegralCast, int)
  10: IntegerLiteral 0x55f42eeda730 <./lua.h:322:22> 'int' 1
1
  11: IntegerLiteral 0x55f42eeda750 <./lua.h:312:21> 'int' 1
1
  12: BinaryOperator 0x55f42eeda770 <./lua.h:322:22, line:312:21> 'int' '<<'
|-IntegerLiteral 0x55f42eeda730 <line:322:22> 'int' 1
`-IntegerLiteral 0x55f42eeda750 <line:312:21> 'int' 1
[B11.10] << [B11.11]
  13: BinaryOperator 0x55f42eeda7e8 <ldo.c:347:7, ./lua.h:322:38> 'int' '&'
|-ImplicitCastExpr 0x55f42eeda7d0 <ldo.c:347:7, col:10> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55f42eeda7b8 <col:7, col:10> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55f42eeda6f8 <col:7, col:10> 'lu_byte':'unsigned char' lvalue ->hookmask 0x55f42ee88cb8
|     `-ImplicitCastExpr 0x55f42eeda6e0 <col:7> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x55f42eeda6b8 <col:7> 'lua_State *' lvalue ParmVar 0x55f42eeda288 'L' 'lua_State *'
`-ParenExpr 0x55f42eeda798 <./lua.h:322:21, col:38> 'int'
  `-BinaryOperator 0x55f42eeda770 <col:22, line:312:21> 'int' '<<'
    |-IntegerLiteral 0x55f42eeda730 <line:322:22> 'int' 1
    `-IntegerLiteral 0x55f42eeda750 <line:312:21> 'int' 1
[B11.9] & ([B11.12])
   T: if [B11.13]
   Preds (1): B12
   Succs (2): B10 B9

 [B0 (EXIT)]
   Preds (1): B1
