static int singlevaraux(FuncState *fs, TString *n, expdesc *var, int base)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x558fa8efdc10 <lparser.c:240:23> 'int (FuncState *, TString *, expdesc *)' Function 0x558fa8ef7ad8 'indexupvalue' 'int (FuncState *, TString *, expdesc *)'
indexupvalue
   2: ImplicitCastExpr 0x558fa8efdd08 <lparser.c:240:23> 'int (*)(FuncState *, TString *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8efdc10 <col:23> 'int (FuncState *, TString *, expdesc *)' Function 0x558fa8ef7ad8 'indexupvalue' 'int (FuncState *, TString *, expdesc *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, TString *, expdesc *))
   3: DeclRefExpr 0x558fa8efdc38 <lparser.c:240:36> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8efdd60 <lparser.c:240:36> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efdc38 <col:36> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8efdc60 <lparser.c:240:40> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
n
   6: ImplicitCastExpr 0x558fa8efdd78 <lparser.c:240:40> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efdc60 <col:40> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
[B1.5] (ImplicitCastExpr, LValueToRValue, TString *)
   7: DeclRefExpr 0x558fa8efdc88 <lparser.c:240:43> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
var
   8: ImplicitCastExpr 0x558fa8efdd90 <lparser.c:240:43> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efdc88 <col:43> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: CallExpr 0x558fa8efdd20 <lparser.c:240:23, col:46> 'int'
|-ImplicitCastExpr 0x558fa8efdd08 <col:23> 'int (*)(FuncState *, TString *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8efdc10 <col:23> 'int (FuncState *, TString *, expdesc *)' Function 0x558fa8ef7ad8 'indexupvalue' 'int (FuncState *, TString *, expdesc *)'
|-ImplicitCastExpr 0x558fa8efdd60 <col:36> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efdc38 <col:36> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8efdd78 <col:40> 'TString *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efdc60 <col:40> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
`-ImplicitCastExpr 0x558fa8efdd90 <col:43> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efdc88 <col:43> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.2]([B1.4], [B1.6], [B1.8])
  10: DeclRefExpr 0x558fa8efdb28 <lparser.c:240:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
var
  11: ImplicitCastExpr 0x558fa8efdb50 <lparser.c:240:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efdb28 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: MemberExpr 0x558fa8efdb68 <lparser.c:240:7, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ImplicitCastExpr 0x558fa8efdb50 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efdb28 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.11]->u
  13: MemberExpr 0x558fa8efdba0 <lparser.c:240:7, col:14> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8efdb68 <col:7, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ImplicitCastExpr 0x558fa8efdb50 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8efdb28 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.12].s
  14: MemberExpr 0x558fa8efdbd8 <lparser.c:240:7, col:16> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8efdba0 <col:7, col:14> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8efdb68 <col:7, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ImplicitCastExpr 0x558fa8efdb50 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8efdb28 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.13].info
  15: BinaryOperator 0x558fa8efdda8 <lparser.c:240:7, col:46> 'int' '='
|-MemberExpr 0x558fa8efdbd8 <col:7, col:16> 'int' lvalue .info 0x558fa8eb1028
| `-MemberExpr 0x558fa8efdba0 <col:7, col:14> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|   `-MemberExpr 0x558fa8efdb68 <col:7, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|     `-ImplicitCastExpr 0x558fa8efdb50 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8efdb28 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
`-CallExpr 0x558fa8efdd20 <col:23, col:46> 'int'
  |-ImplicitCastExpr 0x558fa8efdd08 <col:23> 'int (*)(FuncState *, TString *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8efdc10 <col:23> 'int (FuncState *, TString *, expdesc *)' Function 0x558fa8ef7ad8 'indexupvalue' 'int (FuncState *, TString *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8efdd60 <col:36> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8efdc38 <col:36> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x558fa8efdd78 <col:40> 'TString *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8efdc60 <col:40> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
  `-ImplicitCastExpr 0x558fa8efdd90 <col:43> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8efdc88 <col:43> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.14] = [B1.9]
  16: DeclRefExpr 0x558fa8efde48 <lparser.c:241:16> 'int' EnumConstant 0x558fa8eb0a88 'VUPVAL' 'int'
VUPVAL
  17: ImplicitCastExpr 0x558fa8efde70 <lparser.c:241:16> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8efde48 <col:16> 'int' EnumConstant 0x558fa8eb0a88 'VUPVAL' 'int'
[B1.16] (ImplicitCastExpr, IntegralCast, expkind)
  18: DeclRefExpr 0x558fa8efddd0 <lparser.c:241:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
var
  19: ImplicitCastExpr 0x558fa8efddf8 <lparser.c:241:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efddd0 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.18] (ImplicitCastExpr, LValueToRValue, expdesc *)
  20: MemberExpr 0x558fa8efde10 <lparser.c:241:7, col:12> 'expkind':'expkind' lvalue ->k 0x558fa8eb0e70
`-ImplicitCastExpr 0x558fa8efddf8 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efddd0 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B1.19]->k
  21: BinaryOperator 0x558fa8efde88 <lparser.c:241:7, col:16> 'expkind':'expkind' '='
|-MemberExpr 0x558fa8efde10 <col:7, col:12> 'expkind':'expkind' lvalue ->k 0x558fa8eb0e70
| `-ImplicitCastExpr 0x558fa8efddf8 <col:7> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8efddd0 <col:7> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
`-ImplicitCastExpr 0x558fa8efde70 <col:16> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x558fa8efde48 <col:16> 'int' EnumConstant 0x558fa8eb0a88 'VUPVAL' 'int'
[B1.20] = [B1.17]
  22: DeclRefExpr 0x558fa8efdeb0 <lparser.c:242:14> 'int' EnumConstant 0x558fa8eb0a88 'VUPVAL' 'int'
VUPVAL
  23: ReturnStmt 0x558fa8efded8 <lparser.c:242:7, col:14>
`-DeclRefExpr 0x558fa8efdeb0 <col:14> 'int' EnumConstant 0x558fa8eb0a88 'VUPVAL' 'int'
return [B1.22];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8efdab0 <lparser.c:239:16> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
VGLOBAL
   2: ReturnStmt 0x558fa8efdad8 <lparser.c:239:9, col:16>
`-DeclRefExpr 0x558fa8efdab0 <col:16> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x558fa8efd848 <lparser.c:238:11> 'int (FuncState *, TString *, expdesc *, int)' Function 0x558fa8efc688 'singlevaraux' 'int (FuncState *, TString *, expdesc *, int)'
singlevaraux
   2: ImplicitCastExpr 0x558fa8efd9b8 <lparser.c:238:11> 'int (*)(FuncState *, TString *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8efd848 <col:11> 'int (FuncState *, TString *, expdesc *, int)' Function 0x558fa8efc688 'singlevaraux' 'int (FuncState *, TString *, expdesc *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, TString *, expdesc *, int))
   3: DeclRefExpr 0x558fa8efd870 <lparser.c:238:24> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8efd898 <lparser.c:238:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efd870 <col:24> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: MemberExpr 0x558fa8efd8b0 <lparser.c:238:24, col:28> 'struct FuncState *' lvalue ->prev 0x558fa8eb3f68
`-ImplicitCastExpr 0x558fa8efd898 <col:24> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efd870 <col:24> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B3.4]->prev
   6: ImplicitCastExpr 0x558fa8efda18 <lparser.c:238:24, col:28> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8efd8b0 <col:24, col:28> 'struct FuncState *' lvalue ->prev 0x558fa8eb3f68
  `-ImplicitCastExpr 0x558fa8efd898 <col:24> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8efd870 <col:24> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   7: DeclRefExpr 0x558fa8efd8e8 <lparser.c:238:34> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
n
   8: ImplicitCastExpr 0x558fa8efda30 <lparser.c:238:34> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efd8e8 <col:34> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
[B3.7] (ImplicitCastExpr, LValueToRValue, TString *)
   9: DeclRefExpr 0x558fa8efd910 <lparser.c:238:37> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
var
  10: ImplicitCastExpr 0x558fa8efda48 <lparser.c:238:37> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efd910 <col:37> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B3.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: IntegerLiteral 0x558fa8efd938 <lparser.c:238:42> 'int' 0
0
  12: CallExpr 0x558fa8efd9d0 <lparser.c:238:11, col:43> 'int'
|-ImplicitCastExpr 0x558fa8efd9b8 <col:11> 'int (*)(FuncState *, TString *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8efd848 <col:11> 'int (FuncState *, TString *, expdesc *, int)' Function 0x558fa8efc688 'singlevaraux' 'int (FuncState *, TString *, expdesc *, int)'
|-ImplicitCastExpr 0x558fa8efda18 <col:24, col:28> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8efd8b0 <col:24, col:28> 'struct FuncState *' lvalue ->prev 0x558fa8eb3f68
|   `-ImplicitCastExpr 0x558fa8efd898 <col:24> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8efd870 <col:24> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8efda30 <col:34> 'TString *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efd8e8 <col:34> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
|-ImplicitCastExpr 0x558fa8efda48 <col:37> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efd910 <col:37> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
`-IntegerLiteral 0x558fa8efd938 <col:42> 'int' 0
[B3.2]([B3.6], [B3.8], [B3.10], [B3.11])
  13: DeclRefExpr 0x558fa8efda60 <lparser.c:238:48> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
VGLOBAL
  14: BinaryOperator 0x558fa8efda88 <lparser.c:238:11, col:48> 'int' '=='
|-CallExpr 0x558fa8efd9d0 <col:11, col:43> 'int'
| |-ImplicitCastExpr 0x558fa8efd9b8 <col:11> 'int (*)(FuncState *, TString *, expdesc *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8efd848 <col:11> 'int (FuncState *, TString *, expdesc *, int)' Function 0x558fa8efc688 'singlevaraux' 'int (FuncState *, TString *, expdesc *, int)'
| |-ImplicitCastExpr 0x558fa8efda18 <col:24, col:28> 'struct FuncState *' <LValueToRValue>
| | `-MemberExpr 0x558fa8efd8b0 <col:24, col:28> 'struct FuncState *' lvalue ->prev 0x558fa8eb3f68
| |   `-ImplicitCastExpr 0x558fa8efd898 <col:24> 'FuncState *' <LValueToRValue>
| |     `-DeclRefExpr 0x558fa8efd870 <col:24> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
| |-ImplicitCastExpr 0x558fa8efda30 <col:34> 'TString *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8efd8e8 <col:34> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
| |-ImplicitCastExpr 0x558fa8efda48 <col:37> 'expdesc *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8efd910 <col:37> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
| `-IntegerLiteral 0x558fa8efd938 <col:42> 'int' 0
`-DeclRefExpr 0x558fa8efda60 <col:48> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
[B3.12] == [B3.13]
   T: if [B3.14]
   Preds (1): B7
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x558fa8efd7e0 <lparser.c:235:14> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
VLOCAL
   2: ReturnStmt 0x558fa8efd808 <lparser.c:235:7, col:14>
`-DeclRefExpr 0x558fa8efd7e0 <col:14> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
return [B4.1];
   Preds (2): B5 B6
   Succs (1): B0

 [B5]
   1: DeclRefExpr 0x558fa8efd650 <lparser.c:234:9> 'void (FuncState *, int)' Function 0x558fa8efbdd0 'markupval' 'void (FuncState *, int)'
markupval
   2: ImplicitCastExpr 0x558fa8efd728 <lparser.c:234:9> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8efd650 <col:9> 'void (FuncState *, int)' Function 0x558fa8efbdd0 'markupval' 'void (FuncState *, int)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
   3: DeclRefExpr 0x558fa8efd678 <lparser.c:234:19> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8efd778 <lparser.c:234:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efd678 <col:19> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8efd6a0 <lparser.c:234:23> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
v
   6: ImplicitCastExpr 0x558fa8efd790 <lparser.c:234:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8efd6a0 <col:23> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
[B5.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x558fa8efd740 <lparser.c:234:9, col:24> 'void'
|-ImplicitCastExpr 0x558fa8efd728 <col:9> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8efd650 <col:9> 'void (FuncState *, int)' Function 0x558fa8efbdd0 'markupval' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8efd778 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efd678 <col:19> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8efd790 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efd6a0 <col:23> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
[B5.2]([B5.4], [B5.6])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x558fa8efcca8 <lparser.c:232:7> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
   2: ImplicitCastExpr 0x558fa8efcd48 <lparser.c:232:7> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8efcca8 <col:7> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
   3: DeclRefExpr 0x558fa8efccd0 <lparser.c:232:16> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
var
   4: ImplicitCastExpr 0x558fa8efcda0 <lparser.c:232:16> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efccd0 <col:16> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B6.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: DeclRefExpr 0x558fa8efccf8 <lparser.c:232:21> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
VLOCAL
   6: ImplicitCastExpr 0x558fa8efcdb8 <lparser.c:232:21> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8efccf8 <col:21> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
[B6.5] (ImplicitCastExpr, IntegralCast, expkind)
   7: DeclRefExpr 0x558fa8efcd20 <lparser.c:232:29> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
v
   8: ImplicitCastExpr 0x558fa8efcdd0 <lparser.c:232:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8efcd20 <col:29> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
[B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8efcd60 <lparser.c:232:7, col:30> 'void'
|-ImplicitCastExpr 0x558fa8efcd48 <col:7> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8efcca8 <col:7> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-ImplicitCastExpr 0x558fa8efcda0 <col:16> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efccd0 <col:16> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
|-ImplicitCastExpr 0x558fa8efcdb8 <col:21> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8efccf8 <col:21> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
`-ImplicitCastExpr 0x558fa8efcdd0 <col:29> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efcd20 <col:29> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
[B6.2]([B6.4], [B6.6], [B6.8])
  10: DeclRefExpr 0x558fa8efcde8 <lparser.c:233:12> 'int' lvalue ParmVar 0x558fa8efc538 'base' 'int'
base
  11: ImplicitCastExpr 0x558fa8efce10 <lparser.c:233:12> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8efcde8 <col:12> 'int' lvalue ParmVar 0x558fa8efc538 'base' 'int'
[B6.10] (ImplicitCastExpr, LValueToRValue, int)
  12: UnaryOperator 0x558fa8efce28 <lparser.c:233:11, col:12> 'int' prefix '!'
`-ImplicitCastExpr 0x558fa8efce10 <col:12> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efcde8 <col:12> 'int' lvalue ParmVar 0x558fa8efc538 'base' 'int'
![B6.11]
   T: if [B6.12]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclRefExpr 0x558fa8efcb10 <lparser.c:230:13> 'int (FuncState *, TString *)' Function 0x558fa8efb4d8 'searchvar' 'int (FuncState *, TString *)'
searchvar
   2: ImplicitCastExpr 0x558fa8efcb88 <lparser.c:230:13> 'int (*)(FuncState *, TString *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8efcb10 <col:13> 'int (FuncState *, TString *)' Function 0x558fa8efb4d8 'searchvar' 'int (FuncState *, TString *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, TString *))
   3: DeclRefExpr 0x558fa8efcb38 <lparser.c:230:23> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8efcbd8 <lparser.c:230:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efcb38 <col:23> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8efcb60 <lparser.c:230:27> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
n
   6: ImplicitCastExpr 0x558fa8efcbf0 <lparser.c:230:27> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efcb60 <col:27> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
[B7.5] (ImplicitCastExpr, LValueToRValue, TString *)
   7: CallExpr 0x558fa8efcba0 <lparser.c:230:13, col:28> 'int'
|-ImplicitCastExpr 0x558fa8efcb88 <col:13> 'int (*)(FuncState *, TString *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8efcb10 <col:13> 'int (FuncState *, TString *)' Function 0x558fa8efb4d8 'searchvar' 'int (FuncState *, TString *)'
|-ImplicitCastExpr 0x558fa8efcbd8 <col:23> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efcb38 <col:23> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8efcbf0 <col:27> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efcb60 <col:27> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
[B7.2]([B7.4], [B7.6])
   8: DeclStmt 0x558fa8efcc08 <lparser.c:230:5, col:29>col:9
`-VarDecl 0x558fa8efcab0 <col:5, col:28> col:9 used v 'int' cinit
  `-CallExpr 0x558fa8efcba0 <col:13, col:28> 'int'
    |-ImplicitCastExpr 0x558fa8efcb88 <col:13> 'int (*)(FuncState *, TString *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8efcb10 <col:13> 'int (FuncState *, TString *)' Function 0x558fa8efb4d8 'searchvar' 'int (FuncState *, TString *)'
    |-ImplicitCastExpr 0x558fa8efcbd8 <col:23> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8efcb38 <col:23> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x558fa8efcbf0 <col:27> 'TString *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8efcb60 <col:27> 'TString *' lvalue ParmVar 0x558fa8efc450 'n' 'TString *'
int v = searchvar(fs, n);
   9: DeclRefExpr 0x558fa8efcc20 <lparser.c:231:9> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
v
  10: ImplicitCastExpr 0x558fa8efcc68 <lparser.c:231:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8efcc20 <col:9> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
[B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x558fa8efcc48 <lparser.c:231:14> 'int' 0
0
  12: BinaryOperator 0x558fa8efcc80 <lparser.c:231:9, col:14> 'int' '>='
|-ImplicitCastExpr 0x558fa8efcc68 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efcc20 <col:9> 'int' lvalue Var 0x558fa8efcab0 'v' 'int'
`-IntegerLiteral 0x558fa8efcc48 <col:14> 'int' 0
[B7.10] >= [B7.11]
   T: if [B7.12]
   Preds (1): B9
   Succs (2): B6 B3

 [B8]
   1: DeclRefExpr 0x558fa8efc848 <lparser.c:226:5> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
   2: ImplicitCastExpr 0x558fa8efc9b0 <lparser.c:226:5> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8efc848 <col:5> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
   3: DeclRefExpr 0x558fa8efc870 <lparser.c:226:14> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
var
   4: ImplicitCastExpr 0x558fa8efca08 <lparser.c:226:14> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc870 <col:14> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
[B8.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: DeclRefExpr 0x558fa8efc898 <lparser.c:226:19> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
VGLOBAL
   6: ImplicitCastExpr 0x558fa8efca20 <lparser.c:226:19> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8efc898 <col:19> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
[B8.5] (ImplicitCastExpr, IntegralCast, expkind)
   7: IntegerLiteral 0x558fa8efc8c0 <./lopcodes.h:65:27> 'int' 1
1
   8: IntegerLiteral 0x558fa8efc8e0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x558fa8efc900 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x558fa8efc8c0 <line:65:27> 'int' 1
`-IntegerLiteral 0x558fa8efc8e0 <line:40:17> 'int' 8
[B8.7] << [B8.8]
  10: IntegerLiteral 0x558fa8efc948 <./lopcodes.h:65:38> 'int' 1
1
  11: BinaryOperator 0x558fa8efc968 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x558fa8efc928 <col:26, col:36> 'int'
| `-BinaryOperator 0x558fa8efc900 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x558fa8efc8c0 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x558fa8efc8e0 <line:40:17> 'int' 8
`-IntegerLiteral 0x558fa8efc948 <line:65:38> 'int' 1
([B8.9]) - [B8.10]
  12: CallExpr 0x558fa8efc9c8 <lparser.c:226:5, col:34> 'void'
|-ImplicitCastExpr 0x558fa8efc9b0 <col:5> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8efc848 <col:5> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-ImplicitCastExpr 0x558fa8efca08 <col:14> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efc870 <col:14> 'expdesc *' lvalue ParmVar 0x558fa8efc4c0 'var' 'expdesc *'
|-ImplicitCastExpr 0x558fa8efca20 <col:19> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8efc898 <col:19> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
`-ParenExpr 0x558fa8efc990 <./lopcodes.h:65:25, col:39> 'int'
  `-BinaryOperator 0x558fa8efc968 <col:26, col:38> 'int' '-'
    |-ParenExpr 0x558fa8efc928 <col:26, col:36> 'int'
    | `-BinaryOperator 0x558fa8efc900 <col:27, line:40:17> 'int' '<<'
    |   |-IntegerLiteral 0x558fa8efc8c0 <line:65:27> 'int' 1
    |   `-IntegerLiteral 0x558fa8efc8e0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x558fa8efc948 <line:65:38> 'int' 1
[B8.2]([B8.4], [B8.6], ([B8.11]))
  13: DeclRefExpr 0x558fa8efca38 <lparser.c:227:12> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
VGLOBAL
  14: ReturnStmt 0x558fa8efca60 <lparser.c:227:5, col:12>
`-DeclRefExpr 0x558fa8efca38 <col:12> 'int' EnumConstant 0x558fa8eb0ad0 'VGLOBAL' 'int'
return [B8.13];
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: DeclRefExpr 0x558fa8efc748 <lparser.c:225:7> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8efc7f0 <lparser.c:225:7> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc748 <col:7> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
[B9.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: IntegerLiteral 0x558fa8efc770 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   4: CStyleCastExpr 0x558fa8efc7a8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x558fa8efc770 <col:24> 'int' 0
(void *)[B9.3] (CStyleCastExpr, NullToPointer, void *)
   5: ImplicitCastExpr 0x558fa8efc808 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'FuncState *' <BitCast>
`-ParenExpr 0x558fa8efc7d0 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x558fa8efc7a8 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x558fa8efc770 <col:24> 'int' 0
([B9.4]) (ImplicitCastExpr, BitCast, FuncState *)
   6: BinaryOperator 0x558fa8efc820 <lparser.c:225:7, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x558fa8efc7f0 <lparser.c:225:7> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8efc748 <col:7> 'FuncState *' lvalue ParmVar 0x558fa8efc3e0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8efc808 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'FuncState *' <BitCast>
  `-ParenExpr 0x558fa8efc7d0 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x558fa8efc7a8 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x558fa8efc770 <col:24> 'int' 0
[B9.2] == [B9.5]
   T: if [B9.6]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (4): B1 B2 B4 B8
