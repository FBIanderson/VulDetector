int luaK_codeABx(FuncState *fs, OpCode o, int a, unsigned int bc)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: IntegerLiteral 0x5637768eda18 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768eda48 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768eda18 <col:31> 'int' 0
(void)[B1.1] (CStyleCastExpr, ToVoid, void)
   3: IntegerLiteral 0x5637768eda90 <./llimits.h:62:31> 'int' 0
0
   4: CStyleCastExpr 0x5637768edac0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768eda90 <col:31> 'int' 0
(void)[B1.3] (CStyleCastExpr, ToVoid, void)
   5: DeclRefExpr 0x5637768edb08 <lcode.c:815:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
luaK_code
   6: ImplicitCastExpr 0x5637768ee1b8 <lcode.c:815:10> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768edb08 <col:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
[B1.5] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, Instruction, int))
   7: DeclRefExpr 0x5637768edb30 <lcode.c:815:20> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
fs
   8: ImplicitCastExpr 0x5637768ee210 <lcode.c:815:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768edb30 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, FuncState *)
   9: DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
o
  10: ImplicitCastExpr 0x5637768edbe0 <./llimits.h:75:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
`-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
  `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
([B1.9]) (ImplicitCastExpr, LValueToRValue, OpCode)
  11: CStyleCastExpr 0x5637768edbf8 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768edbe0 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
  `-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
    `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
(Instruction)[B1.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: IntegerLiteral 0x5637768edc40 <./lopcodes.h:44:17> 'int' 0
0
  13: BinaryOperator 0x5637768edc60 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768edc20 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768edbf8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768edbe0 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
|     `-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
|       `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
`-IntegerLiteral 0x5637768edc40 <./lopcodes.h:44:17> 'int' 0
([B1.11]) << [B1.12]
  14: DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
a
  15: ImplicitCastExpr 0x5637768edd30 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
  `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
([B1.14]) (ImplicitCastExpr, LValueToRValue, int)
  16: CStyleCastExpr 0x5637768edd48 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768edd30 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
    `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
(Instruction)[B1.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: IntegerLiteral 0x5637768edd90 <./lopcodes.h:44:17> 'int' 0
0
  18: IntegerLiteral 0x5637768eddb0 <./lopcodes.h:42:18> 'int' 6
6
  19: BinaryOperator 0x5637768eddd0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768edd90 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768eddb0 <line:42:18> 'int' 6
[B1.17] + [B1.18]
  20: BinaryOperator 0x5637768ede18 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768edd70 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768edd48 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768edd30 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
|       `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
`-ParenExpr 0x5637768eddf8 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768eddd0 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768edd90 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768eddb0 <line:42:18> 'int' 6
([B1.16]) << ([B1.19])
  21: BinaryOperator 0x5637768ede60 <./lopcodes.h:109:29, line:110:34> 'unsigned int' '|'
|-ParenExpr 0x5637768edc88 <line:109:29, col:58> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768edc60 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768edc20 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768edbf8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x5637768edbe0 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
|   |     `-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
|   |       `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x5637768edc40 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768ede40 <line:110:6, col:34> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ede18 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768edd70 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    | `-CStyleCastExpr 0x5637768edd48 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5637768edd30 <col:26, col:30> 'int' <LValueToRValue>
    |     `-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
    |       `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
    `-ParenExpr 0x5637768eddf8 <./lopcodes.h:45:16, col:33> 'int'
      `-BinaryOperator 0x5637768eddd0 <line:44:17, line:42:18> 'int' '+'
        |-IntegerLiteral 0x5637768edd90 <line:44:17> 'int' 0
        `-IntegerLiteral 0x5637768eddb0 <line:42:18> 'int' 6
([B1.13]) | ([B1.20])
  22: DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
bc
  23: ImplicitCastExpr 0x5637768edf10 <./llimits.h:75:26, col:30> 'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768edef0 <col:26, col:30> 'unsigned int' lvalue
  `-DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
([B1.22]) (ImplicitCastExpr, LValueToRValue, unsigned int)
  24: CStyleCastExpr 0x5637768edf28 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <NoOp>
`-ImplicitCastExpr 0x5637768edf10 <col:26, col:30> 'unsigned int' <LValueToRValue>
  `-ParenExpr 0x5637768edef0 <col:26, col:30> 'unsigned int' lvalue
    `-DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
(Instruction)[B1.23] (CStyleCastExpr, NoOp, Instruction)
  25: IntegerLiteral 0x5637768edf70 <./lopcodes.h:44:17> 'int' 0
0
  26: IntegerLiteral 0x5637768edf90 <./lopcodes.h:42:18> 'int' 6
6
  27: BinaryOperator 0x5637768edfb0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768edf70 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768edf90 <line:42:18> 'int' 6
[B1.25] + [B1.26]
  28: IntegerLiteral 0x5637768edff8 <./lopcodes.h:40:17> 'int' 8
8
  29: BinaryOperator 0x5637768ee018 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768edfd8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768edfb0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768edf70 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768edf90 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768edff8 <line:40:17> 'int' 8
([B1.27]) + [B1.28]
  30: BinaryOperator 0x5637768ee060 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768edf50 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768edf28 <col:23, col:30> 'Instruction':'unsigned int' <NoOp>
|   `-ImplicitCastExpr 0x5637768edf10 <col:26, col:30> 'unsigned int' <LValueToRValue>
|     `-ParenExpr 0x5637768edef0 <col:26, col:30> 'unsigned int' lvalue
|       `-DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
`-ParenExpr 0x5637768ee040 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5637768ee018 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5637768edfd8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5637768edfb0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5637768edf70 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5637768edf90 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768edff8 <line:40:17> 'int' 8
([B1.24]) << ([B1.29])
  31: BinaryOperator 0x5637768ee0a8 <./lopcodes.h:109:29, line:111:36> 'unsigned int' '|'
|-BinaryOperator 0x5637768ede60 <line:109:29, line:110:34> 'unsigned int' '|'
| |-ParenExpr 0x5637768edc88 <line:109:29, col:58> 'Instruction':'unsigned int'
| | `-BinaryOperator 0x5637768edc60 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
| |   |-ParenExpr 0x5637768edc20 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| |   | `-CStyleCastExpr 0x5637768edbf8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
| |   |   `-ImplicitCastExpr 0x5637768edbe0 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
| |   |     `-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
| |   |       `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
| |   `-IntegerLiteral 0x5637768edc40 <./lopcodes.h:44:17> 'int' 0
| `-ParenExpr 0x5637768ede40 <line:110:6, col:34> 'Instruction':'unsigned int'
|   `-BinaryOperator 0x5637768ede18 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|     |-ParenExpr 0x5637768edd70 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|     | `-CStyleCastExpr 0x5637768edd48 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x5637768edd30 <col:26, col:30> 'int' <LValueToRValue>
|     |     `-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
|     |       `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
|     `-ParenExpr 0x5637768eddf8 <./lopcodes.h:45:16, col:33> 'int'
|       `-BinaryOperator 0x5637768eddd0 <line:44:17, line:42:18> 'int' '+'
|         |-IntegerLiteral 0x5637768edd90 <line:44:17> 'int' 0
|         `-IntegerLiteral 0x5637768eddb0 <line:42:18> 'int' 6
`-ParenExpr 0x5637768ee088 <line:111:6, col:36> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ee060 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768edf50 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    | `-CStyleCastExpr 0x5637768edf28 <col:23, col:30> 'Instruction':'unsigned int' <NoOp>
    |   `-ImplicitCastExpr 0x5637768edf10 <col:26, col:30> 'unsigned int' <LValueToRValue>
    |     `-ParenExpr 0x5637768edef0 <col:26, col:30> 'unsigned int' lvalue
    |       `-DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
    `-ParenExpr 0x5637768ee040 <./lopcodes.h:46:16, col:31> 'int'
      `-BinaryOperator 0x5637768ee018 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x5637768edfd8 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x5637768edfb0 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x5637768edf70 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x5637768edf90 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768edff8 <line:40:17> 'int' 8
[B1.21] | ([B1.30])
  32: DeclRefExpr 0x5637768ee0f0 <lcode.c:815:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
fs
  33: ImplicitCastExpr 0x5637768ee118 <lcode.c:815:46> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.32] (ImplicitCastExpr, LValueToRValue, FuncState *)
  34: MemberExpr 0x5637768ee130 <lcode.c:815:46, col:50> 'struct LexState *' lvalue ->ls 0x56377687df60
`-ImplicitCastExpr 0x5637768ee118 <col:46> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.33]->ls
  35: ImplicitCastExpr 0x5637768ee168 <lcode.c:815:46, col:50> 'struct LexState *' <LValueToRValue>
`-MemberExpr 0x5637768ee130 <col:46, col:50> 'struct LexState *' lvalue ->ls 0x56377687df60
  `-ImplicitCastExpr 0x5637768ee118 <col:46> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.34] (ImplicitCastExpr, LValueToRValue, struct LexState *)
  36: MemberExpr 0x5637768ee180 <lcode.c:815:46, col:54> 'int' lvalue ->lastline 0x5637768694a8
`-ImplicitCastExpr 0x5637768ee168 <col:46, col:50> 'struct LexState *' <LValueToRValue>
  `-MemberExpr 0x5637768ee130 <col:46, col:50> 'struct LexState *' lvalue ->ls 0x56377687df60
    `-ImplicitCastExpr 0x5637768ee118 <col:46> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.35]->lastline
  37: ImplicitCastExpr 0x5637768ee228 <lcode.c:815:46, col:54> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ee180 <col:46, col:54> 'int' lvalue ->lastline 0x5637768694a8
  `-ImplicitCastExpr 0x5637768ee168 <col:46, col:50> 'struct LexState *' <LValueToRValue>
    `-MemberExpr 0x5637768ee130 <col:46, col:50> 'struct LexState *' lvalue ->ls 0x56377687df60
      `-ImplicitCastExpr 0x5637768ee118 <col:46> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.36] (ImplicitCastExpr, LValueToRValue, int)
  38: CallExpr 0x5637768ee1d0 <lcode.c:815:10, col:62> 'int'
|-ImplicitCastExpr 0x5637768ee1b8 <col:10> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768edb08 <col:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
|-ImplicitCastExpr 0x5637768ee210 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768edb30 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
|-ParenExpr 0x5637768ee0d0 <./lopcodes.h:109:28, line:111:37> 'unsigned int'
| `-BinaryOperator 0x5637768ee0a8 <line:109:29, line:111:36> 'unsigned int' '|'
|   |-BinaryOperator 0x5637768ede60 <line:109:29, line:110:34> 'unsigned int' '|'
|   | |-ParenExpr 0x5637768edc88 <line:109:29, col:58> 'Instruction':'unsigned int'
|   | | `-BinaryOperator 0x5637768edc60 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|   | |   |-ParenExpr 0x5637768edc20 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | |   | `-CStyleCastExpr 0x5637768edbf8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   | |   |   `-ImplicitCastExpr 0x5637768edbe0 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
|   | |   |     `-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
|   | |   |       `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
|   | |   `-IntegerLiteral 0x5637768edc40 <./lopcodes.h:44:17> 'int' 0
|   | `-ParenExpr 0x5637768ede40 <line:110:6, col:34> 'Instruction':'unsigned int'
|   |   `-BinaryOperator 0x5637768ede18 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|   |     |-ParenExpr 0x5637768edd70 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   |     | `-CStyleCastExpr 0x5637768edd48 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5637768edd30 <col:26, col:30> 'int' <LValueToRValue>
|   |     |     `-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
|   |     |       `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
|   |     `-ParenExpr 0x5637768eddf8 <./lopcodes.h:45:16, col:33> 'int'
|   |       `-BinaryOperator 0x5637768eddd0 <line:44:17, line:42:18> 'int' '+'
|   |         |-IntegerLiteral 0x5637768edd90 <line:44:17> 'int' 0
|   |         `-IntegerLiteral 0x5637768eddb0 <line:42:18> 'int' 6
|   `-ParenExpr 0x5637768ee088 <line:111:6, col:36> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768ee060 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768edf50 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|       | `-CStyleCastExpr 0x5637768edf28 <col:23, col:30> 'Instruction':'unsigned int' <NoOp>
|       |   `-ImplicitCastExpr 0x5637768edf10 <col:26, col:30> 'unsigned int' <LValueToRValue>
|       |     `-ParenExpr 0x5637768edef0 <col:26, col:30> 'unsigned int' lvalue
|       |       `-DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
|       `-ParenExpr 0x5637768ee040 <./lopcodes.h:46:16, col:31> 'int'
|         `-BinaryOperator 0x5637768ee018 <line:45:16, line:40:17> 'int' '+'
|           |-ParenExpr 0x5637768edfd8 <line:45:16, col:33> 'int'
|           | `-BinaryOperator 0x5637768edfb0 <line:44:17, line:42:18> 'int' '+'
|           |   |-IntegerLiteral 0x5637768edf70 <line:44:17> 'int' 0
|           |   `-IntegerLiteral 0x5637768edf90 <line:42:18> 'int' 6
|           `-IntegerLiteral 0x5637768edff8 <line:40:17> 'int' 8
`-ImplicitCastExpr 0x5637768ee228 <lcode.c:815:46, col:54> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768ee180 <col:46, col:54> 'int' lvalue ->lastline 0x5637768694a8
    `-ImplicitCastExpr 0x5637768ee168 <col:46, col:50> 'struct LexState *' <LValueToRValue>
      `-MemberExpr 0x5637768ee130 <col:46, col:50> 'struct LexState *' lvalue ->ls 0x56377687df60
        `-ImplicitCastExpr 0x5637768ee118 <col:46> 'FuncState *' <LValueToRValue>
          `-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
[B1.6]([B1.8], ([B1.31]), [B1.37])
  39: ReturnStmt 0x5637768ee240 <lcode.c:815:3, col:62>
`-CallExpr 0x5637768ee1d0 <col:10, col:62> 'int'
  |-ImplicitCastExpr 0x5637768ee1b8 <col:10> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768edb08 <col:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
  |-ImplicitCastExpr 0x5637768ee210 <col:20> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768edb30 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
  |-ParenExpr 0x5637768ee0d0 <./lopcodes.h:109:28, line:111:37> 'unsigned int'
  | `-BinaryOperator 0x5637768ee0a8 <line:109:29, line:111:36> 'unsigned int' '|'
  |   |-BinaryOperator 0x5637768ede60 <line:109:29, line:110:34> 'unsigned int' '|'
  |   | |-ParenExpr 0x5637768edc88 <line:109:29, col:58> 'Instruction':'unsigned int'
  |   | | `-BinaryOperator 0x5637768edc60 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
  |   | |   |-ParenExpr 0x5637768edc20 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |   | |   | `-CStyleCastExpr 0x5637768edbf8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
  |   | |   |   `-ImplicitCastExpr 0x5637768edbe0 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
  |   | |   |     `-ParenExpr 0x5637768edbc0 <col:26, col:30> 'OpCode':'OpCode' lvalue
  |   | |   |       `-DeclRefExpr 0x5637768edb58 <lcode.c:815:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ed778 'o' 'OpCode':'OpCode'
  |   | |   `-IntegerLiteral 0x5637768edc40 <./lopcodes.h:44:17> 'int' 0
  |   | `-ParenExpr 0x5637768ede40 <line:110:6, col:34> 'Instruction':'unsigned int'
  |   |   `-BinaryOperator 0x5637768ede18 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
  |   |     |-ParenExpr 0x5637768edd70 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |   |     | `-CStyleCastExpr 0x5637768edd48 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
  |   |     |   `-ImplicitCastExpr 0x5637768edd30 <col:26, col:30> 'int' <LValueToRValue>
  |   |     |     `-ParenExpr 0x5637768edd10 <col:26, col:30> 'int' lvalue
  |   |     |       `-DeclRefExpr 0x5637768edca8 <lcode.c:815:38> 'int' lvalue ParmVar 0x5637768ed7f0 'a' 'int'
  |   |     `-ParenExpr 0x5637768eddf8 <./lopcodes.h:45:16, col:33> 'int'
  |   |       `-BinaryOperator 0x5637768eddd0 <line:44:17, line:42:18> 'int' '+'
  |   |         |-IntegerLiteral 0x5637768edd90 <line:44:17> 'int' 0
  |   |         `-IntegerLiteral 0x5637768eddb0 <line:42:18> 'int' 6
  |   `-ParenExpr 0x5637768ee088 <line:111:6, col:36> 'Instruction':'unsigned int'
  |     `-BinaryOperator 0x5637768ee060 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
  |       |-ParenExpr 0x5637768edf50 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |       | `-CStyleCastExpr 0x5637768edf28 <col:23, col:30> 'Instruction':'unsigned int' <NoOp>
  |       |   `-ImplicitCastExpr 0x5637768edf10 <col:26, col:30> 'unsigned int' <LValueToRValue>
  |       |     `-ParenExpr 0x5637768edef0 <col:26, col:30> 'unsigned int' lvalue
  |       |       `-DeclRefExpr 0x5637768ede88 <lcode.c:815:41> 'unsigned int' lvalue ParmVar 0x5637768ed868 'bc' 'unsigned int'
  |       `-ParenExpr 0x5637768ee040 <./lopcodes.h:46:16, col:31> 'int'
  |         `-BinaryOperator 0x5637768ee018 <line:45:16, line:40:17> 'int' '+'
  |           |-ParenExpr 0x5637768edfd8 <line:45:16, col:33> 'int'
  |           | `-BinaryOperator 0x5637768edfb0 <line:44:17, line:42:18> 'int' '+'
  |           |   |-IntegerLiteral 0x5637768edf70 <line:44:17> 'int' 0
  |           |   `-IntegerLiteral 0x5637768edf90 <line:42:18> 'int' 6
  |           `-IntegerLiteral 0x5637768edff8 <line:40:17> 'int' 8
  `-ImplicitCastExpr 0x5637768ee228 <lcode.c:815:46, col:54> 'int' <LValueToRValue>
    `-MemberExpr 0x5637768ee180 <col:46, col:54> 'int' lvalue ->lastline 0x5637768694a8
      `-ImplicitCastExpr 0x5637768ee168 <col:46, col:50> 'struct LexState *' <LValueToRValue>
        `-MemberExpr 0x5637768ee130 <col:46, col:50> 'struct LexState *' lvalue ->ls 0x56377687df60
          `-ImplicitCastExpr 0x5637768ee118 <col:46> 'FuncState *' <LValueToRValue>
            `-DeclRefExpr 0x5637768ee0f0 <col:46> 'FuncState *' lvalue ParmVar 0x5637768ed708 'fs' 'FuncState *'
return [B1.38];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
