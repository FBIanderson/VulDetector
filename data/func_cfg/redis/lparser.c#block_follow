static int block_follow(int token)
 [B8 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x558fa8f2a288 <lparser.c:872:11> 'int' lvalue ParmVar 0x558fa8f2a150 'token' 'int'
token
   2: ImplicitCastExpr 0x558fa8f2a2b0 <lparser.c:872:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2a288 <col:11> 'int' lvalue ParmVar 0x558fa8f2a150 'token' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B1.2]
   Preds (1): B8
   Succs (6): B3 B4 B5 B6 B7 B2

 [B2]
  default:
   1: IntegerLiteral 0x558fa8f2a510 <lparser.c:876:21> 'int' 0
0
   2: ReturnStmt 0x558fa8f2a530 <lparser.c:876:14, col:21>
`-IntegerLiteral 0x558fa8f2a510 <col:21> 'int' 0
return [B2.1];
   Preds (1): B1
   Succs (1): B0

 [B3]
  case TK_ELSE:
   Preds (1): B1
   Succs (1): B4

 [B4]
  case TK_ELSEIF:
   Preds (2): B3 B1
   Succs (1): B5

 [B5]
  case TK_END:
   Preds (2): B4 B1
   Succs (1): B6

 [B6]
  case TK_UNTIL:
   Preds (2): B5 B1
   Succs (1): B7

 [B7]
  case TK_EOS:
   1: IntegerLiteral 0x558fa8f2a4d8 <lparser.c:875:14> 'int' 1
1
   2: ReturnStmt 0x558fa8f2a4f8 <lparser.c:875:7, col:14>
`-IntegerLiteral 0x558fa8f2a4d8 <col:14> 'int' 1
return [B7.1];
   Preds (2): B1 B6
   Succs (1): B0

 [B0 (EXIT)]
   Preds (2): B2 B7
