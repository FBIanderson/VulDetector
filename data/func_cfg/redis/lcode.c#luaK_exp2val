void luaK_exp2val(FuncState *fs, expdesc *e)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x5637768d3d28 <lcode.c:440:5> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
   2: ImplicitCastExpr 0x5637768d3da0 <lcode.c:440:5> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d3d28 <col:5> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d3d50 <lcode.c:440:24> 'FuncState *' lvalue ParmVar 0x5637768d3820 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d3df0 <lcode.c:440:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d3d50 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d3820 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d3d78 <lcode.c:440:28> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d3e08 <lcode.c:440:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d3d78 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B1.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d3db8 <lcode.c:440:5, col:29> 'void'
|-ImplicitCastExpr 0x5637768d3da0 <col:5> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d3d28 <col:5> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d3df0 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d3d50 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d3820 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d3e08 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d3d78 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B1.2]([B1.4], [B1.6])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768d3bd8 <lcode.c:438:5> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x5637768d3ca8 <lcode.c:438:5> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d3bd8 <col:5> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d3c00 <lcode.c:438:21> 'FuncState *' lvalue ParmVar 0x5637768d3820 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d3cf8 <lcode.c:438:21> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d3c00 <col:21> 'FuncState *' lvalue ParmVar 0x5637768d3820 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d3c28 <lcode.c:438:25> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d3d10 <lcode.c:438:25> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d3c28 <col:25> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B2.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d3cc0 <lcode.c:438:5, col:26> 'int'
|-ImplicitCastExpr 0x5637768d3ca8 <col:5> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d3bd8 <col:5> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d3cf8 <col:21> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d3c00 <col:21> 'FuncState *' lvalue ParmVar 0x5637768d3820 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d3d10 <col:25> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d3c28 <col:25> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B2.2]([B2.4], [B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5637768d3a18 <lcode.c:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d3a60 <lcode.c:27:22, col:24> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768d3a40 <col:22, col:24> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768d3a18 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
([B3.1]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d3a78 <lcode.c:27:22, col:27> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768d3a60 <col:22, col:24> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768d3a40 <col:22, col:24> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768d3a18 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B3.2]->t
   4: ImplicitCastExpr 0x5637768d3b60 <lcode.c:27:22, col:27> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d3a78 <col:22, col:27> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768d3a60 <col:22, col:24> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768d3a40 <col:22, col:24> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768d3a18 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x5637768d3ab0 <lcode.c:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d3af8 <lcode.c:27:32, col:34> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768d3ad8 <col:32, col:34> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768d3ab0 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
([B3.5]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768d3b10 <lcode.c:27:32, col:37> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768d3af8 <col:32, col:34> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768d3ad8 <col:32, col:34> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768d3ab0 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B3.6]->f
   8: ImplicitCastExpr 0x5637768d3b78 <lcode.c:27:32, col:37> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d3b10 <col:32, col:37> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768d3af8 <col:32, col:34> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768d3ad8 <col:32, col:34> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768d3ab0 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x5637768d3b90 <lcode.c:27:22, col:37> 'int' '!='
|-ImplicitCastExpr 0x5637768d3b60 <col:22, col:27> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d3a78 <col:22, col:27> 'int' lvalue ->t 0x56377687d890
|   `-ImplicitCastExpr 0x5637768d3a60 <col:22, col:24> 'expdesc *' <LValueToRValue>
|     `-ParenExpr 0x5637768d3a40 <col:22, col:24> 'expdesc *' lvalue
|       `-DeclRefExpr 0x5637768d3a18 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d3b78 <line:27:32, col:37> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d3b10 <col:32, col:37> 'int' lvalue ->f 0x56377687d8f0
    `-ImplicitCastExpr 0x5637768d3af8 <col:32, col:34> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768d3ad8 <col:32, col:34> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768d3ab0 <line:437:16> 'expdesc *' lvalue ParmVar 0x5637768d3890 'e' 'expdesc *'
[B3.4] != [B3.8]
   T: if ([B3.9])
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
