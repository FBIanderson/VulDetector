static void new_localvar(LexState *ls, TString *name, int n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x558fa8ef3818 <lparser.c:163:52> 'int (LexState *, TString *)' Function 0x558fa8ef09d8 'registerlocalvar' 'int (LexState *, TString *)'
registerlocalvar
   2: ImplicitCastExpr 0x558fa8ef64a8 <lparser.c:163:52> 'int (*)(LexState *, TString *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8ef3818 <col:52> 'int (LexState *, TString *)' Function 0x558fa8ef09d8 'registerlocalvar' 'int (LexState *, TString *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, TString *))
   3: DeclRefExpr 0x558fa8ef6400 <lparser.c:163:69> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8ef64f8 <lparser.c:163:69> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef6400 <col:69> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8ef6428 <lparser.c:163:73> 'TString *' lvalue ParmVar 0x558fa8ef2eb8 'name' 'TString *'
name
   6: ImplicitCastExpr 0x558fa8ef6510 <lparser.c:163:73> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef6428 <col:73> 'TString *' lvalue ParmVar 0x558fa8ef2eb8 'name' 'TString *'
[B1.5] (ImplicitCastExpr, LValueToRValue, TString *)
   7: CallExpr 0x558fa8ef64c0 <lparser.c:163:52, col:77> 'int'
|-ImplicitCastExpr 0x558fa8ef64a8 <col:52> 'int (*)(LexState *, TString *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8ef3818 <col:52> 'int (LexState *, TString *)' Function 0x558fa8ef09d8 'registerlocalvar' 'int (LexState *, TString *)'
|-ImplicitCastExpr 0x558fa8ef64f8 <col:69> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8ef6400 <col:69> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8ef6510 <col:73> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef6428 <col:73> 'TString *' lvalue ParmVar 0x558fa8ef2eb8 'name' 'TString *'
[B1.2]([B1.4], [B1.6])
   8: CStyleCastExpr 0x558fa8ef6590 <./llimits.h:75:23, col:30> 'unsigned short' <IntegralCast>
`-ParenExpr 0x558fa8ef6570 <col:26, col:30> 'int'
  `-CallExpr 0x558fa8ef64c0 <lparser.c:163:52, col:77> 'int'
    |-ImplicitCastExpr 0x558fa8ef64a8 <col:52> 'int (*)(LexState *, TString *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8ef3818 <col:52> 'int (LexState *, TString *)' Function 0x558fa8ef09d8 'registerlocalvar' 'int (LexState *, TString *)'
    |-ImplicitCastExpr 0x558fa8ef64f8 <col:69> 'LexState *' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8ef6400 <col:69> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
    `-ImplicitCastExpr 0x558fa8ef6510 <col:73> 'TString *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8ef6428 <col:73> 'TString *' lvalue ParmVar 0x558fa8ef2eb8 'name' 'TString *'
(unsigned short)([B1.7]) (CStyleCastExpr, IntegralCast, unsigned short)
   9: DeclRefExpr 0x558fa8ef3620 <lparser.c:163:3> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x558fa8ef3648 <lparser.c:163:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef3620 <col:3> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: MemberExpr 0x558fa8ef3660 <lparser.c:163:3, col:7> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
`-ImplicitCastExpr 0x558fa8ef3648 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef3620 <col:3> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.10]->actvar
  12: ImplicitCastExpr 0x558fa8ef37d8 <lparser.c:163:3, col:7> 'unsigned short *' <ArrayToPointerDecay>
`-MemberExpr 0x558fa8ef3660 <col:3, col:7> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
  `-ImplicitCastExpr 0x558fa8ef3648 <col:3> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8ef3620 <col:3> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.11] (ImplicitCastExpr, ArrayToPointerDecay, unsigned short *)
  13: DeclRefExpr 0x558fa8ef3698 <lparser.c:163:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x558fa8ef36c0 <lparser.c:163:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: MemberExpr 0x558fa8ef36d8 <lparser.c:163:14, col:18> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8ef36c0 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.14]->nactvar
  16: ImplicitCastExpr 0x558fa8ef3738 <lparser.c:163:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8ef36d8 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8ef36c0 <col:14> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.15] (ImplicitCastExpr, LValueToRValue, lu_byte)
  17: ImplicitCastExpr 0x558fa8ef3750 <lparser.c:163:14, col:18> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8ef3738 <col:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8ef36d8 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8ef36c0 <col:14> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B1.16] (ImplicitCastExpr, IntegralCast, int)
  18: DeclRefExpr 0x558fa8ef3710 <lparser.c:163:26> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
n
  19: ImplicitCastExpr 0x558fa8ef3768 <lparser.c:163:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef3710 <col:26> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
[B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: BinaryOperator 0x558fa8ef3780 <lparser.c:163:14, col:26> 'int' '+'
|-ImplicitCastExpr 0x558fa8ef3750 <col:14, col:18> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8ef3738 <col:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8ef36d8 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|     `-ImplicitCastExpr 0x558fa8ef36c0 <col:14> 'FuncState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8ef3768 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef3710 <col:26> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
[B1.17] + [B1.19]
  21: ArraySubscriptExpr 0x558fa8ef37f0 <lparser.c:163:3, col:27> 'unsigned short' lvalue
|-ImplicitCastExpr 0x558fa8ef37d8 <col:3, col:7> 'unsigned short *' <ArrayToPointerDecay>
| `-MemberExpr 0x558fa8ef3660 <col:3, col:7> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
|   `-ImplicitCastExpr 0x558fa8ef3648 <col:3> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8ef3620 <col:3> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
`-BinaryOperator 0x558fa8ef3780 <col:14, col:26> 'int' '+'
  |-ImplicitCastExpr 0x558fa8ef3750 <col:14, col:18> 'int' <IntegralCast>
  | `-ImplicitCastExpr 0x558fa8ef3738 <col:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
  |   `-MemberExpr 0x558fa8ef36d8 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  |     `-ImplicitCastExpr 0x558fa8ef36c0 <col:14> 'FuncState *' <LValueToRValue>
  |       `-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x558fa8ef3768 <col:26> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558fa8ef3710 <col:26> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
[B1.12][[B1.20]]
  22: BinaryOperator 0x558fa8ef65d8 <lparser.c:163:3, ./llimits.h:75:31> 'unsigned short' '='
|-ArraySubscriptExpr 0x558fa8ef37f0 <lparser.c:163:3, col:27> 'unsigned short' lvalue
| |-ImplicitCastExpr 0x558fa8ef37d8 <col:3, col:7> 'unsigned short *' <ArrayToPointerDecay>
| | `-MemberExpr 0x558fa8ef3660 <col:3, col:7> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
| |   `-ImplicitCastExpr 0x558fa8ef3648 <col:3> 'FuncState *' <LValueToRValue>
| |     `-DeclRefExpr 0x558fa8ef3620 <col:3> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
| `-BinaryOperator 0x558fa8ef3780 <col:14, col:26> 'int' '+'
|   |-ImplicitCastExpr 0x558fa8ef3750 <col:14, col:18> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x558fa8ef3738 <col:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x558fa8ef36d8 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|   |     `-ImplicitCastExpr 0x558fa8ef36c0 <col:14> 'FuncState *' <LValueToRValue>
|   |       `-DeclRefExpr 0x558fa8ef3698 <col:14> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
|   `-ImplicitCastExpr 0x558fa8ef3768 <col:26> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8ef3710 <col:26> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
`-ParenExpr 0x558fa8ef65b8 <./llimits.h:75:22, col:31> 'unsigned short'
  `-CStyleCastExpr 0x558fa8ef6590 <col:23, col:30> 'unsigned short' <IntegralCast>
    `-ParenExpr 0x558fa8ef6570 <col:26, col:30> 'int'
      `-CallExpr 0x558fa8ef64c0 <lparser.c:163:52, col:77> 'int'
        |-ImplicitCastExpr 0x558fa8ef64a8 <col:52> 'int (*)(LexState *, TString *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x558fa8ef3818 <col:52> 'int (LexState *, TString *)' Function 0x558fa8ef09d8 'registerlocalvar' 'int (LexState *, TString *)'
        |-ImplicitCastExpr 0x558fa8ef64f8 <col:69> 'LexState *' <LValueToRValue>
        | `-DeclRefExpr 0x558fa8ef6400 <col:69> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
        `-ImplicitCastExpr 0x558fa8ef6510 <col:73> 'TString *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8ef6428 <col:73> 'TString *' lvalue ParmVar 0x558fa8ef2eb8 'name' 'TString *'
[B1.21] = ([B1.8])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8ef3410 <lparser.c:34:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
errorlimit
   2: ImplicitCastExpr 0x558fa8ef3548 <lparser.c:34:48> 'void (*)(FuncState *, int, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8ef3410 <col:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, const char *))
   3: DeclRefExpr 0x558fa8ef3438 <lparser.c:162:19> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8ef35a0 <lparser.c:162:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef3438 <col:19> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: IntegerLiteral 0x558fa8ef3460 <./luaconf.h:475:23> 'int' 200
200
   6: StringLiteral 0x558fa8ef34b8 <lparser.c:162:54> 'char [16]' lvalue "local variables"
"local variables"
   7: ImplicitCastExpr 0x558fa8ef35b8 <lparser.c:162:54> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8ef34b8 <col:54> 'char [16]' lvalue "local variables"
[B2.6] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   8: ImplicitCastExpr 0x558fa8ef35d0 <lparser.c:162:54> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8ef35b8 <col:54> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8ef34b8 <col:54> 'char [16]' lvalue "local variables"
[B2.7] (ImplicitCastExpr, BitCast, const char *)
   9: CallExpr 0x558fa8ef3560 <lparser.c:34:48, col:65> 'void'
|-ImplicitCastExpr 0x558fa8ef3548 <col:48> 'void (*)(FuncState *, int, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8ef3410 <col:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
|-ImplicitCastExpr 0x558fa8ef35a0 <line:162:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8ef3438 <col:19> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
|-IntegerLiteral 0x558fa8ef3460 <./luaconf.h:475:23> 'int' 200
`-ImplicitCastExpr 0x558fa8ef35d0 <lparser.c:162:54> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8ef35b8 <col:54> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8ef34b8 <col:54> 'char [16]' lvalue "local variables"
[B2.2]([B2.4], [B2.5], [B2.8])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8ef3188 <lparser.c:161:19> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8ef31b0 <lparser.c:161:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef3188 <col:19> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8ef31c8 <lparser.c:161:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8ef31b0 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef3188 <col:19> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
[B3.2]->fs
   4: ImplicitCastExpr 0x558fa8ef3200 <lparser.c:161:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8ef31c8 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8ef31b0 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8ef3188 <col:19> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8ef3218 <lparser.c:161:3, col:25>col:14
`-VarDecl 0x558fa8ef3128 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8ef3200 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8ef31c8 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8ef31b0 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8ef3188 <col:19> 'LexState *' lvalue ParmVar 0x558fa8ef2e48 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclRefExpr 0x558fa8ef3230 <lparser.c:162:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x558fa8ef3258 <lparser.c:162:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B3.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: MemberExpr 0x558fa8ef3270 <lparser.c:162:23, col:27> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8ef3258 <col:23> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B3.7]->nactvar
   9: ImplicitCastExpr 0x558fa8ef32d0 <lparser.c:162:23, col:27> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8ef3270 <col:23, col:27> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8ef3258 <col:23> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B3.8] (ImplicitCastExpr, LValueToRValue, lu_byte)
  10: ImplicitCastExpr 0x558fa8ef32e8 <lparser.c:162:23, col:27> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8ef32d0 <col:23, col:27> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8ef3270 <col:23, col:27> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8ef3258 <col:23> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
[B3.9] (ImplicitCastExpr, IntegralCast, int)
  11: DeclRefExpr 0x558fa8ef32a8 <lparser.c:162:35> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
n
  12: ImplicitCastExpr 0x558fa8ef3300 <lparser.c:162:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef32a8 <col:35> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
[B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: BinaryOperator 0x558fa8ef3318 <lparser.c:162:23, col:35> 'int' '+'
|-ImplicitCastExpr 0x558fa8ef32e8 <col:23, col:27> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8ef32d0 <col:23, col:27> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8ef3270 <col:23, col:27> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|     `-ImplicitCastExpr 0x558fa8ef3258 <col:23> 'FuncState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8ef3300 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef32a8 <col:35> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
[B3.10] + [B3.12]
  14: IntegerLiteral 0x558fa8ef3340 <lparser.c:162:37> 'int' 1
1
  15: BinaryOperator 0x558fa8ef3360 <lparser.c:162:23, col:37> 'int' '+'
|-BinaryOperator 0x558fa8ef3318 <col:23, col:35> 'int' '+'
| |-ImplicitCastExpr 0x558fa8ef32e8 <col:23, col:27> 'int' <IntegralCast>
| | `-ImplicitCastExpr 0x558fa8ef32d0 <col:23, col:27> 'lu_byte':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x558fa8ef3270 <col:23, col:27> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
| |     `-ImplicitCastExpr 0x558fa8ef3258 <col:23> 'FuncState *' <LValueToRValue>
| |       `-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
| `-ImplicitCastExpr 0x558fa8ef3300 <col:35> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8ef32a8 <col:35> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
`-IntegerLiteral 0x558fa8ef3340 <col:37> 'int' 1
[B3.13] + [B3.14]
  16: IntegerLiteral 0x558fa8ef33a8 <./luaconf.h:475:23> 'int' 200
200
  17: BinaryOperator 0x558fa8ef33e8 <lparser.c:34:39, col:45> 'int' '>'
|-ParenExpr 0x558fa8ef3388 <col:39, col:41> 'int'
| `-BinaryOperator 0x558fa8ef3360 <line:162:23, col:37> 'int' '+'
|   |-BinaryOperator 0x558fa8ef3318 <col:23, col:35> 'int' '+'
|   | |-ImplicitCastExpr 0x558fa8ef32e8 <col:23, col:27> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x558fa8ef32d0 <col:23, col:27> 'lu_byte':'unsigned char' <LValueToRValue>
|   | |   `-MemberExpr 0x558fa8ef3270 <col:23, col:27> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|   | |     `-ImplicitCastExpr 0x558fa8ef3258 <col:23> 'FuncState *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x558fa8ef3230 <col:23> 'FuncState *' lvalue Var 0x558fa8ef3128 'fs' 'FuncState *'
|   | `-ImplicitCastExpr 0x558fa8ef3300 <col:35> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x558fa8ef32a8 <col:35> 'int' lvalue ParmVar 0x558fa8ef2f30 'n' 'int'
|   `-IntegerLiteral 0x558fa8ef3340 <col:37> 'int' 1
`-ParenExpr 0x558fa8ef33c8 <line:34:43, col:45> 'int'
  `-IntegerLiteral 0x558fa8ef33a8 <./luaconf.h:475:23> 'int' 200
([B3.15]) > ([B3.16])
   T: if [B3.17]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
