static void enterblock(FuncState *fs, BlockCnt *bl, lu_byte isbreakable)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: IntegerLiteral 0x558fa8f00530 <./lcode.h:20:19> 'int' 1
1
   2: UnaryOperator 0x558fa8f00550 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f00530 <col:19> 'int' 1
-[B1.1]
   3: DeclRefExpr 0x558fa8f004b8 <lparser.c:286:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
bl
   4: ImplicitCastExpr 0x558fa8f004e0 <lparser.c:286:3> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f004b8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.3] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   5: MemberExpr 0x558fa8f004f8 <lparser.c:286:3, col:7> 'int' lvalue ->breaklist 0x558fa8ee9d68
`-ImplicitCastExpr 0x558fa8f004e0 <col:3> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f004b8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.4]->breaklist
   6: BinaryOperator 0x558fa8f00590 <lparser.c:286:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x558fa8f004f8 <lparser.c:286:3, col:7> 'int' lvalue ->breaklist 0x558fa8ee9d68
| `-ImplicitCastExpr 0x558fa8f004e0 <col:3> 'BlockCnt *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f004b8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
`-ParenExpr 0x558fa8f00570 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x558fa8f00550 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8f00530 <col:19> 'int' 1
[B1.5] = ([B1.2])
   7: DeclRefExpr 0x558fa8f00630 <lparser.c:287:21> 'lu_byte':'unsigned char' lvalue ParmVar 0x558fa8f002d0 'isbreakable' 'lu_byte':'unsigned char'
isbreakable
   8: ImplicitCastExpr 0x558fa8f00658 <lparser.c:287:21> 'lu_byte':'unsigned char' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00630 <col:21> 'lu_byte':'unsigned char' lvalue ParmVar 0x558fa8f002d0 'isbreakable' 'lu_byte':'unsigned char'
[B1.7] (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: DeclRefExpr 0x558fa8f005b8 <lparser.c:287:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
bl
  10: ImplicitCastExpr 0x558fa8f005e0 <lparser.c:287:3> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f005b8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.9] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  11: MemberExpr 0x558fa8f005f8 <lparser.c:287:3, col:7> 'lu_byte':'unsigned char' lvalue ->isbreakable 0x558fa8ee9e70
`-ImplicitCastExpr 0x558fa8f005e0 <col:3> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f005b8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.10]->isbreakable
  12: BinaryOperator 0x558fa8f00670 <lparser.c:287:3, col:21> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f005f8 <col:3, col:7> 'lu_byte':'unsigned char' lvalue ->isbreakable 0x558fa8ee9e70
| `-ImplicitCastExpr 0x558fa8f005e0 <col:3> 'BlockCnt *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f005b8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8f00658 <col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00630 <col:21> 'lu_byte':'unsigned char' lvalue ParmVar 0x558fa8f002d0 'isbreakable' 'lu_byte':'unsigned char'
[B1.11] = [B1.8]
  13: DeclRefExpr 0x558fa8f00710 <lparser.c:288:17> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x558fa8f00738 <lparser.c:288:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00710 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: MemberExpr 0x558fa8f00750 <lparser.c:288:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f00738 <col:17> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00710 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.14]->nactvar
  16: ImplicitCastExpr 0x558fa8f00788 <lparser.c:288:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f00750 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f00738 <col:17> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f00710 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.15] (ImplicitCastExpr, LValueToRValue, lu_byte)
  17: DeclRefExpr 0x558fa8f00698 <lparser.c:288:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
bl
  18: ImplicitCastExpr 0x558fa8f006c0 <lparser.c:288:3> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00698 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.17] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  19: MemberExpr 0x558fa8f006d8 <lparser.c:288:3, col:7> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
`-ImplicitCastExpr 0x558fa8f006c0 <col:3> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00698 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.18]->nactvar
  20: BinaryOperator 0x558fa8f007a0 <lparser.c:288:3, col:21> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f006d8 <col:3, col:7> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
| `-ImplicitCastExpr 0x558fa8f006c0 <col:3> 'BlockCnt *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f00698 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8f00788 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f00750 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f00738 <col:17> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f00710 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.19] = [B1.16]
  21: IntegerLiteral 0x558fa8f00840 <lparser.c:289:15> 'int' 0
0
  22: ImplicitCastExpr 0x558fa8f00860 <lparser.c:289:15> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f00840 <col:15> 'int' 0
[B1.21] (ImplicitCastExpr, IntegralCast, lu_byte)
  23: DeclRefExpr 0x558fa8f007c8 <lparser.c:289:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
bl
  24: ImplicitCastExpr 0x558fa8f007f0 <lparser.c:289:3> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f007c8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.23] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  25: MemberExpr 0x558fa8f00808 <lparser.c:289:3, col:7> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
`-ImplicitCastExpr 0x558fa8f007f0 <col:3> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f007c8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.24]->upval
  26: BinaryOperator 0x558fa8f00878 <lparser.c:289:3, col:15> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f00808 <col:3, col:7> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
| `-ImplicitCastExpr 0x558fa8f007f0 <col:3> 'BlockCnt *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f007c8 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8f00860 <col:15> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f00840 <col:15> 'int' 0
[B1.25] = [B1.22]
  27: DeclRefExpr 0x558fa8f00918 <lparser.c:290:18> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
fs
  28: ImplicitCastExpr 0x558fa8f00940 <lparser.c:290:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00918 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.27] (ImplicitCastExpr, LValueToRValue, FuncState *)
  29: MemberExpr 0x558fa8f00958 <lparser.c:290:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8f00940 <col:18> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00918 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.28]->bl
  30: ImplicitCastExpr 0x558fa8f00990 <lparser.c:290:18, col:22> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8f00958 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
  `-ImplicitCastExpr 0x558fa8f00940 <col:18> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f00918 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.29] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
  31: DeclRefExpr 0x558fa8f008a0 <lparser.c:290:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
bl
  32: ImplicitCastExpr 0x558fa8f008c8 <lparser.c:290:3> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f008a0 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.31] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  33: MemberExpr 0x558fa8f008e0 <lparser.c:290:3, col:7> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
`-ImplicitCastExpr 0x558fa8f008c8 <col:3> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f008a0 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.32]->previous
  34: BinaryOperator 0x558fa8f009a8 <lparser.c:290:3, col:22> 'struct BlockCnt *' '='
|-MemberExpr 0x558fa8f008e0 <col:3, col:7> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
| `-ImplicitCastExpr 0x558fa8f008c8 <col:3> 'BlockCnt *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f008a0 <col:3> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8f00990 <col:18, col:22> 'struct BlockCnt *' <LValueToRValue>
  `-MemberExpr 0x558fa8f00958 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
    `-ImplicitCastExpr 0x558fa8f00940 <col:18> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f00918 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.33] = [B1.30]
  35: DeclRefExpr 0x558fa8f00a48 <lparser.c:291:12> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
bl
  36: ImplicitCastExpr 0x558fa8f00a70 <lparser.c:291:12> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00a48 <col:12> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.35] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  37: DeclRefExpr 0x558fa8f009d0 <lparser.c:291:3> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
fs
  38: ImplicitCastExpr 0x558fa8f009f8 <lparser.c:291:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f009d0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.37] (ImplicitCastExpr, LValueToRValue, FuncState *)
  39: MemberExpr 0x558fa8f00a10 <lparser.c:291:3, col:7> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8f009f8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f009d0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
[B1.38]->bl
  40: BinaryOperator 0x558fa8f00a88 <lparser.c:291:3, col:12> 'struct BlockCnt *' '='
|-MemberExpr 0x558fa8f00a10 <col:3, col:7> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
| `-ImplicitCastExpr 0x558fa8f009f8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f009d0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f001f0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f00a70 <col:12> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00a48 <col:12> 'BlockCnt *' lvalue ParmVar 0x558fa8f00260 'bl' 'BlockCnt *'
[B1.39] = [B1.36]
  41: IntegerLiteral 0x558fa8f00ab0 <./llimits.h:62:31> 'int' 0
0
  42: CStyleCastExpr 0x558fa8f00ae0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f00ab0 <col:31> 'int' 0
(void)[B1.41] (CStyleCastExpr, ToVoid, void)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
