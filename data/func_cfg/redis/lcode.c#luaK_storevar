void luaK_storevar(FuncState *fs, expdesc *var, expdesc *ex)
 [B8 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x5637768d7120 <lcode.c:499:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   2: ImplicitCastExpr 0x5637768d7198 <lcode.c:499:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d7120 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d7148 <lcode.c:499:11> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d71e8 <lcode.c:499:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7148 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d7170 <lcode.c:499:15> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
ex
   6: ImplicitCastExpr 0x5637768d7200 <lcode.c:499:15> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7170 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B1.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d71b0 <lcode.c:499:3, col:17> 'void'
|-ImplicitCastExpr 0x5637768d7198 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d7120 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d71e8 <col:11> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7148 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d7200 <col:15> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7170 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B1.2]([B1.4], [B1.6])
   Preds (4): B3 B4 B5 B6
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768d5cf0 <lcode.c:473:11> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
var
   2: ImplicitCastExpr 0x5637768d5d18 <lcode.c:473:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5cf0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B2.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d5d30 <lcode.c:473:11, col:16> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d5d18 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d5cf0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B2.2]->k
   4: ImplicitCastExpr 0x5637768d5d68 <lcode.c:473:11, col:16> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d5d30 <col:11, col:16> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d5d18 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d5cf0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B2.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768d5d80 <lcode.c:473:11, col:16> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d5d68 <col:11, col:16> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d5d30 <col:11, col:16> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d5d18 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d5cf0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.5]
   Preds (1): B8
   Succs (5): B4 B5 B6 B7 B3

 [B3]
  default:
   1: IntegerLiteral 0x5637768d6fc8 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768d6ff8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768d6fc8 <col:31> 'int' 0
(void)[B3.1] (CStyleCastExpr, ToVoid, void)
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B4]
  case VINDEXED:
   1: DeclRefExpr 0x5637768d6b38 <lcode.c:490:15> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
   2: ImplicitCastExpr 0x5637768d6bb0 <lcode.c:490:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d6b38 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d6b60 <lcode.c:490:27> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d6c00 <lcode.c:490:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6b60 <col:27> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d6b88 <lcode.c:490:31> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
ex
   6: ImplicitCastExpr 0x5637768d6c18 <lcode.c:490:31> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6b88 <col:31> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B4.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d6bc8 <lcode.c:490:15, col:33> 'int'
|-ImplicitCastExpr 0x5637768d6bb0 <col:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d6b38 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d6c00 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d6b60 <col:27> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d6c18 <col:31> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6b88 <col:31> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B4.2]([B4.4], [B4.6])
   8: DeclStmt 0x5637768d6c30 <lcode.c:490:7, col:34>col:11
`-VarDecl 0x5637768d6ad8 <col:7, col:33> col:11 used e 'int' cinit
  `-CallExpr 0x5637768d6bc8 <col:15, col:33> 'int'
    |-ImplicitCastExpr 0x5637768d6bb0 <col:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768d6b38 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
    |-ImplicitCastExpr 0x5637768d6c00 <col:27> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768d6b60 <col:27> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768d6c18 <col:31> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d6b88 <col:31> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
int e = luaK_exp2RK(fs, ex);
   9: DeclRefExpr 0x5637768d6c48 <lcode.c:491:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
  10: ImplicitCastExpr 0x5637768d6eb8 <lcode.c:491:7> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d6c48 <col:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B4.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  11: DeclRefExpr 0x5637768d6c70 <lcode.c:491:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768d6f20 <lcode.c:491:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6c70 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B4.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: DeclRefExpr 0x5637768d6c98 <lcode.c:491:24> 'int' EnumConstant 0x56377686b768 'OP_SETTABLE' 'int'
OP_SETTABLE
  14: ImplicitCastExpr 0x5637768d6f38 <lcode.c:491:24> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768d6c98 <col:24> 'int' EnumConstant 0x56377686b768 'OP_SETTABLE' 'int'
[B4.13] (ImplicitCastExpr, IntegralCast, OpCode)
  15: DeclRefExpr 0x5637768d6cc0 <lcode.c:491:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
var
  16: ImplicitCastExpr 0x5637768d6ce8 <lcode.c:491:37> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6cc0 <col:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.15] (ImplicitCastExpr, LValueToRValue, expdesc *)
  17: MemberExpr 0x5637768d6d00 <lcode.c:491:37, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d6ce8 <col:37> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6cc0 <col:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.16]->u
  18: MemberExpr 0x5637768d6d38 <lcode.c:491:37, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d6d00 <col:37, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d6ce8 <col:37> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d6cc0 <col:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.17].s
  19: MemberExpr 0x5637768d6d70 <lcode.c:491:37, col:46> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d6d38 <col:37, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d6d00 <col:37, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d6ce8 <col:37> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d6cc0 <col:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.18].info
  20: ImplicitCastExpr 0x5637768d6f50 <lcode.c:491:37, col:46> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d6d70 <col:37, col:46> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d6d38 <col:37, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d6d00 <col:37, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d6ce8 <col:37> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d6cc0 <col:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.19] (ImplicitCastExpr, LValueToRValue, int)
  21: DeclRefExpr 0x5637768d6da8 <lcode.c:491:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
var
  22: ImplicitCastExpr 0x5637768d6dd0 <lcode.c:491:52> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6da8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.21] (ImplicitCastExpr, LValueToRValue, expdesc *)
  23: MemberExpr 0x5637768d6de8 <lcode.c:491:52, col:57> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d6dd0 <col:52> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6da8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.22]->u
  24: MemberExpr 0x5637768d6e20 <lcode.c:491:52, col:59> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d6de8 <col:52, col:57> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d6dd0 <col:52> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d6da8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.23].s
  25: MemberExpr 0x5637768d6e58 <lcode.c:491:52, col:61> 'int' lvalue .aux 0x56377687d658
`-MemberExpr 0x5637768d6e20 <col:52, col:59> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d6de8 <col:52, col:57> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d6dd0 <col:52> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d6da8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.24].aux
  26: ImplicitCastExpr 0x5637768d6f68 <lcode.c:491:52, col:61> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d6e58 <col:52, col:61> 'int' lvalue .aux 0x56377687d658
  `-MemberExpr 0x5637768d6e20 <col:52, col:59> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d6de8 <col:52, col:57> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d6dd0 <col:52> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d6da8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B4.25] (ImplicitCastExpr, LValueToRValue, int)
  27: DeclRefExpr 0x5637768d6e90 <lcode.c:491:66> 'int' lvalue Var 0x5637768d6ad8 'e' 'int'
e
  28: ImplicitCastExpr 0x5637768d6f80 <lcode.c:491:66> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d6e90 <col:66> 'int' lvalue Var 0x5637768d6ad8 'e' 'int'
[B4.27] (ImplicitCastExpr, LValueToRValue, int)
  29: CallExpr 0x5637768d6ed0 <lcode.c:491:7, col:67> 'int'
|-ImplicitCastExpr 0x5637768d6eb8 <col:7> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d6c48 <col:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768d6f20 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d6c70 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d6f38 <col:24> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768d6c98 <col:24> 'int' EnumConstant 0x56377686b768 'OP_SETTABLE' 'int'
|-ImplicitCastExpr 0x5637768d6f50 <col:37, col:46> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d6d70 <col:37, col:46> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768d6d38 <col:37, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768d6d00 <col:37, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768d6ce8 <col:37> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768d6cc0 <col:37> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
|-ImplicitCastExpr 0x5637768d6f68 <col:52, col:61> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d6e58 <col:52, col:61> 'int' lvalue .aux 0x56377687d658
|   `-MemberExpr 0x5637768d6e20 <col:52, col:59> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768d6de8 <col:52, col:57> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768d6dd0 <col:52> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768d6da8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
`-ImplicitCastExpr 0x5637768d6f80 <col:66> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6e90 <col:66> 'int' lvalue Var 0x5637768d6ad8 'e' 'int'
[B4.10]([B4.12], [B4.14], [B4.20], [B4.26], [B4.28])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B5]
  case VGLOBAL:
   1: DeclRefExpr 0x5637768d66c0 <lcode.c:485:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x5637768d6738 <lcode.c:485:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d66c0 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d66e8 <lcode.c:485:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d6788 <lcode.c:485:31> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d66e8 <col:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d6710 <lcode.c:485:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
ex
   6: ImplicitCastExpr 0x5637768d67a0 <lcode.c:485:35> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6710 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B5.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d6750 <lcode.c:485:15, col:37> 'int'
|-ImplicitCastExpr 0x5637768d6738 <col:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d66c0 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d6788 <col:31> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d66e8 <col:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d67a0 <col:35> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6710 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B5.2]([B5.4], [B5.6])
   8: DeclStmt 0x5637768d67b8 <lcode.c:485:7, col:38>col:11
`-VarDecl 0x5637768d6660 <col:7, col:37> col:11 used e 'int' cinit
  `-CallExpr 0x5637768d6750 <col:15, col:37> 'int'
    |-ImplicitCastExpr 0x5637768d6738 <col:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768d66c0 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
    |-ImplicitCastExpr 0x5637768d6788 <col:31> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768d66e8 <col:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768d67a0 <col:35> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d6710 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
int e = luaK_exp2anyreg(fs, ex);
   9: DeclRefExpr 0x5637768d67d0 <lcode.c:486:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
  10: ImplicitCastExpr 0x5637768d6958 <lcode.c:486:7> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d67d0 <col:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B5.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
  11: DeclRefExpr 0x5637768d67f8 <lcode.c:486:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768d69b8 <lcode.c:486:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d67f8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B5.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: DeclRefExpr 0x5637768d6820 <lcode.c:486:24> 'int' EnumConstant 0x56377686b6d8 'OP_SETGLOBAL' 'int'
OP_SETGLOBAL
  14: ImplicitCastExpr 0x5637768d69d0 <lcode.c:486:24> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768d6820 <col:24> 'int' EnumConstant 0x56377686b6d8 'OP_SETGLOBAL' 'int'
[B5.13] (ImplicitCastExpr, IntegralCast, OpCode)
  15: DeclRefExpr 0x5637768d6848 <lcode.c:486:38> 'int' lvalue Var 0x5637768d6660 'e' 'int'
e
  16: ImplicitCastExpr 0x5637768d69e8 <lcode.c:486:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d6848 <col:38> 'int' lvalue Var 0x5637768d6660 'e' 'int'
[B5.15] (ImplicitCastExpr, LValueToRValue, int)
  17: DeclRefExpr 0x5637768d6870 <lcode.c:486:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
var
  18: ImplicitCastExpr 0x5637768d6898 <lcode.c:486:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.17] (ImplicitCastExpr, LValueToRValue, expdesc *)
  19: MemberExpr 0x5637768d68b0 <lcode.c:486:41, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d6898 <col:41> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.18]->u
  20: MemberExpr 0x5637768d68e8 <lcode.c:486:41, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d68b0 <col:41, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d6898 <col:41> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.19].s
  21: MemberExpr 0x5637768d6920 <lcode.c:486:41, col:50> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d68e8 <col:41, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d68b0 <col:41, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d6898 <col:41> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.20].info
  22: ImplicitCastExpr 0x5637768d6a00 <lcode.c:486:41, col:50> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d6920 <col:41, col:50> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d68e8 <col:41, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d68b0 <col:41, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d6898 <col:41> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.21] (ImplicitCastExpr, LValueToRValue, int)
  23: ImplicitCastExpr 0x5637768d6a18 <lcode.c:486:41, col:50> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d6a00 <col:41, col:50> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d6920 <col:41, col:50> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768d68e8 <col:41, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768d68b0 <col:41, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768d6898 <col:41> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.22] (ImplicitCastExpr, IntegralCast, unsigned int)
  24: CallExpr 0x5637768d6970 <lcode.c:486:7, col:54> 'int'
|-ImplicitCastExpr 0x5637768d6958 <col:7> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d67d0 <col:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x5637768d69b8 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d67f8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d69d0 <col:24> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768d6820 <col:24> 'int' EnumConstant 0x56377686b6d8 'OP_SETGLOBAL' 'int'
|-ImplicitCastExpr 0x5637768d69e8 <col:38> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d6848 <col:38> 'int' lvalue Var 0x5637768d6660 'e' 'int'
`-ImplicitCastExpr 0x5637768d6a18 <col:41, col:50> 'unsigned int' <IntegralCast>
  `-ImplicitCastExpr 0x5637768d6a00 <col:41, col:50> 'int' <LValueToRValue>
    `-MemberExpr 0x5637768d6920 <col:41, col:50> 'int' lvalue .info 0x56377687d5f8
      `-MemberExpr 0x5637768d68e8 <col:41, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
        `-MemberExpr 0x5637768d68b0 <col:41, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
          `-ImplicitCastExpr 0x5637768d6898 <col:41> 'expdesc *' <LValueToRValue>
            `-DeclRefExpr 0x5637768d6870 <col:41> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B5.10]([B5.12], [B5.14], [B5.16], [B5.23])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B6]
  case VUPVAL:
   1: DeclRefExpr 0x5637768d6238 <lcode.c:480:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x5637768d62b0 <lcode.c:480:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d6238 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d6260 <lcode.c:480:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d6300 <lcode.c:480:31> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6260 <col:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d6288 <lcode.c:480:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
ex
   6: ImplicitCastExpr 0x5637768d6318 <lcode.c:480:35> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6288 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B6.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d62c8 <lcode.c:480:15, col:37> 'int'
|-ImplicitCastExpr 0x5637768d62b0 <col:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d6238 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d6300 <col:31> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d6260 <col:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d6318 <col:35> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d6288 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B6.2]([B6.4], [B6.6])
   8: DeclStmt 0x5637768d6330 <lcode.c:480:7, col:38>col:11
`-VarDecl 0x5637768d61d8 <col:7, col:37> col:11 used e 'int' cinit
  `-CallExpr 0x5637768d62c8 <col:15, col:37> 'int'
    |-ImplicitCastExpr 0x5637768d62b0 <col:15> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768d6238 <col:15> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
    |-ImplicitCastExpr 0x5637768d6300 <col:31> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768d6260 <col:31> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768d6318 <col:35> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d6288 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
int e = luaK_exp2anyreg(fs, ex);
   9: DeclRefExpr 0x5637768d6348 <lcode.c:481:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
  10: ImplicitCastExpr 0x5637768d64f0 <lcode.c:481:7> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d6348 <col:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B6.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  11: DeclRefExpr 0x5637768d6370 <lcode.c:481:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768d6558 <lcode.c:481:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d6370 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B6.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: DeclRefExpr 0x5637768d6398 <lcode.c:481:24> 'int' EnumConstant 0x56377686b720 'OP_SETUPVAL' 'int'
OP_SETUPVAL
  14: ImplicitCastExpr 0x5637768d6570 <lcode.c:481:24> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768d6398 <col:24> 'int' EnumConstant 0x56377686b720 'OP_SETUPVAL' 'int'
[B6.13] (ImplicitCastExpr, IntegralCast, OpCode)
  15: DeclRefExpr 0x5637768d63c0 <lcode.c:481:37> 'int' lvalue Var 0x5637768d61d8 'e' 'int'
e
  16: ImplicitCastExpr 0x5637768d6588 <lcode.c:481:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d63c0 <col:37> 'int' lvalue Var 0x5637768d61d8 'e' 'int'
[B6.15] (ImplicitCastExpr, LValueToRValue, int)
  17: DeclRefExpr 0x5637768d63e8 <lcode.c:481:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
var
  18: ImplicitCastExpr 0x5637768d6410 <lcode.c:481:40> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d63e8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B6.17] (ImplicitCastExpr, LValueToRValue, expdesc *)
  19: MemberExpr 0x5637768d6428 <lcode.c:481:40, col:45> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d6410 <col:40> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d63e8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B6.18]->u
  20: MemberExpr 0x5637768d6460 <lcode.c:481:40, col:47> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d6428 <col:40, col:45> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d6410 <col:40> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d63e8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B6.19].s
  21: MemberExpr 0x5637768d6498 <lcode.c:481:40, col:49> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d6460 <col:40, col:47> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d6428 <col:40, col:45> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d6410 <col:40> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d63e8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B6.20].info
  22: ImplicitCastExpr 0x5637768d65a0 <lcode.c:481:40, col:49> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d6498 <col:40, col:49> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d6460 <col:40, col:47> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d6428 <col:40, col:45> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d6410 <col:40> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d63e8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B6.21] (ImplicitCastExpr, LValueToRValue, int)
  23: IntegerLiteral 0x5637768d64d0 <lcode.c:481:55> 'int' 0
0
  24: CallExpr 0x5637768d6508 <lcode.c:481:7, col:56> 'int'
|-ImplicitCastExpr 0x5637768d64f0 <col:7> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d6348 <col:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768d6558 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d6370 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d6570 <col:24> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768d6398 <col:24> 'int' EnumConstant 0x56377686b720 'OP_SETUPVAL' 'int'
|-ImplicitCastExpr 0x5637768d6588 <col:37> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d63c0 <col:37> 'int' lvalue Var 0x5637768d61d8 'e' 'int'
|-ImplicitCastExpr 0x5637768d65a0 <col:40, col:49> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d6498 <col:40, col:49> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768d6460 <col:40, col:47> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768d6428 <col:40, col:45> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768d6410 <col:40> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768d63e8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
`-IntegerLiteral 0x5637768d64d0 <col:55> 'int' 0
[B6.10]([B6.12], [B6.14], [B6.16], [B6.22], [B6.23])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B7]
  case VLOCAL:
   1: DeclRefExpr 0x5637768d5e28 <lcode.c:475:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   2: ImplicitCastExpr 0x5637768d5ea0 <lcode.c:475:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d5e28 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d5e50 <lcode.c:475:15> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d5ef0 <lcode.c:475:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5e50 <col:15> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d5e78 <lcode.c:475:19> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
ex
   6: ImplicitCastExpr 0x5637768d5f08 <lcode.c:475:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5e78 <col:19> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B7.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d5eb8 <lcode.c:475:7, col:21> 'void'
|-ImplicitCastExpr 0x5637768d5ea0 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d5e28 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d5ef0 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d5e50 <col:15> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d5f08 <col:19> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d5e78 <col:19> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B7.2]([B7.4], [B7.6])
   8: DeclRefExpr 0x5637768d5f20 <lcode.c:476:7> 'void (FuncState *, expdesc *, int)' Function 0x5637768d03f0 'exp2reg' 'void (FuncState *, expdesc *, int)'
exp2reg
   9: ImplicitCastExpr 0x5637768d6080 <lcode.c:476:7> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d5f20 <col:7> 'void (FuncState *, expdesc *, int)' Function 0x5637768d03f0 'exp2reg' 'void (FuncState *, expdesc *, int)'
[B7.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, int))
  10: DeclRefExpr 0x5637768d5f48 <lcode.c:476:15> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768d60d8 <lcode.c:476:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5f48 <col:15> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
[B7.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768d5f70 <lcode.c:476:19> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
ex
  13: ImplicitCastExpr 0x5637768d60f0 <lcode.c:476:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5f70 <col:19> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
[B7.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: DeclRefExpr 0x5637768d5f98 <lcode.c:476:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
var
  15: ImplicitCastExpr 0x5637768d5fc0 <lcode.c:476:23> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5f98 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B7.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: MemberExpr 0x5637768d5fd8 <lcode.c:476:23, col:28> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d5fc0 <col:23> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d5f98 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B7.15]->u
  17: MemberExpr 0x5637768d6010 <lcode.c:476:23, col:30> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d5fd8 <col:23, col:28> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d5fc0 <col:23> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d5f98 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B7.16].s
  18: MemberExpr 0x5637768d6048 <lcode.c:476:23, col:32> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d6010 <col:23, col:30> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d5fd8 <col:23, col:28> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d5fc0 <col:23> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d5f98 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B7.17].info
  19: ImplicitCastExpr 0x5637768d6108 <lcode.c:476:23, col:32> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d6048 <col:23, col:32> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d6010 <col:23, col:30> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d5fd8 <col:23, col:28> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d5fc0 <col:23> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d5f98 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B7.18] (ImplicitCastExpr, LValueToRValue, int)
  20: CallExpr 0x5637768d6098 <lcode.c:476:7, col:36> 'void'
|-ImplicitCastExpr 0x5637768d6080 <col:7> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d5f20 <col:7> 'void (FuncState *, expdesc *, int)' Function 0x5637768d03f0 'exp2reg' 'void (FuncState *, expdesc *, int)'
|-ImplicitCastExpr 0x5637768d60d8 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d5f48 <col:15> 'FuncState *' lvalue ParmVar 0x5637768d5950 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d60f0 <col:19> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d5f70 <col:19> 'expdesc *' lvalue ParmVar 0x5637768d5a30 'ex' 'expdesc *'
`-ImplicitCastExpr 0x5637768d6108 <col:23, col:32> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d6048 <col:23, col:32> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768d6010 <col:23, col:30> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768d5fd8 <col:23, col:28> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768d5fc0 <col:23> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768d5f98 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d59c0 'var' 'expdesc *'
[B7.9]([B7.11], [B7.13], [B7.19])
  21: ReturnStmt 0x5637768d6120 <lcode.c:477:7>
return;
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (2): B1 B7
