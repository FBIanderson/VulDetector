static void codenot(FuncState *fs, expdesc *e)
 [B12 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x5637768de3c0 <lcode.c:615:16> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768de3e8 <lcode.c:615:16> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de3c0 <col:16> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768de400 <lcode.c:615:16, col:19> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768de3e8 <col:16> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de3c0 <col:16> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.2]->f
   4: ImplicitCastExpr 0x5637768de438 <lcode.c:615:16, col:19> 'int' <LValueToRValue>
`-MemberExpr 0x5637768de400 <col:16, col:19> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768de3e8 <col:16> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768de3c0 <col:16> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x5637768de450 <lcode.c:615:5, col:20>col:9
`-VarDecl 0x5637768de360 <col:5, col:19> col:9 used temp 'int' cinit
  `-ImplicitCastExpr 0x5637768de438 <col:16, col:19> 'int' <LValueToRValue>
    `-MemberExpr 0x5637768de400 <col:16, col:19> 'int' lvalue ->f 0x56377687d8f0
      `-ImplicitCastExpr 0x5637768de3e8 <col:16> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768de3c0 <col:16> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
int temp = e->f;
   6: DeclRefExpr 0x5637768de4e0 <lcode.c:615:29> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   7: ImplicitCastExpr 0x5637768de508 <lcode.c:615:29> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de4e0 <col:29> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.6] (ImplicitCastExpr, LValueToRValue, expdesc *)
   8: MemberExpr 0x5637768de520 <lcode.c:615:29, col:32> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768de508 <col:29> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de4e0 <col:29> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.7]->t
   9: ImplicitCastExpr 0x5637768de558 <lcode.c:615:29, col:32> 'int' <LValueToRValue>
`-MemberExpr 0x5637768de520 <col:29, col:32> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768de508 <col:29> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768de4e0 <col:29> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: DeclRefExpr 0x5637768de468 <lcode.c:615:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  11: ImplicitCastExpr 0x5637768de490 <lcode.c:615:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de468 <col:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: MemberExpr 0x5637768de4a8 <lcode.c:615:22, col:25> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768de490 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de468 <col:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.11]->f
  13: BinaryOperator 0x5637768de570 <lcode.c:615:22, col:32> 'int' '='
|-MemberExpr 0x5637768de4a8 <col:22, col:25> 'int' lvalue ->f 0x56377687d8f0
| `-ImplicitCastExpr 0x5637768de490 <col:22> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768de468 <col:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768de558 <col:29, col:32> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768de520 <col:29, col:32> 'int' lvalue ->t 0x56377687d890
    `-ImplicitCastExpr 0x5637768de508 <col:29> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768de4e0 <col:29> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.12] = [B1.9]
  14: DeclRefExpr 0x5637768de610 <lcode.c:615:42> 'int' lvalue Var 0x5637768de360 'temp' 'int'
temp
  15: ImplicitCastExpr 0x5637768de638 <lcode.c:615:42> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768de610 <col:42> 'int' lvalue Var 0x5637768de360 'temp' 'int'
[B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: DeclRefExpr 0x5637768de598 <lcode.c:615:35> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  17: ImplicitCastExpr 0x5637768de5c0 <lcode.c:615:35> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de598 <col:35> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.16] (ImplicitCastExpr, LValueToRValue, expdesc *)
  18: MemberExpr 0x5637768de5d8 <lcode.c:615:35, col:38> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768de5c0 <col:35> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de598 <col:35> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.17]->t
  19: BinaryOperator 0x5637768de650 <lcode.c:615:35, col:42> 'int' '='
|-MemberExpr 0x5637768de5d8 <col:35, col:38> 'int' lvalue ->t 0x56377687d890
| `-ImplicitCastExpr 0x5637768de5c0 <col:35> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768de598 <col:35> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768de638 <col:42> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768de610 <col:42> 'int' lvalue Var 0x5637768de360 'temp' 'int'
[B1.18] = [B1.15]
  20: DeclRefExpr 0x5637768de6a0 <lcode.c:616:3> 'void (FuncState *, int)' Function 0x5637768b8a50 'removevalues' 'void (FuncState *, int)'
removevalues
  21: ImplicitCastExpr 0x5637768de780 <lcode.c:616:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768de6a0 <col:3> 'void (FuncState *, int)' Function 0x5637768b8a50 'removevalues' 'void (FuncState *, int)'
[B1.20] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  22: DeclRefExpr 0x5637768de6e0 <lcode.c:616:16> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
  23: ImplicitCastExpr 0x5637768de7d0 <lcode.c:616:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768de6e0 <col:16> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B1.22] (ImplicitCastExpr, LValueToRValue, FuncState *)
  24: DeclRefExpr 0x5637768de708 <lcode.c:616:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  25: ImplicitCastExpr 0x5637768de730 <lcode.c:616:20> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de708 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.24] (ImplicitCastExpr, LValueToRValue, expdesc *)
  26: MemberExpr 0x5637768de748 <lcode.c:616:20, col:23> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768de730 <col:20> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de708 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.25]->f
  27: ImplicitCastExpr 0x5637768de7e8 <lcode.c:616:20, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x5637768de748 <col:20, col:23> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768de730 <col:20> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768de708 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.26] (ImplicitCastExpr, LValueToRValue, int)
  28: CallExpr 0x5637768de798 <lcode.c:616:3, col:24> 'void'
|-ImplicitCastExpr 0x5637768de780 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768de6a0 <col:3> 'void (FuncState *, int)' Function 0x5637768b8a50 'removevalues' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768de7d0 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768de6e0 <col:16> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768de7e8 <col:20, col:23> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768de748 <col:20, col:23> 'int' lvalue ->f 0x56377687d8f0
    `-ImplicitCastExpr 0x5637768de730 <col:20> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768de708 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.21]([B1.23], [B1.27])
  29: DeclRefExpr 0x5637768de800 <lcode.c:617:3> 'void (FuncState *, int)' Function 0x5637768b8a50 'removevalues' 'void (FuncState *, int)'
removevalues
  30: ImplicitCastExpr 0x5637768de8c8 <lcode.c:617:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768de800 <col:3> 'void (FuncState *, int)' Function 0x5637768b8a50 'removevalues' 'void (FuncState *, int)'
[B1.29] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  31: DeclRefExpr 0x5637768de828 <lcode.c:617:16> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
  32: ImplicitCastExpr 0x5637768de918 <lcode.c:617:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768de828 <col:16> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B1.31] (ImplicitCastExpr, LValueToRValue, FuncState *)
  33: DeclRefExpr 0x5637768de850 <lcode.c:617:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  34: ImplicitCastExpr 0x5637768de878 <lcode.c:617:20> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de850 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.33] (ImplicitCastExpr, LValueToRValue, expdesc *)
  35: MemberExpr 0x5637768de890 <lcode.c:617:20, col:23> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768de878 <col:20> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de850 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.34]->t
  36: ImplicitCastExpr 0x5637768de930 <lcode.c:617:20, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x5637768de890 <col:20, col:23> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768de878 <col:20> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768de850 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.35] (ImplicitCastExpr, LValueToRValue, int)
  37: CallExpr 0x5637768de8e0 <lcode.c:617:3, col:24> 'void'
|-ImplicitCastExpr 0x5637768de8c8 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768de800 <col:3> 'void (FuncState *, int)' Function 0x5637768b8a50 'removevalues' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768de918 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768de828 <col:16> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768de930 <col:20, col:23> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768de890 <col:20, col:23> 'int' lvalue ->t 0x56377687d890
    `-ImplicitCastExpr 0x5637768de878 <col:20> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768de850 <col:20> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B1.30]([B1.32], [B1.36])
   Preds (5): B3 B5 B6 B9 B11
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768dd320 <lcode.c:587:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
   2: ImplicitCastExpr 0x5637768dd398 <lcode.c:587:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dd320 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768dd348 <lcode.c:587:22> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768dd3e8 <lcode.c:587:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd348 <col:22> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768dd370 <lcode.c:587:26> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768dd400 <lcode.c:587:26> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd370 <col:26> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B2.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768dd3b0 <lcode.c:587:3, col:27> 'void'
|-ImplicitCastExpr 0x5637768dd398 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dd320 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768dd3e8 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dd348 <col:22> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768dd400 <col:26> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dd370 <col:26> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x5637768dd418 <lcode.c:588:11> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   9: ImplicitCastExpr 0x5637768dd440 <lcode.c:588:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd418 <col:11> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B2.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: MemberExpr 0x5637768dd458 <lcode.c:588:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768dd440 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dd418 <col:11> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B2.9]->k
  11: ImplicitCastExpr 0x5637768dd490 <lcode.c:588:11, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768dd458 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768dd440 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768dd418 <col:11> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B2.10] (ImplicitCastExpr, LValueToRValue, expkind)
  12: ImplicitCastExpr 0x5637768dd4a8 <lcode.c:588:11, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768dd490 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768dd458 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768dd440 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768dd418 <col:11> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B2.11] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.12]
   Preds (1): B12
   Succs (9): B4 B5 B6 B7 B8 B9 B10 B11
     B3

 [B3]
  default:
   1: IntegerLiteral 0x5637768de190 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768de1c0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768de190 <col:31> 'int' 0
(void)[B3.1] (CStyleCastExpr, ToVoid, void)
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B4]
  case VRELOCABLE:
   Preds (1): B2
   Succs (1): B5

 [B5]
  case VNONRELOC:
   1: DeclRefExpr 0x5637768ddb20 <lcode.c:603:7> 'void (FuncState *, expdesc *)' Function 0x5637768cfd20 'discharge2anyreg' 'void (FuncState *, expdesc *)'
discharge2anyreg
   2: ImplicitCastExpr 0x5637768ddb98 <lcode.c:603:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ddb20 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768cfd20 'discharge2anyreg' 'void (FuncState *, expdesc *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768ddb48 <lcode.c:603:24> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ddbe8 <lcode.c:603:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ddb48 <col:24> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ddb70 <lcode.c:603:28> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768ddc00 <lcode.c:603:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ddb70 <col:28> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768ddbb0 <lcode.c:603:7, col:29> 'void'
|-ImplicitCastExpr 0x5637768ddb98 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ddb20 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768cfd20 'discharge2anyreg' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768ddbe8 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ddb48 <col:24> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768ddc00 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ddb70 <col:28> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.2]([B5.4], [B5.6])
   8: DeclRefExpr 0x5637768ddc18 <lcode.c:604:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   9: ImplicitCastExpr 0x5637768ddc90 <lcode.c:604:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ddc18 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B5.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  10: DeclRefExpr 0x5637768ddc40 <lcode.c:604:15> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768ddce0 <lcode.c:604:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ddc40 <col:15> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B5.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768ddc68 <lcode.c:604:19> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  13: ImplicitCastExpr 0x5637768ddcf8 <lcode.c:604:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ddc68 <col:19> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: CallExpr 0x5637768ddca8 <lcode.c:604:7, col:20> 'void'
|-ImplicitCastExpr 0x5637768ddc90 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ddc18 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768ddce0 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ddc40 <col:15> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768ddcf8 <col:19> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ddc68 <col:19> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.9]([B5.11], [B5.13])
  15: DeclRefExpr 0x5637768dddf8 <lcode.c:605:21> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
  16: ImplicitCastExpr 0x5637768ddf98 <lcode.c:605:21> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dddf8 <col:21> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B5.15] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  17: DeclRefExpr 0x5637768dde20 <lcode.c:605:34> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
  18: ImplicitCastExpr 0x5637768de000 <lcode.c:605:34> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dde20 <col:34> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B5.17] (ImplicitCastExpr, LValueToRValue, FuncState *)
  19: DeclRefExpr 0x5637768dde48 <lcode.c:605:38> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
OP_NOT
  20: ImplicitCastExpr 0x5637768de018 <lcode.c:605:38> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768dde48 <col:38> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
[B5.19] (ImplicitCastExpr, IntegralCast, OpCode)
  21: IntegerLiteral 0x5637768dde70 <lcode.c:605:46> 'int' 0
0
  22: DeclRefExpr 0x5637768dde90 <lcode.c:605:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  23: ImplicitCastExpr 0x5637768ddeb8 <lcode.c:605:49> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.22] (ImplicitCastExpr, LValueToRValue, expdesc *)
  24: MemberExpr 0x5637768dded0 <lcode.c:605:49, col:52> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768ddeb8 <col:49> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.23]->u
  25: MemberExpr 0x5637768ddf08 <lcode.c:605:49, col:54> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768dded0 <col:49, col:52> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768ddeb8 <col:49> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.24].s
  26: MemberExpr 0x5637768ddf40 <lcode.c:605:49, col:56> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768ddf08 <col:49, col:54> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768dded0 <col:49, col:52> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768ddeb8 <col:49> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.25].info
  27: ImplicitCastExpr 0x5637768de030 <lcode.c:605:49, col:56> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ddf40 <col:49, col:56> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768ddf08 <col:49, col:54> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768dded0 <col:49, col:52> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768ddeb8 <col:49> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.26] (ImplicitCastExpr, LValueToRValue, int)
  28: IntegerLiteral 0x5637768ddf78 <lcode.c:605:62> 'int' 0
0
  29: CallExpr 0x5637768ddfb0 <lcode.c:605:21, col:63> 'int'
|-ImplicitCastExpr 0x5637768ddf98 <col:21> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dddf8 <col:21> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768de000 <col:34> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dde20 <col:34> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768de018 <col:38> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768dde48 <col:38> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
|-IntegerLiteral 0x5637768dde70 <col:46> 'int' 0
|-ImplicitCastExpr 0x5637768de030 <col:49, col:56> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768ddf40 <col:49, col:56> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768ddf08 <col:49, col:54> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768dded0 <col:49, col:52> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768ddeb8 <col:49> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-IntegerLiteral 0x5637768ddf78 <col:62> 'int' 0
[B5.16]([B5.18], [B5.20], [B5.21], [B5.27], [B5.28])
  30: DeclRefExpr 0x5637768ddd10 <lcode.c:605:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  31: ImplicitCastExpr 0x5637768ddd38 <lcode.c:605:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ddd10 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.30] (ImplicitCastExpr, LValueToRValue, expdesc *)
  32: MemberExpr 0x5637768ddd50 <lcode.c:605:7, col:10> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768ddd38 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ddd10 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.31]->u
  33: MemberExpr 0x5637768ddd88 <lcode.c:605:7, col:12> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768ddd50 <col:7, col:10> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768ddd38 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768ddd10 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.32].s
  34: MemberExpr 0x5637768dddc0 <lcode.c:605:7, col:14> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768ddd88 <col:7, col:12> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768ddd50 <col:7, col:10> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768ddd38 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768ddd10 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.33].info
  35: BinaryOperator 0x5637768de048 <lcode.c:605:7, col:63> 'int' '='
|-MemberExpr 0x5637768dddc0 <col:7, col:14> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768ddd88 <col:7, col:12> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768ddd50 <col:7, col:10> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768ddd38 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768ddd10 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-CallExpr 0x5637768ddfb0 <col:21, col:63> 'int'
  |-ImplicitCastExpr 0x5637768ddf98 <col:21> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768dddf8 <col:21> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x5637768de000 <col:34> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768dde20 <col:34> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768de018 <col:38> 'OpCode':'OpCode' <IntegralCast>
  | `-DeclRefExpr 0x5637768dde48 <col:38> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
  |-IntegerLiteral 0x5637768dde70 <col:46> 'int' 0
  |-ImplicitCastExpr 0x5637768de030 <col:49, col:56> 'int' <LValueToRValue>
  | `-MemberExpr 0x5637768ddf40 <col:49, col:56> 'int' lvalue .info 0x56377687d5f8
  |   `-MemberExpr 0x5637768ddf08 <col:49, col:54> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  |     `-MemberExpr 0x5637768dded0 <col:49, col:52> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  |       `-ImplicitCastExpr 0x5637768ddeb8 <col:49> 'expdesc *' <LValueToRValue>
  |         `-DeclRefExpr 0x5637768dde90 <col:49> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
  `-IntegerLiteral 0x5637768ddf78 <col:62> 'int' 0
[B5.34] = [B5.29]
  36: DeclRefExpr 0x5637768de0e8 <lcode.c:606:14> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
VRELOCABLE
  37: ImplicitCastExpr 0x5637768de110 <lcode.c:606:14> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768de0e8 <col:14> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B5.36] (ImplicitCastExpr, IntegralCast, expkind)
  38: DeclRefExpr 0x5637768de070 <lcode.c:606:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
  39: ImplicitCastExpr 0x5637768de098 <lcode.c:606:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768de070 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.38] (ImplicitCastExpr, LValueToRValue, expdesc *)
  40: MemberExpr 0x5637768de0b0 <lcode.c:606:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768de098 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768de070 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B5.39]->k
  41: BinaryOperator 0x5637768de128 <lcode.c:606:7, col:14> 'expkind':'expkind' '='
|-MemberExpr 0x5637768de0b0 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768de098 <col:7> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768de070 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768de110 <col:14> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768de0e8 <col:14> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B5.40] = [B5.37]
   T: break;
   Preds (2): B2 B4
   Succs (1): B1

 [B6]
  case VJMP:
   1: DeclRefExpr 0x5637768dd940 <lcode.c:598:7> 'void (FuncState *, expdesc *)' Function 0x5637768d80f0 'invertjump' 'void (FuncState *, expdesc *)'
invertjump
   2: ImplicitCastExpr 0x5637768dd9b8 <lcode.c:598:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dd940 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768d80f0 'invertjump' 'void (FuncState *, expdesc *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768dd968 <lcode.c:598:18> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768dda08 <lcode.c:598:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd968 <col:18> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768dd990 <lcode.c:598:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768dda20 <lcode.c:598:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd990 <col:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B6.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768dd9d0 <lcode.c:598:7, col:23> 'void'
|-ImplicitCastExpr 0x5637768dd9b8 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dd940 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768d80f0 'invertjump' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768dda08 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dd968 <col:18> 'FuncState *' lvalue ParmVar 0x5637768dd170 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768dda20 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dd990 <col:22> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B6.2]([B6.4], [B6.6])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B7]
  case VK:
   Preds (1): B2
   Succs (1): B8

 [B8]
  case VKNUM:
   Preds (2): B7 B2
   Succs (1): B9

 [B9]
  case VTRUE:
   1: DeclRefExpr 0x5637768dd850 <lcode.c:594:14> 'int' EnumConstant 0x563776877ee8 'VFALSE' 'int'
VFALSE
   2: ImplicitCastExpr 0x5637768dd878 <lcode.c:594:14> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768dd850 <col:14> 'int' EnumConstant 0x563776877ee8 'VFALSE' 'int'
[B9.1] (ImplicitCastExpr, IntegralCast, expkind)
   3: DeclRefExpr 0x5637768dd7d8 <lcode.c:594:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768dd800 <lcode.c:594:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd7d8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B9.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x5637768dd818 <lcode.c:594:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768dd800 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dd7d8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B9.4]->k
   6: BinaryOperator 0x5637768dd890 <lcode.c:594:7, col:14> 'expkind':'expkind' '='
|-MemberExpr 0x5637768dd818 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768dd800 <col:7> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768dd7d8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768dd878 <col:14> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768dd850 <col:14> 'int' EnumConstant 0x563776877ee8 'VFALSE' 'int'
[B9.5] = [B9.2]
   T: break;
   Preds (2): B2 B8
   Succs (1): B1

 [B10]
  case VNIL:
   Preds (1): B2
   Succs (1): B11

 [B11]
  case VFALSE:
   1: DeclRefExpr 0x5637768dd628 <lcode.c:590:14> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
VTRUE
   2: ImplicitCastExpr 0x5637768dd650 <lcode.c:590:14> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768dd628 <col:14> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B11.1] (ImplicitCastExpr, IntegralCast, expkind)
   3: DeclRefExpr 0x5637768dd5b0 <lcode.c:590:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768dd5d8 <lcode.c:590:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dd5b0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B11.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x5637768dd5f0 <lcode.c:590:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768dd5d8 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dd5b0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
[B11.4]->k
   6: BinaryOperator 0x5637768dd668 <lcode.c:590:7, col:14> 'expkind':'expkind' '='
|-MemberExpr 0x5637768dd5f0 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768dd5d8 <col:7> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768dd5b0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768dd1e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768dd650 <col:14> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768dd628 <col:14> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B11.5] = [B11.2]
   T: break;
   Preds (2): B2 B10
   Succs (1): B1

 [B0 (EXIT)]
   Preds (1): B1
