void luaK_patchlist(FuncState *fs, int list, int target)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: IntegerLiteral 0x5637768bbe48 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768bbe78 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768bbe48 <col:31> 'int' 0
(void)[B1.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5637768bbec0 <lcode.c:174:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
patchlistaux
   4: ImplicitCastExpr 0x5637768bc078 <lcode.c:174:5> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768bbec0 <col:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
[B1.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int, int, int))
   5: DeclRefExpr 0x5637768bbee8 <lcode.c:174:18> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768bc0e0 <lcode.c:174:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bbee8 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: DeclRefExpr 0x5637768bbf10 <lcode.c:174:22> 'int' lvalue ParmVar 0x5637768bb9e8 'list' 'int'
list
   8: ImplicitCastExpr 0x5637768bc0f8 <lcode.c:174:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bbf10 <col:22> 'int' lvalue ParmVar 0x5637768bb9e8 'list' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768bbf38 <lcode.c:174:28> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
target
  10: ImplicitCastExpr 0x5637768bc110 <lcode.c:174:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bbf38 <col:28> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x5637768bbf60 <./lopcodes.h:65:27> 'int' 1
1
  12: IntegerLiteral 0x5637768bbf80 <./lopcodes.h:40:17> 'int' 8
8
  13: BinaryOperator 0x5637768bbfa0 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x5637768bbf60 <line:65:27> 'int' 1
`-IntegerLiteral 0x5637768bbf80 <line:40:17> 'int' 8
[B1.11] << [B1.12]
  14: IntegerLiteral 0x5637768bbfe8 <./lopcodes.h:65:38> 'int' 1
1
  15: BinaryOperator 0x5637768bc008 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x5637768bbfc8 <col:26, col:36> 'int'
| `-BinaryOperator 0x5637768bbfa0 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x5637768bbf60 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x5637768bbf80 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768bbfe8 <line:65:38> 'int' 1
([B1.13]) - [B1.14]
  16: DeclRefExpr 0x5637768bc050 <lcode.c:174:44> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
target
  17: ImplicitCastExpr 0x5637768bc128 <lcode.c:174:44> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bc050 <col:44> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
[B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: CallExpr 0x5637768bc090 <lcode.c:174:5, col:50> 'void'
|-ImplicitCastExpr 0x5637768bc078 <col:5> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768bbec0 <col:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
|-ImplicitCastExpr 0x5637768bc0e0 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768bbee8 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768bc0f8 <col:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bbf10 <col:22> 'int' lvalue ParmVar 0x5637768bb9e8 'list' 'int'
|-ImplicitCastExpr 0x5637768bc110 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bbf38 <col:28> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
|-ParenExpr 0x5637768bc030 <./lopcodes.h:65:25, col:39> 'int'
| `-BinaryOperator 0x5637768bc008 <col:26, col:38> 'int' '-'
|   |-ParenExpr 0x5637768bbfc8 <col:26, col:36> 'int'
|   | `-BinaryOperator 0x5637768bbfa0 <col:27, line:40:17> 'int' '<<'
|   |   |-IntegerLiteral 0x5637768bbf60 <line:65:27> 'int' 1
|   |   `-IntegerLiteral 0x5637768bbf80 <line:40:17> 'int' 8
|   `-IntegerLiteral 0x5637768bbfe8 <line:65:38> 'int' 1
`-ImplicitCastExpr 0x5637768bc128 <lcode.c:174:44> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bc050 <col:44> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
[B1.4]([B1.6], [B1.8], [B1.10], ([B1.15]), [B1.17])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768bbcf0 <lcode.c:171:5> 'void (FuncState *, int)' Function 0x5637767ea7e0 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
   2: ImplicitCastExpr 0x5637768bbdc8 <lcode.c:171:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768bbcf0 <col:5> 'void (FuncState *, int)' Function 0x5637767ea7e0 'luaK_patchtohere' 'void (FuncState *, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768bbd18 <lcode.c:171:22> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768bbe18 <lcode.c:171:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bbd18 <col:22> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768bbd40 <lcode.c:171:26> 'int' lvalue ParmVar 0x5637768bb9e8 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768bbe30 <lcode.c:171:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bbd40 <col:26> 'int' lvalue ParmVar 0x5637768bb9e8 'list' 'int'
[B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x5637768bbde0 <lcode.c:171:5, col:30> 'void'
|-ImplicitCastExpr 0x5637768bbdc8 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768bbcf0 <col:5> 'void (FuncState *, int)' Function 0x5637767ea7e0 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768bbe18 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768bbd18 <col:22> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768bbe30 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bbd40 <col:26> 'int' lvalue ParmVar 0x5637768bb9e8 'list' 'int'
[B2.2]([B2.4], [B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5637768bbbf8 <lcode.c:170:7> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
target
   2: ImplicitCastExpr 0x5637768bbc98 <lcode.c:170:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bbbf8 <col:7> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768bbc20 <lcode.c:170:17> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768bbc48 <lcode.c:170:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bbc20 <col:17> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: MemberExpr 0x5637768bbc60 <lcode.c:170:17, col:21> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768bbc48 <col:17> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bbc20 <col:17> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
[B3.4]->pc
   6: ImplicitCastExpr 0x5637768bbcb0 <lcode.c:170:17, col:21> 'int' <LValueToRValue>
`-MemberExpr 0x5637768bbc60 <col:17, col:21> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768bbc48 <col:17> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bbc20 <col:17> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x5637768bbcc8 <lcode.c:170:7, col:21> 'int' '=='
|-ImplicitCastExpr 0x5637768bbc98 <col:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bbbf8 <col:7> 'int' lvalue ParmVar 0x5637768bba60 'target' 'int'
`-ImplicitCastExpr 0x5637768bbcb0 <col:17, col:21> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768bbc60 <col:17, col:21> 'int' lvalue ->pc 0x56377687e130
    `-ImplicitCastExpr 0x5637768bbc48 <col:17> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768bbc20 <col:17> 'FuncState *' lvalue ParmVar 0x5637768bb970 'fs' 'FuncState *'
[B3.2] == [B3.6]
   T: if [B3.7]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
