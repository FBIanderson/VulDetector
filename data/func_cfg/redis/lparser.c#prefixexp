static void prefixexp(LexState *ls, expdesc *v)
 [B5 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x558fa8f21850 <lparser.c:669:11> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f21878 <lparser.c:669:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21850 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B1.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f21890 <lparser.c:669:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f21878 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21850 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B1.2]->t
   4: MemberExpr 0x558fa8f218c8 <lparser.c:669:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f21890 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f21878 <col:11> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f21850 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B1.3].token
   5: ImplicitCastExpr 0x558fa8f21900 <lparser.c:669:11, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f218c8 <col:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f21890 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f21878 <col:11> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f21850 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B1.4] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B1.5]
   Preds (1): B5
   Succs (3): B3 B4 B2

 [B2]
  default:
   1: DeclRefExpr 0x558fa8f220c8 <lparser.c:683:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f22198 <lparser.c:683:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f220c8 <col:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f220f0 <lparser.c:683:24> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f221e8 <lparser.c:683:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f220f0 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f22158 <lparser.c:683:28> 'char [18]' lvalue "unexpected symbol"
"unexpected symbol"
   6: ImplicitCastExpr 0x558fa8f22200 <lparser.c:683:28> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f22158 <col:28> 'char [18]' lvalue "unexpected symbol"
[B2.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f22218 <lparser.c:683:28> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f22200 <col:28> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f22158 <col:28> 'char [18]' lvalue "unexpected symbol"
[B2.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f221b0 <lparser.c:683:7, col:47> 'void'
|-ImplicitCastExpr 0x558fa8f22198 <col:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f220c8 <col:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f221e8 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f220f0 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f22218 <col:28> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f22200 <col:28> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f22158 <col:28> 'char [18]' lvalue "unexpected symbol"
[B2.2]([B2.4], [B2.7])
   9: ReturnStmt 0x558fa8f22230 <lparser.c:684:7>
return;
   Preds (1): B1
   Succs (1): B0

 [B3]
  case TK_NAME:
   1: DeclRefExpr 0x558fa8f21f98 <lparser.c:679:7> 'void (LexState *, expdesc *)' Function 0x558fa8efe0d8 'singlevar' 'void (LexState *, expdesc *)'
singlevar
   2: ImplicitCastExpr 0x558fa8f22010 <lparser.c:679:7> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f21f98 <col:7> 'void (LexState *, expdesc *)' Function 0x558fa8efe0d8 'singlevar' 'void (LexState *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f21fc0 <lparser.c:679:17> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f22060 <lparser.c:679:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21fc0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f21fe8 <lparser.c:679:21> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
v
   6: ImplicitCastExpr 0x558fa8f22078 <lparser.c:679:21> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21fe8 <col:21> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
[B3.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x558fa8f22028 <lparser.c:679:7, col:22> 'void'
|-ImplicitCastExpr 0x558fa8f22010 <col:7> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f21f98 <col:7> 'void (LexState *, expdesc *)' Function 0x558fa8efe0d8 'singlevar' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f22060 <col:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21fc0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f22078 <col:21> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21fe8 <col:21> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
[B3.2]([B3.4], [B3.6])
   8: ReturnStmt 0x558fa8f22090 <lparser.c:680:7>
return;
   Preds (1): B1
   Succs (1): B0

 [B4]
  case '(':
   1: DeclRefExpr 0x558fa8f21a10 <lparser.c:671:18> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f21a38 <lparser.c:671:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21a10 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f21a50 <lparser.c:671:18, col:22> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8f21a38 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21a10 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.2]->linenumber
   4: ImplicitCastExpr 0x558fa8f21a88 <lparser.c:671:18, col:22> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f21a50 <col:18, col:22> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8f21a38 <col:18> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f21a10 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x558fa8f21aa0 <lparser.c:671:7, col:32>col:11
`-VarDecl 0x558fa8f219b0 <col:7, col:22> col:11 used line 'int' cinit
  `-ImplicitCastExpr 0x558fa8f21a88 <col:18, col:22> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f21a50 <col:18, col:22> 'int' lvalue ->linenumber 0x558fa8ea0308
      `-ImplicitCastExpr 0x558fa8f21a38 <col:18> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f21a10 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
int line = ls->linenumber;
   6: DeclRefExpr 0x558fa8f21ab8 <lparser.c:672:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
   7: ImplicitCastExpr 0x558fa8f21b08 <lparser.c:672:7> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f21ab8 <col:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B4.6] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   8: DeclRefExpr 0x558fa8f21ae0 <lparser.c:672:17> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f21b50 <lparser.c:672:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21ae0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: CallExpr 0x558fa8f21b20 <lparser.c:672:7, col:19> 'void'
|-ImplicitCastExpr 0x558fa8f21b08 <col:7> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f21ab8 <col:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f21b50 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21ae0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.7]([B4.9])
  11: DeclRefExpr 0x558fa8f21b68 <lparser.c:673:7> 'void (LexState *, expdesc *)' Function 0x558fa8eea220 'expr' 'void (LexState *, expdesc *)'
expr
  12: ImplicitCastExpr 0x558fa8f21be0 <lparser.c:673:7> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f21b68 <col:7> 'void (LexState *, expdesc *)' Function 0x558fa8eea220 'expr' 'void (LexState *, expdesc *)'
[B4.11] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
  13: DeclRefExpr 0x558fa8f21b90 <lparser.c:673:12> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
  14: ImplicitCastExpr 0x558fa8f21c30 <lparser.c:673:12> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21b90 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.13] (ImplicitCastExpr, LValueToRValue, LexState *)
  15: DeclRefExpr 0x558fa8f21bb8 <lparser.c:673:16> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
v
  16: ImplicitCastExpr 0x558fa8f21c48 <lparser.c:673:16> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21bb8 <col:16> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
[B4.15] (ImplicitCastExpr, LValueToRValue, expdesc *)
  17: CallExpr 0x558fa8f21bf8 <lparser.c:673:7, col:17> 'void'
|-ImplicitCastExpr 0x558fa8f21be0 <col:7> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f21b68 <col:7> 'void (LexState *, expdesc *)' Function 0x558fa8eea220 'expr' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f21c30 <col:12> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21b90 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f21c48 <col:16> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21bb8 <col:16> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
[B4.12]([B4.14], [B4.16])
  18: DeclRefExpr 0x558fa8f21c60 <lparser.c:674:7> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
  19: ImplicitCastExpr 0x558fa8f21d08 <lparser.c:674:7> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f21c60 <col:7> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B4.18] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
  20: DeclRefExpr 0x558fa8f21c88 <lparser.c:674:19> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
  21: ImplicitCastExpr 0x558fa8f21d68 <lparser.c:674:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21c88 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.20] (ImplicitCastExpr, LValueToRValue, LexState *)
  22: CharacterLiteral 0x558fa8f21cb0 <lparser.c:674:23> 'int' 41
')'
  23: CharacterLiteral 0x558fa8f21cc8 <lparser.c:674:28> 'int' 40
'('
  24: DeclRefExpr 0x558fa8f21ce0 <lparser.c:674:33> 'int' lvalue Var 0x558fa8f219b0 'line' 'int'
line
  25: ImplicitCastExpr 0x558fa8f21d80 <lparser.c:674:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21ce0 <col:33> 'int' lvalue Var 0x558fa8f219b0 'line' 'int'
[B4.24] (ImplicitCastExpr, LValueToRValue, int)
  26: CallExpr 0x558fa8f21d20 <lparser.c:674:7, col:37> 'void'
|-ImplicitCastExpr 0x558fa8f21d08 <col:7> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f21c60 <col:7> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f21d68 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21c88 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
|-CharacterLiteral 0x558fa8f21cb0 <col:23> 'int' 41
|-CharacterLiteral 0x558fa8f21cc8 <col:28> 'int' 40
`-ImplicitCastExpr 0x558fa8f21d80 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21ce0 <col:33> 'int' lvalue Var 0x558fa8f219b0 'line' 'int'
[B4.19]([B4.21], [B4.22], [B4.23], [B4.25])
  27: DeclRefExpr 0x558fa8f21d98 <lparser.c:675:7> 'void (FuncState *, expdesc *)' Function 0x558fa8eba8c0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
  28: ImplicitCastExpr 0x558fa8f21e60 <lparser.c:675:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f21d98 <col:7> 'void (FuncState *, expdesc *)' Function 0x558fa8eba8c0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B4.27] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  29: DeclRefExpr 0x558fa8f21dc0 <lparser.c:675:26> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
ls
  30: ImplicitCastExpr 0x558fa8f21de8 <lparser.c:675:26> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21dc0 <col:26> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.29] (ImplicitCastExpr, LValueToRValue, LexState *)
  31: MemberExpr 0x558fa8f21e00 <lparser.c:675:26, col:30> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f21de8 <col:26> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21dc0 <col:26> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.30]->fs
  32: ImplicitCastExpr 0x558fa8f21eb0 <lparser.c:675:26, col:30> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f21e00 <col:26, col:30> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f21de8 <col:26> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f21dc0 <col:26> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
[B4.31] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  33: DeclRefExpr 0x558fa8f21e38 <lparser.c:675:34> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
v
  34: ImplicitCastExpr 0x558fa8f21ec8 <lparser.c:675:34> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21e38 <col:34> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
[B4.33] (ImplicitCastExpr, LValueToRValue, expdesc *)
  35: CallExpr 0x558fa8f21e78 <lparser.c:675:7, col:35> 'void'
|-ImplicitCastExpr 0x558fa8f21e60 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f21d98 <col:7> 'void (FuncState *, expdesc *)' Function 0x558fa8eba8c0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f21eb0 <col:26, col:30> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f21e00 <col:26, col:30> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f21de8 <col:26> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f21dc0 <col:26> 'LexState *' lvalue ParmVar 0x558fa8f216a0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f21ec8 <col:34> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21e38 <col:34> 'expdesc *' lvalue ParmVar 0x558fa8f21710 'v' 'expdesc *'
[B4.28]([B4.32], [B4.34])
  36: ReturnStmt 0x558fa8f21ee0 <lparser.c:676:7>
return;
   Preds (1): B1
   Succs (1): B0

 [B0 (EXIT)]
   Preds (3): B2 B3 B4
