void luaX_setinput(lua_State *L, LexState *ls, ZIO *z, TString *source)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: ConditionalOperator 0x561ce7450120 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce744e1a0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce744e148 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce744e128 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce744e0f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce744e0d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce744e0b8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce744e188 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce744e168 <col:31> 'int' 0
|-ParenExpr 0x561ce7450000 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce744e440 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce744e420 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce744e3b8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce744e390 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce744e378 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce744e358 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce744e2f0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce744e2d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce744e2b0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-CallExpr 0x561ce74500d8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74500c0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7450020 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7450108 <llex.c:150:8, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7450088 <line:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7450070 <line:150:8> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7450048 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.26] ? ([B2.10]) : [B3.7]
   2: DeclRefExpr 0x561ce744dfc8 <llex.c:150:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce744dff0 <llex.c:150:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744dfc8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B1.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce744e008 <llex.c:150:8, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce744dff0 <line:150:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744dfc8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B1.3]->current
   5: BinaryOperator 0x561ce7450170 <llex.c:150:8, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce744e008 <llex.c:150:8, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce744dff0 <line:150:8> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744dfc8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ParenExpr 0x561ce7450150 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7450120 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce744e1a0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce744e148 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce744e128 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce744e0f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce744e0d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce744e0b8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce744e188 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce744e168 <col:31> 'int' 0
    |-ParenExpr 0x561ce7450000 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce744e440 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce744e420 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce744e3b8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce744e390 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce744e378 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce744e358 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce744e2f0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce744e2d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce744e2b0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
    `-CallExpr 0x561ce74500d8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74500c0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7450020 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7450108 <llex.c:150:8, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7450088 <line:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7450070 <line:150:8> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7450048 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B1.4] = ([B1.1])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce744e1c8 <llex.c:150:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce744e1f0 <llex.c:150:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B2.2]->z
   4: ImplicitCastExpr 0x561ce744e260 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B2.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce744e278 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B2.4]->p
   6: UnaryOperator 0x561ce744e2b0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B2.5]++
   7: UnaryOperator 0x561ce744e2d0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce744e2b0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
*[B2.6]
   8: ImplicitCastExpr 0x561ce744e378 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce744e358 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce744e2f0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce744e2d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce744e2b0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
(([B2.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce744e390 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce744e378 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce744e358 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce744e2f0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce744e2d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce744e2b0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
(unsigned char)[B2.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce744e440 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce744e420 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce744e3b8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce744e390 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce744e378 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce744e358 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce744e2f0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce744e2d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce744e2b0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce744e278 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce744e260 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce744e240 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce744e208 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce744e1f0 <line:150:8> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce744e1c8 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
(int)(([B2.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x561ce7450020 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74500c0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7450020 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7450048 <llex.c:150:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7450070 <llex.c:150:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7450048 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7450088 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7450070 <line:150:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7450048 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B3.4]->z
   6: ImplicitCastExpr 0x561ce7450108 <llex.c:150:8, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7450088 <line:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7450070 <line:150:8> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7450048 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce74500d8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74500c0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7450020 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7450108 <llex.c:150:8, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7450088 <line:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7450070 <line:150:8> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7450048 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B3.2]([B3.6])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: ConditionalOperator 0x561ce744dcf0 <./lmem.h:20:3, line:22:16> 'void *'
|-ParenExpr 0x561ce744d718 <line:20:3, col:40> 'int'
| `-BinaryOperator 0x561ce744d6f0 <./llimits.h:75:22, ./lmem.h:20:39> 'int' '<='
|   |-ParenExpr 0x561ce744d4d8 <./llimits.h:75:22, col:31> 'size_t':'unsigned long'
|   | `-CStyleCastExpr 0x561ce744d4b0 <col:23, col:30> 'size_t':'unsigned long' <IntegralCast>
|   |   `-ParenExpr 0x561ce744d490 <col:26, col:30> 'int'
|   |     `-BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
|   |       |-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
|   |       | `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
|   |       `-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
|   `-BinaryOperator 0x561ce744d6c8 <./llimits.h:30:19, ./lmem.h:20:39> 'unsigned long' '/'
|     |-ParenExpr 0x561ce744d658 <./llimits.h:30:19, col:42> 'unsigned long'
|     | `-BinaryOperator 0x561ce744d630 <col:20, col:41> 'unsigned long' '-'
|     |   |-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
|     |   | `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
|     |   |   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
|     |   |     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
|     |   |       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
|     |   `-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
|     |     `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
|     `-ParenExpr 0x561ce744d6a8 <./lmem.h:20:37, col:39> 'unsigned long'
|       `-UnaryExprOrTypeTraitExpr 0x561ce744d688 <line:38:48, col:56> 'unsigned long' sizeof 'char'
|-CallExpr 0x561ce744db60 <line:21:3, col:42> 'void *'
| |-ImplicitCastExpr 0x561ce744db48 <col:3> 'void *(*)(lua_State *, void *, size_t, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce744d738 <col:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
| |-ImplicitCastExpr 0x561ce744dba8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
| | `-MemberExpr 0x561ce744d7a0 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
| |   `-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
| |     `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
| |-ImplicitCastExpr 0x561ce744dbd8 <./lmem.h:21:20, col:22> 'void *' <BitCast>
| | `-ImplicitCastExpr 0x561ce744dbc0 <col:20, col:22> 'char *' <LValueToRValue>
| |   `-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
| |     `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
| |       `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
| |         `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
| |           `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
| |             `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
| |               `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
| |-BinaryOperator 0x561ce744da50 <./lmem.h:21:25, col:32> 'unsigned long' '*'
| | |-ImplicitCastExpr 0x561ce744da38 <col:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
| | | `-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
| | |   `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
| | |     `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
| | |       `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
| | |         `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
| | |           `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
| | |             `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
| | `-ParenExpr 0x561ce744da18 <./lmem.h:21:30, col:32> 'unsigned long'
| |   `-UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
| `-BinaryOperator 0x561ce744db20 <line:21:35, col:41> 'unsigned long' '*'
|   |-ImplicitCastExpr 0x561ce744db08 <col:35, col:37> 'unsigned long' <IntegralCast>
|   | `-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
|   |   `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
|   `-ParenExpr 0x561ce744dae8 <./lmem.h:21:39, col:41> 'unsigned long'
|     `-UnaryExprOrTypeTraitExpr 0x561ce744dac8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
`-CallExpr 0x561ce744dca8 <line:22:3, col:16> 'void *'
  |-ImplicitCastExpr 0x561ce744dc90 <col:3> 'void *(*)(lua_State *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce744dbf0 <col:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
  `-ImplicitCastExpr 0x561ce744dcd8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x561ce744dc58 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
      `-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B7.61]) ? [B5.26] : [B6.7]
   2: CStyleCastExpr 0x561ce744dda8 <./llimits.h:75:23, col:30> 'char *' <BitCast>
`-ParenExpr 0x561ce744dd88 <col:26, col:30> 'void *'
  `-ParenExpr 0x561ce744dd20 <./lmem.h:20:2, line:22:17> 'void *'
    `-ConditionalOperator 0x561ce744dcf0 <line:20:3, line:22:16> 'void *'
      |-ParenExpr 0x561ce744d718 <line:20:3, col:40> 'int'
      | `-BinaryOperator 0x561ce744d6f0 <./llimits.h:75:22, ./lmem.h:20:39> 'int' '<='
      |   |-ParenExpr 0x561ce744d4d8 <./llimits.h:75:22, col:31> 'size_t':'unsigned long'
      |   | `-CStyleCastExpr 0x561ce744d4b0 <col:23, col:30> 'size_t':'unsigned long' <IntegralCast>
      |   |   `-ParenExpr 0x561ce744d490 <col:26, col:30> 'int'
      |   |     `-BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
      |   |       |-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
      |   |       | `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
      |   |       `-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
      |   `-BinaryOperator 0x561ce744d6c8 <./llimits.h:30:19, ./lmem.h:20:39> 'unsigned long' '/'
      |     |-ParenExpr 0x561ce744d658 <./llimits.h:30:19, col:42> 'unsigned long'
      |     | `-BinaryOperator 0x561ce744d630 <col:20, col:41> 'unsigned long' '-'
      |     |   |-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
      |     |   | `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
      |     |   |   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
      |     |   |     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
      |     |   |       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
      |     |   `-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
      |     |     `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
      |     `-ParenExpr 0x561ce744d6a8 <./lmem.h:20:37, col:39> 'unsigned long'
      |       `-UnaryExprOrTypeTraitExpr 0x561ce744d688 <line:38:48, col:56> 'unsigned long' sizeof 'char'
      |-CallExpr 0x561ce744db60 <line:21:3, col:42> 'void *'
      | |-ImplicitCastExpr 0x561ce744db48 <col:3> 'void *(*)(lua_State *, void *, size_t, size_t)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x561ce744d738 <col:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
      | |-ImplicitCastExpr 0x561ce744dba8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
      | | `-MemberExpr 0x561ce744d7a0 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
      | |   `-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
      | |     `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
      | |-ImplicitCastExpr 0x561ce744dbd8 <./lmem.h:21:20, col:22> 'void *' <BitCast>
      | | `-ImplicitCastExpr 0x561ce744dbc0 <col:20, col:22> 'char *' <LValueToRValue>
      | |   `-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
      | |     `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
      | |       `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
      | |         `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
      | |           `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      | |             `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
      | |               `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
      | |-BinaryOperator 0x561ce744da50 <./lmem.h:21:25, col:32> 'unsigned long' '*'
      | | |-ImplicitCastExpr 0x561ce744da38 <col:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
      | | | `-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
      | | |   `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
      | | |     `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
      | | |       `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
      | | |         `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      | | |           `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
      | | |             `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
      | | `-ParenExpr 0x561ce744da18 <./lmem.h:21:30, col:32> 'unsigned long'
      | |   `-UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
      | `-BinaryOperator 0x561ce744db20 <line:21:35, col:41> 'unsigned long' '*'
      |   |-ImplicitCastExpr 0x561ce744db08 <col:35, col:37> 'unsigned long' <IntegralCast>
      |   | `-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
      |   |   `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
      |   `-ParenExpr 0x561ce744dae8 <./lmem.h:21:39, col:41> 'unsigned long'
      |     `-UnaryExprOrTypeTraitExpr 0x561ce744dac8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
      `-CallExpr 0x561ce744dca8 <line:22:3, col:16> 'void *'
        |-ImplicitCastExpr 0x561ce744dc90 <col:3> 'void *(*)(lua_State *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x561ce744dbf0 <col:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
        `-ImplicitCastExpr 0x561ce744dcd8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
          `-MemberExpr 0x561ce744dc58 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
            `-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
(char *)(([B4.1])) (CStyleCastExpr, BitCast, char *)
   3: DeclRefExpr 0x561ce744d2c0 <llex.c:149:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744d2e8 <llex.c:149:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d2c0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce744d300 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce744d2e8 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d2c0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.4]->buff
   6: ImplicitCastExpr 0x561ce744d358 <./lzio.h:40:25, col:30> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce744d338 <col:25, col:30> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce744d300 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce744d2e8 <col:28> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744d2c0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B4.5]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
   7: MemberExpr 0x561ce744d370 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce744d358 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce744d338 <col:25, col:30> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce744d300 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce744d2e8 <col:28> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744d2c0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.6]->buffer
   8: BinaryOperator 0x561ce744ddf0 <./lmem.h:38:5, ./llimits.h:75:31> 'char *' '='
|-ParenExpr 0x561ce744d3a8 <./lmem.h:38:5, col:7> 'char *' lvalue
| `-MemberExpr 0x561ce744d370 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
|   `-ImplicitCastExpr 0x561ce744d358 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
|     `-ParenExpr 0x561ce744d338 <col:25, col:30> 'Mbuffer *' lvalue
|       `-MemberExpr 0x561ce744d300 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|         `-ImplicitCastExpr 0x561ce744d2e8 <col:28> 'LexState *' <LValueToRValue>
|           `-DeclRefExpr 0x561ce744d2c0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ParenExpr 0x561ce744ddd0 <./llimits.h:75:22, col:31> 'char *'
  `-CStyleCastExpr 0x561ce744dda8 <col:23, col:30> 'char *' <BitCast>
    `-ParenExpr 0x561ce744dd88 <col:26, col:30> 'void *'
      `-ParenExpr 0x561ce744dd20 <./lmem.h:20:2, line:22:17> 'void *'
        `-ConditionalOperator 0x561ce744dcf0 <line:20:3, line:22:16> 'void *'
          |-ParenExpr 0x561ce744d718 <line:20:3, col:40> 'int'
          | `-BinaryOperator 0x561ce744d6f0 <./llimits.h:75:22, ./lmem.h:20:39> 'int' '<='
          |   |-ParenExpr 0x561ce744d4d8 <./llimits.h:75:22, col:31> 'size_t':'unsigned long'
          |   | `-CStyleCastExpr 0x561ce744d4b0 <col:23, col:30> 'size_t':'unsigned long' <IntegralCast>
          |   |   `-ParenExpr 0x561ce744d490 <col:26, col:30> 'int'
          |   |     `-BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
          |   |       |-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
          |   |       | `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
          |   |       `-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
          |   `-BinaryOperator 0x561ce744d6c8 <./llimits.h:30:19, ./lmem.h:20:39> 'unsigned long' '/'
          |     |-ParenExpr 0x561ce744d658 <./llimits.h:30:19, col:42> 'unsigned long'
          |     | `-BinaryOperator 0x561ce744d630 <col:20, col:41> 'unsigned long' '-'
          |     |   |-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
          |     |   | `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
          |     |   |   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
          |     |   |     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
          |     |   |       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
          |     |   `-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
          |     |     `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
          |     `-ParenExpr 0x561ce744d6a8 <./lmem.h:20:37, col:39> 'unsigned long'
          |       `-UnaryExprOrTypeTraitExpr 0x561ce744d688 <line:38:48, col:56> 'unsigned long' sizeof 'char'
          |-CallExpr 0x561ce744db60 <line:21:3, col:42> 'void *'
          | |-ImplicitCastExpr 0x561ce744db48 <col:3> 'void *(*)(lua_State *, void *, size_t, size_t)' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x561ce744d738 <col:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
          | |-ImplicitCastExpr 0x561ce744dba8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
          | | `-MemberExpr 0x561ce744d7a0 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
          | |   `-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
          | |     `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
          | |-ImplicitCastExpr 0x561ce744dbd8 <./lmem.h:21:20, col:22> 'void *' <BitCast>
          | | `-ImplicitCastExpr 0x561ce744dbc0 <col:20, col:22> 'char *' <LValueToRValue>
          | |   `-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
          | |     `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
          | |       `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
          | |         `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
          | |           `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          | |             `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
          | |               `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
          | |-BinaryOperator 0x561ce744da50 <./lmem.h:21:25, col:32> 'unsigned long' '*'
          | | |-ImplicitCastExpr 0x561ce744da38 <col:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
          | | | `-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
          | | |   `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
          | | |     `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
          | | |       `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
          | | |         `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          | | |           `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
          | | |             `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
          | | `-ParenExpr 0x561ce744da18 <./lmem.h:21:30, col:32> 'unsigned long'
          | |   `-UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
          | `-BinaryOperator 0x561ce744db20 <line:21:35, col:41> 'unsigned long' '*'
          |   |-ImplicitCastExpr 0x561ce744db08 <col:35, col:37> 'unsigned long' <IntegralCast>
          |   | `-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
          |   |   `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
          |   `-ParenExpr 0x561ce744dae8 <./lmem.h:21:39, col:41> 'unsigned long'
          |     `-UnaryExprOrTypeTraitExpr 0x561ce744dac8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
          `-CallExpr 0x561ce744dca8 <line:22:3, col:16> 'void *'
            |-ImplicitCastExpr 0x561ce744dc90 <col:3> 'void *(*)(lua_State *)' <FunctionToPointerDecay>
            | `-DeclRefExpr 0x561ce744dbf0 <col:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
            `-ImplicitCastExpr 0x561ce744dcd8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
              `-MemberExpr 0x561ce744dc58 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
                `-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B4.7]) = ([B4.2])
   9: IntegerLiteral 0x561ce744df20 <./llimits.h:105:23> 'int' 32
32
  10: ImplicitCastExpr 0x561ce744df40 <./llimits.h:105:23> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce744df20 <col:23> 'int' 32
[B4.9] (ImplicitCastExpr, IntegralCast, size_t)
  11: DeclRefExpr 0x561ce744de38 <llex.c:149:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x561ce744de60 <llex.c:149:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744de38 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: MemberExpr 0x561ce744de78 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce744de60 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744de38 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.12]->buff
  14: ImplicitCastExpr 0x561ce744ded0 <./lzio.h:41:2, col:7> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce744deb0 <col:2, col:7> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce744de78 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce744de60 <col:28> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744de38 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B4.13]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  15: MemberExpr 0x561ce744dee8 <./lzio.h:41:2, col:10> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
`-ImplicitCastExpr 0x561ce744ded0 <col:2, col:7> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce744deb0 <col:2, col:7> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce744de78 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce744de60 <col:28> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744de38 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.14]->buffsize
  16: BinaryOperator 0x561ce744df58 <./lzio.h:41:2, ./llimits.h:105:23> 'size_t':'unsigned long' '='
|-MemberExpr 0x561ce744dee8 <./lzio.h:41:2, col:10> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
| `-ImplicitCastExpr 0x561ce744ded0 <col:2, col:7> 'Mbuffer *' <LValueToRValue>
|   `-ParenExpr 0x561ce744deb0 <col:2, col:7> 'Mbuffer *' lvalue
|     `-MemberExpr 0x561ce744de78 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|       `-ImplicitCastExpr 0x561ce744de60 <col:28> 'LexState *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce744de38 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744df40 <./llimits.h:105:23> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce744df20 <col:23> 'int' 32
[B4.15] = [B4.10]
  17: BinaryOperator 0x561ce744df80 <./lmem.h:38:4, ./llimits.h:105:23> 'size_t':'unsigned long' ','
|-ParenExpr 0x561ce744de18 <./lmem.h:38:4, col:59> 'char *'
| `-BinaryOperator 0x561ce744ddf0 <col:5, ./llimits.h:75:31> 'char *' '='
|   |-ParenExpr 0x561ce744d3a8 <./lmem.h:38:5, col:7> 'char *' lvalue
|   | `-MemberExpr 0x561ce744d370 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
|   |   `-ImplicitCastExpr 0x561ce744d358 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
|   |     `-ParenExpr 0x561ce744d338 <col:25, col:30> 'Mbuffer *' lvalue
|   |       `-MemberExpr 0x561ce744d300 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|   |         `-ImplicitCastExpr 0x561ce744d2e8 <col:28> 'LexState *' <LValueToRValue>
|   |           `-DeclRefExpr 0x561ce744d2c0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
|   `-ParenExpr 0x561ce744ddd0 <./llimits.h:75:22, col:31> 'char *'
|     `-CStyleCastExpr 0x561ce744dda8 <col:23, col:30> 'char *' <BitCast>
|       `-ParenExpr 0x561ce744dd88 <col:26, col:30> 'void *'
|         `-ParenExpr 0x561ce744dd20 <./lmem.h:20:2, line:22:17> 'void *'
|           `-ConditionalOperator 0x561ce744dcf0 <line:20:3, line:22:16> 'void *'
|             |-ParenExpr 0x561ce744d718 <line:20:3, col:40> 'int'
|             | `-BinaryOperator 0x561ce744d6f0 <./llimits.h:75:22, ./lmem.h:20:39> 'int' '<='
|             |   |-ParenExpr 0x561ce744d4d8 <./llimits.h:75:22, col:31> 'size_t':'unsigned long'
|             |   | `-CStyleCastExpr 0x561ce744d4b0 <col:23, col:30> 'size_t':'unsigned long' <IntegralCast>
|             |   |   `-ParenExpr 0x561ce744d490 <col:26, col:30> 'int'
|             |   |     `-BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
|             |   |       |-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
|             |   |       | `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
|             |   |       `-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
|             |   `-BinaryOperator 0x561ce744d6c8 <./llimits.h:30:19, ./lmem.h:20:39> 'unsigned long' '/'
|             |     |-ParenExpr 0x561ce744d658 <./llimits.h:30:19, col:42> 'unsigned long'
|             |     | `-BinaryOperator 0x561ce744d630 <col:20, col:41> 'unsigned long' '-'
|             |     |   |-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
|             |     |   | `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
|             |     |   |   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
|             |     |   |     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
|             |     |   |       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
|             |     |   `-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
|             |     |     `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
|             |     `-ParenExpr 0x561ce744d6a8 <./lmem.h:20:37, col:39> 'unsigned long'
|             |       `-UnaryExprOrTypeTraitExpr 0x561ce744d688 <line:38:48, col:56> 'unsigned long' sizeof 'char'
|             |-CallExpr 0x561ce744db60 <line:21:3, col:42> 'void *'
|             | |-ImplicitCastExpr 0x561ce744db48 <col:3> 'void *(*)(lua_State *, void *, size_t, size_t)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x561ce744d738 <col:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
|             | |-ImplicitCastExpr 0x561ce744dba8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
|             | | `-MemberExpr 0x561ce744d7a0 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
|             | |   `-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
|             | |     `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
|             | |-ImplicitCastExpr 0x561ce744dbd8 <./lmem.h:21:20, col:22> 'void *' <BitCast>
|             | | `-ImplicitCastExpr 0x561ce744dbc0 <col:20, col:22> 'char *' <LValueToRValue>
|             | |   `-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
|             | |     `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
|             | |       `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
|             | |         `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
|             | |           `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|             | |             `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
|             | |               `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
|             | |-BinaryOperator 0x561ce744da50 <./lmem.h:21:25, col:32> 'unsigned long' '*'
|             | | |-ImplicitCastExpr 0x561ce744da38 <col:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
|             | | | `-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
|             | | |   `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
|             | | |     `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
|             | | |       `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
|             | | |         `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|             | | |           `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
|             | | |             `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
|             | | `-ParenExpr 0x561ce744da18 <./lmem.h:21:30, col:32> 'unsigned long'
|             | |   `-UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
|             | `-BinaryOperator 0x561ce744db20 <line:21:35, col:41> 'unsigned long' '*'
|             |   |-ImplicitCastExpr 0x561ce744db08 <col:35, col:37> 'unsigned long' <IntegralCast>
|             |   | `-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
|             |   |   `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
|             |   `-ParenExpr 0x561ce744dae8 <./lmem.h:21:39, col:41> 'unsigned long'
|             |     `-UnaryExprOrTypeTraitExpr 0x561ce744dac8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
|             `-CallExpr 0x561ce744dca8 <line:22:3, col:16> 'void *'
|               |-ImplicitCastExpr 0x561ce744dc90 <col:3> 'void *(*)(lua_State *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561ce744dbf0 <col:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
|               `-ImplicitCastExpr 0x561ce744dcd8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
|                 `-MemberExpr 0x561ce744dc58 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
|                   `-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
|                     `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-BinaryOperator 0x561ce744df58 <./lzio.h:41:2, ./llimits.h:105:23> 'size_t':'unsigned long' '='
  |-MemberExpr 0x561ce744dee8 <./lzio.h:41:2, col:10> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
  | `-ImplicitCastExpr 0x561ce744ded0 <col:2, col:7> 'Mbuffer *' <LValueToRValue>
  |   `-ParenExpr 0x561ce744deb0 <col:2, col:7> 'Mbuffer *' lvalue
  |     `-MemberExpr 0x561ce744de78 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |       `-ImplicitCastExpr 0x561ce744de60 <col:28> 'LexState *' <LValueToRValue>
  |         `-DeclRefExpr 0x561ce744de38 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
  `-ImplicitCastExpr 0x561ce744df40 <./llimits.h:105:23> 'size_t':'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x561ce744df20 <col:23> 'int' 32
... , [B4.16]
  18: DeclRefExpr 0x561ce744e040 <llex.c:150:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  19: ImplicitCastExpr 0x561ce744e068 <llex.c:150:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.18] (ImplicitCastExpr, LValueToRValue, LexState *)
  20: MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.19]->z
  21: ImplicitCastExpr 0x561ce744e0d8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce744e0b8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B4.20]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  22: MemberExpr 0x561ce744e0f0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce744e0d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce744e0b8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.21]->n
  23: UnaryOperator 0x561ce744e128 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce744e0f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce744e0d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce744e0b8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B4.22]--
  24: IntegerLiteral 0x561ce744e168 <./lzio.h:22:31> 'int' 0
0
  25: ImplicitCastExpr 0x561ce744e188 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce744e168 <col:31> 'int' 0
[B4.24] (ImplicitCastExpr, IntegralCast, unsigned long)
  26: BinaryOperator 0x561ce744e1a0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce744e148 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce744e128 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce744e0f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce744e0d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce744e0b8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce744e080 <llex.c:150:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce744e068 <line:150:8> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce744e040 <col:8> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744e188 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce744e168 <col:31> 'int' 0
([B4.23]) > [B4.25]
   T: [B4.26] ? ... : ...
   Preds (2): B5 B6
   Succs (2): B2 B3

 [B5]
   1: DeclRefExpr 0x561ce744d738 <./lmem.h:21:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
luaM_realloc_
   2: ImplicitCastExpr 0x561ce744db48 <./lmem.h:21:3> 'void *(*)(lua_State *, void *, size_t, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce744d738 <col:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(lua_State *, void *, size_t, size_t))
   3: DeclRefExpr 0x561ce744d760 <llex.c:149:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744d788 <llex.c:149:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce744d7a0 <llex.c:149:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
`-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.4]->L
   6: ImplicitCastExpr 0x561ce744dba8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x561ce744d7a0 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
  `-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.5] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   7: DeclRefExpr 0x561ce744d7d8 <llex.c:149:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x561ce744d800 <llex.c:149:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.8]->buff
  10: ImplicitCastExpr 0x561ce744d870 <./lzio.h:40:25, col:30> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B5.9]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  11: MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.10]->buffer
  12: ImplicitCastExpr 0x561ce744dbc0 <./lmem.h:21:20, col:22> 'char *' <LValueToRValue>
`-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
  `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
    `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B5.11]) (ImplicitCastExpr, LValueToRValue, char *)
  13: ImplicitCastExpr 0x561ce744dbd8 <./lmem.h:21:20, col:22> 'void *' <BitCast>
`-ImplicitCastExpr 0x561ce744dbc0 <col:20, col:22> 'char *' <LValueToRValue>
  `-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
    `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
      `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
        `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
          `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
            `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.12] (ImplicitCastExpr, BitCast, void *)
  14: DeclRefExpr 0x561ce744d8e0 <llex.c:149:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x561ce744d908 <llex.c:149:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.15]->buff
  17: ImplicitCastExpr 0x561ce744d978 <./lzio.h:40:41, col:46> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B5.16]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  18: MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
`-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B5.17]->buffsize
  19: ImplicitCastExpr 0x561ce744da38 <./lmem.h:21:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
`-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
  `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
    `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
([B5.18]) (ImplicitCastExpr, LValueToRValue, size_t)
  20: UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <./lmem.h:38:48, col:56> 'unsigned long' sizeof 'char'
sizeof(char)
  21: BinaryOperator 0x561ce744da50 <./lmem.h:21:25, col:32> 'unsigned long' '*'
|-ImplicitCastExpr 0x561ce744da38 <col:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
| `-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
|   `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
|     `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
|       `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
|         `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|           `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ParenExpr 0x561ce744da18 <./lmem.h:21:30, col:32> 'unsigned long'
  `-UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
[B5.19] * ([B5.20])
  22: IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
32
  23: ImplicitCastExpr 0x561ce744db08 <./lmem.h:21:35, col:37> 'unsigned long' <IntegralCast>
`-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
  `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
([B5.22]) (ImplicitCastExpr, IntegralCast, unsigned long)
  24: UnaryExprOrTypeTraitExpr 0x561ce744dac8 <./lmem.h:38:48, col:56> 'unsigned long' sizeof 'char'
sizeof(char)
  25: BinaryOperator 0x561ce744db20 <./lmem.h:21:35, col:41> 'unsigned long' '*'
|-ImplicitCastExpr 0x561ce744db08 <col:35, col:37> 'unsigned long' <IntegralCast>
| `-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
|   `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
`-ParenExpr 0x561ce744dae8 <./lmem.h:21:39, col:41> 'unsigned long'
  `-UnaryExprOrTypeTraitExpr 0x561ce744dac8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
[B5.23] * ([B5.24])
  26: CallExpr 0x561ce744db60 <./lmem.h:21:3, col:42> 'void *'
|-ImplicitCastExpr 0x561ce744db48 <col:3> 'void *(*)(lua_State *, void *, size_t, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce744d738 <col:3> 'void *(lua_State *, void *, size_t, size_t)' Function 0x561ce7412d58 'luaM_realloc_' 'void *(lua_State *, void *, size_t, size_t)'
|-ImplicitCastExpr 0x561ce744dba8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
| `-MemberExpr 0x561ce744d7a0 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
|   `-ImplicitCastExpr 0x561ce744d788 <col:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce744d760 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce744dbd8 <./lmem.h:21:20, col:22> 'void *' <BitCast>
| `-ImplicitCastExpr 0x561ce744dbc0 <col:20, col:22> 'char *' <LValueToRValue>
|   `-ParenExpr 0x561ce744d8c0 <col:20, col:22> 'char *' lvalue
|     `-MemberExpr 0x561ce744d888 <./lzio.h:40:25, col:33> 'char *' lvalue ->buffer 0x561ce74137f8
|       `-ImplicitCastExpr 0x561ce744d870 <col:25, col:30> 'Mbuffer *' <LValueToRValue>
|         `-ParenExpr 0x561ce744d850 <col:25, col:30> 'Mbuffer *' lvalue
|           `-MemberExpr 0x561ce744d818 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|             `-ImplicitCastExpr 0x561ce744d800 <col:28> 'LexState *' <LValueToRValue>
|               `-DeclRefExpr 0x561ce744d7d8 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
|-BinaryOperator 0x561ce744da50 <./lmem.h:21:25, col:32> 'unsigned long' '*'
| |-ImplicitCastExpr 0x561ce744da38 <col:25, col:28> 'size_t':'unsigned long' <LValueToRValue>
| | `-ParenExpr 0x561ce744d9c8 <col:25, col:28> 'size_t':'unsigned long' lvalue
| |   `-MemberExpr 0x561ce744d990 <./lzio.h:40:41, col:49> 'size_t':'unsigned long' lvalue ->buffsize 0x561ce74138a8
| |     `-ImplicitCastExpr 0x561ce744d978 <col:41, col:46> 'Mbuffer *' <LValueToRValue>
| |       `-ParenExpr 0x561ce744d958 <col:41, col:46> 'Mbuffer *' lvalue
| |         `-MemberExpr 0x561ce744d920 <llex.c:149:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
| |           `-ImplicitCastExpr 0x561ce744d908 <col:28> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce744d8e0 <col:28> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
| `-ParenExpr 0x561ce744da18 <./lmem.h:21:30, col:32> 'unsigned long'
|   `-UnaryExprOrTypeTraitExpr 0x561ce744d9f8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
`-BinaryOperator 0x561ce744db20 <line:21:35, col:41> 'unsigned long' '*'
  |-ImplicitCastExpr 0x561ce744db08 <col:35, col:37> 'unsigned long' <IntegralCast>
  | `-ParenExpr 0x561ce744da98 <col:35, col:37> 'int'
  |   `-IntegerLiteral 0x561ce744da78 <./llimits.h:105:23> 'int' 32
  `-ParenExpr 0x561ce744dae8 <./lmem.h:21:39, col:41> 'unsigned long'
    `-UnaryExprOrTypeTraitExpr 0x561ce744dac8 <line:38:48, col:56> 'unsigned long' sizeof 'char'
[B5.2]([B5.6], [B5.13], [B5.21], [B5.25])
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x561ce744dbf0 <./lmem.h:22:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
luaM_toobig
   2: ImplicitCastExpr 0x561ce744dc90 <./lmem.h:22:3> 'void *(*)(lua_State *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce744dbf0 <col:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(lua_State *))
   3: DeclRefExpr 0x561ce744dc18 <llex.c:149:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744dc40 <llex.c:149:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce744dc58 <llex.c:149:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
`-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B6.4]->L
   6: ImplicitCastExpr 0x561ce744dcd8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x561ce744dc58 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
  `-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B6.5] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   7: CallExpr 0x561ce744dca8 <./lmem.h:22:3, col:16> 'void *'
|-ImplicitCastExpr 0x561ce744dc90 <col:3> 'void *(*)(lua_State *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce744dbf0 <col:3> 'void *(lua_State *)' Function 0x561ce7412fa8 'luaM_toobig' 'void *(lua_State *)'
`-ImplicitCastExpr 0x561ce744dcd8 <llex.c:149:21, col:25> 'struct lua_State *' <LValueToRValue>
  `-MemberExpr 0x561ce744dc58 <col:21, col:25> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
    `-ImplicitCastExpr 0x561ce744dc40 <col:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744dc18 <col:21> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B6.2]([B6.6])
   Preds (1): B7(Unreachable)
   Succs (1): B4

 [B7]
   1: CharacterLiteral 0x561ce744cc10 <llex.c:141:18> 'int' 46
'.'
   2: ImplicitCastExpr 0x561ce744cc28 <llex.c:141:18> 'char' <IntegralCast>
`-CharacterLiteral 0x561ce744cc10 <col:18> 'int' 46
[B7.1] (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x561ce744cb98 <llex.c:141:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744cbc0 <llex.c:141:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744cb98 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce744cbd8 <llex.c:141:3, col:7> 'char' lvalue ->decpoint 0x561ce7426d10
`-ImplicitCastExpr 0x561ce744cbc0 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744cb98 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.4]->decpoint
   6: BinaryOperator 0x561ce744cc40 <llex.c:141:3, col:18> 'char' '='
|-MemberExpr 0x561ce744cbd8 <col:3, col:7> 'char' lvalue ->decpoint 0x561ce7426d10
| `-ImplicitCastExpr 0x561ce744cbc0 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744cb98 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744cc28 <col:18> 'char' <IntegralCast>
  `-CharacterLiteral 0x561ce744cc10 <col:18> 'int' 46
[B7.5] = [B7.2]
   7: DeclRefExpr 0x561ce744cce0 <llex.c:142:11> 'lua_State *' lvalue ParmVar 0x561ce744c8a0 'L' 'lua_State *'
L
   8: ImplicitCastExpr 0x561ce744cd08 <llex.c:142:11> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x561ce744cce0 <col:11> 'lua_State *' lvalue ParmVar 0x561ce744c8a0 'L' 'lua_State *'
[B7.7] (ImplicitCastExpr, LValueToRValue, lua_State *)
   9: DeclRefExpr 0x561ce744cc68 <llex.c:142:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce744cc90 <llex.c:142:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744cc68 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: MemberExpr 0x561ce744cca8 <llex.c:142:3, col:7> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
`-ImplicitCastExpr 0x561ce744cc90 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744cc68 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.10]->L
  12: BinaryOperator 0x561ce744cd20 <llex.c:142:3, col:11> 'struct lua_State *' '='
|-MemberExpr 0x561ce744cca8 <col:3, col:7> 'struct lua_State *' lvalue ->L 0x561ce7426bb0
| `-ImplicitCastExpr 0x561ce744cc90 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744cc68 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744cd08 <col:11> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744cce0 <col:11> 'lua_State *' lvalue ParmVar 0x561ce744c8a0 'L' 'lua_State *'
[B7.11] = [B7.8]
  13: DeclRefExpr 0x561ce744cdf8 <llex.c:143:25> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
TK_EOS
  14: DeclRefExpr 0x561ce744cd48 <llex.c:143:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x561ce744cd70 <llex.c:143:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744cd48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: MemberExpr 0x561ce744cd88 <llex.c:143:3, col:7> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
`-ImplicitCastExpr 0x561ce744cd70 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744cd48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.15]->lookahead
  17: MemberExpr 0x561ce744cdc0 <llex.c:143:3, col:17> 'int' lvalue .token 0x561ce74253a8
`-MemberExpr 0x561ce744cd88 <col:3, col:7> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
  `-ImplicitCastExpr 0x561ce744cd70 <col:3> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744cd48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.16].token
  18: BinaryOperator 0x561ce744ce20 <llex.c:143:3, col:25> 'int' '='
|-MemberExpr 0x561ce744cdc0 <col:3, col:17> 'int' lvalue .token 0x561ce74253a8
| `-MemberExpr 0x561ce744cd88 <col:3, col:7> 'Token':'struct Token' lvalue ->lookahead 0x561ce7426988
|   `-ImplicitCastExpr 0x561ce744cd70 <col:3> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce744cd48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-DeclRefExpr 0x561ce744cdf8 <col:25> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
[B7.17] = [B7.13]
  19: DeclRefExpr 0x561ce744cec0 <llex.c:144:11> 'ZIO *' lvalue ParmVar 0x561ce744c980 'z' 'ZIO *'
z
  20: ImplicitCastExpr 0x561ce744cee8 <llex.c:144:11> 'ZIO *' <LValueToRValue>
`-DeclRefExpr 0x561ce744cec0 <col:11> 'ZIO *' lvalue ParmVar 0x561ce744c980 'z' 'ZIO *'
[B7.19] (ImplicitCastExpr, LValueToRValue, ZIO *)
  21: DeclRefExpr 0x561ce744ce48 <llex.c:144:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  22: ImplicitCastExpr 0x561ce744ce70 <llex.c:144:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744ce48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.21] (ImplicitCastExpr, LValueToRValue, LexState *)
  23: MemberExpr 0x561ce744ce88 <llex.c:144:3, col:7> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744ce70 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744ce48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.22]->z
  24: BinaryOperator 0x561ce744cf00 <llex.c:144:3, col:11> 'ZIO *' '='
|-MemberExpr 0x561ce744ce88 <col:3, col:7> 'ZIO *' lvalue ->z 0x561ce7426c08
| `-ImplicitCastExpr 0x561ce744ce70 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744ce48 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744cee8 <col:11> 'ZIO *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744cec0 <col:11> 'ZIO *' lvalue ParmVar 0x561ce744c980 'z' 'ZIO *'
[B7.23] = [B7.20]
  25: IntegerLiteral 0x561ce744cfa0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  26: CStyleCastExpr 0x561ce744cfd8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x561ce744cfa0 <col:24> 'int' 0
(void *)[B7.25] (CStyleCastExpr, NullToPointer, void *)
  27: ImplicitCastExpr 0x561ce744d020 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'struct FuncState *' <NullToPointer>
`-ParenExpr 0x561ce744d000 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x561ce744cfd8 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x561ce744cfa0 <col:24> 'int' 0
([B7.26]) (ImplicitCastExpr, NullToPointer, struct FuncState *)
  28: DeclRefExpr 0x561ce744cf28 <llex.c:145:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  29: ImplicitCastExpr 0x561ce744cf50 <llex.c:145:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744cf28 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.28] (ImplicitCastExpr, LValueToRValue, LexState *)
  30: MemberExpr 0x561ce744cf68 <llex.c:145:3, col:7> 'struct FuncState *' lvalue ->fs 0x561ce7426b40
`-ImplicitCastExpr 0x561ce744cf50 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744cf28 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.29]->fs
  31: BinaryOperator 0x561ce744d038 <llex.c:145:3, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'struct FuncState *' '='
|-MemberExpr 0x561ce744cf68 <llex.c:145:3, col:7> 'struct FuncState *' lvalue ->fs 0x561ce7426b40
| `-ImplicitCastExpr 0x561ce744cf50 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744cf28 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744d020 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'struct FuncState *' <NullToPointer>
  `-ParenExpr 0x561ce744d000 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x561ce744cfd8 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x561ce744cfa0 <col:24> 'int' 0
[B7.30] = [B7.27]
  32: IntegerLiteral 0x561ce744d0d8 <llex.c:146:20> 'int' 1
1
  33: DeclRefExpr 0x561ce744d060 <llex.c:146:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  34: ImplicitCastExpr 0x561ce744d088 <llex.c:146:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d060 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.33] (ImplicitCastExpr, LValueToRValue, LexState *)
  35: MemberExpr 0x561ce744d0a0 <llex.c:146:3, col:7> 'int' lvalue ->linenumber 0x561ce7426850
`-ImplicitCastExpr 0x561ce744d088 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d060 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.34]->linenumber
  36: BinaryOperator 0x561ce744d0f8 <llex.c:146:3, col:20> 'int' '='
|-MemberExpr 0x561ce744d0a0 <col:3, col:7> 'int' lvalue ->linenumber 0x561ce7426850
| `-ImplicitCastExpr 0x561ce744d088 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744d060 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-IntegerLiteral 0x561ce744d0d8 <col:20> 'int' 1
[B7.35] = [B7.32]
  37: IntegerLiteral 0x561ce744d198 <llex.c:147:18> 'int' 1
1
  38: DeclRefExpr 0x561ce744d120 <llex.c:147:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  39: ImplicitCastExpr 0x561ce744d148 <llex.c:147:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d120 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.38] (ImplicitCastExpr, LValueToRValue, LexState *)
  40: MemberExpr 0x561ce744d160 <llex.c:147:3, col:7> 'int' lvalue ->lastline 0x561ce74268b0
`-ImplicitCastExpr 0x561ce744d148 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d120 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.39]->lastline
  41: BinaryOperator 0x561ce744d1b8 <llex.c:147:3, col:18> 'int' '='
|-MemberExpr 0x561ce744d160 <col:3, col:7> 'int' lvalue ->lastline 0x561ce74268b0
| `-ImplicitCastExpr 0x561ce744d148 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744d120 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-IntegerLiteral 0x561ce744d198 <col:18> 'int' 1
[B7.40] = [B7.37]
  42: DeclRefExpr 0x561ce744d258 <llex.c:148:16> 'TString *' lvalue ParmVar 0x561ce744c9f0 'source' 'TString *'
source
  43: ImplicitCastExpr 0x561ce744d280 <llex.c:148:16> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d258 <col:16> 'TString *' lvalue ParmVar 0x561ce744c9f0 'source' 'TString *'
[B7.42] (ImplicitCastExpr, LValueToRValue, TString *)
  44: DeclRefExpr 0x561ce744d1e0 <llex.c:148:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
ls
  45: ImplicitCastExpr 0x561ce744d208 <llex.c:148:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744d1e0 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.44] (ImplicitCastExpr, LValueToRValue, LexState *)
  46: MemberExpr 0x561ce744d220 <llex.c:148:3, col:7> 'TString *' lvalue ->source 0x561ce7426cb8
`-ImplicitCastExpr 0x561ce744d208 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d1e0 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
[B7.45]->source
  47: BinaryOperator 0x561ce744d298 <llex.c:148:3, col:16> 'TString *' '='
|-MemberExpr 0x561ce744d220 <col:3, col:7> 'TString *' lvalue ->source 0x561ce7426cb8
| `-ImplicitCastExpr 0x561ce744d208 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744d1e0 <col:3> 'LexState *' lvalue ParmVar 0x561ce744c910 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744d280 <col:16> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744d258 <col:16> 'TString *' lvalue ParmVar 0x561ce744c9f0 'source' 'TString *'
[B7.46] = [B7.43]
  48: IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
32
  49: IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
1
  50: BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
|-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
| `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
`-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
([B7.48]) + [B7.49]
  51: CStyleCastExpr 0x561ce744d4b0 <./llimits.h:75:23, col:30> 'size_t':'unsigned long' <IntegralCast>
`-ParenExpr 0x561ce744d490 <col:26, col:30> 'int'
  `-BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
    |-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
    | `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
    `-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
(size_t)([B7.50]) (CStyleCastExpr, IntegralCast, size_t)
  52: IntegerLiteral 0x561ce744d4f8 <./llimits.h:30:38> 'int' 0
0
  53: CStyleCastExpr 0x561ce744d528 <./llimits.h:30:30, col:38> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
(size_t)[B7.52] (CStyleCastExpr, IntegralCast, size_t)
  54: UnaryOperator 0x561ce744d550 <./llimits.h:30:29, col:38> 'size_t':'unsigned long' prefix '~'
`-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
~[B7.53]
  55: CStyleCastExpr 0x561ce744d5d0 <./llimits.h:30:20, col:39> 'size_t':'unsigned long' <NoOp>
`-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
  `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
    `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
      `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
(size_t)([B7.54]) (CStyleCastExpr, NoOp, size_t)
  56: IntegerLiteral 0x561ce744d5f8 <./llimits.h:30:41> 'int' 2
2
  57: ImplicitCastExpr 0x561ce744d618 <./llimits.h:30:41> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
[B7.56] (ImplicitCastExpr, IntegralCast, unsigned long)
  58: BinaryOperator 0x561ce744d630 <./llimits.h:30:20, col:41> 'unsigned long' '-'
|-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
| `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
|   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
|     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
`-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
[B7.55] - [B7.57]
  59: UnaryExprOrTypeTraitExpr 0x561ce744d688 <./lmem.h:38:48, col:56> 'unsigned long' sizeof 'char'
sizeof(char)
  60: BinaryOperator 0x561ce744d6c8 <./llimits.h:30:19, ./lmem.h:20:39> 'unsigned long' '/'
|-ParenExpr 0x561ce744d658 <./llimits.h:30:19, col:42> 'unsigned long'
| `-BinaryOperator 0x561ce744d630 <col:20, col:41> 'unsigned long' '-'
|   |-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
|   | `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
|   |   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
|   |     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
|   |       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
|   `-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
`-ParenExpr 0x561ce744d6a8 <./lmem.h:20:37, col:39> 'unsigned long'
  `-UnaryExprOrTypeTraitExpr 0x561ce744d688 <line:38:48, col:56> 'unsigned long' sizeof 'char'
([B7.58]) / ([B7.59])
  61: BinaryOperator 0x561ce744d6f0 <./llimits.h:75:22, ./lmem.h:20:39> 'int' '<='
|-ParenExpr 0x561ce744d4d8 <./llimits.h:75:22, col:31> 'size_t':'unsigned long'
| `-CStyleCastExpr 0x561ce744d4b0 <col:23, col:30> 'size_t':'unsigned long' <IntegralCast>
|   `-ParenExpr 0x561ce744d490 <col:26, col:30> 'int'
|     `-BinaryOperator 0x561ce744d428 <./lmem.h:20:17, col:21> 'int' '+'
|       |-ParenExpr 0x561ce744d3e8 <col:17, col:19> 'int'
|       | `-IntegerLiteral 0x561ce744d3c8 <./llimits.h:105:23> 'int' 32
|       `-IntegerLiteral 0x561ce744d408 <./lmem.h:20:21> 'int' 1
`-BinaryOperator 0x561ce744d6c8 <./llimits.h:30:19, ./lmem.h:20:39> 'unsigned long' '/'
  |-ParenExpr 0x561ce744d658 <./llimits.h:30:19, col:42> 'unsigned long'
  | `-BinaryOperator 0x561ce744d630 <col:20, col:41> 'unsigned long' '-'
  |   |-CStyleCastExpr 0x561ce744d5d0 <col:20, col:39> 'size_t':'unsigned long' <NoOp>
  |   | `-ParenExpr 0x561ce744d5b0 <col:28, col:39> 'size_t':'unsigned long'
  |   |   `-UnaryOperator 0x561ce744d550 <col:29, col:38> 'size_t':'unsigned long' prefix '~'
  |   |     `-CStyleCastExpr 0x561ce744d528 <col:30, col:38> 'size_t':'unsigned long' <IntegralCast>
  |   |       `-IntegerLiteral 0x561ce744d4f8 <col:38> 'int' 0
  |   `-ImplicitCastExpr 0x561ce744d618 <col:41> 'unsigned long' <IntegralCast>
  |     `-IntegerLiteral 0x561ce744d5f8 <col:41> 'int' 2
  `-ParenExpr 0x561ce744d6a8 <./lmem.h:20:37, col:39> 'unsigned long'
    `-UnaryExprOrTypeTraitExpr 0x561ce744d688 <line:38:48, col:56> 'unsigned long' sizeof 'char'
([B7.51]) <= [B7.60]
   T: ([B7.61]) ? ... : ...
   Preds (1): B8
   Succs (2): B5 B6(Unreachable)

 [B0 (EXIT)]
   Preds (1): B1
