static int singlematch(int c, const char *p, const char *ep)
 [B6 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x55fb421cba60 <lstrlib.c:269:12> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421cba88 <lstrlib.c:269:12> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421cba60 <col:12> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
[B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421cbaa0 <lstrlib.c:269:11, col:12> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb421cba88 <col:12> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421cba60 <col:12> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
*[B1.2]
   4: ImplicitCastExpr 0x55fb421cbac0 <lstrlib.c:269:11, col:12> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421cbaa0 <col:11, col:12> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55fb421cba88 <col:12> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421cba60 <col:12> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
[B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb42112cb0 <lstrlib.c:269:11, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421cbac0 <col:11, col:12> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421cbaa0 <col:11, col:12> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb421cba88 <col:12> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421cba60 <col:12> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
[B1.4] (ImplicitCastExpr, IntegralCast, int)
   T: switch [B1.5]
   Preds (1): B6
   Succs (4): B3 B4 B5 B2

 [B2]
  default:
   1: DeclRefExpr 0x55fb42113268 <lstrlib.c:273:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb42113290 <lstrlib.c:273:30> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
[B2.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421132a8 <lstrlib.c:273:29, col:30> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb42113290 <col:30> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
*[B2.2]
   4: ImplicitCastExpr 0x55fb42113330 <lstrlib.c:24:41, col:43> 'char' <LValueToRValue>
`-ParenExpr 0x55fb42113310 <col:41, col:43> 'const char' lvalue
  `-UnaryOperator 0x55fb421132a8 <line:273:29, col:30> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb42113290 <col:30> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
([B2.3]) (ImplicitCastExpr, LValueToRValue, char)
   5: CStyleCastExpr 0x55fb42113348 <lstrlib.c:24:26, col:43> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x55fb42113330 <col:41, col:43> 'char' <LValueToRValue>
  `-ParenExpr 0x55fb42113310 <col:41, col:43> 'const char' lvalue
    `-UnaryOperator 0x55fb421132a8 <line:273:29, col:30> 'const char' lvalue prefix '*'
      `-ImplicitCastExpr 0x55fb42113290 <col:30> 'const char *' <LValueToRValue>
        `-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
(unsigned char)[B2.4] (CStyleCastExpr, IntegralCast, unsigned char)
   6: ImplicitCastExpr 0x55fb421133b8 <lstrlib.c:24:25, col:44> 'int' <IntegralCast>
`-ParenExpr 0x55fb42113370 <col:25, col:44> 'unsigned char'
  `-CStyleCastExpr 0x55fb42113348 <col:26, col:43> 'unsigned char' <IntegralCast>
    `-ImplicitCastExpr 0x55fb42113330 <col:41, col:43> 'char' <LValueToRValue>
      `-ParenExpr 0x55fb42113310 <col:41, col:43> 'const char' lvalue
        `-UnaryOperator 0x55fb421132a8 <line:273:29, col:30> 'const char' lvalue prefix '*'
          `-ImplicitCastExpr 0x55fb42113290 <col:30> 'const char *' <LValueToRValue>
            `-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
([B2.5]) (ImplicitCastExpr, IntegralCast, int)
   7: DeclRefExpr 0x55fb42113390 <lstrlib.c:273:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
c
   8: ImplicitCastExpr 0x55fb421133d0 <lstrlib.c:273:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb42113390 <col:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
[B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x55fb421133e8 <lstrlib.c:24:25, line:273:36> 'int' '=='
|-ImplicitCastExpr 0x55fb421133b8 <line:24:25, col:44> 'int' <IntegralCast>
| `-ParenExpr 0x55fb42113370 <col:25, col:44> 'unsigned char'
|   `-CStyleCastExpr 0x55fb42113348 <col:26, col:43> 'unsigned char' <IntegralCast>
|     `-ImplicitCastExpr 0x55fb42113330 <col:41, col:43> 'char' <LValueToRValue>
|       `-ParenExpr 0x55fb42113310 <col:41, col:43> 'const char' lvalue
|         `-UnaryOperator 0x55fb421132a8 <line:273:29, col:30> 'const char' lvalue prefix '*'
|           `-ImplicitCastExpr 0x55fb42113290 <col:30> 'const char *' <LValueToRValue>
|             `-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
`-ImplicitCastExpr 0x55fb421133d0 <col:36> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55fb42113390 <col:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
[B2.6] == [B2.8]
  10: ReturnStmt 0x55fb42113430 <lstrlib.c:273:15, col:37>
`-ParenExpr 0x55fb42113410 <col:22, col:37> 'int'
  `-BinaryOperator 0x55fb421133e8 <line:24:25, line:273:36> 'int' '=='
    |-ImplicitCastExpr 0x55fb421133b8 <line:24:25, col:44> 'int' <IntegralCast>
    | `-ParenExpr 0x55fb42113370 <col:25, col:44> 'unsigned char'
    |   `-CStyleCastExpr 0x55fb42113348 <col:26, col:43> 'unsigned char' <IntegralCast>
    |     `-ImplicitCastExpr 0x55fb42113330 <col:41, col:43> 'char' <LValueToRValue>
    |       `-ParenExpr 0x55fb42113310 <col:41, col:43> 'const char' lvalue
    |         `-UnaryOperator 0x55fb421132a8 <line:273:29, col:30> 'const char' lvalue prefix '*'
    |           `-ImplicitCastExpr 0x55fb42113290 <col:30> 'const char *' <LValueToRValue>
    |             `-DeclRefExpr 0x55fb42113268 <col:30> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
    `-ImplicitCastExpr 0x55fb421133d0 <col:36> 'int' <LValueToRValue>
      `-DeclRefExpr 0x55fb42113390 <col:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
return ([B2.9]);
   Preds (1): B1
   Succs (1): B0

 [B3]
  case '[':
   1: DeclRefExpr 0x55fb42113098 <lstrlib.c:272:22> 'int (int, const char *, const char *)' Function 0x55fb421ca478 'matchbracketclass' 'int (int, const char *, const char *)'
matchbracketclass
   2: ImplicitCastExpr 0x55fb421131c8 <lstrlib.c:272:22> 'int (*)(int, const char *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55fb42113098 <col:22> 'int (int, const char *, const char *)' Function 0x55fb421ca478 'matchbracketclass' 'int (int, const char *, const char *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const char *, const char *))
   3: DeclRefExpr 0x55fb421130c0 <lstrlib.c:272:40> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
c
   4: ImplicitCastExpr 0x55fb42113220 <lstrlib.c:272:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb421130c0 <col:40> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
[B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x55fb421130e8 <lstrlib.c:272:43> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
p
   6: ImplicitCastExpr 0x55fb42113238 <lstrlib.c:272:43> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421130e8 <col:43> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
[B3.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: DeclRefExpr 0x55fb42113110 <lstrlib.c:272:46> 'const char *' lvalue ParmVar 0x55fb421cb908 'ep' 'const char *'
ep
   8: ImplicitCastExpr 0x55fb42113158 <lstrlib.c:272:46> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb42113110 <col:46> 'const char *' lvalue ParmVar 0x55fb421cb908 'ep' 'const char *'
[B3.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: IntegerLiteral 0x55fb42113138 <lstrlib.c:272:49> 'int' 1
1
  10: BinaryOperator 0x55fb42113170 <lstrlib.c:272:46, col:49> 'const char *' '-'
|-ImplicitCastExpr 0x55fb42113158 <col:46> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55fb42113110 <col:46> 'const char *' lvalue ParmVar 0x55fb421cb908 'ep' 'const char *'
`-IntegerLiteral 0x55fb42113138 <col:49> 'int' 1
[B3.8] - [B3.9]
  11: CallExpr 0x55fb421131e0 <lstrlib.c:272:22, col:50> 'int'
|-ImplicitCastExpr 0x55fb421131c8 <col:22> 'int (*)(int, const char *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55fb42113098 <col:22> 'int (int, const char *, const char *)' Function 0x55fb421ca478 'matchbracketclass' 'int (int, const char *, const char *)'
|-ImplicitCastExpr 0x55fb42113220 <col:40> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55fb421130c0 <col:40> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
|-ImplicitCastExpr 0x55fb42113238 <col:43> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55fb421130e8 <col:43> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
`-BinaryOperator 0x55fb42113170 <col:46, col:49> 'const char *' '-'
  |-ImplicitCastExpr 0x55fb42113158 <col:46> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55fb42113110 <col:46> 'const char *' lvalue ParmVar 0x55fb421cb908 'ep' 'const char *'
  `-IntegerLiteral 0x55fb42113138 <col:49> 'int' 1
[B3.2]([B3.4], [B3.6], [B3.10])
  12: ReturnStmt 0x55fb42113250 <lstrlib.c:272:15, col:50>
`-CallExpr 0x55fb421131e0 <col:22, col:50> 'int'
  |-ImplicitCastExpr 0x55fb421131c8 <col:22> 'int (*)(int, const char *, const char *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55fb42113098 <col:22> 'int (int, const char *, const char *)' Function 0x55fb421ca478 'matchbracketclass' 'int (int, const char *, const char *)'
  |-ImplicitCastExpr 0x55fb42113220 <col:40> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55fb421130c0 <col:40> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
  |-ImplicitCastExpr 0x55fb42113238 <col:43> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55fb421130e8 <col:43> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
  `-BinaryOperator 0x55fb42113170 <col:46, col:49> 'const char *' '-'
    |-ImplicitCastExpr 0x55fb42113158 <col:46> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x55fb42113110 <col:46> 'const char *' lvalue ParmVar 0x55fb421cb908 'ep' 'const char *'
    `-IntegerLiteral 0x55fb42113138 <col:49> 'int' 1
return [B3.11];
   Preds (1): B1
   Succs (1): B0

 [B4]
  case '%':
   1: DeclRefExpr 0x55fb42112dd0 <lstrlib.c:271:24> 'int (int, int)' Function 0x55fb421c6f88 'match_class' 'int (int, int)'
match_class
   2: ImplicitCastExpr 0x55fb42112fb0 <lstrlib.c:271:24> 'int (*)(int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55fb42112dd0 <col:24> 'int (int, int)' Function 0x55fb421c6f88 'match_class' 'int (int, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
   3: DeclRefExpr 0x55fb42112df8 <lstrlib.c:271:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
c
   4: ImplicitCastExpr 0x55fb42113000 <lstrlib.c:271:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb42112df8 <col:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x55fb42112e20 <lstrlib.c:271:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
p
   6: ImplicitCastExpr 0x55fb42112e68 <lstrlib.c:271:47> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
[B4.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: IntegerLiteral 0x55fb42112e48 <lstrlib.c:271:49> 'int' 1
1
   8: BinaryOperator 0x55fb42112e80 <lstrlib.c:271:47, col:49> 'const char *' '+'
|-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
`-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
[B4.6] + [B4.7]
   9: UnaryOperator 0x55fb42112ec8 <lstrlib.c:271:45, col:50> 'const char' lvalue prefix '*'
`-ParenExpr 0x55fb42112ea8 <col:46, col:50> 'const char *'
  `-BinaryOperator 0x55fb42112e80 <col:47, col:49> 'const char *' '+'
    |-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
    `-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
*([B4.8])
  10: ImplicitCastExpr 0x55fb42112f50 <lstrlib.c:24:41, col:43> 'char' <LValueToRValue>
`-ParenExpr 0x55fb42112f30 <col:41, col:43> 'const char' lvalue
  `-UnaryOperator 0x55fb42112ec8 <line:271:45, col:50> 'const char' lvalue prefix '*'
    `-ParenExpr 0x55fb42112ea8 <col:46, col:50> 'const char *'
      `-BinaryOperator 0x55fb42112e80 <col:47, col:49> 'const char *' '+'
        |-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
        | `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
        `-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
([B4.9]) (ImplicitCastExpr, LValueToRValue, char)
  11: CStyleCastExpr 0x55fb42112f68 <lstrlib.c:24:26, col:43> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x55fb42112f50 <col:41, col:43> 'char' <LValueToRValue>
  `-ParenExpr 0x55fb42112f30 <col:41, col:43> 'const char' lvalue
    `-UnaryOperator 0x55fb42112ec8 <line:271:45, col:50> 'const char' lvalue prefix '*'
      `-ParenExpr 0x55fb42112ea8 <col:46, col:50> 'const char *'
        `-BinaryOperator 0x55fb42112e80 <col:47, col:49> 'const char *' '+'
          |-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
          | `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
          `-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
(unsigned char)[B4.10] (CStyleCastExpr, IntegralCast, unsigned char)
  12: ImplicitCastExpr 0x55fb42113018 <lstrlib.c:24:25, col:44> 'int' <IntegralCast>
`-ParenExpr 0x55fb42112f90 <col:25, col:44> 'unsigned char'
  `-CStyleCastExpr 0x55fb42112f68 <col:26, col:43> 'unsigned char' <IntegralCast>
    `-ImplicitCastExpr 0x55fb42112f50 <col:41, col:43> 'char' <LValueToRValue>
      `-ParenExpr 0x55fb42112f30 <col:41, col:43> 'const char' lvalue
        `-UnaryOperator 0x55fb42112ec8 <line:271:45, col:50> 'const char' lvalue prefix '*'
          `-ParenExpr 0x55fb42112ea8 <col:46, col:50> 'const char *'
            `-BinaryOperator 0x55fb42112e80 <col:47, col:49> 'const char *' '+'
              |-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
              | `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
              `-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
([B4.11]) (ImplicitCastExpr, IntegralCast, int)
  13: CallExpr 0x55fb42112fc8 <lstrlib.c:271:24, col:52> 'int'
|-ImplicitCastExpr 0x55fb42112fb0 <col:24> 'int (*)(int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55fb42112dd0 <col:24> 'int (int, int)' Function 0x55fb421c6f88 'match_class' 'int (int, int)'
|-ImplicitCastExpr 0x55fb42113000 <col:36> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55fb42112df8 <col:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
`-ImplicitCastExpr 0x55fb42113018 <line:24:25, col:44> 'int' <IntegralCast>
  `-ParenExpr 0x55fb42112f90 <col:25, col:44> 'unsigned char'
    `-CStyleCastExpr 0x55fb42112f68 <col:26, col:43> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x55fb42112f50 <col:41, col:43> 'char' <LValueToRValue>
        `-ParenExpr 0x55fb42112f30 <col:41, col:43> 'const char' lvalue
          `-UnaryOperator 0x55fb42112ec8 <line:271:45, col:50> 'const char' lvalue prefix '*'
            `-ParenExpr 0x55fb42112ea8 <col:46, col:50> 'const char *'
              `-BinaryOperator 0x55fb42112e80 <col:47, col:49> 'const char *' '+'
                |-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
                | `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
                `-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
[B4.2]([B4.4], [B4.12])
  14: ReturnStmt 0x55fb42113030 <lstrlib.c:271:17, col:52>
`-CallExpr 0x55fb42112fc8 <col:24, col:52> 'int'
  |-ImplicitCastExpr 0x55fb42112fb0 <col:24> 'int (*)(int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55fb42112dd0 <col:24> 'int (int, int)' Function 0x55fb421c6f88 'match_class' 'int (int, int)'
  |-ImplicitCastExpr 0x55fb42113000 <col:36> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55fb42112df8 <col:36> 'int' lvalue ParmVar 0x55fb421cb818 'c' 'int'
  `-ImplicitCastExpr 0x55fb42113018 <line:24:25, col:44> 'int' <IntegralCast>
    `-ParenExpr 0x55fb42112f90 <col:25, col:44> 'unsigned char'
      `-CStyleCastExpr 0x55fb42112f68 <col:26, col:43> 'unsigned char' <IntegralCast>
        `-ImplicitCastExpr 0x55fb42112f50 <col:41, col:43> 'char' <LValueToRValue>
          `-ParenExpr 0x55fb42112f30 <col:41, col:43> 'const char' lvalue
            `-UnaryOperator 0x55fb42112ec8 <line:271:45, col:50> 'const char' lvalue prefix '*'
              `-ParenExpr 0x55fb42112ea8 <col:46, col:50> 'const char *'
                `-BinaryOperator 0x55fb42112e80 <col:47, col:49> 'const char *' '+'
                  |-ImplicitCastExpr 0x55fb42112e68 <col:47> 'const char *' <LValueToRValue>
                  | `-DeclRefExpr 0x55fb42112e20 <col:47> 'const char *' lvalue ParmVar 0x55fb421cb890 'p' 'const char *'
                  `-IntegerLiteral 0x55fb42112e48 <col:49> 'int' 1
return [B4.13];
   Preds (1): B1
   Succs (1): B0

 [B5]
  case '.':
   1: IntegerLiteral 0x55fb42112d48 <lstrlib.c:270:22> 'int' 1
1
   2: ReturnStmt 0x55fb42112d68 <lstrlib.c:270:15, col:22>
`-IntegerLiteral 0x55fb42112d48 <col:22> 'int' 1
return [B5.1];
   Preds (1): B1
   Succs (1): B0

 [B0 (EXIT)]
   Preds (4): B2 B3 B4 B5
