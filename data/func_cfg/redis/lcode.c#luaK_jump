int luaK_jump(FuncState *fs)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x5637768ad608 <lcode.c:60:13> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768ad630 <lcode.c:60:13> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ad608 <col:13> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768ad648 <lcode.c:60:13, col:17> 'int' lvalue ->jpc 0x56377687e208
`-ImplicitCastExpr 0x5637768ad630 <col:13> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ad608 <col:13> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.2]->jpc
   4: ImplicitCastExpr 0x5637768ad680 <lcode.c:60:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ad648 <col:13, col:17> 'int' lvalue ->jpc 0x56377687e208
  `-ImplicitCastExpr 0x5637768ad630 <col:13> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768ad608 <col:13> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x5637768ad698 <lcode.c:60:3, col:20>col:7
`-VarDecl 0x5637768ad5a8 <col:3, col:17> col:7 used jpc 'int' cinit
  `-ImplicitCastExpr 0x5637768ad680 <col:13, col:17> 'int' <LValueToRValue>
    `-MemberExpr 0x5637768ad648 <col:13, col:17> 'int' lvalue ->jpc 0x56377687e208
      `-ImplicitCastExpr 0x5637768ad630 <col:13> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768ad608 <col:13> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
int jpc = fs->jpc;
   6: DeclStmt 0x5637768ad728 <lcode.c:61:3, col:8>col:7
`-VarDecl 0x5637768ad6c8 <col:3, col:7> col:7 used j 'int'
int j;
   7: IntegerLiteral 0x5637768ad7b8 <./lcode.h:20:19> 'int' 1
1
   8: UnaryOperator 0x5637768ad7d8 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768ad7b8 <col:19> 'int' 1
-[B1.7]
   9: DeclRefExpr 0x5637768ad740 <lcode.c:62:3> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x5637768ad768 <lcode.c:62:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ad740 <col:3> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: MemberExpr 0x5637768ad780 <lcode.c:62:3, col:7> 'int' lvalue ->jpc 0x56377687e208
`-ImplicitCastExpr 0x5637768ad768 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ad740 <col:3> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.10]->jpc
  12: BinaryOperator 0x5637768ad818 <lcode.c:62:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768ad780 <lcode.c:62:3, col:7> 'int' lvalue ->jpc 0x56377687e208
| `-ImplicitCastExpr 0x5637768ad768 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768ad740 <col:3> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
`-ParenExpr 0x5637768ad7f8 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768ad7d8 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768ad7b8 <col:19> 'int' 1
[B1.11] = ([B1.8])
  13: DeclRefExpr 0x5637768ad868 <./lcode.h:41:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
  14: ImplicitCastExpr 0x5637768adbc8 <./lcode.h:41:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ad868 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B1.13] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
  15: DeclRefExpr 0x5637768ad890 <lcode.c:63:21> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
fs
  16: ImplicitCastExpr 0x5637768adc28 <lcode.c:63:21> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ad890 <col:21> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.15] (ImplicitCastExpr, LValueToRValue, FuncState *)
  17: DeclRefExpr 0x5637768ad8b8 <lcode.c:63:25> 'int' EnumConstant 0x56377686bb10 'OP_JMP' 'int'
OP_JMP
  18: ImplicitCastExpr 0x5637768adc40 <lcode.c:63:25> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ad8b8 <col:25> 'int' EnumConstant 0x56377686bb10 'OP_JMP' 'int'
[B1.17] (ImplicitCastExpr, IntegralCast, OpCode)
  19: IntegerLiteral 0x5637768ad8e0 <lcode.c:63:33> 'int' 0
0
  20: IntegerLiteral 0x5637768ad900 <./lcode.h:20:19> 'int' 1
1
  21: UnaryOperator 0x5637768ad920 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768ad900 <col:19> 'int' 1
-[B1.20]
  22: IntegerLiteral 0x5637768ad980 <./lopcodes.h:57:28> 'int' 1
1
  23: IntegerLiteral 0x5637768ad9a0 <./lopcodes.h:37:17> 'int' 9
9
  24: IntegerLiteral 0x5637768ad9c0 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5637768ad9e0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
[B1.23] + [B1.24]
  26: BinaryOperator 0x5637768ada28 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
`-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
[B1.22] << ([B1.25])
  27: IntegerLiteral 0x5637768ada70 <./lopcodes.h:57:40> 'int' 1
1
  28: BinaryOperator 0x5637768ada90 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5637768ada50 <col:27, col:38> 'int'
| `-BinaryOperator 0x5637768ada28 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
|   `-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768ada70 <line:57:40> 'int' 1
([B1.26]) - [B1.27]
  29: IntegerLiteral 0x5637768adad8 <./lopcodes.h:58:39> 'int' 1
1
  30: BinaryOperator 0x5637768adaf8 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5637768adab8 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5637768ada90 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5637768ada50 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5637768ada28 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5637768ada70 <line:57:40> 'int' 1
`-IntegerLiteral 0x5637768adad8 <line:58:39> 'int' 1
([B1.28]) >> [B1.29]
  31: BinaryOperator 0x5637768adb40 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
|-ParenExpr 0x5637768ad960 <./lcode.h:41:55, col:59> 'int'
| `-ParenExpr 0x5637768ad940 <line:20:17, col:20> 'int'
|   `-UnaryOperator 0x5637768ad920 <col:18, col:19> 'int' prefix '-'
|     `-IntegerLiteral 0x5637768ad900 <col:19> 'int' 1
`-ParenExpr 0x5637768adb20 <./lopcodes.h:58:27, col:40> 'int'
  `-BinaryOperator 0x5637768adaf8 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5637768adab8 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5637768ada90 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5637768ada50 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5637768ada28 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5637768ada70 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5637768adad8 <line:58:39> 'int' 1
(([B1.21])) + ([B1.30])
  32: ImplicitCastExpr 0x5637768adc58 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
`-BinaryOperator 0x5637768adb40 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
  |-ParenExpr 0x5637768ad960 <./lcode.h:41:55, col:59> 'int'
  | `-ParenExpr 0x5637768ad940 <line:20:17, col:20> 'int'
  |   `-UnaryOperator 0x5637768ad920 <col:18, col:19> 'int' prefix '-'
  |     `-IntegerLiteral 0x5637768ad900 <col:19> 'int' 1
  `-ParenExpr 0x5637768adb20 <./lopcodes.h:58:27, col:40> 'int'
    `-BinaryOperator 0x5637768adaf8 <line:57:26, line:58:39> 'int' '>>'
      |-ParenExpr 0x5637768adab8 <line:57:26, col:41> 'int'
      | `-BinaryOperator 0x5637768ada90 <col:27, col:40> 'int' '-'
      |   |-ParenExpr 0x5637768ada50 <col:27, col:38> 'int'
      |   | `-BinaryOperator 0x5637768ada28 <col:28, line:39:34> 'int' '<<'
      |   |   |-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
      |   |   `-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
      |   |     `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
      |   |       |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
      |   |       `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
      |   `-IntegerLiteral 0x5637768ada70 <line:57:40> 'int' 1
      `-IntegerLiteral 0x5637768adad8 <line:58:39> 'int' 1
[B1.31] (ImplicitCastExpr, IntegralCast, unsigned int)
  33: CallExpr 0x5637768adbe0 <./lcode.h:41:35, col:71> 'int'
|-ImplicitCastExpr 0x5637768adbc8 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ad868 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x5637768adc28 <lcode.c:63:21> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ad890 <col:21> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768adc40 <col:25> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ad8b8 <col:25> 'int' EnumConstant 0x56377686bb10 'OP_JMP' 'int'
|-IntegerLiteral 0x5637768ad8e0 <col:33> 'int' 0
`-ImplicitCastExpr 0x5637768adc58 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
  `-BinaryOperator 0x5637768adb40 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
    |-ParenExpr 0x5637768ad960 <./lcode.h:41:55, col:59> 'int'
    | `-ParenExpr 0x5637768ad940 <line:20:17, col:20> 'int'
    |   `-UnaryOperator 0x5637768ad920 <col:18, col:19> 'int' prefix '-'
    |     `-IntegerLiteral 0x5637768ad900 <col:19> 'int' 1
    `-ParenExpr 0x5637768adb20 <./lopcodes.h:58:27, col:40> 'int'
      `-BinaryOperator 0x5637768adaf8 <line:57:26, line:58:39> 'int' '>>'
        |-ParenExpr 0x5637768adab8 <line:57:26, col:41> 'int'
        | `-BinaryOperator 0x5637768ada90 <col:27, col:40> 'int' '-'
        |   |-ParenExpr 0x5637768ada50 <col:27, col:38> 'int'
        |   | `-BinaryOperator 0x5637768ada28 <col:28, line:39:34> 'int' '<<'
        |   |   |-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
        |   |   `-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
        |   |     `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
        |   |       |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
        |   |       `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
        |   `-IntegerLiteral 0x5637768ada70 <line:57:40> 'int' 1
        `-IntegerLiteral 0x5637768adad8 <line:58:39> 'int' 1
[B1.14]([B1.16], [B1.18], [B1.19], [B1.32])
  34: DeclRefExpr 0x5637768ad840 <lcode.c:63:3> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
j
  35: BinaryOperator 0x5637768adc70 <lcode.c:63:3, ./lcode.h:41:71> 'int' '='
|-DeclRefExpr 0x5637768ad840 <lcode.c:63:3> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
`-CallExpr 0x5637768adbe0 <./lcode.h:41:35, col:71> 'int'
  |-ImplicitCastExpr 0x5637768adbc8 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768ad868 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
  |-ImplicitCastExpr 0x5637768adc28 <lcode.c:63:21> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768ad890 <col:21> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768adc40 <col:25> 'OpCode':'OpCode' <IntegralCast>
  | `-DeclRefExpr 0x5637768ad8b8 <col:25> 'int' EnumConstant 0x56377686bb10 'OP_JMP' 'int'
  |-IntegerLiteral 0x5637768ad8e0 <col:33> 'int' 0
  `-ImplicitCastExpr 0x5637768adc58 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
    `-BinaryOperator 0x5637768adb40 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
      |-ParenExpr 0x5637768ad960 <./lcode.h:41:55, col:59> 'int'
      | `-ParenExpr 0x5637768ad940 <line:20:17, col:20> 'int'
      |   `-UnaryOperator 0x5637768ad920 <col:18, col:19> 'int' prefix '-'
      |     `-IntegerLiteral 0x5637768ad900 <col:19> 'int' 1
      `-ParenExpr 0x5637768adb20 <./lopcodes.h:58:27, col:40> 'int'
        `-BinaryOperator 0x5637768adaf8 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5637768adab8 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5637768ada90 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5637768ada50 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5637768ada28 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5637768ad980 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5637768ada08 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5637768ad9e0 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5637768ad9a0 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5637768ad9c0 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5637768ada70 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5637768adad8 <line:58:39> 'int' 1
[B1.34] = [B1.33]
  36: DeclRefExpr 0x5637768adc98 <lcode.c:64:3> 'void (FuncState *, int *, int)' Function 0x5637767eab40 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
  37: ImplicitCastExpr 0x5637768addb8 <lcode.c:64:3> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768adc98 <col:3> 'void (FuncState *, int *, int)' Function 0x5637767eab40 'luaK_concat' 'void (FuncState *, int *, int)'
[B1.36] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
  38: DeclRefExpr 0x5637768adcc0 <lcode.c:64:15> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
fs
  39: ImplicitCastExpr 0x5637768ade10 <lcode.c:64:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768adcc0 <col:15> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
[B1.38] (ImplicitCastExpr, LValueToRValue, FuncState *)
  40: DeclRefExpr 0x5637768adce8 <lcode.c:64:20> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
j
  41: UnaryOperator 0x5637768add10 <lcode.c:64:19, col:20> 'int *' prefix '&'
`-DeclRefExpr 0x5637768adce8 <col:20> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
&[B1.40]
  42: DeclRefExpr 0x5637768add30 <lcode.c:64:23> 'int' lvalue Var 0x5637768ad5a8 'jpc' 'int'
jpc
  43: ImplicitCastExpr 0x5637768ade28 <lcode.c:64:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768add30 <col:23> 'int' lvalue Var 0x5637768ad5a8 'jpc' 'int'
[B1.42] (ImplicitCastExpr, LValueToRValue, int)
  44: CallExpr 0x5637768addd0 <lcode.c:64:3, col:26> 'void'
|-ImplicitCastExpr 0x5637768addb8 <col:3> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768adc98 <col:3> 'void (FuncState *, int *, int)' Function 0x5637767eab40 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x5637768ade10 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768adcc0 <col:15> 'FuncState *' lvalue ParmVar 0x5637768ad410 'fs' 'FuncState *'
|-UnaryOperator 0x5637768add10 <col:19, col:20> 'int *' prefix '&'
| `-DeclRefExpr 0x5637768adce8 <col:20> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
`-ImplicitCastExpr 0x5637768ade28 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768add30 <col:23> 'int' lvalue Var 0x5637768ad5a8 'jpc' 'int'
[B1.37]([B1.39], [B1.41], [B1.43])
  45: DeclRefExpr 0x5637768ade40 <lcode.c:65:10> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
j
  46: ImplicitCastExpr 0x5637768ade68 <lcode.c:65:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ade40 <col:10> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
[B1.45] (ImplicitCastExpr, LValueToRValue, int)
  47: ReturnStmt 0x5637768ade80 <lcode.c:65:3, col:10>
`-ImplicitCastExpr 0x5637768ade68 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768ade40 <col:10> 'int' lvalue Var 0x5637768ad6c8 'j' 'int'
return [B1.46];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
