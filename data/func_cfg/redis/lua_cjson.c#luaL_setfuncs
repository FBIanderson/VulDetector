static void luaL_setfuncs(lua_State *l, const luaL_Reg *reg, int nup)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x563107e31460 <./lua.h:254:23> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x563107d508e0 'lua_settop' 'void (lua_State *, int)':'void (lua_State *, int)'
lua_settop
   2: ImplicitCastExpr 0x563107e31578 <./lua.h:254:23> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563107e31460 <col:23> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x563107d508e0 'lua_settop' 'void (lua_State *, int)':'void (lua_State *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int))
   3: DeclRefExpr 0x563107e31488 <lua_cjson.c:1311:13> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
l
   4: ImplicitCastExpr 0x563107e315c8 <lua_cjson.c:1311:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563107e31488 <col:13> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x563107e314b0 <lua_cjson.c:1311:16> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
nup
   6: ImplicitCastExpr 0x563107e314f8 <./lua.h:254:38, col:40> 'int' <LValueToRValue>
`-ParenExpr 0x563107e314d8 <col:38, col:40> 'int' lvalue
  `-DeclRefExpr 0x563107e314b0 <lua_cjson.c:1311:16> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
([B1.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: UnaryOperator 0x563107e31510 <./lua.h:254:37, col:40> 'int' prefix '-'
`-ImplicitCastExpr 0x563107e314f8 <col:38, col:40> 'int' <LValueToRValue>
  `-ParenExpr 0x563107e314d8 <col:38, col:40> 'int' lvalue
    `-DeclRefExpr 0x563107e314b0 <lua_cjson.c:1311:16> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
-[B1.6]
   8: IntegerLiteral 0x563107e31530 <./lua.h:254:42> 'int' 1
1
   9: BinaryOperator 0x563107e31550 <./lua.h:254:37, col:42> 'int' '-'
|-UnaryOperator 0x563107e31510 <col:37, col:40> 'int' prefix '-'
| `-ImplicitCastExpr 0x563107e314f8 <col:38, col:40> 'int' <LValueToRValue>
|   `-ParenExpr 0x563107e314d8 <col:38, col:40> 'int' lvalue
|     `-DeclRefExpr 0x563107e314b0 <lua_cjson.c:1311:16> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
`-IntegerLiteral 0x563107e31530 <./lua.h:254:42> 'int' 1
[B1.7] - [B1.8]
  10: CallExpr 0x563107e31590 <./lua.h:254:23, col:43> 'void'
|-ImplicitCastExpr 0x563107e31578 <col:23> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563107e31460 <col:23> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x563107d508e0 'lua_settop' 'void (lua_State *, int)':'void (lua_State *, int)'
|-ImplicitCastExpr 0x563107e315c8 <lua_cjson.c:1311:13> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563107e31488 <col:13> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
`-BinaryOperator 0x563107e31550 <./lua.h:254:37, col:42> 'int' '-'
  |-UnaryOperator 0x563107e31510 <col:37, col:40> 'int' prefix '-'
  | `-ImplicitCastExpr 0x563107e314f8 <col:38, col:40> 'int' <LValueToRValue>
  |   `-ParenExpr 0x563107e314d8 <col:38, col:40> 'int' lvalue
  |     `-DeclRefExpr 0x563107e314b0 <lua_cjson.c:1311:16> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
  `-IntegerLiteral 0x563107e31530 <./lua.h:254:42> 'int' 1
[B1.2]([B1.4], [B1.9])
   Preds (1): B8
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x563107e30d60 <lua_cjson.c:1305:31> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
reg
   2: UnaryOperator 0x563107e30d88 <lua_cjson.c:1305:31, col:34> 'const luaL_Reg *' postfix '++'
`-DeclRefExpr 0x563107e30d60 <col:31> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: DeclRefExpr 0x563107e31058 <lua_cjson.c:1308:9> 'void (lua_State *, lua_CFunction, int)':'void (lua_State *, lua_CFunction, int)' Function 0x563107d57a88 'lua_pushcclosure' 'void (lua_State *, lua_CFunction, int)':'void (lua_State *, lua_CFunction, int)'
lua_pushcclosure
   2: ImplicitCastExpr 0x563107e31148 <lua_cjson.c:1308:9> 'void (*)(lua_State *, lua_CFunction, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563107e31058 <col:9> 'void (lua_State *, lua_CFunction, int)':'void (lua_State *, lua_CFunction, int)' Function 0x563107d57a88 'lua_pushcclosure' 'void (lua_State *, lua_CFunction, int)':'void (lua_State *, lua_CFunction, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, lua_CFunction, int))
   3: DeclRefExpr 0x563107e31080 <lua_cjson.c:1308:26> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
l
   4: ImplicitCastExpr 0x563107e311a0 <lua_cjson.c:1308:26> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563107e31080 <col:26> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
[B3.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x563107e310a8 <lua_cjson.c:1308:29> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
reg
   6: ImplicitCastExpr 0x563107e310d0 <lua_cjson.c:1308:29> 'const luaL_Reg *' <LValueToRValue>
`-DeclRefExpr 0x563107e310a8 <col:29> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.5] (ImplicitCastExpr, LValueToRValue, const luaL_Reg *)
   7: MemberExpr 0x563107e310e8 <lua_cjson.c:1308:29, col:34> 'const lua_CFunction':'int (*const)(lua_State *)' lvalue ->func 0x563107d8b380
`-ImplicitCastExpr 0x563107e310d0 <col:29> 'const luaL_Reg *' <LValueToRValue>
  `-DeclRefExpr 0x563107e310a8 <col:29> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.6]->func
   8: ImplicitCastExpr 0x563107e311b8 <lua_cjson.c:1308:29, col:34> 'lua_CFunction':'int (*)(lua_State *)' <LValueToRValue>
`-MemberExpr 0x563107e310e8 <col:29, col:34> 'const lua_CFunction':'int (*const)(lua_State *)' lvalue ->func 0x563107d8b380
  `-ImplicitCastExpr 0x563107e310d0 <col:29> 'const luaL_Reg *' <LValueToRValue>
    `-DeclRefExpr 0x563107e310a8 <col:29> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.7] (ImplicitCastExpr, LValueToRValue, lua_CFunction)
   9: DeclRefExpr 0x563107e31120 <lua_cjson.c:1308:40> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
nup
  10: ImplicitCastExpr 0x563107e311d0 <lua_cjson.c:1308:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x563107e31120 <col:40> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: CallExpr 0x563107e31160 <lua_cjson.c:1308:9, col:43> 'void'
|-ImplicitCastExpr 0x563107e31148 <col:9> 'void (*)(lua_State *, lua_CFunction, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563107e31058 <col:9> 'void (lua_State *, lua_CFunction, int)':'void (lua_State *, lua_CFunction, int)' Function 0x563107d57a88 'lua_pushcclosure' 'void (lua_State *, lua_CFunction, int)':'void (lua_State *, lua_CFunction, int)'
|-ImplicitCastExpr 0x563107e311a0 <col:26> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563107e31080 <col:26> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
|-ImplicitCastExpr 0x563107e311b8 <col:29, col:34> 'lua_CFunction':'int (*)(lua_State *)' <LValueToRValue>
| `-MemberExpr 0x563107e310e8 <col:29, col:34> 'const lua_CFunction':'int (*const)(lua_State *)' lvalue ->func 0x563107d8b380
|   `-ImplicitCastExpr 0x563107e310d0 <col:29> 'const luaL_Reg *' <LValueToRValue>
|     `-DeclRefExpr 0x563107e310a8 <col:29> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
`-ImplicitCastExpr 0x563107e311d0 <col:40> 'int' <LValueToRValue>
  `-DeclRefExpr 0x563107e31120 <col:40> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B3.2]([B3.4], [B3.8], [B3.10])
  12: DeclRefExpr 0x563107e311e8 <lua_cjson.c:1309:9> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x563107d59730 'lua_setfield' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
lua_setfield
  13: ImplicitCastExpr 0x563107e31378 <lua_cjson.c:1309:9> 'void (*)(lua_State *, int, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563107e311e8 <col:9> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x563107d59730 'lua_setfield' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
[B3.12] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int, const char *))
  14: DeclRefExpr 0x563107e31210 <lua_cjson.c:1309:22> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
l
  15: ImplicitCastExpr 0x563107e313d0 <lua_cjson.c:1309:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563107e31210 <col:22> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
[B3.14] (ImplicitCastExpr, LValueToRValue, lua_State *)
  16: DeclRefExpr 0x563107e31238 <lua_cjson.c:1309:27> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
nup
  17: ImplicitCastExpr 0x563107e31280 <lua_cjson.c:1309:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x563107e31238 <col:27> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: IntegerLiteral 0x563107e31260 <lua_cjson.c:1309:33> 'int' 2
2
  19: BinaryOperator 0x563107e31298 <lua_cjson.c:1309:27, col:33> 'int' '+'
|-ImplicitCastExpr 0x563107e31280 <col:27> 'int' <LValueToRValue>
| `-DeclRefExpr 0x563107e31238 <col:27> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
`-IntegerLiteral 0x563107e31260 <col:33> 'int' 2
[B3.17] + [B3.18]
  20: UnaryOperator 0x563107e312e0 <lua_cjson.c:1309:25, col:34> 'int' prefix '-'
`-ParenExpr 0x563107e312c0 <col:26, col:34> 'int'
  `-BinaryOperator 0x563107e31298 <col:27, col:33> 'int' '+'
    |-ImplicitCastExpr 0x563107e31280 <col:27> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x563107e31238 <col:27> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
    `-IntegerLiteral 0x563107e31260 <col:33> 'int' 2
-([B3.19])
  21: DeclRefExpr 0x563107e31300 <lua_cjson.c:1309:37> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
reg
  22: ImplicitCastExpr 0x563107e31328 <lua_cjson.c:1309:37> 'const luaL_Reg *' <LValueToRValue>
`-DeclRefExpr 0x563107e31300 <col:37> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.21] (ImplicitCastExpr, LValueToRValue, const luaL_Reg *)
  23: MemberExpr 0x563107e31340 <lua_cjson.c:1309:37, col:42> 'const char *const' lvalue ->name 0x563107d8b328
`-ImplicitCastExpr 0x563107e31328 <col:37> 'const luaL_Reg *' <LValueToRValue>
  `-DeclRefExpr 0x563107e31300 <col:37> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.22]->name
  24: ImplicitCastExpr 0x563107e313e8 <lua_cjson.c:1309:37, col:42> 'const char *' <LValueToRValue>
`-MemberExpr 0x563107e31340 <col:37, col:42> 'const char *const' lvalue ->name 0x563107d8b328
  `-ImplicitCastExpr 0x563107e31328 <col:37> 'const luaL_Reg *' <LValueToRValue>
    `-DeclRefExpr 0x563107e31300 <col:37> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.23] (ImplicitCastExpr, LValueToRValue, const char *)
  25: CallExpr 0x563107e31390 <lua_cjson.c:1309:9, col:46> 'void'
|-ImplicitCastExpr 0x563107e31378 <col:9> 'void (*)(lua_State *, int, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563107e311e8 <col:9> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x563107d59730 'lua_setfield' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
|-ImplicitCastExpr 0x563107e313d0 <col:22> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563107e31210 <col:22> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
|-UnaryOperator 0x563107e312e0 <col:25, col:34> 'int' prefix '-'
| `-ParenExpr 0x563107e312c0 <col:26, col:34> 'int'
|   `-BinaryOperator 0x563107e31298 <col:27, col:33> 'int' '+'
|     |-ImplicitCastExpr 0x563107e31280 <col:27> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563107e31238 <col:27> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
|     `-IntegerLiteral 0x563107e31260 <col:33> 'int' 2
`-ImplicitCastExpr 0x563107e313e8 <col:37, col:42> 'const char *' <LValueToRValue>
  `-MemberExpr 0x563107e31340 <col:37, col:42> 'const char *const' lvalue ->name 0x563107d8b328
    `-ImplicitCastExpr 0x563107e31328 <col:37> 'const luaL_Reg *' <LValueToRValue>
      `-DeclRefExpr 0x563107e31300 <col:37> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B3.13]([B3.15], [B3.20], [B3.24])
   Preds (1): B6
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x563107e30ec0 <lua_cjson.c:1306:30> 'int' lvalue Var 0x563107e30a10 'i' 'int'
i
   2: UnaryOperator 0x563107e30ee8 <lua_cjson.c:1306:30, col:31> 'int' postfix '++'
`-DeclRefExpr 0x563107e30ec0 <col:30> 'int' lvalue Var 0x563107e30a10 'i' 'int'
[B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: DeclRefExpr 0x563107e30f08 <lua_cjson.c:1307:13> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x563107d50ab0 'lua_pushvalue' 'void (lua_State *, int)':'void (lua_State *, int)'
lua_pushvalue
   2: ImplicitCastExpr 0x563107e30fb8 <lua_cjson.c:1307:13> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563107e30f08 <col:13> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x563107d50ab0 'lua_pushvalue' 'void (lua_State *, int)':'void (lua_State *, int)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int))
   3: DeclRefExpr 0x563107e30f30 <lua_cjson.c:1307:27> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
l
   4: ImplicitCastExpr 0x563107e31008 <lua_cjson.c:1307:27> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563107e30f30 <col:27> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
[B5.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x563107e30f58 <lua_cjson.c:1307:31> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
nup
   6: ImplicitCastExpr 0x563107e30f80 <lua_cjson.c:1307:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x563107e30f58 <col:31> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B5.5] (ImplicitCastExpr, LValueToRValue, int)
   7: UnaryOperator 0x563107e30f98 <lua_cjson.c:1307:30, col:31> 'int' prefix '-'
`-ImplicitCastExpr 0x563107e30f80 <col:31> 'int' <LValueToRValue>
  `-DeclRefExpr 0x563107e30f58 <col:31> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
-[B5.6]
   8: CallExpr 0x563107e30fd0 <lua_cjson.c:1307:13, col:34> 'void'
|-ImplicitCastExpr 0x563107e30fb8 <col:13> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563107e30f08 <col:13> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x563107d50ab0 'lua_pushvalue' 'void (lua_State *, int)':'void (lua_State *, int)'
|-ImplicitCastExpr 0x563107e31008 <col:27> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563107e30f30 <col:27> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
`-UnaryOperator 0x563107e30f98 <col:30, col:31> 'int' prefix '-'
  `-ImplicitCastExpr 0x563107e30f80 <col:31> 'int' <LValueToRValue>
    `-DeclRefExpr 0x563107e30f58 <col:31> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B5.2]([B5.4], [B5.7])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x563107e30e18 <lua_cjson.c:1306:21> 'int' lvalue Var 0x563107e30a10 'i' 'int'
i
   2: ImplicitCastExpr 0x563107e30e68 <lua_cjson.c:1306:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x563107e30e18 <col:21> 'int' lvalue Var 0x563107e30a10 'i' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x563107e30e40 <lua_cjson.c:1306:25> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
nup
   4: ImplicitCastExpr 0x563107e30e80 <lua_cjson.c:1306:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x563107e30e40 <col:25> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x563107e30e98 <lua_cjson.c:1306:21, col:25> 'int' '<'
|-ImplicitCastExpr 0x563107e30e68 <col:21> 'int' <LValueToRValue>
| `-DeclRefExpr 0x563107e30e18 <col:21> 'int' lvalue Var 0x563107e30a10 'i' 'int'
`-ImplicitCastExpr 0x563107e30e80 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x563107e30e40 <col:25> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: IntegerLiteral 0x563107e30dd0 <lua_cjson.c:1306:18> 'int' 0
0
   2: DeclRefExpr 0x563107e30da8 <lua_cjson.c:1306:14> 'int' lvalue Var 0x563107e30a10 'i' 'int'
i
   3: BinaryOperator 0x563107e30df0 <lua_cjson.c:1306:14, col:18> 'int' '='
|-DeclRefExpr 0x563107e30da8 <col:14> 'int' lvalue Var 0x563107e30a10 'i' 'int'
`-IntegerLiteral 0x563107e30dd0 <col:18> 'int' 0
[B7.2] = [B7.1]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x563107e30c10 <lua_cjson.c:1305:12> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
reg
   2: ImplicitCastExpr 0x563107e30c38 <lua_cjson.c:1305:12> 'const luaL_Reg *' <LValueToRValue>
`-DeclRefExpr 0x563107e30c10 <col:12> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B8.1] (ImplicitCastExpr, LValueToRValue, const luaL_Reg *)
   3: MemberExpr 0x563107e30c50 <lua_cjson.c:1305:12, col:17> 'const char *const' lvalue ->name 0x563107d8b328
`-ImplicitCastExpr 0x563107e30c38 <col:12> 'const luaL_Reg *' <LValueToRValue>
  `-DeclRefExpr 0x563107e30c10 <col:12> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B8.2]->name
   4: ImplicitCastExpr 0x563107e30d08 <lua_cjson.c:1305:12, col:17> 'const char *' <LValueToRValue>
`-MemberExpr 0x563107e30c50 <col:12, col:17> 'const char *const' lvalue ->name 0x563107d8b328
  `-ImplicitCastExpr 0x563107e30c38 <col:12> 'const luaL_Reg *' <LValueToRValue>
    `-DeclRefExpr 0x563107e30c10 <col:12> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
[B8.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: IntegerLiteral 0x563107e30c88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   6: CStyleCastExpr 0x563107e30cc0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x563107e30c88 <col:24> 'int' 0
(void *)[B8.5] (CStyleCastExpr, NullToPointer, void *)
   7: ImplicitCastExpr 0x563107e30d20 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
`-ParenExpr 0x563107e30ce8 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x563107e30cc0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x563107e30c88 <col:24> 'int' 0
([B8.6]) (ImplicitCastExpr, BitCast, const char *)
   8: BinaryOperator 0x563107e30d38 <lua_cjson.c:1305:12, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ImplicitCastExpr 0x563107e30d08 <lua_cjson.c:1305:12, col:17> 'const char *' <LValueToRValue>
| `-MemberExpr 0x563107e30c50 <col:12, col:17> 'const char *const' lvalue ->name 0x563107d8b328
|   `-ImplicitCastExpr 0x563107e30c38 <col:12> 'const luaL_Reg *' <LValueToRValue>
|     `-DeclRefExpr 0x563107e30c10 <col:12> 'const luaL_Reg *' lvalue ParmVar 0x563107e30790 'reg' 'const luaL_Reg *'
`-ImplicitCastExpr 0x563107e30d20 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
  `-ParenExpr 0x563107e30ce8 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x563107e30cc0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x563107e30c88 <col:24> 'int' 0
[B8.4] != [B8.7]
   T: for (; [B8.8]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B1

 [B9]
   1: DeclStmt 0x563107e30a70 <lua_cjson.c:1302:5, col:10>col:9
`-VarDecl 0x563107e30a10 <col:5, col:9> col:9 used i 'int'
int i;
   2: DeclRefExpr 0x563107e30a88 <lua_cjson.c:1304:5> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x563107d91fd0 'luaL_checkstack' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
luaL_checkstack
   3: ImplicitCastExpr 0x563107e30b40 <lua_cjson.c:1304:5> 'void (*)(lua_State *, int, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563107e30a88 <col:5> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x563107d91fd0 'luaL_checkstack' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
[B9.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int, const char *))
   4: DeclRefExpr 0x563107e30ab0 <lua_cjson.c:1304:21> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
l
   5: ImplicitCastExpr 0x563107e30bb0 <lua_cjson.c:1304:21> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563107e30ab0 <col:21> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
[B9.4] (ImplicitCastExpr, LValueToRValue, lua_State *)
   6: DeclRefExpr 0x563107e30ad8 <lua_cjson.c:1304:24> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
nup
   7: ImplicitCastExpr 0x563107e30bc8 <lua_cjson.c:1304:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x563107e30ad8 <col:24> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
[B9.6] (ImplicitCastExpr, LValueToRValue, int)
   8: StringLiteral 0x563107e30b00 <lua_cjson.c:1304:29> 'char [18]' lvalue "too many upvalues"
"too many upvalues"
   9: ImplicitCastExpr 0x563107e30be0 <lua_cjson.c:1304:29> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x563107e30b00 <col:29> 'char [18]' lvalue "too many upvalues"
[B9.8] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  10: ImplicitCastExpr 0x563107e30bf8 <lua_cjson.c:1304:29> 'const char *' <BitCast>
`-ImplicitCastExpr 0x563107e30be0 <col:29> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x563107e30b00 <col:29> 'char [18]' lvalue "too many upvalues"
[B9.9] (ImplicitCastExpr, BitCast, const char *)
  11: CallExpr 0x563107e30b70 <lua_cjson.c:1304:5, col:48> 'void'
|-ImplicitCastExpr 0x563107e30b40 <col:5> 'void (*)(lua_State *, int, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563107e30a88 <col:5> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x563107d91fd0 'luaL_checkstack' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
|-ImplicitCastExpr 0x563107e30bb0 <col:21> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563107e30ab0 <col:21> 'lua_State *' lvalue ParmVar 0x563107e30720 'l' 'lua_State *'
|-ImplicitCastExpr 0x563107e30bc8 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x563107e30ad8 <col:24> 'int' lvalue ParmVar 0x563107e30808 'nup' 'int'
`-ImplicitCastExpr 0x563107e30bf8 <col:29> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x563107e30be0 <col:29> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x563107e30b00 <col:29> 'char [18]' lvalue "too many upvalues"
[B9.3]([B9.5], [B9.7], [B9.10])
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (1): B1
