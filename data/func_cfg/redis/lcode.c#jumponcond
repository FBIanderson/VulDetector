static int jumponcond(FuncState *fs, expdesc *e, int cond)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x5637768dae10 <lcode.c:533:3> 'void (FuncState *, expdesc *)' Function 0x5637768cfd20 'discharge2anyreg' 'void (FuncState *, expdesc *)'
discharge2anyreg
   2: ImplicitCastExpr 0x5637768dae88 <lcode.c:533:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dae10 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768cfd20 'discharge2anyreg' 'void (FuncState *, expdesc *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768dae38 <lcode.c:533:20> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768daed8 <lcode.c:533:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dae38 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768dae60 <lcode.c:533:24> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768daef0 <lcode.c:533:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dae60 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768daea0 <lcode.c:533:3, col:25> 'void'
|-ImplicitCastExpr 0x5637768dae88 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dae10 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768cfd20 'discharge2anyreg' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768daed8 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dae38 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768daef0 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dae60 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.2]([B1.4], [B1.6])
   8: DeclRefExpr 0x5637768daf08 <lcode.c:534:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   9: ImplicitCastExpr 0x5637768daf80 <lcode.c:534:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768daf08 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  10: DeclRefExpr 0x5637768daf30 <lcode.c:534:11> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768dafd0 <lcode.c:534:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768daf30 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B1.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768daf58 <lcode.c:534:15> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
e
  13: ImplicitCastExpr 0x5637768dafe8 <lcode.c:534:15> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768daf58 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: CallExpr 0x5637768daf98 <lcode.c:534:3, col:16> 'void'
|-ImplicitCastExpr 0x5637768daf80 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768daf08 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768dafd0 <col:11> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768daf30 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768dafe8 <col:15> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768daf58 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.9]([B1.11], [B1.13])
  15: DeclRefExpr 0x5637768db000 <lcode.c:535:10> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
condjump
  16: ImplicitCastExpr 0x5637768db278 <lcode.c:535:10> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768db000 <col:10> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
[B1.15] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  17: DeclRefExpr 0x5637768db028 <lcode.c:535:19> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
fs
  18: ImplicitCastExpr 0x5637768db2e0 <lcode.c:535:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768db028 <col:19> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B1.17] (ImplicitCastExpr, LValueToRValue, FuncState *)
  19: DeclRefExpr 0x5637768db050 <lcode.c:535:23> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
OP_TESTSET
  20: ImplicitCastExpr 0x5637768db2f8 <lcode.c:535:23> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768db050 <col:23> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
[B1.19] (ImplicitCastExpr, IntegralCast, OpCode)
  21: IntegerLiteral 0x5637768db078 <./lopcodes.h:65:27> 'int' 1
1
  22: IntegerLiteral 0x5637768db098 <./lopcodes.h:40:17> 'int' 8
8
  23: BinaryOperator 0x5637768db0b8 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x5637768db078 <line:65:27> 'int' 1
`-IntegerLiteral 0x5637768db098 <line:40:17> 'int' 8
[B1.21] << [B1.22]
  24: IntegerLiteral 0x5637768db100 <./lopcodes.h:65:38> 'int' 1
1
  25: BinaryOperator 0x5637768db120 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x5637768db0e0 <col:26, col:36> 'int'
| `-BinaryOperator 0x5637768db0b8 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x5637768db078 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x5637768db098 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768db100 <line:65:38> 'int' 1
([B1.23]) - [B1.24]
  26: DeclRefExpr 0x5637768db168 <lcode.c:535:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
e
  27: ImplicitCastExpr 0x5637768db190 <lcode.c:535:43> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.26] (ImplicitCastExpr, LValueToRValue, expdesc *)
  28: MemberExpr 0x5637768db1a8 <lcode.c:535:43, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768db190 <col:43> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.27]->u
  29: MemberExpr 0x5637768db1e0 <lcode.c:535:43, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768db1a8 <col:43, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768db190 <col:43> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.28].s
  30: MemberExpr 0x5637768db218 <lcode.c:535:43, col:50> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768db1e0 <col:43, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768db1a8 <col:43, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768db190 <col:43> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.29].info
  31: ImplicitCastExpr 0x5637768db310 <lcode.c:535:43, col:50> 'int' <LValueToRValue>
`-MemberExpr 0x5637768db218 <col:43, col:50> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768db1e0 <col:43, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768db1a8 <col:43, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768db190 <col:43> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B1.30] (ImplicitCastExpr, LValueToRValue, int)
  32: DeclRefExpr 0x5637768db250 <lcode.c:535:56> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
cond
  33: ImplicitCastExpr 0x5637768db328 <lcode.c:535:56> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768db250 <col:56> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
[B1.32] (ImplicitCastExpr, LValueToRValue, int)
  34: CallExpr 0x5637768db290 <lcode.c:535:10, col:60> 'int'
|-ImplicitCastExpr 0x5637768db278 <col:10> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768db000 <col:10> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768db2e0 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768db028 <col:19> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768db2f8 <col:23> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768db050 <col:23> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
|-ParenExpr 0x5637768db148 <./lopcodes.h:65:25, col:39> 'int'
| `-BinaryOperator 0x5637768db120 <col:26, col:38> 'int' '-'
|   |-ParenExpr 0x5637768db0e0 <col:26, col:36> 'int'
|   | `-BinaryOperator 0x5637768db0b8 <col:27, line:40:17> 'int' '<<'
|   |   |-IntegerLiteral 0x5637768db078 <line:65:27> 'int' 1
|   |   `-IntegerLiteral 0x5637768db098 <line:40:17> 'int' 8
|   `-IntegerLiteral 0x5637768db100 <line:65:38> 'int' 1
|-ImplicitCastExpr 0x5637768db310 <lcode.c:535:43, col:50> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768db218 <col:43, col:50> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768db1e0 <col:43, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768db1a8 <col:43, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768db190 <col:43> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768db328 <col:56> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768db250 <col:56> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
[B1.16]([B1.18], [B1.20], ([B1.25]), [B1.31], [B1.33])
  35: ReturnStmt 0x5637768db340 <lcode.c:535:3, col:60>
`-CallExpr 0x5637768db290 <col:10, col:60> 'int'
  |-ImplicitCastExpr 0x5637768db278 <col:10> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768db000 <col:10> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x5637768db2e0 <col:19> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768db028 <col:19> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768db2f8 <col:23> 'OpCode':'OpCode' <IntegralCast>
  | `-DeclRefExpr 0x5637768db050 <col:23> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
  |-ParenExpr 0x5637768db148 <./lopcodes.h:65:25, col:39> 'int'
  | `-BinaryOperator 0x5637768db120 <col:26, col:38> 'int' '-'
  |   |-ParenExpr 0x5637768db0e0 <col:26, col:36> 'int'
  |   | `-BinaryOperator 0x5637768db0b8 <col:27, line:40:17> 'int' '<<'
  |   |   |-IntegerLiteral 0x5637768db078 <line:65:27> 'int' 1
  |   |   `-IntegerLiteral 0x5637768db098 <line:40:17> 'int' 8
  |   `-IntegerLiteral 0x5637768db100 <line:65:38> 'int' 1
  |-ImplicitCastExpr 0x5637768db310 <lcode.c:535:43, col:50> 'int' <LValueToRValue>
  | `-MemberExpr 0x5637768db218 <col:43, col:50> 'int' lvalue .info 0x56377687d5f8
  |   `-MemberExpr 0x5637768db1e0 <col:43, col:48> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  |     `-MemberExpr 0x5637768db1a8 <col:43, col:46> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  |       `-ImplicitCastExpr 0x5637768db190 <col:43> 'expdesc *' <LValueToRValue>
  |         `-DeclRefExpr 0x5637768db168 <col:43> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
  `-ImplicitCastExpr 0x5637768db328 <col:56> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768db250 <col:56> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
return [B1.34];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768d9bb8 <lcode.c:528:7> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768d9be0 <lcode.c:528:7> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d9bb8 <col:7> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768da6c0 <lcode.c:528:7, col:11> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768d9be0 <col:7> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d9bb8 <col:7> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B2.2]->pc
   4: UnaryOperator 0x5637768da6f8 <lcode.c:528:7, col:13> 'int' postfix '--'
`-MemberExpr 0x5637768da6c0 <col:7, col:11> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768d9be0 <col:7> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d9bb8 <col:7> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B2.3]--
   5: DeclRefExpr 0x5637768da718 <lcode.c:529:14> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
condjump
   6: ImplicitCastExpr 0x5637768dacb0 <lcode.c:529:14> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768da718 <col:14> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
[B2.5] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   7: DeclRefExpr 0x5637768da740 <lcode.c:529:23> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
fs
   8: ImplicitCastExpr 0x5637768dad18 <lcode.c:529:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768da740 <col:23> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B2.7] (ImplicitCastExpr, LValueToRValue, FuncState *)
   9: DeclRefExpr 0x5637768da768 <lcode.c:529:27> 'int' EnumConstant 0x563776877198 'OP_TEST' 'int'
OP_TEST
  10: ImplicitCastExpr 0x5637768dad30 <lcode.c:529:27> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768da768 <col:27> 'int' EnumConstant 0x563776877198 'OP_TEST' 'int'
[B2.9] (ImplicitCastExpr, IntegralCast, OpCode)
  11: DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
ie
  12: ImplicitCastExpr 0x5637768da930 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768da7b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
([B2.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x5637768da7d8 <./lopcodes.h:44:17> 'int' 0
0
  14: IntegerLiteral 0x5637768da7f8 <./lopcodes.h:42:18> 'int' 6
6
  15: BinaryOperator 0x5637768da818 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
[B2.13] + [B2.14]
  16: IntegerLiteral 0x5637768da860 <./lopcodes.h:40:17> 'int' 8
8
  17: BinaryOperator 0x5637768da880 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
([B2.15]) + [B2.16]
  18: IntegerLiteral 0x5637768da8c8 <./lopcodes.h:37:17> 'int' 9
9
  19: BinaryOperator 0x5637768da8e8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768da8a8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768da880 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768da8c8 <line:37:17> 'int' 9
([B2.17]) + [B2.18]
  20: BinaryOperator 0x5637768da948 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768da930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768da7b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
`-ParenExpr 0x5637768da910 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768da8e8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768da8a8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768da880 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768da8c8 <line:37:17> 'int' 9
[B2.12] >> ([B2.19])
  21: IntegerLiteral 0x5637768da990 <./lopcodes.h:71:39> 'int' 0
0
  22: CStyleCastExpr 0x5637768da9c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
(Instruction)[B2.21] (CStyleCastExpr, IntegralCast, Instruction)
  23: UnaryOperator 0x5637768da9e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
~[B2.22]
  24: IntegerLiteral 0x5637768daa28 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5637768daa48 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
`-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
([B2.23]) << [B2.24]
  26: UnaryOperator 0x5637768daa90 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768daa70 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768daa48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
~([B2.25])
  27: IntegerLiteral 0x5637768daad0 <./lopcodes.h:88:60> 'int' 0
0
  28: BinaryOperator 0x5637768daaf0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768daab0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768daa90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768daa70 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768daa48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768daad0 <line:88:60> 'int' 0
([B2.26]) << [B2.27]
  29: BinaryOperator 0x5637768dab38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768da970 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768da948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768da930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768da7b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
|   `-ParenExpr 0x5637768da910 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5637768da8e8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5637768da8a8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5637768da880 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5637768da8c8 <line:37:17> 'int' 9
`-ParenExpr 0x5637768dab18 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768daaf0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768daab0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768daa90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768daa70 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768daa48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768daad0 <line:88:60> 'int' 0
([B2.20]) & ([B2.28])
  30: CStyleCastExpr 0x5637768dabc8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5637768daba8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768dab38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768da970 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768da948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768da930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768da7b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x5637768da910 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768da8e8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5637768da8a8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5637768da880 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5637768da8c8 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768dab18 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768daaf0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768daab0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768daa90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768daa70 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768daa48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5637768daad0 <line:88:60> 'int' 0
(int)([B2.29]) (CStyleCastExpr, IntegralCast, int)
  31: IntegerLiteral 0x5637768dac30 <lcode.c:529:50> 'int' 0
0
  32: DeclRefExpr 0x5637768dac50 <lcode.c:529:54> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
cond
  33: ImplicitCastExpr 0x5637768dac78 <lcode.c:529:54> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768dac50 <col:54> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
[B2.32] (ImplicitCastExpr, LValueToRValue, int)
  34: UnaryOperator 0x5637768dac90 <lcode.c:529:53, col:54> 'int' prefix '!'
`-ImplicitCastExpr 0x5637768dac78 <col:54> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768dac50 <col:54> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
![B2.33]
  35: CallExpr 0x5637768dacc8 <lcode.c:529:14, col:58> 'int'
|-ImplicitCastExpr 0x5637768dacb0 <col:14> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768da718 <col:14> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768dad18 <col:23> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768da740 <col:23> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768dad30 <col:27> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768da768 <col:27> 'int' EnumConstant 0x563776877198 'OP_TEST' 'int'
|-ParenExpr 0x5637768dac10 <./lopcodes.h:88:21, col:63> 'int'
| `-ParenExpr 0x5637768dabf0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5637768dabc8 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5637768daba8 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5637768dab38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5637768da970 <line:88:32, col:43> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5637768da948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5637768da930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5637768da7b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
|         |   `-ParenExpr 0x5637768da910 <./lopcodes.h:47:16, col:31> 'int'
|         |     `-BinaryOperator 0x5637768da8e8 <line:46:16, line:37:17> 'int' '+'
|         |       |-ParenExpr 0x5637768da8a8 <line:46:16, col:31> 'int'
|         |       | `-BinaryOperator 0x5637768da880 <line:45:16, line:40:17> 'int' '+'
|         |       |   |-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
|         |       |   | `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
|         |       |   |   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
|         |       |   |   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
|         |       |   `-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
|         |       `-IntegerLiteral 0x5637768da8c8 <line:37:17> 'int' 9
|         `-ParenExpr 0x5637768dab18 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5637768daaf0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5637768daab0 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5637768daa90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5637768daa70 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5637768daa48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
|             |       `-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5637768daad0 <line:88:60> 'int' 0
|-IntegerLiteral 0x5637768dac30 <lcode.c:529:50> 'int' 0
`-UnaryOperator 0x5637768dac90 <col:53, col:54> 'int' prefix '!'
  `-ImplicitCastExpr 0x5637768dac78 <col:54> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768dac50 <col:54> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
[B2.6]([B2.8], [B2.10], (([B2.30])), [B2.31], [B2.34])
  36: ReturnStmt 0x5637768dad48 <lcode.c:529:7, col:58>
`-CallExpr 0x5637768dacc8 <col:14, col:58> 'int'
  |-ImplicitCastExpr 0x5637768dacb0 <col:14> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768da718 <col:14> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768aeb68 'condjump' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x5637768dad18 <col:23> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768da740 <col:23> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768dad30 <col:27> 'OpCode':'OpCode' <IntegralCast>
  | `-DeclRefExpr 0x5637768da768 <col:27> 'int' EnumConstant 0x563776877198 'OP_TEST' 'int'
  |-ParenExpr 0x5637768dac10 <./lopcodes.h:88:21, col:63> 'int'
  | `-ParenExpr 0x5637768dabf0 <./llimits.h:75:22, col:31> 'int'
  |   `-CStyleCastExpr 0x5637768dabc8 <col:23, col:30> 'int' <IntegralCast>
  |     `-ParenExpr 0x5637768daba8 <col:26, col:30> 'unsigned int'
  |       `-BinaryOperator 0x5637768dab38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
  |         |-ParenExpr 0x5637768da970 <line:88:32, col:43> 'Instruction':'unsigned int'
  |         | `-BinaryOperator 0x5637768da948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
  |         |   |-ImplicitCastExpr 0x5637768da930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
  |         |   | `-ParenExpr 0x5637768da7b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  |         |   |   `-DeclRefExpr 0x5637768da790 <lcode.c:529:45> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
  |         |   `-ParenExpr 0x5637768da910 <./lopcodes.h:47:16, col:31> 'int'
  |         |     `-BinaryOperator 0x5637768da8e8 <line:46:16, line:37:17> 'int' '+'
  |         |       |-ParenExpr 0x5637768da8a8 <line:46:16, col:31> 'int'
  |         |       | `-BinaryOperator 0x5637768da880 <line:45:16, line:40:17> 'int' '+'
  |         |       |   |-ParenExpr 0x5637768da840 <line:45:16, col:33> 'int'
  |         |       |   | `-BinaryOperator 0x5637768da818 <line:44:17, line:42:18> 'int' '+'
  |         |       |   |   |-IntegerLiteral 0x5637768da7d8 <line:44:17> 'int' 0
  |         |       |   |   `-IntegerLiteral 0x5637768da7f8 <line:42:18> 'int' 6
  |         |       |   `-IntegerLiteral 0x5637768da860 <line:40:17> 'int' 8
  |         |       `-IntegerLiteral 0x5637768da8c8 <line:37:17> 'int' 9
  |         `-ParenExpr 0x5637768dab18 <line:71:20, col:49> 'Instruction':'unsigned int'
  |           `-BinaryOperator 0x5637768daaf0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
  |             |-ParenExpr 0x5637768daab0 <line:71:21, col:45> 'Instruction':'unsigned int'
  |             | `-UnaryOperator 0x5637768daa90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
  |             |   `-ParenExpr 0x5637768daa70 <col:23, col:44> 'Instruction':'unsigned int'
  |             |     `-BinaryOperator 0x5637768daa48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
  |             |       |-ParenExpr 0x5637768daa08 <line:71:24, col:40> 'Instruction':'unsigned int'
  |             |       | `-UnaryOperator 0x5637768da9e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
  |             |       |   `-CStyleCastExpr 0x5637768da9c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  |             |       |     `-IntegerLiteral 0x5637768da990 <col:39> 'int' 0
  |             |       `-IntegerLiteral 0x5637768daa28 <line:38:17> 'int' 9
  |             `-IntegerLiteral 0x5637768daad0 <line:88:60> 'int' 0
  |-IntegerLiteral 0x5637768dac30 <lcode.c:529:50> 'int' 0
  `-UnaryOperator 0x5637768dac90 <col:53, col:54> 'int' prefix '!'
    `-ImplicitCastExpr 0x5637768dac78 <col:54> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5637768dac50 <col:54> 'int' lvalue ParmVar 0x5637768d91d0 'cond' 'int'
return [B2.35];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768d9588 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
([B3.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768d95a0 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B3.2]->f
   4: ImplicitCastExpr 0x5637768d95d8 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768d95a0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768d95f0 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768d95d8 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768d95a0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B3.4]->code
   6: ImplicitCastExpr 0x5637768d9730 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768d95f0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768d95d8 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768d95a0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768d9670 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
([B3.7]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768d9688 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B3.8]->u
  10: MemberExpr 0x5637768d96c0 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d9688 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B3.9].s
  11: MemberExpr 0x5637768d96f8 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d96c0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d9688 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B3.10].info
  12: ImplicitCastExpr 0x5637768d9748 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d96f8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d96c0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d9688 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x5637768d9760 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768d9730 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768d95f0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768d95d8 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768d95a0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d9748 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d96f8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768d96c0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768d9688 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B3.6][[B3.12]]
  14: ImplicitCastExpr 0x5637768d97a8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768d9788 <col:23, col:52> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x5637768d9760 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x5637768d9730 <col:24, col:33> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x5637768d95f0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   `-ImplicitCastExpr 0x5637768d95d8 <col:24, col:30> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x5637768d95a0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |       `-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |         `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
    |           `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768d9748 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
      `-MemberExpr 0x5637768d96f8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
        `-MemberExpr 0x5637768d96c0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
          `-MemberExpr 0x5637768d9688 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
            `-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
              `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
                `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
([B3.13]) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: DeclStmt 0x5637768d97c0 <lcode.c:526:5, col:36>col:17
`-VarDecl 0x5637768d94e0 <col:5, ./lcode.h:39:52> lcode.c:526:17 used ie 'Instruction':'unsigned int' cinit
  `-ImplicitCastExpr 0x5637768d97a8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' <LValueToRValue>
    `-ParenExpr 0x5637768d9788 <col:23, col:52> 'Instruction':'unsigned int' lvalue
      `-ArraySubscriptExpr 0x5637768d9760 <col:24, col:51> 'Instruction':'unsigned int' lvalue
        |-ImplicitCastExpr 0x5637768d9730 <col:24, col:33> 'Instruction *' <LValueToRValue>
        | `-MemberExpr 0x5637768d95f0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
        |   `-ImplicitCastExpr 0x5637768d95d8 <col:24, col:30> 'Proto *' <LValueToRValue>
        |     `-MemberExpr 0x5637768d95a0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
        |       `-ImplicitCastExpr 0x5637768d9588 <col:24, col:27> 'FuncState *' <LValueToRValue>
        |         `-ParenExpr 0x5637768d9568 <col:24, col:27> 'FuncState *' lvalue
        |           `-DeclRefExpr 0x5637768d9540 <lcode.c:526:30> 'FuncState *' lvalue ParmVar 0x5637768d90e8 'fs' 'FuncState *'
        `-ImplicitCastExpr 0x5637768d9748 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
          `-MemberExpr 0x5637768d96f8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
            `-MemberExpr 0x5637768d96c0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
              `-MemberExpr 0x5637768d9688 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
                `-ImplicitCastExpr 0x5637768d9670 <col:38, col:40> 'expdesc *' <LValueToRValue>
                  `-ParenExpr 0x5637768d9650 <col:38, col:40> 'expdesc *' lvalue
                    `-DeclRefExpr 0x5637768d9628 <lcode.c:526:34> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
Instruction ie = ((fs)->f->code[(e)->u.s.info]);
  16: DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
ie
  17: ImplicitCastExpr 0x5637768d9840 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768d9800 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
([B3.16]) (ImplicitCastExpr, LValueToRValue, Instruction)
  18: IntegerLiteral 0x5637768d9820 <./lopcodes.h:44:17> 'int' 0
0
  19: BinaryOperator 0x5637768d9858 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768d9840 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768d9800 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
`-IntegerLiteral 0x5637768d9820 <./lopcodes.h:44:17> 'int' 0
[B3.17] >> [B3.18]
  20: IntegerLiteral 0x5637768d98a0 <./lopcodes.h:71:39> 'int' 0
0
  21: CStyleCastExpr 0x5637768d98d0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
(Instruction)[B3.20] (CStyleCastExpr, IntegralCast, Instruction)
  22: UnaryOperator 0x5637768d98f8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
~[B3.21]
  23: IntegerLiteral 0x5637768d9938 <./lopcodes.h:42:18> 'int' 6
6
  24: BinaryOperator 0x5637768d9958 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
`-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
([B3.22]) << [B3.23]
  25: UnaryOperator 0x5637768d99a0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768d9980 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768d9958 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
~([B3.24])
  26: IntegerLiteral 0x5637768d99e0 <./lopcodes.h:80:67> 'int' 0
0
  27: BinaryOperator 0x5637768d9a00 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768d99c0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768d99a0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768d9980 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768d9958 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768d99e0 <line:80:67> 'int' 0
([B3.25]) << [B3.26]
  28: BinaryOperator 0x5637768d9a48 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768d9880 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768d9858 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768d9840 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768d9800 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x5637768d9820 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768d9a28 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768d9a00 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768d99c0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768d99a0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768d9980 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768d9958 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768d99e0 <line:80:67> 'int' 0
([B3.19]) & ([B3.27])
  29: CStyleCastExpr 0x5637768d9ad0 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5637768d9ab0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768d9a48 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768d9880 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768d9858 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768d9840 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768d9800 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x5637768d9820 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5637768d9a28 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768d9a00 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768d99c0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768d99a0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768d9980 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768d9958 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768d99e0 <line:80:67> 'int' 0
(OpCode)([B3.28]) (CStyleCastExpr, IntegralCast, OpCode)
  30: ImplicitCastExpr 0x5637768d9b60 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768d9b18 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5637768d9af8 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5637768d9ad0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5637768d9ab0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5637768d9a48 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5637768d9880 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5637768d9858 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5637768d9840 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5637768d9800 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x5637768d9820 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5637768d9a28 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5637768d9a00 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5637768d99c0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5637768d99a0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5637768d9980 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5637768d9958 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5637768d99e0 <line:80:67> 'int' 0
(([B3.29])) (ImplicitCastExpr, IntegralCast, unsigned int)
  31: DeclRefExpr 0x5637768d9b38 <lcode.c:527:27> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
OP_NOT
  32: ImplicitCastExpr 0x5637768d9b78 <lcode.c:527:27> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d9b38 <col:27> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
[B3.31] (ImplicitCastExpr, IntegralCast, unsigned int)
  33: BinaryOperator 0x5637768d9b90 <./lopcodes.h:80:23, lcode.c:527:27> 'int' '=='
|-ImplicitCastExpr 0x5637768d9b60 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x5637768d9b18 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x5637768d9af8 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x5637768d9ad0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x5637768d9ab0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5637768d9a48 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5637768d9880 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5637768d9858 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5637768d9840 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5637768d9800 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5637768d97d8 <lcode.c:527:20> 'Instruction':'unsigned int' lvalue Var 0x5637768d94e0 'ie' 'Instruction':'unsigned int'
|           |   `-IntegerLiteral 0x5637768d9820 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x5637768d9a28 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5637768d9a00 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5637768d99c0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5637768d99a0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5637768d9980 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5637768d9958 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5637768d9918 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5637768d98f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5637768d98d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5637768d98a0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5637768d9938 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x5637768d99e0 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x5637768d9b78 <lcode.c:527:27> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d9b38 <col:27> 'int' EnumConstant 0x56377686ba38 'OP_NOT' 'int'
[B3.30] == [B3.32]
   T: if [B3.33]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5637768d93c0 <lcode.c:525:7> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d93e8 <lcode.c:525:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d93c0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B4.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d9400 <lcode.c:525:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d93e8 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d93c0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B4.2]->k
   4: ImplicitCastExpr 0x5637768d9460 <lcode.c:525:7, col:10> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d9400 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d93e8 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d93c0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B4.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768d9478 <lcode.c:525:7, col:10> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d9460 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d9400 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d93e8 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d93c0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
[B4.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768d9438 <lcode.c:525:15> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
VRELOCABLE
   7: ImplicitCastExpr 0x5637768d9490 <lcode.c:525:15> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d9438 <col:15> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B4.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768d94a8 <lcode.c:525:7, col:15> 'int' '=='
|-ImplicitCastExpr 0x5637768d9478 <col:7, col:10> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768d9460 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768d9400 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768d93e8 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d93c0 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d9158 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d9490 <col:15> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d9438 <col:15> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B4.5] == [B4.7]
   T: if [B4.8]
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
