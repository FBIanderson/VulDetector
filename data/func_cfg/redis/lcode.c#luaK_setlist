void luaK_setlist(FuncState *fs, int base, int nelems, int tostore)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: DeclRefExpr 0x5637768ef218 <lcode.c:829:17> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
base
   2: ImplicitCastExpr 0x5637768ef260 <lcode.c:829:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ef218 <col:17> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768ef240 <lcode.c:829:24> 'int' 1
1
   4: BinaryOperator 0x5637768ef278 <lcode.c:829:17, col:24> 'int' '+'
|-ImplicitCastExpr 0x5637768ef260 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ef218 <col:17> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
`-IntegerLiteral 0x5637768ef240 <col:24> 'int' 1
[B1.2] + [B1.3]
   5: DeclRefExpr 0x5637768ef1a0 <lcode.c:829:3> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768ef1c8 <lcode.c:829:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ef1a0 <col:3> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: MemberExpr 0x5637768ef1e0 <lcode.c:829:3, col:7> 'int' lvalue ->freereg 0x56377687e268
`-ImplicitCastExpr 0x5637768ef1c8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ef1a0 <col:3> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B1.6]->freereg
   8: BinaryOperator 0x5637768ef2a0 <lcode.c:829:3, col:24> 'int' '='
|-MemberExpr 0x5637768ef1e0 <col:3, col:7> 'int' lvalue ->freereg 0x56377687e268
| `-ImplicitCastExpr 0x5637768ef1c8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768ef1a0 <col:3> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
`-BinaryOperator 0x5637768ef278 <col:17, col:24> 'int' '+'
  |-ImplicitCastExpr 0x5637768ef260 <col:17> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768ef218 <col:17> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
  `-IntegerLiteral 0x5637768ef240 <col:24> 'int' 1
[B1.7] = [B1.4]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768eed10 <lcode.c:826:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768ec908 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768eedf8 <lcode.c:826:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768eed10 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768ec908 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768eed38 <lcode.c:826:18> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768eee60 <lcode.c:826:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768eed38 <col:18> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768eed60 <lcode.c:826:22> 'int' EnumConstant 0x5637768773d8 'OP_SETLIST' 'int'
OP_SETLIST
   6: ImplicitCastExpr 0x5637768eee78 <lcode.c:826:22> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768eed60 <col:22> 'int' EnumConstant 0x5637768773d8 'OP_SETLIST' 'int'
[B2.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768eed88 <lcode.c:826:34> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
base
   8: ImplicitCastExpr 0x5637768eee90 <lcode.c:826:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768eed88 <col:34> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
[B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768eedb0 <lcode.c:826:40> 'int' lvalue Var 0x5637768ee780 'b' 'int'
b
  10: ImplicitCastExpr 0x5637768eeea8 <lcode.c:826:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768eedb0 <col:40> 'int' lvalue Var 0x5637768ee780 'b' 'int'
[B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x5637768eedd8 <lcode.c:826:43> 'int' 0
0
  12: CallExpr 0x5637768eee10 <lcode.c:826:5, col:44> 'int'
|-ImplicitCastExpr 0x5637768eedf8 <col:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768eed10 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768ec908 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768eee60 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768eed38 <col:18> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768eee78 <col:22> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768eed60 <col:22> 'int' EnumConstant 0x5637768773d8 'OP_SETLIST' 'int'
|-ImplicitCastExpr 0x5637768eee90 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768eed88 <col:34> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
|-ImplicitCastExpr 0x5637768eeea8 <col:40> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768eedb0 <col:40> 'int' lvalue Var 0x5637768ee780 'b' 'int'
`-IntegerLiteral 0x5637768eedd8 <col:43> 'int' 0
[B2.2]([B2.4], [B2.6], [B2.8], [B2.10], [B2.11])
  13: DeclRefExpr 0x5637768eeec0 <lcode.c:827:5> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
luaK_code
  14: ImplicitCastExpr 0x5637768ef0c0 <lcode.c:827:5> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768eeec0 <col:5> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
[B2.13] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, Instruction, int))
  15: DeclRefExpr 0x5637768eeee8 <lcode.c:827:15> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
fs
  16: ImplicitCastExpr 0x5637768ef118 <lcode.c:827:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768eeee8 <col:15> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.15] (ImplicitCastExpr, LValueToRValue, FuncState *)
  17: DeclRefExpr 0x5637768eef10 <lcode.c:827:37> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
c
  18: ImplicitCastExpr 0x5637768eef98 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768eef78 <col:26, col:30> 'int' lvalue
  `-DeclRefExpr 0x5637768eef10 <lcode.c:827:37> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
([B2.17]) (ImplicitCastExpr, LValueToRValue, int)
  19: CStyleCastExpr 0x5637768eefb0 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768eef98 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768eef78 <col:26, col:30> 'int' lvalue
    `-DeclRefExpr 0x5637768eef10 <lcode.c:827:37> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
(Instruction)[B2.18] (CStyleCastExpr, IntegralCast, Instruction)
  20: DeclRefExpr 0x5637768eeff8 <lcode.c:827:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
fs
  21: ImplicitCastExpr 0x5637768ef020 <lcode.c:827:41> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768eeff8 <col:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.20] (ImplicitCastExpr, LValueToRValue, FuncState *)
  22: MemberExpr 0x5637768ef038 <lcode.c:827:41, col:45> 'struct LexState *' lvalue ->ls 0x56377687df60
`-ImplicitCastExpr 0x5637768ef020 <col:41> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768eeff8 <col:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.21]->ls
  23: ImplicitCastExpr 0x5637768ef070 <lcode.c:827:41, col:45> 'struct LexState *' <LValueToRValue>
`-MemberExpr 0x5637768ef038 <col:41, col:45> 'struct LexState *' lvalue ->ls 0x56377687df60
  `-ImplicitCastExpr 0x5637768ef020 <col:41> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768eeff8 <col:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.22] (ImplicitCastExpr, LValueToRValue, struct LexState *)
  24: MemberExpr 0x5637768ef088 <lcode.c:827:41, col:49> 'int' lvalue ->lastline 0x5637768694a8
`-ImplicitCastExpr 0x5637768ef070 <col:41, col:45> 'struct LexState *' <LValueToRValue>
  `-MemberExpr 0x5637768ef038 <col:41, col:45> 'struct LexState *' lvalue ->ls 0x56377687df60
    `-ImplicitCastExpr 0x5637768ef020 <col:41> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768eeff8 <col:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.23]->lastline
  25: ImplicitCastExpr 0x5637768ef130 <lcode.c:827:41, col:49> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ef088 <col:41, col:49> 'int' lvalue ->lastline 0x5637768694a8
  `-ImplicitCastExpr 0x5637768ef070 <col:41, col:45> 'struct LexState *' <LValueToRValue>
    `-MemberExpr 0x5637768ef038 <col:41, col:45> 'struct LexState *' lvalue ->ls 0x56377687df60
      `-ImplicitCastExpr 0x5637768ef020 <col:41> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768eeff8 <col:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: CallExpr 0x5637768ef0d8 <lcode.c:827:5, col:57> 'int'
|-ImplicitCastExpr 0x5637768ef0c0 <col:5> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768eeec0 <col:5> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
|-ImplicitCastExpr 0x5637768ef118 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768eeee8 <col:15> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
|-ParenExpr 0x5637768eefd8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768eefb0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768eef98 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768eef78 <col:26, col:30> 'int' lvalue
|       `-DeclRefExpr 0x5637768eef10 <lcode.c:827:37> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
`-ImplicitCastExpr 0x5637768ef130 <col:41, col:49> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768ef088 <col:41, col:49> 'int' lvalue ->lastline 0x5637768694a8
    `-ImplicitCastExpr 0x5637768ef070 <col:41, col:45> 'struct LexState *' <LValueToRValue>
      `-MemberExpr 0x5637768ef038 <col:41, col:45> 'struct LexState *' lvalue ->ls 0x56377687df60
        `-ImplicitCastExpr 0x5637768ef020 <col:41> 'FuncState *' <LValueToRValue>
          `-DeclRefExpr 0x5637768eeff8 <col:41> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B2.14]([B2.16], ([B2.19]), [B2.25])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5637768eeb40 <lcode.c:824:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768ec908 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768eec30 <lcode.c:824:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768eeb40 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768ec908 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768eeb68 <lcode.c:824:18> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768eec98 <lcode.c:824:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768eeb68 <col:18> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768eeb90 <lcode.c:824:22> 'int' EnumConstant 0x5637768773d8 'OP_SETLIST' 'int'
OP_SETLIST
   6: ImplicitCastExpr 0x5637768eecb0 <lcode.c:824:22> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768eeb90 <col:22> 'int' EnumConstant 0x5637768773d8 'OP_SETLIST' 'int'
[B3.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768eebb8 <lcode.c:824:34> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
base
   8: ImplicitCastExpr 0x5637768eecc8 <lcode.c:824:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768eebb8 <col:34> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768eebe0 <lcode.c:824:40> 'int' lvalue Var 0x5637768ee780 'b' 'int'
b
  10: ImplicitCastExpr 0x5637768eece0 <lcode.c:824:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768eebe0 <col:40> 'int' lvalue Var 0x5637768ee780 'b' 'int'
[B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x5637768eec08 <lcode.c:824:43> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
c
  12: ImplicitCastExpr 0x5637768eecf8 <lcode.c:824:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768eec08 <col:43> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
[B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: CallExpr 0x5637768eec48 <lcode.c:824:5, col:44> 'int'
|-ImplicitCastExpr 0x5637768eec30 <col:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768eeb40 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x5637768ec908 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768eec98 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768eeb68 <col:18> 'FuncState *' lvalue ParmVar 0x5637768ee290 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768eecb0 <col:22> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768eeb90 <col:22> 'int' EnumConstant 0x5637768773d8 'OP_SETLIST' 'int'
|-ImplicitCastExpr 0x5637768eecc8 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768eebb8 <col:34> 'int' lvalue ParmVar 0x5637768ee308 'base' 'int'
|-ImplicitCastExpr 0x5637768eece0 <col:40> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768eebe0 <col:40> 'int' lvalue Var 0x5637768ee780 'b' 'int'
`-ImplicitCastExpr 0x5637768eecf8 <col:43> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768eec08 <col:43> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
[B3.2]([B3.4], [B3.6], [B3.8], [B3.10], [B3.12])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: ConditionalOperator 0x5637768ee928 <lcode.c:821:11, col:42> 'int'
|-ParenExpr 0x5637768ee8a8 <col:11, col:34> 'int'
| `-BinaryOperator 0x5637768ee880 <col:12, ./lua.h:30:24> 'int' '=='
|   |-ImplicitCastExpr 0x5637768ee868 <lcode.c:821:12> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5637768ee7e0 <col:12> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
|   `-ParenExpr 0x5637768ee848 <./lua.h:30:21, col:24> 'int'
|     `-UnaryOperator 0x5637768ee828 <col:22, col:23> 'int' prefix '-'
|       `-IntegerLiteral 0x5637768ee808 <col:23> 'int' 1
|-IntegerLiteral 0x5637768ee8c8 <lcode.c:821:38> 'int' 0
`-ImplicitCastExpr 0x5637768ee910 <col:42> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768ee8e8 <col:42> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
([B7.14]) ? [B5.1] : [B6.2]
   2: DeclStmt 0x5637768ee958 <lcode.c:821:3, col:49>col:7
`-VarDecl 0x5637768ee780 <col:3, col:42> col:7 used b 'int' cinit
  `-ConditionalOperator 0x5637768ee928 <col:11, col:42> 'int'
    |-ParenExpr 0x5637768ee8a8 <col:11, col:34> 'int'
    | `-BinaryOperator 0x5637768ee880 <col:12, ./lua.h:30:24> 'int' '=='
    |   |-ImplicitCastExpr 0x5637768ee868 <lcode.c:821:12> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5637768ee7e0 <col:12> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
    |   `-ParenExpr 0x5637768ee848 <./lua.h:30:21, col:24> 'int'
    |     `-UnaryOperator 0x5637768ee828 <col:22, col:23> 'int' prefix '-'
    |       `-IntegerLiteral 0x5637768ee808 <col:23> 'int' 1
    |-IntegerLiteral 0x5637768ee8c8 <lcode.c:821:38> 'int' 0
    `-ImplicitCastExpr 0x5637768ee910 <col:42> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5637768ee8e8 <col:42> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
int b = (tostore == (-1)) ? 0 : tostore;
   3: IntegerLiteral 0x5637768ee970 <./llimits.h:62:31> 'int' 0
0
   4: CStyleCastExpr 0x5637768ee9a0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768ee970 <col:31> 'int' 0
(void)[B4.3] (CStyleCastExpr, ToVoid, void)
   5: DeclRefExpr 0x5637768ee9e8 <lcode.c:823:7> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
c
   6: ImplicitCastExpr 0x5637768eeb00 <lcode.c:823:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ee9e8 <col:7> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5637768eea10 <./lopcodes.h:67:27> 'int' 1
1
   8: IntegerLiteral 0x5637768eea30 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5637768eea50 <./lopcodes.h:67:27, line:37:17> 'int' '<<'
|-IntegerLiteral 0x5637768eea10 <line:67:27> 'int' 1
`-IntegerLiteral 0x5637768eea30 <line:37:17> 'int' 9
[B4.7] << [B4.8]
  10: IntegerLiteral 0x5637768eea98 <./lopcodes.h:67:38> 'int' 1
1
  11: BinaryOperator 0x5637768eeab8 <./lopcodes.h:67:26, col:38> 'int' '-'
|-ParenExpr 0x5637768eea78 <col:26, col:36> 'int'
| `-BinaryOperator 0x5637768eea50 <col:27, line:37:17> 'int' '<<'
|   |-IntegerLiteral 0x5637768eea10 <line:67:27> 'int' 1
|   `-IntegerLiteral 0x5637768eea30 <line:37:17> 'int' 9
`-IntegerLiteral 0x5637768eea98 <line:67:38> 'int' 1
([B4.9]) - [B4.10]
  12: BinaryOperator 0x5637768eeb18 <lcode.c:823:7, ./lopcodes.h:67:39> 'int' '<='
|-ImplicitCastExpr 0x5637768eeb00 <lcode.c:823:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ee9e8 <col:7> 'int' lvalue Var 0x5637768ee5b8 'c' 'int'
`-ParenExpr 0x5637768eeae0 <./lopcodes.h:67:25, col:39> 'int'
  `-BinaryOperator 0x5637768eeab8 <col:26, col:38> 'int' '-'
    |-ParenExpr 0x5637768eea78 <col:26, col:36> 'int'
    | `-BinaryOperator 0x5637768eea50 <col:27, line:37:17> 'int' '<<'
    |   |-IntegerLiteral 0x5637768eea10 <line:67:27> 'int' 1
    |   `-IntegerLiteral 0x5637768eea30 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5637768eea98 <line:67:38> 'int' 1
[B4.6] <= ([B4.11])
   T: if [B4.12]
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   1: IntegerLiteral 0x5637768ee8c8 <lcode.c:821:38> 'int' 0
0
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x5637768ee8e8 <lcode.c:821:42> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
tostore
   2: ImplicitCastExpr 0x5637768ee910 <lcode.c:821:42> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ee8e8 <col:42> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: DeclRefExpr 0x5637768ee618 <lcode.c:820:13> 'int' lvalue ParmVar 0x5637768ee380 'nelems' 'int'
nelems
   2: ImplicitCastExpr 0x5637768ee660 <lcode.c:820:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ee618 <col:13> 'int' lvalue ParmVar 0x5637768ee380 'nelems' 'int'
[B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768ee640 <lcode.c:820:22> 'int' 1
1
   4: BinaryOperator 0x5637768ee678 <lcode.c:820:13, col:22> 'int' '-'
|-ImplicitCastExpr 0x5637768ee660 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ee618 <col:13> 'int' lvalue ParmVar 0x5637768ee380 'nelems' 'int'
`-IntegerLiteral 0x5637768ee640 <col:22> 'int' 1
[B7.2] - [B7.3]
   5: IntegerLiteral 0x5637768ee6c0 <./lopcodes.h:265:27> 'int' 50
50
   6: BinaryOperator 0x5637768ee6e0 <lcode.c:820:12, ./lopcodes.h:265:27> 'int' '/'
|-ParenExpr 0x5637768ee6a0 <lcode.c:820:12, col:23> 'int'
| `-BinaryOperator 0x5637768ee678 <col:13, col:22> 'int' '-'
|   |-ImplicitCastExpr 0x5637768ee660 <col:13> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5637768ee618 <col:13> 'int' lvalue ParmVar 0x5637768ee380 'nelems' 'int'
|   `-IntegerLiteral 0x5637768ee640 <col:22> 'int' 1
`-IntegerLiteral 0x5637768ee6c0 <./lopcodes.h:265:27> 'int' 50
([B7.4]) / [B7.5]
   7: IntegerLiteral 0x5637768ee708 <lcode.c:820:45> 'int' 1
1
   8: BinaryOperator 0x5637768ee728 <lcode.c:820:12, col:45> 'int' '+'
|-BinaryOperator 0x5637768ee6e0 <col:12, ./lopcodes.h:265:27> 'int' '/'
| |-ParenExpr 0x5637768ee6a0 <lcode.c:820:12, col:23> 'int'
| | `-BinaryOperator 0x5637768ee678 <col:13, col:22> 'int' '-'
| |   |-ImplicitCastExpr 0x5637768ee660 <col:13> 'int' <LValueToRValue>
| |   | `-DeclRefExpr 0x5637768ee618 <col:13> 'int' lvalue ParmVar 0x5637768ee380 'nelems' 'int'
| |   `-IntegerLiteral 0x5637768ee640 <col:22> 'int' 1
| `-IntegerLiteral 0x5637768ee6c0 <./lopcodes.h:265:27> 'int' 50
`-IntegerLiteral 0x5637768ee708 <lcode.c:820:45> 'int' 1
[B7.6] + [B7.7]
   9: DeclStmt 0x5637768ee750 <lcode.c:820:3, col:46>col:7
`-VarDecl 0x5637768ee5b8 <col:3, col:45> col:7 used c 'int' cinit
  `-BinaryOperator 0x5637768ee728 <col:12, col:45> 'int' '+'
    |-BinaryOperator 0x5637768ee6e0 <col:12, ./lopcodes.h:265:27> 'int' '/'
    | |-ParenExpr 0x5637768ee6a0 <lcode.c:820:12, col:23> 'int'
    | | `-BinaryOperator 0x5637768ee678 <col:13, col:22> 'int' '-'
    | |   |-ImplicitCastExpr 0x5637768ee660 <col:13> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x5637768ee618 <col:13> 'int' lvalue ParmVar 0x5637768ee380 'nelems' 'int'
    | |   `-IntegerLiteral 0x5637768ee640 <col:22> 'int' 1
    | `-IntegerLiteral 0x5637768ee6c0 <./lopcodes.h:265:27> 'int' 50
    `-IntegerLiteral 0x5637768ee708 <lcode.c:820:45> 'int' 1
int c = (nelems - 1) / 50 + 1;
  10: DeclRefExpr 0x5637768ee7e0 <lcode.c:821:12> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
tostore
  11: ImplicitCastExpr 0x5637768ee868 <lcode.c:821:12> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ee7e0 <col:12> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
[B7.10] (ImplicitCastExpr, LValueToRValue, int)
  12: IntegerLiteral 0x5637768ee808 <./lua.h:30:23> 'int' 1
1
  13: UnaryOperator 0x5637768ee828 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x5637768ee808 <col:23> 'int' 1
-[B7.12]
  14: BinaryOperator 0x5637768ee880 <lcode.c:821:12, ./lua.h:30:24> 'int' '=='
|-ImplicitCastExpr 0x5637768ee868 <lcode.c:821:12> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ee7e0 <col:12> 'int' lvalue ParmVar 0x5637768ee3f8 'tostore' 'int'
`-ParenExpr 0x5637768ee848 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x5637768ee828 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x5637768ee808 <col:23> 'int' 1
[B7.11] == ([B7.13])
   T: ([B7.14]) ? ... : ...
   Preds (1): B8
   Succs (2): B5 B6

 [B0 (EXIT)]
   Preds (1): B1
