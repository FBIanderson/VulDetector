static void discharge2reg(FuncState *fs, expdesc *e, int reg)
 [B13 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x5637768cf9b0 <lcode.c:377:17> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   2: ImplicitCastExpr 0x5637768cf9d8 <lcode.c:377:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768cf9b0 <col:17> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768cf8c8 <lcode.c:377:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768cf8f0 <lcode.c:377:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cf8c8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B1.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x5637768cf908 <lcode.c:377:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768cf8f0 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cf8c8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B1.4]->u
   6: MemberExpr 0x5637768cf940 <lcode.c:377:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768cf908 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768cf8f0 <col:3> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768cf8c8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B1.5].s
   7: MemberExpr 0x5637768cf978 <lcode.c:377:3, col:10> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768cf940 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768cf908 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768cf8f0 <col:3> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cf8c8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B1.6].info
   8: BinaryOperator 0x5637768cf9f0 <lcode.c:377:3, col:17> 'int' '='
|-MemberExpr 0x5637768cf978 <col:3, col:10> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768cf940 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768cf908 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768cf8f0 <col:3> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768cf8c8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768cf9d8 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768cf9b0 <col:17> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B1.7] = [B1.2]
   9: DeclRefExpr 0x5637768cfb78 <lcode.c:378:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
VNONRELOC
  10: ImplicitCastExpr 0x5637768cfba0 <lcode.c:378:10> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768cfb78 <col:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B1.9] (ImplicitCastExpr, IntegralCast, expkind)
  11: DeclRefExpr 0x5637768cfa18 <lcode.c:378:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
  12: ImplicitCastExpr 0x5637768cfa40 <lcode.c:378:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cfa18 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B1.11] (ImplicitCastExpr, LValueToRValue, expdesc *)
  13: MemberExpr 0x5637768cfb40 <lcode.c:378:3, col:6> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768cfa40 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cfa18 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B1.12]->k
  14: BinaryOperator 0x5637768cfbb8 <lcode.c:378:3, col:10> 'expkind':'expkind' '='
|-MemberExpr 0x5637768cfb40 <col:3, col:6> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768cfa40 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768cfa18 <col:3> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768cfba0 <col:10> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768cfb78 <col:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B1.13] = [B1.10]
   Preds (6): B4 B7 B8 B9 B11 B12
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768cd768 <lcode.c:344:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
   2: ImplicitCastExpr 0x5637768cd7e0 <lcode.c:344:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768cd768 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768cd790 <lcode.c:344:22> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768cd830 <lcode.c:344:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768cd790 <col:22> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768cd7b8 <lcode.c:344:26> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768cd848 <lcode.c:344:26> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cd7b8 <col:26> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B2.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768cd7f8 <lcode.c:344:3, col:27> 'void'
|-ImplicitCastExpr 0x5637768cd7e0 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768cd768 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768cd830 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768cd790 <col:22> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768cd848 <col:26> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cd7b8 <col:26> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x5637768cd860 <lcode.c:345:11> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
   9: ImplicitCastExpr 0x5637768cd888 <lcode.c:345:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cd860 <col:11> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B2.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: MemberExpr 0x5637768cd8a0 <lcode.c:345:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768cd888 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cd860 <col:11> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B2.9]->k
  11: ImplicitCastExpr 0x5637768cd8d8 <lcode.c:345:11, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768cd8a0 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768cd888 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768cd860 <col:11> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B2.10] (ImplicitCastExpr, LValueToRValue, expkind)
  12: ImplicitCastExpr 0x5637768cda80 <lcode.c:345:11, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768cd8d8 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768cd8a0 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768cd888 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cd860 <col:11> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B2.11] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.12]
   Preds (1): B13
   Succs (8): B6 B7 B8 B9 B10 B11 B12 B3

 [B3]
  default:
   1: IntegerLiteral 0x5637768cf708 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768cf738 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768cf708 <col:31> 'int' 0
(void)[B3.1] (CStyleCastExpr, ToVoid, void)
   3: ReturnStmt 0x5637768cf780 <lcode.c:374:7>
return;
   Preds (1): B2
   Succs (1): B0

 [B4]
   T: break;
   Preds (2): B5 B6
   Succs (1): B1

 [B5]
   1: DeclRefExpr 0x5637768cf438 <lcode.c:369:9> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768cf5e0 <lcode.c:369:9> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768cf438 <col:9> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768cf460 <lcode.c:369:22> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768cf648 <lcode.c:369:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768cf460 <col:22> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768cf488 <lcode.c:369:26> 'int' EnumConstant 0x56377686b4e0 'OP_MOVE' 'int'
OP_MOVE
   6: ImplicitCastExpr 0x5637768cf660 <lcode.c:369:26> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768cf488 <col:26> 'int' EnumConstant 0x56377686b4e0 'OP_MOVE' 'int'
[B5.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768cf4b0 <lcode.c:369:35> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   8: ImplicitCastExpr 0x5637768cf678 <lcode.c:369:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768cf4b0 <col:35> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B5.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768cf4d8 <lcode.c:369:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
  10: ImplicitCastExpr 0x5637768cf500 <lcode.c:369:40> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cf4d8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B5.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: MemberExpr 0x5637768cf518 <lcode.c:369:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768cf500 <col:40> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cf4d8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B5.10]->u
  12: MemberExpr 0x5637768cf550 <lcode.c:369:40, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768cf518 <col:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768cf500 <col:40> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768cf4d8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B5.11].s
  13: MemberExpr 0x5637768cf588 <lcode.c:369:40, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768cf550 <col:40, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768cf518 <col:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768cf500 <col:40> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cf4d8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B5.12].info
  14: ImplicitCastExpr 0x5637768cf690 <lcode.c:369:40, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768cf588 <col:40, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768cf550 <col:40, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768cf518 <col:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768cf500 <col:40> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768cf4d8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B5.13] (ImplicitCastExpr, LValueToRValue, int)
  15: IntegerLiteral 0x5637768cf5c0 <lcode.c:369:53> 'int' 0
0
  16: CallExpr 0x5637768cf5f8 <lcode.c:369:9, col:54> 'int'
|-ImplicitCastExpr 0x5637768cf5e0 <col:9> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768cf438 <col:9> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768cf648 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768cf460 <col:22> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768cf660 <col:26> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768cf488 <col:26> 'int' EnumConstant 0x56377686b4e0 'OP_MOVE' 'int'
|-ImplicitCastExpr 0x5637768cf678 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768cf4b0 <col:35> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
|-ImplicitCastExpr 0x5637768cf690 <col:40, col:47> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768cf588 <col:40, col:47> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768cf550 <col:40, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768cf518 <col:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768cf500 <col:40> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768cf4d8 <col:40> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
`-IntegerLiteral 0x5637768cf5c0 <col:53> 'int' 0
[B5.2]([B5.4], [B5.6], [B5.8], [B5.14], [B5.15])
   Preds (1): B6
   Succs (1): B4

 [B6]
  case VNONRELOC:
   1: DeclRefExpr 0x5637768cf2d0 <lcode.c:368:11> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   2: ImplicitCastExpr 0x5637768cf3e0 <lcode.c:368:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768cf2d0 <col:11> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768cf2f8 <lcode.c:368:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768cf320 <lcode.c:368:18> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cf2f8 <col:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B6.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x5637768cf338 <lcode.c:368:18, col:21> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768cf320 <col:18> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cf2f8 <col:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B6.4]->u
   6: MemberExpr 0x5637768cf370 <lcode.c:368:18, col:23> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768cf338 <col:18, col:21> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768cf320 <col:18> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768cf2f8 <col:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B6.5].s
   7: MemberExpr 0x5637768cf3a8 <lcode.c:368:18, col:25> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768cf370 <col:18, col:23> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768cf338 <col:18, col:21> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768cf320 <col:18> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cf2f8 <col:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B6.6].info
   8: ImplicitCastExpr 0x5637768cf3f8 <lcode.c:368:18, col:25> 'int' <LValueToRValue>
`-MemberExpr 0x5637768cf3a8 <col:18, col:25> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768cf370 <col:18, col:23> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768cf338 <col:18, col:21> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768cf320 <col:18> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768cf2f8 <col:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x5637768cf410 <lcode.c:368:11, col:25> 'int' '!='
|-ImplicitCastExpr 0x5637768cf3e0 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768cf2d0 <col:11> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
`-ImplicitCastExpr 0x5637768cf3f8 <col:18, col:25> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768cf3a8 <col:18, col:25> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768cf370 <col:18, col:23> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768cf338 <col:18, col:21> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768cf320 <col:18> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768cf2f8 <col:18> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B6.2] != [B6.8]
   T: if [B6.9]
   Preds (1): B2
   Succs (2): B5 B4

 [B7]
  case VRELOCABLE:
   1: DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768ce798 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
([B7.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768ce7b0 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B7.2]->f
   4: ImplicitCastExpr 0x5637768ce7e8 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768ce7b0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768ce800 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768ce7e8 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768ce7b0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B7.4]->code
   6: ImplicitCastExpr 0x5637768ce940 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768ce800 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768ce7e8 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768ce7b0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B7.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768ce880 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
([B7.7]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768ce898 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B7.8]->u
  10: MemberExpr 0x5637768ce8d0 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768ce898 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B7.9].s
  11: MemberExpr 0x5637768ce908 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768ce8d0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768ce898 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B7.10].info
  12: ImplicitCastExpr 0x5637768ce958 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ce908 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768ce8d0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768ce898 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B7.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x5637768ce970 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768ce940 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768ce800 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768ce7e8 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768ce7b0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768ce958 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768ce908 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768ce8d0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768ce898 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B7.6][[B7.12]]
  14: UnaryOperator 0x5637768ce9b8 <lcode.c:363:25, ./lcode.h:39:52> 'Instruction *' prefix '&'
`-ParenExpr 0x5637768ce998 <col:23, col:52> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x5637768ce970 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x5637768ce940 <col:24, col:33> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x5637768ce800 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   `-ImplicitCastExpr 0x5637768ce7e8 <col:24, col:30> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x5637768ce7b0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |       `-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |         `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
    |           `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768ce958 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
      `-MemberExpr 0x5637768ce908 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
        `-MemberExpr 0x5637768ce8d0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
          `-MemberExpr 0x5637768ce898 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
            `-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
              `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
                `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
&([B7.13])
  15: DeclStmt 0x5637768ce9d8 <lcode.c:363:7, col:40>col:20
`-VarDecl 0x5637768ce6f0 <col:7, ./lcode.h:39:52> lcode.c:363:20 used pc 'Instruction *' cinit
  `-UnaryOperator 0x5637768ce9b8 <col:25, ./lcode.h:39:52> 'Instruction *' prefix '&'
    `-ParenExpr 0x5637768ce998 <col:23, col:52> 'Instruction':'unsigned int' lvalue
      `-ArraySubscriptExpr 0x5637768ce970 <col:24, col:51> 'Instruction':'unsigned int' lvalue
        |-ImplicitCastExpr 0x5637768ce940 <col:24, col:33> 'Instruction *' <LValueToRValue>
        | `-MemberExpr 0x5637768ce800 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
        |   `-ImplicitCastExpr 0x5637768ce7e8 <col:24, col:30> 'Proto *' <LValueToRValue>
        |     `-MemberExpr 0x5637768ce7b0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
        |       `-ImplicitCastExpr 0x5637768ce798 <col:24, col:27> 'FuncState *' <LValueToRValue>
        |         `-ParenExpr 0x5637768ce778 <col:24, col:27> 'FuncState *' lvalue
        |           `-DeclRefExpr 0x5637768ce750 <lcode.c:363:34> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
        `-ImplicitCastExpr 0x5637768ce958 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
          `-MemberExpr 0x5637768ce908 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
            `-MemberExpr 0x5637768ce8d0 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
              `-MemberExpr 0x5637768ce898 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
                `-ImplicitCastExpr 0x5637768ce880 <col:38, col:40> 'expdesc *' <LValueToRValue>
                  `-ParenExpr 0x5637768ce860 <col:38, col:40> 'expdesc *' lvalue
                    `-DeclRefExpr 0x5637768ce838 <lcode.c:363:38> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
Instruction *pc = &((fs)->f->code[(e)->u.s.info]);
  16: DeclRefExpr 0x5637768cea70 <lcode.c:364:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
pc
  17: ImplicitCastExpr 0x5637768cea98 <lcode.c:364:17> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768cea70 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
[B7.16] (ImplicitCastExpr, LValueToRValue, Instruction *)
  18: UnaryOperator 0x5637768ceab0 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768cea98 <col:17> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cea70 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
*[B7.17]
  19: ImplicitCastExpr 0x5637768ced40 <./lopcodes.h:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768cead0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-UnaryOperator 0x5637768ceab0 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768cea98 <col:17> 'Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cea70 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
([B7.18]) (ImplicitCastExpr, LValueToRValue, Instruction)
  20: IntegerLiteral 0x5637768ceaf0 <./lopcodes.h:71:39> 'int' 0
0
  21: CStyleCastExpr 0x5637768ceb20 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
(Instruction)[B7.20] (CStyleCastExpr, IntegralCast, Instruction)
  22: UnaryOperator 0x5637768ceb48 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
~[B7.21]
  23: IntegerLiteral 0x5637768ceb88 <./lopcodes.h:40:17> 'int' 8
8
  24: BinaryOperator 0x5637768ceba8 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
`-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
([B7.22]) << [B7.23]
  25: UnaryOperator 0x5637768cebf0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768cebd0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ceba8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
~([B7.24])
  26: IntegerLiteral 0x5637768cec30 <./lopcodes.h:44:17> 'int' 0
0
  27: IntegerLiteral 0x5637768cec50 <./lopcodes.h:42:18> 'int' 6
6
  28: BinaryOperator 0x5637768cec70 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768cec30 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768cec50 <line:42:18> 'int' 6
[B7.26] + [B7.27]
  29: BinaryOperator 0x5637768cecb8 <./lopcodes.h:71:21, line:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768cec10 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768cebf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768cebd0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768ceba8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
`-ParenExpr 0x5637768cec98 <line:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768cec70 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768cec30 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768cec50 <line:42:18> 'int' 6
([B7.25]) << ([B7.28])
  30: UnaryOperator 0x5637768ced00 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768cece0 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768cecb8 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768cec10 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768cebf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768cebd0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768ceba8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768cec98 <line:45:16, col:33> 'int'
      `-BinaryOperator 0x5637768cec70 <line:44:17, line:42:18> 'int' '+'
        |-IntegerLiteral 0x5637768cec30 <line:44:17> 'int' 0
        `-IntegerLiteral 0x5637768cec50 <line:42:18> 'int' 6
~([B7.29])
  31: BinaryOperator 0x5637768ced58 <./lopcodes.h:85:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768ced40 <line:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768cead0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-UnaryOperator 0x5637768ceab0 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5637768cea98 <col:17> 'Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768cea70 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
`-ParenExpr 0x5637768ced20 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768ced00 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768cece0 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768cecb8 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768cec10 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768cebf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768cebd0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768ceba8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
        `-ParenExpr 0x5637768cec98 <line:45:16, col:33> 'int'
          `-BinaryOperator 0x5637768cec70 <line:44:17, line:42:18> 'int' '+'
            |-IntegerLiteral 0x5637768cec30 <line:44:17> 'int' 0
            `-IntegerLiteral 0x5637768cec50 <line:42:18> 'int' 6
[B7.19] & ([B7.30])
  32: DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
  33: ImplicitCastExpr 0x5637768cee28 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768cee08 <col:26, col:30> 'int' lvalue
  `-DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
([B7.32]) (ImplicitCastExpr, LValueToRValue, int)
  34: CStyleCastExpr 0x5637768cee40 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768cee28 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768cee08 <col:26, col:30> 'int' lvalue
    `-DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
(Instruction)[B7.33] (CStyleCastExpr, IntegralCast, Instruction)
  35: IntegerLiteral 0x5637768cee88 <./lopcodes.h:44:17> 'int' 0
0
  36: IntegerLiteral 0x5637768ceea8 <./lopcodes.h:42:18> 'int' 6
6
  37: BinaryOperator 0x5637768ceec8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768cee88 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768ceea8 <line:42:18> 'int' 6
[B7.35] + [B7.36]
  38: BinaryOperator 0x5637768cef10 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768cee68 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768cee40 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768cee28 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768cee08 <col:26, col:30> 'int' lvalue
|       `-DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
`-ParenExpr 0x5637768ceef0 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768ceec8 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768cee88 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768ceea8 <line:42:18> 'int' 6
([B7.34]) << ([B7.37])
  39: IntegerLiteral 0x5637768cef58 <./lopcodes.h:71:39> 'int' 0
0
  40: CStyleCastExpr 0x5637768cef88 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
(Instruction)[B7.39] (CStyleCastExpr, IntegralCast, Instruction)
  41: UnaryOperator 0x5637768cefb0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
~[B7.40]
  42: IntegerLiteral 0x5637768ceff0 <./lopcodes.h:40:17> 'int' 8
8
  43: BinaryOperator 0x5637768cf010 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768cefd0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768cefb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
`-IntegerLiteral 0x5637768ceff0 <line:40:17> 'int' 8
([B7.41]) << [B7.42]
  44: UnaryOperator 0x5637768cf058 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768cf038 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768cf010 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768cefd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768cefb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768ceff0 <line:40:17> 'int' 8
~([B7.43])
  45: IntegerLiteral 0x5637768cf098 <./lopcodes.h:44:17> 'int' 0
0
  46: IntegerLiteral 0x5637768cf0b8 <./lopcodes.h:42:18> 'int' 6
6
  47: BinaryOperator 0x5637768cf0d8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768cf098 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768cf0b8 <line:42:18> 'int' 6
[B7.45] + [B7.46]
  48: BinaryOperator 0x5637768cf120 <./lopcodes.h:71:21, line:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768cf078 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768cf058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768cf038 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768cf010 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768cefd0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768cefb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768ceff0 <line:40:17> 'int' 8
`-ParenExpr 0x5637768cf100 <line:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768cf0d8 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768cf098 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768cf0b8 <line:42:18> 'int' 6
([B7.44]) << ([B7.47])
  49: BinaryOperator 0x5637768cf168 <./lopcodes.h:86:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768cef38 <line:86:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768cef10 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768cee68 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768cee40 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x5637768cee28 <col:26, col:30> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x5637768cee08 <col:26, col:30> 'int' lvalue
|   |       `-DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
|   `-ParenExpr 0x5637768ceef0 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5637768ceec8 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5637768cee88 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5637768ceea8 <line:42:18> 'int' 6
`-ParenExpr 0x5637768cf148 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768cf120 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768cf078 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768cf058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768cf038 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768cf010 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768cefd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768cefb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768ceff0 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768cf100 <line:45:16, col:33> 'int'
      `-BinaryOperator 0x5637768cf0d8 <line:44:17, line:42:18> 'int' '+'
        |-IntegerLiteral 0x5637768cf098 <line:44:17> 'int' 0
        `-IntegerLiteral 0x5637768cf0b8 <line:42:18> 'int' 6
([B7.38]) & ([B7.48])
  50: BinaryOperator 0x5637768cf1b0 <./lopcodes.h:85:31, line:86:53> 'unsigned int' '|'
|-ParenExpr 0x5637768ced80 <line:85:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768ced58 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768ced40 <line:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768cead0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-UnaryOperator 0x5637768ceab0 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5637768cea98 <col:17> 'Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768cea70 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
|   `-ParenExpr 0x5637768ced20 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768ced00 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768cece0 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768cecb8 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768cec10 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768cebf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768cebd0 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768ceba8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
|           `-ParenExpr 0x5637768cec98 <line:45:16, col:33> 'int'
|             `-BinaryOperator 0x5637768cec70 <line:44:17, line:42:18> 'int' '+'
|               |-IntegerLiteral 0x5637768cec30 <line:44:17> 'int' 0
|               `-IntegerLiteral 0x5637768cec50 <line:42:18> 'int' 6
`-ParenExpr 0x5637768cf190 <line:86:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768cf168 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768cef38 <line:86:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768cef10 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768cee68 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768cee40 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x5637768cee28 <col:26, col:30> 'int' <LValueToRValue>
    |   |     `-ParenExpr 0x5637768cee08 <col:26, col:30> 'int' lvalue
    |   |       `-DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
    |   `-ParenExpr 0x5637768ceef0 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5637768ceec8 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5637768cee88 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5637768ceea8 <line:42:18> 'int' 6
    `-ParenExpr 0x5637768cf148 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768cf120 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768cf078 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768cf058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768cf038 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768cf010 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768cefd0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768cefb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768ceff0 <line:40:17> 'int' 8
        `-ParenExpr 0x5637768cf100 <line:45:16, col:33> 'int'
          `-BinaryOperator 0x5637768cf0d8 <line:44:17, line:42:18> 'int' '+'
            |-IntegerLiteral 0x5637768cf098 <line:44:17> 'int' 0
            `-IntegerLiteral 0x5637768cf0b8 <line:42:18> 'int' 6
([B7.31]) | ([B7.49])
  51: DeclRefExpr 0x5637768ce9f0 <lcode.c:364:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
pc
  52: ImplicitCastExpr 0x5637768cea18 <lcode.c:364:17> 'Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5637768ce9f0 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
[B7.51] (ImplicitCastExpr, LValueToRValue, Instruction *)
  53: UnaryOperator 0x5637768cea30 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768cea18 <col:17> 'Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ce9f0 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
*[B7.52]
  54: BinaryOperator 0x5637768cf1f8 <./lopcodes.h:85:24, line:86:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768cea50 <line:85:24, col:26> 'Instruction':'unsigned int' lvalue
| `-UnaryOperator 0x5637768cea30 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
|   `-ImplicitCastExpr 0x5637768cea18 <col:17> 'Instruction *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768ce9f0 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
`-ParenExpr 0x5637768cf1d8 <./lopcodes.h:85:30, line:86:54> 'unsigned int'
  `-BinaryOperator 0x5637768cf1b0 <line:85:31, line:86:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768ced80 <line:85:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768ced58 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768ced40 <line:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768cead0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-UnaryOperator 0x5637768ceab0 <lcode.c:364:16, col:17> 'Instruction':'unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5637768cea98 <col:17> 'Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768cea70 <col:17> 'Instruction *' lvalue Var 0x5637768ce6f0 'pc' 'Instruction *'
    |   `-ParenExpr 0x5637768ced20 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768ced00 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768cece0 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768cecb8 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768cec10 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768cebf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768cebd0 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768ceba8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768ceb68 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768ceb48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768ceb20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768ceaf0 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768ceb88 <line:40:17> 'int' 8
    |           `-ParenExpr 0x5637768cec98 <line:45:16, col:33> 'int'
    |             `-BinaryOperator 0x5637768cec70 <line:44:17, line:42:18> 'int' '+'
    |               |-IntegerLiteral 0x5637768cec30 <line:44:17> 'int' 0
    |               `-IntegerLiteral 0x5637768cec50 <line:42:18> 'int' 6
    `-ParenExpr 0x5637768cf190 <line:86:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768cf168 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768cef38 <line:86:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768cef10 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768cee68 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768cee40 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ImplicitCastExpr 0x5637768cee28 <col:26, col:30> 'int' <LValueToRValue>
        |   |     `-ParenExpr 0x5637768cee08 <col:26, col:30> 'int' lvalue
        |   |       `-DeclRefExpr 0x5637768ceda0 <lcode.c:364:21> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
        |   `-ParenExpr 0x5637768ceef0 <./lopcodes.h:45:16, col:33> 'int'
        |     `-BinaryOperator 0x5637768ceec8 <line:44:17, line:42:18> 'int' '+'
        |       |-IntegerLiteral 0x5637768cee88 <line:44:17> 'int' 0
        |       `-IntegerLiteral 0x5637768ceea8 <line:42:18> 'int' 6
        `-ParenExpr 0x5637768cf148 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768cf120 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768cf078 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768cf058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768cf038 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768cf010 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768cefd0 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768cefb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768cef88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768cef58 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768ceff0 <line:40:17> 'int' 8
            `-ParenExpr 0x5637768cf100 <line:45:16, col:33> 'int'
              `-BinaryOperator 0x5637768cf0d8 <line:44:17, line:42:18> 'int' '+'
                |-IntegerLiteral 0x5637768cf098 <line:44:17> 'int' 0
                `-IntegerLiteral 0x5637768cf0b8 <line:42:18> 'int' 6
([B7.53]) = ([B7.50])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B8]
  case VKNUM:
   1: DeclRefExpr 0x5637768ce320 <lcode.c:359:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
   2: ImplicitCastExpr 0x5637768ce598 <lcode.c:359:7> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ce320 <col:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
   3: DeclRefExpr 0x5637768ce348 <lcode.c:359:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ce5f8 <lcode.c:359:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ce348 <col:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ce370 <lcode.c:359:24> 'int' EnumConstant 0x56377686b528 'OP_LOADK' 'int'
OP_LOADK
   6: ImplicitCastExpr 0x5637768ce610 <lcode.c:359:24> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ce370 <col:24> 'int' EnumConstant 0x56377686b528 'OP_LOADK' 'int'
[B8.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768ce398 <lcode.c:359:34> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   8: ImplicitCastExpr 0x5637768ce628 <lcode.c:359:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ce398 <col:34> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B8.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768ce3c0 <lcode.c:359:39> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
luaK_numberK
  10: ImplicitCastExpr 0x5637768ce518 <lcode.c:359:39> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ce3c0 <col:39> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
[B8.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, lua_Number))
  11: DeclRefExpr 0x5637768ce3e8 <lcode.c:359:52> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768ce568 <lcode.c:359:52> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ce3e8 <col:52> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B8.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: DeclRefExpr 0x5637768ce410 <lcode.c:359:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
  14: ImplicitCastExpr 0x5637768ce438 <lcode.c:359:56> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.13] (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: MemberExpr 0x5637768ce450 <lcode.c:359:56, col:59> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768ce438 <col:56> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.14]->u
  16: MemberExpr 0x5637768ce488 <lcode.c:359:56, col:61> 'lua_Number':'double' lvalue .nval 0x56377687d748
`-MemberExpr 0x5637768ce450 <col:56, col:59> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768ce438 <col:56> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.15].nval
  17: ImplicitCastExpr 0x5637768ce580 <lcode.c:359:56, col:61> 'lua_Number':'double' <LValueToRValue>
`-MemberExpr 0x5637768ce488 <col:56, col:61> 'lua_Number':'double' lvalue .nval 0x56377687d748
  `-MemberExpr 0x5637768ce450 <col:56, col:59> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768ce438 <col:56> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.16] (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: CallExpr 0x5637768ce530 <lcode.c:359:39, col:65> 'int'
|-ImplicitCastExpr 0x5637768ce518 <col:39> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ce3c0 <col:39> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
|-ImplicitCastExpr 0x5637768ce568 <col:52> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ce3e8 <col:52> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768ce580 <col:56, col:61> 'lua_Number':'double' <LValueToRValue>
  `-MemberExpr 0x5637768ce488 <col:56, col:61> 'lua_Number':'double' lvalue .nval 0x56377687d748
    `-MemberExpr 0x5637768ce450 <col:56, col:59> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768ce438 <col:56> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.10]([B8.12], [B8.17])
  19: ImplicitCastExpr 0x5637768ce640 <lcode.c:359:39, col:65> 'unsigned int' <IntegralCast>
`-CallExpr 0x5637768ce530 <col:39, col:65> 'int'
  |-ImplicitCastExpr 0x5637768ce518 <col:39> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768ce3c0 <col:39> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
  |-ImplicitCastExpr 0x5637768ce568 <col:52> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768ce3e8 <col:52> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768ce580 <col:56, col:61> 'lua_Number':'double' <LValueToRValue>
    `-MemberExpr 0x5637768ce488 <col:56, col:61> 'lua_Number':'double' lvalue .nval 0x56377687d748
      `-MemberExpr 0x5637768ce450 <col:56, col:59> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768ce438 <col:56> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.18] (ImplicitCastExpr, IntegralCast, unsigned int)
  20: CallExpr 0x5637768ce5b0 <lcode.c:359:7, col:66> 'int'
|-ImplicitCastExpr 0x5637768ce598 <col:7> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ce320 <col:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x5637768ce5f8 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ce348 <col:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ce610 <col:24> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ce370 <col:24> 'int' EnumConstant 0x56377686b528 'OP_LOADK' 'int'
|-ImplicitCastExpr 0x5637768ce628 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ce398 <col:34> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
`-ImplicitCastExpr 0x5637768ce640 <col:39, col:65> 'unsigned int' <IntegralCast>
  `-CallExpr 0x5637768ce530 <col:39, col:65> 'int'
    |-ImplicitCastExpr 0x5637768ce518 <col:39> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768ce3c0 <col:39> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
    |-ImplicitCastExpr 0x5637768ce568 <col:52> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768ce3e8 <col:52> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768ce580 <col:56, col:61> 'lua_Number':'double' <LValueToRValue>
      `-MemberExpr 0x5637768ce488 <col:56, col:61> 'lua_Number':'double' lvalue .nval 0x56377687d748
        `-MemberExpr 0x5637768ce450 <col:56, col:59> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
          `-ImplicitCastExpr 0x5637768ce438 <col:56> 'expdesc *' <LValueToRValue>
            `-DeclRefExpr 0x5637768ce410 <col:56> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B8.2]([B8.4], [B8.6], [B8.8], [B8.19])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B9]
  case VK:
   1: DeclRefExpr 0x5637768ce038 <lcode.c:355:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
   2: ImplicitCastExpr 0x5637768ce1c0 <lcode.c:355:7> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ce038 <col:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
   3: DeclRefExpr 0x5637768ce060 <lcode.c:355:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ce220 <lcode.c:355:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ce060 <col:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ce088 <lcode.c:355:24> 'int' EnumConstant 0x56377686b528 'OP_LOADK' 'int'
OP_LOADK
   6: ImplicitCastExpr 0x5637768ce238 <lcode.c:355:24> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ce088 <col:24> 'int' EnumConstant 0x56377686b528 'OP_LOADK' 'int'
[B9.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768ce0b0 <lcode.c:355:34> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   8: ImplicitCastExpr 0x5637768ce250 <lcode.c:355:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768ce0b0 <col:34> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B9.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768ce0d8 <lcode.c:355:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
  10: ImplicitCastExpr 0x5637768ce100 <lcode.c:355:39> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: MemberExpr 0x5637768ce118 <lcode.c:355:39, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768ce100 <col:39> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.10]->u
  12: MemberExpr 0x5637768ce150 <lcode.c:355:39, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768ce118 <col:39, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768ce100 <col:39> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.11].s
  13: MemberExpr 0x5637768ce188 <lcode.c:355:39, col:46> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768ce150 <col:39, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768ce118 <col:39, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768ce100 <col:39> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.12].info
  14: ImplicitCastExpr 0x5637768ce268 <lcode.c:355:39, col:46> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ce188 <col:39, col:46> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768ce150 <col:39, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768ce118 <col:39, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768ce100 <col:39> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.13] (ImplicitCastExpr, LValueToRValue, int)
  15: ImplicitCastExpr 0x5637768ce280 <lcode.c:355:39, col:46> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768ce268 <col:39, col:46> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768ce188 <col:39, col:46> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768ce150 <col:39, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768ce118 <col:39, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768ce100 <col:39> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: CallExpr 0x5637768ce1d8 <lcode.c:355:7, col:50> 'int'
|-ImplicitCastExpr 0x5637768ce1c0 <col:7> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ce038 <col:7> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x56377687f6d8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x5637768ce220 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ce060 <col:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ce238 <col:24> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ce088 <col:24> 'int' EnumConstant 0x56377686b528 'OP_LOADK' 'int'
|-ImplicitCastExpr 0x5637768ce250 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768ce0b0 <col:34> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
`-ImplicitCastExpr 0x5637768ce280 <col:39, col:46> 'unsigned int' <IntegralCast>
  `-ImplicitCastExpr 0x5637768ce268 <col:39, col:46> 'int' <LValueToRValue>
    `-MemberExpr 0x5637768ce188 <col:39, col:46> 'int' lvalue .info 0x56377687d5f8
      `-MemberExpr 0x5637768ce150 <col:39, col:44> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
        `-MemberExpr 0x5637768ce118 <col:39, col:42> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
          `-ImplicitCastExpr 0x5637768ce100 <col:39> 'expdesc *' <LValueToRValue>
            `-DeclRefExpr 0x5637768ce0d8 <col:39> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B9.2]([B9.4], [B9.6], [B9.8], [B9.15])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B10]
  case VFALSE:
   Preds (1): B2
   Succs (1): B11

 [B11]
  case VTRUE:
   1: DeclRefExpr 0x5637768cdd30 <lcode.c:351:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768cdf00 <lcode.c:351:7> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768cdd30 <col:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768cdd58 <lcode.c:351:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768cdf68 <lcode.c:351:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768cdd58 <col:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768cdd80 <lcode.c:351:24> 'int' EnumConstant 0x56377686b570 'OP_LOADBOOL' 'int'
OP_LOADBOOL
   6: ImplicitCastExpr 0x5637768cdf80 <lcode.c:351:24> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768cdd80 <col:24> 'int' EnumConstant 0x56377686b570 'OP_LOADBOOL' 'int'
[B11.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768cdda8 <lcode.c:351:37> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   8: ImplicitCastExpr 0x5637768cdf98 <lcode.c:351:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768cdda8 <col:37> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B11.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768cddd0 <lcode.c:351:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
e
  10: ImplicitCastExpr 0x5637768cddf8 <lcode.c:351:42> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768cddd0 <col:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B11.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: MemberExpr 0x5637768cde10 <lcode.c:351:42, col:45> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768cddf8 <col:42> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768cddd0 <col:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B11.10]->k
  12: ImplicitCastExpr 0x5637768cde70 <lcode.c:351:42, col:45> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768cde10 <col:42, col:45> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768cddf8 <col:42> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768cddd0 <col:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B11.11] (ImplicitCastExpr, LValueToRValue, expkind)
  13: ImplicitCastExpr 0x5637768cde88 <lcode.c:351:42, col:45> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768cde70 <col:42, col:45> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768cde10 <col:42, col:45> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768cddf8 <col:42> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768cddd0 <col:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
[B11.12] (ImplicitCastExpr, IntegralCast, unsigned int)
  14: DeclRefExpr 0x5637768cde48 <lcode.c:351:50> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
VTRUE
  15: ImplicitCastExpr 0x5637768cdea0 <lcode.c:351:50> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768cde48 <col:50> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B11.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: BinaryOperator 0x5637768cdeb8 <lcode.c:351:42, col:50> 'int' '=='
|-ImplicitCastExpr 0x5637768cde88 <col:42, col:45> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768cde70 <col:42, col:45> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768cde10 <col:42, col:45> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768cddf8 <col:42> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768cddd0 <col:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768cdea0 <col:50> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768cde48 <col:50> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B11.13] == [B11.15]
  17: IntegerLiteral 0x5637768cdee0 <lcode.c:351:57> 'int' 0
0
  18: CallExpr 0x5637768cdf18 <lcode.c:351:7, col:58> 'int'
|-ImplicitCastExpr 0x5637768cdf00 <col:7> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768cdd30 <col:7> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768cdf68 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768cdd58 <col:20> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768cdf80 <col:24> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768cdd80 <col:24> 'int' EnumConstant 0x56377686b570 'OP_LOADBOOL' 'int'
|-ImplicitCastExpr 0x5637768cdf98 <col:37> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768cdda8 <col:37> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
|-BinaryOperator 0x5637768cdeb8 <col:42, col:50> 'int' '=='
| |-ImplicitCastExpr 0x5637768cde88 <col:42, col:45> 'unsigned int' <IntegralCast>
| | `-ImplicitCastExpr 0x5637768cde70 <col:42, col:45> 'expkind':'expkind' <LValueToRValue>
| |   `-MemberExpr 0x5637768cde10 <col:42, col:45> 'expkind':'expkind' lvalue ->k 0x56377687d440
| |     `-ImplicitCastExpr 0x5637768cddf8 <col:42> 'expdesc *' <LValueToRValue>
| |       `-DeclRefExpr 0x5637768cddd0 <col:42> 'expdesc *' lvalue ParmVar 0x5637768cd5a0 'e' 'expdesc *'
| `-ImplicitCastExpr 0x5637768cdea0 <col:50> 'unsigned int' <IntegralCast>
|   `-DeclRefExpr 0x5637768cde48 <col:50> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
`-IntegerLiteral 0x5637768cdee0 <col:57> 'int' 0
[B11.2]([B11.4], [B11.6], [B11.8], [B11.16], [B11.17])
   T: break;
   Preds (2): B2 B10
   Succs (1): B1

 [B12]
  case VNIL:
   1: DeclRefExpr 0x5637768cdb28 <lcode.c:347:7> 'void (FuncState *, int, int)' Function 0x5637768a9948 'luaK_nil' 'void (FuncState *, int, int)'
luaK_nil
   2: ImplicitCastExpr 0x5637768cdbc0 <lcode.c:347:7> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768cdb28 <col:7> 'void (FuncState *, int, int)' Function 0x5637768a9948 'luaK_nil' 'void (FuncState *, int, int)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
   3: DeclRefExpr 0x5637768cdb50 <lcode.c:347:16> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768cdc18 <lcode.c:347:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768cdb50 <col:16> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768cdb78 <lcode.c:347:20> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
reg
   6: ImplicitCastExpr 0x5637768cdc30 <lcode.c:347:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768cdb78 <col:20> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
[B12.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5637768cdba0 <lcode.c:347:25> 'int' 1
1
   8: CallExpr 0x5637768cdbd8 <lcode.c:347:7, col:26> 'void'
|-ImplicitCastExpr 0x5637768cdbc0 <col:7> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768cdb28 <col:7> 'void (FuncState *, int, int)' Function 0x5637768a9948 'luaK_nil' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x5637768cdc18 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768cdb50 <col:16> 'FuncState *' lvalue ParmVar 0x5637768cd530 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768cdc30 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768cdb78 <col:20> 'int' lvalue ParmVar 0x5637768cd618 'reg' 'int'
`-IntegerLiteral 0x5637768cdba0 <col:25> 'int' 1
[B12.2]([B12.4], [B12.6], [B12.7])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B0 (EXIT)]
   Preds (2): B1 B3
