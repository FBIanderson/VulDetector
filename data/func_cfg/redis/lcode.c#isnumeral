static int isnumeral(expdesc *e)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: BinaryOperator 0x5637768a9738 <lcode.c:31:11, ./lcode.h:20:20> 'int' '&&'
|-BinaryOperator 0x5637768a95f8 <lcode.c:31:11, ./lcode.h:20:20> 'int' '&&'
| |-BinaryOperator 0x5637768a94b8 <lcode.c:31:11, col:19> 'int' '=='
| | |-ImplicitCastExpr 0x5637768a9488 <col:11, col:14> 'unsigned int' <IntegralCast>
| | | `-ImplicitCastExpr 0x5637768a9470 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
| | |   `-MemberExpr 0x5637768a9410 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
| | |     `-ImplicitCastExpr 0x5637768a93f8 <col:11> 'expdesc *' <LValueToRValue>
| | |       `-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
| | `-ImplicitCastExpr 0x5637768a94a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-DeclRefExpr 0x5637768a9448 <col:19> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
| `-BinaryOperator 0x5637768a95d0 <col:28, ./lcode.h:20:20> 'int' '=='
|   |-ImplicitCastExpr 0x5637768a95b8 <lcode.c:31:28, col:31> 'int' <LValueToRValue>
|   | `-MemberExpr 0x5637768a9520 <col:28, col:31> 'int' lvalue ->t 0x56377687d890
|   |   `-ImplicitCastExpr 0x5637768a9508 <col:28> 'expdesc *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5637768a94e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
|   `-ParenExpr 0x5637768a9598 <./lcode.h:20:17, col:20> 'int'
|     `-UnaryOperator 0x5637768a9578 <col:18, col:19> 'int' prefix '-'
|       `-IntegerLiteral 0x5637768a9558 <col:19> 'int' 1
`-BinaryOperator 0x5637768a9710 <lcode.c:31:47, ./lcode.h:20:20> 'int' '=='
  |-ImplicitCastExpr 0x5637768a96f8 <lcode.c:31:47, col:50> 'int' <LValueToRValue>
  | `-MemberExpr 0x5637768a9660 <col:47, col:50> 'int' lvalue ->f 0x56377687d8f0
  |   `-ImplicitCastExpr 0x5637768a9648 <col:47> 'expdesc *' <LValueToRValue>
  |     `-DeclRefExpr 0x5637768a9620 <col:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
  `-ParenExpr 0x5637768a96d8 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x5637768a96b8 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x5637768a9698 <col:19> 'int' 1
[B4.8] && [B3.7] && [B2.7]
   2: ReturnStmt 0x5637768a9780 <lcode.c:31:3, col:62>
`-ParenExpr 0x5637768a9760 <col:10, col:62> 'int'
  `-BinaryOperator 0x5637768a9738 <col:11, ./lcode.h:20:20> 'int' '&&'
    |-BinaryOperator 0x5637768a95f8 <lcode.c:31:11, ./lcode.h:20:20> 'int' '&&'
    | |-BinaryOperator 0x5637768a94b8 <lcode.c:31:11, col:19> 'int' '=='
    | | |-ImplicitCastExpr 0x5637768a9488 <col:11, col:14> 'unsigned int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x5637768a9470 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
    | | |   `-MemberExpr 0x5637768a9410 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
    | | |     `-ImplicitCastExpr 0x5637768a93f8 <col:11> 'expdesc *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
    | | `-ImplicitCastExpr 0x5637768a94a0 <col:19> 'unsigned int' <IntegralCast>
    | |   `-DeclRefExpr 0x5637768a9448 <col:19> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
    | `-BinaryOperator 0x5637768a95d0 <col:28, ./lcode.h:20:20> 'int' '=='
    |   |-ImplicitCastExpr 0x5637768a95b8 <lcode.c:31:28, col:31> 'int' <LValueToRValue>
    |   | `-MemberExpr 0x5637768a9520 <col:28, col:31> 'int' lvalue ->t 0x56377687d890
    |   |   `-ImplicitCastExpr 0x5637768a9508 <col:28> 'expdesc *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x5637768a94e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
    |   `-ParenExpr 0x5637768a9598 <./lcode.h:20:17, col:20> 'int'
    |     `-UnaryOperator 0x5637768a9578 <col:18, col:19> 'int' prefix '-'
    |       `-IntegerLiteral 0x5637768a9558 <col:19> 'int' 1
    `-BinaryOperator 0x5637768a9710 <lcode.c:31:47, ./lcode.h:20:20> 'int' '=='
      |-ImplicitCastExpr 0x5637768a96f8 <lcode.c:31:47, col:50> 'int' <LValueToRValue>
      | `-MemberExpr 0x5637768a9660 <col:47, col:50> 'int' lvalue ->f 0x56377687d8f0
      |   `-ImplicitCastExpr 0x5637768a9648 <col:47> 'expdesc *' <LValueToRValue>
      |     `-DeclRefExpr 0x5637768a9620 <col:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
      `-ParenExpr 0x5637768a96d8 <./lcode.h:20:17, col:20> 'int'
        `-UnaryOperator 0x5637768a96b8 <col:18, col:19> 'int' prefix '-'
          `-IntegerLiteral 0x5637768a9698 <col:19> 'int' 1
return ([B1.1]);
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768a9620 <lcode.c:31:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768a9648 <lcode.c:31:47> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768a9620 <col:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B2.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768a9660 <lcode.c:31:47, col:50> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768a9648 <col:47> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a9620 <col:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B2.2]->f
   4: ImplicitCastExpr 0x5637768a96f8 <lcode.c:31:47, col:50> 'int' <LValueToRValue>
`-MemberExpr 0x5637768a9660 <col:47, col:50> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768a9648 <col:47> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a9620 <col:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5637768a9698 <./lcode.h:20:19> 'int' 1
1
   6: UnaryOperator 0x5637768a96b8 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768a9698 <col:19> 'int' 1
-[B2.5]
   7: BinaryOperator 0x5637768a9710 <lcode.c:31:47, ./lcode.h:20:20> 'int' '=='
|-ImplicitCastExpr 0x5637768a96f8 <lcode.c:31:47, col:50> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768a9660 <col:47, col:50> 'int' lvalue ->f 0x56377687d8f0
|   `-ImplicitCastExpr 0x5637768a9648 <col:47> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768a9620 <col:47> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
`-ParenExpr 0x5637768a96d8 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768a96b8 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768a9698 <col:19> 'int' 1
[B2.4] == ([B2.6])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5637768a94e0 <lcode.c:31:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768a9508 <lcode.c:31:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768a94e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B3.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768a9520 <lcode.c:31:28, col:31> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768a9508 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a94e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B3.2]->t
   4: ImplicitCastExpr 0x5637768a95b8 <lcode.c:31:28, col:31> 'int' <LValueToRValue>
`-MemberExpr 0x5637768a9520 <col:28, col:31> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768a9508 <col:28> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a94e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5637768a9558 <./lcode.h:20:19> 'int' 1
1
   6: UnaryOperator 0x5637768a9578 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768a9558 <col:19> 'int' 1
-[B3.5]
   7: BinaryOperator 0x5637768a95d0 <lcode.c:31:28, ./lcode.h:20:20> 'int' '=='
|-ImplicitCastExpr 0x5637768a95b8 <lcode.c:31:28, col:31> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768a9520 <col:28, col:31> 'int' lvalue ->t 0x56377687d890
|   `-ImplicitCastExpr 0x5637768a9508 <col:28> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768a94e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
`-ParenExpr 0x5637768a9598 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768a9578 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768a9558 <col:19> 'int' 1
[B3.4] == ([B3.6])
   T: [B4.8] && [B3.7] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5637768a93d0 <lcode.c:31:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768a93f8 <lcode.c:31:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B4.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768a9410 <lcode.c:31:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768a93f8 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B4.2]->k
   4: ImplicitCastExpr 0x5637768a9470 <lcode.c:31:11, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768a9410 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768a93f8 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B4.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768a9488 <lcode.c:31:11, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768a9470 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768a9410 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768a93f8 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
[B4.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768a9448 <lcode.c:31:19> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
VKNUM
   7: ImplicitCastExpr 0x5637768a94a0 <lcode.c:31:19> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768a9448 <col:19> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
[B4.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768a94b8 <lcode.c:31:11, col:19> 'int' '=='
|-ImplicitCastExpr 0x5637768a9488 <col:11, col:14> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768a9470 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768a9410 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768a93f8 <col:11> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768a93d0 <col:11> 'expdesc *' lvalue ParmVar 0x5637768a9218 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768a94a0 <col:19> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768a9448 <col:19> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
[B4.5] == [B4.7]
   T: [B4.8] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1
