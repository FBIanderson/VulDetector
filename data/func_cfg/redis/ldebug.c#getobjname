static const char *getobjname(lua_State *L, CallInfo *ci, int stackpos, const char **name)
 [B18 (ENTRY)]
   Succs (1): B17

 [B1]
   1: IntegerLiteral 0x555e9726a9b8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x555e9726a9f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x555e9726a9b8 <col:24> 'int' 0
(void *)[B1.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x555e9726aa38 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <NullToPointer>
`-ParenExpr 0x555e9726aa18 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x555e9726a9f0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x555e9726a9b8 <col:24> 'int' 0
([B1.2]) (ImplicitCastExpr, NullToPointer, const char *)
   4: ReturnStmt 0x555e9726aa50 <ldebug.c:540:3, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x555e9726aa38 <col:16, col:25> 'const char *' <NullToPointer>
  `-ParenExpr 0x555e9726aa18 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x555e9726a9f0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x555e9726a9b8 <col:24> 'int' 0
return [B1.3];
   Preds (4): B3 B10 B16 B17
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x555e972661d0 <ldebug.c:506:9> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
symbexec
   2: ImplicitCastExpr 0x555e97266270 <ldebug.c:506:9> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e972661d0 <col:9> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, Instruction (*)(const Proto *, int, int))
   3: DeclRefExpr 0x555e972661f8 <ldebug.c:506:18> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
   4: ImplicitCastExpr 0x555e972662c8 <ldebug.c:506:18> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e972661f8 <col:18> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B2.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: ImplicitCastExpr 0x555e972662e0 <ldebug.c:506:18> 'const Proto *' <BitCast>
`-ImplicitCastExpr 0x555e972662c8 <col:18> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e972661f8 <col:18> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B2.4] (ImplicitCastExpr, BitCast, const Proto *)
   6: DeclRefExpr 0x555e97266220 <ldebug.c:506:21> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
pc
   7: ImplicitCastExpr 0x555e972662f8 <ldebug.c:506:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97266220 <col:21> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
[B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x555e97266248 <ldebug.c:506:25> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
stackpos
   9: ImplicitCastExpr 0x555e97266310 <ldebug.c:506:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97266248 <col:25> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
[B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CallExpr 0x555e97266288 <ldebug.c:506:9, col:33> 'Instruction':'unsigned int'
|-ImplicitCastExpr 0x555e97266270 <col:9> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e972661d0 <col:9> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
|-ImplicitCastExpr 0x555e972662e0 <col:18> 'const Proto *' <BitCast>
| `-ImplicitCastExpr 0x555e972662c8 <col:18> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x555e972661f8 <col:18> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
|-ImplicitCastExpr 0x555e972662f8 <col:21> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97266220 <col:21> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
`-ImplicitCastExpr 0x555e97266310 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97266248 <col:25> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
[B2.2]([B2.5], [B2.7], [B2.9])
  11: DeclRefExpr 0x555e972661a8 <ldebug.c:506:5> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
  12: BinaryOperator 0x555e97266328 <ldebug.c:506:5, col:33> 'Instruction':'unsigned int' '='
|-DeclRefExpr 0x555e972661a8 <col:5> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-CallExpr 0x555e97266288 <col:9, col:33> 'Instruction':'unsigned int'
  |-ImplicitCastExpr 0x555e97266270 <col:9> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e972661d0 <col:9> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
  |-ImplicitCastExpr 0x555e972662e0 <col:18> 'const Proto *' <BitCast>
  | `-ImplicitCastExpr 0x555e972662c8 <col:18> 'Proto *' <LValueToRValue>
  |   `-DeclRefExpr 0x555e972661f8 <col:18> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  |-ImplicitCastExpr 0x555e972662f8 <col:21> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e97266220 <col:21> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
  `-ImplicitCastExpr 0x555e97266310 <col:25> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97266248 <col:25> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
[B2.11] = [B2.10]
  13: IntegerLiteral 0x555e97266350 <./llimits.h:62:31> 'int' 0
0
  14: CStyleCastExpr 0x555e97266380 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x555e97266350 <col:31> 'int' 0
(void)[B2.13] (CStyleCastExpr, ToVoid, void)
  15: DeclRefExpr 0x555e972663c8 <ldebug.c:508:24> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
  16: ImplicitCastExpr 0x555e97266430 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e972663f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e972663c8 <ldebug.c:508:24> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B2.15]) (ImplicitCastExpr, LValueToRValue, Instruction)
  17: IntegerLiteral 0x555e97266410 <./lopcodes.h:44:17> 'int' 0
0
  18: BinaryOperator 0x555e97266448 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97266430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e972663f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e972663c8 <ldebug.c:508:24> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x555e97266410 <./lopcodes.h:44:17> 'int' 0
[B2.16] >> [B2.17]
  19: IntegerLiteral 0x555e97266490 <./lopcodes.h:71:39> 'int' 0
0
  20: CStyleCastExpr 0x555e972664c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
(Instruction)[B2.19] (CStyleCastExpr, IntegralCast, Instruction)
  21: UnaryOperator 0x555e972664e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
~[B2.20]
  22: IntegerLiteral 0x555e97266528 <./lopcodes.h:42:18> 'int' 6
6
  23: BinaryOperator 0x555e97266548 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97266508 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e972664e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
`-IntegerLiteral 0x555e97266528 <line:42:18> 'int' 6
([B2.21]) << [B2.22]
  24: UnaryOperator 0x555e97266590 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97266570 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97266548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97266508 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e972664e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97266528 <line:42:18> 'int' 6
~([B2.23])
  25: IntegerLiteral 0x555e972665d0 <./lopcodes.h:80:67> 'int' 0
0
  26: BinaryOperator 0x555e972665f0 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e972665b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97266590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97266570 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97266548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97266508 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e972664e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97266528 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e972665d0 <line:80:67> 'int' 0
([B2.24]) << [B2.25]
  27: BinaryOperator 0x555e97266638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97266470 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97266448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97266430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e972663f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e972663c8 <ldebug.c:508:24> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x555e97266410 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e97266618 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e972665f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e972665b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97266590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97266570 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97266548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97266508 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e972664e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97266528 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e972665d0 <line:80:67> 'int' 0
([B2.18]) & ([B2.26])
  28: CStyleCastExpr 0x555e972666c0 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e972666a0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97266638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97266470 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97266448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97266430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e972663f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e972663c8 <ldebug.c:508:24> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x555e97266410 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e97266618 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e972665f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e972665b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97266590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97266570 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97266548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97266508 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e972664e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97266528 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e972665d0 <line:80:67> 'int' 0
(OpCode)([B2.27]) (CStyleCastExpr, IntegralCast, OpCode)
  29: ImplicitCastExpr 0x555e97266728 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e97266708 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e972666e8 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e972666c0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e972666a0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e97266638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e97266470 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e97266448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e97266430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e972663f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e972663c8 <ldebug.c:508:24> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x555e97266410 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e97266618 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e972665f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e972665b0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e97266590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e97266570 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e97266548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e97266508 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e972664e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e972664c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e97266490 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e97266528 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e972665d0 <line:80:67> 'int' 0
(([B2.28])) (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.29]
   Preds (1): B15
   Succs (6): B4 B8 B9 B12 B13 B3

 [B3]
  default:
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B4]
  case OP_SELF:
   1: DeclRefExpr 0x555e9726a1e0 <ldebug.c:533:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e9726a318 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9726a208 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e9726a1e0 <ldebug.c:533:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B4.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e9726a228 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e9726a248 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e9726a268 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e9726a228 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e9726a248 <line:42:18> 'int' 6
[B4.3] + [B4.4]
   6: IntegerLiteral 0x555e9726a2b0 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e9726a2d0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e9726a290 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e9726a268 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e9726a228 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e9726a248 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9726a2b0 <line:40:17> 'int' 8
([B4.5]) + [B4.6]
   8: BinaryOperator 0x555e9726a330 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9726a318 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9726a208 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e9726a1e0 <ldebug.c:533:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e9726a2f8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e9726a2d0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e9726a290 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e9726a268 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e9726a228 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e9726a248 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9726a2b0 <line:40:17> 'int' 8
[B4.2] >> ([B4.7])
   9: IntegerLiteral 0x555e9726a378 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x555e9726a3a8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
(Instruction)[B4.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x555e9726a3d0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
~[B4.10]
  12: IntegerLiteral 0x555e9726a410 <./lopcodes.h:37:17> 'int' 9
9
  13: BinaryOperator 0x555e9726a430 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726a3f0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726a3d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
`-IntegerLiteral 0x555e9726a410 <line:37:17> 'int' 9
([B4.11]) << [B4.12]
  14: UnaryOperator 0x555e9726a478 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9726a458 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726a430 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726a3f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726a3d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9726a410 <line:37:17> 'int' 9
~([B4.13])
  15: IntegerLiteral 0x555e9726a4b8 <./lopcodes.h:92:60> 'int' 0
0
  16: BinaryOperator 0x555e9726a4d8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726a498 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726a478 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9726a458 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9726a430 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9726a3f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9726a3d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9726a410 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e9726a4b8 <line:92:60> 'int' 0
([B4.14]) << [B4.15]
  17: BinaryOperator 0x555e9726a520 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9726a358 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9726a330 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9726a318 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9726a208 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e9726a1e0 <ldebug.c:533:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e9726a2f8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e9726a2d0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e9726a290 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e9726a268 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e9726a228 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e9726a248 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e9726a2b0 <line:40:17> 'int' 8
`-ParenExpr 0x555e9726a500 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726a4d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726a498 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726a478 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9726a458 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9726a430 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9726a3f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9726a3d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9726a410 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e9726a4b8 <line:92:60> 'int' 0
([B4.8]) & ([B4.16])
  18: CStyleCastExpr 0x555e9726a5b0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e9726a590 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9726a520 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9726a358 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9726a330 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9726a318 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9726a208 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e9726a1e0 <ldebug.c:533:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e9726a2f8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e9726a2d0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e9726a290 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e9726a268 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e9726a228 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e9726a248 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e9726a2b0 <line:40:17> 'int' 8
    `-ParenExpr 0x555e9726a500 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9726a4d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9726a498 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9726a478 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9726a458 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9726a430 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9726a3f0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9726a3d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9726a410 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e9726a4b8 <line:92:60> 'int' 0
(int)([B4.17]) (CStyleCastExpr, IntegralCast, int)
  19: DeclStmt 0x555e9726a618 <ldebug.c:533:9, col:28>col:13
`-VarDecl 0x555e9726a180 <col:9, ./lopcodes.h:92:63> ldebug.c:533:13 used k 'int' cinit
  `-ParenExpr 0x555e9726a5f8 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x555e9726a5d8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e9726a5b0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e9726a590 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e9726a520 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e9726a358 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e9726a330 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e9726a318 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e9726a208 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e9726a1e0 <ldebug.c:533:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e9726a2f8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x555e9726a2d0 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x555e9726a290 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x555e9726a268 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x555e9726a228 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x555e9726a248 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x555e9726a2b0 <line:40:17> 'int' 8
            `-ParenExpr 0x555e9726a500 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e9726a4d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e9726a498 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e9726a478 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e9726a458 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e9726a430 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e9726a3f0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e9726a3d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e9726a3a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e9726a378 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e9726a410 <line:37:17> 'int' 9
                `-IntegerLiteral 0x555e9726a4b8 <line:92:60> 'int' 0
int k = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))));
  20: DeclRefExpr 0x555e9726a690 <ldebug.c:534:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
kname
  21: ImplicitCastExpr 0x555e9726a708 <ldebug.c:534:17> 'const char *(*)(Proto *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e9726a690 <col:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
[B4.20] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(Proto *, int))
  22: DeclRefExpr 0x555e9726a6b8 <ldebug.c:534:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
  23: ImplicitCastExpr 0x555e9726a758 <ldebug.c:534:23> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9726a6b8 <col:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B4.22] (ImplicitCastExpr, LValueToRValue, Proto *)
  24: DeclRefExpr 0x555e9726a6e0 <ldebug.c:534:26> 'int' lvalue Var 0x555e9726a180 'k' 'int'
k
  25: ImplicitCastExpr 0x555e9726a770 <ldebug.c:534:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9726a6e0 <col:26> 'int' lvalue Var 0x555e9726a180 'k' 'int'
[B4.24] (ImplicitCastExpr, LValueToRValue, int)
  26: CallExpr 0x555e9726a720 <ldebug.c:534:17, col:27> 'const char *'
|-ImplicitCastExpr 0x555e9726a708 <col:17> 'const char *(*)(Proto *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e9726a690 <col:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
|-ImplicitCastExpr 0x555e9726a758 <col:23> 'Proto *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726a6b8 <col:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
`-ImplicitCastExpr 0x555e9726a770 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9726a6e0 <col:26> 'int' lvalue Var 0x555e9726a180 'k' 'int'
[B4.21]([B4.23], [B4.25])
  27: DeclRefExpr 0x555e9726a630 <ldebug.c:534:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
  28: ImplicitCastExpr 0x555e9726a658 <ldebug.c:534:10> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e9726a630 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B4.27] (ImplicitCastExpr, LValueToRValue, const char **)
  29: UnaryOperator 0x555e9726a670 <ldebug.c:534:9, col:10> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x555e9726a658 <col:10> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e9726a630 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
*[B4.28]
  30: BinaryOperator 0x555e9726a788 <ldebug.c:534:9, col:27> 'const char *' '='
|-UnaryOperator 0x555e9726a670 <col:9, col:10> 'const char *' lvalue prefix '*'
| `-ImplicitCastExpr 0x555e9726a658 <col:10> 'const char **' <LValueToRValue>
|   `-DeclRefExpr 0x555e9726a630 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
`-CallExpr 0x555e9726a720 <col:17, col:27> 'const char *'
  |-ImplicitCastExpr 0x555e9726a708 <col:17> 'const char *(*)(Proto *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e9726a690 <col:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
  |-ImplicitCastExpr 0x555e9726a758 <col:23> 'Proto *' <LValueToRValue>
  | `-DeclRefExpr 0x555e9726a6b8 <col:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  `-ImplicitCastExpr 0x555e9726a770 <col:26> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e9726a6e0 <col:26> 'int' lvalue Var 0x555e9726a180 'k' 'int'
[B4.29] = [B4.26]
  31: StringLiteral 0x555e9726a7b0 <ldebug.c:535:16> 'char [7]' lvalue "method"
"method"
  32: ImplicitCastExpr 0x555e9726a7e0 <ldebug.c:535:16> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e9726a7b0 <col:16> 'char [7]' lvalue "method"
[B4.31] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  33: ImplicitCastExpr 0x555e9726a7f8 <ldebug.c:535:16> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e9726a7e0 <col:16> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e9726a7b0 <col:16> 'char [7]' lvalue "method"
[B4.32] (ImplicitCastExpr, BitCast, const char *)
  34: ReturnStmt 0x555e9726a810 <ldebug.c:535:9, col:16>
`-ImplicitCastExpr 0x555e9726a7f8 <col:16> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e9726a7e0 <col:16> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e9726a7b0 <col:16> 'char [7]' lvalue "method"
return [B4.33];
   Preds (1): B2
   Succs (1): B0

 [B5]
   1: ConditionalOperator 0x555e97269fd8 <ldebug.c:529:17, col:56> 'const char *'
|-ImplicitCastExpr 0x555e97269f90 <col:17, col:20> 'TString **' <LValueToRValue>
| `-MemberExpr 0x555e97269d00 <col:17, col:20> 'TString **' lvalue ->upvalues 0x555e971d99b0
|   `-ImplicitCastExpr 0x555e97269ce8 <col:17> 'Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97269cc0 <col:17> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
|-ParenExpr 0x555e97269f40 <./llimits.h:75:22, col:31> 'const char *'
| `-CStyleCastExpr 0x555e97269f18 <col:23, col:30> 'const char *' <BitCast>
|   `-ParenExpr 0x555e97269ef8 <col:26, col:30> 'TString *'
|     `-BinaryOperator 0x555e97269e88 <./lobject.h:210:39, col:46> 'TString *' '+'
|       |-ImplicitCastExpr 0x555e97269e70 <col:39, col:42> 'TString *' <LValueToRValue>
|       | `-ParenExpr 0x555e97269e30 <col:39, col:42> 'TString *' lvalue
|       |   `-ArraySubscriptExpr 0x555e97269e08 <ldebug.c:529:38, col:51> 'TString *' lvalue
|       |     |-ImplicitCastExpr 0x555e97269dd8 <col:38, col:41> 'TString **' <LValueToRValue>
|       |     | `-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
|       |     |   `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
|       |     `-ImplicitCastExpr 0x555e97269df0 <col:50> 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
|       `-IntegerLiteral 0x555e97269e50 <./lobject.h:210:46> 'int' 1
`-ImplicitCastExpr 0x555e97269fc0 <ldebug.c:529:56> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e97269fa8 <col:56> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e97269f60 <col:56> 'char [2]' lvalue "?"
[B8.25] ? ([B6.11]) : [B7.3]
   2: DeclRefExpr 0x555e97269c60 <ldebug.c:529:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
   3: ImplicitCastExpr 0x555e97269c88 <ldebug.c:529:10> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e97269c60 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B5.2] (ImplicitCastExpr, LValueToRValue, const char **)
   4: UnaryOperator 0x555e97269ca0 <ldebug.c:529:9, col:10> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x555e97269c88 <col:10> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e97269c60 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
*[B5.3]
   5: BinaryOperator 0x555e9726a008 <ldebug.c:529:9, col:56> 'const char *' '='
|-UnaryOperator 0x555e97269ca0 <col:9, col:10> 'const char *' lvalue prefix '*'
| `-ImplicitCastExpr 0x555e97269c88 <col:10> 'const char **' <LValueToRValue>
|   `-DeclRefExpr 0x555e97269c60 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
`-ConditionalOperator 0x555e97269fd8 <col:17, col:56> 'const char *'
  |-ImplicitCastExpr 0x555e97269f90 <col:17, col:20> 'TString **' <LValueToRValue>
  | `-MemberExpr 0x555e97269d00 <col:17, col:20> 'TString **' lvalue ->upvalues 0x555e971d99b0
  |   `-ImplicitCastExpr 0x555e97269ce8 <col:17> 'Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97269cc0 <col:17> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  |-ParenExpr 0x555e97269f40 <./llimits.h:75:22, col:31> 'const char *'
  | `-CStyleCastExpr 0x555e97269f18 <col:23, col:30> 'const char *' <BitCast>
  |   `-ParenExpr 0x555e97269ef8 <col:26, col:30> 'TString *'
  |     `-BinaryOperator 0x555e97269e88 <./lobject.h:210:39, col:46> 'TString *' '+'
  |       |-ImplicitCastExpr 0x555e97269e70 <col:39, col:42> 'TString *' <LValueToRValue>
  |       | `-ParenExpr 0x555e97269e30 <col:39, col:42> 'TString *' lvalue
  |       |   `-ArraySubscriptExpr 0x555e97269e08 <ldebug.c:529:38, col:51> 'TString *' lvalue
  |       |     |-ImplicitCastExpr 0x555e97269dd8 <col:38, col:41> 'TString **' <LValueToRValue>
  |       |     | `-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
  |       |     |   `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
  |       |     |     `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  |       |     `-ImplicitCastExpr 0x555e97269df0 <col:50> 'int' <LValueToRValue>
  |       |       `-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
  |       `-IntegerLiteral 0x555e97269e50 <./lobject.h:210:46> 'int' 1
  `-ImplicitCastExpr 0x555e97269fc0 <ldebug.c:529:56> 'const char *' <BitCast>
    `-ImplicitCastExpr 0x555e97269fa8 <col:56> 'char *' <ArrayToPointerDecay>
      `-StringLiteral 0x555e97269f60 <col:56> 'char [2]' lvalue "?"
[B5.4] = [B5.1]
   6: StringLiteral 0x555e9726a068 <ldebug.c:530:16> 'char [8]' lvalue "upvalue"
"upvalue"
   7: ImplicitCastExpr 0x555e9726a098 <ldebug.c:530:16> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e9726a068 <col:16> 'char [8]' lvalue "upvalue"
[B5.6] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   8: ImplicitCastExpr 0x555e9726a0b0 <ldebug.c:530:16> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e9726a098 <col:16> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e9726a068 <col:16> 'char [8]' lvalue "upvalue"
[B5.7] (ImplicitCastExpr, BitCast, const char *)
   9: ReturnStmt 0x555e9726a0c8 <ldebug.c:530:9, col:16>
`-ImplicitCastExpr 0x555e9726a0b0 <col:16> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e9726a098 <col:16> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e9726a068 <col:16> 'char [8]' lvalue "upvalue"
return [B5.8];
   Preds (2): B6 B7
   Succs (1): B0

 [B6]
   1: DeclRefExpr 0x555e97269d38 <ldebug.c:529:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
   2: ImplicitCastExpr 0x555e97269d60 <ldebug.c:529:38> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B6.1] (ImplicitCastExpr, LValueToRValue, Proto *)
   3: MemberExpr 0x555e97269d78 <ldebug.c:529:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
`-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B6.2]->upvalues
   4: ImplicitCastExpr 0x555e97269dd8 <ldebug.c:529:38, col:41> 'TString **' <LValueToRValue>
`-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
  `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B6.3] (ImplicitCastExpr, LValueToRValue, TString **)
   5: DeclRefExpr 0x555e97269db0 <ldebug.c:529:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
u
   6: ImplicitCastExpr 0x555e97269df0 <ldebug.c:529:50> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
[B6.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x555e97269e08 <ldebug.c:529:38, col:51> 'TString *' lvalue
|-ImplicitCastExpr 0x555e97269dd8 <col:38, col:41> 'TString **' <LValueToRValue>
| `-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
|   `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
`-ImplicitCastExpr 0x555e97269df0 <col:50> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
[B6.4][[B6.6]]
   8: ImplicitCastExpr 0x555e97269e70 <./lobject.h:210:39, col:42> 'TString *' <LValueToRValue>
`-ParenExpr 0x555e97269e30 <col:39, col:42> 'TString *' lvalue
  `-ArraySubscriptExpr 0x555e97269e08 <ldebug.c:529:38, col:51> 'TString *' lvalue
    |-ImplicitCastExpr 0x555e97269dd8 <col:38, col:41> 'TString **' <LValueToRValue>
    | `-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
    |   `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
    `-ImplicitCastExpr 0x555e97269df0 <col:50> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
([B6.7]) (ImplicitCastExpr, LValueToRValue, TString *)
   9: IntegerLiteral 0x555e97269e50 <./lobject.h:210:46> 'int' 1
1
  10: BinaryOperator 0x555e97269e88 <./lobject.h:210:39, col:46> 'TString *' '+'
|-ImplicitCastExpr 0x555e97269e70 <col:39, col:42> 'TString *' <LValueToRValue>
| `-ParenExpr 0x555e97269e30 <col:39, col:42> 'TString *' lvalue
|   `-ArraySubscriptExpr 0x555e97269e08 <ldebug.c:529:38, col:51> 'TString *' lvalue
|     |-ImplicitCastExpr 0x555e97269dd8 <col:38, col:41> 'TString **' <LValueToRValue>
|     | `-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
|     |   `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
|     `-ImplicitCastExpr 0x555e97269df0 <col:50> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
`-IntegerLiteral 0x555e97269e50 <./lobject.h:210:46> 'int' 1
[B6.8] + [B6.9]
  11: CStyleCastExpr 0x555e97269f18 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x555e97269ef8 <col:26, col:30> 'TString *'
  `-BinaryOperator 0x555e97269e88 <./lobject.h:210:39, col:46> 'TString *' '+'
    |-ImplicitCastExpr 0x555e97269e70 <col:39, col:42> 'TString *' <LValueToRValue>
    | `-ParenExpr 0x555e97269e30 <col:39, col:42> 'TString *' lvalue
    |   `-ArraySubscriptExpr 0x555e97269e08 <ldebug.c:529:38, col:51> 'TString *' lvalue
    |     |-ImplicitCastExpr 0x555e97269dd8 <col:38, col:41> 'TString **' <LValueToRValue>
    |     | `-MemberExpr 0x555e97269d78 <col:38, col:41> 'TString **' lvalue ->upvalues 0x555e971d99b0
    |     |   `-ImplicitCastExpr 0x555e97269d60 <col:38> 'Proto *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x555e97269d38 <col:38> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
    |     `-ImplicitCastExpr 0x555e97269df0 <col:50> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x555e97269db0 <col:50> 'int' lvalue Var 0x555e97269738 'u' 'int'
    `-IntegerLiteral 0x555e97269e50 <./lobject.h:210:46> 'int' 1
(const char *)([B6.10]) (CStyleCastExpr, BitCast, const char *)
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: StringLiteral 0x555e97269f60 <ldebug.c:529:56> 'char [2]' lvalue "?"
"?"
   2: ImplicitCastExpr 0x555e97269fa8 <ldebug.c:529:56> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e97269f60 <col:56> 'char [2]' lvalue "?"
[B7.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x555e97269fc0 <ldebug.c:529:56> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e97269fa8 <col:56> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e97269f60 <col:56> 'char [2]' lvalue "?"
[B7.2] (ImplicitCastExpr, BitCast, const char *)
   Preds (1): B8
   Succs (1): B5

 [B8]
  case OP_GETUPVAL:
   1: DeclRefExpr 0x555e97269798 <ldebug.c:528:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e97269938 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e972697c0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97269798 <ldebug.c:528:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B8.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e972697e0 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e97269800 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e97269820 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
[B8.3] + [B8.4]
   6: IntegerLiteral 0x555e97269868 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e97269888 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e97269848 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e97269820 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97269868 <line:40:17> 'int' 8
([B8.5]) + [B8.6]
   8: IntegerLiteral 0x555e972698d0 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x555e972698f0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x555e972698b0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x555e97269888 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x555e97269848 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x555e97269820 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x555e97269868 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e972698d0 <line:37:17> 'int' 9
([B8.7]) + [B8.8]
  10: BinaryOperator 0x555e97269950 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97269938 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e972697c0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97269798 <ldebug.c:528:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97269918 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x555e972698f0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x555e972698b0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x555e97269888 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x555e97269848 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x555e97269820 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x555e97269868 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e972698d0 <line:37:17> 'int' 9
[B8.2] >> ([B8.9])
  11: IntegerLiteral 0x555e97269998 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x555e972699c8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
(Instruction)[B8.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x555e972699f0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
~[B8.12]
  14: IntegerLiteral 0x555e97269a30 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x555e97269a50 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97269a10 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e972699f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
`-IntegerLiteral 0x555e97269a30 <line:38:17> 'int' 9
([B8.13]) << [B8.14]
  16: UnaryOperator 0x555e97269a98 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97269a78 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97269a50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97269a10 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e972699f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97269a30 <line:38:17> 'int' 9
~([B8.15])
  17: IntegerLiteral 0x555e97269ad8 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x555e97269af8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97269ab8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97269a98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97269a78 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97269a50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97269a10 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e972699f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97269a30 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97269ad8 <line:88:60> 'int' 0
([B8.16]) << [B8.17]
  19: BinaryOperator 0x555e97269b40 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97269978 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97269950 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97269938 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e972697c0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97269798 <ldebug.c:528:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97269918 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x555e972698f0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x555e972698b0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x555e97269888 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x555e97269848 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x555e97269820 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x555e97269868 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x555e972698d0 <line:37:17> 'int' 9
`-ParenExpr 0x555e97269b20 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97269af8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97269ab8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97269a98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97269a78 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97269a50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97269a10 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e972699f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97269a30 <line:38:17> 'int' 9
    `-IntegerLiteral 0x555e97269ad8 <line:88:60> 'int' 0
([B8.10]) & ([B8.18])
  20: CStyleCastExpr 0x555e97269be0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97269bc0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97269b40 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97269978 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97269950 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97269938 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e972697c0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97269798 <ldebug.c:528:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97269918 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x555e972698f0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x555e972698b0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x555e97269888 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x555e97269848 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x555e97269820 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x555e97269868 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x555e972698d0 <line:37:17> 'int' 9
    `-ParenExpr 0x555e97269b20 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97269af8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97269ab8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97269a98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97269a78 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97269a50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97269a10 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e972699f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97269a30 <line:38:17> 'int' 9
        `-IntegerLiteral 0x555e97269ad8 <line:88:60> 'int' 0
(int)([B8.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x555e97269c48 <ldebug.c:528:9, col:28>col:13
`-VarDecl 0x555e97269738 <col:9, ./lopcodes.h:88:63> ldebug.c:528:13 used u 'int' cinit
  `-ParenExpr 0x555e97269c28 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x555e97269c08 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e97269be0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e97269bc0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97269b40 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97269978 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97269950 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e97269938 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e972697c0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e97269798 <ldebug.c:528:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e97269918 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x555e972698f0 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x555e972698b0 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x555e97269888 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x555e97269848 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x555e97269820 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x555e972697e0 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x555e97269800 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x555e97269868 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x555e972698d0 <line:37:17> 'int' 9
            `-ParenExpr 0x555e97269b20 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e97269af8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e97269ab8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97269a98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97269a78 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97269a50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e97269a10 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e972699f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e972699c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97269998 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e97269a30 <line:38:17> 'int' 9
                `-IntegerLiteral 0x555e97269ad8 <line:88:60> 'int' 0
int u = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x555e97269cc0 <ldebug.c:529:17> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
  23: ImplicitCastExpr 0x555e97269ce8 <ldebug.c:529:17> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97269cc0 <col:17> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B8.22] (ImplicitCastExpr, LValueToRValue, Proto *)
  24: MemberExpr 0x555e97269d00 <ldebug.c:529:17, col:20> 'TString **' lvalue ->upvalues 0x555e971d99b0
`-ImplicitCastExpr 0x555e97269ce8 <col:17> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97269cc0 <col:17> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B8.23]->upvalues
  25: ImplicitCastExpr 0x555e97269f90 <ldebug.c:529:17, col:20> 'TString **' <LValueToRValue>
`-MemberExpr 0x555e97269d00 <col:17, col:20> 'TString **' lvalue ->upvalues 0x555e971d99b0
  `-ImplicitCastExpr 0x555e97269ce8 <col:17> 'Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97269cc0 <col:17> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B8.24] (ImplicitCastExpr, LValueToRValue, TString **)
   T: [B8.25] ? ... : ...
   Preds (1): B2
   Succs (2): B6 B7

 [B9]
  case OP_GETTABLE:
   1: DeclRefExpr 0x555e97268ff8 <ldebug.c:523:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e97269130 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97269020 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97268ff8 <ldebug.c:523:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B9.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97269040 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e97269060 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e97269080 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97269040 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97269060 <line:42:18> 'int' 6
[B9.3] + [B9.4]
   6: IntegerLiteral 0x555e972690c8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e972690e8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e972690a8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e97269080 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97269040 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e97269060 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e972690c8 <line:40:17> 'int' 8
([B9.5]) + [B9.6]
   8: BinaryOperator 0x555e97269148 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97269130 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97269020 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97268ff8 <ldebug.c:523:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97269110 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e972690e8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e972690a8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e97269080 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e97269040 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e97269060 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e972690c8 <line:40:17> 'int' 8
[B9.2] >> ([B9.7])
   9: IntegerLiteral 0x555e97269190 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x555e972691c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
(Instruction)[B9.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x555e972691e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
~[B9.10]
  12: IntegerLiteral 0x555e97269228 <./lopcodes.h:37:17> 'int' 9
9
  13: BinaryOperator 0x555e97269248 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97269208 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e972691e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
`-IntegerLiteral 0x555e97269228 <line:37:17> 'int' 9
([B9.11]) << [B9.12]
  14: UnaryOperator 0x555e97269290 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97269270 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97269248 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97269208 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e972691e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97269228 <line:37:17> 'int' 9
~([B9.13])
  15: IntegerLiteral 0x555e972692d0 <./lopcodes.h:92:60> 'int' 0
0
  16: BinaryOperator 0x555e972692f0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e972692b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97269290 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97269270 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97269248 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97269208 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e972691e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97269228 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e972692d0 <line:92:60> 'int' 0
([B9.14]) << [B9.15]
  17: BinaryOperator 0x555e97269338 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97269170 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97269148 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97269130 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97269020 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97268ff8 <ldebug.c:523:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97269110 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e972690e8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e972690a8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e97269080 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e97269040 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e97269060 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e972690c8 <line:40:17> 'int' 8
`-ParenExpr 0x555e97269318 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e972692f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e972692b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97269290 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97269270 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97269248 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97269208 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e972691e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97269228 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e972692d0 <line:92:60> 'int' 0
([B9.8]) & ([B9.16])
  18: CStyleCastExpr 0x555e972693c8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e972693a8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97269338 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97269170 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97269148 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97269130 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97269020 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97268ff8 <ldebug.c:523:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97269110 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e972690e8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e972690a8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e97269080 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e97269040 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e97269060 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e972690c8 <line:40:17> 'int' 8
    `-ParenExpr 0x555e97269318 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e972692f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e972692b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97269290 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97269270 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97269248 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97269208 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e972691e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97269228 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e972692d0 <line:92:60> 'int' 0
(int)([B9.17]) (CStyleCastExpr, IntegralCast, int)
  19: DeclStmt 0x555e97269430 <ldebug.c:523:9, col:28>col:13
`-VarDecl 0x555e97268f98 <col:9, ./lopcodes.h:92:63> ldebug.c:523:13 used k 'int' cinit
  `-ParenExpr 0x555e97269410 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x555e972693f0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e972693c8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e972693a8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97269338 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97269170 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97269148 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e97269130 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e97269020 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e97268ff8 <ldebug.c:523:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e97269110 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x555e972690e8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x555e972690a8 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x555e97269080 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x555e97269040 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x555e97269060 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x555e972690c8 <line:40:17> 'int' 8
            `-ParenExpr 0x555e97269318 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e972692f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e972692b0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97269290 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97269270 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97269248 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e97269208 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e972691e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e972691c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97269190 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e97269228 <line:37:17> 'int' 9
                `-IntegerLiteral 0x555e972692d0 <line:92:60> 'int' 0
int k = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))));
  20: DeclRefExpr 0x555e972694a8 <ldebug.c:524:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
kname
  21: ImplicitCastExpr 0x555e97269578 <ldebug.c:524:17> 'const char *(*)(Proto *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e972694a8 <col:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
[B9.20] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(Proto *, int))
  22: DeclRefExpr 0x555e972694d0 <ldebug.c:524:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
  23: ImplicitCastExpr 0x555e972695c8 <ldebug.c:524:23> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e972694d0 <col:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B9.22] (ImplicitCastExpr, LValueToRValue, Proto *)
  24: DeclRefExpr 0x555e972694f8 <ldebug.c:524:26> 'int' lvalue Var 0x555e97268f98 'k' 'int'
k
  25: ImplicitCastExpr 0x555e972695e0 <ldebug.c:524:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972694f8 <col:26> 'int' lvalue Var 0x555e97268f98 'k' 'int'
[B9.24] (ImplicitCastExpr, LValueToRValue, int)
  26: CallExpr 0x555e97269590 <ldebug.c:524:17, col:27> 'const char *'
|-ImplicitCastExpr 0x555e97269578 <col:17> 'const char *(*)(Proto *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e972694a8 <col:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
|-ImplicitCastExpr 0x555e972695c8 <col:23> 'Proto *' <LValueToRValue>
| `-DeclRefExpr 0x555e972694d0 <col:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
`-ImplicitCastExpr 0x555e972695e0 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e972694f8 <col:26> 'int' lvalue Var 0x555e97268f98 'k' 'int'
[B9.21]([B9.23], [B9.25])
  27: DeclRefExpr 0x555e97269448 <ldebug.c:524:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
  28: ImplicitCastExpr 0x555e97269470 <ldebug.c:524:10> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e97269448 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B9.27] (ImplicitCastExpr, LValueToRValue, const char **)
  29: UnaryOperator 0x555e97269488 <ldebug.c:524:9, col:10> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x555e97269470 <col:10> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e97269448 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
*[B9.28]
  30: BinaryOperator 0x555e972695f8 <ldebug.c:524:9, col:27> 'const char *' '='
|-UnaryOperator 0x555e97269488 <col:9, col:10> 'const char *' lvalue prefix '*'
| `-ImplicitCastExpr 0x555e97269470 <col:10> 'const char **' <LValueToRValue>
|   `-DeclRefExpr 0x555e97269448 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
`-CallExpr 0x555e97269590 <col:17, col:27> 'const char *'
  |-ImplicitCastExpr 0x555e97269578 <col:17> 'const char *(*)(Proto *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e972694a8 <col:17> 'const char *(Proto *, int)' Function 0x555e97262d08 'kname' 'const char *(Proto *, int)'
  |-ImplicitCastExpr 0x555e972695c8 <col:23> 'Proto *' <LValueToRValue>
  | `-DeclRefExpr 0x555e972694d0 <col:23> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  `-ImplicitCastExpr 0x555e972695e0 <col:26> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e972694f8 <col:26> 'int' lvalue Var 0x555e97268f98 'k' 'int'
[B9.29] = [B9.26]
  31: StringLiteral 0x555e97269620 <ldebug.c:525:16> 'char [6]' lvalue "field"
"field"
  32: ImplicitCastExpr 0x555e97269650 <ldebug.c:525:16> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e97269620 <col:16> 'char [6]' lvalue "field"
[B9.31] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  33: ImplicitCastExpr 0x555e97269668 <ldebug.c:525:16> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e97269650 <col:16> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e97269620 <col:16> 'char [6]' lvalue "field"
[B9.32] (ImplicitCastExpr, BitCast, const char *)
  34: ReturnStmt 0x555e97269680 <ldebug.c:525:9, col:16>
`-ImplicitCastExpr 0x555e97269668 <col:16> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e97269650 <col:16> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e97269620 <col:16> 'char [6]' lvalue "field"
return [B9.33];
   Preds (1): B2
   Succs (1): B0

 [B10]
   T: break;
   Preds (1): B12
   Succs (1): B1

 [B11]
   1: DeclRefExpr 0x555e97268cb8 <ldebug.c:519:18> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
getobjname
   2: ImplicitCastExpr 0x555e97268dd8 <ldebug.c:519:18> 'const char *(*)(lua_State *, CallInfo *, int, const char **)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97268cb8 <col:18> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(lua_State *, CallInfo *, int, const char **))
   3: DeclRefExpr 0x555e97268ce0 <ldebug.c:519:29> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x555e97268e38 <ldebug.c:519:29> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e97268ce0 <col:29> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
[B11.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x555e97268d08 <ldebug.c:519:32> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
ci
   6: ImplicitCastExpr 0x555e97268e50 <ldebug.c:519:32> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e97268d08 <col:32> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B11.5] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   7: DeclRefExpr 0x555e97268d30 <ldebug.c:519:36> 'int' lvalue Var 0x555e972686f8 'b' 'int'
b
   8: ImplicitCastExpr 0x555e97268e68 <ldebug.c:519:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97268d30 <col:36> 'int' lvalue Var 0x555e972686f8 'b' 'int'
[B11.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x555e97268d58 <ldebug.c:519:39> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
  10: ImplicitCastExpr 0x555e97268e80 <ldebug.c:519:39> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e97268d58 <col:39> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B11.9] (ImplicitCastExpr, LValueToRValue, const char **)
  11: CallExpr 0x555e97268df0 <ldebug.c:519:18, col:43> 'const char *'
|-ImplicitCastExpr 0x555e97268dd8 <col:18> 'const char *(*)(lua_State *, CallInfo *, int, const char **)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97268cb8 <col:18> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
|-ImplicitCastExpr 0x555e97268e38 <col:29> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e97268ce0 <col:29> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
|-ImplicitCastExpr 0x555e97268e50 <col:32> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x555e97268d08 <col:32> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
|-ImplicitCastExpr 0x555e97268e68 <col:36> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97268d30 <col:36> 'int' lvalue Var 0x555e972686f8 'b' 'int'
`-ImplicitCastExpr 0x555e97268e80 <col:39> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e97268d58 <col:39> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B11.2]([B11.4], [B11.6], [B11.8], [B11.10])
  12: ReturnStmt 0x555e97268e98 <ldebug.c:519:11, col:43>
`-CallExpr 0x555e97268df0 <col:18, col:43> 'const char *'
  |-ImplicitCastExpr 0x555e97268dd8 <col:18> 'const char *(*)(lua_State *, CallInfo *, int, const char **)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e97268cb8 <col:18> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
  |-ImplicitCastExpr 0x555e97268e38 <col:29> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x555e97268ce0 <col:29> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
  |-ImplicitCastExpr 0x555e97268e50 <col:32> 'CallInfo *' <LValueToRValue>
  | `-DeclRefExpr 0x555e97268d08 <col:32> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
  |-ImplicitCastExpr 0x555e97268e68 <col:36> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e97268d30 <col:36> 'int' lvalue Var 0x555e972686f8 'b' 'int'
  `-ImplicitCastExpr 0x555e97268e80 <col:39> 'const char **' <LValueToRValue>
    `-DeclRefExpr 0x555e97268d58 <col:39> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
return [B11.11];
   Preds (1): B12
   Succs (1): B0

 [B12]
  case OP_MOVE:
   1: DeclRefExpr 0x555e972682f8 <ldebug.c:516:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e972683c8 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97268320 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e972682f8 <ldebug.c:516:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B12.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97268340 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e97268360 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e97268380 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97268340 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97268360 <line:42:18> 'int' 6
[B12.3] + [B12.4]
   6: BinaryOperator 0x555e972683e0 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e972683c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97268320 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e972682f8 <ldebug.c:516:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e972683a8 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x555e97268380 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x555e97268340 <line:44:17> 'int' 0
    `-IntegerLiteral 0x555e97268360 <line:42:18> 'int' 6
[B12.2] >> ([B12.5])
   7: IntegerLiteral 0x555e97268428 <./lopcodes.h:71:39> 'int' 0
0
   8: CStyleCastExpr 0x555e97268458 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
(Instruction)[B12.7] (CStyleCastExpr, IntegralCast, Instruction)
   9: UnaryOperator 0x555e97268480 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
~[B12.8]
  10: IntegerLiteral 0x555e972684c0 <./lopcodes.h:40:17> 'int' 8
8
  11: BinaryOperator 0x555e972684e0 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e972684a0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97268480 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
`-IntegerLiteral 0x555e972684c0 <line:40:17> 'int' 8
([B12.9]) << [B12.10]
  12: UnaryOperator 0x555e97268528 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97268508 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e972684e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e972684a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97268480 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
    `-IntegerLiteral 0x555e972684c0 <line:40:17> 'int' 8
~([B12.11])
  13: IntegerLiteral 0x555e97268568 <./lopcodes.h:84:60> 'int' 0
0
  14: BinaryOperator 0x555e97268588 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97268548 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97268528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97268508 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e972684e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e972684a0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97268480 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e972684c0 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e97268568 <line:84:60> 'int' 0
([B12.12]) << [B12.13]
  15: BinaryOperator 0x555e972685d0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97268408 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e972683e0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e972683c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97268320 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e972682f8 <ldebug.c:516:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e972683a8 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x555e97268380 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x555e97268340 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x555e97268360 <line:42:18> 'int' 6
`-ParenExpr 0x555e972685b0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97268588 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97268548 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97268528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97268508 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e972684e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e972684a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97268480 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e972684c0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e97268568 <line:84:60> 'int' 0
([B12.6]) & ([B12.14])
  16: CStyleCastExpr 0x555e97268660 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97268640 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e972685d0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97268408 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e972683e0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e972683c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97268320 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e972682f8 <ldebug.c:516:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e972683a8 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x555e97268380 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x555e97268340 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x555e97268360 <line:42:18> 'int' 6
    `-ParenExpr 0x555e972685b0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97268588 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97268548 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97268528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97268508 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e972684e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e972684a0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97268480 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e972684c0 <line:40:17> 'int' 8
        `-IntegerLiteral 0x555e97268568 <line:84:60> 'int' 0
(int)([B12.15]) (CStyleCastExpr, IntegralCast, int)
  17: DeclStmt 0x555e972686c8 <ldebug.c:516:9, col:28>col:13
`-VarDecl 0x555e97268298 <col:9, ./lopcodes.h:84:63> ldebug.c:516:13 used a 'int' cinit
  `-ParenExpr 0x555e972686a8 <./lopcodes.h:84:21, col:63> 'int'
    `-ParenExpr 0x555e97268688 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e97268660 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e97268640 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e972685d0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97268408 <line:84:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e972683e0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e972683c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e97268320 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e972682f8 <ldebug.c:516:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e972683a8 <./lopcodes.h:45:16, col:33> 'int'
            |     `-BinaryOperator 0x555e97268380 <line:44:17, line:42:18> 'int' '+'
            |       |-IntegerLiteral 0x555e97268340 <line:44:17> 'int' 0
            |       `-IntegerLiteral 0x555e97268360 <line:42:18> 'int' 6
            `-ParenExpr 0x555e972685b0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e97268588 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e97268548 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97268528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97268508 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e972684e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e972684a0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e97268480 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e97268458 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97268428 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e972684c0 <line:40:17> 'int' 8
                `-IntegerLiteral 0x555e97268568 <line:84:60> 'int' 0
int a = (((int)(((i) >> (0 + 6)) & ((~((~(Instruction)0) << 8)) << 0))));
  18: DeclRefExpr 0x555e97268758 <ldebug.c:517:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
  19: ImplicitCastExpr 0x555e972688f8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97268780 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97268758 <ldebug.c:517:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B12.18]) (ImplicitCastExpr, LValueToRValue, Instruction)
  20: IntegerLiteral 0x555e972687a0 <./lopcodes.h:44:17> 'int' 0
0
  21: IntegerLiteral 0x555e972687c0 <./lopcodes.h:42:18> 'int' 6
6
  22: BinaryOperator 0x555e972687e0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
[B12.20] + [B12.21]
  23: IntegerLiteral 0x555e97268828 <./lopcodes.h:40:17> 'int' 8
8
  24: BinaryOperator 0x555e97268848 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e97268808 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e972687e0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97268828 <line:40:17> 'int' 8
([B12.22]) + [B12.23]
  25: IntegerLiteral 0x555e97268890 <./lopcodes.h:37:17> 'int' 9
9
  26: BinaryOperator 0x555e972688b0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x555e97268870 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x555e97268848 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x555e97268808 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x555e972687e0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x555e97268828 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e97268890 <line:37:17> 'int' 9
([B12.24]) + [B12.25]
  27: BinaryOperator 0x555e97268910 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e972688f8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97268780 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97268758 <ldebug.c:517:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e972688d8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x555e972688b0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x555e97268870 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x555e97268848 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x555e97268808 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x555e972687e0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x555e97268828 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e97268890 <line:37:17> 'int' 9
[B12.19] >> ([B12.26])
  28: IntegerLiteral 0x555e97268958 <./lopcodes.h:71:39> 'int' 0
0
  29: CStyleCastExpr 0x555e97268988 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
(Instruction)[B12.28] (CStyleCastExpr, IntegralCast, Instruction)
  30: UnaryOperator 0x555e972689b0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
~[B12.29]
  31: IntegerLiteral 0x555e972689f0 <./lopcodes.h:38:17> 'int' 9
9
  32: BinaryOperator 0x555e97268a10 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e972689d0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e972689b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
`-IntegerLiteral 0x555e972689f0 <line:38:17> 'int' 9
([B12.30]) << [B12.31]
  33: UnaryOperator 0x555e97268a58 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97268a38 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97268a10 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e972689d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e972689b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
    `-IntegerLiteral 0x555e972689f0 <line:38:17> 'int' 9
~([B12.32])
  34: IntegerLiteral 0x555e97268a98 <./lopcodes.h:88:60> 'int' 0
0
  35: BinaryOperator 0x555e97268ab8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97268a78 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97268a58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97268a38 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97268a10 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e972689d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e972689b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e972689f0 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97268a98 <line:88:60> 'int' 0
([B12.33]) << [B12.34]
  36: BinaryOperator 0x555e97268b00 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97268938 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97268910 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e972688f8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97268780 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97268758 <ldebug.c:517:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e972688d8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x555e972688b0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x555e97268870 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x555e97268848 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x555e97268808 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x555e972687e0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x555e97268828 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x555e97268890 <line:37:17> 'int' 9
`-ParenExpr 0x555e97268ae0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97268ab8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97268a78 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97268a58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97268a38 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97268a10 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e972689d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e972689b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e972689f0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x555e97268a98 <line:88:60> 'int' 0
([B12.27]) & ([B12.35])
  37: CStyleCastExpr 0x555e97268b90 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97268b70 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97268b00 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97268938 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97268910 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e972688f8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97268780 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97268758 <ldebug.c:517:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e972688d8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x555e972688b0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x555e97268870 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x555e97268848 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x555e97268808 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x555e972687e0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x555e97268828 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x555e97268890 <line:37:17> 'int' 9
    `-ParenExpr 0x555e97268ae0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97268ab8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97268a78 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97268a58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97268a38 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97268a10 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e972689d0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e972689b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e972689f0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x555e97268a98 <line:88:60> 'int' 0
(int)([B12.36]) (CStyleCastExpr, IntegralCast, int)
  38: DeclStmt 0x555e97268bf8 <ldebug.c:517:9, col:28>col:13
`-VarDecl 0x555e972686f8 <col:9, ./lopcodes.h:88:63> ldebug.c:517:13 used b 'int' cinit
  `-ParenExpr 0x555e97268bd8 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x555e97268bb8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e97268b90 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e97268b70 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97268b00 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97268938 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97268910 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e972688f8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e97268780 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e97268758 <ldebug.c:517:26> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e972688d8 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x555e972688b0 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x555e97268870 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x555e97268848 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x555e97268808 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x555e972687e0 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x555e972687a0 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x555e972687c0 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x555e97268828 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x555e97268890 <line:37:17> 'int' 9
            `-ParenExpr 0x555e97268ae0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e97268ab8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e97268a78 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97268a58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97268a38 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97268a10 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e972689d0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e972689b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e97268988 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97268958 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e972689f0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x555e97268a98 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  39: DeclRefExpr 0x555e97268c10 <ldebug.c:518:13> 'int' lvalue Var 0x555e972686f8 'b' 'int'
b
  40: ImplicitCastExpr 0x555e97268c60 <ldebug.c:518:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97268c10 <col:13> 'int' lvalue Var 0x555e972686f8 'b' 'int'
[B12.39] (ImplicitCastExpr, LValueToRValue, int)
  41: DeclRefExpr 0x555e97268c38 <ldebug.c:518:17> 'int' lvalue Var 0x555e97268298 'a' 'int'
a
  42: ImplicitCastExpr 0x555e97268c78 <ldebug.c:518:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97268c38 <col:17> 'int' lvalue Var 0x555e97268298 'a' 'int'
[B12.41] (ImplicitCastExpr, LValueToRValue, int)
  43: BinaryOperator 0x555e97268c90 <ldebug.c:518:13, col:17> 'int' '<'
|-ImplicitCastExpr 0x555e97268c60 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97268c10 <col:13> 'int' lvalue Var 0x555e972686f8 'b' 'int'
`-ImplicitCastExpr 0x555e97268c78 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97268c38 <col:17> 'int' lvalue Var 0x555e97268298 'a' 'int'
[B12.40] < [B12.42]
   T: if [B12.43]
   Preds (1): B2
   Succs (2): B11 B10

 [B13]
  case OP_GETGLOBAL:
   1: DeclRefExpr 0x555e97266848 <ldebug.c:510:27> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e97266980 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97266870 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97266848 <ldebug.c:510:27> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
([B13.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97266890 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e972668b0 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e972668d0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97266890 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e972668b0 <line:42:18> 'int' 6
[B13.3] + [B13.4]
   6: IntegerLiteral 0x555e97266918 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e97266938 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e972668f8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e972668d0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97266890 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e972668b0 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97266918 <line:40:17> 'int' 8
([B13.5]) + [B13.6]
   8: BinaryOperator 0x555e97266998 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97266980 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97266870 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97266848 <ldebug.c:510:27> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97266960 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e97266938 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e972668f8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e972668d0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e97266890 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e972668b0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e97266918 <line:40:17> 'int' 8
[B13.2] >> ([B13.7])
   9: IntegerLiteral 0x555e972669e0 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x555e97266a10 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
(Instruction)[B13.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x555e97266a38 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
~[B13.10]
  12: IntegerLiteral 0x555e97266a78 <./lopcodes.h:37:17> 'int' 9
9
  13: IntegerLiteral 0x555e97266a98 <./lopcodes.h:38:17> 'int' 9
9
  14: BinaryOperator 0x555e97266ab8 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
[B13.12] + [B13.13]
  15: BinaryOperator 0x555e97266b00 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97266a58 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97266a38 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
`-ParenExpr 0x555e97266ae0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x555e97266ab8 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
([B13.11]) << ([B13.14])
  16: UnaryOperator 0x555e97266b48 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97266b28 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97266b00 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97266a58 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97266a38 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
    `-ParenExpr 0x555e97266ae0 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x555e97266ab8 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
~([B13.15])
  17: IntegerLiteral 0x555e97267bb0 <./lopcodes.h:96:63> 'int' 0
0
  18: BinaryOperator 0x555e97267bd0 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97266b68 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97266b48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97266b28 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97266b00 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97266a58 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97266a38 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
|       `-ParenExpr 0x555e97266ae0 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x555e97266ab8 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97267bb0 <line:96:63> 'int' 0
([B13.16]) << [B13.17]
  19: BinaryOperator 0x555e97267c18 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e972669c0 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97266998 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97266980 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97266870 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97266848 <ldebug.c:510:27> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97266960 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e97266938 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e972668f8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e972668d0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e97266890 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e972668b0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e97266918 <line:40:17> 'int' 8
`-ParenExpr 0x555e97267bf8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97267bd0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97266b68 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97266b48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97266b28 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97266b00 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97266a58 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97266a38 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
    |       `-ParenExpr 0x555e97266ae0 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x555e97266ab8 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
    `-IntegerLiteral 0x555e97267bb0 <line:96:63> 'int' 0
([B13.8]) & ([B13.18])
  20: CStyleCastExpr 0x555e97267ca8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97267c88 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97267c18 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e972669c0 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97266998 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97266980 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97266870 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97266848 <ldebug.c:510:27> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97266960 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e97266938 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e972668f8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e972668d0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e97266890 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e972668b0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e97266918 <line:40:17> 'int' 8
    `-ParenExpr 0x555e97267bf8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97267bd0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97266b68 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97266b48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97266b28 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97266b00 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97266a58 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97266a38 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
        |       `-ParenExpr 0x555e97266ae0 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x555e97266ab8 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
        `-IntegerLiteral 0x555e97267bb0 <line:96:63> 'int' 0
(int)([B13.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x555e97267d10 <ldebug.c:510:9, col:29>col:13
`-VarDecl 0x555e972667e8 <col:9, ./lopcodes.h:96:66> ldebug.c:510:13 used g 'int' cinit
  `-ParenExpr 0x555e97267cf0 <./lopcodes.h:96:22, col:66> 'int'
    `-ParenExpr 0x555e97267cd0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e97267ca8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e97267c88 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97267c18 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e972669c0 <line:96:33, col:45> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97266998 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e97266980 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e97266870 <col:34, col:36> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e97266848 <ldebug.c:510:27> 'Instruction':'unsigned int' lvalue Var 0x555e97265da8 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e97266960 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x555e97266938 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x555e972668f8 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x555e972668d0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x555e97266890 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x555e972668b0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x555e97266918 <line:40:17> 'int' 8
            `-ParenExpr 0x555e97267bf8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e97267bd0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e97266b68 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97266b48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97266b28 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97266b00 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e97266a58 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e97266a38 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e97266a10 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e972669e0 <col:39> 'int' 0
                |       `-ParenExpr 0x555e97266ae0 <line:39:18, col:34> 'int'
                |         `-BinaryOperator 0x555e97266ab8 <line:37:17, line:38:17> 'int' '+'
                |           |-IntegerLiteral 0x555e97266a78 <line:37:17> 'int' 9
                |           `-IntegerLiteral 0x555e97266a98 <line:38:17> 'int' 9
                `-IntegerLiteral 0x555e97267bb0 <line:96:63> 'int' 0
int g = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << (9 + 9))) << 0))));
  22: IntegerLiteral 0x555e97267d28 <./llimits.h:62:31> 'int' 0
0
  23: CStyleCastExpr 0x555e97267d58 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x555e97267d28 <col:31> 'int' 0
(void)[B13.22] (CStyleCastExpr, ToVoid, void)
  24: DeclRefExpr 0x555e97267e00 <ldebug.c:512:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
  25: ImplicitCastExpr 0x555e97267e28 <ldebug.c:512:25> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B13.24] (ImplicitCastExpr, LValueToRValue, Proto *)
  26: MemberExpr 0x555e97267e40 <ldebug.c:512:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
`-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B13.25]->k
  27: ImplicitCastExpr 0x555e97267ea0 <ldebug.c:512:25, col:28> 'TValue *' <LValueToRValue>
`-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
  `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B13.26] (ImplicitCastExpr, LValueToRValue, TValue *)
  28: DeclRefExpr 0x555e97267e78 <ldebug.c:512:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
g
  29: ImplicitCastExpr 0x555e97267eb8 <ldebug.c:512:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
[B13.28] (ImplicitCastExpr, LValueToRValue, int)
  30: ArraySubscriptExpr 0x555e97267ed0 <ldebug.c:512:25, col:31> 'TValue':'struct lua_TValue' lvalue
|-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
| `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
|   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
`-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
[B13.27][[B13.29]]
  31: UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
`-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
  |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
  | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
  |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
&[B13.30]
  32: MemberExpr 0x555e97267f38 <./lobject.h:94:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
  `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
    `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
      |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
      | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
      |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
      `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
        `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
([B13.31])->value
  33: MemberExpr 0x555e97267f70 <./lobject.h:94:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
`-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
  `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
    `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
      `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
        |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
        | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
        |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
        |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
        `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
          `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
[B13.32].gc
  34: ImplicitCastExpr 0x555e97267fa8 <./lobject.h:94:49, col:60> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x555e97267f70 <col:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
  `-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
    `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
      `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
        `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
          |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
          | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
          |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
          |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
          `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
            `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
[B13.33] (ImplicitCastExpr, LValueToRValue, GCObject *)
  35: MemberExpr 0x555e97267fc0 <./lobject.h:94:49, col:64> 'union TString':'union TString' lvalue ->ts 0x555e97213ec8
`-ImplicitCastExpr 0x555e97267fa8 <col:49, col:60> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x555e97267f70 <col:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
    `-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
      `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
        `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
          `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
            |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
            | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
            |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
            |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
            `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
              `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
[B13.34]->ts
  36: UnaryOperator 0x555e97267ff8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
`-MemberExpr 0x555e97267fc0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x555e97213ec8
  `-ImplicitCastExpr 0x555e97267fa8 <col:49, col:60> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x555e97267f70 <col:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
      `-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
        `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
          `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
            `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
              |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
              | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
              |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
              |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
              `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
                `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
&[B13.35]
  37: IntegerLiteral 0x555e97268058 <./lobject.h:210:46> 'int' 1
1
  38: BinaryOperator 0x555e97268078 <./lobject.h:210:39, col:46> 'union TString *' '+'
|-ParenExpr 0x555e97268038 <col:39, col:42> 'union TString *'
| `-ParenExpr 0x555e97268018 <./llimits.h:63:25, col:27> 'union TString *'
|   `-UnaryOperator 0x555e97267ff8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
|     `-MemberExpr 0x555e97267fc0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x555e97213ec8
|       `-ImplicitCastExpr 0x555e97267fa8 <col:49, col:60> 'GCObject *' <LValueToRValue>
|         `-MemberExpr 0x555e97267f70 <col:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
|           `-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
|             `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
|               `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
|                 `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
|                   |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
|                   | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
|                   |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
|                   |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
|                   `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
`-IntegerLiteral 0x555e97268058 <./lobject.h:210:46> 'int' 1
(([B13.36])) + [B13.37]
  39: CStyleCastExpr 0x555e97268108 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x555e972680e8 <col:26, col:30> 'union TString *'
  `-BinaryOperator 0x555e97268078 <./lobject.h:210:39, col:46> 'union TString *' '+'
    |-ParenExpr 0x555e97268038 <col:39, col:42> 'union TString *'
    | `-ParenExpr 0x555e97268018 <./llimits.h:63:25, col:27> 'union TString *'
    |   `-UnaryOperator 0x555e97267ff8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
    |     `-MemberExpr 0x555e97267fc0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x555e97213ec8
    |       `-ImplicitCastExpr 0x555e97267fa8 <col:49, col:60> 'GCObject *' <LValueToRValue>
    |         `-MemberExpr 0x555e97267f70 <col:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
    |           `-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
    |             `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
    |               `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
    |                 `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
    |                   |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
    |                   | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
    |                   |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
    |                   |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
    |                   `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
    |                     `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
    `-IntegerLiteral 0x555e97268058 <./lobject.h:210:46> 'int' 1
(const char *)([B13.38]) (CStyleCastExpr, BitCast, const char *)
  40: DeclRefExpr 0x555e97267da0 <ldebug.c:512:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
  41: ImplicitCastExpr 0x555e97267dc8 <ldebug.c:512:10> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e97267da0 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B13.40] (ImplicitCastExpr, LValueToRValue, const char **)
  42: UnaryOperator 0x555e97267de0 <ldebug.c:512:9, col:10> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x555e97267dc8 <col:10> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e97267da0 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
*[B13.41]
  43: BinaryOperator 0x555e97268150 <ldebug.c:512:9, ./llimits.h:75:31> 'const char *' '='
|-UnaryOperator 0x555e97267de0 <ldebug.c:512:9, col:10> 'const char *' lvalue prefix '*'
| `-ImplicitCastExpr 0x555e97267dc8 <col:10> 'const char **' <LValueToRValue>
|   `-DeclRefExpr 0x555e97267da0 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
`-ParenExpr 0x555e97268130 <./llimits.h:75:22, col:31> 'const char *'
  `-CStyleCastExpr 0x555e97268108 <col:23, col:30> 'const char *' <BitCast>
    `-ParenExpr 0x555e972680e8 <col:26, col:30> 'union TString *'
      `-BinaryOperator 0x555e97268078 <./lobject.h:210:39, col:46> 'union TString *' '+'
        |-ParenExpr 0x555e97268038 <col:39, col:42> 'union TString *'
        | `-ParenExpr 0x555e97268018 <./llimits.h:63:25, col:27> 'union TString *'
        |   `-UnaryOperator 0x555e97267ff8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
        |     `-MemberExpr 0x555e97267fc0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x555e97213ec8
        |       `-ImplicitCastExpr 0x555e97267fa8 <col:49, col:60> 'GCObject *' <LValueToRValue>
        |         `-MemberExpr 0x555e97267f70 <col:49, col:60> 'GCObject *' lvalue .gc 0x555e971cc250
        |           `-MemberExpr 0x555e97267f38 <col:49, col:54> 'Value':'Value' lvalue ->value 0x555e971cc550
        |             `-ParenExpr 0x555e97267f18 <col:49, col:51> 'TValue *'
        |               `-UnaryOperator 0x555e97267ef8 <ldebug.c:512:24, col:31> 'TValue *' prefix '&'
        |                 `-ArraySubscriptExpr 0x555e97267ed0 <col:25, col:31> 'TValue':'struct lua_TValue' lvalue
        |                   |-ImplicitCastExpr 0x555e97267ea0 <col:25, col:28> 'TValue *' <LValueToRValue>
        |                   | `-MemberExpr 0x555e97267e40 <col:25, col:28> 'TValue *' lvalue ->k 0x555e971d9438
        |                   |   `-ImplicitCastExpr 0x555e97267e28 <col:25> 'Proto *' <LValueToRValue>
        |                   |     `-DeclRefExpr 0x555e97267e00 <col:25> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
        |                   `-ImplicitCastExpr 0x555e97267eb8 <col:30> 'int' <LValueToRValue>
        |                     `-DeclRefExpr 0x555e97267e78 <col:30> 'int' lvalue Var 0x555e972667e8 'g' 'int'
        `-IntegerLiteral 0x555e97268058 <./lobject.h:210:46> 'int' 1
[B13.42] = ([B13.39])
  44: StringLiteral 0x555e97268178 <ldebug.c:513:16> 'char [7]' lvalue "global"
"global"
  45: ImplicitCastExpr 0x555e972681a8 <ldebug.c:513:16> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e97268178 <col:16> 'char [7]' lvalue "global"
[B13.44] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  46: ImplicitCastExpr 0x555e972681c0 <ldebug.c:513:16> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e972681a8 <col:16> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e97268178 <col:16> 'char [7]' lvalue "global"
[B13.45] (ImplicitCastExpr, BitCast, const char *)
  47: ReturnStmt 0x555e972681d8 <ldebug.c:513:9, col:16>
`-ImplicitCastExpr 0x555e972681c0 <col:16> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e972681a8 <col:16> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e97268178 <col:16> 'char [7]' lvalue "global"
return [B13.46];
   Preds (1): B2
   Succs (1): B0

 [B14]
   1: StringLiteral 0x555e972660f8 <ldebug.c:505:14> 'char [6]' lvalue "local"
"local"
   2: ImplicitCastExpr 0x555e97266128 <ldebug.c:505:14> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e972660f8 <col:14> 'char [6]' lvalue "local"
[B14.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x555e97266140 <ldebug.c:505:14> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e97266128 <col:14> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e972660f8 <col:14> 'char [6]' lvalue "local"
[B14.2] (ImplicitCastExpr, BitCast, const char *)
   4: ReturnStmt 0x555e97266158 <ldebug.c:505:7, col:14>
`-ImplicitCastExpr 0x555e97266140 <col:14> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e97266128 <col:14> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e972660f8 <col:14> 'char [6]' lvalue "local"
return [B14.3];
   Preds (1): B15
   Succs (1): B0

 [B15]
   1: DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e972659c8 <./lstate.h:60:30, col:33> 'CallInfo *' <LValueToRValue>
`-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
  `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B15.1]) (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
  `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
    `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.2]->func
   4: ImplicitCastExpr 0x555e97265a38 <./lobject.h:98:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
      `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
        `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B15.3]) (ImplicitCastExpr, LValueToRValue, StkId)
   5: MemberExpr 0x555e97265a50 <./lobject.h:98:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
        `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
          `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.4]->value
   6: MemberExpr 0x555e97265a88 <./lobject.h:98:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
`-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
  `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
        `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
          `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
            `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.5].gc
   7: ImplicitCastExpr 0x555e97265ac0 <./lobject.h:98:48, col:59> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
  `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
    `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
            `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
              `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.6] (ImplicitCastExpr, LValueToRValue, GCObject *)
   8: MemberExpr 0x555e97265ad8 <./lobject.h:98:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
`-ImplicitCastExpr 0x555e97265ac0 <col:48, col:59> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
    `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
      `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
            `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
              `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
                `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.7]->cl
   9: UnaryOperator 0x555e97265b10 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
`-MemberExpr 0x555e97265ad8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
  `-ImplicitCastExpr 0x555e97265ac0 <col:48, col:59> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
      `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
        `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
              `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
                  `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
&[B15.8]
  10: MemberExpr 0x555e97265b70 <./lstate.h:60:21, ldebug.c:500:29> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
`-ParenExpr 0x555e97265b50 <./lstate.h:60:21, col:41> 'union Closure *'
  `-ParenExpr 0x555e97265b30 <./llimits.h:63:25, col:27> 'union Closure *'
    `-UnaryOperator 0x555e97265b10 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
      `-MemberExpr 0x555e97265ad8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
        `-ImplicitCastExpr 0x555e97265ac0 <col:48, col:59> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
            `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
              `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
                  `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                    `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                      `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
                        `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
(([B15.9]))->l
  11: MemberExpr 0x555e97265ba8 <./lstate.h:60:21, ldebug.c:500:31> 'struct Proto *' lvalue .p 0x555e971db718
`-MemberExpr 0x555e97265b70 <./lstate.h:60:21, ldebug.c:500:29> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
  `-ParenExpr 0x555e97265b50 <./lstate.h:60:21, col:41> 'union Closure *'
    `-ParenExpr 0x555e97265b30 <./llimits.h:63:25, col:27> 'union Closure *'
      `-UnaryOperator 0x555e97265b10 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
        `-MemberExpr 0x555e97265ad8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
          `-ImplicitCastExpr 0x555e97265ac0 <col:48, col:59> 'GCObject *' <LValueToRValue>
            `-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
              `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                      `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                        `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
                          `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.10].p
  12: ImplicitCastExpr 0x555e97265be0 <./lstate.h:60:21, ldebug.c:500:31> 'struct Proto *' <LValueToRValue>
`-MemberExpr 0x555e97265ba8 <./lstate.h:60:21, ldebug.c:500:31> 'struct Proto *' lvalue .p 0x555e971db718
  `-MemberExpr 0x555e97265b70 <./lstate.h:60:21, ldebug.c:500:29> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
    `-ParenExpr 0x555e97265b50 <./lstate.h:60:21, col:41> 'union Closure *'
      `-ParenExpr 0x555e97265b30 <./llimits.h:63:25, col:27> 'union Closure *'
        `-UnaryOperator 0x555e97265b10 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
          `-MemberExpr 0x555e97265ad8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
            `-ImplicitCastExpr 0x555e97265ac0 <col:48, col:59> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                  `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                    `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
                      `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                        `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                          `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
                            `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.11] (ImplicitCastExpr, LValueToRValue, struct Proto *)
  13: DeclStmt 0x555e97265bf8 <ldebug.c:500:5, col:32>col:12
`-VarDecl 0x555e97265920 <col:5, col:31> col:12 used p 'Proto *' cinit
  `-ImplicitCastExpr 0x555e97265be0 <./lstate.h:60:21, ldebug.c:500:31> 'struct Proto *' <LValueToRValue>
    `-MemberExpr 0x555e97265ba8 <./lstate.h:60:21, ldebug.c:500:31> 'struct Proto *' lvalue .p 0x555e971db718
      `-MemberExpr 0x555e97265b70 <./lstate.h:60:21, ldebug.c:500:29> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
        `-ParenExpr 0x555e97265b50 <./lstate.h:60:21, col:41> 'union Closure *'
          `-ParenExpr 0x555e97265b30 <./llimits.h:63:25, col:27> 'union Closure *'
            `-UnaryOperator 0x555e97265b10 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
              `-MemberExpr 0x555e97265ad8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
                `-ImplicitCastExpr 0x555e97265ac0 <col:48, col:59> 'GCObject *' <LValueToRValue>
                  `-MemberExpr 0x555e97265a88 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                    `-MemberExpr 0x555e97265a50 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                      `-ImplicitCastExpr 0x555e97265a38 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                        `-ParenExpr 0x555e97265a18 <col:48, col:50> 'StkId':'TValue *' lvalue
                          `-MemberExpr 0x555e972659e0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                            `-ImplicitCastExpr 0x555e972659c8 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                              `-ParenExpr 0x555e972659a8 <col:30, col:33> 'CallInfo *' lvalue
                                `-DeclRefExpr 0x555e97265980 <ldebug.c:500:24> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
Proto *p = ((&((ci)->func)->value.gc->cl))->l.p;
  14: DeclRefExpr 0x555e97265c88 <ldebug.c:501:14> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
currentpc
  15: ImplicitCastExpr 0x555e97265d00 <ldebug.c:501:14> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97265c88 <col:14> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
[B15.14] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, CallInfo *))
  16: DeclRefExpr 0x555e97265cb0 <ldebug.c:501:24> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
L
  17: ImplicitCastExpr 0x555e97265d50 <ldebug.c:501:24> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e97265cb0 <col:24> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
[B15.16] (ImplicitCastExpr, LValueToRValue, lua_State *)
  18: DeclRefExpr 0x555e97265cd8 <ldebug.c:501:27> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
ci
  19: ImplicitCastExpr 0x555e97265d68 <ldebug.c:501:27> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e97265cd8 <col:27> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.18] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  20: CallExpr 0x555e97265d18 <ldebug.c:501:14, col:29> 'int'
|-ImplicitCastExpr 0x555e97265d00 <col:14> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97265c88 <col:14> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
|-ImplicitCastExpr 0x555e97265d50 <col:24> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e97265cb0 <col:24> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
`-ImplicitCastExpr 0x555e97265d68 <col:27> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x555e97265cd8 <col:27> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B15.15]([B15.17], [B15.19])
  21: DeclStmt 0x555e97265d80 <ldebug.c:501:5, col:30>col:9
`-VarDecl 0x555e97265c28 <col:5, col:29> col:9 used pc 'int' cinit
  `-CallExpr 0x555e97265d18 <col:14, col:29> 'int'
    |-ImplicitCastExpr 0x555e97265d00 <col:14> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97265c88 <col:14> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
    |-ImplicitCastExpr 0x555e97265d50 <col:24> 'lua_State *' <LValueToRValue>
    | `-DeclRefExpr 0x555e97265cb0 <col:24> 'lua_State *' lvalue ParmVar 0x555e97265100 'L' 'lua_State *'
    `-ImplicitCastExpr 0x555e97265d68 <col:27> 'CallInfo *' <LValueToRValue>
      `-DeclRefExpr 0x555e97265cd8 <col:27> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
int pc = currentpc(L, ci);
  22: DeclStmt 0x555e97265e08 <ldebug.c:502:5, col:18>col:17
`-VarDecl 0x555e97265da8 <col:5, col:17> col:17 used i 'Instruction':'unsigned int'
Instruction i;
  23: DeclRefExpr 0x555e97265e80 <ldebug.c:503:13> 'const char *(const Proto *, int, int)' Function 0x555e97222e88 'luaF_getlocalname' 'const char *(const Proto *, int, int)'
luaF_getlocalname
  24: ImplicitCastExpr 0x555e97265f80 <ldebug.c:503:13> 'const char *(*)(const Proto *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97265e80 <col:13> 'const char *(const Proto *, int, int)' Function 0x555e97222e88 'luaF_getlocalname' 'const char *(const Proto *, int, int)'
[B15.23] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(const Proto *, int, int))
  25: DeclRefExpr 0x555e97265ea8 <ldebug.c:503:31> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
p
  26: ImplicitCastExpr 0x555e97265fd8 <ldebug.c:503:31> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97265ea8 <col:31> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B15.25] (ImplicitCastExpr, LValueToRValue, Proto *)
  27: ImplicitCastExpr 0x555e97265ff0 <ldebug.c:503:31> 'const Proto *' <BitCast>
`-ImplicitCastExpr 0x555e97265fd8 <col:31> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97265ea8 <col:31> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
[B15.26] (ImplicitCastExpr, BitCast, const Proto *)
  28: DeclRefExpr 0x555e97265ed0 <ldebug.c:503:34> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
stackpos
  29: ImplicitCastExpr 0x555e97265f18 <ldebug.c:503:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97265ed0 <col:34> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
[B15.28] (ImplicitCastExpr, LValueToRValue, int)
  30: IntegerLiteral 0x555e97265ef8 <ldebug.c:503:43> 'int' 1
1
  31: BinaryOperator 0x555e97265f30 <ldebug.c:503:34, col:43> 'int' '+'
|-ImplicitCastExpr 0x555e97265f18 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97265ed0 <col:34> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
`-IntegerLiteral 0x555e97265ef8 <col:43> 'int' 1
[B15.29] + [B15.30]
  32: DeclRefExpr 0x555e97265f58 <ldebug.c:503:46> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
pc
  33: ImplicitCastExpr 0x555e97266008 <ldebug.c:503:46> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97265f58 <col:46> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
[B15.32] (ImplicitCastExpr, LValueToRValue, int)
  34: CallExpr 0x555e97265f98 <ldebug.c:503:13, col:48> 'const char *'
|-ImplicitCastExpr 0x555e97265f80 <col:13> 'const char *(*)(const Proto *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97265e80 <col:13> 'const char *(const Proto *, int, int)' Function 0x555e97222e88 'luaF_getlocalname' 'const char *(const Proto *, int, int)'
|-ImplicitCastExpr 0x555e97265ff0 <col:31> 'const Proto *' <BitCast>
| `-ImplicitCastExpr 0x555e97265fd8 <col:31> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x555e97265ea8 <col:31> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
|-BinaryOperator 0x555e97265f30 <col:34, col:43> 'int' '+'
| |-ImplicitCastExpr 0x555e97265f18 <col:34> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e97265ed0 <col:34> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
| `-IntegerLiteral 0x555e97265ef8 <col:43> 'int' 1
`-ImplicitCastExpr 0x555e97266008 <col:46> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97265f58 <col:46> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
[B15.24]([B15.27], [B15.31], [B15.33])
  35: DeclRefExpr 0x555e97265e20 <ldebug.c:503:6> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
  36: ImplicitCastExpr 0x555e97265e48 <ldebug.c:503:6> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e97265e20 <col:6> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B15.35] (ImplicitCastExpr, LValueToRValue, const char **)
  37: UnaryOperator 0x555e97265e60 <ldebug.c:503:5, col:6> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x555e97265e48 <col:6> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e97265e20 <col:6> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
*[B15.36]
  38: BinaryOperator 0x555e97266020 <ldebug.c:503:5, col:48> 'const char *' '='
|-UnaryOperator 0x555e97265e60 <col:5, col:6> 'const char *' lvalue prefix '*'
| `-ImplicitCastExpr 0x555e97265e48 <col:6> 'const char **' <LValueToRValue>
|   `-DeclRefExpr 0x555e97265e20 <col:6> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
`-CallExpr 0x555e97265f98 <col:13, col:48> 'const char *'
  |-ImplicitCastExpr 0x555e97265f80 <col:13> 'const char *(*)(const Proto *, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e97265e80 <col:13> 'const char *(const Proto *, int, int)' Function 0x555e97222e88 'luaF_getlocalname' 'const char *(const Proto *, int, int)'
  |-ImplicitCastExpr 0x555e97265ff0 <col:31> 'const Proto *' <BitCast>
  | `-ImplicitCastExpr 0x555e97265fd8 <col:31> 'Proto *' <LValueToRValue>
  |   `-DeclRefExpr 0x555e97265ea8 <col:31> 'Proto *' lvalue Var 0x555e97265920 'p' 'Proto *'
  |-BinaryOperator 0x555e97265f30 <col:34, col:43> 'int' '+'
  | |-ImplicitCastExpr 0x555e97265f18 <col:34> 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x555e97265ed0 <col:34> 'int' lvalue ParmVar 0x555e972651e8 'stackpos' 'int'
  | `-IntegerLiteral 0x555e97265ef8 <col:43> 'int' 1
  `-ImplicitCastExpr 0x555e97266008 <col:46> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97265f58 <col:46> 'int' lvalue Var 0x555e97265c28 'pc' 'int'
[B15.37] = [B15.34]
  39: DeclRefExpr 0x555e97266048 <ldebug.c:504:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
name
  40: ImplicitCastExpr 0x555e97266070 <ldebug.c:504:10> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e97266048 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B15.39] (ImplicitCastExpr, LValueToRValue, const char **)
  41: UnaryOperator 0x555e97266088 <ldebug.c:504:9, col:10> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x555e97266070 <col:10> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e97266048 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
*[B15.40]
  42: ImplicitCastExpr 0x555e972660a8 <ldebug.c:504:9, col:10> 'const char *' <LValueToRValue>
`-UnaryOperator 0x555e97266088 <col:9, col:10> 'const char *' lvalue prefix '*'
  `-ImplicitCastExpr 0x555e97266070 <col:10> 'const char **' <LValueToRValue>
    `-DeclRefExpr 0x555e97266048 <col:10> 'const char **' lvalue ParmVar 0x555e97265260 'name' 'const char **'
[B15.41] (ImplicitCastExpr, LValueToRValue, const char *)
   T: if [B15.42]
   Preds (1): B16
   Succs (2): B14 B2

 [B16]
   1: DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e97265658 <./lstate.h:60:30, col:33> 'CallInfo *' <LValueToRValue>
`-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
  `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B16.1]) (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
  `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
    `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.2]->func
   4: ImplicitCastExpr 0x555e972656c8 <./lobject.h:98:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
      `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
        `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B16.3]) (ImplicitCastExpr, LValueToRValue, StkId)
   5: MemberExpr 0x555e972656e0 <./lobject.h:98:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
        `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
          `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.4]->value
   6: MemberExpr 0x555e97265718 <./lobject.h:98:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
`-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
  `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
        `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
          `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
            `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.5].gc
   7: ImplicitCastExpr 0x555e97265750 <./lobject.h:98:48, col:59> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
  `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
    `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
            `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
              `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.6] (ImplicitCastExpr, LValueToRValue, GCObject *)
   8: MemberExpr 0x555e97265768 <./lobject.h:98:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
`-ImplicitCastExpr 0x555e97265750 <col:48, col:59> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
    `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
      `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
            `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
              `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
                `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.7]->cl
   9: UnaryOperator 0x555e972657a0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
`-MemberExpr 0x555e97265768 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
  `-ImplicitCastExpr 0x555e97265750 <col:48, col:59> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
      `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
        `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
              `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
                  `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
&[B16.8]
  10: MemberExpr 0x555e97265800 <./lstate.h:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
`-ParenExpr 0x555e972657e0 <line:60:21, col:41> 'union Closure *'
  `-ParenExpr 0x555e972657c0 <./llimits.h:63:25, col:27> 'union Closure *'
    `-UnaryOperator 0x555e972657a0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
      `-MemberExpr 0x555e97265768 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
        `-ImplicitCastExpr 0x555e97265750 <col:48, col:59> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
            `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
              `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
                  `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                    `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                      `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
                        `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
(([B16.9]))->c
  11: MemberExpr 0x555e97265838 <./lstate.h:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
`-MemberExpr 0x555e97265800 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
  `-ParenExpr 0x555e972657e0 <line:60:21, col:41> 'union Closure *'
    `-ParenExpr 0x555e972657c0 <./llimits.h:63:25, col:27> 'union Closure *'
      `-UnaryOperator 0x555e972657a0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
        `-MemberExpr 0x555e97265768 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
          `-ImplicitCastExpr 0x555e97265750 <col:48, col:59> 'GCObject *' <LValueToRValue>
            `-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
              `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                      `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                        `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
                          `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.10].isC
  12: ImplicitCastExpr 0x555e97265870 <./lstate.h:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e97265838 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
  `-MemberExpr 0x555e97265800 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
    `-ParenExpr 0x555e972657e0 <line:60:21, col:41> 'union Closure *'
      `-ParenExpr 0x555e972657c0 <./llimits.h:63:25, col:27> 'union Closure *'
        `-UnaryOperator 0x555e972657a0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
          `-MemberExpr 0x555e97265768 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
            `-ImplicitCastExpr 0x555e97265750 <col:48, col:59> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                  `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                    `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
                      `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                        `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                          `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
                            `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B16.11] (ImplicitCastExpr, LValueToRValue, lu_byte)
  13: UnaryOperator 0x555e97265888 <./lstate.h:61:22, col:38> 'int' prefix '!'
`-ImplicitCastExpr 0x555e97265870 <line:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e97265838 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
    `-MemberExpr 0x555e97265800 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
      `-ParenExpr 0x555e972657e0 <line:60:21, col:41> 'union Closure *'
        `-ParenExpr 0x555e972657c0 <./llimits.h:63:25, col:27> 'union Closure *'
          `-UnaryOperator 0x555e972657a0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
            `-MemberExpr 0x555e97265768 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
              `-ImplicitCastExpr 0x555e97265750 <col:48, col:59> 'GCObject *' <LValueToRValue>
                `-MemberExpr 0x555e97265718 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                  `-MemberExpr 0x555e972656e0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                    `-ImplicitCastExpr 0x555e972656c8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                      `-ParenExpr 0x555e972656a8 <col:48, col:50> 'StkId':'TValue *' lvalue
                        `-MemberExpr 0x555e97265670 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                          `-ImplicitCastExpr 0x555e97265658 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                            `-ParenExpr 0x555e97265638 <col:30, col:33> 'CallInfo *' lvalue
                              `-DeclRefExpr 0x555e97265610 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
![B16.12]
   T: if (([B17.8]) && ([B16.13]))
   Preds (1): B17
   Succs (2): B15 B1

 [B17]
   1: DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e972654b0 <./lstate.h:62:33, col:36> 'CallInfo *' <LValueToRValue>
`-ParenExpr 0x555e97265490 <col:33, col:36> 'CallInfo *' lvalue
  `-DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B17.1]) (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x555e972654c8 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ImplicitCastExpr 0x555e972654b0 <col:33, col:36> 'CallInfo *' <LValueToRValue>
  `-ParenExpr 0x555e97265490 <col:33, col:36> 'CallInfo *' lvalue
    `-DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B17.2]->func
   4: ImplicitCastExpr 0x555e97265520 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e97265500 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e972654c8 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ImplicitCastExpr 0x555e972654b0 <col:33, col:36> 'CallInfo *' <LValueToRValue>
      `-ParenExpr 0x555e97265490 <col:33, col:36> 'CallInfo *' lvalue
        `-DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B17.3]) (ImplicitCastExpr, LValueToRValue, StkId)
   5: MemberExpr 0x555e97265538 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
`-ImplicitCastExpr 0x555e97265520 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e97265500 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e972654c8 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ImplicitCastExpr 0x555e972654b0 <col:33, col:36> 'CallInfo *' <LValueToRValue>
        `-ParenExpr 0x555e97265490 <col:33, col:36> 'CallInfo *' lvalue
          `-DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
[B17.4]->tt
   6: ImplicitCastExpr 0x555e972655b0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x555e97265570 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x555e97265538 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
    `-ImplicitCastExpr 0x555e97265520 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e97265500 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e972654c8 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ImplicitCastExpr 0x555e972654b0 <col:33, col:36> 'CallInfo *' <LValueToRValue>
            `-ParenExpr 0x555e97265490 <col:33, col:36> 'CallInfo *' lvalue
              `-DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
([B17.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x555e97265590 <./lua.h:80:24> 'int' 6
6
   8: BinaryOperator 0x555e972655c8 <./lobject.h:90:18, ./lua.h:80:24> 'int' '=='
|-ImplicitCastExpr 0x555e972655b0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x555e97265570 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x555e97265538 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
|     `-ImplicitCastExpr 0x555e97265520 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x555e97265500 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-MemberExpr 0x555e972654c8 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
|           `-ImplicitCastExpr 0x555e972654b0 <col:33, col:36> 'CallInfo *' <LValueToRValue>
|             `-ParenExpr 0x555e97265490 <col:33, col:36> 'CallInfo *' lvalue
|               `-DeclRefExpr 0x555e97265468 <ldebug.c:499:13> 'CallInfo *' lvalue ParmVar 0x555e97265170 'ci' 'CallInfo *'
`-IntegerLiteral 0x555e97265590 <./lua.h:80:24> 'int' 6
[B17.6] == [B17.7]
   T: ([B17.8]) && ...
   Preds (1): B18
   Succs (2): B16 B1

 [B0 (EXIT)]
   Preds (7): B1 B4 B5 B9 B11 B13 B14
