int luaG_checkcode(const Proto *pt)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x555e97262810 <ldebug.c:485:11> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
symbexec
   2: ImplicitCastExpr 0x555e97262a28 <ldebug.c:485:11> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97262810 <col:11> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, Instruction (*)(const Proto *, int, int))
   3: DeclRefExpr 0x555e97262838 <ldebug.c:485:20> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e97262a80 <ldebug.c:485:20> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97262838 <col:20> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
[B1.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: DeclRefExpr 0x555e97262860 <ldebug.c:485:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e97262888 <ldebug.c:485:24> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97262860 <col:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
[B1.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e972628a0 <ldebug.c:485:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e97262888 <col:24> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97262860 <col:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
[B1.6]->sizecode
   8: ImplicitCastExpr 0x555e97262a98 <ldebug.c:485:24, col:28> 'int' <LValueToRValue>
`-MemberExpr 0x555e972628a0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e97262888 <col:24> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97262860 <col:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x555e972628d8 <./lopcodes.h:65:27> 'int' 1
1
  10: IntegerLiteral 0x555e972628f8 <./lopcodes.h:40:17> 'int' 8
8
  11: BinaryOperator 0x555e97262918 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x555e972628d8 <line:65:27> 'int' 1
`-IntegerLiteral 0x555e972628f8 <line:40:17> 'int' 8
[B1.9] << [B1.10]
  12: IntegerLiteral 0x555e97262960 <./lopcodes.h:65:38> 'int' 1
1
  13: BinaryOperator 0x555e97262980 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x555e97262940 <col:26, col:36> 'int'
| `-BinaryOperator 0x555e97262918 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x555e972628d8 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x555e972628f8 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e97262960 <line:65:38> 'int' 1
([B1.11]) - [B1.12]
  14: CallExpr 0x555e97262a40 <ldebug.c:485:11, col:44> 'Instruction':'unsigned int'
|-ImplicitCastExpr 0x555e97262a28 <col:11> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97262810 <col:11> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
|-ImplicitCastExpr 0x555e97262a80 <col:20> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x555e97262838 <col:20> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
|-ImplicitCastExpr 0x555e97262a98 <col:24, col:28> 'int' <LValueToRValue>
| `-MemberExpr 0x555e972628a0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
|   `-ImplicitCastExpr 0x555e97262888 <col:24> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97262860 <col:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
`-ParenExpr 0x555e972629a8 <./lopcodes.h:65:25, col:39> 'int'
  `-BinaryOperator 0x555e97262980 <col:26, col:38> 'int' '-'
    |-ParenExpr 0x555e97262940 <col:26, col:36> 'int'
    | `-BinaryOperator 0x555e97262918 <col:27, line:40:17> 'int' '<<'
    |   |-IntegerLiteral 0x555e972628d8 <line:65:27> 'int' 1
    |   `-IntegerLiteral 0x555e972628f8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e97262960 <line:65:38> 'int' 1
[B1.2]([B1.4], [B1.8], ([B1.13]))
  15: IntegerLiteral 0x555e97262ab0 <ldebug.c:485:49> 'int' 0
0
  16: ImplicitCastExpr 0x555e97262ad0 <ldebug.c:485:49> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97262ab0 <col:49> 'int' 0
[B1.15] (ImplicitCastExpr, IntegralCast, unsigned int)
  17: BinaryOperator 0x555e97262ae8 <ldebug.c:485:11, col:49> 'int' '!='
|-CallExpr 0x555e97262a40 <col:11, col:44> 'Instruction':'unsigned int'
| |-ImplicitCastExpr 0x555e97262a28 <col:11> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x555e97262810 <col:11> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
| |-ImplicitCastExpr 0x555e97262a80 <col:20> 'const Proto *' <LValueToRValue>
| | `-DeclRefExpr 0x555e97262838 <col:20> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
| |-ImplicitCastExpr 0x555e97262a98 <col:24, col:28> 'int' <LValueToRValue>
| | `-MemberExpr 0x555e972628a0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
| |   `-ImplicitCastExpr 0x555e97262888 <col:24> 'const Proto *' <LValueToRValue>
| |     `-DeclRefExpr 0x555e97262860 <col:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
| `-ParenExpr 0x555e972629a8 <./lopcodes.h:65:25, col:39> 'int'
|   `-BinaryOperator 0x555e97262980 <col:26, col:38> 'int' '-'
|     |-ParenExpr 0x555e97262940 <col:26, col:36> 'int'
|     | `-BinaryOperator 0x555e97262918 <col:27, line:40:17> 'int' '<<'
|     |   |-IntegerLiteral 0x555e972628d8 <line:65:27> 'int' 1
|     |   `-IntegerLiteral 0x555e972628f8 <line:40:17> 'int' 8
|     `-IntegerLiteral 0x555e97262960 <line:65:38> 'int' 1
`-ImplicitCastExpr 0x555e97262ad0 <ldebug.c:485:49> 'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97262ab0 <col:49> 'int' 0
[B1.14] != [B1.16]
  18: ReturnStmt 0x555e97262b30 <ldebug.c:485:3, col:50>
`-ParenExpr 0x555e97262b10 <col:10, col:50> 'int'
  `-BinaryOperator 0x555e97262ae8 <col:11, col:49> 'int' '!='
    |-CallExpr 0x555e97262a40 <col:11, col:44> 'Instruction':'unsigned int'
    | |-ImplicitCastExpr 0x555e97262a28 <col:11> 'Instruction (*)(const Proto *, int, int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e97262810 <col:11> 'Instruction (const Proto *, int, int)' Function 0x555e97251e80 'symbexec' 'Instruction (const Proto *, int, int)'
    | |-ImplicitCastExpr 0x555e97262a80 <col:20> 'const Proto *' <LValueToRValue>
    | | `-DeclRefExpr 0x555e97262838 <col:20> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
    | |-ImplicitCastExpr 0x555e97262a98 <col:24, col:28> 'int' <LValueToRValue>
    | | `-MemberExpr 0x555e972628a0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
    | |   `-ImplicitCastExpr 0x555e97262888 <col:24> 'const Proto *' <LValueToRValue>
    | |     `-DeclRefExpr 0x555e97262860 <col:24> 'const Proto *' lvalue ParmVar 0x555e97262690 'pt' 'const Proto *'
    | `-ParenExpr 0x555e972629a8 <./lopcodes.h:65:25, col:39> 'int'
    |   `-BinaryOperator 0x555e97262980 <col:26, col:38> 'int' '-'
    |     |-ParenExpr 0x555e97262940 <col:26, col:36> 'int'
    |     | `-BinaryOperator 0x555e97262918 <col:27, line:40:17> 'int' '<<'
    |     |   |-IntegerLiteral 0x555e972628d8 <line:65:27> 'int' 1
    |     |   `-IntegerLiteral 0x555e972628f8 <line:40:17> 'int' 8
    |     `-IntegerLiteral 0x555e97262960 <line:65:38> 'int' 1
    `-ImplicitCastExpr 0x555e97262ad0 <ldebug.c:485:49> 'unsigned int' <IntegralCast>
      `-IntegerLiteral 0x555e97262ab0 <col:49> 'int' 0
return ([B1.17]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
