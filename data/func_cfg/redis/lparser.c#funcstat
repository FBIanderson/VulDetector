static void funcstat(LexState *ls, int line)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclStmt 0x558fa8f3e178 <lparser.c:1214:3, col:15>col:7
`-VarDecl 0x558fa8f3e118 <col:3, col:7> col:7 used needself 'int'
int needself;
   2: DeclStmt 0x558fa8f48948 <lparser.c:1215:11>col:11
`-VarDecl 0x558fa8f3e1a0 <col:3, col:11> col:11 used v 'expdesc':'struct expdesc'
expdesc v;
   3: DeclStmt 0x558fa8f48930 <lparser.c:1215:14>col:14
`-VarDecl 0x558fa8f3e210 <col:3, col:14> col:14 used b 'expdesc':'struct expdesc'
expdesc b;
   4: DeclRefExpr 0x558fa8f3e2a0 <lparser.c:1216:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
   5: ImplicitCastExpr 0x558fa8f3e2f0 <lparser.c:1216:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3e2a0 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B1.4] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   6: DeclRefExpr 0x558fa8f3e2c8 <lparser.c:1216:13> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x558fa8f3e338 <lparser.c:1216:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e2c8 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: CallExpr 0x558fa8f3e308 <lparser.c:1216:3, col:15> 'void'
|-ImplicitCastExpr 0x558fa8f3e2f0 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3e2a0 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f3e338 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3e2c8 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.5]([B1.7])
   9: DeclRefExpr 0x558fa8f3e378 <lparser.c:1217:14> 'int (LexState *, expdesc *)' Function 0x558fa8f3d768 'funcname' 'int (LexState *, expdesc *)'
funcname
  10: ImplicitCastExpr 0x558fa8f3e410 <lparser.c:1217:14> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3e378 <col:14> 'int (LexState *, expdesc *)' Function 0x558fa8f3d768 'funcname' 'int (LexState *, expdesc *)'
[B1.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, expdesc *))
  11: DeclRefExpr 0x558fa8f3e3a0 <lparser.c:1217:23> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x558fa8f3e460 <lparser.c:1217:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e3a0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: DeclRefExpr 0x558fa8f3e3c8 <lparser.c:1217:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
v
  14: UnaryOperator 0x558fa8f3e3f0 <lparser.c:1217:27, col:28> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3e3c8 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
&[B1.13]
  15: CallExpr 0x558fa8f3e428 <lparser.c:1217:14, col:29> 'int'
|-ImplicitCastExpr 0x558fa8f3e410 <col:14> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3e378 <col:14> 'int (LexState *, expdesc *)' Function 0x558fa8f3d768 'funcname' 'int (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f3e460 <col:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3e3a0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f3e3f0 <col:27, col:28> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f3e3c8 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
[B1.10]([B1.12], [B1.14])
  16: DeclRefExpr 0x558fa8f3e350 <lparser.c:1217:3> 'int' lvalue Var 0x558fa8f3e118 'needself' 'int'
needself
  17: BinaryOperator 0x558fa8f3e478 <lparser.c:1217:3, col:29> 'int' '='
|-DeclRefExpr 0x558fa8f3e350 <col:3> 'int' lvalue Var 0x558fa8f3e118 'needself' 'int'
`-CallExpr 0x558fa8f3e428 <col:14, col:29> 'int'
  |-ImplicitCastExpr 0x558fa8f3e410 <col:14> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f3e378 <col:14> 'int (LexState *, expdesc *)' Function 0x558fa8f3d768 'funcname' 'int (LexState *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8f3e460 <col:23> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f3e3a0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
  `-UnaryOperator 0x558fa8f3e3f0 <col:27, col:28> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f3e3c8 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
[B1.16] = [B1.15]
  18: DeclRefExpr 0x558fa8f3e4a0 <lparser.c:1218:3> 'void (LexState *, expdesc *, int, int)' Function 0x558fa8f1d710 'body' 'void (LexState *, expdesc *, int, int)'
body
  19: ImplicitCastExpr 0x558fa8f3e588 <lparser.c:1218:3> 'void (*)(LexState *, expdesc *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3e4a0 <col:3> 'void (LexState *, expdesc *, int, int)' Function 0x558fa8f1d710 'body' 'void (LexState *, expdesc *, int, int)'
[B1.18] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *, int, int))
  20: DeclRefExpr 0x558fa8f3e4c8 <lparser.c:1218:8> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
ls
  21: ImplicitCastExpr 0x558fa8f3e5e8 <lparser.c:1218:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e4c8 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.20] (ImplicitCastExpr, LValueToRValue, LexState *)
  22: DeclRefExpr 0x558fa8f3e4f0 <lparser.c:1218:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e210 'b' 'expdesc':'struct expdesc'
b
  23: UnaryOperator 0x558fa8f3e518 <lparser.c:1218:12, col:13> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3e4f0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e210 'b' 'expdesc':'struct expdesc'
&[B1.22]
  24: DeclRefExpr 0x558fa8f3e538 <lparser.c:1218:16> 'int' lvalue Var 0x558fa8f3e118 'needself' 'int'
needself
  25: ImplicitCastExpr 0x558fa8f3e600 <lparser.c:1218:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e538 <col:16> 'int' lvalue Var 0x558fa8f3e118 'needself' 'int'
[B1.24] (ImplicitCastExpr, LValueToRValue, int)
  26: DeclRefExpr 0x558fa8f3e560 <lparser.c:1218:26> 'int' lvalue ParmVar 0x558fa8f3dfc0 'line' 'int'
line
  27: ImplicitCastExpr 0x558fa8f3e618 <lparser.c:1218:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e560 <col:26> 'int' lvalue ParmVar 0x558fa8f3dfc0 'line' 'int'
[B1.26] (ImplicitCastExpr, LValueToRValue, int)
  28: CallExpr 0x558fa8f3e5a0 <lparser.c:1218:3, col:30> 'void'
|-ImplicitCastExpr 0x558fa8f3e588 <col:3> 'void (*)(LexState *, expdesc *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3e4a0 <col:3> 'void (LexState *, expdesc *, int, int)' Function 0x558fa8f1d710 'body' 'void (LexState *, expdesc *, int, int)'
|-ImplicitCastExpr 0x558fa8f3e5e8 <col:8> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3e4c8 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f3e518 <col:12, col:13> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f3e4f0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e210 'b' 'expdesc':'struct expdesc'
|-ImplicitCastExpr 0x558fa8f3e600 <col:16> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3e538 <col:16> 'int' lvalue Var 0x558fa8f3e118 'needself' 'int'
`-ImplicitCastExpr 0x558fa8f3e618 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3e560 <col:26> 'int' lvalue ParmVar 0x558fa8f3dfc0 'line' 'int'
[B1.19]([B1.21], [B1.23], [B1.25], [B1.27])
  29: DeclRefExpr 0x558fa8f3e630 <lparser.c:1219:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
luaK_storevar
  30: ImplicitCastExpr 0x558fa8f3e760 <lparser.c:1219:3> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3e630 <col:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
[B1.29] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, expdesc *))
  31: DeclRefExpr 0x558fa8f3e658 <lparser.c:1219:17> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
ls
  32: ImplicitCastExpr 0x558fa8f3e680 <lparser.c:1219:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e658 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.31] (ImplicitCastExpr, LValueToRValue, LexState *)
  33: MemberExpr 0x558fa8f3e698 <lparser.c:1219:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f3e680 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3e658 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.32]->fs
  34: ImplicitCastExpr 0x558fa8f3e7b8 <lparser.c:1219:17, col:21> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f3e698 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f3e680 <col:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3e658 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.33] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  35: DeclRefExpr 0x558fa8f3e6d0 <lparser.c:1219:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
v
  36: UnaryOperator 0x558fa8f3e6f8 <lparser.c:1219:25, col:26> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3e6d0 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
&[B1.35]
  37: DeclRefExpr 0x558fa8f3e718 <lparser.c:1219:30> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e210 'b' 'expdesc':'struct expdesc'
b
  38: UnaryOperator 0x558fa8f3e740 <lparser.c:1219:29, col:30> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3e718 <col:30> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e210 'b' 'expdesc':'struct expdesc'
&[B1.37]
  39: CallExpr 0x558fa8f3e778 <lparser.c:1219:3, col:31> 'void'
|-ImplicitCastExpr 0x558fa8f3e760 <col:3> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3e630 <col:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f3e7b8 <col:17, col:21> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f3e698 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f3e680 <col:17> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f3e658 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f3e6f8 <col:25, col:26> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f3e6d0 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e1a0 'v' 'expdesc':'struct expdesc'
`-UnaryOperator 0x558fa8f3e740 <col:29, col:30> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f3e718 <col:30> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3e210 'b' 'expdesc':'struct expdesc'
[B1.30]([B1.34], [B1.36], [B1.38])
  40: DeclRefExpr 0x558fa8f3e7d0 <lparser.c:1220:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
luaK_fixline
  41: ImplicitCastExpr 0x558fa8f3e898 <lparser.c:1220:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3e7d0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
[B1.40] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  42: DeclRefExpr 0x558fa8f3e7f8 <lparser.c:1220:16> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
ls
  43: ImplicitCastExpr 0x558fa8f3e820 <lparser.c:1220:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e7f8 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.42] (ImplicitCastExpr, LValueToRValue, LexState *)
  44: MemberExpr 0x558fa8f3e838 <lparser.c:1220:16, col:20> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f3e820 <col:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3e7f8 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.43]->fs
  45: ImplicitCastExpr 0x558fa8f3e8e8 <lparser.c:1220:16, col:20> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f3e838 <col:16, col:20> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f3e820 <col:16> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3e7f8 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
[B1.44] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  46: DeclRefExpr 0x558fa8f3e870 <lparser.c:1220:24> 'int' lvalue ParmVar 0x558fa8f3dfc0 'line' 'int'
line
  47: ImplicitCastExpr 0x558fa8f3e900 <lparser.c:1220:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3e870 <col:24> 'int' lvalue ParmVar 0x558fa8f3dfc0 'line' 'int'
[B1.46] (ImplicitCastExpr, LValueToRValue, int)
  48: CallExpr 0x558fa8f3e8b0 <lparser.c:1220:3, col:28> 'void'
|-ImplicitCastExpr 0x558fa8f3e898 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3e7d0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f3e8e8 <col:16, col:20> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f3e838 <col:16, col:20> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f3e820 <col:16> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f3e7f8 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3df48 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f3e900 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3e870 <col:24> 'int' lvalue ParmVar 0x558fa8f3dfc0 'line' 'int'
[B1.41]([B1.45], [B1.47])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
