void luaU_header(char *h)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: IntegerLiteral 0x56282187d370 <lundump.c:216:8> 'int' 1
1
   2: DeclStmt 0x56282187d390 <lundump.c:216:2, col:9>col:6
`-VarDecl 0x56282187d310 <col:2, col:8> col:6 used x 'int' cinit
  `-IntegerLiteral 0x56282187d370 <col:8> 'int' 1
int x = 1;
   3: DeclRefExpr 0x56282187d3a8 <lundump.c:217:2> 'void *(void *, const void *, unsigned long)' Function 0x562821746dd0 'memcpy' 'void *(void *, const void *, unsigned long)'
memcpy
   4: ImplicitCastExpr 0x56282187d558 <lundump.c:217:2> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56282187d3a8 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x562821746dd0 'memcpy' 'void *(void *, const void *, unsigned long)'
[B1.3] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(void *, const void *, unsigned long))
   5: DeclRefExpr 0x56282187d3d0 <lundump.c:217:9> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
   6: ImplicitCastExpr 0x56282187d5b0 <lundump.c:217:9> 'char *' <LValueToRValue>
`-DeclRefExpr 0x56282187d3d0 <col:9> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: ImplicitCastExpr 0x56282187d5c8 <lundump.c:217:9> 'void *' <BitCast>
`-ImplicitCastExpr 0x56282187d5b0 <col:9> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x56282187d3d0 <col:9> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.6] (ImplicitCastExpr, BitCast, void *)
   8: StringLiteral 0x56282187d3f8 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
"\033Lua"
   9: ImplicitCastExpr 0x56282187d5e0 <./lua.h:27:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x56282187d3f8 <col:23> 'char [5]' lvalue "\033Lua"
[B1.8] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  10: ImplicitCastExpr 0x56282187d5f8 <./lua.h:27:23> 'const void *' <BitCast>
`-ImplicitCastExpr 0x56282187d5e0 <col:23> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x56282187d3f8 <col:23> 'char [5]' lvalue "\033Lua"
[B1.9] (ImplicitCastExpr, BitCast, const void *)
  11: UnaryExprOrTypeTraitExpr 0x56282187d478 <lundump.c:217:25, col:45> 'unsigned long' sizeof
`-ParenExpr 0x56282187d458 <col:31, col:45> 'char [5]' lvalue
  `-StringLiteral 0x56282187d428 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
sizeof ("\033Lua")
  12: IntegerLiteral 0x56282187d498 <lundump.c:217:47> 'int' 1
1
  13: ImplicitCastExpr 0x56282187d4b8 <lundump.c:217:47> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x56282187d498 <col:47> 'int' 1
[B1.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: BinaryOperator 0x56282187d4d0 <lundump.c:217:25, col:47> 'unsigned long' '-'
|-UnaryExprOrTypeTraitExpr 0x56282187d478 <col:25, col:45> 'unsigned long' sizeof
| `-ParenExpr 0x56282187d458 <col:31, col:45> 'char [5]' lvalue
|   `-StringLiteral 0x56282187d428 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
`-ImplicitCastExpr 0x56282187d4b8 <lundump.c:217:47> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x56282187d498 <col:47> 'int' 1
[B1.11] - [B1.13]
  15: CallExpr 0x56282187d570 <lundump.c:217:2, col:48> 'void *'
|-ImplicitCastExpr 0x56282187d558 <col:2> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56282187d3a8 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x562821746dd0 'memcpy' 'void *(void *, const void *, unsigned long)'
|-ImplicitCastExpr 0x56282187d5c8 <col:9> 'void *' <BitCast>
| `-ImplicitCastExpr 0x56282187d5b0 <col:9> 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x56282187d3d0 <col:9> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
|-ImplicitCastExpr 0x56282187d5f8 <./lua.h:27:23> 'const void *' <BitCast>
| `-ImplicitCastExpr 0x56282187d5e0 <col:23> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x56282187d3f8 <col:23> 'char [5]' lvalue "\033Lua"
`-BinaryOperator 0x56282187d4d0 <lundump.c:217:25, col:47> 'unsigned long' '-'
  |-UnaryExprOrTypeTraitExpr 0x56282187d478 <col:25, col:45> 'unsigned long' sizeof
  | `-ParenExpr 0x56282187d458 <col:31, col:45> 'char [5]' lvalue
  |   `-StringLiteral 0x56282187d428 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
  `-ImplicitCastExpr 0x56282187d4b8 <lundump.c:217:47> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x56282187d498 <col:47> 'int' 1
[B1.4]([B1.7], [B1.10], [B1.14])
  16: DeclRefExpr 0x56282187d610 <lundump.c:218:2> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  17: UnaryExprOrTypeTraitExpr 0x56282187d688 <lundump.c:218:5, col:25> 'unsigned long' sizeof
`-ParenExpr 0x56282187d668 <col:11, col:25> 'char [5]' lvalue
  `-StringLiteral 0x56282187d638 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
sizeof ("\033Lua")
  18: IntegerLiteral 0x56282187d6a8 <lundump.c:218:27> 'int' 1
1
  19: ImplicitCastExpr 0x56282187d6c8 <lundump.c:218:27> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x56282187d6a8 <col:27> 'int' 1
[B1.18] (ImplicitCastExpr, IntegralCast, unsigned long)
  20: BinaryOperator 0x56282187d6e0 <lundump.c:218:5, col:27> 'unsigned long' '-'
|-UnaryExprOrTypeTraitExpr 0x56282187d688 <col:5, col:25> 'unsigned long' sizeof
| `-ParenExpr 0x56282187d668 <col:11, col:25> 'char [5]' lvalue
|   `-StringLiteral 0x56282187d638 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
`-ImplicitCastExpr 0x56282187d6c8 <lundump.c:218:27> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x56282187d6a8 <col:27> 'int' 1
[B1.17] - [B1.19]
  21: CompoundAssignOperator 0x56282187d708 <lundump.c:218:2, col:27> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|-DeclRefExpr 0x56282187d610 <col:2> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-BinaryOperator 0x56282187d6e0 <col:5, col:27> 'unsigned long' '-'
  |-UnaryExprOrTypeTraitExpr 0x56282187d688 <col:5, col:25> 'unsigned long' sizeof
  | `-ParenExpr 0x56282187d668 <col:11, col:25> 'char [5]' lvalue
  |   `-StringLiteral 0x56282187d638 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
  `-ImplicitCastExpr 0x56282187d6c8 <lundump.c:218:27> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x56282187d6a8 <col:27> 'int' 1
[B1.16] += [B1.20]
  22: IntegerLiteral 0x56282187d7a8 <./lundump.h:28:23> 'int' 81
81
  23: CStyleCastExpr 0x56282187d7d8 <lundump.c:219:7, ./lundump.h:28:23> 'char' <IntegralCast>
`-IntegerLiteral 0x56282187d7a8 <col:23> 'int' 81
(char)[B1.22] (CStyleCastExpr, IntegralCast, char)
  24: DeclRefExpr 0x56282187d740 <lundump.c:219:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  25: UnaryOperator 0x56282187d768 <lundump.c:219:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187d740 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.24]++
  26: UnaryOperator 0x56282187d788 <lundump.c:219:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187d768 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187d740 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.25]
  27: BinaryOperator 0x56282187d800 <lundump.c:219:2, ./lundump.h:28:23> 'char' '='
|-UnaryOperator 0x56282187d788 <lundump.c:219:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187d768 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187d740 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187d7d8 <col:7, ./lundump.h:28:23> 'char' <IntegralCast>
  `-IntegerLiteral 0x56282187d7a8 <col:23> 'int' 81
[B1.26] = [B1.23]
  28: IntegerLiteral 0x56282187d890 <./lundump.h:31:22> 'int' 0
0
  29: CStyleCastExpr 0x56282187d8c0 <lundump.c:220:7, ./lundump.h:31:22> 'char' <IntegralCast>
`-IntegerLiteral 0x56282187d890 <col:22> 'int' 0
(char)[B1.28] (CStyleCastExpr, IntegralCast, char)
  30: DeclRefExpr 0x56282187d828 <lundump.c:220:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  31: UnaryOperator 0x56282187d850 <lundump.c:220:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187d828 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.30]++
  32: UnaryOperator 0x56282187d870 <lundump.c:220:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187d850 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187d828 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.31]
  33: BinaryOperator 0x56282187d8e8 <lundump.c:220:2, ./lundump.h:31:22> 'char' '='
|-UnaryOperator 0x56282187d870 <lundump.c:220:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187d850 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187d828 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187d8c0 <col:7, ./lundump.h:31:22> 'char' <IntegralCast>
  `-IntegerLiteral 0x56282187d890 <col:22> 'int' 0
[B1.32] = [B1.29]
  34: DeclRefExpr 0x56282187d978 <lundump.c:221:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
x
  35: UnaryOperator 0x56282187d9a0 <lundump.c:221:21, col:22> 'int *' prefix '&'
`-DeclRefExpr 0x56282187d978 <col:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
&[B1.34]
  36: CStyleCastExpr 0x56282187d9d8 <lundump.c:221:14, col:22> 'char *' <BitCast>
`-UnaryOperator 0x56282187d9a0 <col:21, col:22> 'int *' prefix '&'
  `-DeclRefExpr 0x56282187d978 <col:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
(char *)[B1.35] (CStyleCastExpr, BitCast, char *)
  37: UnaryOperator 0x56282187da00 <lundump.c:221:13, col:22> 'char' lvalue prefix '*'
`-CStyleCastExpr 0x56282187d9d8 <col:14, col:22> 'char *' <BitCast>
  `-UnaryOperator 0x56282187d9a0 <col:21, col:22> 'int *' prefix '&'
    `-DeclRefExpr 0x56282187d978 <col:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
*[B1.36]
  38: ImplicitCastExpr 0x56282187da30 <lundump.c:221:13, col:22> 'char' <LValueToRValue>
`-UnaryOperator 0x56282187da00 <col:13, col:22> 'char' lvalue prefix '*'
  `-CStyleCastExpr 0x56282187d9d8 <col:14, col:22> 'char *' <BitCast>
    `-UnaryOperator 0x56282187d9a0 <col:21, col:22> 'int *' prefix '&'
      `-DeclRefExpr 0x56282187d978 <col:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
[B1.37] (ImplicitCastExpr, LValueToRValue, char)
  39: CStyleCastExpr 0x56282187da48 <lundump.c:221:7, col:22> 'char' <NoOp>
`-ImplicitCastExpr 0x56282187da30 <col:13, col:22> 'char' <LValueToRValue>
  `-UnaryOperator 0x56282187da00 <col:13, col:22> 'char' lvalue prefix '*'
    `-CStyleCastExpr 0x56282187d9d8 <col:14, col:22> 'char *' <BitCast>
      `-UnaryOperator 0x56282187d9a0 <col:21, col:22> 'int *' prefix '&'
        `-DeclRefExpr 0x56282187d978 <col:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
(char)[B1.38] (CStyleCastExpr, NoOp, char)
  40: DeclRefExpr 0x56282187d910 <lundump.c:221:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  41: UnaryOperator 0x56282187d938 <lundump.c:221:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187d910 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.40]++
  42: UnaryOperator 0x56282187d958 <lundump.c:221:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187d938 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187d910 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.41]
  43: BinaryOperator 0x56282187da70 <lundump.c:221:2, col:22> 'char' '='
|-UnaryOperator 0x56282187d958 <col:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187d938 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187d910 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187da48 <col:7, col:22> 'char' <NoOp>
  `-ImplicitCastExpr 0x56282187da30 <col:13, col:22> 'char' <LValueToRValue>
    `-UnaryOperator 0x56282187da00 <col:13, col:22> 'char' lvalue prefix '*'
      `-CStyleCastExpr 0x56282187d9d8 <col:14, col:22> 'char *' <BitCast>
        `-UnaryOperator 0x56282187d9a0 <col:21, col:22> 'int *' prefix '&'
          `-DeclRefExpr 0x56282187d978 <col:22> 'int' lvalue Var 0x56282187d310 'x' 'int'
[B1.42] = [B1.39]
  44: UnaryExprOrTypeTraitExpr 0x56282187db18 <lundump.c:222:13, col:23> 'unsigned long' sizeof 'int'
sizeof(int)
  45: CStyleCastExpr 0x56282187db48 <lundump.c:222:7, col:23> 'char' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x56282187db18 <col:13, col:23> 'unsigned long' sizeof 'int'
(char)[B1.44] (CStyleCastExpr, IntegralCast, char)
  46: DeclRefExpr 0x56282187da98 <lundump.c:222:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  47: UnaryOperator 0x56282187dac0 <lundump.c:222:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187da98 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.46]++
  48: UnaryOperator 0x56282187dae0 <lundump.c:222:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187dac0 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187da98 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.47]
  49: BinaryOperator 0x56282187db70 <lundump.c:222:2, col:23> 'char' '='
|-UnaryOperator 0x56282187dae0 <col:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187dac0 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187da98 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187db48 <col:7, col:23> 'char' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x56282187db18 <col:13, col:23> 'unsigned long' sizeof 'int'
[B1.48] = [B1.45]
  50: UnaryExprOrTypeTraitExpr 0x56282187dc10 <lundump.c:223:13, col:26> 'unsigned long' sizeof 'size_t':'unsigned long'
sizeof(size_t)
  51: CStyleCastExpr 0x56282187dc40 <lundump.c:223:7, col:26> 'char' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x56282187dc10 <col:13, col:26> 'unsigned long' sizeof 'size_t':'unsigned long'
(char)[B1.50] (CStyleCastExpr, IntegralCast, char)
  52: DeclRefExpr 0x56282187db98 <lundump.c:223:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  53: UnaryOperator 0x56282187dbc0 <lundump.c:223:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187db98 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.52]++
  54: UnaryOperator 0x56282187dbe0 <lundump.c:223:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187dbc0 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187db98 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.53]
  55: BinaryOperator 0x56282187dc68 <lundump.c:223:2, col:26> 'char' '='
|-UnaryOperator 0x56282187dbe0 <col:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187dbc0 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187db98 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187dc40 <col:7, col:26> 'char' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x56282187dc10 <col:13, col:26> 'unsigned long' sizeof 'size_t':'unsigned long'
[B1.54] = [B1.51]
  56: UnaryExprOrTypeTraitExpr 0x56282187dd08 <lundump.c:224:13, col:31> 'unsigned long' sizeof 'Instruction':'unsigned int'
sizeof(Instruction)
  57: CStyleCastExpr 0x56282187dd38 <lundump.c:224:7, col:31> 'char' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x56282187dd08 <col:13, col:31> 'unsigned long' sizeof 'Instruction':'unsigned int'
(char)[B1.56] (CStyleCastExpr, IntegralCast, char)
  58: DeclRefExpr 0x56282187dc90 <lundump.c:224:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  59: UnaryOperator 0x56282187dcb8 <lundump.c:224:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187dc90 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.58]++
  60: UnaryOperator 0x56282187dcd8 <lundump.c:224:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187dcb8 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187dc90 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.59]
  61: BinaryOperator 0x56282187dd60 <lundump.c:224:2, col:31> 'char' '='
|-UnaryOperator 0x56282187dcd8 <col:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187dcb8 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187dc90 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187dd38 <col:7, col:31> 'char' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x56282187dd08 <col:13, col:31> 'unsigned long' sizeof 'Instruction':'unsigned int'
[B1.60] = [B1.57]
  62: UnaryExprOrTypeTraitExpr 0x56282187de00 <lundump.c:225:13, col:30> 'unsigned long' sizeof 'lua_Number':'double'
sizeof(lua_Number)
  63: CStyleCastExpr 0x56282187de30 <lundump.c:225:7, col:30> 'char' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x56282187de00 <col:13, col:30> 'unsigned long' sizeof 'lua_Number':'double'
(char)[B1.62] (CStyleCastExpr, IntegralCast, char)
  64: DeclRefExpr 0x56282187dd88 <lundump.c:225:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  65: UnaryOperator 0x56282187ddb0 <lundump.c:225:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187dd88 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.64]++
  66: UnaryOperator 0x56282187ddd0 <lundump.c:225:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187ddb0 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187dd88 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.65]
  67: BinaryOperator 0x56282187de58 <lundump.c:225:2, col:30> 'char' '='
|-UnaryOperator 0x56282187ddd0 <col:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187ddb0 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187dd88 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187de30 <col:7, col:30> 'char' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x56282187de00 <col:13, col:30> 'unsigned long' sizeof 'lua_Number':'double'
[B1.66] = [B1.63]
  68: FloatingLiteral 0x56282187dee8 <lundump.c:226:27> 'double' 5.000000e-01
0.5
  69: CStyleCastExpr 0x56282187df18 <lundump.c:226:15, col:27> 'lua_Number':'double' <NoOp>
`-FloatingLiteral 0x56282187dee8 <col:27> 'double' 5.000000e-01
(lua_Number)[B1.68] (CStyleCastExpr, NoOp, lua_Number)
  70: IntegerLiteral 0x56282187df60 <lundump.c:226:33> 'int' 0
0
  71: ImplicitCastExpr 0x56282187df80 <lundump.c:226:33> 'double' <IntegralToFloating>
`-IntegerLiteral 0x56282187df60 <col:33> 'int' 0
[B1.70] (ImplicitCastExpr, IntegralToFloating, double)
  72: BinaryOperator 0x56282187df98 <lundump.c:226:14, col:33> 'int' '=='
|-ParenExpr 0x56282187df40 <col:14, col:30> 'lua_Number':'double'
| `-CStyleCastExpr 0x56282187df18 <col:15, col:27> 'lua_Number':'double' <NoOp>
|   `-FloatingLiteral 0x56282187dee8 <col:27> 'double' 5.000000e-01
`-ImplicitCastExpr 0x56282187df80 <col:33> 'double' <IntegralToFloating>
  `-IntegerLiteral 0x56282187df60 <col:33> 'int' 0
([B1.69]) == [B1.71]
  73: CStyleCastExpr 0x56282187e020 <lundump.c:226:7, col:34> 'char' <IntegralCast>
`-ParenExpr 0x56282187e000 <col:13, col:34> 'int'
  `-BinaryOperator 0x56282187df98 <col:14, col:33> 'int' '=='
    |-ParenExpr 0x56282187df40 <col:14, col:30> 'lua_Number':'double'
    | `-CStyleCastExpr 0x56282187df18 <col:15, col:27> 'lua_Number':'double' <NoOp>
    |   `-FloatingLiteral 0x56282187dee8 <col:27> 'double' 5.000000e-01
    `-ImplicitCastExpr 0x56282187df80 <col:33> 'double' <IntegralToFloating>
      `-IntegerLiteral 0x56282187df60 <col:33> 'int' 0
(char)([B1.72]) (CStyleCastExpr, IntegralCast, char)
  74: DeclRefExpr 0x56282187de80 <lundump.c:226:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
h
  75: UnaryOperator 0x56282187dea8 <lundump.c:226:3, col:4> 'char *' postfix '++'
`-DeclRefExpr 0x56282187de80 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
[B1.74]++
  76: UnaryOperator 0x56282187dec8 <lundump.c:226:2, col:4> 'char' lvalue prefix '*'
`-UnaryOperator 0x56282187dea8 <col:3, col:4> 'char *' postfix '++'
  `-DeclRefExpr 0x56282187de80 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
*[B1.75]
  77: BinaryOperator 0x56282187e048 <lundump.c:226:2, col:34> 'char' '='
|-UnaryOperator 0x56282187dec8 <col:2, col:4> 'char' lvalue prefix '*'
| `-UnaryOperator 0x56282187dea8 <col:3, col:4> 'char *' postfix '++'
|   `-DeclRefExpr 0x56282187de80 <col:3> 'char *' lvalue ParmVar 0x56282187d180 'h' 'char *'
`-CStyleCastExpr 0x56282187e020 <col:7, col:34> 'char' <IntegralCast>
  `-ParenExpr 0x56282187e000 <col:13, col:34> 'int'
    `-BinaryOperator 0x56282187df98 <col:14, col:33> 'int' '=='
      |-ParenExpr 0x56282187df40 <col:14, col:30> 'lua_Number':'double'
      | `-CStyleCastExpr 0x56282187df18 <col:15, col:27> 'lua_Number':'double' <NoOp>
      |   `-FloatingLiteral 0x56282187dee8 <col:27> 'double' 5.000000e-01
      `-ImplicitCastExpr 0x56282187df80 <col:33> 'double' <IntegralToFloating>
        `-IntegerLiteral 0x56282187df60 <col:33> 'int' 0
[B1.76] = [B1.73]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
