static void rehash(lua_State *L, Table *t, const TValue *ek)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: DeclRefExpr 0x5654000e8688 <ltable.c:339:12> 'int (const Table *, int *)' Function 0x5654000db1f8 'numusearray' 'int (const Table *, int *)'
numusearray
   2: ImplicitCastExpr 0x5654000e8758 <ltable.c:339:12> 'int (*)(const Table *, int *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000e8688 <col:12> 'int (const Table *, int *)' Function 0x5654000db1f8 'numusearray' 'int (const Table *, int *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const Table *, int *))
   3: DeclRefExpr 0x5654000e86b0 <ltable.c:339:24> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
t
   4: ImplicitCastExpr 0x5654000e87a8 <ltable.c:339:24> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5654000e86b0 <col:24> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
[B1.3] (ImplicitCastExpr, LValueToRValue, Table *)
   5: ImplicitCastExpr 0x5654000e87c0 <ltable.c:339:24> 'const Table *' <BitCast>
`-ImplicitCastExpr 0x5654000e87a8 <col:24> 'Table *' <LValueToRValue>
  `-DeclRefExpr 0x5654000e86b0 <col:24> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
[B1.4] (ImplicitCastExpr, BitCast, const Table *)
   6: DeclRefExpr 0x5654000e86d8 <ltable.c:339:27> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
nums
   7: ImplicitCastExpr 0x5654000e87d8 <ltable.c:339:27> 'int *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5654000e86d8 <col:27> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.6] (ImplicitCastExpr, ArrayToPointerDecay, int *)
   8: CallExpr 0x5654000e8770 <ltable.c:339:12, col:31> 'int'
|-ImplicitCastExpr 0x5654000e8758 <col:12> 'int (*)(const Table *, int *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000e8688 <col:12> 'int (const Table *, int *)' Function 0x5654000db1f8 'numusearray' 'int (const Table *, int *)'
|-ImplicitCastExpr 0x5654000e87c0 <col:24> 'const Table *' <BitCast>
| `-ImplicitCastExpr 0x5654000e87a8 <col:24> 'Table *' <LValueToRValue>
|   `-DeclRefExpr 0x5654000e86b0 <col:24> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
`-ImplicitCastExpr 0x5654000e87d8 <col:27> 'int *' <ArrayToPointerDecay>
  `-DeclRefExpr 0x5654000e86d8 <col:27> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.2]([B1.5], [B1.7])
   9: DeclRefExpr 0x5654000e8660 <ltable.c:339:3> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
nasize
  10: BinaryOperator 0x5654000e87f0 <ltable.c:339:3, col:31> 'int' '='
|-DeclRefExpr 0x5654000e8660 <col:3> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
`-CallExpr 0x5654000e8770 <col:12, col:31> 'int'
  |-ImplicitCastExpr 0x5654000e8758 <col:12> 'int (*)(const Table *, int *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5654000e8688 <col:12> 'int (const Table *, int *)' Function 0x5654000db1f8 'numusearray' 'int (const Table *, int *)'
  |-ImplicitCastExpr 0x5654000e87c0 <col:24> 'const Table *' <BitCast>
  | `-ImplicitCastExpr 0x5654000e87a8 <col:24> 'Table *' <LValueToRValue>
  |   `-DeclRefExpr 0x5654000e86b0 <col:24> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
  `-ImplicitCastExpr 0x5654000e87d8 <col:27> 'int *' <ArrayToPointerDecay>
    `-DeclRefExpr 0x5654000e86d8 <col:27> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.9] = [B1.8]
  11: DeclRefExpr 0x5654000e8840 <ltable.c:340:14> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
nasize
  12: ImplicitCastExpr 0x5654000e8868 <ltable.c:340:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000e8840 <col:14> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: DeclRefExpr 0x5654000e8818 <ltable.c:340:3> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
totaluse
  14: BinaryOperator 0x5654000e8880 <ltable.c:340:3, col:14> 'int' '='
|-DeclRefExpr 0x5654000e8818 <col:3> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
`-ImplicitCastExpr 0x5654000e8868 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000e8840 <col:14> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.13] = [B1.12]
  15: DeclRefExpr 0x5654000e88a8 <ltable.c:341:3> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
totaluse
  16: DeclRefExpr 0x5654000e88d0 <ltable.c:341:15> 'int (const Table *, int *, int *)' Function 0x5654000dc5a8 'numusehash' 'int (const Table *, int *, int *)'
numusehash
  17: ImplicitCastExpr 0x5654000e89e8 <ltable.c:341:15> 'int (*)(const Table *, int *, int *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000e88d0 <col:15> 'int (const Table *, int *, int *)' Function 0x5654000dc5a8 'numusehash' 'int (const Table *, int *, int *)'
[B1.16] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const Table *, int *, int *))
  18: DeclRefExpr 0x5654000e88f8 <ltable.c:341:26> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
t
  19: ImplicitCastExpr 0x5654000e8a40 <ltable.c:341:26> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5654000e88f8 <col:26> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
[B1.18] (ImplicitCastExpr, LValueToRValue, Table *)
  20: ImplicitCastExpr 0x5654000e8a58 <ltable.c:341:26> 'const Table *' <BitCast>
`-ImplicitCastExpr 0x5654000e8a40 <col:26> 'Table *' <LValueToRValue>
  `-DeclRefExpr 0x5654000e88f8 <col:26> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
[B1.19] (ImplicitCastExpr, BitCast, const Table *)
  21: DeclRefExpr 0x5654000e8920 <ltable.c:341:29> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
nums
  22: ImplicitCastExpr 0x5654000e8a70 <ltable.c:341:29> 'int *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5654000e8920 <col:29> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.21] (ImplicitCastExpr, ArrayToPointerDecay, int *)
  23: DeclRefExpr 0x5654000e8948 <ltable.c:341:36> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
nasize
  24: UnaryOperator 0x5654000e8970 <ltable.c:341:35, col:36> 'int *' prefix '&'
`-DeclRefExpr 0x5654000e8948 <col:36> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
&[B1.23]
  25: CallExpr 0x5654000e8a00 <ltable.c:341:15, col:42> 'int'
|-ImplicitCastExpr 0x5654000e89e8 <col:15> 'int (*)(const Table *, int *, int *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000e88d0 <col:15> 'int (const Table *, int *, int *)' Function 0x5654000dc5a8 'numusehash' 'int (const Table *, int *, int *)'
|-ImplicitCastExpr 0x5654000e8a58 <col:26> 'const Table *' <BitCast>
| `-ImplicitCastExpr 0x5654000e8a40 <col:26> 'Table *' <LValueToRValue>
|   `-DeclRefExpr 0x5654000e88f8 <col:26> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
|-ImplicitCastExpr 0x5654000e8a70 <col:29> 'int *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x5654000e8920 <col:29> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
`-UnaryOperator 0x5654000e8970 <col:35, col:36> 'int *' prefix '&'
  `-DeclRefExpr 0x5654000e8948 <col:36> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.17]([B1.20], [B1.22], [B1.24])
  26: CompoundAssignOperator 0x5654000e8a88 <ltable.c:341:3, col:42> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x5654000e88a8 <col:3> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
`-CallExpr 0x5654000e8a00 <col:15, col:42> 'int'
  |-ImplicitCastExpr 0x5654000e89e8 <col:15> 'int (*)(const Table *, int *, int *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5654000e88d0 <col:15> 'int (const Table *, int *, int *)' Function 0x5654000dc5a8 'numusehash' 'int (const Table *, int *, int *)'
  |-ImplicitCastExpr 0x5654000e8a58 <col:26> 'const Table *' <BitCast>
  | `-ImplicitCastExpr 0x5654000e8a40 <col:26> 'Table *' <LValueToRValue>
  |   `-DeclRefExpr 0x5654000e88f8 <col:26> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
  |-ImplicitCastExpr 0x5654000e8a70 <col:29> 'int *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x5654000e8920 <col:29> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
  `-UnaryOperator 0x5654000e8970 <col:35, col:36> 'int *' prefix '&'
    `-DeclRefExpr 0x5654000e8948 <col:36> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.15] += [B1.25]
  27: DeclRefExpr 0x5654000e8ac0 <ltable.c:343:3> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
nasize
  28: DeclRefExpr 0x5654000e8ae8 <ltable.c:343:13> 'int (const TValue *, int *)' Function 0x5654000da978 'countint' 'int (const TValue *, int *)'
countint
  29: ImplicitCastExpr 0x5654000e8b60 <ltable.c:343:13> 'int (*)(const TValue *, int *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000e8ae8 <col:13> 'int (const TValue *, int *)' Function 0x5654000da978 'countint' 'int (const TValue *, int *)'
[B1.28] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const TValue *, int *))
  30: DeclRefExpr 0x5654000e8b10 <ltable.c:343:22> 'const TValue *' lvalue ParmVar 0x5654000e7e38 'ek' 'const TValue *'
ek
  31: ImplicitCastExpr 0x5654000e8bb0 <ltable.c:343:22> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5654000e8b10 <col:22> 'const TValue *' lvalue ParmVar 0x5654000e7e38 'ek' 'const TValue *'
[B1.30] (ImplicitCastExpr, LValueToRValue, const TValue *)
  32: DeclRefExpr 0x5654000e8b38 <ltable.c:343:26> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
nums
  33: ImplicitCastExpr 0x5654000e8bc8 <ltable.c:343:26> 'int *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5654000e8b38 <col:26> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.32] (ImplicitCastExpr, ArrayToPointerDecay, int *)
  34: CallExpr 0x5654000e8b78 <ltable.c:343:13, col:30> 'int'
|-ImplicitCastExpr 0x5654000e8b60 <col:13> 'int (*)(const TValue *, int *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000e8ae8 <col:13> 'int (const TValue *, int *)' Function 0x5654000da978 'countint' 'int (const TValue *, int *)'
|-ImplicitCastExpr 0x5654000e8bb0 <col:22> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5654000e8b10 <col:22> 'const TValue *' lvalue ParmVar 0x5654000e7e38 'ek' 'const TValue *'
`-ImplicitCastExpr 0x5654000e8bc8 <col:26> 'int *' <ArrayToPointerDecay>
  `-DeclRefExpr 0x5654000e8b38 <col:26> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.29]([B1.31], [B1.33])
  35: CompoundAssignOperator 0x5654000e8be0 <ltable.c:343:3, col:30> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x5654000e8ac0 <col:3> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
`-CallExpr 0x5654000e8b78 <col:13, col:30> 'int'
  |-ImplicitCastExpr 0x5654000e8b60 <col:13> 'int (*)(const TValue *, int *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5654000e8ae8 <col:13> 'int (const TValue *, int *)' Function 0x5654000da978 'countint' 'int (const TValue *, int *)'
  |-ImplicitCastExpr 0x5654000e8bb0 <col:22> 'const TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5654000e8b10 <col:22> 'const TValue *' lvalue ParmVar 0x5654000e7e38 'ek' 'const TValue *'
  `-ImplicitCastExpr 0x5654000e8bc8 <col:26> 'int *' <ArrayToPointerDecay>
    `-DeclRefExpr 0x5654000e8b38 <col:26> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.27] += [B1.34]
  36: DeclRefExpr 0x5654000e8c18 <ltable.c:344:3> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
totaluse
  37: UnaryOperator 0x5654000e8c40 <ltable.c:344:3, col:11> 'int' postfix '++'
`-DeclRefExpr 0x5654000e8c18 <col:3> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
[B1.36]++
  38: DeclRefExpr 0x5654000e8c88 <ltable.c:346:8> 'int (int *, int *)' Function 0x5654000d9818 'computesizes' 'int (int *, int *)'
computesizes
  39: ImplicitCastExpr 0x5654000e8d78 <ltable.c:346:8> 'int (*)(int *, int *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000e8c88 <col:8> 'int (int *, int *)' Function 0x5654000d9818 'computesizes' 'int (int *, int *)'
[B1.38] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int *, int *))
  40: DeclRefExpr 0x5654000e8cb0 <ltable.c:346:21> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
nums
  41: ImplicitCastExpr 0x5654000e8dc8 <ltable.c:346:21> 'int *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5654000e8cb0 <col:21> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B1.40] (ImplicitCastExpr, ArrayToPointerDecay, int *)
  42: DeclRefExpr 0x5654000e8cd8 <ltable.c:346:28> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
nasize
  43: UnaryOperator 0x5654000e8d00 <ltable.c:346:27, col:28> 'int *' prefix '&'
`-DeclRefExpr 0x5654000e8cd8 <col:28> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
&[B1.42]
  44: CallExpr 0x5654000e8d90 <ltable.c:346:8, col:34> 'int'
|-ImplicitCastExpr 0x5654000e8d78 <col:8> 'int (*)(int *, int *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000e8c88 <col:8> 'int (int *, int *)' Function 0x5654000d9818 'computesizes' 'int (int *, int *)'
|-ImplicitCastExpr 0x5654000e8dc8 <col:21> 'int *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x5654000e8cb0 <col:21> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
`-UnaryOperator 0x5654000e8d00 <col:27, col:28> 'int *' prefix '&'
  `-DeclRefExpr 0x5654000e8cd8 <col:28> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.39]([B1.41], [B1.43])
  45: DeclRefExpr 0x5654000e8c60 <ltable.c:346:3> 'int' lvalue Var 0x5654000e80b8 'na' 'int'
na
  46: BinaryOperator 0x5654000e8de0 <ltable.c:346:3, col:34> 'int' '='
|-DeclRefExpr 0x5654000e8c60 <col:3> 'int' lvalue Var 0x5654000e80b8 'na' 'int'
`-CallExpr 0x5654000e8d90 <col:8, col:34> 'int'
  |-ImplicitCastExpr 0x5654000e8d78 <col:8> 'int (*)(int *, int *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5654000e8c88 <col:8> 'int (int *, int *)' Function 0x5654000d9818 'computesizes' 'int (int *, int *)'
  |-ImplicitCastExpr 0x5654000e8dc8 <col:21> 'int *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x5654000e8cb0 <col:21> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
  `-UnaryOperator 0x5654000e8d00 <col:27, col:28> 'int *' prefix '&'
    `-DeclRefExpr 0x5654000e8cd8 <col:28> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.45] = [B1.44]
  47: DeclRefExpr 0x5654000e8e08 <ltable.c:348:3> 'void (lua_State *, Table *, int, int)' Function 0x5654000e1f90 'resize' 'void (lua_State *, Table *, int, int)'
resize
  48: ImplicitCastExpr 0x5654000e8f50 <ltable.c:348:3> 'void (*)(lua_State *, Table *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5654000e8e08 <col:3> 'void (lua_State *, Table *, int, int)' Function 0x5654000e1f90 'resize' 'void (lua_State *, Table *, int, int)'
[B1.47] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, Table *, int, int))
  49: DeclRefExpr 0x5654000e8e30 <ltable.c:348:10> 'lua_State *' lvalue ParmVar 0x5654000e7d58 'L' 'lua_State *'
L
  50: ImplicitCastExpr 0x5654000e8fb0 <ltable.c:348:10> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5654000e8e30 <col:10> 'lua_State *' lvalue ParmVar 0x5654000e7d58 'L' 'lua_State *'
[B1.49] (ImplicitCastExpr, LValueToRValue, lua_State *)
  51: DeclRefExpr 0x5654000e8e58 <ltable.c:348:13> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
t
  52: ImplicitCastExpr 0x5654000e8fc8 <ltable.c:348:13> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5654000e8e58 <col:13> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
[B1.51] (ImplicitCastExpr, LValueToRValue, Table *)
  53: DeclRefExpr 0x5654000e8e80 <ltable.c:348:16> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
nasize
  54: ImplicitCastExpr 0x5654000e8fe0 <ltable.c:348:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000e8e80 <col:16> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
[B1.53] (ImplicitCastExpr, LValueToRValue, int)
  55: DeclRefExpr 0x5654000e8ea8 <ltable.c:348:24> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
totaluse
  56: ImplicitCastExpr 0x5654000e8ef8 <ltable.c:348:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000e8ea8 <col:24> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
[B1.55] (ImplicitCastExpr, LValueToRValue, int)
  57: DeclRefExpr 0x5654000e8ed0 <ltable.c:348:35> 'int' lvalue Var 0x5654000e80b8 'na' 'int'
na
  58: ImplicitCastExpr 0x5654000e8f10 <ltable.c:348:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000e8ed0 <col:35> 'int' lvalue Var 0x5654000e80b8 'na' 'int'
[B1.57] (ImplicitCastExpr, LValueToRValue, int)
  59: BinaryOperator 0x5654000e8f28 <ltable.c:348:24, col:35> 'int' '-'
|-ImplicitCastExpr 0x5654000e8ef8 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000e8ea8 <col:24> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
`-ImplicitCastExpr 0x5654000e8f10 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000e8ed0 <col:35> 'int' lvalue Var 0x5654000e80b8 'na' 'int'
[B1.56] - [B1.58]
  60: CallExpr 0x5654000e8f68 <ltable.c:348:3, col:37> 'void'
|-ImplicitCastExpr 0x5654000e8f50 <col:3> 'void (*)(lua_State *, Table *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5654000e8e08 <col:3> 'void (lua_State *, Table *, int, int)' Function 0x5654000e1f90 'resize' 'void (lua_State *, Table *, int, int)'
|-ImplicitCastExpr 0x5654000e8fb0 <col:10> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5654000e8e30 <col:10> 'lua_State *' lvalue ParmVar 0x5654000e7d58 'L' 'lua_State *'
|-ImplicitCastExpr 0x5654000e8fc8 <col:13> 'Table *' <LValueToRValue>
| `-DeclRefExpr 0x5654000e8e58 <col:13> 'Table *' lvalue ParmVar 0x5654000e7dc8 't' 'Table *'
|-ImplicitCastExpr 0x5654000e8fe0 <col:16> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000e8e80 <col:16> 'int' lvalue Var 0x5654000e8040 'nasize' 'int'
`-BinaryOperator 0x5654000e8f28 <col:24, col:35> 'int' '-'
  |-ImplicitCastExpr 0x5654000e8ef8 <col:24> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5654000e8ea8 <col:24> 'int' lvalue Var 0x5654000e8380 'totaluse' 'int'
  `-ImplicitCastExpr 0x5654000e8f10 <col:35> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5654000e8ed0 <col:35> 'int' lvalue Var 0x5654000e80b8 'na' 'int'
[B1.48]([B1.50], [B1.52], [B1.54], [B1.59])
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5654000e84f0 <ltable.c:338:25> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
i
   2: UnaryOperator 0x5654000e8518 <ltable.c:338:25, col:26> 'int' postfix '++'
`-DeclRefExpr 0x5654000e84f0 <col:25> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
[B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: IntegerLiteral 0x5654000e85e0 <ltable.c:338:40> 'int' 0
0
   2: DeclRefExpr 0x5654000e8538 <ltable.c:338:30> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
nums
   3: ImplicitCastExpr 0x5654000e8588 <ltable.c:338:30> 'int *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5654000e8538 <col:30> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
[B3.2] (ImplicitCastExpr, ArrayToPointerDecay, int *)
   4: DeclRefExpr 0x5654000e8560 <ltable.c:338:35> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
i
   5: ImplicitCastExpr 0x5654000e85a0 <ltable.c:338:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000e8560 <col:35> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
[B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: ArraySubscriptExpr 0x5654000e85b8 <ltable.c:338:30, col:36> 'int' lvalue
|-ImplicitCastExpr 0x5654000e8588 <col:30> 'int *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x5654000e8538 <col:30> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
`-ImplicitCastExpr 0x5654000e85a0 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000e8560 <col:35> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
[B3.3][[B3.5]]
   7: BinaryOperator 0x5654000e8600 <ltable.c:338:30, col:40> 'int' '='
|-ArraySubscriptExpr 0x5654000e85b8 <col:30, col:36> 'int' lvalue
| |-ImplicitCastExpr 0x5654000e8588 <col:30> 'int *' <ArrayToPointerDecay>
| | `-DeclRefExpr 0x5654000e8538 <col:30> 'int [27]' lvalue Var 0x5654000e8210 'nums' 'int [27]'
| `-ImplicitCastExpr 0x5654000e85a0 <col:35> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5654000e8560 <col:35> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
`-IntegerLiteral 0x5654000e85e0 <col:40> 'int' 0
[B3.6] = [B3.1]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x5654000e8468 <ltable.c:338:13> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
i
   2: ImplicitCastExpr 0x5654000e84b0 <ltable.c:338:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000e8468 <col:13> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
[B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5654000e8490 <ltable.c:42:18> 'int' 26
26
   4: BinaryOperator 0x5654000e84c8 <ltable.c:338:13, line:42:18> 'int' '<='
|-ImplicitCastExpr 0x5654000e84b0 <line:338:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000e8468 <col:13> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
`-IntegerLiteral 0x5654000e8490 <line:42:18> 'int' 26
[B4.2] <= [B4.3]
   T: for (...; [B4.4]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: DeclStmt 0x565400100868 <ltable.c:334:7>col:7
`-VarDecl 0x5654000e8040 <col:3, col:7> col:7 used nasize 'int'
int nasize;
   2: DeclStmt 0x565400100850 <ltable.c:334:15>col:15
`-VarDecl 0x5654000e80b8 <col:3, col:15> col:15 used na 'int'
int na;
   3: DeclStmt 0x5654000e8270 <ltable.c:335:3, col:22>col:7
`-VarDecl 0x5654000e8210 <col:3, col:21> col:7 used nums 'int [27]'
int nums[27];
   4: DeclStmt 0x5654000e8300 <ltable.c:336:3, col:8>col:7
`-VarDecl 0x5654000e82a0 <col:3, col:7> col:7 used i 'int'
int i;
   5: DeclStmt 0x5654000e83e0 <ltable.c:337:3, col:15>col:7
`-VarDecl 0x5654000e8380 <col:3, col:7> col:7 used totaluse 'int'
int totaluse;
   6: IntegerLiteral 0x5654000e8420 <ltable.c:338:10> 'int' 0
0
   7: DeclRefExpr 0x5654000e83f8 <ltable.c:338:8> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
i
   8: BinaryOperator 0x5654000e8440 <ltable.c:338:8, col:10> 'int' '='
|-DeclRefExpr 0x5654000e83f8 <col:8> 'int' lvalue Var 0x5654000e82a0 'i' 'int'
`-IntegerLiteral 0x5654000e8420 <col:10> 'int' 0
[B5.7] = [B5.6]
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1
