static void forlist(LexState *ls, TString *indexname)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: DeclRefExpr 0x558fa8f38978 <lparser.c:1104:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
   2: ImplicitCastExpr 0x558fa8f389f0 <lparser.c:1104:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38978 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f389a0 <lparser.c:1104:13> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f38a40 <lparser.c:1104:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f389a0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f389c8 <lparser.c:1104:17> 'int' EnumConstant 0x558fa8e9e260 'TK_IN' 'int'
TK_IN
   6: CallExpr 0x558fa8f38a08 <lparser.c:1104:3, col:22> 'void'
|-ImplicitCastExpr 0x558fa8f389f0 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38978 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f38a40 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f389a0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8f389c8 <col:17> 'int' EnumConstant 0x558fa8e9e260 'TK_IN' 'int'
[B1.2]([B1.4], [B1.5])
   7: DeclRefExpr 0x558fa8f38a80 <lparser.c:1105:10> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f38aa8 <lparser.c:1105:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38a80 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: MemberExpr 0x558fa8f38ac0 <lparser.c:1105:10, col:14> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8f38aa8 <col:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f38a80 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.8]->linenumber
  10: ImplicitCastExpr 0x558fa8f38af8 <lparser.c:1105:10, col:14> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f38ac0 <col:10, col:14> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8f38aa8 <col:10> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f38a80 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x558fa8f38a58 <lparser.c:1105:3> 'int' lvalue Var 0x558fa8f37938 'line' 'int'
line
  12: BinaryOperator 0x558fa8f38b10 <lparser.c:1105:3, col:14> 'int' '='
|-DeclRefExpr 0x558fa8f38a58 <col:3> 'int' lvalue Var 0x558fa8f37938 'line' 'int'
`-ImplicitCastExpr 0x558fa8f38af8 <col:10, col:14> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f38ac0 <col:10, col:14> 'int' lvalue ->linenumber 0x558fa8ea0308
    `-ImplicitCastExpr 0x558fa8f38aa8 <col:10> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f38a80 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.11] = [B1.10]
  13: DeclRefExpr 0x558fa8f38b38 <lparser.c:1106:3> 'void (LexState *, int, int, expdesc *)' Function 0x558fa8efeab0 'adjust_assign' 'void (LexState *, int, int, expdesc *)'
adjust_assign
  14: ImplicitCastExpr 0x558fa8f38cf0 <lparser.c:1106:3> 'void (*)(LexState *, int, int, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38b38 <col:3> 'void (LexState *, int, int, expdesc *)' Function 0x558fa8efeab0 'adjust_assign' 'void (LexState *, int, int, expdesc *)'
[B1.13] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, expdesc *))
  15: DeclRefExpr 0x558fa8f38b60 <lparser.c:1106:17> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  16: ImplicitCastExpr 0x558fa8f38d50 <lparser.c:1106:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38b60 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.15] (ImplicitCastExpr, LValueToRValue, LexState *)
  17: IntegerLiteral 0x558fa8f38b88 <lparser.c:1106:21> 'int' 3
3
  18: DeclRefExpr 0x558fa8f38ba8 <lparser.c:1106:24> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
explist1
  19: ImplicitCastExpr 0x558fa8f38c40 <lparser.c:1106:24> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38ba8 <col:24> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
[B1.18] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, expdesc *))
  20: DeclRefExpr 0x558fa8f38bd0 <lparser.c:1106:33> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  21: ImplicitCastExpr 0x558fa8f38c90 <lparser.c:1106:33> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38bd0 <col:33> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.20] (ImplicitCastExpr, LValueToRValue, LexState *)
  22: DeclRefExpr 0x558fa8f38bf8 <lparser.c:1106:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
e
  23: UnaryOperator 0x558fa8f38c20 <lparser.c:1106:37, col:38> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f38bf8 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
&[B1.22]
  24: CallExpr 0x558fa8f38c58 <lparser.c:1106:24, col:39> 'int'
|-ImplicitCastExpr 0x558fa8f38c40 <col:24> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38ba8 <col:24> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f38c90 <col:33> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38bd0 <col:33> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f38c20 <col:37, col:38> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f38bf8 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
[B1.19]([B1.21], [B1.23])
  25: DeclRefExpr 0x558fa8f38ca8 <lparser.c:1106:43> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
e
  26: UnaryOperator 0x558fa8f38cd0 <lparser.c:1106:42, col:43> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f38ca8 <col:43> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
&[B1.25]
  27: CallExpr 0x558fa8f38d08 <lparser.c:1106:3, col:44> 'void'
|-ImplicitCastExpr 0x558fa8f38cf0 <col:3> 'void (*)(LexState *, int, int, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38b38 <col:3> 'void (LexState *, int, int, expdesc *)' Function 0x558fa8efeab0 'adjust_assign' 'void (LexState *, int, int, expdesc *)'
|-ImplicitCastExpr 0x558fa8f38d50 <col:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38b60 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-IntegerLiteral 0x558fa8f38b88 <col:21> 'int' 3
|-CallExpr 0x558fa8f38c58 <col:24, col:39> 'int'
| |-ImplicitCastExpr 0x558fa8f38c40 <col:24> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f38ba8 <col:24> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
| |-ImplicitCastExpr 0x558fa8f38c90 <col:33> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f38bd0 <col:33> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
| `-UnaryOperator 0x558fa8f38c20 <col:37, col:38> 'expdesc *' prefix '&'
|   `-DeclRefExpr 0x558fa8f38bf8 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
`-UnaryOperator 0x558fa8f38cd0 <col:42, col:43> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f38ca8 <col:43> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f377f8 'e' 'expdesc':'struct expdesc'
[B1.14]([B1.16], [B1.17], [B1.24], [B1.26])
  28: DeclRefExpr 0x558fa8f38d68 <lparser.c:1107:3> 'void (FuncState *, int)' Function 0x558fa8eb9f58 'luaK_checkstack' 'void (FuncState *, int)'
luaK_checkstack
  29: ImplicitCastExpr 0x558fa8f38dd8 <lparser.c:1107:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38d68 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9f58 'luaK_checkstack' 'void (FuncState *, int)'
[B1.28] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  30: DeclRefExpr 0x558fa8f38d90 <lparser.c:1107:19> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
fs
  31: ImplicitCastExpr 0x558fa8f38e28 <lparser.c:1107:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38d90 <col:19> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
[B1.30] (ImplicitCastExpr, LValueToRValue, FuncState *)
  32: IntegerLiteral 0x558fa8f38db8 <lparser.c:1107:23> 'int' 3
3
  33: CallExpr 0x558fa8f38df0 <lparser.c:1107:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f38dd8 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38d68 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9f58 'luaK_checkstack' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f38e28 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38d90 <col:19> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f38db8 <col:23> 'int' 3
[B1.29]([B1.31], [B1.32])
  34: DeclRefExpr 0x558fa8f38e40 <lparser.c:1108:3> 'void (LexState *, int, int, int, int)' Function 0x558fa8f33480 'forbody' 'void (LexState *, int, int, int, int)'
forbody
  35: ImplicitCastExpr 0x558fa8f38f88 <lparser.c:1108:3> 'void (*)(LexState *, int, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38e40 <col:3> 'void (LexState *, int, int, int, int)' Function 0x558fa8f33480 'forbody' 'void (LexState *, int, int, int, int)'
[B1.34] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int, int))
  36: DeclRefExpr 0x558fa8f38e68 <lparser.c:1108:11> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  37: ImplicitCastExpr 0x558fa8f38ff0 <lparser.c:1108:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38e68 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B1.36] (ImplicitCastExpr, LValueToRValue, LexState *)
  38: DeclRefExpr 0x558fa8f38e90 <lparser.c:1108:15> 'int' lvalue Var 0x558fa8f379c8 'base' 'int'
base
  39: ImplicitCastExpr 0x558fa8f39008 <lparser.c:1108:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38e90 <col:15> 'int' lvalue Var 0x558fa8f379c8 'base' 'int'
[B1.38] (ImplicitCastExpr, LValueToRValue, int)
  40: DeclRefExpr 0x558fa8f38eb8 <lparser.c:1108:21> 'int' lvalue Var 0x558fa8f37938 'line' 'int'
line
  41: ImplicitCastExpr 0x558fa8f39020 <lparser.c:1108:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38eb8 <col:21> 'int' lvalue Var 0x558fa8f37938 'line' 'int'
[B1.40] (ImplicitCastExpr, LValueToRValue, int)
  42: DeclRefExpr 0x558fa8f38ee0 <lparser.c:1108:27> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
nvars
  43: ImplicitCastExpr 0x558fa8f38f28 <lparser.c:1108:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38ee0 <col:27> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B1.42] (ImplicitCastExpr, LValueToRValue, int)
  44: IntegerLiteral 0x558fa8f38f08 <lparser.c:1108:35> 'int' 3
3
  45: BinaryOperator 0x558fa8f38f40 <lparser.c:1108:27, col:35> 'int' '-'
|-ImplicitCastExpr 0x558fa8f38f28 <col:27> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38ee0 <col:27> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
`-IntegerLiteral 0x558fa8f38f08 <col:35> 'int' 3
[B1.43] - [B1.44]
  46: IntegerLiteral 0x558fa8f38f68 <lparser.c:1108:38> 'int' 0
0
  47: CallExpr 0x558fa8f38fa0 <lparser.c:1108:3, col:39> 'void'
|-ImplicitCastExpr 0x558fa8f38f88 <col:3> 'void (*)(LexState *, int, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38e40 <col:3> 'void (LexState *, int, int, int, int)' Function 0x558fa8f33480 'forbody' 'void (LexState *, int, int, int, int)'
|-ImplicitCastExpr 0x558fa8f38ff0 <col:11> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38e68 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f39008 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38e90 <col:15> 'int' lvalue Var 0x558fa8f379c8 'base' 'int'
|-ImplicitCastExpr 0x558fa8f39020 <col:21> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38eb8 <col:21> 'int' lvalue Var 0x558fa8f37938 'line' 'int'
|-BinaryOperator 0x558fa8f38f40 <col:27, col:35> 'int' '-'
| |-ImplicitCastExpr 0x558fa8f38f28 <col:27> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f38ee0 <col:27> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
| `-IntegerLiteral 0x558fa8f38f08 <col:35> 'int' 3
`-IntegerLiteral 0x558fa8f38f68 <col:38> 'int' 0
[B1.35]([B1.37], [B1.39], [B1.41], [B1.45], [B1.46])
   Preds (1): B4
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: DeclRefExpr 0x558fa8f38780 <lparser.c:1103:5> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
   2: ImplicitCastExpr 0x558fa8f388c8 <lparser.c:1103:5> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38780 <col:5> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
   3: DeclRefExpr 0x558fa8f387a8 <lparser.c:1103:18> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f38940 <lparser.c:1103:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f387a8 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f387d0 <lparser.c:1103:22> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
str_checkname
   6: ImplicitCastExpr 0x558fa8f38820 <lparser.c:1103:22> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f387d0 <col:22> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
[B3.5] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *))
   7: DeclRefExpr 0x558fa8f387f8 <lparser.c:1103:36> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f38868 <lparser.c:1103:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f387f8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B3.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: CallExpr 0x558fa8f38838 <lparser.c:1103:22, col:38> 'TString *'
|-ImplicitCastExpr 0x558fa8f38820 <col:22> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f387d0 <col:22> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
`-ImplicitCastExpr 0x558fa8f38868 <col:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f387f8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B3.6]([B3.8])
  10: DeclRefExpr 0x558fa8f38880 <lparser.c:1103:41> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
nvars
  11: UnaryOperator 0x558fa8f388a8 <lparser.c:1103:41, col:46> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f38880 <col:41> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B3.10]++
  12: CallExpr 0x558fa8f38900 <lparser.c:1103:5, col:48> 'void'
|-ImplicitCastExpr 0x558fa8f388c8 <col:5> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38780 <col:5> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f38940 <col:18> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f387a8 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-CallExpr 0x558fa8f38838 <col:22, col:38> 'TString *'
| |-ImplicitCastExpr 0x558fa8f38820 <col:22> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f387d0 <col:22> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
| `-ImplicitCastExpr 0x558fa8f38868 <col:36> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f387f8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f388a8 <col:41, col:46> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f38880 <col:41> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B3.2]([B3.4], [B3.9], [B3.11])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x558fa8f386b0 <lparser.c:1102:10> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   2: ImplicitCastExpr 0x558fa8f38718 <lparser.c:1102:10> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f386b0 <col:10> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f386d8 <lparser.c:1102:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f38768 <lparser.c:1102:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f386d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f38700 <lparser.c:1102:23> 'int' 44
','
   6: CallExpr 0x558fa8f38730 <lparser.c:1102:10, col:26> 'int'
|-ImplicitCastExpr 0x558fa8f38718 <col:10> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f386b0 <col:10> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f38768 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f386d8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f38700 <col:23> 'int' 44
[B4.2]([B4.4], [B4.5])
   T: while [B4.6]
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x558fa8f37740 <lparser.c:1091:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f37768 <lparser.c:1091:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37740 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f37780 <lparser.c:1091:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f37768 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f37740 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.2]->fs
   4: ImplicitCastExpr 0x558fa8f377b8 <lparser.c:1091:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f37780 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f37768 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f37740 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f377d0 <lparser.c:1091:3, col:25>col:14
`-VarDecl 0x558fa8f376e0 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f377b8 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f37780 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f37768 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f37740 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f37858 <lparser.c:1092:3, col:12>col:11
`-VarDecl 0x558fa8f377f8 <col:3, col:11> col:11 used e 'expdesc':'struct expdesc'
expdesc e;
   7: IntegerLiteral 0x558fa8f378e8 <lparser.c:1093:15> 'int' 0
0
   8: DeclStmt 0x558fa8f37908 <lparser.c:1093:3, col:16>col:7
`-VarDecl 0x558fa8f37888 <col:3, col:15> col:7 used nvars 'int' cinit
  `-IntegerLiteral 0x558fa8f378e8 <col:15> 'int' 0
int nvars = 0;
   9: DeclStmt 0x558fa8f37998 <lparser.c:1094:3, col:11>col:7
`-VarDecl 0x558fa8f37938 <col:3, col:7> col:7 used line 'int'
int line;
  10: DeclRefExpr 0x558fa8f37a28 <lparser.c:1095:14> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x558fa8f37a50 <lparser.c:1095:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37a28 <col:14> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
[B5.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: MemberExpr 0x558fa8f37a68 <lparser.c:1095:14, col:18> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f37a50 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f37a28 <col:14> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
[B5.11]->freereg
  13: ImplicitCastExpr 0x558fa8f37aa0 <lparser.c:1095:14, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f37a68 <col:14, col:18> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f37a50 <col:14> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f37a28 <col:14> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
[B5.12] (ImplicitCastExpr, LValueToRValue, int)
  14: DeclStmt 0x558fa8f37ab8 <lparser.c:1095:3, col:25>col:7
`-VarDecl 0x558fa8f379c8 <col:3, col:18> col:7 used base 'int' cinit
  `-ImplicitCastExpr 0x558fa8f37aa0 <col:14, col:18> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f37a68 <col:14, col:18> 'int' lvalue ->freereg 0x558fa8eb42f0
      `-ImplicitCastExpr 0x558fa8f37a50 <col:14> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f37a28 <col:14> 'FuncState *' lvalue Var 0x558fa8f376e0 'fs' 'FuncState *'
int base = fs->freereg;
  15: DeclRefExpr 0x558fa8f37ad0 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  16: ImplicitCastExpr 0x558fa8f37de8 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f37ad0 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B5.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  17: DeclRefExpr 0x558fa8f37af8 <lparser.c:1097:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  18: ImplicitCastExpr 0x558fa8f37e40 <lparser.c:1097:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37af8 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.17] (ImplicitCastExpr, LValueToRValue, LexState *)
  19: DeclRefExpr 0x558fa8f37b20 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  20: ImplicitCastExpr 0x558fa8f37d00 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f37b20 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B5.19] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  21: DeclRefExpr 0x558fa8f37b48 <lparser.c:1097:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  22: ImplicitCastExpr 0x558fa8f37d58 <lparser.c:1097:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37b48 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.21] (ImplicitCastExpr, LValueToRValue, LexState *)
  23: StringLiteral 0x558fa8f37b70 <lparser.c:157:39, line:1097:27> 'char [16]' lvalue "(for generator)"
"(for generator)"
  24: ImplicitCastExpr 0x558fa8f37d70 <lparser.c:157:39, line:1097:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f37b70 <line:157:39, line:1097:27> 'char [16]' lvalue "(for generator)"
[B5.23] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  25: ImplicitCastExpr 0x558fa8f37d88 <lparser.c:157:39, line:1097:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f37d70 <line:157:39, line:1097:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f37b70 <line:157:39, line:1097:27> 'char [16]' lvalue "(for generator)"
[B5.24] (ImplicitCastExpr, BitCast, const char *)
  26: UnaryExprOrTypeTraitExpr 0x558fa8f37c08 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f37be8 <col:52, col:54> 'char [16]' lvalue
  `-StringLiteral 0x558fa8f37bb0 <line:1097:27> 'char [16]' lvalue "(for generator)"
sizeof ("(for generator)")
  27: UnaryExprOrTypeTraitExpr 0x558fa8f37c38 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  28: BinaryOperator 0x558fa8f37c58 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f37c08 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f37be8 <col:52, col:54> 'char [16]' lvalue
|   `-StringLiteral 0x558fa8f37bb0 <line:1097:27> 'char [16]' lvalue "(for generator)"
`-UnaryExprOrTypeTraitExpr 0x558fa8f37c38 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B5.26] / [B5.27]
  29: IntegerLiteral 0x558fa8f37ca0 <lparser.c:157:70> 'int' 1
1
  30: ImplicitCastExpr 0x558fa8f37cc0 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f37ca0 <col:70> 'int' 1
[B5.29] (ImplicitCastExpr, IntegralCast, unsigned long)
  31: BinaryOperator 0x558fa8f37cd8 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f37c80 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f37c58 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f37c08 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f37be8 <col:52, col:54> 'char [16]' lvalue
|   |   `-StringLiteral 0x558fa8f37bb0 <line:1097:27> 'char [16]' lvalue "(for generator)"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f37c38 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f37cc0 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f37ca0 <col:70> 'int' 1
([B5.28]) - [B5.30]
  32: CallExpr 0x558fa8f37d18 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f37d00 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f37b20 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f37d58 <line:1097:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37b48 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f37d88 <line:157:39, line:1097:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f37d70 <line:157:39, line:1097:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f37b70 <line:157:39, line:1097:27> 'char [16]' lvalue "(for generator)"
`-BinaryOperator 0x558fa8f37cd8 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f37c80 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f37c58 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f37c08 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f37be8 <col:52, col:54> 'char [16]' lvalue
  |   |   `-StringLiteral 0x558fa8f37bb0 <line:1097:27> 'char [16]' lvalue "(for generator)"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f37c38 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f37cc0 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f37ca0 <col:70> 'int' 1
[B5.20]([B5.22], [B5.25], [B5.31])
  33: DeclRefExpr 0x558fa8f37da0 <lparser.c:1097:46> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
nvars
  34: UnaryOperator 0x558fa8f37dc8 <lparser.c:1097:46, col:51> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f37da0 <col:46> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.33]++
  35: CallExpr 0x558fa8f37e00 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f37de8 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f37ad0 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f37e40 <line:1097:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37af8 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-CallExpr 0x558fa8f37d18 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f37d00 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f37b20 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f37d58 <line:1097:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f37b48 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f37d88 <line:157:39, line:1097:27> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f37d70 <line:157:39, line:1097:27> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f37b70 <line:157:39, line:1097:27> 'char [16]' lvalue "(for generator)"
| `-BinaryOperator 0x558fa8f37cd8 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f37c80 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f37c58 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f37c08 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f37be8 <col:52, col:54> 'char [16]' lvalue
|   |   |   `-StringLiteral 0x558fa8f37bb0 <line:1097:27> 'char [16]' lvalue "(for generator)"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f37c38 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f37cc0 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f37ca0 <col:70> 'int' 1
`-UnaryOperator 0x558fa8f37dc8 <line:1097:46, col:51> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f37da0 <col:46> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.16]([B5.18], [B5.32], [B5.34])
  36: DeclRefExpr 0x558fa8f37e58 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  37: ImplicitCastExpr 0x558fa8f38170 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f37e58 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B5.36] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  38: DeclRefExpr 0x558fa8f37e80 <lparser.c:1098:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  39: ImplicitCastExpr 0x558fa8f381c8 <lparser.c:1098:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37e80 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.38] (ImplicitCastExpr, LValueToRValue, LexState *)
  40: DeclRefExpr 0x558fa8f37ea8 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  41: ImplicitCastExpr 0x558fa8f38088 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f37ea8 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B5.40] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  42: DeclRefExpr 0x558fa8f37ed0 <lparser.c:1098:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  43: ImplicitCastExpr 0x558fa8f380e0 <lparser.c:1098:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37ed0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.42] (ImplicitCastExpr, LValueToRValue, LexState *)
  44: StringLiteral 0x558fa8f37ef8 <lparser.c:157:39, line:1098:27> 'char [12]' lvalue "(for state)"
"(for state)"
  45: ImplicitCastExpr 0x558fa8f380f8 <lparser.c:157:39, line:1098:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f37ef8 <line:157:39, line:1098:27> 'char [12]' lvalue "(for state)"
[B5.44] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  46: ImplicitCastExpr 0x558fa8f38110 <lparser.c:157:39, line:1098:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f380f8 <line:157:39, line:1098:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f37ef8 <line:157:39, line:1098:27> 'char [12]' lvalue "(for state)"
[B5.45] (ImplicitCastExpr, BitCast, const char *)
  47: UnaryExprOrTypeTraitExpr 0x558fa8f37f90 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f37f70 <col:52, col:54> 'char [12]' lvalue
  `-StringLiteral 0x558fa8f37f38 <line:1098:27> 'char [12]' lvalue "(for state)"
sizeof ("(for state)")
  48: UnaryExprOrTypeTraitExpr 0x558fa8f37fc0 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  49: BinaryOperator 0x558fa8f37fe0 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f37f90 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f37f70 <col:52, col:54> 'char [12]' lvalue
|   `-StringLiteral 0x558fa8f37f38 <line:1098:27> 'char [12]' lvalue "(for state)"
`-UnaryExprOrTypeTraitExpr 0x558fa8f37fc0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B5.47] / [B5.48]
  50: IntegerLiteral 0x558fa8f38028 <lparser.c:157:70> 'int' 1
1
  51: ImplicitCastExpr 0x558fa8f38048 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f38028 <col:70> 'int' 1
[B5.50] (ImplicitCastExpr, IntegralCast, unsigned long)
  52: BinaryOperator 0x558fa8f38060 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f38008 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f37fe0 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f37f90 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f37f70 <col:52, col:54> 'char [12]' lvalue
|   |   `-StringLiteral 0x558fa8f37f38 <line:1098:27> 'char [12]' lvalue "(for state)"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f37fc0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f38048 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f38028 <col:70> 'int' 1
([B5.49]) - [B5.51]
  53: CallExpr 0x558fa8f380a0 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f38088 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f37ea8 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f380e0 <line:1098:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37ed0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f38110 <line:157:39, line:1098:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f380f8 <line:157:39, line:1098:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f37ef8 <line:157:39, line:1098:27> 'char [12]' lvalue "(for state)"
`-BinaryOperator 0x558fa8f38060 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f38008 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f37fe0 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f37f90 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f37f70 <col:52, col:54> 'char [12]' lvalue
  |   |   `-StringLiteral 0x558fa8f37f38 <line:1098:27> 'char [12]' lvalue "(for state)"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f37fc0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f38048 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f38028 <col:70> 'int' 1
[B5.41]([B5.43], [B5.46], [B5.52])
  54: DeclRefExpr 0x558fa8f38128 <lparser.c:1098:42> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
nvars
  55: UnaryOperator 0x558fa8f38150 <lparser.c:1098:42, col:47> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f38128 <col:42> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.54]++
  56: CallExpr 0x558fa8f38188 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f38170 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f37e58 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f381c8 <line:1098:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37e80 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-CallExpr 0x558fa8f380a0 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f38088 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f37ea8 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f380e0 <line:1098:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f37ed0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f38110 <line:157:39, line:1098:27> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f380f8 <line:157:39, line:1098:27> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f37ef8 <line:157:39, line:1098:27> 'char [12]' lvalue "(for state)"
| `-BinaryOperator 0x558fa8f38060 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f38008 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f37fe0 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f37f90 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f37f70 <col:52, col:54> 'char [12]' lvalue
|   |   |   `-StringLiteral 0x558fa8f37f38 <line:1098:27> 'char [12]' lvalue "(for state)"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f37fc0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f38048 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f38028 <col:70> 'int' 1
`-UnaryOperator 0x558fa8f38150 <line:1098:42, col:47> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f38128 <col:42> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.37]([B5.39], [B5.53], [B5.55])
  57: DeclRefExpr 0x558fa8f381e0 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  58: ImplicitCastExpr 0x558fa8f384f8 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f381e0 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B5.57] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  59: DeclRefExpr 0x558fa8f38208 <lparser.c:1099:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  60: ImplicitCastExpr 0x558fa8f38550 <lparser.c:1099:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38208 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.59] (ImplicitCastExpr, LValueToRValue, LexState *)
  61: DeclRefExpr 0x558fa8f38230 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  62: ImplicitCastExpr 0x558fa8f38410 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38230 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B5.61] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  63: DeclRefExpr 0x558fa8f38258 <lparser.c:1099:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  64: ImplicitCastExpr 0x558fa8f38468 <lparser.c:1099:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38258 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.63] (ImplicitCastExpr, LValueToRValue, LexState *)
  65: StringLiteral 0x558fa8f38280 <lparser.c:157:39, line:1099:27> 'char [14]' lvalue "(for control)"
"(for control)"
  66: ImplicitCastExpr 0x558fa8f38480 <lparser.c:157:39, line:1099:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f38280 <line:157:39, line:1099:27> 'char [14]' lvalue "(for control)"
[B5.65] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  67: ImplicitCastExpr 0x558fa8f38498 <lparser.c:157:39, line:1099:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f38480 <line:157:39, line:1099:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f38280 <line:157:39, line:1099:27> 'char [14]' lvalue "(for control)"
[B5.66] (ImplicitCastExpr, BitCast, const char *)
  68: UnaryExprOrTypeTraitExpr 0x558fa8f38318 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f382f8 <col:52, col:54> 'char [14]' lvalue
  `-StringLiteral 0x558fa8f382c0 <line:1099:27> 'char [14]' lvalue "(for control)"
sizeof ("(for control)")
  69: UnaryExprOrTypeTraitExpr 0x558fa8f38348 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  70: BinaryOperator 0x558fa8f38368 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f38318 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f382f8 <col:52, col:54> 'char [14]' lvalue
|   `-StringLiteral 0x558fa8f382c0 <line:1099:27> 'char [14]' lvalue "(for control)"
`-UnaryExprOrTypeTraitExpr 0x558fa8f38348 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B5.68] / [B5.69]
  71: IntegerLiteral 0x558fa8f383b0 <lparser.c:157:70> 'int' 1
1
  72: ImplicitCastExpr 0x558fa8f383d0 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f383b0 <col:70> 'int' 1
[B5.71] (ImplicitCastExpr, IntegralCast, unsigned long)
  73: BinaryOperator 0x558fa8f383e8 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f38390 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f38368 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f38318 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f382f8 <col:52, col:54> 'char [14]' lvalue
|   |   `-StringLiteral 0x558fa8f382c0 <line:1099:27> 'char [14]' lvalue "(for control)"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f38348 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f383d0 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f383b0 <col:70> 'int' 1
([B5.70]) - [B5.72]
  74: CallExpr 0x558fa8f38428 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f38410 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38230 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f38468 <line:1099:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38258 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f38498 <line:157:39, line:1099:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f38480 <line:157:39, line:1099:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f38280 <line:157:39, line:1099:27> 'char [14]' lvalue "(for control)"
`-BinaryOperator 0x558fa8f383e8 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f38390 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f38368 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f38318 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f382f8 <col:52, col:54> 'char [14]' lvalue
  |   |   `-StringLiteral 0x558fa8f382c0 <line:1099:27> 'char [14]' lvalue "(for control)"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f38348 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f383d0 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f383b0 <col:70> 'int' 1
[B5.62]([B5.64], [B5.67], [B5.73])
  75: DeclRefExpr 0x558fa8f384b0 <lparser.c:1099:44> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
nvars
  76: UnaryOperator 0x558fa8f384d8 <lparser.c:1099:44, col:49> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f384b0 <col:44> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.75]++
  77: CallExpr 0x558fa8f38510 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f384f8 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f381e0 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f38550 <line:1099:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38208 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-CallExpr 0x558fa8f38428 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f38410 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f38230 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f38468 <line:1099:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f38258 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f38498 <line:157:39, line:1099:27> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f38480 <line:157:39, line:1099:27> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f38280 <line:157:39, line:1099:27> 'char [14]' lvalue "(for control)"
| `-BinaryOperator 0x558fa8f383e8 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f38390 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f38368 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f38318 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f382f8 <col:52, col:54> 'char [14]' lvalue
|   |   |   `-StringLiteral 0x558fa8f382c0 <line:1099:27> 'char [14]' lvalue "(for control)"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f38348 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f383d0 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f383b0 <col:70> 'int' 1
`-UnaryOperator 0x558fa8f384d8 <line:1099:44, col:49> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f384b0 <col:44> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.58]([B5.60], [B5.74], [B5.76])
  78: DeclRefExpr 0x558fa8f38568 <lparser.c:1101:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  79: ImplicitCastExpr 0x558fa8f38628 <lparser.c:1101:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f38568 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B5.78] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  80: DeclRefExpr 0x558fa8f38590 <lparser.c:1101:16> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
ls
  81: ImplicitCastExpr 0x558fa8f38680 <lparser.c:1101:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f38590 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
[B5.80] (ImplicitCastExpr, LValueToRValue, LexState *)
  82: DeclRefExpr 0x558fa8f385b8 <lparser.c:1101:20> 'TString *' lvalue ParmVar 0x558fa8f37508 'indexname' 'TString *'
indexname
  83: ImplicitCastExpr 0x558fa8f38698 <lparser.c:1101:20> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f385b8 <col:20> 'TString *' lvalue ParmVar 0x558fa8f37508 'indexname' 'TString *'
[B5.82] (ImplicitCastExpr, LValueToRValue, TString *)
  84: DeclRefExpr 0x558fa8f385e0 <lparser.c:1101:31> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
nvars
  85: UnaryOperator 0x558fa8f38608 <lparser.c:1101:31, col:36> 'int' postfix '++'
`-DeclRefExpr 0x558fa8f385e0 <col:31> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.84]++
  86: CallExpr 0x558fa8f38640 <lparser.c:1101:3, col:38> 'void'
|-ImplicitCastExpr 0x558fa8f38628 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f38568 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f38680 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f38590 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f37498 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f38698 <col:20> 'TString *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f385b8 <col:20> 'TString *' lvalue ParmVar 0x558fa8f37508 'indexname' 'TString *'
`-UnaryOperator 0x558fa8f38608 <col:31, col:36> 'int' postfix '++'
  `-DeclRefExpr 0x558fa8f385e0 <col:31> 'int' lvalue Var 0x558fa8f37888 'nvars' 'int'
[B5.79]([B5.81], [B5.83], [B5.85])
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1
