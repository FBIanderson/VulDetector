void luaK_prefix(FuncState *fs, UnOpr op, expdesc *e)
 [B8 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclStmt 0x5637768e4338 <lcode.c:690:3, col:13>col:11
`-VarDecl 0x5637768e42d8 <col:3, col:11> col:11 used e2 'expdesc':'struct expdesc'
expdesc e2;
   2: IntegerLiteral 0x5637768e4410 <./lcode.h:20:19> 'int' 1
1
   3: UnaryOperator 0x5637768e4430 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768e4410 <col:19> 'int' 1
-[B1.2]
   4: DeclRefExpr 0x5637768e43b0 <lcode.c:691:10> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
e2
   5: MemberExpr 0x5637768e43d8 <lcode.c:691:10, col:13> 'int' lvalue .f 0x56377687d8f0
`-DeclRefExpr 0x5637768e43b0 <col:10> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B1.4].f
   6: BinaryOperator 0x5637768e4470 <lcode.c:691:10, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768e43d8 <lcode.c:691:10, col:13> 'int' lvalue .f 0x56377687d8f0
| `-DeclRefExpr 0x5637768e43b0 <col:10> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
`-ParenExpr 0x5637768e4450 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768e4430 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768e4410 <col:19> 'int' 1
[B1.5] = ([B1.3])
   7: DeclRefExpr 0x5637768e4350 <lcode.c:691:3> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
e2
   8: MemberExpr 0x5637768e4378 <lcode.c:691:3, col:6> 'int' lvalue .t 0x56377687d890
`-DeclRefExpr 0x5637768e4350 <col:3> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B1.7].t
   9: BinaryOperator 0x5637768e4498 <lcode.c:691:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768e4378 <lcode.c:691:3, col:6> 'int' lvalue .t 0x56377687d890
| `-DeclRefExpr 0x5637768e4350 <col:3> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
`-BinaryOperator 0x5637768e4470 <col:10, ./lcode.h:20:20> 'int' '='
  |-MemberExpr 0x5637768e43d8 <lcode.c:691:10, col:13> 'int' lvalue .f 0x56377687d8f0
  | `-DeclRefExpr 0x5637768e43b0 <col:10> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
  `-ParenExpr 0x5637768e4450 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x5637768e4430 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x5637768e4410 <col:19> 'int' 1
[B1.8] = [B1.6]
  10: DeclRefExpr 0x5637768e45d0 <lcode.c:691:33> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
VKNUM
  11: ImplicitCastExpr 0x5637768e45f8 <lcode.c:691:33> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768e45d0 <col:33> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
[B1.10] (ImplicitCastExpr, IntegralCast, expkind)
  12: DeclRefExpr 0x5637768e4570 <lcode.c:691:26> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
e2
  13: MemberExpr 0x5637768e4598 <lcode.c:691:26, col:29> 'expkind':'expkind' lvalue .k 0x56377687d440
`-DeclRefExpr 0x5637768e4570 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B1.12].k
  14: BinaryOperator 0x5637768e4610 <lcode.c:691:26, col:33> 'expkind':'expkind' '='
|-MemberExpr 0x5637768e4598 <col:26, col:29> 'expkind':'expkind' lvalue .k 0x56377687d440
| `-DeclRefExpr 0x5637768e4570 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x5637768e45f8 <col:33> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768e45d0 <col:33> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
[B1.13] = [B1.11]
  15: IntegerLiteral 0x5637768e46d0 <lcode.c:691:52> 'int' 0
0
  16: ImplicitCastExpr 0x5637768e46f0 <lcode.c:691:52> 'lua_Number':'double' <IntegralToFloating>
`-IntegerLiteral 0x5637768e46d0 <col:52> 'int' 0
[B1.15] (ImplicitCastExpr, IntegralToFloating, lua_Number)
  17: DeclRefExpr 0x5637768e4638 <lcode.c:691:40> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
e2
  18: MemberExpr 0x5637768e4660 <lcode.c:691:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue .u 0x56377687d830
`-DeclRefExpr 0x5637768e4638 <col:40> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B1.17].u
  19: MemberExpr 0x5637768e4698 <lcode.c:691:40, col:45> 'lua_Number':'double' lvalue .nval 0x56377687d748
`-MemberExpr 0x5637768e4660 <col:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue .u 0x56377687d830
  `-DeclRefExpr 0x5637768e4638 <col:40> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B1.18].nval
  20: BinaryOperator 0x5637768e4708 <lcode.c:691:40, col:52> 'lua_Number':'double' '='
|-MemberExpr 0x5637768e4698 <col:40, col:45> 'lua_Number':'double' lvalue .nval 0x56377687d748
| `-MemberExpr 0x5637768e4660 <col:40, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue .u 0x56377687d830
|   `-DeclRefExpr 0x5637768e4638 <col:40> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x5637768e46f0 <col:52> 'lua_Number':'double' <IntegralToFloating>
  `-IntegerLiteral 0x5637768e46d0 <col:52> 'int' 0
[B1.19] = [B1.16]
  21: DeclRefExpr 0x5637768e4730 <lcode.c:692:11> 'UnOpr':'enum UnOpr' lvalue ParmVar 0x5637768e40c0 'op' 'UnOpr':'enum UnOpr'
op
  22: ImplicitCastExpr 0x5637768e4758 <lcode.c:692:11> 'UnOpr':'enum UnOpr' <LValueToRValue>
`-DeclRefExpr 0x5637768e4730 <col:11> 'UnOpr':'enum UnOpr' lvalue ParmVar 0x5637768e40c0 'op' 'UnOpr':'enum UnOpr'
[B1.21] (ImplicitCastExpr, LValueToRValue, UnOpr)
  23: ImplicitCastExpr 0x5637768e4770 <lcode.c:692:11> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e4758 <col:11> 'UnOpr':'enum UnOpr' <LValueToRValue>
  `-DeclRefExpr 0x5637768e4730 <col:11> 'UnOpr':'enum UnOpr' lvalue ParmVar 0x5637768e40c0 'op' 'UnOpr':'enum UnOpr'
[B1.22] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B1.23]
   Preds (1): B8
   Succs (4): B3 B4 B7 B2

 [B2]
  default:
   1: IntegerLiteral 0x5637768e50a8 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768e50d8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768e50a8 <col:31> 'int' 0
(void)[B2.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B1
   Succs (1): B0

 [B3]
  case OPR_LEN:
   1: DeclRefExpr 0x5637768e4df0 <lcode.c:701:7> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x5637768e4e68 <lcode.c:701:7> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e4df0 <col:7> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e4e18 <lcode.c:701:23> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e4eb8 <lcode.c:701:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4e18 <col:23> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e4e40 <lcode.c:701:27> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768e4ed0 <lcode.c:701:27> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4e40 <col:27> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B3.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e4e80 <lcode.c:701:7, col:28> 'int'
|-ImplicitCastExpr 0x5637768e4e68 <col:7> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e4df0 <col:7> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e4eb8 <col:23> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4e18 <col:23> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e4ed0 <col:27> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e4e40 <col:27> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B3.2]([B3.4], [B3.6])
   8: DeclRefExpr 0x5637768e4ee8 <lcode.c:702:7> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   9: ImplicitCastExpr 0x5637768e4fd0 <lcode.c:702:7> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e4ee8 <col:7> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B3.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
  10: DeclRefExpr 0x5637768e4f10 <lcode.c:702:17> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768e5030 <lcode.c:702:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4f10 <col:17> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
[B3.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768e4f38 <lcode.c:702:21> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
OP_LEN
  13: ImplicitCastExpr 0x5637768e5048 <lcode.c:702:21> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e4f38 <col:21> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
[B3.12] (ImplicitCastExpr, IntegralCast, OpCode)
  14: DeclRefExpr 0x5637768e4f60 <lcode.c:702:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
e
  15: ImplicitCastExpr 0x5637768e5060 <lcode.c:702:29> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4f60 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B3.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: DeclRefExpr 0x5637768e4f88 <lcode.c:702:33> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
e2
  17: UnaryOperator 0x5637768e4fb0 <lcode.c:702:32, col:33> 'expdesc *' prefix '&'
`-DeclRefExpr 0x5637768e4f88 <col:33> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
&[B3.16]
  18: CallExpr 0x5637768e4fe8 <lcode.c:702:7, col:35> 'void'
|-ImplicitCastExpr 0x5637768e4fd0 <col:7> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e4ee8 <col:7> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e5030 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4f10 <col:17> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e5048 <col:21> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e4f38 <col:21> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
|-ImplicitCastExpr 0x5637768e5060 <col:29> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4f60 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
`-UnaryOperator 0x5637768e4fb0 <col:32, col:33> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x5637768e4f88 <col:33> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B3.9]([B3.11], [B3.13], [B3.15], [B3.17])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B4]
  case OPR_NOT:
   1: DeclRefExpr 0x5637768e4c90 <lcode.c:699:19> 'void (FuncState *, expdesc *)' Function 0x5637768dd270 'codenot' 'void (FuncState *, expdesc *)'
codenot
   2: ImplicitCastExpr 0x5637768e4d08 <lcode.c:699:19> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e4c90 <col:19> 'void (FuncState *, expdesc *)' Function 0x5637768dd270 'codenot' 'void (FuncState *, expdesc *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e4cb8 <lcode.c:699:27> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e4d58 <lcode.c:699:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4cb8 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e4ce0 <lcode.c:699:31> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768e4d70 <lcode.c:699:31> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4ce0 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B4.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e4d20 <lcode.c:699:19, col:32> 'void'
|-ImplicitCastExpr 0x5637768e4d08 <col:19> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e4c90 <col:19> 'void (FuncState *, expdesc *)' Function 0x5637768dd270 'codenot' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e4d58 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4cb8 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e4d70 <col:31> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e4ce0 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B4.2]([B4.4], [B4.6])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B5]
   1: DeclRefExpr 0x5637768e4a18 <lcode.c:696:7> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e4b58 <lcode.c:696:7> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e4a18 <col:7> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e4a40 <lcode.c:696:17> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e4bb8 <lcode.c:696:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4a40 <col:17> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e4a68 <lcode.c:696:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
OP_UNM
   6: ImplicitCastExpr 0x5637768e4bd0 <lcode.c:696:21> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e4a68 <col:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
[B5.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e4a90 <lcode.c:696:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768e4be8 <lcode.c:696:29> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4a90 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B5.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e4ab8 <lcode.c:696:33> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
e2
  10: UnaryOperator 0x5637768e4ae0 <lcode.c:696:32, col:33> 'expdesc *' prefix '&'
`-DeclRefExpr 0x5637768e4ab8 <col:33> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
&[B5.9]
  11: CallExpr 0x5637768e4b70 <lcode.c:696:7, col:35> 'void'
|-ImplicitCastExpr 0x5637768e4b58 <col:7> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e4a18 <col:7> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e4bb8 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4a40 <col:17> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e4bd0 <col:21> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e4a68 <col:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
|-ImplicitCastExpr 0x5637768e4be8 <col:29> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4a90 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
`-UnaryOperator 0x5637768e4ae0 <col:32, col:33> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x5637768e4ab8 <col:33> 'expdesc':'struct expdesc' lvalue Var 0x5637768e42d8 'e2' 'expdesc':'struct expdesc'
[B5.2]([B5.4], [B5.6], [B5.8], [B5.10])
   T: break;
   Preds (2): B6 B7
   Succs (1): B0

 [B6]
   1: DeclRefExpr 0x5637768e48e8 <lcode.c:695:9> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x5637768e4960 <lcode.c:695:9> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e48e8 <col:9> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e4910 <lcode.c:695:25> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e49b0 <lcode.c:695:25> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4910 <col:25> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e4938 <lcode.c:695:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768e49c8 <lcode.c:695:29> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4938 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B6.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e4978 <lcode.c:695:9, col:30> 'int'
|-ImplicitCastExpr 0x5637768e4960 <col:9> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e48e8 <col:9> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e49b0 <col:25> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e4910 <col:25> 'FuncState *' lvalue ParmVar 0x5637768e4050 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e49c8 <col:29> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e4938 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B6.2]([B6.4], [B6.6])
   Preds (1): B7
   Succs (1): B5

 [B7]
  case OPR_MINUS:
   1: DeclRefExpr 0x5637768e4818 <lcode.c:694:12> 'int (expdesc *)' Function 0x5637768a9328 'isnumeral' 'int (expdesc *)'
isnumeral
   2: ImplicitCastExpr 0x5637768e4868 <lcode.c:694:12> 'int (*)(expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e4818 <col:12> 'int (expdesc *)' Function 0x5637768a9328 'isnumeral' 'int (expdesc *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(expdesc *))
   3: DeclRefExpr 0x5637768e4840 <lcode.c:694:22> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768e48b0 <lcode.c:694:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e4840 <col:22> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B7.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: CallExpr 0x5637768e4880 <lcode.c:694:12, col:23> 'int'
|-ImplicitCastExpr 0x5637768e4868 <col:12> 'int (*)(expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e4818 <col:12> 'int (expdesc *)' Function 0x5637768a9328 'isnumeral' 'int (expdesc *)'
`-ImplicitCastExpr 0x5637768e48b0 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e4840 <col:22> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
[B7.2]([B7.4])
   6: UnaryOperator 0x5637768e48c8 <lcode.c:694:11, col:23> 'int' prefix '!'
`-CallExpr 0x5637768e4880 <col:12, col:23> 'int'
  |-ImplicitCastExpr 0x5637768e4868 <col:12> 'int (*)(expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768e4818 <col:12> 'int (expdesc *)' Function 0x5637768a9328 'isnumeral' 'int (expdesc *)'
  `-ImplicitCastExpr 0x5637768e48b0 <col:22> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e4840 <col:22> 'expdesc *' lvalue ParmVar 0x5637768e4130 'e' 'expdesc *'
![B7.5]
   T: if [B7.6]
   Preds (1): B1
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (4): B2 B3 B4 B5
