extern const char *lua_setlocal(lua_State *L, const lua_Debug *ar, int n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x555e972426a0 <ldebug.c:144:3> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x555e972426c8 <ldebug.c:144:3> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e972426a0 <col:3> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B1.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x555e972426e0 <ldebug.c:144:3, col:6> 'StkId':'TValue *' lvalue ->top 0x555e97213368
`-ImplicitCastExpr 0x555e972426c8 <col:3> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x555e972426a0 <col:3> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B1.2]->top
   4: UnaryOperator 0x555e97242718 <ldebug.c:144:3, col:9> 'StkId':'TValue *' postfix '--'
`-MemberExpr 0x555e972426e0 <col:3, col:6> 'StkId':'TValue *' lvalue ->top 0x555e97213368
  `-ImplicitCastExpr 0x555e972426c8 <col:3> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x555e972426a0 <col:3> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B1.3]--
   5: IntegerLiteral 0x555e97242738 <./llimits.h:111:33> 'int' 0
0
   6: CStyleCastExpr 0x555e97242768 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x555e97242738 <col:33> 'int' 0
(void)[B1.5] (CStyleCastExpr, ToVoid, void)
   7: DeclRefExpr 0x555e972427b0 <ldebug.c:146:10> 'const char *' lvalue Var 0x555e97241d38 'name' 'const char *'
name
   8: ImplicitCastExpr 0x555e972427d8 <ldebug.c:146:10> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x555e972427b0 <col:10> 'const char *' lvalue Var 0x555e97241d38 'name' 'const char *'
[B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: ReturnStmt 0x555e972427f0 <ldebug.c:146:3, col:10>
`-ImplicitCastExpr 0x555e972427d8 <col:10> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x555e972427b0 <col:10> 'const char *' lvalue Var 0x555e97241d38 'name' 'const char *'
return [B1.8];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x555e97242018 <ldebug.c:143:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x555e97242040 <ldebug.c:143:40> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e97242018 <col:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B2.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x555e97242058 <ldebug.c:143:40, col:43> 'StkId':'TValue *' lvalue ->top 0x555e97213368
`-ImplicitCastExpr 0x555e97242040 <col:40> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x555e97242018 <col:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B2.2]->top
   4: ImplicitCastExpr 0x555e972420b0 <ldebug.c:143:40, col:43> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x555e97242058 <col:40, col:43> 'StkId':'TValue *' lvalue ->top 0x555e97213368
  `-ImplicitCastExpr 0x555e97242040 <col:40> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x555e97242018 <col:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B2.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: IntegerLiteral 0x555e97242090 <ldebug.c:143:49> 'int' 1
1
   6: BinaryOperator 0x555e972420c8 <ldebug.c:143:40, col:49> 'StkId':'TValue *' '-'
|-ImplicitCastExpr 0x555e972420b0 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x555e97242058 <col:40, col:43> 'StkId':'TValue *' lvalue ->top 0x555e97213368
|   `-ImplicitCastExpr 0x555e97242040 <col:40> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97242018 <col:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
`-IntegerLiteral 0x555e97242090 <col:49> 'int' 1
[B2.4] - [B2.5]
   7: ImplicitCastExpr 0x555e97242110 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x555e972420f0 <col:22, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x555e972420c8 <ldebug.c:143:40, col:49> 'StkId':'TValue *' '-'
    |-ImplicitCastExpr 0x555e972420b0 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
    | `-MemberExpr 0x555e97242058 <col:40, col:43> 'StkId':'TValue *' lvalue ->top 0x555e97213368
    |   `-ImplicitCastExpr 0x555e97242040 <col:40> 'lua_State *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97242018 <col:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
    `-IntegerLiteral 0x555e97242090 <col:49> 'int' 1
([B2.6]) (ImplicitCastExpr, BitCast, const TValue *)
   8: DeclStmt 0x555e97242128 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x555e97241fb8 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x555e97242110 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x555e972420f0 <col:22, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x555e972420c8 <ldebug.c:143:40, col:49> 'StkId':'TValue *' '-'
        |-ImplicitCastExpr 0x555e972420b0 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
        | `-MemberExpr 0x555e97242058 <col:40, col:43> 'StkId':'TValue *' lvalue ->top 0x555e97213368
        |   `-ImplicitCastExpr 0x555e97242040 <col:40> 'lua_State *' <LValueToRValue>
        |     `-DeclRefExpr 0x555e97242018 <col:40> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
        `-IntegerLiteral 0x555e97242090 <col:49> 'int' 1
const TValue *o2 = (L->top - 1);
   9: DeclRefExpr 0x555e972421b0 <ldebug.c:143:20> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
ci
  10: ImplicitCastExpr 0x555e972421d8 <ldebug.c:143:20> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e972421b0 <col:20> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
[B2.9] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  11: MemberExpr 0x555e972421f0 <ldebug.c:143:20, col:24> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
`-ImplicitCastExpr 0x555e972421d8 <col:20> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x555e972421b0 <col:20> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
[B2.10]->base
  12: ImplicitCastExpr 0x555e972422d0 <ldebug.c:143:20, col:24> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x555e972421f0 <col:20, col:24> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
  `-ImplicitCastExpr 0x555e972421d8 <col:20> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x555e972421b0 <col:20> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
[B2.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x555e97242228 <ldebug.c:143:32> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
n
  14: ImplicitCastExpr 0x555e97242270 <ldebug.c:143:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97242228 <col:32> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
[B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: IntegerLiteral 0x555e97242250 <ldebug.c:143:36> 'int' 1
1
  16: BinaryOperator 0x555e97242288 <ldebug.c:143:32, col:36> 'int' '-'
|-ImplicitCastExpr 0x555e97242270 <col:32> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97242228 <col:32> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
`-IntegerLiteral 0x555e97242250 <col:36> 'int' 1
[B2.14] - [B2.15]
  17: BinaryOperator 0x555e972422e8 <ldebug.c:143:20, col:37> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x555e972422d0 <col:20, col:24> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x555e972421f0 <col:20, col:24> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
|   `-ImplicitCastExpr 0x555e972421d8 <col:20> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x555e972421b0 <col:20> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
`-ParenExpr 0x555e972422b0 <col:31, col:37> 'int'
  `-BinaryOperator 0x555e97242288 <col:32, col:36> 'int' '-'
    |-ImplicitCastExpr 0x555e97242270 <col:32> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e97242228 <col:32> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
    `-IntegerLiteral 0x555e97242250 <col:36> 'int' 1
[B2.12] + ([B2.16])
  18: DeclStmt 0x555e97242330 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x555e97242150 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x555e97242310 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x555e972422e8 <ldebug.c:143:20, col:37> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x555e972422d0 <col:20, col:24> 'StkId':'TValue *' <LValueToRValue>
      | `-MemberExpr 0x555e972421f0 <col:20, col:24> 'StkId':'TValue *' lvalue ->base 0x555e9720f920
      |   `-ImplicitCastExpr 0x555e972421d8 <col:20> 'CallInfo *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e972421b0 <col:20> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
      `-ParenExpr 0x555e972422b0 <col:31, col:37> 'int'
        `-BinaryOperator 0x555e97242288 <col:32, col:36> 'int' '-'
          |-ImplicitCastExpr 0x555e97242270 <col:32> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x555e97242228 <col:32> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
          `-IntegerLiteral 0x555e97242250 <col:36> 'int' 1
TValue *o1 = (ci->base + (n - 1));
  19: DeclRefExpr 0x555e972423c0 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
o2
  20: ImplicitCastExpr 0x555e972423e8 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e972423c0 <col:17> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.19] (ImplicitCastExpr, LValueToRValue, const TValue *)
  21: MemberExpr 0x555e97242400 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e972423e8 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x555e972423c0 <col:17> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.20]->value
  22: ImplicitCastExpr 0x555e97242438 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x555e97242400 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x555e971cc550
  `-ImplicitCastExpr 0x555e972423e8 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x555e972423c0 <col:17> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.21] (ImplicitCastExpr, LValueToRValue, Value)
  23: DeclRefExpr 0x555e97242348 <./lobject.h:163:5> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
o1
  24: ImplicitCastExpr 0x555e97242370 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e97242348 <col:5> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
[B2.23] (ImplicitCastExpr, LValueToRValue, TValue *)
  25: MemberExpr 0x555e97242388 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e97242370 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x555e97242348 <col:5> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
[B2.24]->value
  26: BinaryOperator 0x555e97242450 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x555e97242388 <col:5, col:9> 'Value':'Value' lvalue ->value 0x555e971cc550
| `-ImplicitCastExpr 0x555e97242370 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x555e97242348 <col:5> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
`-ImplicitCastExpr 0x555e97242438 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x555e97242400 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x555e971cc550
    `-ImplicitCastExpr 0x555e972423e8 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x555e972423c0 <col:17> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.25] = [B2.22]
  27: DeclRefExpr 0x555e972424f0 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
o2
  28: ImplicitCastExpr 0x555e97242518 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e972424f0 <col:35> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.27] (ImplicitCastExpr, LValueToRValue, const TValue *)
  29: MemberExpr 0x555e97242530 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x555e971cc5b0
`-ImplicitCastExpr 0x555e97242518 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x555e972424f0 <col:35> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.28]->tt
  30: ImplicitCastExpr 0x555e97242568 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x555e97242530 <col:35, col:39> 'const int' lvalue ->tt 0x555e971cc5b0
  `-ImplicitCastExpr 0x555e97242518 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x555e972424f0 <col:35> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.29] (ImplicitCastExpr, LValueToRValue, int)
  31: DeclRefExpr 0x555e97242478 <./lobject.h:163:28> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
o1
  32: ImplicitCastExpr 0x555e972424a0 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e97242478 <col:28> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
[B2.31] (ImplicitCastExpr, LValueToRValue, TValue *)
  33: MemberExpr 0x555e972424b8 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x555e971cc5b0
`-ImplicitCastExpr 0x555e972424a0 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x555e97242478 <col:28> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
[B2.32]->tt
  34: BinaryOperator 0x555e97242580 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x555e972424b8 <col:28, col:32> 'int' lvalue ->tt 0x555e971cc5b0
| `-ImplicitCastExpr 0x555e972424a0 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x555e97242478 <col:28> 'TValue *' lvalue Var 0x555e97242150 'o1' 'TValue *'
`-ImplicitCastExpr 0x555e97242568 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97242530 <col:35, col:39> 'const int' lvalue ->tt 0x555e971cc5b0
    `-ImplicitCastExpr 0x555e97242518 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x555e972424f0 <col:35> 'const TValue *' lvalue Var 0x555e97241fb8 'o2' 'const TValue *'
[B2.33] = [B2.30]
  35: IntegerLiteral 0x555e972425a8 <./llimits.h:62:31> 'int' 0
0
  36: CStyleCastExpr 0x555e972425d8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x555e972425a8 <col:31> 'int' 0
(void)[B2.35] (CStyleCastExpr, ToVoid, void)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x555e97241bc0 <ldebug.c:139:18> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x555e97241be8 <ldebug.c:139:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e97241bc0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B3.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x555e97241c00 <ldebug.c:139:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
`-ImplicitCastExpr 0x555e97241be8 <col:18> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x555e97241bc0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B3.2]->base_ci
   4: ImplicitCastExpr 0x555e97241cb0 <ldebug.c:139:18, col:21> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x555e97241c00 <col:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
  `-ImplicitCastExpr 0x555e97241be8 <col:18> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x555e97241bc0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B3.3] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: DeclRefExpr 0x555e97241c38 <ldebug.c:139:31> 'const lua_Debug *' lvalue ParmVar 0x555e97241980 'ar' 'const lua_Debug *'
ar
   6: ImplicitCastExpr 0x555e97241c60 <ldebug.c:139:31> 'const lua_Debug *' <LValueToRValue>
`-DeclRefExpr 0x555e97241c38 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97241980 'ar' 'const lua_Debug *'
[B3.5] (ImplicitCastExpr, LValueToRValue, const lua_Debug *)
   7: MemberExpr 0x555e97241c78 <ldebug.c:139:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
`-ImplicitCastExpr 0x555e97241c60 <col:31> 'const lua_Debug *' <LValueToRValue>
  `-DeclRefExpr 0x555e97241c38 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97241980 'ar' 'const lua_Debug *'
[B3.6]->i_ci
   8: ImplicitCastExpr 0x555e97241cc8 <ldebug.c:139:31, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x555e97241c78 <col:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
  `-ImplicitCastExpr 0x555e97241c60 <col:31> 'const lua_Debug *' <LValueToRValue>
    `-DeclRefExpr 0x555e97241c38 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97241980 'ar' 'const lua_Debug *'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e97241ce0 <ldebug.c:139:18, col:35> 'CallInfo *' '+'
|-ImplicitCastExpr 0x555e97241cb0 <col:18, col:21> 'CallInfo *' <LValueToRValue>
| `-MemberExpr 0x555e97241c00 <col:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
|   `-ImplicitCastExpr 0x555e97241be8 <col:18> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97241bc0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
`-ImplicitCastExpr 0x555e97241cc8 <col:31, col:35> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97241c78 <col:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
    `-ImplicitCastExpr 0x555e97241c60 <col:31> 'const lua_Debug *' <LValueToRValue>
      `-DeclRefExpr 0x555e97241c38 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97241980 'ar' 'const lua_Debug *'
[B3.4] + [B3.8]
  10: DeclStmt 0x555e97241d08 <ldebug.c:139:3, col:39>col:13
`-VarDecl 0x555e97241b60 <col:3, col:35> col:13 used ci 'CallInfo *' cinit
  `-BinaryOperator 0x555e97241ce0 <col:18, col:35> 'CallInfo *' '+'
    |-ImplicitCastExpr 0x555e97241cb0 <col:18, col:21> 'CallInfo *' <LValueToRValue>
    | `-MemberExpr 0x555e97241c00 <col:18, col:21> 'CallInfo *' lvalue ->base_ci 0x555e97213720
    |   `-ImplicitCastExpr 0x555e97241be8 <col:18> 'lua_State *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97241bc0 <col:18> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
    `-ImplicitCastExpr 0x555e97241cc8 <col:31, col:35> 'int' <LValueToRValue>
      `-MemberExpr 0x555e97241c78 <col:31, col:35> 'const int' lvalue ->i_ci 0x555e971c4948
        `-ImplicitCastExpr 0x555e97241c60 <col:31> 'const lua_Debug *' <LValueToRValue>
          `-DeclRefExpr 0x555e97241c38 <col:31> 'const lua_Debug *' lvalue ParmVar 0x555e97241980 'ar' 'const lua_Debug *'
CallInfo *ci = L->base_ci + ar->i_ci;
  11: DeclRefExpr 0x555e97241d98 <ldebug.c:140:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
findlocal
  12: ImplicitCastExpr 0x555e97241e38 <ldebug.c:140:22> 'const char *(*)(lua_State *, CallInfo *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97241d98 <col:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
[B3.11] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(lua_State *, CallInfo *, int))
  13: DeclRefExpr 0x555e97241dc0 <ldebug.c:140:32> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
L
  14: ImplicitCastExpr 0x555e97241e90 <ldebug.c:140:32> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e97241dc0 <col:32> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
[B3.13] (ImplicitCastExpr, LValueToRValue, lua_State *)
  15: DeclRefExpr 0x555e97241de8 <ldebug.c:140:35> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
ci
  16: ImplicitCastExpr 0x555e97241ea8 <ldebug.c:140:35> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e97241de8 <col:35> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
[B3.15] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  17: DeclRefExpr 0x555e97241e10 <ldebug.c:140:39> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
n
  18: ImplicitCastExpr 0x555e97241ec0 <ldebug.c:140:39> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97241e10 <col:39> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
[B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: CallExpr 0x555e97241e50 <ldebug.c:140:22, col:40> 'const char *'
|-ImplicitCastExpr 0x555e97241e38 <col:22> 'const char *(*)(lua_State *, CallInfo *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97241d98 <col:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
|-ImplicitCastExpr 0x555e97241e90 <col:32> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e97241dc0 <col:32> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
|-ImplicitCastExpr 0x555e97241ea8 <col:35> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x555e97241de8 <col:35> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x555e97241ec0 <col:39> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97241e10 <col:39> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
[B3.12]([B3.14], [B3.16], [B3.18])
  20: DeclStmt 0x555e97241ed8 <ldebug.c:140:3, col:41>col:15
`-VarDecl 0x555e97241d38 <col:3, col:40> col:15 used name 'const char *' cinit
  `-CallExpr 0x555e97241e50 <col:22, col:40> 'const char *'
    |-ImplicitCastExpr 0x555e97241e38 <col:22> 'const char *(*)(lua_State *, CallInfo *, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97241d98 <col:22> 'const char *(lua_State *, CallInfo *, int)' Function 0x555e9723fe68 'findlocal' 'const char *(lua_State *, CallInfo *, int)'
    |-ImplicitCastExpr 0x555e97241e90 <col:32> 'lua_State *' <LValueToRValue>
    | `-DeclRefExpr 0x555e97241dc0 <col:32> 'lua_State *' lvalue ParmVar 0x555e97241910 'L' 'lua_State *'
    |-ImplicitCastExpr 0x555e97241ea8 <col:35> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x555e97241de8 <col:35> 'CallInfo *' lvalue Var 0x555e97241b60 'ci' 'CallInfo *'
    `-ImplicitCastExpr 0x555e97241ec0 <col:39> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97241e10 <col:39> 'int' lvalue ParmVar 0x555e972419f8 'n' 'int'
const char *name = findlocal(L, ci, n);
  21: IntegerLiteral 0x555e97241ef0 <./llimits.h:110:33> 'int' 0
0
  22: CStyleCastExpr 0x555e97241f20 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x555e97241ef0 <col:33> 'int' 0
(void)[B3.21] (CStyleCastExpr, ToVoid, void)
  23: DeclRefExpr 0x555e97241f68 <ldebug.c:142:7> 'const char *' lvalue Var 0x555e97241d38 'name' 'const char *'
name
  24: ImplicitCastExpr 0x555e97241f90 <ldebug.c:142:7> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x555e97241f68 <col:7> 'const char *' lvalue Var 0x555e97241d38 'name' 'const char *'
[B3.23] (ImplicitCastExpr, LValueToRValue, const char *)
   T: if [B3.24]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
