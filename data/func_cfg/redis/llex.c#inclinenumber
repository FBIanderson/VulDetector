static void inclinenumber(LexState *ls)
 [B13 (ENTRY)]
   Succs (1): B12

 [B1]
   1: DeclRefExpr 0x561ce744c6a0 <llex.c:136:5> 'void (LexState *, const char *)' Function 0x561ce7448490 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x561ce744c788 <llex.c:136:5> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce744c6a0 <col:5> 'void (LexState *, const char *)' Function 0x561ce7448490 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x561ce744c6c8 <llex.c:136:22> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744c7d8 <llex.c:136:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744c6c8 <col:22> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce744c6f0 <llex.c:136:26> 'char [25]' lvalue "chunk has too many lines"
"chunk has too many lines"
   6: ImplicitCastExpr 0x561ce744c7f0 <llex.c:136:26> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce744c6f0 <col:26> 'char [25]' lvalue "chunk has too many lines"
[B1.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce744c808 <llex.c:136:26> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce744c7f0 <col:26> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce744c6f0 <col:26> 'char [25]' lvalue "chunk has too many lines"
[B1.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x561ce744c7a0 <llex.c:136:5, col:52> 'void'
|-ImplicitCastExpr 0x561ce744c788 <col:5> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce744c6a0 <col:5> 'void (LexState *, const char *)' Function 0x561ce7448490 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x561ce744c7d8 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce744c6c8 <col:22> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744c808 <col:26> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x561ce744c7f0 <col:26> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561ce744c6f0 <col:26> 'char [25]' lvalue "chunk has too many lines"
[B1.2]([B1.4], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce744c558 <llex.c:135:9> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce744c580 <llex.c:135:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744c558 <col:9> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce744c598 <llex.c:135:9, col:13> 'int' lvalue ->linenumber 0x561ce7426850
`-ImplicitCastExpr 0x561ce744c580 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744c558 <col:9> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B2.2]->linenumber
   4: UnaryOperator 0x561ce744c5d0 <llex.c:135:7, col:13> 'int' prefix '++'
`-MemberExpr 0x561ce744c598 <col:9, col:13> 'int' lvalue ->linenumber 0x561ce7426850
  `-ImplicitCastExpr 0x561ce744c580 <col:9> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744c558 <col:9> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
++[B2.3]
   5: IntegerLiteral 0x561ce744c5f0 <<built-in>:37:21> 'int' 2147483647
2147483647
   6: IntegerLiteral 0x561ce744c610 <./llimits.h:35:26> 'int' 2
2
   7: BinaryOperator 0x561ce744c630 <<built-in>:37:21, ./llimits.h:35:26> 'int' '-'
|-IntegerLiteral 0x561ce744c5f0 <<built-in>:37:21> 'int' 2147483647
`-IntegerLiteral 0x561ce744c610 <./llimits.h:35:26> 'int' 2
[B2.5] - [B2.6]
   8: BinaryOperator 0x561ce744c678 <llex.c:135:7, ./llimits.h:35:27> 'int' '>='
|-UnaryOperator 0x561ce744c5d0 <llex.c:135:7, col:13> 'int' prefix '++'
| `-MemberExpr 0x561ce744c598 <col:9, col:13> 'int' lvalue ->linenumber 0x561ce7426850
|   `-ImplicitCastExpr 0x561ce744c580 <col:9> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce744c558 <col:9> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ParenExpr 0x561ce744c658 <./llimits.h:35:17, col:27> 'int'
  `-BinaryOperator 0x561ce744c630 <<built-in>:37:21, ./llimits.h:35:26> 'int' '-'
    |-IntegerLiteral 0x561ce744c5f0 <<built-in>:37:21> 'int' 2147483647
    `-IntegerLiteral 0x561ce744c610 <./llimits.h:35:26> 'int' 2
[B2.4] >= ([B2.7])
   T: if [B2.8]
   Preds (3): B3 B7 B8
   Succs (2): B1 B0

 [B3]
   1: ConditionalOperator 0x561ce744c488 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce744a760 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce744a708 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce744a6e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce744a6b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce744a698 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce744a678 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce744a748 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce744a728 <col:31> 'int' 0
|-ParenExpr 0x561ce744aa28 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce744aa00 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce744a9e0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce744a978 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce744a950 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce744a938 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce744a918 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce744a8b0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce744a890 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce744a870 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-CallExpr 0x561ce744ab00 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce744aae8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce744aa48 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce744c470 <llex.c:134:10, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce744aab0 <line:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce744aa98 <line:134:10> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744aa70 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B6.9] ? ([B4.10]) : [B5.7]
   2: DeclRefExpr 0x561ce744a588 <llex.c:134:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce744a5b0 <llex.c:134:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a588 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B3.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce744a5c8 <llex.c:134:10, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce744a5b0 <line:134:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a588 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B3.3]->current
   5: BinaryOperator 0x561ce744c4d8 <llex.c:134:10, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce744a5c8 <llex.c:134:10, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce744a5b0 <line:134:10> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce744a588 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ParenExpr 0x561ce744c4b8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce744c488 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce744a760 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce744a708 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce744a6e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce744a6b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce744a698 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce744a678 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce744a748 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce744a728 <col:31> 'int' 0
    |-ParenExpr 0x561ce744aa28 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce744aa00 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce744a9e0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce744a978 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce744a950 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce744a938 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce744a918 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce744a8b0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce744a890 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce744a870 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
    `-CallExpr 0x561ce744ab00 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce744aae8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce744aa48 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce744c470 <llex.c:134:10, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce744aab0 <line:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce744aa98 <line:134:10> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce744aa70 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B3.4] = ([B3.1])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x561ce744a788 <llex.c:134:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce744a7b0 <llex.c:134:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B4.2]->z
   4: ImplicitCastExpr 0x561ce744a820 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
([B4.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce744a838 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B4.4]->p
   6: UnaryOperator 0x561ce744a870 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B4.5]++
   7: UnaryOperator 0x561ce744a890 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce744a870 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
*[B4.6]
   8: ImplicitCastExpr 0x561ce744a938 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce744a918 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce744a8b0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce744a890 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce744a870 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
(([B4.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce744a950 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce744a938 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce744a918 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce744a8b0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce744a890 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce744a870 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
(unsigned char)[B4.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce744aa00 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce744a9e0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce744a978 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce744a950 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce744a938 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce744a918 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce744a8b0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce744a890 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce744a870 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce744a838 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce744a820 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce744a800 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce744a7c8 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce744a7b0 <line:134:10> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce744a788 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
(int)(([B4.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x561ce744aa48 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce744aae8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce744aa48 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce744aa70 <llex.c:134:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744aa98 <llex.c:134:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744aa70 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce744aab0 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744aa98 <line:134:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744aa70 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B5.4]->z
   6: ImplicitCastExpr 0x561ce744c470 <llex.c:134:10, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce744aab0 <line:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce744aa98 <line:134:10> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744aa70 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B5.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce744ab00 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce744aae8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce744aa48 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce744c470 <llex.c:134:10, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce744aab0 <line:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce744aa98 <line:134:10> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744aa70 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B5.2]([B5.6])
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: DeclRefExpr 0x561ce744a600 <llex.c:134:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce744a628 <llex.c:134:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B6.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B6.2]->z
   4: ImplicitCastExpr 0x561ce744a698 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce744a678 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
([B6.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce744a6b0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce744a698 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce744a678 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B6.4]->n
   6: UnaryOperator 0x561ce744a6e8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce744a6b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce744a698 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce744a678 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B6.5]--
   7: IntegerLiteral 0x561ce744a728 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce744a748 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce744a728 <col:31> 'int' 0
[B6.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce744a760 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce744a708 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce744a6e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce744a6b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce744a698 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce744a678 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce744a640 <llex.c:134:10, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce744a628 <line:134:10> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce744a600 <col:10> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744a748 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce744a728 <col:31> 'int' 0
([B6.6]) > [B6.8]
   T: [B6.9] ? ... : ...
   Preds (1): B7
   Succs (2): B4 B5

 [B7]
   1: DeclRefExpr 0x561ce744a468 <llex.c:133:28> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce744a490 <llex.c:133:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a468 <col:28> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce744a4a8 <llex.c:133:28, col:32> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce744a490 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a468 <col:28> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B7.2]->current
   4: ImplicitCastExpr 0x561ce744a508 <llex.c:133:28, col:32> 'int' <LValueToRValue>
`-MemberExpr 0x561ce744a4a8 <col:28, col:32> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce744a490 <col:28> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744a468 <col:28> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x561ce744a4e0 <llex.c:133:43> 'int' lvalue Var 0x561ce7449a50 'old' 'int'
old
   6: ImplicitCastExpr 0x561ce744a520 <llex.c:133:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce744a4e0 <col:43> 'int' lvalue Var 0x561ce7449a50 'old' 'int'
[B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x561ce744a538 <llex.c:133:28, col:43> 'int' '!='
|-ImplicitCastExpr 0x561ce744a508 <col:28, col:32> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce744a4a8 <col:28, col:32> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce744a490 <col:28> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce744a468 <col:28> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce744a520 <col:43> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a4e0 <col:43> 'int' lvalue Var 0x561ce7449a50 'old' 'int'
[B7.4] != [B7.6]
   T: if ([B9.11] || [B8.6]) && [B7.7]
   Preds (2): B8 B9
   Succs (2): B6 B2

 [B8]
   1: DeclRefExpr 0x561ce744a350 <llex.c:133:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce744a378 <llex.c:133:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a350 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B8.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce744a390 <llex.c:133:21, line:33:55> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce744a378 <line:133:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a350 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B8.2]->current
   4: ImplicitCastExpr 0x561ce744a3e0 <llex.c:133:21, line:33:55> 'int' <LValueToRValue>
`-MemberExpr 0x561ce744a390 <line:133:21, line:33:55> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce744a378 <line:133:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744a350 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce744a3c8 <llex.c:33:66> 'int' 13
'\r'
   6: BinaryOperator 0x561ce744a3f8 <llex.c:133:21, line:33:66> 'int' '=='
|-ImplicitCastExpr 0x561ce744a3e0 <line:133:21, line:33:55> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce744a390 <line:133:21, line:33:55> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce744a378 <line:133:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce744a350 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-CharacterLiteral 0x561ce744a3c8 <line:33:66> 'int' 13
[B8.4] == [B8.5]
   T: ([B9.11] || [B8.6]) && ...
   Preds (1): B9
   Succs (2): B7 B2

 [B9]
   1: ConditionalOperator 0x561ce744a1e8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7449da8 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7449d50 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7449d30 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7449cf8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7449ce0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7449cc0 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7449d90 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7449d70 <col:31> 'int' 0
|-ParenExpr 0x561ce744a070 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce744a048 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce744a028 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7449fc0 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7449f98 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7449f80 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7449f60 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7449ef8 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7449ed8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7449eb8 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-CallExpr 0x561ce744a1a0 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce744a188 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce744a090 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce744a1d0 <llex.c:132:8, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce744a0f8 <line:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce744a0e0 <line:132:8> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce744a0b8 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.16] ? ([B10.10]) : [B11.7]
   2: DeclRefExpr 0x561ce7449bd0 <llex.c:132:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7449bf8 <llex.c:132:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7449bd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B9.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7449c10 <llex.c:132:8, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7449bf8 <line:132:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7449bd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B9.3]->current
   5: BinaryOperator 0x561ce744a238 <llex.c:132:8, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7449c10 <llex.c:132:8, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7449bf8 <line:132:8> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7449bd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ParenExpr 0x561ce744a218 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce744a1e8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7449da8 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7449d50 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7449d30 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7449cf8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7449ce0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7449cc0 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7449d90 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7449d70 <col:31> 'int' 0
    |-ParenExpr 0x561ce744a070 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce744a048 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce744a028 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7449fc0 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7449f98 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7449f80 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7449f60 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7449ef8 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7449ed8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7449eb8 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
    `-CallExpr 0x561ce744a1a0 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce744a188 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce744a090 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce744a1d0 <llex.c:132:8, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce744a0f8 <line:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce744a0e0 <line:132:8> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce744a0b8 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B9.4] = ([B9.1])
   6: DeclRefExpr 0x561ce744a280 <llex.c:133:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce744a2a8 <llex.c:133:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a280 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B9.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce744a2c0 <llex.c:133:21, line:33:32> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce744a2a8 <line:133:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a280 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B9.7]->current
   9: ImplicitCastExpr 0x561ce744a310 <llex.c:133:21, line:33:32> 'int' <LValueToRValue>
`-MemberExpr 0x561ce744a2c0 <line:133:21, line:33:32> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce744a2a8 <line:133:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744a280 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B9.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce744a2f8 <llex.c:33:43> 'int' 10
'\n'
  11: BinaryOperator 0x561ce744a328 <llex.c:133:21, line:33:43> 'int' '=='
|-ImplicitCastExpr 0x561ce744a310 <line:133:21, line:33:32> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce744a2c0 <line:133:21, line:33:32> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce744a2a8 <line:133:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce744a280 <col:21> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-CharacterLiteral 0x561ce744a2f8 <line:33:43> 'int' 10
[B9.9] == [B9.10]
   T: [B9.11] || ...
   Preds (2): B10 B11
   Succs (2): B7 B8

 [B10]
   1: DeclRefExpr 0x561ce7449dd0 <llex.c:132:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7449df8 <llex.c:132:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B10.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B10.2]->z
   4: ImplicitCastExpr 0x561ce7449e68 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
([B10.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7449e80 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B10.4]->p
   6: UnaryOperator 0x561ce7449eb8 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B10.5]++
   7: UnaryOperator 0x561ce7449ed8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7449eb8 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
*[B10.6]
   8: ImplicitCastExpr 0x561ce7449f80 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7449f60 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7449ef8 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7449ed8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7449eb8 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
(([B10.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7449f98 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7449f80 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7449f60 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7449ef8 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7449ed8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7449eb8 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
(unsigned char)[B10.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce744a048 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce744a028 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7449fc0 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7449f98 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7449f80 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7449f60 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7449ef8 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7449ed8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7449eb8 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7449e80 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7449e68 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7449e48 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7449e10 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7449df8 <line:132:8> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7449dd0 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
(int)(([B10.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B12
   Succs (1): B9

 [B11]
   1: DeclRefExpr 0x561ce744a090 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce744a188 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce744a090 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce744a0b8 <llex.c:132:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce744a0e0 <llex.c:132:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce744a0b8 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce744a0f8 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce744a0e0 <line:132:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce744a0b8 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B11.4]->z
   6: ImplicitCastExpr 0x561ce744a1d0 <llex.c:132:8, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce744a0f8 <line:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce744a0e0 <line:132:8> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce744a0b8 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B11.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce744a1a0 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce744a188 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce744a090 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce744a1d0 <llex.c:132:8, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce744a0f8 <line:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce744a0e0 <line:132:8> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce744a0b8 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B11.2]([B11.6])
   Preds (1): B12
   Succs (1): B9

 [B12]
   1: DeclRefExpr 0x561ce7449ab0 <llex.c:130:13> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7449ad8 <llex.c:130:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7449ab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7449af0 <llex.c:130:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7449ad8 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7449ab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.2]->current
   4: ImplicitCastExpr 0x561ce7449b28 <llex.c:130:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7449af0 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7449ad8 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7449ab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x561ce7449b40 <llex.c:130:3, col:24>col:7
`-VarDecl 0x561ce7449a50 <col:3, col:17> col:7 used old 'int' cinit
  `-ImplicitCastExpr 0x561ce7449b28 <col:13, col:17> 'int' <LValueToRValue>
    `-MemberExpr 0x561ce7449af0 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7449ad8 <col:13> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7449ab0 <col:13> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
int old = ls->current;
   6: IntegerLiteral 0x561ce7449b58 <./llimits.h:62:31> 'int' 0
0
   7: CStyleCastExpr 0x561ce7449b88 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x561ce7449b58 <col:31> 'int' 0
(void)[B12.6] (CStyleCastExpr, ToVoid, void)
   8: DeclRefExpr 0x561ce7449c48 <llex.c:132:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x561ce7449c70 <llex.c:132:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.9]->z
  11: ImplicitCastExpr 0x561ce7449ce0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7449cc0 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
([B12.10]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  12: MemberExpr 0x561ce7449cf8 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7449ce0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7449cc0 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.11]->n
  13: UnaryOperator 0x561ce7449d30 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7449cf8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7449ce0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7449cc0 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
[B12.12]--
  14: IntegerLiteral 0x561ce7449d70 <./lzio.h:22:31> 'int' 0
0
  15: ImplicitCastExpr 0x561ce7449d90 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7449d70 <col:31> 'int' 0
[B12.14] (ImplicitCastExpr, IntegralCast, unsigned long)
  16: BinaryOperator 0x561ce7449da8 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7449d50 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7449d30 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7449cf8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7449ce0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7449cc0 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7449c88 <llex.c:132:8, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7449c70 <line:132:8> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7449c48 <col:8> 'LexState *' lvalue ParmVar 0x561ce7449908 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7449d90 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7449d70 <col:31> 'int' 0
([B12.13]) > [B12.15]
   T: [B12.16] ? ... : ...
   Preds (1): B13
   Succs (2): B10 B11

 [B0 (EXIT)]
   Preds (2): B1 B2
