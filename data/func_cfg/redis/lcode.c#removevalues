static void removevalues(FuncState *fs, int list)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x5637768b8bf0 <lcode.c:145:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
getjump
   2: ImplicitCastExpr 0x5637768b8c68 <lcode.c:145:34> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768b8bf0 <col:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768b8c18 <lcode.c:145:42> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768b8cb8 <lcode.c:145:42> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768b8c18 <col:42> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768b8c40 <lcode.c:145:46> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768b8cd0 <lcode.c:145:46> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b8c40 <col:46> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x5637768b8c80 <lcode.c:145:34, col:50> 'int'
|-ImplicitCastExpr 0x5637768b8c68 <col:34> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768b8bf0 <col:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
|-ImplicitCastExpr 0x5637768b8cb8 <col:42> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768b8c18 <col:42> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768b8cd0 <col:46> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768b8c40 <col:46> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
[B1.2]([B1.4], [B1.6])
   8: DeclRefExpr 0x5637768b8bc8 <lcode.c:145:27> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
list
   9: BinaryOperator 0x5637768b8ce8 <lcode.c:145:27, col:50> 'int' '='
|-DeclRefExpr 0x5637768b8bc8 <col:27> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
`-CallExpr 0x5637768b8c80 <col:34, col:50> 'int'
  |-ImplicitCastExpr 0x5637768b8c68 <col:34> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768b8bf0 <col:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
  |-ImplicitCastExpr 0x5637768b8cb8 <col:42> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768b8c18 <col:42> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768b8cd0 <col:46> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768b8c40 <col:46> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
[B1.8] = [B1.7]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: DeclRefExpr 0x5637768b8d10 <lcode.c:146:7> 'int (FuncState *, int, int)' Function 0x5637768b6138 'patchtestreg' 'int (FuncState *, int, int)'
patchtestreg
   2: ImplicitCastExpr 0x5637768b8ed8 <lcode.c:146:7> 'int (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768b8d10 <col:7> 'int (FuncState *, int, int)' Function 0x5637768b6138 'patchtestreg' 'int (FuncState *, int, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int, int))
   3: DeclRefExpr 0x5637768b8d38 <lcode.c:146:20> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768b8f30 <lcode.c:146:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768b8d38 <col:20> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768b8d60 <lcode.c:146:24> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768b8f48 <lcode.c:146:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b8d60 <col:24> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
[B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5637768b8d88 <./lopcodes.h:65:27> 'int' 1
1
   8: IntegerLiteral 0x5637768b8da8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5637768b8dc8 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x5637768b8d88 <line:65:27> 'int' 1
`-IntegerLiteral 0x5637768b8da8 <line:40:17> 'int' 8
[B2.7] << [B2.8]
  10: IntegerLiteral 0x5637768b8e10 <./lopcodes.h:65:38> 'int' 1
1
  11: BinaryOperator 0x5637768b8e30 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x5637768b8df0 <col:26, col:36> 'int'
| `-BinaryOperator 0x5637768b8dc8 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x5637768b8d88 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x5637768b8da8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768b8e10 <line:65:38> 'int' 1
([B2.9]) - [B2.10]
  12: CallExpr 0x5637768b8ef0 <lcode.c:146:7, col:36> 'int'
|-ImplicitCastExpr 0x5637768b8ed8 <col:7> 'int (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768b8d10 <col:7> 'int (FuncState *, int, int)' Function 0x5637768b6138 'patchtestreg' 'int (FuncState *, int, int)'
|-ImplicitCastExpr 0x5637768b8f30 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768b8d38 <col:20> 'FuncState *' lvalue ParmVar 0x5637768b8948 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768b8f48 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768b8d60 <col:24> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
`-ParenExpr 0x5637768b8e58 <./lopcodes.h:65:25, col:39> 'int'
  `-BinaryOperator 0x5637768b8e30 <col:26, col:38> 'int' '-'
    |-ParenExpr 0x5637768b8df0 <col:26, col:36> 'int'
    | `-BinaryOperator 0x5637768b8dc8 <col:27, line:40:17> 'int' '<<'
    |   |-IntegerLiteral 0x5637768b8d88 <line:65:27> 'int' 1
    |   `-IntegerLiteral 0x5637768b8da8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768b8e10 <line:65:38> 'int' 1
[B2.2]([B2.4], [B2.6], ([B2.11]))
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5637768b8b00 <lcode.c:145:10> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
list
   2: ImplicitCastExpr 0x5637768b8b88 <lcode.c:145:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b8b00 <col:10> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768b8b28 <./lcode.h:20:19> 'int' 1
1
   4: UnaryOperator 0x5637768b8b48 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768b8b28 <col:19> 'int' 1
-[B3.3]
   5: BinaryOperator 0x5637768b8ba0 <lcode.c:145:10, ./lcode.h:20:20> 'int' '!='
|-ImplicitCastExpr 0x5637768b8b88 <lcode.c:145:10> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768b8b00 <col:10> 'int' lvalue ParmVar 0x5637768b89c0 'list' 'int'
`-ParenExpr 0x5637768b8b68 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768b8b48 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768b8b28 <col:19> 'int' 1
[B3.2] != ([B3.4])
   T: for (; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B0 (EXIT)]
   Preds (1): B3
