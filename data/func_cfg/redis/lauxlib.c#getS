static const char *getS(lua_State *L, void *ud, size_t *size)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x55f89cfdcd28 <lauxlib.c:603:11> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
ls
   2: ImplicitCastExpr 0x55f89cfdcd50 <lauxlib.c:603:11> 'LoadS *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdcd28 <col:11> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.1] (ImplicitCastExpr, LValueToRValue, LoadS *)
   3: MemberExpr 0x55f89cfdcd68 <lauxlib.c:603:11, col:15> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
`-ImplicitCastExpr 0x55f89cfdcd50 <col:11> 'LoadS *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdcd28 <col:11> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.2]->size
   4: ImplicitCastExpr 0x55f89cfdcda0 <lauxlib.c:603:11, col:15> 'size_t':'unsigned long' <LValueToRValue>
`-MemberExpr 0x55f89cfdcd68 <col:11, col:15> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
  `-ImplicitCastExpr 0x55f89cfdcd50 <col:11> 'LoadS *' <LValueToRValue>
    `-DeclRefExpr 0x55f89cfdcd28 <col:11> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.3] (ImplicitCastExpr, LValueToRValue, size_t)
   5: DeclRefExpr 0x55f89cfdccc8 <lauxlib.c:603:4> 'size_t *' lvalue ParmVar 0x55f89cfdc6f8 'size' 'size_t *'
size
   6: ImplicitCastExpr 0x55f89cfdccf0 <lauxlib.c:603:4> 'size_t *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdccc8 <col:4> 'size_t *' lvalue ParmVar 0x55f89cfdc6f8 'size' 'size_t *'
[B1.5] (ImplicitCastExpr, LValueToRValue, size_t *)
   7: UnaryOperator 0x55f89cfdcd08 <lauxlib.c:603:3, col:4> 'size_t':'unsigned long' lvalue prefix '*'
`-ImplicitCastExpr 0x55f89cfdccf0 <col:4> 'size_t *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdccc8 <col:4> 'size_t *' lvalue ParmVar 0x55f89cfdc6f8 'size' 'size_t *'
*[B1.6]
   8: BinaryOperator 0x55f89cfdcdb8 <lauxlib.c:603:3, col:15> 'size_t':'unsigned long' '='
|-UnaryOperator 0x55f89cfdcd08 <col:3, col:4> 'size_t':'unsigned long' lvalue prefix '*'
| `-ImplicitCastExpr 0x55f89cfdccf0 <col:4> 'size_t *' <LValueToRValue>
|   `-DeclRefExpr 0x55f89cfdccc8 <col:4> 'size_t *' lvalue ParmVar 0x55f89cfdc6f8 'size' 'size_t *'
`-ImplicitCastExpr 0x55f89cfdcda0 <col:11, col:15> 'size_t':'unsigned long' <LValueToRValue>
  `-MemberExpr 0x55f89cfdcd68 <col:11, col:15> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
    `-ImplicitCastExpr 0x55f89cfdcd50 <col:11> 'LoadS *' <LValueToRValue>
      `-DeclRefExpr 0x55f89cfdcd28 <col:11> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.7] = [B1.4]
   9: IntegerLiteral 0x55f89cfdce58 <lauxlib.c:604:14> 'int' 0
0
  10: ImplicitCastExpr 0x55f89cfdce78 <lauxlib.c:604:14> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x55f89cfdce58 <col:14> 'int' 0
[B1.9] (ImplicitCastExpr, IntegralCast, size_t)
  11: DeclRefExpr 0x55f89cfdcde0 <lauxlib.c:604:3> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
ls
  12: ImplicitCastExpr 0x55f89cfdce08 <lauxlib.c:604:3> 'LoadS *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdcde0 <col:3> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.11] (ImplicitCastExpr, LValueToRValue, LoadS *)
  13: MemberExpr 0x55f89cfdce20 <lauxlib.c:604:3, col:7> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
`-ImplicitCastExpr 0x55f89cfdce08 <col:3> 'LoadS *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdcde0 <col:3> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.12]->size
  14: BinaryOperator 0x55f89cfdce90 <lauxlib.c:604:3, col:14> 'size_t':'unsigned long' '='
|-MemberExpr 0x55f89cfdce20 <col:3, col:7> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
| `-ImplicitCastExpr 0x55f89cfdce08 <col:3> 'LoadS *' <LValueToRValue>
|   `-DeclRefExpr 0x55f89cfdcde0 <col:3> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
`-ImplicitCastExpr 0x55f89cfdce78 <col:14> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x55f89cfdce58 <col:14> 'int' 0
[B1.13] = [B1.10]
  15: DeclRefExpr 0x55f89cfdceb8 <lauxlib.c:605:10> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
ls
  16: ImplicitCastExpr 0x55f89cfdcee0 <lauxlib.c:605:10> 'LoadS *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdceb8 <col:10> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.15] (ImplicitCastExpr, LValueToRValue, LoadS *)
  17: MemberExpr 0x55f89cfdcef8 <lauxlib.c:605:10, col:14> 'const char *' lvalue ->s 0x55f89cfdc498
`-ImplicitCastExpr 0x55f89cfdcee0 <col:10> 'LoadS *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdceb8 <col:10> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.16]->s
  18: ImplicitCastExpr 0x55f89cfdcf30 <lauxlib.c:605:10, col:14> 'const char *' <LValueToRValue>
`-MemberExpr 0x55f89cfdcef8 <col:10, col:14> 'const char *' lvalue ->s 0x55f89cfdc498
  `-ImplicitCastExpr 0x55f89cfdcee0 <col:10> 'LoadS *' <LValueToRValue>
    `-DeclRefExpr 0x55f89cfdceb8 <col:10> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B1.17] (ImplicitCastExpr, LValueToRValue, const char *)
  19: ReturnStmt 0x55f89cfdcf48 <lauxlib.c:605:3, col:14>
`-ImplicitCastExpr 0x55f89cfdcf30 <col:10, col:14> 'const char *' <LValueToRValue>
  `-MemberExpr 0x55f89cfdcef8 <col:10, col:14> 'const char *' lvalue ->s 0x55f89cfdc498
    `-ImplicitCastExpr 0x55f89cfdcee0 <col:10> 'LoadS *' <LValueToRValue>
      `-DeclRefExpr 0x55f89cfdceb8 <col:10> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
return [B1.18];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x55f89cfdcbe0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x55f89cfdcc18 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55f89cfdcbe0 <col:24> 'int' 0
(void *)[B2.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x55f89cfdcc60 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <NullToPointer>
`-ParenExpr 0x55f89cfdcc40 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55f89cfdcc18 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55f89cfdcbe0 <col:24> 'int' 0
([B2.2]) (ImplicitCastExpr, NullToPointer, const char *)
   4: ReturnStmt 0x55f89cfdcc78 <lauxlib.c:602:22, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x55f89cfdcc60 <col:16, col:25> 'const char *' <NullToPointer>
  `-ParenExpr 0x55f89cfdcc40 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55f89cfdcc18 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55f89cfdcbe0 <col:24> 'int' 0
return [B2.3];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x55f89cfdc9e8 <lauxlib.c:600:24> 'void *' lvalue ParmVar 0x55f89cfdc688 'ud' 'void *'
ud
   2: ImplicitCastExpr 0x55f89cfdca20 <lauxlib.c:600:24> 'void *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdc9e8 <col:24> 'void *' lvalue ParmVar 0x55f89cfdc688 'ud' 'void *'
[B3.1] (ImplicitCastExpr, LValueToRValue, void *)
   3: CStyleCastExpr 0x55f89cfdca38 <lauxlib.c:600:15, col:24> 'LoadS *' <BitCast>
`-ImplicitCastExpr 0x55f89cfdca20 <col:24> 'void *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdc9e8 <col:24> 'void *' lvalue ParmVar 0x55f89cfdc688 'ud' 'void *'
(LoadS *)[B3.2] (CStyleCastExpr, BitCast, LoadS *)
   4: DeclStmt 0x55f89cfdca60 <lauxlib.c:600:3, col:26>col:10
`-VarDecl 0x55f89cfdc988 <col:3, col:24> col:10 used ls 'LoadS *' cinit
  `-CStyleCastExpr 0x55f89cfdca38 <col:15, col:24> 'LoadS *' <BitCast>
    `-ImplicitCastExpr 0x55f89cfdca20 <col:24> 'void *' <LValueToRValue>
      `-DeclRefExpr 0x55f89cfdc9e8 <col:24> 'void *' lvalue ParmVar 0x55f89cfdc688 'ud' 'void *'
LoadS *ls = (LoadS *)ud;
   5: DeclRefExpr 0x55f89cfdca78 <lauxlib.c:601:9> 'lua_State *' lvalue ParmVar 0x55f89cfdc610 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x55f89cfdcab0 <lauxlib.c:601:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdca78 <col:9> 'lua_State *' lvalue ParmVar 0x55f89cfdc610 'L' 'lua_State *'
[B3.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: CStyleCastExpr 0x55f89cfdcac8 <lauxlib.c:601:3, col:9> 'void' <ToVoid>
`-ImplicitCastExpr 0x55f89cfdcab0 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdca78 <col:9> 'lua_State *' lvalue ParmVar 0x55f89cfdc610 'L' 'lua_State *'
(void)[B3.6] (CStyleCastExpr, ToVoid, void)
   8: DeclRefExpr 0x55f89cfdcaf0 <lauxlib.c:602:7> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
ls
   9: ImplicitCastExpr 0x55f89cfdcb18 <lauxlib.c:602:7> 'LoadS *' <LValueToRValue>
`-DeclRefExpr 0x55f89cfdcaf0 <col:7> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B3.8] (ImplicitCastExpr, LValueToRValue, LoadS *)
  10: MemberExpr 0x55f89cfdcb30 <lauxlib.c:602:7, col:11> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
`-ImplicitCastExpr 0x55f89cfdcb18 <col:7> 'LoadS *' <LValueToRValue>
  `-DeclRefExpr 0x55f89cfdcaf0 <col:7> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B3.9]->size
  11: ImplicitCastExpr 0x55f89cfdcb88 <lauxlib.c:602:7, col:11> 'size_t':'unsigned long' <LValueToRValue>
`-MemberExpr 0x55f89cfdcb30 <col:7, col:11> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
  `-ImplicitCastExpr 0x55f89cfdcb18 <col:7> 'LoadS *' <LValueToRValue>
    `-DeclRefExpr 0x55f89cfdcaf0 <col:7> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
[B3.10] (ImplicitCastExpr, LValueToRValue, size_t)
  12: IntegerLiteral 0x55f89cfdcb68 <lauxlib.c:602:19> 'int' 0
0
  13: ImplicitCastExpr 0x55f89cfdcba0 <lauxlib.c:602:19> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x55f89cfdcb68 <col:19> 'int' 0
[B3.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: BinaryOperator 0x55f89cfdcbb8 <lauxlib.c:602:7, col:19> 'int' '=='
|-ImplicitCastExpr 0x55f89cfdcb88 <col:7, col:11> 'size_t':'unsigned long' <LValueToRValue>
| `-MemberExpr 0x55f89cfdcb30 <col:7, col:11> 'size_t':'unsigned long' lvalue ->size 0x55f89cfdc4f0
|   `-ImplicitCastExpr 0x55f89cfdcb18 <col:7> 'LoadS *' <LValueToRValue>
|     `-DeclRefExpr 0x55f89cfdcaf0 <col:7> 'LoadS *' lvalue Var 0x55f89cfdc988 'ls' 'LoadS *'
`-ImplicitCastExpr 0x55f89cfdcba0 <col:19> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x55f89cfdcb68 <col:19> 'int' 0
[B3.11] == [B3.13]
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
