void luaK_posfix(FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2)
 [B22 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x5637768e6378 <lcode.c:738:11> 'BinOpr':'enum BinOpr' lvalue ParmVar 0x5637768e60f0 'op' 'BinOpr':'enum BinOpr'
op
   2: ImplicitCastExpr 0x5637768e63a0 <lcode.c:738:11> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x5637768e6378 <col:11> 'BinOpr':'enum BinOpr' lvalue ParmVar 0x5637768e60f0 'op' 'BinOpr':'enum BinOpr'
[B1.1] (ImplicitCastExpr, LValueToRValue, BinOpr)
   3: ImplicitCastExpr 0x5637768e63b8 <lcode.c:738:11> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e63a0 <col:11> 'BinOpr':'enum BinOpr' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6378 <col:11> 'BinOpr':'enum BinOpr' lvalue ParmVar 0x5637768e60f0 'op' 'BinOpr':'enum BinOpr'
[B1.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B1.3]
   Preds (1): B22
   Succs (16): B3 B4 B5 B6 B7 B8 B9 B10
     B11 B12 B13 B14 B19 B20 B21 B2

 [B2]
  default:
   1: IntegerLiteral 0x5637768ea6b0 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768ea6e0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768ea6b0 <col:31> 'int' 0
(void)[B2.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B1
   Succs (1): B0

 [B3]
  case OPR_GE:
   1: DeclRefExpr 0x5637768ea4f8 <lcode.c:778:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
codecomp
   2: ImplicitCastExpr 0x5637768ea5e0 <lcode.c:778:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ea4f8 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, int, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768ea520 <lcode.c:778:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ea648 <lcode.c:778:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea520 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ea548 <lcode.c:778:31> 'int' EnumConstant 0x563776877150 'OP_LE' 'int'
OP_LE
   6: ImplicitCastExpr 0x5637768ea660 <lcode.c:778:31> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ea548 <col:31> 'int' EnumConstant 0x563776877150 'OP_LE' 'int'
[B3.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: IntegerLiteral 0x5637768ea570 <lcode.c:778:38> 'int' 0
0
   8: DeclRefExpr 0x5637768ea590 <lcode.c:778:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   9: ImplicitCastExpr 0x5637768ea678 <lcode.c:778:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea590 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B3.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: DeclRefExpr 0x5637768ea5b8 <lcode.c:778:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  11: ImplicitCastExpr 0x5637768ea690 <lcode.c:778:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea5b8 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B3.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: CallExpr 0x5637768ea5f8 <lcode.c:778:18, col:47> 'void'
|-ImplicitCastExpr 0x5637768ea5e0 <col:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ea4f8 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768ea648 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ea520 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ea660 <col:31> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ea548 <col:31> 'int' EnumConstant 0x563776877150 'OP_LE' 'int'
|-IntegerLiteral 0x5637768ea570 <col:38> 'int' 0
|-ImplicitCastExpr 0x5637768ea678 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ea590 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768ea690 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ea5b8 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B3.2]([B3.4], [B3.6], [B3.7], [B3.9], [B3.11])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B4]
  case OPR_GT:
   1: DeclRefExpr 0x5637768ea2e0 <lcode.c:777:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
codecomp
   2: ImplicitCastExpr 0x5637768ea3c8 <lcode.c:777:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ea2e0 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, int, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768ea308 <lcode.c:777:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ea430 <lcode.c:777:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea308 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ea330 <lcode.c:777:31> 'int' EnumConstant 0x56377686bba0 'OP_LT' 'int'
OP_LT
   6: ImplicitCastExpr 0x5637768ea448 <lcode.c:777:31> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ea330 <col:31> 'int' EnumConstant 0x56377686bba0 'OP_LT' 'int'
[B4.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: IntegerLiteral 0x5637768ea358 <lcode.c:777:38> 'int' 0
0
   8: DeclRefExpr 0x5637768ea378 <lcode.c:777:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   9: ImplicitCastExpr 0x5637768ea460 <lcode.c:777:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea378 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B4.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: DeclRefExpr 0x5637768ea3a0 <lcode.c:777:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  11: ImplicitCastExpr 0x5637768ea478 <lcode.c:777:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea3a0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B4.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: CallExpr 0x5637768ea3e0 <lcode.c:777:18, col:47> 'void'
|-ImplicitCastExpr 0x5637768ea3c8 <col:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ea2e0 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768ea430 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ea308 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ea448 <col:31> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ea330 <col:31> 'int' EnumConstant 0x56377686bba0 'OP_LT' 'int'
|-IntegerLiteral 0x5637768ea358 <col:38> 'int' 0
|-ImplicitCastExpr 0x5637768ea460 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ea378 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768ea478 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ea3a0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B4.2]([B4.4], [B4.6], [B4.7], [B4.9], [B4.11])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B5]
  case OPR_LE:
   1: DeclRefExpr 0x5637768ea0c8 <lcode.c:776:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
codecomp
   2: ImplicitCastExpr 0x5637768ea1b0 <lcode.c:776:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ea0c8 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, int, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768ea0f0 <lcode.c:776:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ea218 <lcode.c:776:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea0f0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768ea118 <lcode.c:776:31> 'int' EnumConstant 0x563776877150 'OP_LE' 'int'
OP_LE
   6: ImplicitCastExpr 0x5637768ea230 <lcode.c:776:31> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768ea118 <col:31> 'int' EnumConstant 0x563776877150 'OP_LE' 'int'
[B5.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: IntegerLiteral 0x5637768ea140 <lcode.c:776:38> 'int' 1
1
   8: DeclRefExpr 0x5637768ea160 <lcode.c:776:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   9: ImplicitCastExpr 0x5637768ea248 <lcode.c:776:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea160 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B5.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: DeclRefExpr 0x5637768ea188 <lcode.c:776:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  11: ImplicitCastExpr 0x5637768ea260 <lcode.c:776:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768ea188 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B5.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: CallExpr 0x5637768ea1c8 <lcode.c:776:18, col:47> 'void'
|-ImplicitCastExpr 0x5637768ea1b0 <col:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ea0c8 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768ea218 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ea0f0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ea230 <col:31> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768ea118 <col:31> 'int' EnumConstant 0x563776877150 'OP_LE' 'int'
|-IntegerLiteral 0x5637768ea140 <col:38> 'int' 1
|-ImplicitCastExpr 0x5637768ea248 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ea160 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768ea260 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ea188 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B5.2]([B5.4], [B5.6], [B5.7], [B5.9], [B5.11])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B6]
  case OPR_LT:
   1: DeclRefExpr 0x5637768e9eb0 <lcode.c:775:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
codecomp
   2: ImplicitCastExpr 0x5637768e9f98 <lcode.c:775:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9eb0 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, int, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9ed8 <lcode.c:775:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768ea000 <lcode.c:775:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9ed8 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e9f00 <lcode.c:775:31> 'int' EnumConstant 0x56377686bba0 'OP_LT' 'int'
OP_LT
   6: ImplicitCastExpr 0x5637768ea018 <lcode.c:775:31> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e9f00 <col:31> 'int' EnumConstant 0x56377686bba0 'OP_LT' 'int'
[B6.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: IntegerLiteral 0x5637768e9f28 <lcode.c:775:38> 'int' 1
1
   8: DeclRefExpr 0x5637768e9f48 <lcode.c:775:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   9: ImplicitCastExpr 0x5637768ea030 <lcode.c:775:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9f48 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B6.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: DeclRefExpr 0x5637768e9f70 <lcode.c:775:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  11: ImplicitCastExpr 0x5637768ea048 <lcode.c:775:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9f70 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B6.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: CallExpr 0x5637768e9fb0 <lcode.c:775:18, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9f98 <col:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9eb0 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768ea000 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9ed8 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768ea018 <col:31> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e9f00 <col:31> 'int' EnumConstant 0x56377686bba0 'OP_LT' 'int'
|-IntegerLiteral 0x5637768e9f28 <col:38> 'int' 1
|-ImplicitCastExpr 0x5637768ea030 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9f48 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768ea048 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e9f70 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B6.2]([B6.4], [B6.6], [B6.7], [B6.9], [B6.11])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B7]
  case OPR_NE:
   1: DeclRefExpr 0x5637768e9c98 <lcode.c:774:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
codecomp
   2: ImplicitCastExpr 0x5637768e9d80 <lcode.c:774:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9c98 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, int, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9cc0 <lcode.c:774:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9de8 <lcode.c:774:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9cc0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e9ce8 <lcode.c:774:31> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
OP_EQ
   6: ImplicitCastExpr 0x5637768e9e00 <lcode.c:774:31> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e9ce8 <col:31> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
[B7.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: IntegerLiteral 0x5637768e9d10 <lcode.c:774:38> 'int' 0
0
   8: DeclRefExpr 0x5637768e9d30 <lcode.c:774:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   9: ImplicitCastExpr 0x5637768e9e18 <lcode.c:774:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9d30 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B7.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: DeclRefExpr 0x5637768e9d58 <lcode.c:774:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  11: ImplicitCastExpr 0x5637768e9e30 <lcode.c:774:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9d58 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B7.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: CallExpr 0x5637768e9d98 <lcode.c:774:18, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9d80 <col:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9c98 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9de8 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9cc0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e9e00 <col:31> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e9ce8 <col:31> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
|-IntegerLiteral 0x5637768e9d10 <col:38> 'int' 0
|-ImplicitCastExpr 0x5637768e9e18 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9d30 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e9e30 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e9d58 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B7.2]([B7.4], [B7.6], [B7.7], [B7.9], [B7.11])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B8]
  case OPR_EQ:
   1: DeclRefExpr 0x5637768e9a20 <lcode.c:773:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
codecomp
   2: ImplicitCastExpr 0x5637768e9b68 <lcode.c:773:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9a20 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, int, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9a48 <lcode.c:773:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9bd0 <lcode.c:773:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9a48 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e9a70 <lcode.c:773:31> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
OP_EQ
   6: ImplicitCastExpr 0x5637768e9be8 <lcode.c:773:31> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e9a70 <col:31> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
[B8.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: IntegerLiteral 0x5637768e9a98 <lcode.c:773:38> 'int' 1
1
   8: DeclRefExpr 0x5637768e9ab8 <lcode.c:773:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   9: ImplicitCastExpr 0x5637768e9c00 <lcode.c:773:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9ab8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B8.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: DeclRefExpr 0x5637768e9ae0 <lcode.c:773:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  11: ImplicitCastExpr 0x5637768e9c18 <lcode.c:773:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9ae0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B8.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: CallExpr 0x5637768e9b80 <lcode.c:773:18, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9b68 <col:18> 'void (*)(FuncState *, OpCode, int, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9a20 <col:18> 'void (FuncState *, OpCode, int, expdesc *, expdesc *)' Function 0x5637768e27b0 'codecomp' 'void (FuncState *, OpCode, int, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9bd0 <col:27> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9a48 <col:27> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e9be8 <col:31> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e9a70 <col:31> 'int' EnumConstant 0x56377686bb58 'OP_EQ' 'int'
|-IntegerLiteral 0x5637768e9a98 <col:38> 'int' 1
|-ImplicitCastExpr 0x5637768e9c00 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9ab8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e9c18 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e9ae0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B8.2]([B8.4], [B8.6], [B8.7], [B8.9], [B8.11])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B9]
  case OPR_POW:
   1: DeclRefExpr 0x5637768e9830 <lcode.c:772:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e98f8 <lcode.c:772:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9830 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9858 <lcode.c:772:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9958 <lcode.c:772:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9858 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e9880 <lcode.c:772:33> 'int' EnumConstant 0x56377686b9a8 'OP_POW' 'int'
OP_POW
   6: ImplicitCastExpr 0x5637768e9970 <lcode.c:772:33> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e9880 <col:33> 'int' EnumConstant 0x56377686b9a8 'OP_POW' 'int'
[B9.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e98a8 <lcode.c:772:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e9988 <lcode.c:772:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e98a8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B9.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e98d0 <lcode.c:772:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  10: ImplicitCastExpr 0x5637768e99a0 <lcode.c:772:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e98d0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B9.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: CallExpr 0x5637768e9910 <lcode.c:772:19, col:47> 'void'
|-ImplicitCastExpr 0x5637768e98f8 <col:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9830 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9958 <col:29> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9858 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e9970 <col:33> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e9880 <col:33> 'int' EnumConstant 0x56377686b9a8 'OP_POW' 'int'
|-ImplicitCastExpr 0x5637768e9988 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e98a8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e99a0 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e98d0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B9.2]([B9.4], [B9.6], [B9.8], [B9.10])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B10]
  case OPR_MOD:
   1: DeclRefExpr 0x5637768e9640 <lcode.c:771:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e9708 <lcode.c:771:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9640 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9668 <lcode.c:771:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9768 <lcode.c:771:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9668 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e9690 <lcode.c:771:33> 'int' EnumConstant 0x56377686b960 'OP_MOD' 'int'
OP_MOD
   6: ImplicitCastExpr 0x5637768e9780 <lcode.c:771:33> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e9690 <col:33> 'int' EnumConstant 0x56377686b960 'OP_MOD' 'int'
[B10.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e96b8 <lcode.c:771:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e9798 <lcode.c:771:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e96b8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B10.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e96e0 <lcode.c:771:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  10: ImplicitCastExpr 0x5637768e97b0 <lcode.c:771:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e96e0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B10.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: CallExpr 0x5637768e9720 <lcode.c:771:19, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9708 <col:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9640 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9768 <col:29> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9668 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e9780 <col:33> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e9690 <col:33> 'int' EnumConstant 0x56377686b960 'OP_MOD' 'int'
|-ImplicitCastExpr 0x5637768e9798 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e96b8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e97b0 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e96e0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B10.2]([B10.4], [B10.6], [B10.8], [B10.10])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B11]
  case OPR_DIV:
   1: DeclRefExpr 0x5637768e9450 <lcode.c:770:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e9518 <lcode.c:770:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9450 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9478 <lcode.c:770:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9578 <lcode.c:770:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9478 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e94a0 <lcode.c:770:33> 'int' EnumConstant 0x56377686b918 'OP_DIV' 'int'
OP_DIV
   6: ImplicitCastExpr 0x5637768e9590 <lcode.c:770:33> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e94a0 <col:33> 'int' EnumConstant 0x56377686b918 'OP_DIV' 'int'
[B11.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e94c8 <lcode.c:770:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e95a8 <lcode.c:770:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e94c8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B11.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e94f0 <lcode.c:770:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  10: ImplicitCastExpr 0x5637768e95c0 <lcode.c:770:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e94f0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B11.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: CallExpr 0x5637768e9530 <lcode.c:770:19, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9518 <col:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9450 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9578 <col:29> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9478 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e9590 <col:33> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e94a0 <col:33> 'int' EnumConstant 0x56377686b918 'OP_DIV' 'int'
|-ImplicitCastExpr 0x5637768e95a8 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e94c8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e95c0 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e94f0 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B11.2]([B11.4], [B11.6], [B11.8], [B11.10])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B12]
  case OPR_MUL:
   1: DeclRefExpr 0x5637768e9238 <lcode.c:769:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e9328 <lcode.c:769:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9238 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9260 <lcode.c:769:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9388 <lcode.c:769:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9260 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e92b0 <lcode.c:769:33> 'int' EnumConstant 0x56377686b8d0 'OP_MUL' 'int'
OP_MUL
   6: ImplicitCastExpr 0x5637768e93a0 <lcode.c:769:33> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e92b0 <col:33> 'int' EnumConstant 0x56377686b8d0 'OP_MUL' 'int'
[B12.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e92d8 <lcode.c:769:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e93b8 <lcode.c:769:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e92d8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B12.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e9300 <lcode.c:769:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  10: ImplicitCastExpr 0x5637768e93d0 <lcode.c:769:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9300 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B12.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: CallExpr 0x5637768e9340 <lcode.c:769:19, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9328 <col:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9238 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9388 <col:29> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9260 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e93a0 <col:33> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e92b0 <col:33> 'int' EnumConstant 0x56377686b8d0 'OP_MUL' 'int'
|-ImplicitCastExpr 0x5637768e93b8 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e92d8 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e93d0 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e9300 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B12.2]([B12.4], [B12.6], [B12.8], [B12.10])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B13]
  case OPR_SUB:
   1: DeclRefExpr 0x5637768e9048 <lcode.c:768:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e9110 <lcode.c:768:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e9048 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B13.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e9070 <lcode.c:768:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e9170 <lcode.c:768:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e9070 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e9098 <lcode.c:768:33> 'int' EnumConstant 0x56377686b888 'OP_SUB' 'int'
OP_SUB
   6: ImplicitCastExpr 0x5637768e9188 <lcode.c:768:33> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e9098 <col:33> 'int' EnumConstant 0x56377686b888 'OP_SUB' 'int'
[B13.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e90c0 <lcode.c:768:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e91a0 <lcode.c:768:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e90c0 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B13.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e90e8 <lcode.c:768:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  10: ImplicitCastExpr 0x5637768e91b8 <lcode.c:768:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e90e8 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B13.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: CallExpr 0x5637768e9128 <lcode.c:768:19, col:47> 'void'
|-ImplicitCastExpr 0x5637768e9110 <col:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e9048 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e9170 <col:29> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e9070 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e9188 <col:33> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e9098 <col:33> 'int' EnumConstant 0x56377686b888 'OP_SUB' 'int'
|-ImplicitCastExpr 0x5637768e91a0 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e90c0 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e91b8 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e90e8 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B13.2]([B13.4], [B13.6], [B13.8], [B13.10])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B14]
  case OPR_ADD:
   1: DeclRefExpr 0x5637768e8e58 <lcode.c:767:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   2: ImplicitCastExpr 0x5637768e8f20 <lcode.c:767:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e8e58 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B14.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e8e80 <lcode.c:767:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e8f80 <lcode.c:767:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8e80 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B14.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e8ea8 <lcode.c:767:33> 'int' EnumConstant 0x56377686b840 'OP_ADD' 'int'
OP_ADD
   6: ImplicitCastExpr 0x5637768e8f98 <lcode.c:767:33> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e8ea8 <col:33> 'int' EnumConstant 0x56377686b840 'OP_ADD' 'int'
[B14.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x5637768e8ed0 <lcode.c:767:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e8fb0 <lcode.c:767:41> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8ed0 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B14.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: DeclRefExpr 0x5637768e8ef8 <lcode.c:767:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  10: ImplicitCastExpr 0x5637768e8fc8 <lcode.c:767:45> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8ef8 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B14.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: CallExpr 0x5637768e8f38 <lcode.c:767:19, col:47> 'void'
|-ImplicitCastExpr 0x5637768e8f20 <col:19> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e8e58 <col:19> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e8f80 <col:29> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e8e80 <col:29> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e8f98 <col:33> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e8ea8 <col:33> 'int' EnumConstant 0x56377686b840 'OP_ADD' 'int'
|-ImplicitCastExpr 0x5637768e8fb0 <col:41> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e8ed0 <col:41> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e8fc8 <col:45> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e8ef8 <col:45> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B14.2]([B14.4], [B14.6], [B14.8], [B14.10])
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B15]
   T: break;
   Preds (2): B16 B17
   Succs (1): B0

 [B16]
   1: DeclRefExpr 0x5637768e8af0 <lcode.c:762:9> 'void (FuncState *, expdesc *)' Function 0x5637768d2340 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
luaK_exp2nextreg
   2: ImplicitCastExpr 0x5637768e8b68 <lcode.c:762:9> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e8af0 <col:9> 'void (FuncState *, expdesc *)' Function 0x5637768d2340 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
[B16.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e8b18 <lcode.c:762:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e8bb8 <lcode.c:762:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8b18 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B16.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e8b40 <lcode.c:762:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
   6: ImplicitCastExpr 0x5637768e8bd0 <lcode.c:762:30> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8b40 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B16.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e8b80 <lcode.c:762:9, col:32> 'void'
|-ImplicitCastExpr 0x5637768e8b68 <col:9> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e8af0 <col:9> 'void (FuncState *, expdesc *)' Function 0x5637768d2340 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e8bb8 <col:26> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e8b18 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e8bd0 <col:30> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e8b40 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B16.2]([B16.4], [B16.6])
   8: DeclRefExpr 0x5637768e8be8 <lcode.c:763:9> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
codearith
   9: ImplicitCastExpr 0x5637768e8cb0 <lcode.c:763:9> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e8be8 <col:9> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
[B16.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, OpCode, expdesc *, expdesc *))
  10: DeclRefExpr 0x5637768e8c10 <lcode.c:763:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768e8d10 <lcode.c:763:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8c10 <col:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B16.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768e8c38 <lcode.c:763:23> 'int' EnumConstant 0x56377686bac8 'OP_CONCAT' 'int'
OP_CONCAT
  13: ImplicitCastExpr 0x5637768e8d28 <lcode.c:763:23> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768e8c38 <col:23> 'int' EnumConstant 0x56377686bac8 'OP_CONCAT' 'int'
[B16.12] (ImplicitCastExpr, IntegralCast, OpCode)
  14: DeclRefExpr 0x5637768e8c60 <lcode.c:763:34> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  15: ImplicitCastExpr 0x5637768e8d40 <lcode.c:763:34> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8c60 <col:34> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B16.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: DeclRefExpr 0x5637768e8c88 <lcode.c:763:38> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  17: ImplicitCastExpr 0x5637768e8d58 <lcode.c:763:38> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8c88 <col:38> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B16.16] (ImplicitCastExpr, LValueToRValue, expdesc *)
  18: CallExpr 0x5637768e8cc8 <lcode.c:763:9, col:40> 'void'
|-ImplicitCastExpr 0x5637768e8cb0 <col:9> 'void (*)(FuncState *, OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e8be8 <col:9> 'void (FuncState *, OpCode, expdesc *, expdesc *)' Function 0x5637768e13b0 'codearith' 'void (FuncState *, OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e8d10 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e8c10 <col:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e8d28 <col:23> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768e8c38 <col:23> 'int' EnumConstant 0x56377686bac8 'OP_CONCAT' 'int'
|-ImplicitCastExpr 0x5637768e8d40 <col:34> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e8c60 <col:34> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e8d58 <col:38> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e8c88 <col:38> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B16.9]([B16.11], [B16.13], [B16.15], [B16.17])
   Preds (2): B18 B19
   Succs (1): B15

 [B17]
   1: IntegerLiteral 0x5637768e76c8 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768e76f8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768e76c8 <col:31> 'int' 0
(void)[B17.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5637768e7740 <lcode.c:757:9> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   4: ImplicitCastExpr 0x5637768e77b8 <lcode.c:757:9> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e7740 <col:9> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B17.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   5: DeclRefExpr 0x5637768e7768 <lcode.c:757:17> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768e7808 <lcode.c:757:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e7768 <col:17> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: DeclRefExpr 0x5637768e7790 <lcode.c:757:21> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e7820 <lcode.c:757:21> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e7790 <col:21> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: CallExpr 0x5637768e77d0 <lcode.c:757:9, col:23> 'void'
|-ImplicitCastExpr 0x5637768e77b8 <col:9> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e7740 <col:9> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e7808 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e7768 <col:17> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e7820 <col:21> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e7790 <col:21> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.4]([B17.6], [B17.8])
  10: DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768e7b08 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
([B17.10]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: MemberExpr 0x5637768e7b20 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.11]->f
  13: ImplicitCastExpr 0x5637768e7b58 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.12] (ImplicitCastExpr, LValueToRValue, Proto *)
  14: MemberExpr 0x5637768e7b70 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.13]->code
  15: ImplicitCastExpr 0x5637768e7cb0 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768e7b70 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.14] (ImplicitCastExpr, LValueToRValue, Instruction *)
  16: DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  17: ImplicitCastExpr 0x5637768e7bf0 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
([B17.16]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  18: MemberExpr 0x5637768e7c08 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.17]->u
  19: MemberExpr 0x5637768e7c40 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.18].s
  20: MemberExpr 0x5637768e7c78 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.19].info
  21: ImplicitCastExpr 0x5637768e7cc8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768e7c78 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.20] (ImplicitCastExpr, LValueToRValue, int)
  22: ArraySubscriptExpr 0x5637768e7ce0 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768e7cb0 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768e7b70 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e7cc8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768e7c78 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.15][[B17.21]]
  23: ImplicitCastExpr 0x5637768e8068 <./lopcodes.h:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768e7d28 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768e7d08 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768e7ce0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768e7cb0 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768e7b70 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768e7cc8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768e7c78 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
(([B17.22])) (ImplicitCastExpr, LValueToRValue, Instruction)
  24: IntegerLiteral 0x5637768e7d48 <./lopcodes.h:71:39> 'int' 0
0
  25: CStyleCastExpr 0x5637768e7d78 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
(Instruction)[B17.24] (CStyleCastExpr, IntegralCast, Instruction)
  26: UnaryOperator 0x5637768e7da0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
~[B17.25]
  27: IntegerLiteral 0x5637768e7de0 <./lopcodes.h:38:17> 'int' 9
9
  28: BinaryOperator 0x5637768e7e00 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
`-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
([B17.26]) << [B17.27]
  29: UnaryOperator 0x5637768e7e48 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768e7e28 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768e7e00 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
~([B17.28])
  30: IntegerLiteral 0x5637768e7e88 <./lopcodes.h:44:17> 'int' 0
0
  31: IntegerLiteral 0x5637768e7ea8 <./lopcodes.h:42:18> 'int' 6
6
  32: BinaryOperator 0x5637768e7ec8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
[B17.30] + [B17.31]
  33: IntegerLiteral 0x5637768e7f10 <./lopcodes.h:40:17> 'int' 8
8
  34: BinaryOperator 0x5637768e7f30 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
([B17.32]) + [B17.33]
  35: IntegerLiteral 0x5637768e7f78 <./lopcodes.h:37:17> 'int' 9
9
  36: BinaryOperator 0x5637768e7f98 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768e7f58 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768e7f30 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768e7f78 <line:37:17> 'int' 9
([B17.34]) + [B17.35]
  37: BinaryOperator 0x5637768e7fe0 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e7e68 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768e7e48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768e7e28 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768e7e00 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
`-ParenExpr 0x5637768e7fc0 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768e7f98 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768e7f58 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768e7f30 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768e7f78 <line:37:17> 'int' 9
([B17.29]) << ([B17.36])
  38: UnaryOperator 0x5637768e8028 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768e8008 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768e7fe0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768e7e68 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768e7e48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768e7e28 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768e7e00 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768e7fc0 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768e7f98 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768e7f58 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768e7f30 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768e7f78 <line:37:17> 'int' 9
~([B17.37])
  39: BinaryOperator 0x5637768e8080 <./lopcodes.h:89:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768e8068 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768e7d28 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768e7d08 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768e7ce0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768e7cb0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768e7b70 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768e7cc8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768e7c78 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
`-ParenExpr 0x5637768e8048 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768e8028 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768e8008 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768e7fe0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768e7e68 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768e7e48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768e7e28 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768e7e00 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768e7fc0 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768e7f98 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768e7f58 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768e7f30 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768e7f78 <line:37:17> 'int' 9
[B17.23] & ([B17.38])
  40: DeclRefExpr 0x5637768e80c8 <lcode.c:758:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  41: ImplicitCastExpr 0x5637768e80f0 <lcode.c:758:35> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.40] (ImplicitCastExpr, LValueToRValue, expdesc *)
  42: MemberExpr 0x5637768e8108 <lcode.c:758:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.41]->u
  43: MemberExpr 0x5637768e8140 <lcode.c:758:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.42].s
  44: MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.43].info
  45: ImplicitCastExpr 0x5637768e8210 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768e81f0 <col:26, col:30> 'int' lvalue
  `-MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
([B17.44]) (ImplicitCastExpr, LValueToRValue, int)
  46: CStyleCastExpr 0x5637768e8228 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e8210 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768e81f0 <col:26, col:30> 'int' lvalue
    `-MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
      `-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
        `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
          `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
            `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
(Instruction)[B17.45] (CStyleCastExpr, IntegralCast, Instruction)
  47: IntegerLiteral 0x5637768e8270 <./lopcodes.h:44:17> 'int' 0
0
  48: IntegerLiteral 0x5637768e8290 <./lopcodes.h:42:18> 'int' 6
6
  49: BinaryOperator 0x5637768e82b0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
[B17.47] + [B17.48]
  50: IntegerLiteral 0x5637768e82f8 <./lopcodes.h:40:17> 'int' 8
8
  51: BinaryOperator 0x5637768e8318 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768e82d8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768e82b0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768e82f8 <line:40:17> 'int' 8
([B17.49]) + [B17.50]
  52: IntegerLiteral 0x5637768e8360 <./lopcodes.h:37:17> 'int' 9
9
  53: BinaryOperator 0x5637768e8380 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768e8340 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768e8318 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768e82d8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768e82b0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768e82f8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768e8360 <line:37:17> 'int' 9
([B17.51]) + [B17.52]
  54: BinaryOperator 0x5637768e83c8 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e8250 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768e8228 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768e8210 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768e81f0 <col:26, col:30> 'int' lvalue
|       `-MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
|         `-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|             `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
|               `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ParenExpr 0x5637768e83a8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768e8380 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768e8340 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768e8318 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768e82d8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768e82b0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768e82f8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768e8360 <line:37:17> 'int' 9
([B17.46]) << ([B17.53])
  55: IntegerLiteral 0x5637768e8410 <./lopcodes.h:71:39> 'int' 0
0
  56: CStyleCastExpr 0x5637768e8440 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
(Instruction)[B17.55] (CStyleCastExpr, IntegralCast, Instruction)
  57: UnaryOperator 0x5637768e8468 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
~[B17.56]
  58: IntegerLiteral 0x5637768e84a8 <./lopcodes.h:38:17> 'int' 9
9
  59: BinaryOperator 0x5637768e84c8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e8488 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768e8468 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
`-IntegerLiteral 0x5637768e84a8 <line:38:17> 'int' 9
([B17.57]) << [B17.58]
  60: UnaryOperator 0x5637768e8510 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768e84f0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768e84c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768e8488 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768e8468 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768e84a8 <line:38:17> 'int' 9
~([B17.59])
  61: IntegerLiteral 0x5637768e8550 <./lopcodes.h:44:17> 'int' 0
0
  62: IntegerLiteral 0x5637768e8570 <./lopcodes.h:42:18> 'int' 6
6
  63: BinaryOperator 0x5637768e8590 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
[B17.61] + [B17.62]
  64: IntegerLiteral 0x5637768e85d8 <./lopcodes.h:40:17> 'int' 8
8
  65: BinaryOperator 0x5637768e85f8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768e85b8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768e8590 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768e85d8 <line:40:17> 'int' 8
([B17.63]) + [B17.64]
  66: IntegerLiteral 0x5637768e8640 <./lopcodes.h:37:17> 'int' 9
9
  67: BinaryOperator 0x5637768e8660 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768e8620 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768e85f8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768e85b8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768e8590 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768e85d8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768e8640 <line:37:17> 'int' 9
([B17.65]) + [B17.66]
  68: BinaryOperator 0x5637768e86a8 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e8530 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768e8510 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768e84f0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768e84c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768e8488 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768e8468 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768e84a8 <line:38:17> 'int' 9
`-ParenExpr 0x5637768e8688 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768e8660 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768e8620 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768e85f8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768e85b8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768e8590 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768e85d8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768e8640 <line:37:17> 'int' 9
([B17.60]) << ([B17.67])
  69: BinaryOperator 0x5637768e86f0 <./lopcodes.h:90:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768e83f0 <line:90:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768e83c8 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768e8250 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768e8228 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x5637768e8210 <col:26, col:30> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x5637768e81f0 <col:26, col:30> 'int' lvalue
|   |       `-MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
|   |         `-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |           `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |             `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
|   |               `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
|   `-ParenExpr 0x5637768e83a8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5637768e8380 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5637768e8340 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5637768e8318 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5637768e82d8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5637768e82b0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5637768e82f8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5637768e8360 <line:37:17> 'int' 9
`-ParenExpr 0x5637768e86d0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768e86a8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768e8530 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768e8510 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768e84f0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768e84c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768e8488 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768e8468 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768e84a8 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768e8688 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768e8660 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768e8620 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768e85f8 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768e85b8 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768e8590 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768e85d8 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768e8640 <line:37:17> 'int' 9
([B17.54]) & ([B17.68])
  70: BinaryOperator 0x5637768e8738 <./lopcodes.h:89:31, line:90:53> 'unsigned int' '|'
|-ParenExpr 0x5637768e80a8 <line:89:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768e8080 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768e8068 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768e7d28 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768e7d08 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768e7ce0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768e7cb0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768e7b70 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768e7cc8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768e7c78 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
|   `-ParenExpr 0x5637768e8048 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768e8028 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768e8008 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768e7fe0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768e7e68 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768e7e48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768e7e28 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768e7e00 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
|           `-ParenExpr 0x5637768e7fc0 <line:47:16, col:31> 'int'
|             `-BinaryOperator 0x5637768e7f98 <line:46:16, line:37:17> 'int' '+'
|               |-ParenExpr 0x5637768e7f58 <line:46:16, col:31> 'int'
|               | `-BinaryOperator 0x5637768e7f30 <line:45:16, line:40:17> 'int' '+'
|               |   |-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
|               |   | `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
|               |   |   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
|               |   |   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
|               |   `-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
|               `-IntegerLiteral 0x5637768e7f78 <line:37:17> 'int' 9
`-ParenExpr 0x5637768e8718 <line:90:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768e86f0 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768e83f0 <line:90:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768e83c8 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768e8250 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768e8228 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x5637768e8210 <col:26, col:30> 'int' <LValueToRValue>
    |   |     `-ParenExpr 0x5637768e81f0 <col:26, col:30> 'int' lvalue
    |   |       `-MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
    |   |         `-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |           `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |             `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
    |   |               `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
    |   `-ParenExpr 0x5637768e83a8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768e8380 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5637768e8340 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5637768e8318 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5637768e82d8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5637768e82b0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5637768e82f8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5637768e8360 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768e86d0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768e86a8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768e8530 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768e8510 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768e84f0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768e84c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768e8488 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768e8468 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768e84a8 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768e8688 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768e8660 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768e8620 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768e85f8 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768e85b8 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768e8590 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768e85d8 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768e8640 <line:37:17> 'int' 9
([B17.39]) | ([B17.69])
  71: DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
  72: ImplicitCastExpr 0x5637768e7880 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
([B17.71]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  73: MemberExpr 0x5637768e7898 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768e7880 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.72]->f
  74: ImplicitCastExpr 0x5637768e78d0 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768e7898 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768e7880 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.73] (ImplicitCastExpr, LValueToRValue, Proto *)
  75: MemberExpr 0x5637768e78e8 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768e78d0 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768e7898 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768e7880 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.74]->code
  76: ImplicitCastExpr 0x5637768e7a28 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768e78e8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768e78d0 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768e7898 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768e7880 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B17.75] (ImplicitCastExpr, LValueToRValue, Instruction *)
  77: DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  78: ImplicitCastExpr 0x5637768e7968 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
([B17.77]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  79: MemberExpr 0x5637768e7980 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e7968 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.78]->u
  80: MemberExpr 0x5637768e79b8 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e7980 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e7968 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.79].s
  81: MemberExpr 0x5637768e79f0 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e79b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e7980 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e7968 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.80].info
  82: ImplicitCastExpr 0x5637768e7a40 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768e79f0 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768e79b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768e7980 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768e7968 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.81] (ImplicitCastExpr, LValueToRValue, int)
  83: ArraySubscriptExpr 0x5637768e7a58 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768e7a28 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768e78e8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768e78d0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768e7898 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768e7880 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e7a40 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768e79f0 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768e79b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768e7980 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768e7968 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.76][[B17.82]]
  84: BinaryOperator 0x5637768e8780 <./lopcodes.h:89:24, line:90:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768e7aa0 <line:89:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x5637768e7a80 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x5637768e7a58 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x5637768e7a28 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x5637768e78e8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|     |   `-ImplicitCastExpr 0x5637768e78d0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x5637768e7898 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|     |       `-ImplicitCastExpr 0x5637768e7880 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x5637768e7860 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x5637768e7838 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768e7a40 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x5637768e79f0 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|         `-MemberExpr 0x5637768e79b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           `-MemberExpr 0x5637768e7980 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|             `-ImplicitCastExpr 0x5637768e7968 <col:38, col:40> 'expdesc *' <LValueToRValue>
|               `-ParenExpr 0x5637768e7948 <col:38, col:40> 'expdesc *' lvalue
|                 `-DeclRefExpr 0x5637768e7920 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
`-ParenExpr 0x5637768e8760 <./lopcodes.h:89:30, line:90:54> 'unsigned int'
  `-BinaryOperator 0x5637768e8738 <line:89:31, line:90:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768e80a8 <line:89:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768e8080 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768e8068 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768e7d28 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768e7d08 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768e7ce0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768e7cb0 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768e7b70 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768e7b58 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768e7b20 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768e7b08 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768e7ae8 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768e7ac0 <lcode.c:758:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768e7cc8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768e7c78 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768e7c40 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768e7c08 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768e7bf0 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768e7bd0 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768e7ba8 <lcode.c:758:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
    |   `-ParenExpr 0x5637768e8048 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768e8028 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768e8008 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768e7fe0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768e7e68 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768e7e48 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768e7e28 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768e7e00 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768e7dc0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768e7da0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768e7d78 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768e7d48 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768e7de0 <line:38:17> 'int' 9
    |           `-ParenExpr 0x5637768e7fc0 <line:47:16, col:31> 'int'
    |             `-BinaryOperator 0x5637768e7f98 <line:46:16, line:37:17> 'int' '+'
    |               |-ParenExpr 0x5637768e7f58 <line:46:16, col:31> 'int'
    |               | `-BinaryOperator 0x5637768e7f30 <line:45:16, line:40:17> 'int' '+'
    |               |   |-ParenExpr 0x5637768e7ef0 <line:45:16, col:33> 'int'
    |               |   | `-BinaryOperator 0x5637768e7ec8 <line:44:17, line:42:18> 'int' '+'
    |               |   |   |-IntegerLiteral 0x5637768e7e88 <line:44:17> 'int' 0
    |               |   |   `-IntegerLiteral 0x5637768e7ea8 <line:42:18> 'int' 6
    |               |   `-IntegerLiteral 0x5637768e7f10 <line:40:17> 'int' 8
    |               `-IntegerLiteral 0x5637768e7f78 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768e8718 <line:90:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768e86f0 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768e83f0 <line:90:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768e83c8 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768e8250 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768e8228 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ImplicitCastExpr 0x5637768e8210 <col:26, col:30> 'int' <LValueToRValue>
        |   |     `-ParenExpr 0x5637768e81f0 <col:26, col:30> 'int' lvalue
        |   |       `-MemberExpr 0x5637768e8178 <lcode.c:758:35, col:43> 'int' lvalue .info 0x56377687d5f8
        |   |         `-MemberExpr 0x5637768e8140 <col:35, col:41> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
        |   |           `-MemberExpr 0x5637768e8108 <col:35, col:39> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        |   |             `-ImplicitCastExpr 0x5637768e80f0 <col:35> 'expdesc *' <LValueToRValue>
        |   |               `-DeclRefExpr 0x5637768e80c8 <col:35> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
        |   `-ParenExpr 0x5637768e83a8 <./lopcodes.h:47:16, col:31> 'int'
        |     `-BinaryOperator 0x5637768e8380 <line:46:16, line:37:17> 'int' '+'
        |       |-ParenExpr 0x5637768e8340 <line:46:16, col:31> 'int'
        |       | `-BinaryOperator 0x5637768e8318 <line:45:16, line:40:17> 'int' '+'
        |       |   |-ParenExpr 0x5637768e82d8 <line:45:16, col:33> 'int'
        |       |   | `-BinaryOperator 0x5637768e82b0 <line:44:17, line:42:18> 'int' '+'
        |       |   |   |-IntegerLiteral 0x5637768e8270 <line:44:17> 'int' 0
        |       |   |   `-IntegerLiteral 0x5637768e8290 <line:42:18> 'int' 6
        |       |   `-IntegerLiteral 0x5637768e82f8 <line:40:17> 'int' 8
        |       `-IntegerLiteral 0x5637768e8360 <line:37:17> 'int' 9
        `-ParenExpr 0x5637768e86d0 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768e86a8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768e8530 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768e8510 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768e84f0 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768e84c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768e8488 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768e8468 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768e8440 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768e8410 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768e84a8 <line:38:17> 'int' 9
            `-ParenExpr 0x5637768e8688 <line:47:16, col:31> 'int'
              `-BinaryOperator 0x5637768e8660 <line:46:16, line:37:17> 'int' '+'
                |-ParenExpr 0x5637768e8620 <line:46:16, col:31> 'int'
                | `-BinaryOperator 0x5637768e85f8 <line:45:16, line:40:17> 'int' '+'
                |   |-ParenExpr 0x5637768e85b8 <line:45:16, col:33> 'int'
                |   | `-BinaryOperator 0x5637768e8590 <line:44:17, line:42:18> 'int' '+'
                |   |   |-IntegerLiteral 0x5637768e8550 <line:44:17> 'int' 0
                |   |   `-IntegerLiteral 0x5637768e8570 <line:42:18> 'int' 6
                |   `-IntegerLiteral 0x5637768e85d8 <line:40:17> 'int' 8
                `-IntegerLiteral 0x5637768e8640 <line:37:17> 'int' 9
(([B17.83])) = ([B17.70])
  85: DeclRefExpr 0x5637768e8840 <lcode.c:759:17> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
VRELOCABLE
  86: ImplicitCastExpr 0x5637768e8868 <lcode.c:759:17> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768e8840 <col:17> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B17.85] (ImplicitCastExpr, IntegralCast, expkind)
  87: DeclRefExpr 0x5637768e87c8 <lcode.c:759:9> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  88: ImplicitCastExpr 0x5637768e87f0 <lcode.c:759:9> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e87c8 <col:9> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.87] (ImplicitCastExpr, LValueToRValue, expdesc *)
  89: MemberExpr 0x5637768e8808 <lcode.c:759:9, col:13> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768e87f0 <col:9> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e87c8 <col:9> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.88]->k
  90: BinaryOperator 0x5637768e8880 <lcode.c:759:9, col:17> 'expkind':'expkind' '='
|-MemberExpr 0x5637768e8808 <col:9, col:13> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768e87f0 <col:9> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e87c8 <col:9> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e8868 <col:17> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768e8840 <col:17> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B17.89] = [B17.86]
  91: DeclRefExpr 0x5637768e8990 <lcode.c:759:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  92: ImplicitCastExpr 0x5637768e89b8 <lcode.c:759:44> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e8990 <col:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.91] (ImplicitCastExpr, LValueToRValue, expdesc *)
  93: MemberExpr 0x5637768e89d0 <lcode.c:759:44, col:48> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e89b8 <col:44> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e8990 <col:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.92]->u
  94: MemberExpr 0x5637768e8a08 <lcode.c:759:44, col:50> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e89d0 <col:44, col:48> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e89b8 <col:44> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e8990 <col:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.93].s
  95: MemberExpr 0x5637768e8a40 <lcode.c:759:44, col:52> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e8a08 <col:44, col:50> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e89d0 <col:44, col:48> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e89b8 <col:44> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e8990 <col:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.94].info
  96: ImplicitCastExpr 0x5637768e8a78 <lcode.c:759:44, col:52> 'int' <LValueToRValue>
`-MemberExpr 0x5637768e8a40 <col:44, col:52> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768e8a08 <col:44, col:50> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768e89d0 <col:44, col:48> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768e89b8 <col:44> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768e8990 <col:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.95] (ImplicitCastExpr, LValueToRValue, int)
  97: DeclRefExpr 0x5637768e88a8 <lcode.c:759:29> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  98: ImplicitCastExpr 0x5637768e88d0 <lcode.c:759:29> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e88a8 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.97] (ImplicitCastExpr, LValueToRValue, expdesc *)
  99: MemberExpr 0x5637768e88e8 <lcode.c:759:29, col:33> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e88d0 <col:29> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e88a8 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.98]->u
 100: MemberExpr 0x5637768e8920 <lcode.c:759:29, col:35> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e88e8 <col:29, col:33> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e88d0 <col:29> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e88a8 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.99].s
 101: MemberExpr 0x5637768e8958 <lcode.c:759:29, col:37> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e8920 <col:29, col:35> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e88e8 <col:29, col:33> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e88d0 <col:29> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e88a8 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B17.100].info
 102: BinaryOperator 0x5637768e8a90 <lcode.c:759:29, col:52> 'int' '='
|-MemberExpr 0x5637768e8958 <col:29, col:37> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768e8920 <col:29, col:35> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768e88e8 <col:29, col:33> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768e88d0 <col:29> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768e88a8 <col:29> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e8a78 <col:44, col:52> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768e8a40 <col:44, col:52> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768e8a08 <col:44, col:50> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768e89d0 <col:44, col:48> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768e89b8 <col:44> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768e8990 <col:44> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B17.101] = [B17.96]
   Preds (1): B18
   Succs (1): B15

 [B18]
   1: DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768e70a0 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
([B18.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768e70b8 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B18.2]->f
   4: ImplicitCastExpr 0x5637768e70f0 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B18.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768e7108 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B18.4]->code
   6: ImplicitCastExpr 0x5637768e7248 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B18.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
   8: ImplicitCastExpr 0x5637768e7188 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
([B18.7]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768e71a0 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B18.8]->u
  10: MemberExpr 0x5637768e71d8 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B18.9].s
  11: MemberExpr 0x5637768e7210 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B18.10].info
  12: ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B18.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x5637768e72a0 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B18.6][[B18.12]]
  14: ImplicitCastExpr 0x5637768e7328 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768e72e8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768e72c8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768e72a0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
(([B18.13])) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: IntegerLiteral 0x5637768e7308 <./lopcodes.h:44:17> 'int' 0
0
  16: BinaryOperator 0x5637768e7340 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768e7328 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768e72e8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768e72c8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768e72a0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
`-IntegerLiteral 0x5637768e7308 <./lopcodes.h:44:17> 'int' 0
[B18.14] >> [B18.15]
  17: IntegerLiteral 0x5637768e7388 <./lopcodes.h:71:39> 'int' 0
0
  18: CStyleCastExpr 0x5637768e73b8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
(Instruction)[B18.17] (CStyleCastExpr, IntegralCast, Instruction)
  19: UnaryOperator 0x5637768e73e0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
~[B18.18]
  20: IntegerLiteral 0x5637768e7420 <./lopcodes.h:42:18> 'int' 6
6
  21: BinaryOperator 0x5637768e7440 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
`-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
([B18.19]) << [B18.20]
  22: UnaryOperator 0x5637768e7488 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768e7468 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768e7440 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
~([B18.21])
  23: IntegerLiteral 0x5637768e74c8 <./lopcodes.h:80:67> 'int' 0
0
  24: BinaryOperator 0x5637768e74e8 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768e74a8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768e7488 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768e7468 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768e7440 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768e74c8 <line:80:67> 'int' 0
([B18.22]) << [B18.23]
  25: BinaryOperator 0x5637768e7530 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768e7368 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768e7340 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768e7328 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768e72e8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768e72c8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768e72a0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
|   `-IntegerLiteral 0x5637768e7308 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768e7510 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768e74e8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768e74a8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768e7488 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768e7468 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768e7440 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768e74c8 <line:80:67> 'int' 0
([B18.16]) & ([B18.24])
  26: CStyleCastExpr 0x5637768e75b8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5637768e7598 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768e7530 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768e7368 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768e7340 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768e7328 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768e72e8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768e72c8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768e72a0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
    |   `-IntegerLiteral 0x5637768e7308 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5637768e7510 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768e74e8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768e74a8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768e7488 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768e7468 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768e7440 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768e74c8 <line:80:67> 'int' 0
(OpCode)([B18.25]) (CStyleCastExpr, IntegralCast, OpCode)
  27: ImplicitCastExpr 0x5637768e7648 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768e7600 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5637768e75e0 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5637768e75b8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5637768e7598 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5637768e7530 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5637768e7368 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5637768e7340 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5637768e7328 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5637768e72e8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-ParenExpr 0x5637768e72c8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
          |   |     `-ArraySubscriptExpr 0x5637768e72a0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
          |   |       |-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
          |   |       | `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
          |   |       |   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
          |   |       |     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
          |   |       |       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
          |   |       |         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
          |   |       |           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
          |   |       `-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
          |   |         `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          |   |           `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
          |   |             `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
          |   |               `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
          |   |                 `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
          |   |                   `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
          |   `-IntegerLiteral 0x5637768e7308 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5637768e7510 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5637768e74e8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5637768e74a8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5637768e7488 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5637768e7468 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5637768e7440 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5637768e74c8 <line:80:67> 'int' 0
(([B18.26])) (ImplicitCastExpr, IntegralCast, unsigned int)
  28: DeclRefExpr 0x5637768e7620 <lcode.c:755:65> 'int' EnumConstant 0x56377686bac8 'OP_CONCAT' 'int'
OP_CONCAT
  29: ImplicitCastExpr 0x5637768e7660 <lcode.c:755:65> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768e7620 <col:65> 'int' EnumConstant 0x56377686bac8 'OP_CONCAT' 'int'
[B18.28] (ImplicitCastExpr, IntegralCast, unsigned int)
  30: BinaryOperator 0x5637768e7678 <./lopcodes.h:80:23, lcode.c:755:65> 'int' '=='
|-ImplicitCastExpr 0x5637768e7648 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x5637768e7600 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x5637768e75e0 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x5637768e75b8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x5637768e7598 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5637768e7530 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5637768e7368 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5637768e7340 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5637768e7328 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5637768e72e8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-ParenExpr 0x5637768e72c8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|           |   |     `-ArraySubscriptExpr 0x5637768e72a0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|           |   |       |-ImplicitCastExpr 0x5637768e7248 <col:24, col:33> 'Instruction *' <LValueToRValue>
|           |   |       | `-MemberExpr 0x5637768e7108 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|           |   |       |   `-ImplicitCastExpr 0x5637768e70f0 <col:24, col:30> 'Proto *' <LValueToRValue>
|           |   |       |     `-MemberExpr 0x5637768e70b8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|           |   |       |       `-ImplicitCastExpr 0x5637768e70a0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|           |   |       |         `-ParenExpr 0x5637768e7080 <col:24, col:27> 'FuncState *' lvalue
|           |   |       |           `-DeclRefExpr 0x5637768e7058 <lcode.c:755:53> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|           |   |       `-ImplicitCastExpr 0x5637768e7260 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|           |   |         `-MemberExpr 0x5637768e7210 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           |   |           `-MemberExpr 0x5637768e71d8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           |   |             `-MemberExpr 0x5637768e71a0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|           |   |               `-ImplicitCastExpr 0x5637768e7188 <col:38, col:40> 'expdesc *' <LValueToRValue>
|           |   |                 `-ParenExpr 0x5637768e7168 <col:38, col:40> 'expdesc *' lvalue
|           |   |                   `-DeclRefExpr 0x5637768e7140 <lcode.c:755:57> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
|           |   `-IntegerLiteral 0x5637768e7308 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x5637768e7510 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5637768e74e8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5637768e74a8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5637768e7488 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5637768e7468 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5637768e7440 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5637768e7400 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5637768e73e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5637768e73b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5637768e7388 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5637768e7420 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x5637768e74c8 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x5637768e7660 <lcode.c:755:65> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768e7620 <col:65> 'int' EnumConstant 0x56377686bac8 'OP_CONCAT' 'int'
[B18.27] == [B18.29]
   T: if [B19.15] && [B18.30]
   Preds (1): B19
   Succs (2): B17 B16

 [B19]
  case OPR_CONCAT:
   1: DeclRefExpr 0x5637768e6e50 <lcode.c:754:7> 'void (FuncState *, expdesc *)' Function 0x5637768d3920 'luaK_exp2val' 'void (FuncState *, expdesc *)'
luaK_exp2val
   2: ImplicitCastExpr 0x5637768e6ec8 <lcode.c:754:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e6e50 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768d3920 'luaK_exp2val' 'void (FuncState *, expdesc *)'
[B19.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e6e78 <lcode.c:754:20> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e6f18 <lcode.c:754:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6e78 <col:20> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B19.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e6ea0 <lcode.c:754:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
   6: ImplicitCastExpr 0x5637768e6f30 <lcode.c:754:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6ea0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B19.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e6ee0 <lcode.c:754:7, col:26> 'void'
|-ImplicitCastExpr 0x5637768e6ec8 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e6e50 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768d3920 'luaK_exp2val' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e6f18 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e6e78 <col:20> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e6f30 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6ea0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B19.2]([B19.4], [B19.6])
   8: DeclRefExpr 0x5637768e6f48 <lcode.c:755:11> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
   9: ImplicitCastExpr 0x5637768e6f70 <lcode.c:755:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6f48 <col:11> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B19.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: MemberExpr 0x5637768e6f88 <lcode.c:755:11, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768e6f70 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6f48 <col:11> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B19.9]->k
  11: ImplicitCastExpr 0x5637768e6fe8 <lcode.c:755:11, col:15> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768e6f88 <col:11, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768e6f70 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e6f48 <col:11> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B19.10] (ImplicitCastExpr, LValueToRValue, expkind)
  12: ImplicitCastExpr 0x5637768e7000 <lcode.c:755:11, col:15> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e6fe8 <col:11, col:15> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768e6f88 <col:11, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768e6f70 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e6f48 <col:11> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B19.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: DeclRefExpr 0x5637768e6fc0 <lcode.c:755:20> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
VRELOCABLE
  14: ImplicitCastExpr 0x5637768e7018 <lcode.c:755:20> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768e6fc0 <col:20> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B19.13] (ImplicitCastExpr, IntegralCast, unsigned int)
  15: BinaryOperator 0x5637768e7030 <lcode.c:755:11, col:20> 'int' '=='
|-ImplicitCastExpr 0x5637768e7000 <col:11, col:15> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768e6fe8 <col:11, col:15> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768e6f88 <col:11, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768e6f70 <col:11> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768e6f48 <col:11> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
`-ImplicitCastExpr 0x5637768e7018 <col:20> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768e6fc0 <col:20> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B19.12] == [B19.14]
   T: [B19.15] && ...
   Preds (1): B1
   Succs (2): B18 B16

 [B20]
  case OPR_OR:
   1: IntegerLiteral 0x5637768e6958 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768e6988 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768e6958 <col:31> 'int' 0
(void)[B20.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5637768e69d0 <lcode.c:748:7> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
   4: ImplicitCastExpr 0x5637768e6a48 <lcode.c:748:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e69d0 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B20.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   5: DeclRefExpr 0x5637768e69f8 <lcode.c:748:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768e6a98 <lcode.c:748:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e69f8 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B20.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: DeclRefExpr 0x5637768e6a20 <lcode.c:748:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
   8: ImplicitCastExpr 0x5637768e6ab0 <lcode.c:748:30> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6a20 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: CallExpr 0x5637768e6a60 <lcode.c:748:7, col:32> 'void'
|-ImplicitCastExpr 0x5637768e6a48 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e69d0 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e6a98 <col:26> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e69f8 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e6ab0 <col:30> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6a20 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.4]([B20.6], [B20.8])
  10: DeclRefExpr 0x5637768e6ac8 <lcode.c:749:7> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
  11: ImplicitCastExpr 0x5637768e6c28 <lcode.c:749:7> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e6ac8 <col:7> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
[B20.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
  12: DeclRefExpr 0x5637768e6af0 <lcode.c:749:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
  13: ImplicitCastExpr 0x5637768e6c80 <lcode.c:749:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6af0 <col:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B20.12] (ImplicitCastExpr, LValueToRValue, FuncState *)
  14: DeclRefExpr 0x5637768e6b18 <lcode.c:749:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  15: ImplicitCastExpr 0x5637768e6b40 <lcode.c:749:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6b18 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: MemberExpr 0x5637768e6b58 <lcode.c:749:24, col:28> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768e6b40 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6b18 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.15]->t
  17: UnaryOperator 0x5637768e6b90 <lcode.c:749:23, col:28> 'int *' prefix '&'
`-MemberExpr 0x5637768e6b58 <col:24, col:28> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768e6b40 <col:24> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e6b18 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
&[B20.16]
  18: DeclRefExpr 0x5637768e6bb0 <lcode.c:749:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  19: ImplicitCastExpr 0x5637768e6bd8 <lcode.c:749:31> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6bb0 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B20.18] (ImplicitCastExpr, LValueToRValue, expdesc *)
  20: MemberExpr 0x5637768e6bf0 <lcode.c:749:31, col:35> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768e6bd8 <col:31> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6bb0 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B20.19]->t
  21: ImplicitCastExpr 0x5637768e6c98 <lcode.c:749:31, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x5637768e6bf0 <col:31, col:35> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768e6bd8 <col:31> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e6bb0 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B20.20] (ImplicitCastExpr, LValueToRValue, int)
  22: CallExpr 0x5637768e6c40 <lcode.c:749:7, col:36> 'void'
|-ImplicitCastExpr 0x5637768e6c28 <col:7> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e6ac8 <col:7> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x5637768e6c80 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e6af0 <col:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-UnaryOperator 0x5637768e6b90 <col:23, col:28> 'int *' prefix '&'
| `-MemberExpr 0x5637768e6b58 <col:24, col:28> 'int' lvalue ->t 0x56377687d890
|   `-ImplicitCastExpr 0x5637768e6b40 <col:24> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768e6b18 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
`-ImplicitCastExpr 0x5637768e6c98 <col:31, col:35> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768e6bf0 <col:31, col:35> 'int' lvalue ->t 0x56377687d890
    `-ImplicitCastExpr 0x5637768e6bd8 <col:31> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e6bb0 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B20.11]([B20.13], [B20.17], [B20.21])
  23: DeclRefExpr 0x5637768e6d10 <lcode.c:750:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  24: ImplicitCastExpr 0x5637768e6d38 <lcode.c:750:14> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6d10 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.23] (ImplicitCastExpr, LValueToRValue, expdesc *)
  25: UnaryOperator 0x5637768e6d50 <lcode.c:750:13, col:14> 'expdesc':'struct expdesc' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768e6d38 <col:14> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6d10 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
*[B20.24]
  26: ImplicitCastExpr 0x5637768e6d70 <lcode.c:750:13, col:14> 'expdesc':'struct expdesc' <LValueToRValue>
`-UnaryOperator 0x5637768e6d50 <col:13, col:14> 'expdesc':'struct expdesc' lvalue prefix '*'
  `-ImplicitCastExpr 0x5637768e6d38 <col:14> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e6d10 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.25] (ImplicitCastExpr, LValueToRValue, expdesc)
  27: DeclRefExpr 0x5637768e6cb0 <lcode.c:750:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  28: ImplicitCastExpr 0x5637768e6cd8 <lcode.c:750:8> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6cb0 <col:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B20.27] (ImplicitCastExpr, LValueToRValue, expdesc *)
  29: UnaryOperator 0x5637768e6cf0 <lcode.c:750:7, col:8> 'expdesc':'struct expdesc' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768e6cd8 <col:8> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6cb0 <col:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
*[B20.28]
  30: BinaryOperator 0x5637768e6d88 <lcode.c:750:7, col:14> 'expdesc':'struct expdesc' '='
|-UnaryOperator 0x5637768e6cf0 <col:7, col:8> 'expdesc':'struct expdesc' lvalue prefix '*'
| `-ImplicitCastExpr 0x5637768e6cd8 <col:8> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e6cb0 <col:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e6d70 <col:13, col:14> 'expdesc':'struct expdesc' <LValueToRValue>
  `-UnaryOperator 0x5637768e6d50 <col:13, col:14> 'expdesc':'struct expdesc' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768e6d38 <col:14> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e6d10 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B20.29] = [B20.26]
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B21]
  case OPR_AND:
   1: IntegerLiteral 0x5637768e6460 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768e6490 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768e6460 <col:31> 'int' 0
(void)[B21.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5637768e64d8 <lcode.c:741:7> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
   4: ImplicitCastExpr 0x5637768e6550 <lcode.c:741:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e64d8 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B21.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   5: DeclRefExpr 0x5637768e6500 <lcode.c:741:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768e65a0 <lcode.c:741:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6500 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B21.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: DeclRefExpr 0x5637768e6528 <lcode.c:741:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
   8: ImplicitCastExpr 0x5637768e65b8 <lcode.c:741:30> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6528 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: CallExpr 0x5637768e6568 <lcode.c:741:7, col:32> 'void'
|-ImplicitCastExpr 0x5637768e6550 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e64d8 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e65a0 <col:26> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e6500 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e65b8 <col:30> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6528 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.4]([B21.6], [B21.8])
  10: DeclRefExpr 0x5637768e65d0 <lcode.c:742:7> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
  11: ImplicitCastExpr 0x5637768e6730 <lcode.c:742:7> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e65d0 <col:7> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
[B21.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
  12: DeclRefExpr 0x5637768e65f8 <lcode.c:742:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
fs
  13: ImplicitCastExpr 0x5637768e6788 <lcode.c:742:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e65f8 <col:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
[B21.12] (ImplicitCastExpr, LValueToRValue, FuncState *)
  14: DeclRefExpr 0x5637768e6620 <lcode.c:742:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  15: ImplicitCastExpr 0x5637768e6648 <lcode.c:742:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6620 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: MemberExpr 0x5637768e6660 <lcode.c:742:24, col:28> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768e6648 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6620 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.15]->f
  17: UnaryOperator 0x5637768e6698 <lcode.c:742:23, col:28> 'int *' prefix '&'
`-MemberExpr 0x5637768e6660 <col:24, col:28> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768e6648 <col:24> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e6620 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
&[B21.16]
  18: DeclRefExpr 0x5637768e66b8 <lcode.c:742:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  19: ImplicitCastExpr 0x5637768e66e0 <lcode.c:742:31> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e66b8 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B21.18] (ImplicitCastExpr, LValueToRValue, expdesc *)
  20: MemberExpr 0x5637768e66f8 <lcode.c:742:31, col:35> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768e66e0 <col:31> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e66b8 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B21.19]->f
  21: ImplicitCastExpr 0x5637768e67a0 <lcode.c:742:31, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x5637768e66f8 <col:31, col:35> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768e66e0 <col:31> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e66b8 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B21.20] (ImplicitCastExpr, LValueToRValue, int)
  22: CallExpr 0x5637768e6748 <lcode.c:742:7, col:36> 'void'
|-ImplicitCastExpr 0x5637768e6730 <col:7> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e65d0 <col:7> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x5637768e6788 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e65f8 <col:19> 'FuncState *' lvalue ParmVar 0x5637768e6080 'fs' 'FuncState *'
|-UnaryOperator 0x5637768e6698 <col:23, col:28> 'int *' prefix '&'
| `-MemberExpr 0x5637768e6660 <col:24, col:28> 'int' lvalue ->f 0x56377687d8f0
|   `-ImplicitCastExpr 0x5637768e6648 <col:24> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768e6620 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
`-ImplicitCastExpr 0x5637768e67a0 <col:31, col:35> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768e66f8 <col:31, col:35> 'int' lvalue ->f 0x56377687d8f0
    `-ImplicitCastExpr 0x5637768e66e0 <col:31> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e66b8 <col:31> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B21.11]([B21.13], [B21.17], [B21.21])
  23: DeclRefExpr 0x5637768e6818 <lcode.c:743:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
e2
  24: ImplicitCastExpr 0x5637768e6840 <lcode.c:743:14> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e6818 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.23] (ImplicitCastExpr, LValueToRValue, expdesc *)
  25: UnaryOperator 0x5637768e6858 <lcode.c:743:13, col:14> 'expdesc':'struct expdesc' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768e6840 <col:14> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e6818 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
*[B21.24]
  26: ImplicitCastExpr 0x5637768e6878 <lcode.c:743:13, col:14> 'expdesc':'struct expdesc' <LValueToRValue>
`-UnaryOperator 0x5637768e6858 <col:13, col:14> 'expdesc':'struct expdesc' lvalue prefix '*'
  `-ImplicitCastExpr 0x5637768e6840 <col:14> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e6818 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.25] (ImplicitCastExpr, LValueToRValue, expdesc)
  27: DeclRefExpr 0x5637768e67b8 <lcode.c:743:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
e1
  28: ImplicitCastExpr 0x5637768e67e0 <lcode.c:743:8> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e67b8 <col:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
[B21.27] (ImplicitCastExpr, LValueToRValue, expdesc *)
  29: UnaryOperator 0x5637768e67f8 <lcode.c:743:7, col:8> 'expdesc':'struct expdesc' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768e67e0 <col:8> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e67b8 <col:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
*[B21.28]
  30: BinaryOperator 0x5637768e6890 <lcode.c:743:7, col:14> 'expdesc':'struct expdesc' '='
|-UnaryOperator 0x5637768e67f8 <col:7, col:8> 'expdesc':'struct expdesc' lvalue prefix '*'
| `-ImplicitCastExpr 0x5637768e67e0 <col:8> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e67b8 <col:8> 'expdesc *' lvalue ParmVar 0x5637768e6160 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e6878 <col:13, col:14> 'expdesc':'struct expdesc' <LValueToRValue>
  `-UnaryOperator 0x5637768e6858 <col:13, col:14> 'expdesc':'struct expdesc' lvalue prefix '*'
    `-ImplicitCastExpr 0x5637768e6840 <col:14> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e6818 <col:14> 'expdesc *' lvalue ParmVar 0x5637768e61d0 'e2' 'expdesc *'
[B21.29] = [B21.26]
   T: break;
   Preds (1): B1
   Succs (1): B0

 [B0 (EXIT)]
   Preds (16): B2 B3 B4 B5 B6 B7 B8 B9
      B10 B11 B12 B13 B14 B15 B20 B21
