static BinOpr subexpr(LexState *ls, expdesc *v, unsigned int limit)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x558fa8f29c50 <lparser.c:851:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f29c98 <lparser.c:282:25, col:28> 'LexState *' <LValueToRValue>
`-ParenExpr 0x558fa8f29c78 <col:25, col:28> 'LexState *' lvalue
  `-DeclRefExpr 0x558fa8f29c50 <line:851:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
([B1.1]) (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f29cb0 <lparser.c:282:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8f29c98 <col:25, col:28> 'LexState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f29c78 <col:25, col:28> 'LexState *' lvalue
    `-DeclRefExpr 0x558fa8f29c50 <line:851:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B1.2]->L
   4: ImplicitCastExpr 0x558fa8f29ce8 <lparser.c:282:25, col:31> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8f29cb0 <col:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8f29c98 <col:25, col:28> 'LexState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f29c78 <col:25, col:28> 'LexState *' lvalue
      `-DeclRefExpr 0x558fa8f29c50 <line:851:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   5: MemberExpr 0x558fa8f29d00 <lparser.c:282:25, col:34> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
`-ImplicitCastExpr 0x558fa8f29ce8 <col:25, col:31> 'struct lua_State *' <LValueToRValue>
  `-MemberExpr 0x558fa8f29cb0 <col:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
    `-ImplicitCastExpr 0x558fa8f29c98 <col:25, col:28> 'LexState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f29c78 <col:25, col:28> 'LexState *' lvalue
        `-DeclRefExpr 0x558fa8f29c50 <line:851:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B1.4]->nCcalls
   6: UnaryOperator 0x558fa8f29d38 <lparser.c:282:25, col:41> 'unsigned short' postfix '--'
`-MemberExpr 0x558fa8f29d00 <col:25, col:34> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
  `-ImplicitCastExpr 0x558fa8f29ce8 <col:25, col:31> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x558fa8f29cb0 <col:25, col:31> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
      `-ImplicitCastExpr 0x558fa8f29c98 <col:25, col:28> 'LexState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f29c78 <col:25, col:28> 'LexState *' lvalue
          `-DeclRefExpr 0x558fa8f29c50 <line:851:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B1.5]--
   7: DeclRefExpr 0x558fa8f29d78 <lparser.c:852:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
   8: ImplicitCastExpr 0x558fa8f29da0 <lparser.c:852:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29d78 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B1.7] (ImplicitCastExpr, LValueToRValue, BinOpr)
   9: ReturnStmt 0x558fa8f29db8 <lparser.c:852:3, col:10>
`-ImplicitCastExpr 0x558fa8f29da0 <col:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f29d78 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
return [B1.8];
   Preds (2): B4 B5
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B5

 [B3]
   1: DeclStmt 0x558fa8f291f8 <lparser.c:842:5, col:15>col:13
`-VarDecl 0x558fa8f29198 <col:5, col:13> col:13 used v2 'expdesc':'struct expdesc'
expdesc v2;
   2: DeclStmt 0x558fa8f29280 <lparser.c:843:5, col:18>col:12
`-VarDecl 0x558fa8f29220 <col:5, col:12> col:12 used nextop 'BinOpr':'enum BinOpr'
BinOpr nextop;
   3: DeclRefExpr 0x558fa8f29298 <lparser.c:844:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
   4: ImplicitCastExpr 0x558fa8f292e8 <lparser.c:844:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f29298 <col:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B3.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   5: DeclRefExpr 0x558fa8f292c0 <lparser.c:844:15> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x558fa8f29330 <lparser.c:844:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f292c0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: CallExpr 0x558fa8f29300 <lparser.c:844:5, col:17> 'void'
|-ImplicitCastExpr 0x558fa8f292e8 <col:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f29298 <col:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f29330 <col:15> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f292c0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.4]([B3.6])
   8: DeclRefExpr 0x558fa8f29348 <lparser.c:845:5> 'void (FuncState *, BinOpr, expdesc *)' Function 0x558fa8ebe9d0 'luaK_infix' 'void (FuncState *, BinOpr, expdesc *)'
luaK_infix
   9: ImplicitCastExpr 0x558fa8f29498 <lparser.c:845:5> 'void (*)(FuncState *, BinOpr, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f29348 <col:5> 'void (FuncState *, BinOpr, expdesc *)' Function 0x558fa8ebe9d0 'luaK_infix' 'void (FuncState *, BinOpr, expdesc *)'
[B3.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BinOpr, expdesc *))
  10: DeclRefExpr 0x558fa8f29370 <lparser.c:845:16> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8f29398 <lparser.c:845:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29370 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x558fa8f293b0 <lparser.c:845:16, col:20> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f29398 <col:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f29370 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.11]->fs
  13: ImplicitCastExpr 0x558fa8f294f0 <lparser.c:845:16, col:20> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f293b0 <col:16, col:20> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f29398 <col:16> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f29370 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.12] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  14: DeclRefExpr 0x558fa8f293e8 <lparser.c:845:24> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
  15: ImplicitCastExpr 0x558fa8f29508 <lparser.c:845:24> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f293e8 <col:24> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.14] (ImplicitCastExpr, LValueToRValue, BinOpr)
  16: DeclRefExpr 0x558fa8f29410 <lparser.c:845:28> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
v
  17: ImplicitCastExpr 0x558fa8f29520 <lparser.c:845:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29410 <col:28> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B3.16] (ImplicitCastExpr, LValueToRValue, expdesc *)
  18: CallExpr 0x558fa8f294b0 <lparser.c:845:5, col:29> 'void'
|-ImplicitCastExpr 0x558fa8f29498 <col:5> 'void (*)(FuncState *, BinOpr, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f29348 <col:5> 'void (FuncState *, BinOpr, expdesc *)' Function 0x558fa8ebe9d0 'luaK_infix' 'void (FuncState *, BinOpr, expdesc *)'
|-ImplicitCastExpr 0x558fa8f294f0 <col:16, col:20> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f293b0 <col:16, col:20> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f29398 <col:16> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f29370 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f29508 <col:24> 'BinOpr':'enum BinOpr' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f293e8 <col:24> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
`-ImplicitCastExpr 0x558fa8f29520 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f29410 <col:28> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B3.9]([B3.13], [B3.15], [B3.17])
  19: DeclRefExpr 0x558fa8f29560 <lparser.c:847:14> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
subexpr
  20: ImplicitCastExpr 0x558fa8f296d8 <lparser.c:847:14> 'BinOpr (*)(LexState *, expdesc *, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f29560 <col:14> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
[B3.19] (ImplicitCastExpr, FunctionToPointerDecay, BinOpr (*)(LexState *, expdesc *, unsigned int))
  21: DeclRefExpr 0x558fa8f29588 <lparser.c:847:22> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
  22: ImplicitCastExpr 0x558fa8f29730 <lparser.c:847:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29588 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.21] (ImplicitCastExpr, LValueToRValue, LexState *)
  23: DeclRefExpr 0x558fa8f295b0 <lparser.c:847:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
v2
  24: UnaryOperator 0x558fa8f295d8 <lparser.c:847:26, col:27> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f295b0 <col:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
&[B3.23]
  25: DeclRefExpr 0x558fa8f295f8 <lparser.c:847:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
priority
  26: ImplicitCastExpr 0x558fa8f29648 <lparser.c:847:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
`-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
[B3.25] (ImplicitCastExpr, ArrayToPointerDecay, const struct (anonymous struct at lparser.c:810:14) *)
  27: DeclRefExpr 0x558fa8f29620 <lparser.c:847:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
  28: ImplicitCastExpr 0x558fa8f29660 <lparser.c:847:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.27] (ImplicitCastExpr, LValueToRValue, BinOpr)
  29: ArraySubscriptExpr 0x558fa8f29678 <lparser.c:847:31, col:42> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
|-ImplicitCastExpr 0x558fa8f29648 <col:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
`-ImplicitCastExpr 0x558fa8f29660 <col:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.26][[B3.28]]
  30: MemberExpr 0x558fa8f296a0 <lparser.c:847:31, col:44> 'const lu_byte':'const unsigned char' lvalue .right 0x558fa8f26818
`-ArraySubscriptExpr 0x558fa8f29678 <col:31, col:42> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
  |-ImplicitCastExpr 0x558fa8f29648 <col:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
  `-ImplicitCastExpr 0x558fa8f29660 <col:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.29].right
  31: ImplicitCastExpr 0x558fa8f29748 <lparser.c:847:31, col:44> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f296a0 <col:31, col:44> 'const lu_byte':'const unsigned char' lvalue .right 0x558fa8f26818
  `-ArraySubscriptExpr 0x558fa8f29678 <col:31, col:42> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
    |-ImplicitCastExpr 0x558fa8f29648 <col:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
    `-ImplicitCastExpr 0x558fa8f29660 <col:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.30] (ImplicitCastExpr, LValueToRValue, lu_byte)
  32: ImplicitCastExpr 0x558fa8f29760 <lparser.c:847:31, col:44> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f29748 <col:31, col:44> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f296a0 <col:31, col:44> 'const lu_byte':'const unsigned char' lvalue .right 0x558fa8f26818
    `-ArraySubscriptExpr 0x558fa8f29678 <col:31, col:42> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
      |-ImplicitCastExpr 0x558fa8f29648 <col:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
      | `-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
      `-ImplicitCastExpr 0x558fa8f29660 <col:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.31] (ImplicitCastExpr, IntegralCast, unsigned int)
  33: CallExpr 0x558fa8f296f0 <lparser.c:847:14, col:49> 'BinOpr':'enum BinOpr'
|-ImplicitCastExpr 0x558fa8f296d8 <col:14> 'BinOpr (*)(LexState *, expdesc *, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f29560 <col:14> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
|-ImplicitCastExpr 0x558fa8f29730 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f29588 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f295d8 <col:26, col:27> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f295b0 <col:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f29760 <col:31, col:44> 'unsigned int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f29748 <col:31, col:44> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f296a0 <col:31, col:44> 'const lu_byte':'const unsigned char' lvalue .right 0x558fa8f26818
      `-ArraySubscriptExpr 0x558fa8f29678 <col:31, col:42> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
        |-ImplicitCastExpr 0x558fa8f29648 <col:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
        | `-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
        `-ImplicitCastExpr 0x558fa8f29660 <col:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.20]([B3.22], [B3.24], [B3.32])
  34: DeclRefExpr 0x558fa8f29538 <lparser.c:847:5> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f29220 'nextop' 'BinOpr':'enum BinOpr'
nextop
  35: BinaryOperator 0x558fa8f29778 <lparser.c:847:5, col:49> 'BinOpr':'enum BinOpr' '='
|-DeclRefExpr 0x558fa8f29538 <col:5> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f29220 'nextop' 'BinOpr':'enum BinOpr'
`-CallExpr 0x558fa8f296f0 <col:14, col:49> 'BinOpr':'enum BinOpr'
  |-ImplicitCastExpr 0x558fa8f296d8 <col:14> 'BinOpr (*)(LexState *, expdesc *, unsigned int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f29560 <col:14> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
  |-ImplicitCastExpr 0x558fa8f29730 <col:22> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f29588 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
  |-UnaryOperator 0x558fa8f295d8 <col:26, col:27> 'expdesc *' prefix '&'
  | `-DeclRefExpr 0x558fa8f295b0 <col:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
  `-ImplicitCastExpr 0x558fa8f29760 <col:31, col:44> 'unsigned int' <IntegralCast>
    `-ImplicitCastExpr 0x558fa8f29748 <col:31, col:44> 'lu_byte':'unsigned char' <LValueToRValue>
      `-MemberExpr 0x558fa8f296a0 <col:31, col:44> 'const lu_byte':'const unsigned char' lvalue .right 0x558fa8f26818
        `-ArraySubscriptExpr 0x558fa8f29678 <col:31, col:42> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
          |-ImplicitCastExpr 0x558fa8f29648 <col:31> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
          | `-DeclRefExpr 0x558fa8f295f8 <col:31> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
          `-ImplicitCastExpr 0x558fa8f29660 <col:40> 'BinOpr':'enum BinOpr' <LValueToRValue>
            `-DeclRefExpr 0x558fa8f29620 <col:40> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.34] = [B3.33]
  36: DeclRefExpr 0x558fa8f297a0 <lparser.c:848:5> 'void (FuncState *, BinOpr, expdesc *, expdesc *)' Function 0x558fa8ebeda0 'luaK_posfix' 'void (FuncState *, BinOpr, expdesc *, expdesc *)'
luaK_posfix
  37: ImplicitCastExpr 0x558fa8f29ab0 <lparser.c:848:5> 'void (*)(FuncState *, BinOpr, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f297a0 <col:5> 'void (FuncState *, BinOpr, expdesc *, expdesc *)' Function 0x558fa8ebeda0 'luaK_posfix' 'void (FuncState *, BinOpr, expdesc *, expdesc *)'
[B3.36] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BinOpr, expdesc *, expdesc *))
  38: DeclRefExpr 0x558fa8f297c8 <lparser.c:848:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
  39: ImplicitCastExpr 0x558fa8f297f0 <lparser.c:848:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f297c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.38] (ImplicitCastExpr, LValueToRValue, LexState *)
  40: MemberExpr 0x558fa8f29808 <lparser.c:848:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f297f0 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f297c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.39]->fs
  41: ImplicitCastExpr 0x558fa8f29b10 <lparser.c:848:17, col:21> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f29808 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f297f0 <col:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f297c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B3.40] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  42: DeclRefExpr 0x558fa8f29840 <lparser.c:848:25> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
  43: ImplicitCastExpr 0x558fa8f29b28 <lparser.c:848:25> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29840 <col:25> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B3.42] (ImplicitCastExpr, LValueToRValue, BinOpr)
  44: DeclRefExpr 0x558fa8f29868 <lparser.c:848:29> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
v
  45: ImplicitCastExpr 0x558fa8f29b40 <lparser.c:848:29> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29868 <col:29> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B3.44] (ImplicitCastExpr, LValueToRValue, expdesc *)
  46: DeclRefExpr 0x558fa8f29890 <lparser.c:848:33> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
v2
  47: UnaryOperator 0x558fa8f298b8 <lparser.c:848:32, col:33> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f29890 <col:33> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
&[B3.46]
  48: CallExpr 0x558fa8f29ac8 <lparser.c:848:5, col:35> 'void'
|-ImplicitCastExpr 0x558fa8f29ab0 <col:5> 'void (*)(FuncState *, BinOpr, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f297a0 <col:5> 'void (FuncState *, BinOpr, expdesc *, expdesc *)' Function 0x558fa8ebeda0 'luaK_posfix' 'void (FuncState *, BinOpr, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f29b10 <col:17, col:21> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f29808 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f297f0 <col:17> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f297c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f29b28 <col:25> 'BinOpr':'enum BinOpr' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f29840 <col:25> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
|-ImplicitCastExpr 0x558fa8f29b40 <col:29> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f29868 <col:29> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
`-UnaryOperator 0x558fa8f298b8 <col:32, col:33> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f29890 <col:33> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f29198 'v2' 'expdesc':'struct expdesc'
[B3.37]([B3.41], [B3.43], [B3.45], [B3.47])
  49: DeclRefExpr 0x558fa8f29b80 <lparser.c:849:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f29220 'nextop' 'BinOpr':'enum BinOpr'
nextop
  50: ImplicitCastExpr 0x558fa8f29ba8 <lparser.c:849:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f29b80 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f29220 'nextop' 'BinOpr':'enum BinOpr'
[B3.49] (ImplicitCastExpr, LValueToRValue, BinOpr)
  51: DeclRefExpr 0x558fa8f29b58 <lparser.c:849:5> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
  52: BinaryOperator 0x558fa8f29bc0 <lparser.c:849:5, col:10> 'BinOpr':'enum BinOpr' '='
|-DeclRefExpr 0x558fa8f29b58 <col:5> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
`-ImplicitCastExpr 0x558fa8f29ba8 <col:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f29b80 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f29220 'nextop' 'BinOpr':'enum BinOpr'
[B3.51] = [B3.50]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x558fa8f28f90 <lparser.c:841:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
priority
   2: ImplicitCastExpr 0x558fa8f29038 <lparser.c:841:32> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
`-DeclRefExpr 0x558fa8f28f90 <col:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
[B4.1] (ImplicitCastExpr, ArrayToPointerDecay, const struct (anonymous struct at lparser.c:810:14) *)
   3: DeclRefExpr 0x558fa8f28fb8 <lparser.c:841:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
   4: ImplicitCastExpr 0x558fa8f29050 <lparser.c:841:41> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28fb8 <col:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B4.3] (ImplicitCastExpr, LValueToRValue, BinOpr)
   5: ArraySubscriptExpr 0x558fa8f29068 <lparser.c:841:32, col:43> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
|-ImplicitCastExpr 0x558fa8f29038 <col:32> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x558fa8f28f90 <col:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
`-ImplicitCastExpr 0x558fa8f29050 <col:41> 'BinOpr':'enum BinOpr' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28fb8 <col:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B4.2][[B4.4]]
   6: MemberExpr 0x558fa8f29090 <lparser.c:841:32, col:45> 'const lu_byte':'const unsigned char' lvalue .left 0x558fa8f267c0
`-ArraySubscriptExpr 0x558fa8f29068 <col:32, col:43> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
  |-ImplicitCastExpr 0x558fa8f29038 <col:32> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x558fa8f28f90 <col:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
  `-ImplicitCastExpr 0x558fa8f29050 <col:41> 'BinOpr':'enum BinOpr' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f28fb8 <col:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B4.5].left
   7: ImplicitCastExpr 0x558fa8f290f0 <lparser.c:841:32, col:45> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f29090 <col:32, col:45> 'const lu_byte':'const unsigned char' lvalue .left 0x558fa8f267c0
  `-ArraySubscriptExpr 0x558fa8f29068 <col:32, col:43> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
    |-ImplicitCastExpr 0x558fa8f29038 <col:32> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x558fa8f28f90 <col:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
    `-ImplicitCastExpr 0x558fa8f29050 <col:41> 'BinOpr':'enum BinOpr' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f28fb8 <col:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B4.6] (ImplicitCastExpr, LValueToRValue, lu_byte)
   8: ImplicitCastExpr 0x558fa8f29108 <lparser.c:841:32, col:45> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f290f0 <col:32, col:45> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f29090 <col:32, col:45> 'const lu_byte':'const unsigned char' lvalue .left 0x558fa8f267c0
    `-ArraySubscriptExpr 0x558fa8f29068 <col:32, col:43> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
      |-ImplicitCastExpr 0x558fa8f29038 <col:32> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
      | `-DeclRefExpr 0x558fa8f28f90 <col:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
      `-ImplicitCastExpr 0x558fa8f29050 <col:41> 'BinOpr':'enum BinOpr' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f28fb8 <col:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B4.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: DeclRefExpr 0x558fa8f290c8 <lparser.c:841:52> 'unsigned int' lvalue ParmVar 0x558fa8f28108 'limit' 'unsigned int'
limit
  10: ImplicitCastExpr 0x558fa8f29120 <lparser.c:841:52> 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f290c8 <col:52> 'unsigned int' lvalue ParmVar 0x558fa8f28108 'limit' 'unsigned int'
[B4.9] (ImplicitCastExpr, LValueToRValue, unsigned int)
  11: BinaryOperator 0x558fa8f29138 <lparser.c:841:32, col:52> 'int' '>'
|-ImplicitCastExpr 0x558fa8f29108 <col:32, col:45> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f290f0 <col:32, col:45> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f29090 <col:32, col:45> 'const lu_byte':'const unsigned char' lvalue .left 0x558fa8f267c0
|     `-ArraySubscriptExpr 0x558fa8f29068 <col:32, col:43> 'const struct (anonymous struct at lparser.c:810:14)':'const struct (anonymous at lparser.c:810:14)' lvalue
|       |-ImplicitCastExpr 0x558fa8f29038 <col:32> 'const struct (anonymous struct at lparser.c:810:14) *' <ArrayToPointerDecay>
|       | `-DeclRefExpr 0x558fa8f28f90 <col:32> 'const struct (anonymous struct at lparser.c:810:14) [15]' lvalue Var 0x558fa8f26918 'priority' 'const struct (anonymous struct at lparser.c:810:14) [15]'
|       `-ImplicitCastExpr 0x558fa8f29050 <col:41> 'BinOpr':'enum BinOpr' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f28fb8 <col:41> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
`-ImplicitCastExpr 0x558fa8f29120 <col:52> 'unsigned int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f290c8 <col:52> 'unsigned int' lvalue ParmVar 0x558fa8f28108 'limit' 'unsigned int'
[B4.8] > [B4.10]
   T: while [B5.6] && [B4.11]
   Preds (1): B5
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x558fa8f28ed0 <lparser.c:841:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
   2: ImplicitCastExpr 0x558fa8f28f20 <lparser.c:841:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28ed0 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B5.1] (ImplicitCastExpr, LValueToRValue, BinOpr)
   3: ImplicitCastExpr 0x558fa8f28f38 <lparser.c:841:10> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f28f20 <col:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28ed0 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
[B5.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x558fa8f28ef8 <lparser.c:841:16> 'int' EnumConstant 0x558fa8eb78c8 'OPR_NOBINOPR' 'int'
OPR_NOBINOPR
   5: ImplicitCastExpr 0x558fa8f28f50 <lparser.c:841:16> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f28ef8 <col:16> 'int' EnumConstant 0x558fa8eb78c8 'OPR_NOBINOPR' 'int'
[B5.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: BinaryOperator 0x558fa8f28f68 <lparser.c:841:10, col:16> 'int' '!='
|-ImplicitCastExpr 0x558fa8f28f38 <col:10> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f28f20 <col:10> 'BinOpr':'enum BinOpr' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f28ed0 <col:10> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
`-ImplicitCastExpr 0x558fa8f28f50 <col:16> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f28ef8 <col:16> 'int' EnumConstant 0x558fa8eb78c8 'OPR_NOBINOPR' 'int'
[B5.3] != [B5.5]
   T: [B5.6] && ...
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: DeclRefExpr 0x558fa8f28d18 <lparser.c:840:8> 'BinOpr (int)' Function 0x558fa8f25a80 'getbinopr' 'BinOpr (int)'
getbinopr
   2: ImplicitCastExpr 0x558fa8f28e48 <lparser.c:840:8> 'BinOpr (*)(int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f28d18 <col:8> 'BinOpr (int)' Function 0x558fa8f25a80 'getbinopr' 'BinOpr (int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, BinOpr (*)(int))
   3: DeclRefExpr 0x558fa8f28d40 <lparser.c:840:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f28d68 <lparser.c:840:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28d40 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f28d80 <lparser.c:840:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f28d68 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28d40 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B6.4]->t
   6: MemberExpr 0x558fa8f28db8 <lparser.c:840:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f28d80 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f28d68 <col:18> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f28d40 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B6.5].token
   7: ImplicitCastExpr 0x558fa8f28e90 <lparser.c:840:18, col:24> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f28db8 <col:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f28d80 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f28d68 <col:18> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f28d40 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B6.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CallExpr 0x558fa8f28e60 <lparser.c:840:8, col:29> 'BinOpr':'enum BinOpr'
|-ImplicitCastExpr 0x558fa8f28e48 <col:8> 'BinOpr (*)(int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f28d18 <col:8> 'BinOpr (int)' Function 0x558fa8f25a80 'getbinopr' 'BinOpr (int)'
`-ImplicitCastExpr 0x558fa8f28e90 <col:18, col:24> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f28db8 <col:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
    `-MemberExpr 0x558fa8f28d80 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
      `-ImplicitCastExpr 0x558fa8f28d68 <col:18> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f28d40 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B6.2]([B6.7])
   9: DeclRefExpr 0x558fa8f28cf0 <lparser.c:840:3> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
op
  10: BinaryOperator 0x558fa8f28ea8 <lparser.c:840:3, col:29> 'BinOpr':'enum BinOpr' '='
|-DeclRefExpr 0x558fa8f28cf0 <col:3> 'BinOpr':'enum BinOpr' lvalue Var 0x558fa8f28308 'op' 'BinOpr':'enum BinOpr'
`-CallExpr 0x558fa8f28e60 <col:8, col:29> 'BinOpr':'enum BinOpr'
  |-ImplicitCastExpr 0x558fa8f28e48 <col:8> 'BinOpr (*)(int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f28d18 <col:8> 'BinOpr (int)' Function 0x558fa8f25a80 'getbinopr' 'BinOpr (int)'
  `-ImplicitCastExpr 0x558fa8f28e90 <col:18, col:24> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f28db8 <col:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
      `-MemberExpr 0x558fa8f28d80 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
        `-ImplicitCastExpr 0x558fa8f28d68 <col:18> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f28d40 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B6.9] = [B6.8]
   Preds (2): B7 B8
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x558fa8f28bc0 <lparser.c:838:8> 'void (LexState *, expdesc *)' Function 0x558fa8f237a0 'simpleexp' 'void (LexState *, expdesc *)'
simpleexp
   2: ImplicitCastExpr 0x558fa8f28c38 <lparser.c:838:8> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f28bc0 <col:8> 'void (LexState *, expdesc *)' Function 0x558fa8f237a0 'simpleexp' 'void (LexState *, expdesc *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f28be8 <lparser.c:838:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f28c88 <lparser.c:838:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28be8 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f28c10 <lparser.c:838:22> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
v
   6: ImplicitCastExpr 0x558fa8f28ca0 <lparser.c:838:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28c10 <col:22> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B7.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x558fa8f28c50 <lparser.c:838:8, col:23> 'void'
|-ImplicitCastExpr 0x558fa8f28c38 <col:8> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f28bc0 <col:8> 'void (LexState *, expdesc *)' Function 0x558fa8f237a0 'simpleexp' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f28c88 <col:18> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f28be8 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f28ca0 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28c10 <col:22> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B7.2]([B7.4], [B7.6])
   Preds (1): B9
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x558fa8f28760 <lparser.c:834:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
   2: ImplicitCastExpr 0x558fa8f287b0 <lparser.c:834:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f28760 <col:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x558fa8f28788 <lparser.c:834:15> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f287f8 <lparser.c:834:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28788 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f287c8 <lparser.c:834:5, col:17> 'void'
|-ImplicitCastExpr 0x558fa8f287b0 <col:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f28760 <col:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f287f8 <col:15> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28788 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B8.2]([B8.4])
   6: DeclRefExpr 0x558fa8f28810 <lparser.c:835:5> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
subexpr
   7: ImplicitCastExpr 0x558fa8f28908 <lparser.c:835:5> 'BinOpr (*)(LexState *, expdesc *, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f28810 <col:5> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
[B8.6] (ImplicitCastExpr, FunctionToPointerDecay, BinOpr (*)(LexState *, expdesc *, unsigned int))
   8: DeclRefExpr 0x558fa8f28838 <lparser.c:835:13> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f28960 <lparser.c:835:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28838 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B8.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: DeclRefExpr 0x558fa8f28860 <lparser.c:835:17> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
v
  11: ImplicitCastExpr 0x558fa8f28978 <lparser.c:835:17> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28860 <col:17> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B8.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: IntegerLiteral 0x558fa8f28888 <lparser.c:821:24> 'int' 8
8
  13: ImplicitCastExpr 0x558fa8f28990 <lparser.c:821:24> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f28888 <col:24> 'int' 8
[B8.12] (ImplicitCastExpr, IntegralCast, unsigned int)
  14: CallExpr 0x558fa8f28920 <lparser.c:835:5, col:34> 'BinOpr':'enum BinOpr'
|-ImplicitCastExpr 0x558fa8f28908 <col:5> 'BinOpr (*)(LexState *, expdesc *, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f28810 <col:5> 'BinOpr (LexState *, expdesc *, unsigned int)' Function 0x558fa8f28240 'subexpr' 'BinOpr (LexState *, expdesc *, unsigned int)'
|-ImplicitCastExpr 0x558fa8f28960 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f28838 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f28978 <col:17> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f28860 <col:17> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
`-ImplicitCastExpr 0x558fa8f28990 <line:821:24> 'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f28888 <col:24> 'int' 8
[B8.7]([B8.9], [B8.11], [B8.13])
  15: DeclRefExpr 0x558fa8f289a8 <lparser.c:836:5> 'void (FuncState *, UnOpr, expdesc *)' Function 0x558fa8ebe660 'luaK_prefix' 'void (FuncState *, UnOpr, expdesc *)'
luaK_prefix
  16: ImplicitCastExpr 0x558fa8f28af8 <lparser.c:836:5> 'void (*)(FuncState *, UnOpr, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f289a8 <col:5> 'void (FuncState *, UnOpr, expdesc *)' Function 0x558fa8ebe660 'luaK_prefix' 'void (FuncState *, UnOpr, expdesc *)'
[B8.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, UnOpr, expdesc *))
  17: DeclRefExpr 0x558fa8f289d0 <lparser.c:836:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
  18: ImplicitCastExpr 0x558fa8f289f8 <lparser.c:836:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f289d0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B8.17] (ImplicitCastExpr, LValueToRValue, LexState *)
  19: MemberExpr 0x558fa8f28a10 <lparser.c:836:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f289f8 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f289d0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B8.18]->fs
  20: ImplicitCastExpr 0x558fa8f28b50 <lparser.c:836:17, col:21> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f28a10 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f289f8 <col:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f289d0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B8.19] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  21: DeclRefExpr 0x558fa8f28a48 <lparser.c:836:25> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
uop
  22: ImplicitCastExpr 0x558fa8f28b68 <lparser.c:836:25> 'UnOpr':'enum UnOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28a48 <col:25> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
[B8.21] (ImplicitCastExpr, LValueToRValue, UnOpr)
  23: DeclRefExpr 0x558fa8f28a70 <lparser.c:836:30> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
v
  24: ImplicitCastExpr 0x558fa8f28b80 <lparser.c:836:30> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28a70 <col:30> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B8.23] (ImplicitCastExpr, LValueToRValue, expdesc *)
  25: CallExpr 0x558fa8f28b10 <lparser.c:836:5, col:31> 'void'
|-ImplicitCastExpr 0x558fa8f28af8 <col:5> 'void (*)(FuncState *, UnOpr, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f289a8 <col:5> 'void (FuncState *, UnOpr, expdesc *)' Function 0x558fa8ebe660 'luaK_prefix' 'void (FuncState *, UnOpr, expdesc *)'
|-ImplicitCastExpr 0x558fa8f28b50 <col:17, col:21> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f28a10 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f289f8 <col:17> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f289d0 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f28b68 <col:25> 'UnOpr':'enum UnOpr' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f28a48 <col:25> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
`-ImplicitCastExpr 0x558fa8f28b80 <col:30> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28a70 <col:30> 'expdesc *' lvalue ParmVar 0x558fa8f28090 'v' 'expdesc *'
[B8.16]([B8.20], [B8.22], [B8.24])
   Preds (1): B9
   Succs (1): B6

 [B9]
   1: DeclStmt 0x558fa8f28368 <lparser.c:829:3, col:12>col:10
`-VarDecl 0x558fa8f28308 <col:3, col:10> col:10 used op 'BinOpr':'enum BinOpr'
BinOpr op;
   2: DeclStmt 0x558fa8f283f0 <lparser.c:830:3, col:12>col:9
`-VarDecl 0x558fa8f28390 <col:3, col:9> col:9 used uop 'UnOpr':'enum UnOpr'
UnOpr uop;
   3: DeclRefExpr 0x558fa8f28408 <lparser.c:831:3> 'void (LexState *)' Function 0x558fa8effe10 'enterlevel' 'void (LexState *)'
enterlevel
   4: ImplicitCastExpr 0x558fa8f28458 <lparser.c:831:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f28408 <col:3> 'void (LexState *)' Function 0x558fa8effe10 'enterlevel' 'void (LexState *)'
[B9.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   5: DeclRefExpr 0x558fa8f28430 <lparser.c:831:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x558fa8f284a0 <lparser.c:831:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28430 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: CallExpr 0x558fa8f28470 <lparser.c:831:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f28458 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f28408 <col:3> 'void (LexState *)' Function 0x558fa8effe10 'enterlevel' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f284a0 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28430 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.4]([B9.6])
   8: DeclRefExpr 0x558fa8f284e0 <lparser.c:832:9> 'UnOpr (int)' Function 0x558fa8f25580 'getunopr' 'UnOpr (int)'
getunopr
   9: ImplicitCastExpr 0x558fa8f28618 <lparser.c:832:9> 'UnOpr (*)(int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f284e0 <col:9> 'UnOpr (int)' Function 0x558fa8f25580 'getunopr' 'UnOpr (int)'
[B9.8] (ImplicitCastExpr, FunctionToPointerDecay, UnOpr (*)(int))
  10: DeclRefExpr 0x558fa8f28508 <lparser.c:832:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8f28530 <lparser.c:832:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f28508 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x558fa8f28548 <lparser.c:832:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f28530 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f28508 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.11]->t
  13: MemberExpr 0x558fa8f28580 <lparser.c:832:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f28548 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f28530 <col:18> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f28508 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.12].token
  14: ImplicitCastExpr 0x558fa8f28660 <lparser.c:832:18, col:24> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f28580 <col:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f28548 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f28530 <col:18> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f28508 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.13] (ImplicitCastExpr, LValueToRValue, int)
  15: CallExpr 0x558fa8f28630 <lparser.c:832:9, col:29> 'UnOpr':'enum UnOpr'
|-ImplicitCastExpr 0x558fa8f28618 <col:9> 'UnOpr (*)(int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f284e0 <col:9> 'UnOpr (int)' Function 0x558fa8f25580 'getunopr' 'UnOpr (int)'
`-ImplicitCastExpr 0x558fa8f28660 <col:18, col:24> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f28580 <col:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
    `-MemberExpr 0x558fa8f28548 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
      `-ImplicitCastExpr 0x558fa8f28530 <col:18> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f28508 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.9]([B9.14])
  16: DeclRefExpr 0x558fa8f284b8 <lparser.c:832:3> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
uop
  17: BinaryOperator 0x558fa8f28678 <lparser.c:832:3, col:29> 'UnOpr':'enum UnOpr' '='
|-DeclRefExpr 0x558fa8f284b8 <col:3> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
`-CallExpr 0x558fa8f28630 <col:9, col:29> 'UnOpr':'enum UnOpr'
  |-ImplicitCastExpr 0x558fa8f28618 <col:9> 'UnOpr (*)(int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f284e0 <col:9> 'UnOpr (int)' Function 0x558fa8f25580 'getunopr' 'UnOpr (int)'
  `-ImplicitCastExpr 0x558fa8f28660 <col:18, col:24> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f28580 <col:18, col:24> 'int' lvalue .token 0x558fa8e9ec88
      `-MemberExpr 0x558fa8f28548 <col:18, col:22> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
        `-ImplicitCastExpr 0x558fa8f28530 <col:18> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f28508 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f28020 'ls' 'LexState *'
[B9.16] = [B9.15]
  18: DeclRefExpr 0x558fa8f286a0 <lparser.c:833:7> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
uop
  19: ImplicitCastExpr 0x558fa8f286f0 <lparser.c:833:7> 'UnOpr':'enum UnOpr' <LValueToRValue>
`-DeclRefExpr 0x558fa8f286a0 <col:7> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
[B9.18] (ImplicitCastExpr, LValueToRValue, UnOpr)
  20: ImplicitCastExpr 0x558fa8f28708 <lparser.c:833:7> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f286f0 <col:7> 'UnOpr':'enum UnOpr' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f286a0 <col:7> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
[B9.19] (ImplicitCastExpr, IntegralCast, unsigned int)
  21: DeclRefExpr 0x558fa8f286c8 <lparser.c:833:14> 'int' EnumConstant 0x558fa8eb7b68 'OPR_NOUNOPR' 'int'
OPR_NOUNOPR
  22: ImplicitCastExpr 0x558fa8f28720 <lparser.c:833:14> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f286c8 <col:14> 'int' EnumConstant 0x558fa8eb7b68 'OPR_NOUNOPR' 'int'
[B9.21] (ImplicitCastExpr, IntegralCast, unsigned int)
  23: BinaryOperator 0x558fa8f28738 <lparser.c:833:7, col:14> 'int' '!='
|-ImplicitCastExpr 0x558fa8f28708 <col:7> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f286f0 <col:7> 'UnOpr':'enum UnOpr' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f286a0 <col:7> 'UnOpr':'enum UnOpr' lvalue Var 0x558fa8f28390 'uop' 'UnOpr':'enum UnOpr'
`-ImplicitCastExpr 0x558fa8f28720 <col:14> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f286c8 <col:14> 'int' EnumConstant 0x558fa8eb7b68 'OPR_NOUNOPR' 'int'
[B9.20] != [B9.22]
   T: if [B9.23]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (1): B1
