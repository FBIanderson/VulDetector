static void check_match(LexState *ls, int what, int who, int where)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x558fa8eee608 <lparser.c:109:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8eeea88 <lparser.c:109:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eee608 <col:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8eee630 <lparser.c:109:24> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8eeead8 <lparser.c:109:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee630 <col:24> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8eee658 <lparser.c:109:28> 'const char *(lua_State *, const char *, ...)' Function 0x558fa8e96058 'luaO_pushfstring' 'const char *(lua_State *, const char *, ...)'
luaO_pushfstring
   6: ImplicitCastExpr 0x558fa8eee9c0 <lparser.c:109:28> 'const char *(*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eee658 <col:28> 'const char *(lua_State *, const char *, ...)' Function 0x558fa8e96058 'luaO_pushfstring' 'const char *(lua_State *, const char *, ...)'
[B1.5] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(lua_State *, const char *, ...))
   7: DeclRefExpr 0x558fa8eee680 <lparser.c:109:45> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8eee6a8 <lparser.c:109:45> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee680 <col:45> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: MemberExpr 0x558fa8eee6c0 <lparser.c:109:45, col:49> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8eee6a8 <col:45> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee680 <col:45> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B1.8]->L
  10: ImplicitCastExpr 0x558fa8eeea28 <lparser.c:109:45, col:49> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8eee6c0 <col:45, col:49> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8eee6a8 <col:45> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eee680 <col:45> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
  11: StringLiteral 0x558fa8eee738 <./luaconf.h:201:19, lparser.c:110:51> 'char [41]' lvalue "'%s' expected (to close '%s' at line %d)"
"'%s' expected (to close '%s' at line %d)"
  12: ImplicitCastExpr 0x558fa8eeea40 <./luaconf.h:201:19, lparser.c:110:51> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8eee738 <./luaconf.h:201:19, lparser.c:110:51> 'char [41]' lvalue "'%s' expected (to close '%s' at line %d)"
[B1.11] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  13: ImplicitCastExpr 0x558fa8eeea58 <./luaconf.h:201:19, lparser.c:110:51> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8eeea40 <./luaconf.h:201:19, lparser.c:110:51> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8eee738 <./luaconf.h:201:19, lparser.c:110:51> 'char [41]' lvalue "'%s' expected (to close '%s' at line %d)"
[B1.12] (ImplicitCastExpr, BitCast, const char *)
  14: DeclRefExpr 0x558fa8eee7a8 <lparser.c:111:15> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
luaX_token2str
  15: ImplicitCastExpr 0x558fa8eee820 <lparser.c:111:15> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eee7a8 <col:15> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
[B1.14] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(LexState *, int))
  16: DeclRefExpr 0x558fa8eee7d0 <lparser.c:111:30> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
  17: ImplicitCastExpr 0x558fa8eee870 <lparser.c:111:30> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee7d0 <col:30> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B1.16] (ImplicitCastExpr, LValueToRValue, LexState *)
  18: DeclRefExpr 0x558fa8eee7f8 <lparser.c:111:34> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
what
  19: ImplicitCastExpr 0x558fa8eee888 <lparser.c:111:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee7f8 <col:34> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
[B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: CallExpr 0x558fa8eee838 <lparser.c:111:15, col:38> 'const char *'
|-ImplicitCastExpr 0x558fa8eee820 <col:15> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eee7a8 <col:15> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
|-ImplicitCastExpr 0x558fa8eee870 <col:30> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eee7d0 <col:30> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8eee888 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee7f8 <col:34> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
[B1.15]([B1.17], [B1.19])
  21: DeclRefExpr 0x558fa8eee8a0 <lparser.c:111:41> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
luaX_token2str
  22: ImplicitCastExpr 0x558fa8eee918 <lparser.c:111:41> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eee8a0 <col:41> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
[B1.21] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(LexState *, int))
  23: DeclRefExpr 0x558fa8eee8c8 <lparser.c:111:56> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
  24: ImplicitCastExpr 0x558fa8eee968 <lparser.c:111:56> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee8c8 <col:56> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B1.23] (ImplicitCastExpr, LValueToRValue, LexState *)
  25: DeclRefExpr 0x558fa8eee8f0 <lparser.c:111:60> 'int' lvalue ParmVar 0x558fa8eee028 'who' 'int'
who
  26: ImplicitCastExpr 0x558fa8eee980 <lparser.c:111:60> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee8f0 <col:60> 'int' lvalue ParmVar 0x558fa8eee028 'who' 'int'
[B1.25] (ImplicitCastExpr, LValueToRValue, int)
  27: CallExpr 0x558fa8eee930 <lparser.c:111:41, col:63> 'const char *'
|-ImplicitCastExpr 0x558fa8eee918 <col:41> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eee8a0 <col:41> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
|-ImplicitCastExpr 0x558fa8eee968 <col:56> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eee8c8 <col:56> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8eee980 <col:60> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee8f0 <col:60> 'int' lvalue ParmVar 0x558fa8eee028 'who' 'int'
[B1.22]([B1.24], [B1.26])
  28: DeclRefExpr 0x558fa8eee998 <lparser.c:111:66> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
where
  29: ImplicitCastExpr 0x558fa8eeea70 <lparser.c:111:66> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee998 <col:66> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
[B1.28] (ImplicitCastExpr, LValueToRValue, int)
  30: CallExpr 0x558fa8eee9d8 <lparser.c:109:28, line:111:71> 'const char *'
|-ImplicitCastExpr 0x558fa8eee9c0 <line:109:28> 'const char *(*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eee658 <col:28> 'const char *(lua_State *, const char *, ...)' Function 0x558fa8e96058 'luaO_pushfstring' 'const char *(lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x558fa8eeea28 <col:45, col:49> 'struct lua_State *' <LValueToRValue>
| `-MemberExpr 0x558fa8eee6c0 <col:45, col:49> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
|   `-ImplicitCastExpr 0x558fa8eee6a8 <col:45> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8eee680 <col:45> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8eeea58 <./luaconf.h:201:19, lparser.c:110:51> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8eeea40 <./luaconf.h:201:19, lparser.c:110:51> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8eee738 <./luaconf.h:201:19, lparser.c:110:51> 'char [41]' lvalue "'%s' expected (to close '%s' at line %d)"
|-CallExpr 0x558fa8eee838 <line:111:15, col:38> 'const char *'
| |-ImplicitCastExpr 0x558fa8eee820 <col:15> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8eee7a8 <col:15> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
| |-ImplicitCastExpr 0x558fa8eee870 <col:30> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8eee7d0 <col:30> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
| `-ImplicitCastExpr 0x558fa8eee888 <col:34> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8eee7f8 <col:34> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
|-CallExpr 0x558fa8eee930 <col:41, col:63> 'const char *'
| |-ImplicitCastExpr 0x558fa8eee918 <col:41> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8eee8a0 <col:41> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
| |-ImplicitCastExpr 0x558fa8eee968 <col:56> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8eee8c8 <col:56> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
| `-ImplicitCastExpr 0x558fa8eee980 <col:60> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8eee8f0 <col:60> 'int' lvalue ParmVar 0x558fa8eee028 'who' 'int'
`-ImplicitCastExpr 0x558fa8eeea70 <col:66> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee998 <col:66> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
[B1.6]([B1.10], [B1.13], [B1.20], [B1.27], [B1.29])
  31: CallExpr 0x558fa8eeeaa0 <lparser.c:109:7, line:111:72> 'void'
|-ImplicitCastExpr 0x558fa8eeea88 <line:109:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eee608 <col:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8eeead8 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eee630 <col:24> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
`-CallExpr 0x558fa8eee9d8 <col:28, line:111:71> 'const char *'
  |-ImplicitCastExpr 0x558fa8eee9c0 <line:109:28> 'const char *(*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8eee658 <col:28> 'const char *(lua_State *, const char *, ...)' Function 0x558fa8e96058 'luaO_pushfstring' 'const char *(lua_State *, const char *, ...)'
  |-ImplicitCastExpr 0x558fa8eeea28 <col:45, col:49> 'struct lua_State *' <LValueToRValue>
  | `-MemberExpr 0x558fa8eee6c0 <col:45, col:49> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  |   `-ImplicitCastExpr 0x558fa8eee6a8 <col:45> 'LexState *' <LValueToRValue>
  |     `-DeclRefExpr 0x558fa8eee680 <col:45> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
  |-ImplicitCastExpr 0x558fa8eeea58 <./luaconf.h:201:19, lparser.c:110:51> 'const char *' <BitCast>
  | `-ImplicitCastExpr 0x558fa8eeea40 <./luaconf.h:201:19, lparser.c:110:51> 'char *' <ArrayToPointerDecay>
  |   `-StringLiteral 0x558fa8eee738 <./luaconf.h:201:19, lparser.c:110:51> 'char [41]' lvalue "'%s' expected (to close '%s' at line %d)"
  |-CallExpr 0x558fa8eee838 <line:111:15, col:38> 'const char *'
  | |-ImplicitCastExpr 0x558fa8eee820 <col:15> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x558fa8eee7a8 <col:15> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
  | |-ImplicitCastExpr 0x558fa8eee870 <col:30> 'LexState *' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8eee7d0 <col:30> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
  | `-ImplicitCastExpr 0x558fa8eee888 <col:34> 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x558fa8eee7f8 <col:34> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
  |-CallExpr 0x558fa8eee930 <col:41, col:63> 'const char *'
  | |-ImplicitCastExpr 0x558fa8eee918 <col:41> 'const char *(*)(LexState *, int)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x558fa8eee8a0 <col:41> 'const char *(LexState *, int)' Function 0x558fa8ea1ed8 'luaX_token2str' 'const char *(LexState *, int)'
  | |-ImplicitCastExpr 0x558fa8eee968 <col:56> 'LexState *' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8eee8c8 <col:56> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
  | `-ImplicitCastExpr 0x558fa8eee980 <col:60> 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x558fa8eee8f0 <col:60> 'int' lvalue ParmVar 0x558fa8eee028 'who' 'int'
  `-ImplicitCastExpr 0x558fa8eeea70 <col:66> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eee998 <col:66> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
[B1.2]([B1.4], [B1.30])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8eee510 <lparser.c:107:7> 'void (LexState *, int)' Function 0x558fa8eead40 'error_expected' 'void (LexState *, int)'
error_expected
   2: ImplicitCastExpr 0x558fa8eee588 <lparser.c:107:7> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eee510 <col:7> 'void (LexState *, int)' Function 0x558fa8eead40 'error_expected' 'void (LexState *, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8eee538 <lparser.c:107:22> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8eee5d8 <lparser.c:107:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee538 <col:22> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8eee560 <lparser.c:107:26> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
what
   6: ImplicitCastExpr 0x558fa8eee5f0 <lparser.c:107:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee560 <col:26> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
[B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x558fa8eee5a0 <lparser.c:107:7, col:30> 'void'
|-ImplicitCastExpr 0x558fa8eee588 <col:7> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eee510 <col:7> 'void (LexState *, int)' Function 0x558fa8eead40 'error_expected' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8eee5d8 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eee538 <col:22> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8eee5f0 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee560 <col:26> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
[B2.2]([B2.4], [B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x558fa8eee418 <lparser.c:106:9> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
where
   2: ImplicitCastExpr 0x558fa8eee4b8 <lparser.c:106:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee418 <col:9> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x558fa8eee440 <lparser.c:106:18> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8eee468 <lparser.c:106:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee440 <col:18> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8eee480 <lparser.c:106:18, col:22> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8eee468 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee440 <col:18> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B3.4]->linenumber
   6: ImplicitCastExpr 0x558fa8eee4d0 <lparser.c:106:18, col:22> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8eee480 <col:18, col:22> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8eee468 <col:18> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eee440 <col:18> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x558fa8eee4e8 <lparser.c:106:9, col:22> 'int' '=='
|-ImplicitCastExpr 0x558fa8eee4b8 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eee418 <col:9> 'int' lvalue ParmVar 0x558fa8eee0a0 'where' 'int'
`-ImplicitCastExpr 0x558fa8eee4d0 <col:18, col:22> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8eee480 <col:18, col:22> 'int' lvalue ->linenumber 0x558fa8ea0308
    `-ImplicitCastExpr 0x558fa8eee468 <col:18> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8eee440 <col:18> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B3.2] == [B3.6]
   T: if [B3.7]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x558fa8eee2a0 <lparser.c:105:8> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   2: ImplicitCastExpr 0x558fa8eee378 <lparser.c:105:8> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8eee2a0 <col:8> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8eee2c8 <lparser.c:105:17> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8eee3c8 <lparser.c:105:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee2c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8eee2f0 <lparser.c:105:21> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
what
   6: ImplicitCastExpr 0x558fa8eee3e0 <lparser.c:105:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8eee2f0 <col:21> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x558fa8eee390 <lparser.c:105:8, col:25> 'int'
|-ImplicitCastExpr 0x558fa8eee378 <col:8> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8eee2a0 <col:8> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8eee3c8 <col:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8eee2c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8eee3e0 <col:21> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8eee2f0 <col:21> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
[B4.2]([B4.4], [B4.6])
   8: UnaryOperator 0x558fa8eee3f8 <lparser.c:105:7, col:25> 'int' prefix '!'
`-CallExpr 0x558fa8eee390 <col:8, col:25> 'int'
  |-ImplicitCastExpr 0x558fa8eee378 <col:8> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8eee2a0 <col:8> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
  |-ImplicitCastExpr 0x558fa8eee3c8 <col:17> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8eee2c8 <col:17> 'LexState *' lvalue ParmVar 0x558fa8eedf38 'ls' 'LexState *'
  `-ImplicitCastExpr 0x558fa8eee3e0 <col:21> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558fa8eee2f0 <col:21> 'int' lvalue ParmVar 0x558fa8eedfb0 'what' 'int'
![B4.7]
   T: if [B4.8]
   Preds (1): B5
   Succs (2): B3 B0

 [B0 (EXIT)]
   Preds (3): B1 B2 B4
