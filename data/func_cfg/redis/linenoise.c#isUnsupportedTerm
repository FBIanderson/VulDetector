static int isUnsupportedTerm()
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: IntegerLiteral 0x56555a493170 <linenoise.c:228:12> 'int' 0
0
   2: ReturnStmt 0x56555a493190 <linenoise.c:228:5, col:12>
`-IntegerLiteral 0x56555a493170 <col:12> 'int' 0
return [B1.1];
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x56555a492c68 <linenoise.c:226:38> 'int' lvalue Var 0x56555a492950 'j' 'int'
j
   2: UnaryOperator 0x56555a492c90 <linenoise.c:226:38, col:39> 'int' postfix '++'
`-DeclRefExpr 0x56555a492c68 <col:38> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B2.1]++
   Preds (1): B4
   Succs (1): B5

 [B3]
   1: IntegerLiteral 0x56555a4930c8 <linenoise.c:227:59> 'int' 1
1
   2: ReturnStmt 0x56555a4930e8 <linenoise.c:227:52, col:59>
`-IntegerLiteral 0x56555a4930c8 <col:59> 'int' 1
return [B3.1];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x56555a492ea0 <linenoise.c:227:14> 'int (const char *, const char *)' Function 0x56555a438160 'strcasecmp' 'int (const char *, const char *)'
strcasecmp
   2: ImplicitCastExpr 0x56555a492ff8 <linenoise.c:227:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a492ea0 <col:14> 'int (const char *, const char *)' Function 0x56555a438160 'strcasecmp' 'int (const char *, const char *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, const char *))
   3: DeclRefExpr 0x56555a492ec8 <linenoise.c:227:25> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
term
   4: ImplicitCastExpr 0x56555a493048 <linenoise.c:227:25> 'char *' <LValueToRValue>
`-DeclRefExpr 0x56555a492ec8 <col:25> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
[B4.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: ImplicitCastExpr 0x56555a493060 <linenoise.c:227:25> 'const char *' <BitCast>
`-ImplicitCastExpr 0x56555a493048 <col:25> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x56555a492ec8 <col:25> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
[B4.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x56555a492ef0 <linenoise.c:227:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
unsupported_term
   7: ImplicitCastExpr 0x56555a492f40 <linenoise.c:227:30> 'char **' <ArrayToPointerDecay>
`-DeclRefExpr 0x56555a492ef0 <col:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
[B4.6] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   8: DeclRefExpr 0x56555a492f18 <linenoise.c:227:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
j
   9: ImplicitCastExpr 0x56555a492f58 <linenoise.c:227:47> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a492f18 <col:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: ArraySubscriptExpr 0x56555a492f70 <linenoise.c:227:30, col:48> 'char *' lvalue
|-ImplicitCastExpr 0x56555a492f40 <col:30> 'char **' <ArrayToPointerDecay>
| `-DeclRefExpr 0x56555a492ef0 <col:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
`-ImplicitCastExpr 0x56555a492f58 <col:47> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a492f18 <col:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B4.7][[B4.9]]
  11: ImplicitCastExpr 0x56555a493078 <linenoise.c:227:30, col:48> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x56555a492f70 <col:30, col:48> 'char *' lvalue
  |-ImplicitCastExpr 0x56555a492f40 <col:30> 'char **' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x56555a492ef0 <col:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
  `-ImplicitCastExpr 0x56555a492f58 <col:47> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a492f18 <col:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B4.10] (ImplicitCastExpr, LValueToRValue, char *)
  12: ImplicitCastExpr 0x56555a493090 <linenoise.c:227:30, col:48> 'const char *' <BitCast>
`-ImplicitCastExpr 0x56555a493078 <col:30, col:48> 'char *' <LValueToRValue>
  `-ArraySubscriptExpr 0x56555a492f70 <col:30, col:48> 'char *' lvalue
    |-ImplicitCastExpr 0x56555a492f40 <col:30> 'char **' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x56555a492ef0 <col:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
    `-ImplicitCastExpr 0x56555a492f58 <col:47> 'int' <LValueToRValue>
      `-DeclRefExpr 0x56555a492f18 <col:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B4.11] (ImplicitCastExpr, BitCast, const char *)
  13: CallExpr 0x56555a493010 <linenoise.c:227:14, col:49> 'int'
|-ImplicitCastExpr 0x56555a492ff8 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a492ea0 <col:14> 'int (const char *, const char *)' Function 0x56555a438160 'strcasecmp' 'int (const char *, const char *)'
|-ImplicitCastExpr 0x56555a493060 <col:25> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x56555a493048 <col:25> 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x56555a492ec8 <col:25> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
`-ImplicitCastExpr 0x56555a493090 <col:30, col:48> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x56555a493078 <col:30, col:48> 'char *' <LValueToRValue>
    `-ArraySubscriptExpr 0x56555a492f70 <col:30, col:48> 'char *' lvalue
      |-ImplicitCastExpr 0x56555a492f40 <col:30> 'char **' <ArrayToPointerDecay>
      | `-DeclRefExpr 0x56555a492ef0 <col:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
      `-ImplicitCastExpr 0x56555a492f58 <col:47> 'int' <LValueToRValue>
        `-DeclRefExpr 0x56555a492f18 <col:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B4.2]([B4.5], [B4.12])
  14: UnaryOperator 0x56555a4930a8 <linenoise.c:227:13, col:49> 'int' prefix '!'
`-CallExpr 0x56555a493010 <col:14, col:49> 'int'
  |-ImplicitCastExpr 0x56555a492ff8 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x56555a492ea0 <col:14> 'int (const char *, const char *)' Function 0x56555a438160 'strcasecmp' 'int (const char *, const char *)'
  |-ImplicitCastExpr 0x56555a493060 <col:25> 'const char *' <BitCast>
  | `-ImplicitCastExpr 0x56555a493048 <col:25> 'char *' <LValueToRValue>
  |   `-DeclRefExpr 0x56555a492ec8 <col:25> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
  `-ImplicitCastExpr 0x56555a493090 <col:30, col:48> 'const char *' <BitCast>
    `-ImplicitCastExpr 0x56555a493078 <col:30, col:48> 'char *' <LValueToRValue>
      `-ArraySubscriptExpr 0x56555a492f70 <col:30, col:48> 'char *' lvalue
        |-ImplicitCastExpr 0x56555a492f40 <col:30> 'char **' <ArrayToPointerDecay>
        | `-DeclRefExpr 0x56555a492ef0 <col:30> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
        `-ImplicitCastExpr 0x56555a492f58 <col:47> 'int' <LValueToRValue>
          `-DeclRefExpr 0x56555a492f18 <col:47> 'int' lvalue Var 0x56555a492950 'j' 'int'
![B4.13]
   T: if [B4.14]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x56555a492ba8 <linenoise.c:226:17> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
unsupported_term
   2: ImplicitCastExpr 0x56555a492bf8 <linenoise.c:226:17> 'char **' <ArrayToPointerDecay>
`-DeclRefExpr 0x56555a492ba8 <col:17> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
[B5.1] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   3: DeclRefExpr 0x56555a492bd0 <linenoise.c:226:34> 'int' lvalue Var 0x56555a492950 'j' 'int'
j
   4: ImplicitCastExpr 0x56555a492c10 <linenoise.c:226:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a492bd0 <col:34> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x56555a492c28 <linenoise.c:226:17, col:35> 'char *' lvalue
|-ImplicitCastExpr 0x56555a492bf8 <col:17> 'char **' <ArrayToPointerDecay>
| `-DeclRefExpr 0x56555a492ba8 <col:17> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
`-ImplicitCastExpr 0x56555a492c10 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a492bd0 <col:34> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B5.2][[B5.4]]
   6: ImplicitCastExpr 0x56555a492c50 <linenoise.c:226:17, col:35> 'char *' <LValueToRValue>
`-ArraySubscriptExpr 0x56555a492c28 <col:17, col:35> 'char *' lvalue
  |-ImplicitCastExpr 0x56555a492bf8 <col:17> 'char **' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x56555a492ba8 <col:17> 'char *[4]' lvalue Var 0x56555a48d110 'unsupported_term' 'char *[4]'
  `-ImplicitCastExpr 0x56555a492c10 <col:34> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a492bd0 <col:34> 'int' lvalue Var 0x56555a492950 'j' 'int'
[B5.5] (ImplicitCastExpr, LValueToRValue, char *)
   T: for (...; [B5.6]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: IntegerLiteral 0x56555a492b60 <linenoise.c:226:14> 'int' 0
0
   2: DeclRefExpr 0x56555a492b38 <linenoise.c:226:10> 'int' lvalue Var 0x56555a492950 'j' 'int'
j
   3: BinaryOperator 0x56555a492b80 <linenoise.c:226:10, col:14> 'int' '='
|-DeclRefExpr 0x56555a492b38 <col:10> 'int' lvalue Var 0x56555a492950 'j' 'int'
`-IntegerLiteral 0x56555a492b60 <col:14> 'int' 0
[B6.2] = [B6.1]
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: IntegerLiteral 0x56555a492ac8 <linenoise.c:225:30> 'int' 0
0
   2: ReturnStmt 0x56555a492ae8 <linenoise.c:225:23, col:30>
`-IntegerLiteral 0x56555a492ac8 <col:30> 'int' 0
return [B7.1];
   Preds (1): B8
   Succs (1): B0

 [B8]
   1: DeclRefExpr 0x56555a492828 <linenoise.c:222:18> 'char *(const char *)' Function 0x56555a3e8938 'getenv' 'char *(const char *)'
getenv
   2: ImplicitCastExpr 0x56555a4928a8 <linenoise.c:222:18> 'char *(*)(const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a492828 <col:18> 'char *(const char *)' Function 0x56555a3e8938 'getenv' 'char *(const char *)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, char *(*)(const char *))
   3: StringLiteral 0x56555a492850 <linenoise.c:222:25> 'char [5]' lvalue "TERM"
"TERM"
   4: ImplicitCastExpr 0x56555a4928f0 <linenoise.c:222:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x56555a492850 <col:25> 'char [5]' lvalue "TERM"
[B8.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x56555a492908 <linenoise.c:222:25> 'const char *' <BitCast>
`-ImplicitCastExpr 0x56555a4928f0 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x56555a492850 <col:25> 'char [5]' lvalue "TERM"
[B8.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x56555a4928c0 <linenoise.c:222:18, col:31> 'char *'
|-ImplicitCastExpr 0x56555a4928a8 <col:18> 'char *(*)(const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a492828 <col:18> 'char *(const char *)' Function 0x56555a3e8938 'getenv' 'char *(const char *)'
`-ImplicitCastExpr 0x56555a492908 <col:25> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x56555a4928f0 <col:25> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x56555a492850 <col:25> 'char [5]' lvalue "TERM"
[B8.2]([B8.5])
   7: DeclStmt 0x56555a492920 <linenoise.c:222:5, col:32>col:11
`-VarDecl 0x56555a4927c8 <col:5, col:31> col:11 used term 'char *' cinit
  `-CallExpr 0x56555a4928c0 <col:18, col:31> 'char *'
    |-ImplicitCastExpr 0x56555a4928a8 <col:18> 'char *(*)(const char *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x56555a492828 <col:18> 'char *(const char *)' Function 0x56555a3e8938 'getenv' 'char *(const char *)'
    `-ImplicitCastExpr 0x56555a492908 <col:25> 'const char *' <BitCast>
      `-ImplicitCastExpr 0x56555a4928f0 <col:25> 'char *' <ArrayToPointerDecay>
        `-StringLiteral 0x56555a492850 <col:25> 'char [5]' lvalue "TERM"
char *term = getenv("TERM");
   8: DeclStmt 0x56555a4929b0 <linenoise.c:223:5, col:10>col:9
`-VarDecl 0x56555a492950 <col:5, col:9> col:9 used j 'int'
int j;
   9: DeclRefExpr 0x56555a4929c8 <linenoise.c:225:9> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
term
  10: ImplicitCastExpr 0x56555a492a70 <linenoise.c:225:9> 'char *' <LValueToRValue>
`-DeclRefExpr 0x56555a4929c8 <col:9> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
[B8.9] (ImplicitCastExpr, LValueToRValue, char *)
  11: IntegerLiteral 0x56555a4929f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  12: CStyleCastExpr 0x56555a492a28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x56555a4929f0 <col:24> 'int' 0
(void *)[B8.11] (CStyleCastExpr, NullToPointer, void *)
  13: ImplicitCastExpr 0x56555a492a88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char *' <BitCast>
`-ParenExpr 0x56555a492a50 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x56555a492a28 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x56555a4929f0 <col:24> 'int' 0
([B8.12]) (ImplicitCastExpr, BitCast, char *)
  14: BinaryOperator 0x56555a492aa0 <linenoise.c:225:9, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x56555a492a70 <linenoise.c:225:9> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x56555a4929c8 <col:9> 'char *' lvalue Var 0x56555a4927c8 'term' 'char *'
`-ImplicitCastExpr 0x56555a492a88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char *' <BitCast>
  `-ParenExpr 0x56555a492a50 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x56555a492a28 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x56555a4929f0 <col:24> 'int' 0
[B8.10] == [B8.13]
   T: if [B8.14]
   Preds (1): B9
   Succs (2): B7 B6

 [B0 (EXIT)]
   Preds (3): B1 B3 B7
