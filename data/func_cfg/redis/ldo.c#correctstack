static void correctstack(lua_State *L, TValue *oldstack)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x55f42eec53b8 <ldo.c:137:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x55f42eec53e0 <ldo.c:137:14> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec53b8 <col:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x55f42eec53f8 <ldo.c:137:14, col:17> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
`-ImplicitCastExpr 0x55f42eec53e0 <col:14> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec53b8 <col:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.2]->base
   4: ImplicitCastExpr 0x55f42eec5458 <ldo.c:137:14, col:17> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec53f8 <col:14, col:17> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
  `-ImplicitCastExpr 0x55f42eec53e0 <col:14> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec53b8 <col:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x55f42eec5430 <ldo.c:137:24> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
oldstack
   6: ImplicitCastExpr 0x55f42eec5470 <ldo.c:137:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec5430 <col:24> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B1.5] (ImplicitCastExpr, LValueToRValue, TValue *)
   7: BinaryOperator 0x55f42eec5488 <ldo.c:137:14, col:24> 'long' '-'
|-ImplicitCastExpr 0x55f42eec5458 <col:14, col:17> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x55f42eec53f8 <col:14, col:17> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
|   `-ImplicitCastExpr 0x55f42eec53e0 <col:14> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec53b8 <col:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
`-ImplicitCastExpr 0x55f42eec5470 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec5430 <col:24> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B1.4] - [B1.6]
   8: DeclRefExpr 0x55f42eec54d0 <ldo.c:137:36> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
   9: ImplicitCastExpr 0x55f42eec54f8 <ldo.c:137:36> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec54d0 <col:36> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.8] (ImplicitCastExpr, LValueToRValue, lua_State *)
  10: MemberExpr 0x55f42eec5510 <ldo.c:137:36, col:39> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
`-ImplicitCastExpr 0x55f42eec54f8 <col:36> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec54d0 <col:36> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.9]->stack
  11: ImplicitCastExpr 0x55f42eec5548 <ldo.c:137:36, col:39> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec5510 <col:36, col:39> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
  `-ImplicitCastExpr 0x55f42eec54f8 <col:36> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec54d0 <col:36> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.10] (ImplicitCastExpr, LValueToRValue, StkId)
  12: BinaryOperator 0x55f42eec5560 <ldo.c:137:13, col:39> 'StkId':'TValue *' '+'
|-ParenExpr 0x55f42eec54b0 <col:13, col:32> 'long'
| `-BinaryOperator 0x55f42eec5488 <col:14, col:24> 'long' '-'
|   |-ImplicitCastExpr 0x55f42eec5458 <col:14, col:17> 'StkId':'TValue *' <LValueToRValue>
|   | `-MemberExpr 0x55f42eec53f8 <col:14, col:17> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
|   |   `-ImplicitCastExpr 0x55f42eec53e0 <col:14> 'lua_State *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f42eec53b8 <col:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
|   `-ImplicitCastExpr 0x55f42eec5470 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec5430 <col:24> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
`-ImplicitCastExpr 0x55f42eec5548 <col:36, col:39> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eec5510 <col:36, col:39> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
    `-ImplicitCastExpr 0x55f42eec54f8 <col:36> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec54d0 <col:36> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
([B1.7]) + [B1.11]
  13: DeclRefExpr 0x55f42eec5340 <ldo.c:137:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  14: ImplicitCastExpr 0x55f42eec5368 <ldo.c:137:3> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec5340 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.13] (ImplicitCastExpr, LValueToRValue, lua_State *)
  15: MemberExpr 0x55f42eec5380 <ldo.c:137:3, col:6> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
`-ImplicitCastExpr 0x55f42eec5368 <col:3> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec5340 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.14]->base
  16: BinaryOperator 0x55f42eec5588 <ldo.c:137:3, col:39> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eec5380 <col:3, col:6> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
| `-ImplicitCastExpr 0x55f42eec5368 <col:3> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eec5340 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
`-BinaryOperator 0x55f42eec5560 <col:13, col:39> 'StkId':'TValue *' '+'
  |-ParenExpr 0x55f42eec54b0 <col:13, col:32> 'long'
  | `-BinaryOperator 0x55f42eec5488 <col:14, col:24> 'long' '-'
  |   |-ImplicitCastExpr 0x55f42eec5458 <col:14, col:17> 'StkId':'TValue *' <LValueToRValue>
  |   | `-MemberExpr 0x55f42eec53f8 <col:14, col:17> 'StkId':'TValue *' lvalue ->base 0x55f42ee88780
  |   |   `-ImplicitCastExpr 0x55f42eec53e0 <col:14> 'lua_State *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55f42eec53b8 <col:14> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
  |   `-ImplicitCastExpr 0x55f42eec5470 <col:24> 'TValue *' <LValueToRValue>
  |     `-DeclRefExpr 0x55f42eec5430 <col:24> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
  `-ImplicitCastExpr 0x55f42eec5548 <col:36, col:39> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x55f42eec5510 <col:36, col:39> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
      `-ImplicitCastExpr 0x55f42eec54f8 <col:36> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec54d0 <col:36> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B1.15] = [B1.12]
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x55f42eec4b48 <ldo.c:132:38> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
   2: UnaryOperator 0x55f42eec4b70 <ldo.c:132:38, col:40> 'CallInfo *' postfix '++'
`-DeclRefExpr 0x55f42eec4b48 <col:38> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: DeclRefExpr 0x55f42eec4c08 <ldo.c:133:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x55f42eec4c30 <ldo.c:133:16> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4c08 <col:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x55f42eec4c48 <ldo.c:133:16, col:20> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
`-ImplicitCastExpr 0x55f42eec4c30 <col:16> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4c08 <col:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.2]->top
   4: ImplicitCastExpr 0x55f42eec4ca8 <ldo.c:133:16, col:20> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec4c48 <col:16, col:20> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
  `-ImplicitCastExpr 0x55f42eec4c30 <col:16> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4c08 <col:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x55f42eec4c80 <ldo.c:133:26> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
oldstack
   6: ImplicitCastExpr 0x55f42eec4cc0 <ldo.c:133:26> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4c80 <col:26> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B3.5] (ImplicitCastExpr, LValueToRValue, TValue *)
   7: BinaryOperator 0x55f42eec4cd8 <ldo.c:133:16, col:26> 'long' '-'
|-ImplicitCastExpr 0x55f42eec4ca8 <col:16, col:20> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x55f42eec4c48 <col:16, col:20> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
|   `-ImplicitCastExpr 0x55f42eec4c30 <col:16> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec4c08 <col:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x55f42eec4cc0 <col:26> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4c80 <col:26> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B3.4] - [B3.6]
   8: DeclRefExpr 0x55f42eec4d20 <ldo.c:133:38> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
   9: ImplicitCastExpr 0x55f42eec4d48 <ldo.c:133:38> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4d20 <col:38> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.8] (ImplicitCastExpr, LValueToRValue, lua_State *)
  10: MemberExpr 0x55f42eec4d60 <ldo.c:133:38, col:41> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
`-ImplicitCastExpr 0x55f42eec4d48 <col:38> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4d20 <col:38> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.9]->stack
  11: ImplicitCastExpr 0x55f42eec4d98 <ldo.c:133:38, col:41> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec4d60 <col:38, col:41> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
  `-ImplicitCastExpr 0x55f42eec4d48 <col:38> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4d20 <col:38> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.10] (ImplicitCastExpr, LValueToRValue, StkId)
  12: BinaryOperator 0x55f42eec4db0 <ldo.c:133:15, col:41> 'StkId':'TValue *' '+'
|-ParenExpr 0x55f42eec4d00 <col:15, col:34> 'long'
| `-BinaryOperator 0x55f42eec4cd8 <col:16, col:26> 'long' '-'
|   |-ImplicitCastExpr 0x55f42eec4ca8 <col:16, col:20> 'StkId':'TValue *' <LValueToRValue>
|   | `-MemberExpr 0x55f42eec4c48 <col:16, col:20> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
|   |   `-ImplicitCastExpr 0x55f42eec4c30 <col:16> 'CallInfo *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f42eec4c08 <col:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
|   `-ImplicitCastExpr 0x55f42eec4cc0 <col:26> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec4c80 <col:26> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
`-ImplicitCastExpr 0x55f42eec4d98 <col:38, col:41> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eec4d60 <col:38, col:41> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
    `-ImplicitCastExpr 0x55f42eec4d48 <col:38> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec4d20 <col:38> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
([B3.7]) + [B3.11]
  13: DeclRefExpr 0x55f42eec4b90 <ldo.c:133:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
  14: ImplicitCastExpr 0x55f42eec4bb8 <ldo.c:133:5> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4b90 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.13] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  15: MemberExpr 0x55f42eec4bd0 <ldo.c:133:5, col:9> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
`-ImplicitCastExpr 0x55f42eec4bb8 <col:5> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4b90 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.14]->top
  16: BinaryOperator 0x55f42eec4dd8 <ldo.c:133:5, col:41> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eec4bd0 <col:5, col:9> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
| `-ImplicitCastExpr 0x55f42eec4bb8 <col:5> 'CallInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eec4b90 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-BinaryOperator 0x55f42eec4db0 <col:15, col:41> 'StkId':'TValue *' '+'
  |-ParenExpr 0x55f42eec4d00 <col:15, col:34> 'long'
  | `-BinaryOperator 0x55f42eec4cd8 <col:16, col:26> 'long' '-'
  |   |-ImplicitCastExpr 0x55f42eec4ca8 <col:16, col:20> 'StkId':'TValue *' <LValueToRValue>
  |   | `-MemberExpr 0x55f42eec4c48 <col:16, col:20> 'StkId':'TValue *' lvalue ->top 0x55f42ee82cd0
  |   |   `-ImplicitCastExpr 0x55f42eec4c30 <col:16> 'CallInfo *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55f42eec4c08 <col:16> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
  |   `-ImplicitCastExpr 0x55f42eec4cc0 <col:26> 'TValue *' <LValueToRValue>
  |     `-DeclRefExpr 0x55f42eec4c80 <col:26> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
  `-ImplicitCastExpr 0x55f42eec4d98 <col:38, col:41> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x55f42eec4d60 <col:38, col:41> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
      `-ImplicitCastExpr 0x55f42eec4d48 <col:38> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec4d20 <col:38> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.15] = [B3.12]
  17: DeclRefExpr 0x55f42eec4e78 <ldo.c:134:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
  18: ImplicitCastExpr 0x55f42eec4ea0 <ldo.c:134:17> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4e78 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.17] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  19: MemberExpr 0x55f42eec4eb8 <ldo.c:134:17, col:21> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
`-ImplicitCastExpr 0x55f42eec4ea0 <col:17> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4e78 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.18]->base
  20: ImplicitCastExpr 0x55f42eec4f18 <ldo.c:134:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec4eb8 <col:17, col:21> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
  `-ImplicitCastExpr 0x55f42eec4ea0 <col:17> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4e78 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.19] (ImplicitCastExpr, LValueToRValue, StkId)
  21: DeclRefExpr 0x55f42eec4ef0 <ldo.c:134:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
oldstack
  22: ImplicitCastExpr 0x55f42eec4f30 <ldo.c:134:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4ef0 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B3.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: BinaryOperator 0x55f42eec4f48 <ldo.c:134:17, col:28> 'long' '-'
|-ImplicitCastExpr 0x55f42eec4f18 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x55f42eec4eb8 <col:17, col:21> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
|   `-ImplicitCastExpr 0x55f42eec4ea0 <col:17> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec4e78 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x55f42eec4f30 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4ef0 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B3.20] - [B3.22]
  24: DeclRefExpr 0x55f42eec4f90 <ldo.c:134:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  25: ImplicitCastExpr 0x55f42eec4fb8 <ldo.c:134:40> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4f90 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.24] (ImplicitCastExpr, LValueToRValue, lua_State *)
  26: MemberExpr 0x55f42eec4fd0 <ldo.c:134:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
`-ImplicitCastExpr 0x55f42eec4fb8 <col:40> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4f90 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.25]->stack
  27: ImplicitCastExpr 0x55f42eec5008 <ldo.c:134:40, col:43> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec4fd0 <col:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
  `-ImplicitCastExpr 0x55f42eec4fb8 <col:40> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4f90 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.26] (ImplicitCastExpr, LValueToRValue, StkId)
  28: BinaryOperator 0x55f42eec5020 <ldo.c:134:16, col:43> 'StkId':'TValue *' '+'
|-ParenExpr 0x55f42eec4f70 <col:16, col:36> 'long'
| `-BinaryOperator 0x55f42eec4f48 <col:17, col:28> 'long' '-'
|   |-ImplicitCastExpr 0x55f42eec4f18 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
|   | `-MemberExpr 0x55f42eec4eb8 <col:17, col:21> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
|   |   `-ImplicitCastExpr 0x55f42eec4ea0 <col:17> 'CallInfo *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f42eec4e78 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
|   `-ImplicitCastExpr 0x55f42eec4f30 <col:28> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec4ef0 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
`-ImplicitCastExpr 0x55f42eec5008 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eec4fd0 <col:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
    `-ImplicitCastExpr 0x55f42eec4fb8 <col:40> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec4f90 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
([B3.23]) + [B3.27]
  29: DeclRefExpr 0x55f42eec4e00 <ldo.c:134:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
  30: ImplicitCastExpr 0x55f42eec4e28 <ldo.c:134:5> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4e00 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.29] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  31: MemberExpr 0x55f42eec4e40 <ldo.c:134:5, col:9> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
`-ImplicitCastExpr 0x55f42eec4e28 <col:5> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4e00 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.30]->base
  32: BinaryOperator 0x55f42eec5048 <ldo.c:134:5, col:43> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eec4e40 <col:5, col:9> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
| `-ImplicitCastExpr 0x55f42eec4e28 <col:5> 'CallInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eec4e00 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-BinaryOperator 0x55f42eec5020 <col:16, col:43> 'StkId':'TValue *' '+'
  |-ParenExpr 0x55f42eec4f70 <col:16, col:36> 'long'
  | `-BinaryOperator 0x55f42eec4f48 <col:17, col:28> 'long' '-'
  |   |-ImplicitCastExpr 0x55f42eec4f18 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
  |   | `-MemberExpr 0x55f42eec4eb8 <col:17, col:21> 'StkId':'TValue *' lvalue ->base 0x55f42ee82c20
  |   |   `-ImplicitCastExpr 0x55f42eec4ea0 <col:17> 'CallInfo *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55f42eec4e78 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
  |   `-ImplicitCastExpr 0x55f42eec4f30 <col:28> 'TValue *' <LValueToRValue>
  |     `-DeclRefExpr 0x55f42eec4ef0 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
  `-ImplicitCastExpr 0x55f42eec5008 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x55f42eec4fd0 <col:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
      `-ImplicitCastExpr 0x55f42eec4fb8 <col:40> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec4f90 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.31] = [B3.28]
  33: DeclRefExpr 0x55f42eec50e8 <ldo.c:135:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
  34: ImplicitCastExpr 0x55f42eec5110 <ldo.c:135:17> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec50e8 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.33] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  35: MemberExpr 0x55f42eec5128 <ldo.c:135:17, col:21> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
`-ImplicitCastExpr 0x55f42eec5110 <col:17> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec50e8 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.34]->func
  36: ImplicitCastExpr 0x55f42eec5188 <ldo.c:135:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec5128 <col:17, col:21> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
  `-ImplicitCastExpr 0x55f42eec5110 <col:17> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec50e8 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.35] (ImplicitCastExpr, LValueToRValue, StkId)
  37: DeclRefExpr 0x55f42eec5160 <ldo.c:135:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
oldstack
  38: ImplicitCastExpr 0x55f42eec51a0 <ldo.c:135:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec5160 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B3.37] (ImplicitCastExpr, LValueToRValue, TValue *)
  39: BinaryOperator 0x55f42eec51b8 <ldo.c:135:17, col:28> 'long' '-'
|-ImplicitCastExpr 0x55f42eec5188 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x55f42eec5128 <col:17, col:21> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
|   `-ImplicitCastExpr 0x55f42eec5110 <col:17> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec50e8 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x55f42eec51a0 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec5160 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B3.36] - [B3.38]
  40: DeclRefExpr 0x55f42eec5200 <ldo.c:135:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  41: ImplicitCastExpr 0x55f42eec5228 <ldo.c:135:40> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec5200 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.40] (ImplicitCastExpr, LValueToRValue, lua_State *)
  42: MemberExpr 0x55f42eec5240 <ldo.c:135:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
`-ImplicitCastExpr 0x55f42eec5228 <col:40> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec5200 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.41]->stack
  43: ImplicitCastExpr 0x55f42eec5278 <ldo.c:135:40, col:43> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec5240 <col:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
  `-ImplicitCastExpr 0x55f42eec5228 <col:40> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec5200 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.42] (ImplicitCastExpr, LValueToRValue, StkId)
  44: BinaryOperator 0x55f42eec5290 <ldo.c:135:16, col:43> 'StkId':'TValue *' '+'
|-ParenExpr 0x55f42eec51e0 <col:16, col:36> 'long'
| `-BinaryOperator 0x55f42eec51b8 <col:17, col:28> 'long' '-'
|   |-ImplicitCastExpr 0x55f42eec5188 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
|   | `-MemberExpr 0x55f42eec5128 <col:17, col:21> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
|   |   `-ImplicitCastExpr 0x55f42eec5110 <col:17> 'CallInfo *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f42eec50e8 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
|   `-ImplicitCastExpr 0x55f42eec51a0 <col:28> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec5160 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
`-ImplicitCastExpr 0x55f42eec5278 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eec5240 <col:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
    `-ImplicitCastExpr 0x55f42eec5228 <col:40> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec5200 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
([B3.39]) + [B3.43]
  45: DeclRefExpr 0x55f42eec5070 <ldo.c:135:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
  46: ImplicitCastExpr 0x55f42eec5098 <ldo.c:135:5> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec5070 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.45] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  47: MemberExpr 0x55f42eec50b0 <ldo.c:135:5, col:9> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
`-ImplicitCastExpr 0x55f42eec5098 <col:5> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec5070 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B3.46]->func
  48: BinaryOperator 0x55f42eec52b8 <ldo.c:135:5, col:43> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eec50b0 <col:5, col:9> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
| `-ImplicitCastExpr 0x55f42eec5098 <col:5> 'CallInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eec5070 <col:5> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-BinaryOperator 0x55f42eec5290 <col:16, col:43> 'StkId':'TValue *' '+'
  |-ParenExpr 0x55f42eec51e0 <col:16, col:36> 'long'
  | `-BinaryOperator 0x55f42eec51b8 <col:17, col:28> 'long' '-'
  |   |-ImplicitCastExpr 0x55f42eec5188 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
  |   | `-MemberExpr 0x55f42eec5128 <col:17, col:21> 'StkId':'TValue *' lvalue ->func 0x55f42ee82c78
  |   |   `-ImplicitCastExpr 0x55f42eec5110 <col:17> 'CallInfo *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55f42eec50e8 <col:17> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
  |   `-ImplicitCastExpr 0x55f42eec51a0 <col:28> 'TValue *' <LValueToRValue>
  |     `-DeclRefExpr 0x55f42eec5160 <col:28> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
  `-ImplicitCastExpr 0x55f42eec5278 <col:40, col:43> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x55f42eec5240 <col:40, col:43> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
      `-ImplicitCastExpr 0x55f42eec5228 <col:40> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec5200 <col:40> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B3.47] = [B3.44]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x55f42eec4a50 <ldo.c:132:25> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x55f42eec4af0 <ldo.c:132:25> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4a50 <col:25> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
[B4.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: DeclRefExpr 0x55f42eec4a78 <ldo.c:132:31> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55f42eec4aa0 <ldo.c:132:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4a78 <col:31> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B4.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x55f42eec4ab8 <ldo.c:132:31, col:34> 'CallInfo *' lvalue ->ci 0x55f42ee88928
`-ImplicitCastExpr 0x55f42eec4aa0 <col:31> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4a78 <col:31> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B4.4]->ci
   6: ImplicitCastExpr 0x55f42eec4b08 <ldo.c:132:31, col:34> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x55f42eec4ab8 <col:31, col:34> 'CallInfo *' lvalue ->ci 0x55f42ee88928
  `-ImplicitCastExpr 0x55f42eec4aa0 <col:31> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4a78 <col:31> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B4.5] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   7: BinaryOperator 0x55f42eec4b20 <ldo.c:132:25, col:34> 'int' '<='
|-ImplicitCastExpr 0x55f42eec4af0 <col:25> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x55f42eec4a50 <col:25> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x55f42eec4b08 <col:31, col:34> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x55f42eec4ab8 <col:31, col:34> 'CallInfo *' lvalue ->ci 0x55f42ee88928
    `-ImplicitCastExpr 0x55f42eec4aa0 <col:31> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec4a78 <col:31> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B4.2] <= [B4.6]
   T: for (...; [B4.7]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x55f42eec4998 <ldo.c:132:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x55f42eec49c0 <ldo.c:132:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4998 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B5.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x55f42eec49d8 <ldo.c:132:13, col:16> 'CallInfo *' lvalue ->base_ci 0x55f42ee88ae0
`-ImplicitCastExpr 0x55f42eec49c0 <col:13> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4998 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B5.2]->base_ci
   4: ImplicitCastExpr 0x55f42eec4a10 <ldo.c:132:13, col:16> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x55f42eec49d8 <col:13, col:16> 'CallInfo *' lvalue ->base_ci 0x55f42ee88ae0
  `-ImplicitCastExpr 0x55f42eec49c0 <col:13> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4998 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B5.3] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: DeclRefExpr 0x55f42eec4970 <ldo.c:132:8> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
ci
   6: BinaryOperator 0x55f42eec4a28 <ldo.c:132:8, col:16> 'CallInfo *' '='
|-DeclRefExpr 0x55f42eec4970 <col:8> 'CallInfo *' lvalue Var 0x55f42eec36c0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x55f42eec4a10 <col:13, col:16> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x55f42eec49d8 <col:13, col:16> 'CallInfo *' lvalue ->base_ci 0x55f42ee88ae0
    `-ImplicitCastExpr 0x55f42eec49c0 <col:13> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec4998 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B5.5] = [B5.4]
   Preds (1): B8
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x55f42eec3c38 <ldo.c:130:44> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
up
   2: ImplicitCastExpr 0x55f42eec3c60 <ldo.c:130:44> 'GCObject *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec3c38 <col:44> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B6.1] (ImplicitCastExpr, LValueToRValue, GCObject *)
   3: MemberExpr 0x55f42eec3c78 <ldo.c:130:44, col:48> 'GCheader':'struct GCheader' lvalue ->gch 0x55f42ee891e0
`-ImplicitCastExpr 0x55f42eec3c60 <col:44> 'GCObject *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec3c38 <col:44> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B6.2]->gch
   4: MemberExpr 0x55f42eec3cb0 <ldo.c:130:44, col:52> 'GCObject *' lvalue .next 0x55f42ee5e388
`-MemberExpr 0x55f42eec3c78 <col:44, col:48> 'GCheader':'struct GCheader' lvalue ->gch 0x55f42ee891e0
  `-ImplicitCastExpr 0x55f42eec3c60 <col:44> 'GCObject *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec3c38 <col:44> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B6.3].next
   5: ImplicitCastExpr 0x55f42eec3ce8 <ldo.c:130:44, col:52> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x55f42eec3cb0 <col:44, col:52> 'GCObject *' lvalue .next 0x55f42ee5e388
  `-MemberExpr 0x55f42eec3c78 <col:44, col:48> 'GCheader':'struct GCheader' lvalue ->gch 0x55f42ee891e0
    `-ImplicitCastExpr 0x55f42eec3c60 <col:44> 'GCObject *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec3c38 <col:44> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B6.4] (ImplicitCastExpr, LValueToRValue, GCObject *)
   6: DeclRefExpr 0x55f42eec3c10 <ldo.c:130:39> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
up
   7: BinaryOperator 0x55f42eec3d00 <ldo.c:130:39, col:52> 'GCObject *' '='
|-DeclRefExpr 0x55f42eec3c10 <col:39> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
`-ImplicitCastExpr 0x55f42eec3ce8 <col:44, col:52> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x55f42eec3cb0 <col:44, col:52> 'GCObject *' lvalue .next 0x55f42ee5e388
    `-MemberExpr 0x55f42eec3c78 <col:44, col:48> 'GCheader':'struct GCheader' lvalue ->gch 0x55f42ee891e0
      `-ImplicitCastExpr 0x55f42eec3c60 <col:44> 'GCObject *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec3c38 <col:44> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B6.6] = [B6.5]
   Preds (1): B7
   Succs (1): B8

 [B7]
   1: DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
up
   2: ImplicitCastExpr 0x55f42eec46d0 <./lstate.h:156:58, col:60> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
  `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
([B7.1]) (ImplicitCastExpr, LValueToRValue, GCObject *)
   3: MemberExpr 0x55f42eec46e8 <./lstate.h:156:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
`-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
  `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
    `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B7.2]->uv
   4: UnaryOperator 0x55f42eec4740 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
`-ParenExpr 0x55f42eec4720 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
  `-MemberExpr 0x55f42eec46e8 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
    `-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
      `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
        `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
&([B7.3])
   5: MemberExpr 0x55f42eec4780 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' lvalue ->v 0x55f42ee74648
`-ParenExpr 0x55f42eec4760 <./llimits.h:63:25, col:27> 'struct UpVal *'
  `-UnaryOperator 0x55f42eec4740 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
    `-ParenExpr 0x55f42eec4720 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
      `-MemberExpr 0x55f42eec46e8 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
        `-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
          `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
            `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
([B7.4])->v
   6: ImplicitCastExpr 0x55f42eec47e0 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec4780 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' lvalue ->v 0x55f42ee74648
  `-ParenExpr 0x55f42eec4760 <./llimits.h:63:25, col:27> 'struct UpVal *'
    `-UnaryOperator 0x55f42eec4740 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
      `-ParenExpr 0x55f42eec4720 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
        `-MemberExpr 0x55f42eec46e8 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
          `-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
            `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
              `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B7.5] (ImplicitCastExpr, LValueToRValue, TValue *)
   7: DeclRefExpr 0x55f42eec47b8 <ldo.c:131:38> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
oldstack
   8: ImplicitCastExpr 0x55f42eec47f8 <ldo.c:131:38> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec47b8 <col:38> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B7.7] (ImplicitCastExpr, LValueToRValue, TValue *)
   9: BinaryOperator 0x55f42eec4810 <./llimits.h:63:25, ldo.c:131:38> 'long' '-'
|-ImplicitCastExpr 0x55f42eec47e0 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' <LValueToRValue>
| `-MemberExpr 0x55f42eec4780 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' lvalue ->v 0x55f42ee74648
|   `-ParenExpr 0x55f42eec4760 <./llimits.h:63:25, col:27> 'struct UpVal *'
|     `-UnaryOperator 0x55f42eec4740 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
|       `-ParenExpr 0x55f42eec4720 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
|         `-MemberExpr 0x55f42eec46e8 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
|           `-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
|             `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
|               `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
`-ImplicitCastExpr 0x55f42eec47f8 <col:38> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec47b8 <col:38> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B7.6] - [B7.8]
  10: DeclRefExpr 0x55f42eec4858 <ldo.c:131:50> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  11: ImplicitCastExpr 0x55f42eec4880 <ldo.c:131:50> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec4858 <col:50> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B7.10] (ImplicitCastExpr, LValueToRValue, lua_State *)
  12: MemberExpr 0x55f42eec4898 <ldo.c:131:50, col:53> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
`-ImplicitCastExpr 0x55f42eec4880 <col:50> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec4858 <col:50> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B7.11]->stack
  13: ImplicitCastExpr 0x55f42eec48d0 <ldo.c:131:50, col:53> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec4898 <col:50, col:53> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
  `-ImplicitCastExpr 0x55f42eec4880 <col:50> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec4858 <col:50> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B7.12] (ImplicitCastExpr, LValueToRValue, StkId)
  14: BinaryOperator 0x55f42eec48e8 <ldo.c:131:21, col:53> 'StkId':'TValue *' '+'
|-ParenExpr 0x55f42eec4838 <col:21, col:46> 'long'
| `-BinaryOperator 0x55f42eec4810 <./llimits.h:63:25, ldo.c:131:38> 'long' '-'
|   |-ImplicitCastExpr 0x55f42eec47e0 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' <LValueToRValue>
|   | `-MemberExpr 0x55f42eec4780 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' lvalue ->v 0x55f42ee74648
|   |   `-ParenExpr 0x55f42eec4760 <./llimits.h:63:25, col:27> 'struct UpVal *'
|   |     `-UnaryOperator 0x55f42eec4740 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
|   |       `-ParenExpr 0x55f42eec4720 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
|   |         `-MemberExpr 0x55f42eec46e8 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
|   |           `-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
|   |             `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
|   |               `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
|   `-ImplicitCastExpr 0x55f42eec47f8 <col:38> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec47b8 <col:38> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
`-ImplicitCastExpr 0x55f42eec48d0 <col:50, col:53> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eec4898 <col:50, col:53> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
    `-ImplicitCastExpr 0x55f42eec4880 <col:50> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec4858 <col:50> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
([B7.9]) + [B7.13]
  15: DeclRefExpr 0x55f42eec3d28 <ldo.c:131:12> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
up
  16: ImplicitCastExpr 0x55f42eec3d70 <./lstate.h:156:58, col:60> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x55f42eec3d50 <col:58, col:60> 'GCObject *' lvalue
  `-DeclRefExpr 0x55f42eec3d28 <ldo.c:131:12> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
([B7.15]) (ImplicitCastExpr, LValueToRValue, GCObject *)
  17: MemberExpr 0x55f42eec3d88 <./lstate.h:156:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
`-ImplicitCastExpr 0x55f42eec3d70 <col:58, col:60> 'GCObject *' <LValueToRValue>
  `-ParenExpr 0x55f42eec3d50 <col:58, col:60> 'GCObject *' lvalue
    `-DeclRefExpr 0x55f42eec3d28 <ldo.c:131:12> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B7.16]->uv
  18: UnaryOperator 0x55f42eec3de0 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
`-ParenExpr 0x55f42eec3dc0 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
  `-MemberExpr 0x55f42eec3d88 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
    `-ImplicitCastExpr 0x55f42eec3d70 <col:58, col:60> 'GCObject *' <LValueToRValue>
      `-ParenExpr 0x55f42eec3d50 <col:58, col:60> 'GCObject *' lvalue
        `-DeclRefExpr 0x55f42eec3d28 <ldo.c:131:12> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
&([B7.17])
  19: MemberExpr 0x55f42eec4650 <./llimits.h:63:25, ldo.c:131:17> 'TValue *' lvalue ->v 0x55f42ee74648
`-ParenExpr 0x55f42eec3e00 <./llimits.h:63:25, col:27> 'struct UpVal *'
  `-UnaryOperator 0x55f42eec3de0 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
    `-ParenExpr 0x55f42eec3dc0 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
      `-MemberExpr 0x55f42eec3d88 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
        `-ImplicitCastExpr 0x55f42eec3d70 <col:58, col:60> 'GCObject *' <LValueToRValue>
          `-ParenExpr 0x55f42eec3d50 <col:58, col:60> 'GCObject *' lvalue
            `-DeclRefExpr 0x55f42eec3d28 <ldo.c:131:12> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
([B7.18])->v
  20: BinaryOperator 0x55f42eec4910 <./llimits.h:63:25, ldo.c:131:53> 'TValue *' '='
|-MemberExpr 0x55f42eec4650 <./llimits.h:63:25, ldo.c:131:17> 'TValue *' lvalue ->v 0x55f42ee74648
| `-ParenExpr 0x55f42eec3e00 <./llimits.h:63:25, col:27> 'struct UpVal *'
|   `-UnaryOperator 0x55f42eec3de0 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
|     `-ParenExpr 0x55f42eec3dc0 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
|       `-MemberExpr 0x55f42eec3d88 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
|         `-ImplicitCastExpr 0x55f42eec3d70 <col:58, col:60> 'GCObject *' <LValueToRValue>
|           `-ParenExpr 0x55f42eec3d50 <col:58, col:60> 'GCObject *' lvalue
|             `-DeclRefExpr 0x55f42eec3d28 <ldo.c:131:12> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
`-BinaryOperator 0x55f42eec48e8 <col:21, col:53> 'StkId':'TValue *' '+'
  |-ParenExpr 0x55f42eec4838 <col:21, col:46> 'long'
  | `-BinaryOperator 0x55f42eec4810 <./llimits.h:63:25, ldo.c:131:38> 'long' '-'
  |   |-ImplicitCastExpr 0x55f42eec47e0 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' <LValueToRValue>
  |   | `-MemberExpr 0x55f42eec4780 <./llimits.h:63:25, ldo.c:131:34> 'TValue *' lvalue ->v 0x55f42ee74648
  |   |   `-ParenExpr 0x55f42eec4760 <./llimits.h:63:25, col:27> 'struct UpVal *'
  |   |     `-UnaryOperator 0x55f42eec4740 <./lstate.h:156:56, col:65> 'struct UpVal *' prefix '&'
  |   |       `-ParenExpr 0x55f42eec4720 <col:57, col:65> 'struct UpVal':'struct UpVal' lvalue
  |   |         `-MemberExpr 0x55f42eec46e8 <col:58, col:63> 'struct UpVal':'struct UpVal' lvalue ->uv 0x55f42ee89450
  |   |           `-ImplicitCastExpr 0x55f42eec46d0 <col:58, col:60> 'GCObject *' <LValueToRValue>
  |   |             `-ParenExpr 0x55f42eec46b0 <col:58, col:60> 'GCObject *' lvalue
  |   |               `-DeclRefExpr 0x55f42eec4688 <ldo.c:131:29> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
  |   `-ImplicitCastExpr 0x55f42eec47f8 <col:38> 'TValue *' <LValueToRValue>
  |     `-DeclRefExpr 0x55f42eec47b8 <col:38> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
  `-ImplicitCastExpr 0x55f42eec48d0 <col:50, col:53> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x55f42eec4898 <col:50, col:53> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
      `-ImplicitCastExpr 0x55f42eec4880 <col:50> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec4858 <col:50> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B7.19] = [B7.14]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x55f42eec3b10 <ldo.c:130:27> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
up
   2: ImplicitCastExpr 0x55f42eec3bb8 <ldo.c:130:27> 'GCObject *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec3b10 <col:27> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
[B8.1] (ImplicitCastExpr, LValueToRValue, GCObject *)
   3: IntegerLiteral 0x55f42eec3b38 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   4: CStyleCastExpr 0x55f42eec3b70 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55f42eec3b38 <col:24> 'int' 0
(void *)[B8.3] (CStyleCastExpr, NullToPointer, void *)
   5: ImplicitCastExpr 0x55f42eec3bd0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'GCObject *' <BitCast>
`-ParenExpr 0x55f42eec3b98 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55f42eec3b70 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55f42eec3b38 <col:24> 'int' 0
([B8.4]) (ImplicitCastExpr, BitCast, GCObject *)
   6: BinaryOperator 0x55f42eec3be8 <ldo.c:130:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ImplicitCastExpr 0x55f42eec3bb8 <ldo.c:130:27> 'GCObject *' <LValueToRValue>
| `-DeclRefExpr 0x55f42eec3b10 <col:27> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
`-ImplicitCastExpr 0x55f42eec3bd0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'GCObject *' <BitCast>
  `-ParenExpr 0x55f42eec3b98 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55f42eec3b70 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55f42eec3b38 <col:24> 'int' 0
[B8.2] != [B8.5]
   T: for (...; [B8.6]; ...)
   Preds (2): B6 B9
   Succs (2): B7 B5

 [B9]
   1: DeclStmt 0x55f42eec3720 <ldo.c:127:3, col:15>col:13
`-VarDecl 0x55f42eec36c0 <col:3, col:13> col:13 used ci 'CallInfo *'
CallInfo *ci;
   2: DeclStmt 0x55f42eec37a8 <ldo.c:128:3, col:15>col:13
`-VarDecl 0x55f42eec3748 <col:3, col:13> col:13 used up 'GCObject *'
GCObject *up;
   3: DeclRefExpr 0x55f42eec3838 <ldo.c:129:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55f42eec3860 <ldo.c:129:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec3838 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x55f42eec3878 <ldo.c:129:13, col:16> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
`-ImplicitCastExpr 0x55f42eec3860 <col:13> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec3838 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.4]->top
   6: ImplicitCastExpr 0x55f42eec38d8 <ldo.c:129:13, col:16> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec3878 <col:13, col:16> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
  `-ImplicitCastExpr 0x55f42eec3860 <col:13> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec3838 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: DeclRefExpr 0x55f42eec38b0 <ldo.c:129:22> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
oldstack
   8: ImplicitCastExpr 0x55f42eec38f0 <ldo.c:129:22> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec38b0 <col:22> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B9.7] (ImplicitCastExpr, LValueToRValue, TValue *)
   9: BinaryOperator 0x55f42eec3908 <ldo.c:129:13, col:22> 'long' '-'
|-ImplicitCastExpr 0x55f42eec38d8 <col:13, col:16> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x55f42eec3878 <col:13, col:16> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
|   `-ImplicitCastExpr 0x55f42eec3860 <col:13> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec3838 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
`-ImplicitCastExpr 0x55f42eec38f0 <col:22> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec38b0 <col:22> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
[B9.6] - [B9.8]
  10: DeclRefExpr 0x55f42eec3950 <ldo.c:129:34> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  11: ImplicitCastExpr 0x55f42eec3978 <ldo.c:129:34> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec3950 <col:34> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.10] (ImplicitCastExpr, LValueToRValue, lua_State *)
  12: MemberExpr 0x55f42eec3990 <ldo.c:129:34, col:37> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
`-ImplicitCastExpr 0x55f42eec3978 <col:34> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec3950 <col:34> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.11]->stack
  13: ImplicitCastExpr 0x55f42eec39c8 <ldo.c:129:34, col:37> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x55f42eec3990 <col:34, col:37> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
  `-ImplicitCastExpr 0x55f42eec3978 <col:34> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec3950 <col:34> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.12] (ImplicitCastExpr, LValueToRValue, StkId)
  14: BinaryOperator 0x55f42eec39e0 <ldo.c:129:12, col:37> 'StkId':'TValue *' '+'
|-ParenExpr 0x55f42eec3930 <col:12, col:30> 'long'
| `-BinaryOperator 0x55f42eec3908 <col:13, col:22> 'long' '-'
|   |-ImplicitCastExpr 0x55f42eec38d8 <col:13, col:16> 'StkId':'TValue *' <LValueToRValue>
|   | `-MemberExpr 0x55f42eec3878 <col:13, col:16> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
|   |   `-ImplicitCastExpr 0x55f42eec3860 <col:13> 'lua_State *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f42eec3838 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
|   `-ImplicitCastExpr 0x55f42eec38f0 <col:22> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x55f42eec38b0 <col:22> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
`-ImplicitCastExpr 0x55f42eec39c8 <col:34, col:37> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x55f42eec3990 <col:34, col:37> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
    `-ImplicitCastExpr 0x55f42eec3978 <col:34> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec3950 <col:34> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
([B9.9]) + [B9.13]
  15: DeclRefExpr 0x55f42eec37c0 <ldo.c:129:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  16: ImplicitCastExpr 0x55f42eec37e8 <ldo.c:129:3> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec37c0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.15] (ImplicitCastExpr, LValueToRValue, lua_State *)
  17: MemberExpr 0x55f42eec3800 <ldo.c:129:3, col:6> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
`-ImplicitCastExpr 0x55f42eec37e8 <col:3> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec37c0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.16]->top
  18: BinaryOperator 0x55f42eec3a08 <ldo.c:129:3, col:37> 'StkId':'TValue *' '='
|-MemberExpr 0x55f42eec3800 <col:3, col:6> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
| `-ImplicitCastExpr 0x55f42eec37e8 <col:3> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x55f42eec37c0 <col:3> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
`-BinaryOperator 0x55f42eec39e0 <col:12, col:37> 'StkId':'TValue *' '+'
  |-ParenExpr 0x55f42eec3930 <col:12, col:30> 'long'
  | `-BinaryOperator 0x55f42eec3908 <col:13, col:22> 'long' '-'
  |   |-ImplicitCastExpr 0x55f42eec38d8 <col:13, col:16> 'StkId':'TValue *' <LValueToRValue>
  |   | `-MemberExpr 0x55f42eec3878 <col:13, col:16> 'StkId':'TValue *' lvalue ->top 0x55f42ee88728
  |   |   `-ImplicitCastExpr 0x55f42eec3860 <col:13> 'lua_State *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55f42eec3838 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
  |   `-ImplicitCastExpr 0x55f42eec38f0 <col:22> 'TValue *' <LValueToRValue>
  |     `-DeclRefExpr 0x55f42eec38b0 <col:22> 'TValue *' lvalue ParmVar 0x55f42eec3528 'oldstack' 'TValue *'
  `-ImplicitCastExpr 0x55f42eec39c8 <col:34, col:37> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x55f42eec3990 <col:34, col:37> 'StkId':'TValue *' lvalue ->stack 0x55f42ee88a30
      `-ImplicitCastExpr 0x55f42eec3978 <col:34> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x55f42eec3950 <col:34> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.17] = [B9.14]
  19: DeclRefExpr 0x55f42eec3a58 <ldo.c:130:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
L
  20: ImplicitCastExpr 0x55f42eec3a80 <ldo.c:130:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55f42eec3a58 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.19] (ImplicitCastExpr, LValueToRValue, lua_State *)
  21: MemberExpr 0x55f42eec3a98 <ldo.c:130:13, col:16> 'GCObject *' lvalue ->openupval 0x55f42ee88f30
`-ImplicitCastExpr 0x55f42eec3a80 <col:13> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x55f42eec3a58 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.20]->openupval
  22: ImplicitCastExpr 0x55f42eec3ad0 <ldo.c:130:13, col:16> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x55f42eec3a98 <col:13, col:16> 'GCObject *' lvalue ->openupval 0x55f42ee88f30
  `-ImplicitCastExpr 0x55f42eec3a80 <col:13> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x55f42eec3a58 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.21] (ImplicitCastExpr, LValueToRValue, GCObject *)
  23: DeclRefExpr 0x55f42eec3a30 <ldo.c:130:8> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
up
  24: BinaryOperator 0x55f42eec3ae8 <ldo.c:130:8, col:16> 'GCObject *' '='
|-DeclRefExpr 0x55f42eec3a30 <col:8> 'GCObject *' lvalue Var 0x55f42eec3748 'up' 'GCObject *'
`-ImplicitCastExpr 0x55f42eec3ad0 <col:13, col:16> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x55f42eec3a98 <col:13, col:16> 'GCObject *' lvalue ->openupval 0x55f42ee88f30
    `-ImplicitCastExpr 0x55f42eec3a80 <col:13> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x55f42eec3a58 <col:13> 'lua_State *' lvalue ParmVar 0x55f42eec34b8 'L' 'lua_State *'
[B9.23] = [B9.22]
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (1): B1
