static int arrayindex(const TValue *key)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: IntegerLiteral 0x5654000d2540 <ltable.c:128:11> 'int' 1
1
   2: UnaryOperator 0x5654000d2560 <ltable.c:128:10, col:11> 'int' prefix '-'
`-IntegerLiteral 0x5654000d2540 <col:11> 'int' 1
-[B1.1]
   3: ReturnStmt 0x5654000d2580 <ltable.c:128:3, col:11>
`-UnaryOperator 0x5654000d2560 <col:10, col:11> 'int' prefix '-'
  `-IntegerLiteral 0x5654000d2540 <col:11> 'int' 1
return [B1.2];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5654000d2448 <ltable.c:126:14> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
k
   2: ImplicitCastExpr 0x5654000d2470 <ltable.c:126:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000d2448 <col:14> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
[B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x5654000d2488 <ltable.c:126:7, col:14>
`-ImplicitCastExpr 0x5654000d2470 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000d2448 <col:14> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5654000d1f68 <ltable.c:122:27> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
key
   2: ImplicitCastExpr 0x5654000d1fb0 <./lobject.h:93:44, col:46> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5654000d1f90 <col:44, col:46> 'const TValue *' lvalue
  `-DeclRefExpr 0x5654000d1f68 <ltable.c:122:27> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
([B3.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5654000d1fc8 <./lobject.h:93:44, col:49> 'const Value':'const Value' lvalue ->value 0x565400089980
`-ImplicitCastExpr 0x5654000d1fb0 <col:44, col:46> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5654000d1f90 <col:44, col:46> 'const TValue *' lvalue
    `-DeclRefExpr 0x5654000d1f68 <ltable.c:122:27> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
[B3.2]->value
   4: MemberExpr 0x5654000d2000 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x565400089738
`-MemberExpr 0x5654000d1fc8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x565400089980
  `-ImplicitCastExpr 0x5654000d1fb0 <col:44, col:46> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5654000d1f90 <col:44, col:46> 'const TValue *' lvalue
      `-DeclRefExpr 0x5654000d1f68 <ltable.c:122:27> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
[B3.3].n
   5: ImplicitCastExpr 0x5654000d2058 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5654000d2038 <col:25, col:27> 'const lua_Number':'const double' lvalue
  `-MemberExpr 0x5654000d2000 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x565400089738
    `-MemberExpr 0x5654000d1fc8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x565400089980
      `-ImplicitCastExpr 0x5654000d1fb0 <col:44, col:46> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5654000d1f90 <col:44, col:46> 'const TValue *' lvalue
          `-DeclRefExpr 0x5654000d1f68 <ltable.c:122:27> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
([B3.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5654000d2070 <ltable.c:122:5, col:31>col:16
`-VarDecl 0x5654000d1f08 <col:5, ./llimits.h:63:27> ltable.c:122:16 used n 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5654000d2058 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5654000d2038 <col:25, col:27> 'const lua_Number':'const double' lvalue
      `-MemberExpr 0x5654000d2000 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x565400089738
        `-MemberExpr 0x5654000d1fc8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x565400089980
          `-ImplicitCastExpr 0x5654000d1fb0 <col:44, col:46> 'const TValue *' <LValueToRValue>
            `-ParenExpr 0x5654000d1f90 <col:44, col:46> 'const TValue *' lvalue
              `-DeclRefExpr 0x5654000d1f68 <ltable.c:122:27> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
lua_Number n = ((key)->value.n);
   7: DeclStmt 0x5654000d2100 <ltable.c:123:5, col:10>col:9
`-VarDecl 0x5654000d20a0 <col:5, col:9> col:9 used k 'int'
int k;
   8: DeclRefExpr 0x5654000d2160 <ltable.c:124:23> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
n
   9: ImplicitCastExpr 0x5654000d21f0 <./luaconf.h:580:39, col:41> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5654000d21d0 <col:39, col:41> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5654000d2160 <ltable.c:124:23> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
([B3.8]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  10: CStyleCastExpr 0x5654000d2208 <./luaconf.h:580:34, col:41> 'int' <FloatingToIntegral>
`-ImplicitCastExpr 0x5654000d21f0 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5654000d21d0 <col:39, col:41> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5654000d2160 <ltable.c:124:23> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
(int)[B3.9] (CStyleCastExpr, FloatingToIntegral, int)
  11: DeclRefExpr 0x5654000d2118 <ltable.c:124:20> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
k
  12: BinaryOperator 0x5654000d2230 <./luaconf.h:580:30, col:41> 'int' '='
|-ParenExpr 0x5654000d2140 <col:30, col:32> 'int' lvalue
| `-DeclRefExpr 0x5654000d2118 <ltable.c:124:20> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
`-CStyleCastExpr 0x5654000d2208 <./luaconf.h:580:34, col:41> 'int' <FloatingToIntegral>
  `-ImplicitCastExpr 0x5654000d21f0 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5654000d21d0 <col:39, col:41> 'lua_Number':'double' lvalue
      `-DeclRefExpr 0x5654000d2160 <ltable.c:124:23> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
([B3.11]) = [B3.10]
  13: DeclRefExpr 0x5654000d2278 <ltable.c:125:29> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
k
  14: ImplicitCastExpr 0x5654000d2320 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5654000d2300 <col:26, col:30> 'int' lvalue
  `-ParenExpr 0x5654000d22a0 <line:79:38, col:40> 'int' lvalue
    `-DeclRefExpr 0x5654000d2278 <ltable.c:125:29> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
(([B3.13])) (ImplicitCastExpr, LValueToRValue, int)
  15: CStyleCastExpr 0x5654000d2338 <./llimits.h:75:23, col:30> 'lua_Number':'double' <IntegralToFloating>
`-ImplicitCastExpr 0x5654000d2320 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5654000d2300 <col:26, col:30> 'int' lvalue
    `-ParenExpr 0x5654000d22a0 <line:79:38, col:40> 'int' lvalue
      `-DeclRefExpr 0x5654000d2278 <ltable.c:125:29> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
(lua_Number)[B3.14] (CStyleCastExpr, IntegralToFloating, lua_Number)
  16: DeclRefExpr 0x5654000d23a0 <ltable.c:125:33> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
n
  17: ImplicitCastExpr 0x5654000d23e8 <./luaconf.h:540:32, col:34> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5654000d23c8 <col:32, col:34> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5654000d23a0 <ltable.c:125:33> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
([B3.16]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: BinaryOperator 0x5654000d2400 <./luaconf.h:540:27, col:34> 'int' '=='
|-ParenExpr 0x5654000d2380 <col:27, col:29> 'lua_Number':'double'
| `-ParenExpr 0x5654000d2360 <./llimits.h:75:22, col:31> 'lua_Number':'double'
|   `-CStyleCastExpr 0x5654000d2338 <col:23, col:30> 'lua_Number':'double' <IntegralToFloating>
|     `-ImplicitCastExpr 0x5654000d2320 <col:26, col:30> 'int' <LValueToRValue>
|       `-ParenExpr 0x5654000d2300 <col:26, col:30> 'int' lvalue
|         `-ParenExpr 0x5654000d22a0 <line:79:38, col:40> 'int' lvalue
|           `-DeclRefExpr 0x5654000d2278 <ltable.c:125:29> 'int' lvalue Var 0x5654000d20a0 'k' 'int'
`-ImplicitCastExpr 0x5654000d23e8 <./luaconf.h:540:32, col:34> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5654000d23c8 <col:32, col:34> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5654000d23a0 <ltable.c:125:33> 'lua_Number':'double' lvalue Var 0x5654000d1f08 'n' 'lua_Number':'double'
(([B3.15])) == [B3.17]
   T: if ([B3.18])
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5654000d1dc0 <ltable.c:121:18> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
key
   2: ImplicitCastExpr 0x5654000d1e08 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5654000d1de8 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5654000d1dc0 <ltable.c:121:18> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
([B4.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5654000d1e20 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5654000899e0
`-ImplicitCastExpr 0x5654000d1e08 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5654000d1de8 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5654000d1dc0 <ltable.c:121:18> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
[B4.2]->tt
   4: ImplicitCastExpr 0x5654000d1e98 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5654000d1e58 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5654000d1e20 <col:19, col:24> 'const int' lvalue ->tt 0x5654000899e0
    `-ImplicitCastExpr 0x5654000d1e08 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5654000d1de8 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5654000d1dc0 <ltable.c:121:18> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
([B4.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5654000d1e78 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5654000d1eb0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5654000d1e98 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5654000d1e58 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5654000d1e20 <col:19, col:24> 'const int' lvalue ->tt 0x5654000899e0
|     `-ImplicitCastExpr 0x5654000d1e08 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5654000d1de8 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5654000d1dc0 <ltable.c:121:18> 'const TValue *' lvalue ParmVar 0x5654000d1c10 'key' 'const TValue *'
`-IntegerLiteral 0x5654000d1e78 <./lua.h:77:22> 'int' 3
[B4.4] == [B4.5]
   T: if ([B4.6])
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
