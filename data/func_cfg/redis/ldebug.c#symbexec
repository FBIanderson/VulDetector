static Instruction symbexec(const Proto *pt, int lastpc, int reg)
 [B138 (ENTRY)]
   Succs (1): B137

 [B1]
   1: DeclRefExpr 0x555e97262510 <ldebug.c:474:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97262538 <ldebug.c:474:10> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97262510 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B1.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e97262550 <ldebug.c:474:10, col:14> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e97262538 <col:10> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97262510 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B1.2]->code
   4: ImplicitCastExpr 0x555e972625b0 <ldebug.c:474:10, col:14> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e97262550 <col:10, col:14> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e97262538 <col:10> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97262510 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B1.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e97262588 <ldebug.c:474:19> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
   6: ImplicitCastExpr 0x555e972625c8 <ldebug.c:474:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97262588 <col:19> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x555e972625e0 <ldebug.c:474:10, col:23> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e972625b0 <col:10, col:14> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e97262550 <col:10, col:14> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e97262538 <col:10> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97262510 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-ImplicitCastExpr 0x555e972625c8 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97262588 <col:19> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
[B1.4][[B1.6]]
   8: ImplicitCastExpr 0x555e97262608 <ldebug.c:474:10, col:23> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x555e972625e0 <col:10, col:23> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x555e972625b0 <col:10, col:14> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x555e97262550 <col:10, col:14> 'Instruction *const' lvalue ->code 0x555e971d9508
  |   `-ImplicitCastExpr 0x555e97262538 <col:10> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97262510 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-ImplicitCastExpr 0x555e972625c8 <col:19> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97262588 <col:19> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, Instruction)
   9: ReturnStmt 0x555e97262620 <ldebug.c:474:3, col:23>
`-ImplicitCastExpr 0x555e97262608 <col:10, col:23> 'Instruction':'unsigned int' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e972625e0 <col:10, col:23> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e972625b0 <col:10, col:14> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e97262550 <col:10, col:14> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e97262538 <col:10> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97262510 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-ImplicitCastExpr 0x555e972625c8 <col:19> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97262588 <col:19> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
return [B1.8];
   Preds (1): B134
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x555e97252478 <ldebug.c:322:29> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: UnaryOperator 0x555e972524a0 <ldebug.c:322:29, col:31> 'int' postfix '++'
`-DeclRefExpr 0x555e97252478 <col:29> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B2.1]++
   Preds (14): B4 B5 B15 B29 B36 B41 B53 B61
      B68 B71 B77 B81 B84 B88
   Succs (1): B134

 [B3]
   1: DeclRefExpr 0x555e9725a798 <ldebug.c:373:13> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
   2: ImplicitCastExpr 0x555e9725a7c0 <ldebug.c:373:13> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e9725a798 <col:13> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B3.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x555e9725a7d8 <ldebug.c:373:13> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725a7c0 <col:13> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e9725a798 <col:13> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B3.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B3.3]
   Preds (2): B97 B100
   Succs (19): B14 B28 B35 B39 B40 B52 B57 B58
     B60 B67 B70 B75 B76 B79 B80 B83 B87 B95
     B4

 [B4]
  default:
   T: break;
   Preds (1): B3
   Succs (1): B2

 [B5]
   T: break;
   Preds (1): B7
   Succs (1): B2

 [B6]
   1: IntegerLiteral 0x555e97262108 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97262128 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97262108 <col:36> 'int' 0
[B6.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97262140 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97262128 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97262108 <col:36> 'int' 0
return [B6.2];
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: DeclRefExpr 0x555e97261ec8 <ldebug.c:468:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e97261f18 <ldebug.c:468:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97261ec8 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e97261ef0 <ldebug.c:468:24> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e97261f30 <ldebug.c:468:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97261ef0 <col:24> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e97261f48 <ldebug.c:468:22, col:24> 'int' '+'
|-ImplicitCastExpr 0x555e97261f18 <col:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97261ec8 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e97261f30 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97261ef0 <col:24> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B7.2] + [B7.4]
   6: IntegerLiteral 0x555e97261f70 <ldebug.c:468:26> 'int' 1
1
   7: BinaryOperator 0x555e97261f90 <ldebug.c:468:22, col:26> 'int' '-'
|-BinaryOperator 0x555e97261f48 <col:22, col:24> 'int' '+'
| |-ImplicitCastExpr 0x555e97261f18 <col:22> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e97261ec8 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
| `-ImplicitCastExpr 0x555e97261f30 <col:24> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x555e97261ef0 <col:24> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e97261f70 <col:26> 'int' 1
[B7.5] - [B7.6]
   8: DeclRefExpr 0x555e97261fd8 <ldebug.c:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   9: ImplicitCastExpr 0x555e97262020 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e97262000 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e97261fd8 <line:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B7.8]) (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x555e97262038 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e97262020 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e97262000 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e97261fd8 <line:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B7.9]->maxstacksize
  11: ImplicitCastExpr 0x555e97262070 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e97262038 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e97262020 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e97262000 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e97261fd8 <line:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B7.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x555e97262088 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97262070 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e97262038 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e97262020 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e97262000 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e97261fd8 <line:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B7.11] (ImplicitCastExpr, IntegralCast, int)
  13: BinaryOperator 0x555e972620a0 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e97261fb8 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e97261f90 <line:468:22, col:26> 'int' '-'
|   |-BinaryOperator 0x555e97261f48 <col:22, col:24> 'int' '+'
|   | |-ImplicitCastExpr 0x555e97261f18 <col:22> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x555e97261ec8 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   | `-ImplicitCastExpr 0x555e97261f30 <col:24> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e97261ef0 <col:24> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
|   `-IntegerLiteral 0x555e97261f70 <col:26> 'int' 1
`-ImplicitCastExpr 0x555e97262088 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e97262070 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e97262038 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e97262020 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e97262000 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e97261fd8 <line:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B7.7]) < [B7.12]
  14: UnaryOperator 0x555e972620e8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e972620c8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972620a0 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e97261fb8 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e97261f90 <line:468:22, col:26> 'int' '-'
    |   |-BinaryOperator 0x555e97261f48 <col:22, col:24> 'int' '+'
    |   | |-ImplicitCastExpr 0x555e97261f18 <col:22> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x555e97261ec8 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   | `-ImplicitCastExpr 0x555e97261f30 <col:24> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e97261ef0 <col:24> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    |   `-IntegerLiteral 0x555e97261f70 <col:26> 'int' 1
    `-ImplicitCastExpr 0x555e97262088 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e97262070 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e97262038 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e97262020 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e97262000 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e97261fd8 <line:468:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B7.13])
   T: if [B7.14]
   Preds (2): B9 B10
   Succs (2): B6 B5

 [B8]
   1: IntegerLiteral 0x555e97261df8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97261e18 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97261df8 <col:36> 'int' 0
[B8.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97261e30 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97261e18 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97261df8 <col:36> 'int' 0
return [B8.2];
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: DeclRefExpr 0x555e97261bb0 <ldebug.c:288:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
luaG_checkopenop
   2: ImplicitCastExpr 0x555e97261d58 <ldebug.c:288:28> 'int (*)(Instruction)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97261bb0 <col:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(Instruction))
   3: DeclRefExpr 0x555e97261bd8 <ldebug.c:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e97261c20 <ldebug.c:288:45, col:48> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B9.3]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e97261c38 <ldebug.c:288:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e97261c20 <col:45, col:48> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B9.4]->code
   6: ImplicitCastExpr 0x555e97261d18 <ldebug.c:288:45, col:51> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e97261c38 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e97261c20 <col:45, col:48> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B9.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x555e97261c70 <ldebug.c:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   8: ImplicitCastExpr 0x555e97261cd8 <ldebug.c:288:56, col:59> 'int' <LValueToRValue>
`-ParenExpr 0x555e97261c98 <col:56, col:59> 'int' lvalue
  `-DeclRefExpr 0x555e97261c70 <line:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
([B9.7]) (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x555e97261cb8 <ldebug.c:288:61> 'int' 1
1
  10: BinaryOperator 0x555e97261cf0 <ldebug.c:288:56, col:61> 'int' '+'
|-ImplicitCastExpr 0x555e97261cd8 <col:56, col:59> 'int' <LValueToRValue>
| `-ParenExpr 0x555e97261c98 <col:56, col:59> 'int' lvalue
|   `-DeclRefExpr 0x555e97261c70 <line:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e97261cb8 <line:288:61> 'int' 1
[B9.8] + [B9.9]
  11: ArraySubscriptExpr 0x555e97261d30 <ldebug.c:288:45, col:62> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e97261d18 <col:45, col:51> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e97261c38 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e97261c20 <col:45, col:48> 'const Proto *' <LValueToRValue>
|     `-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
|       `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e97261cf0 <line:288:56, col:61> 'int' '+'
  |-ImplicitCastExpr 0x555e97261cd8 <col:56, col:59> 'int' <LValueToRValue>
  | `-ParenExpr 0x555e97261c98 <col:56, col:59> 'int' lvalue
  |   `-DeclRefExpr 0x555e97261c70 <line:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  `-IntegerLiteral 0x555e97261cb8 <line:288:61> 'int' 1
[B9.6][[B9.10]]
  12: ImplicitCastExpr 0x555e97261da0 <ldebug.c:288:45, col:62> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97261d30 <col:45, col:62> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x555e97261d18 <col:45, col:51> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x555e97261c38 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
  |   `-ImplicitCastExpr 0x555e97261c20 <col:45, col:48> 'const Proto *' <LValueToRValue>
  |     `-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
  |       `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-BinaryOperator 0x555e97261cf0 <line:288:56, col:61> 'int' '+'
    |-ImplicitCastExpr 0x555e97261cd8 <col:56, col:59> 'int' <LValueToRValue>
    | `-ParenExpr 0x555e97261c98 <col:56, col:59> 'int' lvalue
    |   `-DeclRefExpr 0x555e97261c70 <line:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    `-IntegerLiteral 0x555e97261cb8 <line:288:61> 'int' 1
[B9.11] (ImplicitCastExpr, LValueToRValue, Instruction)
  13: CallExpr 0x555e97261d70 <ldebug.c:288:28, col:63> 'int'
|-ImplicitCastExpr 0x555e97261d58 <col:28> 'int (*)(Instruction)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97261bb0 <col:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
`-ImplicitCastExpr 0x555e97261da0 <col:45, col:62> 'Instruction':'unsigned int' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e97261d30 <col:45, col:62> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e97261d18 <col:45, col:51> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e97261c38 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e97261c20 <col:45, col:48> 'const Proto *' <LValueToRValue>
    |     `-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
    |       `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-BinaryOperator 0x555e97261cf0 <line:288:56, col:61> 'int' '+'
      |-ImplicitCastExpr 0x555e97261cd8 <col:56, col:59> 'int' <LValueToRValue>
      | `-ParenExpr 0x555e97261c98 <col:56, col:59> 'int' lvalue
      |   `-DeclRefExpr 0x555e97261c70 <line:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      `-IntegerLiteral 0x555e97261cb8 <line:288:61> 'int' 1
[B9.2]([B9.12])
  14: UnaryOperator 0x555e97261dd8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97261db8 <col:24, col:26> 'int'
  `-CallExpr 0x555e97261d70 <line:288:28, col:63> 'int'
    |-ImplicitCastExpr 0x555e97261d58 <col:28> 'int (*)(Instruction)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97261bb0 <col:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
    `-ImplicitCastExpr 0x555e97261da0 <col:45, col:62> 'Instruction':'unsigned int' <LValueToRValue>
      `-ArraySubscriptExpr 0x555e97261d30 <col:45, col:62> 'Instruction':'unsigned int' lvalue
        |-ImplicitCastExpr 0x555e97261d18 <col:45, col:51> 'Instruction *' <LValueToRValue>
        | `-MemberExpr 0x555e97261c38 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
        |   `-ImplicitCastExpr 0x555e97261c20 <col:45, col:48> 'const Proto *' <LValueToRValue>
        |     `-ParenExpr 0x555e97261c00 <col:45, col:48> 'const Proto *' lvalue
        |       `-DeclRefExpr 0x555e97261bd8 <line:467:49> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
        `-BinaryOperator 0x555e97261cf0 <line:288:56, col:61> 'int' '+'
          |-ImplicitCastExpr 0x555e97261cd8 <col:56, col:59> 'int' <LValueToRValue>
          | `-ParenExpr 0x555e97261c98 <col:56, col:59> 'int' lvalue
          |   `-DeclRefExpr 0x555e97261c70 <line:467:53> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
          `-IntegerLiteral 0x555e97261cb8 <line:288:61> 'int' 1
!([B9.13])
   T: if [B9.14]
   Preds (1): B10
   Succs (2): B8 B7

 [B10]
   1: DeclRefExpr 0x555e97261aa0 <ldebug.c:466:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: UnaryOperator 0x555e97261ac8 <ldebug.c:466:9, col:10> 'int' postfix '--'
`-DeclRefExpr 0x555e97261aa0 <col:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B10.1]--
   3: DeclRefExpr 0x555e97261ae8 <ldebug.c:467:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e97261b70 <ldebug.c:467:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97261ae8 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e97261b10 <./lua.h:30:23> 'int' 1
1
   6: UnaryOperator 0x555e97261b30 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x555e97261b10 <col:23> 'int' 1
-[B10.5]
   7: BinaryOperator 0x555e97261b88 <ldebug.c:467:13, ./lua.h:30:24> 'int' '=='
|-ImplicitCastExpr 0x555e97261b70 <ldebug.c:467:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97261ae8 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ParenExpr 0x555e97261b50 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x555e97261b30 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x555e97261b10 <col:23> 'int' 1
[B10.4] == ([B10.6])
   T: if [B10.7]
   Preds (1): B12
   Succs (2): B9 B7

 [B11]
   1: IntegerLiteral 0x555e97261a08 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97261a28 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97261a08 <col:36> 'int' 0
[B11.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97261a40 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97261a28 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97261a08 <col:36> 'int' 0
return [B11.2];
   Preds (1): B12
   Succs (1): B0

 [B12]
   1: BinaryOperator 0x555e972619a0 <ldebug.c:464:15, line:465:47> 'int' '&&'
|-ParenExpr 0x555e97261850 <line:464:15, col:47> 'int'
| `-BinaryOperator 0x555e97261828 <col:16, ./lobject.h:258:26> 'int' '&'
|   |-ImplicitCastExpr 0x555e97261810 <ldebug.c:464:16, col:20> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x555e972617f8 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x555e972617a0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|   |     `-ImplicitCastExpr 0x555e97261788 <col:16> 'const Proto *' <LValueToRValue>
|   |       `-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|   `-IntegerLiteral 0x555e972617d8 <./lobject.h:258:26> 'int' 2
`-UnaryOperator 0x555e97261980 <ldebug.c:465:14, col:47> 'int' prefix '!'
  `-ParenExpr 0x555e97261960 <col:15, col:47> 'int'
    `-BinaryOperator 0x555e97261938 <col:16, ./lobject.h:259:26> 'int' '&'
      |-ImplicitCastExpr 0x555e97261920 <ldebug.c:465:16, col:20> 'int' <IntegralCast>
      | `-ImplicitCastExpr 0x555e97261908 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
      |   `-MemberExpr 0x555e972618b0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
      |     `-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
      |       `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      `-IntegerLiteral 0x555e972618e8 <./lobject.h:259:26> 'int' 4
([B14.7]) && [B13.8]
   2: UnaryOperator 0x555e972619e8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e972619c8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972619a0 <line:464:15, line:465:47> 'int' '&&'
    |-ParenExpr 0x555e97261850 <line:464:15, col:47> 'int'
    | `-BinaryOperator 0x555e97261828 <col:16, ./lobject.h:258:26> 'int' '&'
    |   |-ImplicitCastExpr 0x555e97261810 <ldebug.c:464:16, col:20> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e972617f8 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-MemberExpr 0x555e972617a0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |   |     `-ImplicitCastExpr 0x555e97261788 <col:16> 'const Proto *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |   `-IntegerLiteral 0x555e972617d8 <./lobject.h:258:26> 'int' 2
    `-UnaryOperator 0x555e97261980 <ldebug.c:465:14, col:47> 'int' prefix '!'
      `-ParenExpr 0x555e97261960 <col:15, col:47> 'int'
        `-BinaryOperator 0x555e97261938 <col:16, ./lobject.h:259:26> 'int' '&'
          |-ImplicitCastExpr 0x555e97261920 <ldebug.c:465:16, col:20> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x555e97261908 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
          |   `-MemberExpr 0x555e972618b0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
          |     `-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
          |       `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
          `-IntegerLiteral 0x555e972618e8 <./lobject.h:259:26> 'int' 4
!([B12.1])
   T: if [B12.2]
   Preds (2): B13 B14
   Succs (2): B11 B10

 [B13]
   1: DeclRefExpr 0x555e97261870 <ldebug.c:465:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97261898 <ldebug.c:465:16> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B13.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e972618b0 <ldebug.c:465:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
`-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B13.2]->is_vararg
   4: ImplicitCastExpr 0x555e97261908 <ldebug.c:465:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e972618b0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
  `-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B13.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x555e97261920 <ldebug.c:465:16, col:20> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97261908 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e972618b0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    `-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B13.4] (ImplicitCastExpr, IntegralCast, int)
   6: IntegerLiteral 0x555e972618e8 <./lobject.h:259:26> 'int' 4
4
   7: BinaryOperator 0x555e97261938 <ldebug.c:465:16, ./lobject.h:259:26> 'int' '&'
|-ImplicitCastExpr 0x555e97261920 <ldebug.c:465:16, col:20> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97261908 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e972618b0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     `-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-IntegerLiteral 0x555e972618e8 <./lobject.h:259:26> 'int' 4
[B13.5] & [B13.6]
   8: UnaryOperator 0x555e97261980 <ldebug.c:465:14, col:47> 'int' prefix '!'
`-ParenExpr 0x555e97261960 <col:15, col:47> 'int'
  `-BinaryOperator 0x555e97261938 <col:16, ./lobject.h:259:26> 'int' '&'
    |-ImplicitCastExpr 0x555e97261920 <ldebug.c:465:16, col:20> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e97261908 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x555e972618b0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |     `-ImplicitCastExpr 0x555e97261898 <col:16> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x555e97261870 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-IntegerLiteral 0x555e972618e8 <./lobject.h:259:26> 'int' 4
!([B13.7])
   Preds (1): B14
   Succs (1): B12

 [B14]
  case OP_VARARG:
   1: DeclRefExpr 0x555e97261760 <ldebug.c:464:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97261788 <ldebug.c:464:16> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B14.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e972617a0 <ldebug.c:464:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
`-ImplicitCastExpr 0x555e97261788 <col:16> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B14.2]->is_vararg
   4: ImplicitCastExpr 0x555e972617f8 <ldebug.c:464:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e972617a0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
  `-ImplicitCastExpr 0x555e97261788 <col:16> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B14.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x555e97261810 <ldebug.c:464:16, col:20> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e972617f8 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e972617a0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    `-ImplicitCastExpr 0x555e97261788 <col:16> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B14.4] (ImplicitCastExpr, IntegralCast, int)
   6: IntegerLiteral 0x555e972617d8 <./lobject.h:258:26> 'int' 2
2
   7: BinaryOperator 0x555e97261828 <ldebug.c:464:16, ./lobject.h:258:26> 'int' '&'
|-ImplicitCastExpr 0x555e97261810 <ldebug.c:464:16, col:20> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e972617f8 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e972617a0 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     `-ImplicitCastExpr 0x555e97261788 <col:16> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e97261760 <col:16> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-IntegerLiteral 0x555e972617d8 <./lobject.h:258:26> 'int' 2
[B14.5] & [B14.6]
   T: ([B14.7]) && ...
   Preds (1): B3
   Succs (2): B13 B12

 [B15]
   T: break;
   Preds (2): B16 B17
   Succs (1): B2

 [B16]
   1: DeclRefExpr 0x555e972615c8 <ldebug.c:460:11> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: DeclRefExpr 0x555e972615f0 <ldebug.c:460:17> 'int' lvalue Var 0x555e97260410 'nup' 'int'
nup
   3: ImplicitCastExpr 0x555e97261618 <ldebug.c:460:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972615f0 <col:17> 'int' lvalue Var 0x555e97260410 'nup' 'int'
[B16.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CompoundAssignOperator 0x555e97261630 <ldebug.c:460:11, col:17> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x555e972615c8 <col:11> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-ImplicitCastExpr 0x555e97261618 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e972615f0 <col:17> 'int' lvalue Var 0x555e97260410 'nup' 'int'
[B16.1] += [B16.3]
   Preds (1): B17
   Succs (1): B15

 [B17]
   1: DeclRefExpr 0x555e97261470 <ldebug.c:459:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   2: ImplicitCastExpr 0x555e97261588 <ldebug.c:459:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97261470 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B17.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e97261498 <./lopcodes.h:65:27> 'int' 1
1
   4: IntegerLiteral 0x555e972614b8 <./lopcodes.h:40:17> 'int' 8
8
   5: BinaryOperator 0x555e972614d8 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x555e97261498 <line:65:27> 'int' 1
`-IntegerLiteral 0x555e972614b8 <line:40:17> 'int' 8
[B17.3] << [B17.4]
   6: IntegerLiteral 0x555e97261520 <./lopcodes.h:65:38> 'int' 1
1
   7: BinaryOperator 0x555e97261540 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x555e97261500 <col:26, col:36> 'int'
| `-BinaryOperator 0x555e972614d8 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x555e97261498 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x555e972614b8 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e97261520 <line:65:38> 'int' 1
([B17.5]) - [B17.6]
   8: BinaryOperator 0x555e972615a0 <ldebug.c:459:13, ./lopcodes.h:65:39> 'int' '!='
|-ImplicitCastExpr 0x555e97261588 <ldebug.c:459:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97261470 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
`-ParenExpr 0x555e97261568 <./lopcodes.h:65:25, col:39> 'int'
  `-BinaryOperator 0x555e97261540 <col:26, col:38> 'int' '-'
    |-ParenExpr 0x555e97261500 <col:26, col:36> 'int'
    | `-BinaryOperator 0x555e972614d8 <col:27, line:40:17> 'int' '<<'
    |   |-IntegerLiteral 0x555e97261498 <line:65:27> 'int' 1
    |   `-IntegerLiteral 0x555e972614b8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e97261520 <line:65:38> 'int' 1
[B17.2] != ([B17.7])
   T: if [B17.8]
   Preds (1): B23
   Succs (2): B16 B15

 [B18]
   1: DeclRefExpr 0x555e97260c00 <ldebug.c:455:31> 'int' lvalue Var 0x555e97260488 'j' 'int'
j
   2: UnaryOperator 0x555e97260c28 <ldebug.c:455:31, col:32> 'int' postfix '++'
`-DeclRefExpr 0x555e97260c00 <col:31> 'int' lvalue Var 0x555e97260488 'j' 'int'
[B18.1]++
   Preds (1): B20
   Succs (1): B23

 [B19]
   1: IntegerLiteral 0x555e97261350 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97261370 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97261350 <col:36> 'int' 0
[B19.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97261388 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97261370 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97261350 <col:36> 'int' 0
return [B19.2];
   Preds (1): B20
   Succs (1): B0

 [B20]
   1: BinaryOperator 0x555e972612e8 <ldebug.c:457:17, col:46> 'int' '||'
|-BinaryOperator 0x555e97261200 <col:17, col:24> 'int' '=='
| |-ImplicitCastExpr 0x555e972611d0 <col:17> 'unsigned int' <IntegralCast>
| | `-ImplicitCastExpr 0x555e972611b8 <col:17> 'OpCode':'OpCode' <LValueToRValue>
| |   `-DeclRefExpr 0x555e97261168 <col:17> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
| `-ImplicitCastExpr 0x555e972611e8 <col:24> 'unsigned int' <IntegralCast>
|   `-DeclRefExpr 0x555e97261190 <col:24> 'int' EnumConstant 0x555e971f1690 'OP_GETUPVAL' 'int'
`-BinaryOperator 0x555e972612c0 <col:39, col:46> 'int' '=='
  |-ImplicitCastExpr 0x555e97261290 <col:39> 'unsigned int' <IntegralCast>
  | `-ImplicitCastExpr 0x555e97261278 <col:39> 'OpCode':'OpCode' <LValueToRValue>
  |   `-DeclRefExpr 0x555e97261228 <col:39> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
  `-ImplicitCastExpr 0x555e972612a8 <col:46> 'unsigned int' <IntegralCast>
    `-DeclRefExpr 0x555e97261250 <col:46> 'int' EnumConstant 0x555e971f1570 'OP_MOVE' 'int'
[B22.30] || [B21.6]
   2: UnaryOperator 0x555e97261330 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97261310 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972612e8 <line:457:17, col:46> 'int' '||'
    |-BinaryOperator 0x555e97261200 <col:17, col:24> 'int' '=='
    | |-ImplicitCastExpr 0x555e972611d0 <col:17> 'unsigned int' <IntegralCast>
    | | `-ImplicitCastExpr 0x555e972611b8 <col:17> 'OpCode':'OpCode' <LValueToRValue>
    | |   `-DeclRefExpr 0x555e97261168 <col:17> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
    | `-ImplicitCastExpr 0x555e972611e8 <col:24> 'unsigned int' <IntegralCast>
    |   `-DeclRefExpr 0x555e97261190 <col:24> 'int' EnumConstant 0x555e971f1690 'OP_GETUPVAL' 'int'
    `-BinaryOperator 0x555e972612c0 <col:39, col:46> 'int' '=='
      |-ImplicitCastExpr 0x555e97261290 <col:39> 'unsigned int' <IntegralCast>
      | `-ImplicitCastExpr 0x555e97261278 <col:39> 'OpCode':'OpCode' <LValueToRValue>
      |   `-DeclRefExpr 0x555e97261228 <col:39> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
      `-ImplicitCastExpr 0x555e972612a8 <col:46> 'unsigned int' <IntegralCast>
        `-DeclRefExpr 0x555e97261250 <col:46> 'int' EnumConstant 0x555e971f1570 'OP_MOVE' 'int'
!([B20.1])
   T: if [B20.2]
   Preds (2): B21 B22
   Succs (2): B19 B18

 [B21]
   1: DeclRefExpr 0x555e97261228 <ldebug.c:457:39> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
op1
   2: ImplicitCastExpr 0x555e97261278 <ldebug.c:457:39> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97261228 <col:39> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
[B21.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x555e97261290 <ldebug.c:457:39> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x555e97261278 <col:39> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97261228 <col:39> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
[B21.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x555e97261250 <ldebug.c:457:46> 'int' EnumConstant 0x555e971f1570 'OP_MOVE' 'int'
OP_MOVE
   5: ImplicitCastExpr 0x555e972612a8 <ldebug.c:457:46> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e97261250 <col:46> 'int' EnumConstant 0x555e971f1570 'OP_MOVE' 'int'
[B21.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: BinaryOperator 0x555e972612c0 <ldebug.c:457:39, col:46> 'int' '=='
|-ImplicitCastExpr 0x555e97261290 <col:39> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97261278 <col:39> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x555e97261228 <col:39> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x555e972612a8 <col:46> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e97261250 <col:46> 'int' EnumConstant 0x555e971f1570 'OP_MOVE' 'int'
[B21.3] == [B21.5]
   Preds (1): B22
   Succs (1): B20

 [B22]
   1: DeclRefExpr 0x555e97260cb8 <ldebug.c:456:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97260ce0 <ldebug.c:456:35> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B22.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e97260cf8 <ldebug.c:456:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B22.2]->code
   4: ImplicitCastExpr 0x555e97260dd8 <ldebug.c:456:35, col:39> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B22.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e97260d30 <ldebug.c:456:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   6: ImplicitCastExpr 0x555e97260d80 <ldebug.c:456:44> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B22.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x555e97260d58 <ldebug.c:456:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
j
   8: ImplicitCastExpr 0x555e97260d98 <ldebug.c:456:49> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
[B22.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e97260db0 <ldebug.c:456:44, col:49> 'int' '+'
|-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
[B22.6] + [B22.8]
  10: ArraySubscriptExpr 0x555e97260df0 <ldebug.c:456:35, col:50> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e97260dd8 <col:35, col:39> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e97260db0 <col:44, col:49> 'int' '+'
  |-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  `-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
[B22.4][[B22.9]]
  11: ImplicitCastExpr 0x555e97260e58 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97260e18 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x555e97260df0 <ldebug.c:456:35, col:50> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e97260dd8 <col:35, col:39> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-BinaryOperator 0x555e97260db0 <col:44, col:49> 'int' '+'
      |-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      `-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
        `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
([B22.10]) (ImplicitCastExpr, LValueToRValue, Instruction)
  12: IntegerLiteral 0x555e97260e38 <./lopcodes.h:44:17> 'int' 0
0
  13: BinaryOperator 0x555e97260e70 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97260e58 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97260e18 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x555e97260df0 <ldebug.c:456:35, col:50> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x555e97260dd8 <col:35, col:39> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
|     |   `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|     `-BinaryOperator 0x555e97260db0 <col:44, col:49> 'int' '+'
|       |-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|       `-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
`-IntegerLiteral 0x555e97260e38 <./lopcodes.h:44:17> 'int' 0
[B22.11] >> [B22.12]
  14: IntegerLiteral 0x555e97260eb8 <./lopcodes.h:71:39> 'int' 0
0
  15: CStyleCastExpr 0x555e97260ee8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
(Instruction)[B22.14] (CStyleCastExpr, IntegralCast, Instruction)
  16: UnaryOperator 0x555e97260f10 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
~[B22.15]
  17: IntegerLiteral 0x555e97260f50 <./lopcodes.h:42:18> 'int' 6
6
  18: BinaryOperator 0x555e97260f70 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97260f30 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97260f10 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
`-IntegerLiteral 0x555e97260f50 <line:42:18> 'int' 6
([B22.16]) << [B22.17]
  19: UnaryOperator 0x555e97260fb8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97260f98 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97260f70 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97260f30 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97260f10 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97260f50 <line:42:18> 'int' 6
~([B22.18])
  20: IntegerLiteral 0x555e97260ff8 <./lopcodes.h:80:67> 'int' 0
0
  21: BinaryOperator 0x555e97261018 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97260fd8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97260fb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97260f98 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97260f70 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97260f30 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97260f10 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97260f50 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97260ff8 <line:80:67> 'int' 0
([B22.19]) << [B22.20]
  22: BinaryOperator 0x555e97261060 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97260e98 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97260e70 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97260e58 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97260e18 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x555e97260df0 <ldebug.c:456:35, col:50> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x555e97260dd8 <col:35, col:39> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
|   |     |   `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|   |     `-BinaryOperator 0x555e97260db0 <col:44, col:49> 'int' '+'
|   |       |-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|   |       `-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
|   `-IntegerLiteral 0x555e97260e38 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e97261040 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97261018 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97260fd8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97260fb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97260f98 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97260f70 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97260f30 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97260f10 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97260f50 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e97260ff8 <line:80:67> 'int' 0
([B22.13]) & ([B22.21])
  23: CStyleCastExpr 0x555e972610e8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e972610c8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97261060 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97260e98 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97260e70 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97260e58 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97260e18 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x555e97260df0 <ldebug.c:456:35, col:50> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x555e97260dd8 <col:35, col:39> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   |     |   `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |   |     `-BinaryOperator 0x555e97260db0 <col:44, col:49> 'int' '+'
    |   |       |-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    |   |       `-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
    |   `-IntegerLiteral 0x555e97260e38 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e97261040 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97261018 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97260fd8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97260fb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97260f98 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97260f70 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97260f30 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97260f10 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97260f50 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e97260ff8 <line:80:67> 'int' 0
(OpCode)([B22.22]) (CStyleCastExpr, IntegralCast, OpCode)
  24: DeclStmt 0x555e97261150 <ldebug.c:456:11, col:52>col:18
`-VarDecl 0x555e97260c58 <col:11, ./lopcodes.h:80:70> ldebug.c:456:18 used op1 'OpCode':'OpCode' cinit
  `-ParenExpr 0x555e97261130 <./lopcodes.h:80:23, col:70> 'OpCode':'OpCode'
    `-ParenExpr 0x555e97261110 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
      `-CStyleCastExpr 0x555e972610e8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
        `-ParenExpr 0x555e972610c8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97261060 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97260e98 <line:80:37, col:49> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97260e70 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e97260e58 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e97260e18 <col:38, col:40> 'Instruction':'unsigned int' lvalue
            |   |   `-ArraySubscriptExpr 0x555e97260df0 <ldebug.c:456:35, col:50> 'Instruction':'unsigned int' lvalue
            |   |     |-ImplicitCastExpr 0x555e97260dd8 <col:35, col:39> 'Instruction *' <LValueToRValue>
            |   |     | `-MemberExpr 0x555e97260cf8 <col:35, col:39> 'Instruction *const' lvalue ->code 0x555e971d9508
            |   |     |   `-ImplicitCastExpr 0x555e97260ce0 <col:35> 'const Proto *' <LValueToRValue>
            |   |     |     `-DeclRefExpr 0x555e97260cb8 <col:35> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
            |   |     `-BinaryOperator 0x555e97260db0 <col:44, col:49> 'int' '+'
            |   |       |-ImplicitCastExpr 0x555e97260d80 <col:44> 'int' <LValueToRValue>
            |   |       | `-DeclRefExpr 0x555e97260d30 <col:44> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
            |   |       `-ImplicitCastExpr 0x555e97260d98 <col:49> 'int' <LValueToRValue>
            |   |         `-DeclRefExpr 0x555e97260d58 <col:49> 'int' lvalue Var 0x555e97260488 'j' 'int'
            |   `-IntegerLiteral 0x555e97260e38 <./lopcodes.h:44:17> 'int' 0
            `-ParenExpr 0x555e97261040 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e97261018 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e97260fd8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97260fb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97260f98 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97260f70 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e97260f30 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e97260f10 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e97260ee8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97260eb8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e97260f50 <line:42:18> 'int' 6
                `-IntegerLiteral 0x555e97260ff8 <line:80:67> 'int' 0
OpCode op1 = (((OpCode)(((pt->code[pc + j]) >> 0) & ((~((~(Instruction)0) << 6)) << 0))));
  25: DeclRefExpr 0x555e97261168 <ldebug.c:457:17> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
op1
  26: ImplicitCastExpr 0x555e972611b8 <ldebug.c:457:17> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97261168 <col:17> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
[B22.25] (ImplicitCastExpr, LValueToRValue, OpCode)
  27: ImplicitCastExpr 0x555e972611d0 <ldebug.c:457:17> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x555e972611b8 <col:17> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97261168 <col:17> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
[B22.26] (ImplicitCastExpr, IntegralCast, unsigned int)
  28: DeclRefExpr 0x555e97261190 <ldebug.c:457:24> 'int' EnumConstant 0x555e971f1690 'OP_GETUPVAL' 'int'
OP_GETUPVAL
  29: ImplicitCastExpr 0x555e972611e8 <ldebug.c:457:24> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e97261190 <col:24> 'int' EnumConstant 0x555e971f1690 'OP_GETUPVAL' 'int'
[B22.28] (ImplicitCastExpr, IntegralCast, unsigned int)
  30: BinaryOperator 0x555e97261200 <ldebug.c:457:17, col:24> 'int' '=='
|-ImplicitCastExpr 0x555e972611d0 <col:17> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x555e972611b8 <col:17> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x555e97261168 <col:17> 'OpCode':'OpCode' lvalue Var 0x555e97260c58 'op1' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x555e972611e8 <col:24> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e97261190 <col:24> 'int' EnumConstant 0x555e971f1690 'OP_GETUPVAL' 'int'
[B22.27] == [B22.29]
   T: [B22.30] || ...
   Preds (1): B23
   Succs (2): B20 B21

 [B23]
   1: DeclRefExpr 0x555e97260b58 <ldebug.c:455:21> 'int' lvalue Var 0x555e97260488 'j' 'int'
j
   2: ImplicitCastExpr 0x555e97260ba8 <ldebug.c:455:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260b58 <col:21> 'int' lvalue Var 0x555e97260488 'j' 'int'
[B23.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e97260b80 <ldebug.c:455:26> 'int' lvalue Var 0x555e97260410 'nup' 'int'
nup
   4: ImplicitCastExpr 0x555e97260bc0 <ldebug.c:455:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260b80 <col:26> 'int' lvalue Var 0x555e97260410 'nup' 'int'
[B23.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e97260bd8 <ldebug.c:455:21, col:26> 'int' '<='
|-ImplicitCastExpr 0x555e97260ba8 <col:21> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97260b58 <col:21> 'int' lvalue Var 0x555e97260488 'j' 'int'
`-ImplicitCastExpr 0x555e97260bc0 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97260b80 <col:26> 'int' lvalue Var 0x555e97260410 'nup' 'int'
[B23.2] <= [B23.4]
   T: for (...; [B23.5]; ...)
   Preds (2): B18 B24
   Succs (2): B22 B17

 [B24]
   1: IntegerLiteral 0x555e97260b10 <ldebug.c:455:18> 'int' 1
1
   2: DeclRefExpr 0x555e97260ae8 <ldebug.c:455:14> 'int' lvalue Var 0x555e97260488 'j' 'int'
j
   3: BinaryOperator 0x555e97260b30 <ldebug.c:455:14, col:18> 'int' '='
|-DeclRefExpr 0x555e97260ae8 <col:14> 'int' lvalue Var 0x555e97260488 'j' 'int'
`-IntegerLiteral 0x555e97260b10 <col:18> 'int' 1
[B24.2] = [B24.1]
   Preds (1): B26
   Succs (1): B23

 [B25]
   1: IntegerLiteral 0x555e97260a50 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97260a70 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97260a50 <col:36> 'int' 0
[B25.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97260a88 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97260a70 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97260a50 <col:36> 'int' 0
return [B25.2];
   Preds (1): B26
   Succs (1): B0

 [B26]
   1: DeclRefExpr 0x555e97260710 <ldebug.c:453:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97260738 <ldebug.c:453:15> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e97260750 <ldebug.c:453:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
`-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.2]->p
   4: ImplicitCastExpr 0x555e972607b0 <ldebug.c:453:15, col:19> 'struct Proto **' <LValueToRValue>
`-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
  `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.3] (ImplicitCastExpr, LValueToRValue, struct Proto **)
   5: DeclRefExpr 0x555e97260788 <ldebug.c:453:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   6: ImplicitCastExpr 0x555e972607c8 <ldebug.c:453:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x555e972607e0 <ldebug.c:453:15, col:22> 'struct Proto *' lvalue
|-ImplicitCastExpr 0x555e972607b0 <col:15, col:19> 'struct Proto **' <LValueToRValue>
| `-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
|   `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-ImplicitCastExpr 0x555e972607c8 <col:21> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.4][[B26.6]]
   8: ImplicitCastExpr 0x555e97260808 <ldebug.c:453:15, col:22> 'struct Proto *' <LValueToRValue>
`-ArraySubscriptExpr 0x555e972607e0 <col:15, col:22> 'struct Proto *' lvalue
  |-ImplicitCastExpr 0x555e972607b0 <col:15, col:19> 'struct Proto **' <LValueToRValue>
  | `-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
  |   `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-ImplicitCastExpr 0x555e972607c8 <col:21> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.7] (ImplicitCastExpr, LValueToRValue, struct Proto *)
   9: MemberExpr 0x555e97260820 <ldebug.c:453:15, col:25> 'lu_byte':'unsigned char' lvalue ->nups 0x555e971d9f78
`-ImplicitCastExpr 0x555e97260808 <col:15, col:22> 'struct Proto *' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e972607e0 <col:15, col:22> 'struct Proto *' lvalue
    |-ImplicitCastExpr 0x555e972607b0 <col:15, col:19> 'struct Proto **' <LValueToRValue>
    | `-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
    |   `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-ImplicitCastExpr 0x555e972607c8 <col:21> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.8]->nups
  10: ImplicitCastExpr 0x555e97260858 <ldebug.c:453:15, col:25> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e97260820 <col:15, col:25> 'lu_byte':'unsigned char' lvalue ->nups 0x555e971d9f78
  `-ImplicitCastExpr 0x555e97260808 <col:15, col:22> 'struct Proto *' <LValueToRValue>
    `-ArraySubscriptExpr 0x555e972607e0 <col:15, col:22> 'struct Proto *' lvalue
      |-ImplicitCastExpr 0x555e972607b0 <col:15, col:19> 'struct Proto **' <LValueToRValue>
      | `-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
      |   `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      `-ImplicitCastExpr 0x555e972607c8 <col:21> 'int' <LValueToRValue>
        `-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.9] (ImplicitCastExpr, LValueToRValue, lu_byte)
  11: ImplicitCastExpr 0x555e97260870 <ldebug.c:453:15, col:25> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97260858 <col:15, col:25> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e97260820 <col:15, col:25> 'lu_byte':'unsigned char' lvalue ->nups 0x555e971d9f78
    `-ImplicitCastExpr 0x555e97260808 <col:15, col:22> 'struct Proto *' <LValueToRValue>
      `-ArraySubscriptExpr 0x555e972607e0 <col:15, col:22> 'struct Proto *' lvalue
        |-ImplicitCastExpr 0x555e972607b0 <col:15, col:19> 'struct Proto **' <LValueToRValue>
        | `-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
        |   `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
        |     `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
        `-ImplicitCastExpr 0x555e972607c8 <col:21> 'int' <LValueToRValue>
          `-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.10] (ImplicitCastExpr, IntegralCast, int)
  12: DeclRefExpr 0x555e972606e8 <ldebug.c:453:9> 'int' lvalue Var 0x555e97260410 'nup' 'int'
nup
  13: BinaryOperator 0x555e97260888 <ldebug.c:453:9, col:25> 'int' '='
|-DeclRefExpr 0x555e972606e8 <col:9> 'int' lvalue Var 0x555e97260410 'nup' 'int'
`-ImplicitCastExpr 0x555e97260870 <col:15, col:25> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e97260858 <col:15, col:25> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e97260820 <col:15, col:25> 'lu_byte':'unsigned char' lvalue ->nups 0x555e971d9f78
      `-ImplicitCastExpr 0x555e97260808 <col:15, col:22> 'struct Proto *' <LValueToRValue>
        `-ArraySubscriptExpr 0x555e972607e0 <col:15, col:22> 'struct Proto *' lvalue
          |-ImplicitCastExpr 0x555e972607b0 <col:15, col:19> 'struct Proto **' <LValueToRValue>
          | `-MemberExpr 0x555e97260750 <col:15, col:19> 'struct Proto **const' lvalue ->p 0x555e971d9660
          |   `-ImplicitCastExpr 0x555e97260738 <col:15> 'const Proto *' <LValueToRValue>
          |     `-DeclRefExpr 0x555e97260710 <col:15> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
          `-ImplicitCastExpr 0x555e972607c8 <col:21> 'int' <LValueToRValue>
            `-DeclRefExpr 0x555e97260788 <col:21> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B26.12] = [B26.11]
  14: DeclRefExpr 0x555e972608b0 <ldebug.c:454:15> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
  15: ImplicitCastExpr 0x555e97260900 <ldebug.c:454:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972608b0 <col:15> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B26.14] (ImplicitCastExpr, LValueToRValue, int)
  16: DeclRefExpr 0x555e972608d8 <ldebug.c:454:20> 'int' lvalue Var 0x555e97260410 'nup' 'int'
nup
  17: ImplicitCastExpr 0x555e97260918 <ldebug.c:454:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972608d8 <col:20> 'int' lvalue Var 0x555e97260410 'nup' 'int'
[B26.16] (ImplicitCastExpr, LValueToRValue, int)
  18: BinaryOperator 0x555e97260930 <ldebug.c:454:15, col:20> 'int' '+'
|-ImplicitCastExpr 0x555e97260900 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972608b0 <col:15> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-ImplicitCastExpr 0x555e97260918 <col:20> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e972608d8 <col:20> 'int' lvalue Var 0x555e97260410 'nup' 'int'
[B26.15] + [B26.17]
  19: DeclRefExpr 0x555e97260958 <ldebug.c:454:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
  20: ImplicitCastExpr 0x555e97260980 <ldebug.c:454:26> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97260958 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.19] (ImplicitCastExpr, LValueToRValue, const Proto *)
  21: MemberExpr 0x555e97260998 <ldebug.c:454:26, col:30> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e97260980 <col:26> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97260958 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.20]->sizecode
  22: ImplicitCastExpr 0x555e972609d0 <ldebug.c:454:26, col:30> 'int' <LValueToRValue>
`-MemberExpr 0x555e97260998 <col:26, col:30> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e97260980 <col:26> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97260958 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.21] (ImplicitCastExpr, LValueToRValue, int)
  23: BinaryOperator 0x555e972609e8 <ldebug.c:454:15, col:30> 'int' '<'
|-BinaryOperator 0x555e97260930 <col:15, col:20> 'int' '+'
| |-ImplicitCastExpr 0x555e97260900 <col:15> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e972608b0 <col:15> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
| `-ImplicitCastExpr 0x555e97260918 <col:20> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x555e972608d8 <col:20> 'int' lvalue Var 0x555e97260410 'nup' 'int'
`-ImplicitCastExpr 0x555e972609d0 <col:26, col:30> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97260998 <col:26, col:30> 'const int' lvalue ->sizecode 0x555e971d9ce8
    `-ImplicitCastExpr 0x555e97260980 <col:26> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e97260958 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B26.18] < [B26.22]
  24: UnaryOperator 0x555e97260a30 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97260a10 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972609e8 <line:454:15, col:30> 'int' '<'
    |-BinaryOperator 0x555e97260930 <col:15, col:20> 'int' '+'
    | |-ImplicitCastExpr 0x555e97260900 <col:15> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x555e972608b0 <col:15> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    | `-ImplicitCastExpr 0x555e97260918 <col:20> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x555e972608d8 <col:20> 'int' lvalue Var 0x555e97260410 'nup' 'int'
    `-ImplicitCastExpr 0x555e972609d0 <col:26, col:30> 'int' <LValueToRValue>
      `-MemberExpr 0x555e97260998 <col:26, col:30> 'const int' lvalue ->sizecode 0x555e971d9ce8
        `-ImplicitCastExpr 0x555e97260980 <col:26> 'const Proto *' <LValueToRValue>
          `-DeclRefExpr 0x555e97260958 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B26.23])
   T: if [B26.24]
   Preds (1): B28
   Succs (2): B25 B24

 [B27]
   1: IntegerLiteral 0x555e97260650 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97260670 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97260650 <col:36> 'int' 0
[B27.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97260688 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97260670 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97260650 <col:36> 'int' 0
return [B27.2];
   Preds (1): B28
   Succs (1): B0

 [B28]
  case OP_CLOSURE:
   1: DeclStmt 0x555e9727a238 <ldebug.c:451:13>col:13
`-VarDecl 0x555e97260410 <col:9, col:13> col:13 used nup 'int'
int nup;
   2: DeclStmt 0x555e9727a120 <ldebug.c:451:18>col:18
`-VarDecl 0x555e97260488 <col:9, col:18> col:18 used j 'int'
int j;
   3: DeclRefExpr 0x555e97260518 <ldebug.c:452:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e972605b8 <ldebug.c:452:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260518 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B28.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x555e97260540 <ldebug.c:452:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e97260568 <ldebug.c:452:19> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97260540 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B28.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e97260580 <ldebug.c:452:19, col:23> 'const int' lvalue ->sizep 0x555e971d9da8
`-ImplicitCastExpr 0x555e97260568 <col:19> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97260540 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B28.6]->sizep
   8: ImplicitCastExpr 0x555e972605d0 <ldebug.c:452:19, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x555e97260580 <col:19, col:23> 'const int' lvalue ->sizep 0x555e971d9da8
  `-ImplicitCastExpr 0x555e97260568 <col:19> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97260540 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B28.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e972605e8 <ldebug.c:452:15, col:23> 'int' '<'
|-ImplicitCastExpr 0x555e972605b8 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97260518 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ImplicitCastExpr 0x555e972605d0 <col:19, col:23> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97260580 <col:19, col:23> 'const int' lvalue ->sizep 0x555e971d9da8
    `-ImplicitCastExpr 0x555e97260568 <col:19> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e97260540 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B28.4] < [B28.8]
  10: UnaryOperator 0x555e97260630 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97260610 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972605e8 <line:452:15, col:23> 'int' '<'
    |-ImplicitCastExpr 0x555e972605b8 <col:15> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e97260518 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    `-ImplicitCastExpr 0x555e972605d0 <col:19, col:23> 'int' <LValueToRValue>
      `-MemberExpr 0x555e97260580 <col:19, col:23> 'const int' lvalue ->sizep 0x555e971d9da8
        `-ImplicitCastExpr 0x555e97260568 <col:19> 'const Proto *' <LValueToRValue>
          `-DeclRefExpr 0x555e97260540 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B28.9])
   T: if [B28.10]
   Preds (1): B3
   Succs (2): B27 B26

 [B29]
   T: break;
   Preds (2): B31 B32
   Succs (1): B2

 [B30]
   1: IntegerLiteral 0x555e97260268 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97260288 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97260268 <col:36> 'int' 0
[B30.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e972602a0 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97260288 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97260268 <col:36> 'int' 0
return [B30.2];
   Preds (1): B31
   Succs (1): B0

 [B31]
   1: DeclRefExpr 0x555e972600a0 <ldebug.c:445:11> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: UnaryOperator 0x555e972600c8 <ldebug.c:445:11, col:13> 'int' postfix '++'
`-DeclRefExpr 0x555e972600a0 <col:11> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B31.1]++
   3: DeclRefExpr 0x555e972600e8 <ldebug.c:446:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   4: ImplicitCastExpr 0x555e972601e8 <ldebug.c:446:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972600e8 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B31.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x555e97260110 <ldebug.c:446:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e97260138 <ldebug.c:446:22> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97260110 <col:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B31.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e97260150 <ldebug.c:446:22, col:26> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e97260138 <col:22> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97260110 <col:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B31.6]->sizecode
   8: ImplicitCastExpr 0x555e972601a8 <ldebug.c:446:22, col:26> 'int' <LValueToRValue>
`-MemberExpr 0x555e97260150 <col:22, col:26> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e97260138 <col:22> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97260110 <col:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B31.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x555e97260188 <ldebug.c:446:37> 'int' 1
1
  10: BinaryOperator 0x555e972601c0 <ldebug.c:446:22, col:37> 'int' '-'
|-ImplicitCastExpr 0x555e972601a8 <col:22, col:26> 'int' <LValueToRValue>
| `-MemberExpr 0x555e97260150 <col:22, col:26> 'const int' lvalue ->sizecode 0x555e971d9ce8
|   `-ImplicitCastExpr 0x555e97260138 <col:22> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97260110 <col:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-IntegerLiteral 0x555e97260188 <col:37> 'int' 1
[B31.8] - [B31.9]
  11: BinaryOperator 0x555e97260200 <ldebug.c:446:17, col:37> 'int' '<'
|-ImplicitCastExpr 0x555e972601e8 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972600e8 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-BinaryOperator 0x555e972601c0 <col:22, col:37> 'int' '-'
  |-ImplicitCastExpr 0x555e972601a8 <col:22, col:26> 'int' <LValueToRValue>
  | `-MemberExpr 0x555e97260150 <col:22, col:26> 'const int' lvalue ->sizecode 0x555e971d9ce8
  |   `-ImplicitCastExpr 0x555e97260138 <col:22> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97260110 <col:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-IntegerLiteral 0x555e97260188 <col:37> 'int' 1
[B31.4] < [B31.10]
  12: UnaryOperator 0x555e97260248 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97260228 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e97260200 <line:446:17, col:37> 'int' '<'
    |-ImplicitCastExpr 0x555e972601e8 <col:17> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e972600e8 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    `-BinaryOperator 0x555e972601c0 <col:22, col:37> 'int' '-'
      |-ImplicitCastExpr 0x555e972601a8 <col:22, col:26> 'int' <LValueToRValue>
      | `-MemberExpr 0x555e97260150 <col:22, col:26> 'const int' lvalue ->sizecode 0x555e971d9ce8
      |   `-ImplicitCastExpr 0x555e97260138 <col:22> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e97260110 <col:22> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      `-IntegerLiteral 0x555e97260188 <col:37> 'int' 1
!([B31.11])
   T: if [B31.12]
   Preds (1): B32
   Succs (2): B30 B29

 [B32]
   1: DeclRefExpr 0x555e97260018 <ldebug.c:444:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   2: ImplicitCastExpr 0x555e97260060 <ldebug.c:444:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97260018 <col:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B32.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e97260040 <ldebug.c:444:18> 'int' 0
0
   4: BinaryOperator 0x555e97260078 <ldebug.c:444:13, col:18> 'int' '=='
|-ImplicitCastExpr 0x555e97260060 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97260018 <col:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-IntegerLiteral 0x555e97260040 <col:18> 'int' 0
[B32.2] == [B32.3]
   T: if [B32.4]
   Preds (2): B34 B35
   Succs (2): B31 B29

 [B33]
   1: IntegerLiteral 0x555e9725ff48 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725ff68 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725ff48 <col:36> 'int' 0
[B33.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725ff80 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725ff68 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725ff48 <col:36> 'int' 0
return [B33.2];
   Preds (1): B34
   Succs (1): B0

 [B34]
   1: DeclRefExpr 0x555e9725fd50 <ldebug.c:443:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725fda0 <ldebug.c:443:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725fd50 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B34.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725fd78 <ldebug.c:443:37> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e9725fdb8 <ldebug.c:443:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725fd78 <col:37> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B34.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725fdd0 <ldebug.c:443:33, col:37> 'int' '+'
|-ImplicitCastExpr 0x555e9725fda0 <col:33> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725fd50 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e9725fdb8 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725fd78 <col:37> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B34.2] + [B34.4]
   6: DeclRefExpr 0x555e9725fe18 <ldebug.c:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   7: ImplicitCastExpr 0x555e9725fe60 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725fe40 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725fe18 <line:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B34.6]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x555e9725fe78 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725fe60 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725fe40 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725fe18 <line:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B34.7]->maxstacksize
   9: ImplicitCastExpr 0x555e9725feb0 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725fe78 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725fe60 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725fe40 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725fe18 <line:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B34.8] (ImplicitCastExpr, LValueToRValue, lu_byte)
  10: ImplicitCastExpr 0x555e9725fec8 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725feb0 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725fe78 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725fe60 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725fe40 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725fe18 <line:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B34.9] (ImplicitCastExpr, IntegralCast, int)
  11: BinaryOperator 0x555e9725fee0 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725fdf8 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725fdd0 <line:443:33, col:37> 'int' '+'
|   |-ImplicitCastExpr 0x555e9725fda0 <col:33> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x555e9725fd50 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   `-ImplicitCastExpr 0x555e9725fdb8 <col:37> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x555e9725fd78 <col:37> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ImplicitCastExpr 0x555e9725fec8 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725feb0 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725fe78 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725fe60 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725fe40 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725fe18 <line:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B34.5]) < [B34.10]
  12: UnaryOperator 0x555e9725ff28 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725ff08 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725fee0 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725fdf8 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725fdd0 <line:443:33, col:37> 'int' '+'
    |   |-ImplicitCastExpr 0x555e9725fda0 <col:33> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e9725fd50 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   `-ImplicitCastExpr 0x555e9725fdb8 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x555e9725fd78 <col:37> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    `-ImplicitCastExpr 0x555e9725fec8 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725feb0 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725fe78 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725fe60 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725fe40 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725fe18 <line:443:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B34.11])
   T: if [B34.12]
   Preds (1): B35
   Succs (2): B33 B32

 [B35]
  case OP_SETLIST:
   1: DeclRefExpr 0x555e9725fcc8 <ldebug.c:443:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: ImplicitCastExpr 0x555e9725fd10 <ldebug.c:443:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725fcc8 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B35.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725fcf0 <ldebug.c:443:17> 'int' 0
0
   4: BinaryOperator 0x555e9725fd28 <ldebug.c:443:13, col:17> 'int' '>'
|-ImplicitCastExpr 0x555e9725fd10 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725fcc8 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e9725fcf0 <col:17> 'int' 0
[B35.2] > [B35.3]
   T: if [B35.4]
   Preds (1): B3
   Succs (2): B34 B32

 [B36]
   T: break;
   Preds (2): B38 B39
   Succs (1): B2

 [B37]
   1: IntegerLiteral 0x555e9725fb60 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725fb80 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725fb60 <col:36> 'int' 0
[B37.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725fb98 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725fb80 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725fb60 <col:36> 'int' 0
return [B37.2];
   Preds (1): B38
   Succs (1): B0

 [B38]
   1: DeclRefExpr 0x555e9725f920 <ldebug.c:439:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725f970 <ldebug.c:439:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f920 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B38.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725f948 <ldebug.c:439:35> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e9725f988 <ldebug.c:439:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f948 <col:35> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B38.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725f9a0 <ldebug.c:439:33, col:35> 'int' '+'
|-ImplicitCastExpr 0x555e9725f970 <col:33> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725f920 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e9725f988 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725f948 <col:35> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B38.2] + [B38.4]
   6: IntegerLiteral 0x555e9725f9c8 <ldebug.c:439:37> 'int' 1
1
   7: BinaryOperator 0x555e9725f9e8 <ldebug.c:439:33, col:37> 'int' '-'
|-BinaryOperator 0x555e9725f9a0 <col:33, col:35> 'int' '+'
| |-ImplicitCastExpr 0x555e9725f970 <col:33> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e9725f920 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
| `-ImplicitCastExpr 0x555e9725f988 <col:35> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x555e9725f948 <col:35> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e9725f9c8 <col:37> 'int' 1
[B38.5] - [B38.6]
   8: DeclRefExpr 0x555e9725fa30 <ldebug.c:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   9: ImplicitCastExpr 0x555e9725fa78 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725fa58 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725fa30 <line:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B38.8]) (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x555e9725fa90 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725fa78 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725fa58 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725fa30 <line:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B38.9]->maxstacksize
  11: ImplicitCastExpr 0x555e9725fac8 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725fa90 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725fa78 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725fa58 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725fa30 <line:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B38.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x555e9725fae0 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725fac8 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725fa90 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725fa78 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725fa58 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725fa30 <line:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B38.11] (ImplicitCastExpr, IntegralCast, int)
  13: BinaryOperator 0x555e9725faf8 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725fa10 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725f9e8 <line:439:33, col:37> 'int' '-'
|   |-BinaryOperator 0x555e9725f9a0 <col:33, col:35> 'int' '+'
|   | |-ImplicitCastExpr 0x555e9725f970 <col:33> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x555e9725f920 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   | `-ImplicitCastExpr 0x555e9725f988 <col:35> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e9725f948 <col:35> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
|   `-IntegerLiteral 0x555e9725f9c8 <col:37> 'int' 1
`-ImplicitCastExpr 0x555e9725fae0 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725fac8 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725fa90 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725fa78 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725fa58 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725fa30 <line:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B38.7]) < [B38.12]
  14: UnaryOperator 0x555e9725fb40 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725fb20 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725faf8 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725fa10 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725f9e8 <line:439:33, col:37> 'int' '-'
    |   |-BinaryOperator 0x555e9725f9a0 <col:33, col:35> 'int' '+'
    |   | |-ImplicitCastExpr 0x555e9725f970 <col:33> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x555e9725f920 <col:33> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   | `-ImplicitCastExpr 0x555e9725f988 <col:35> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e9725f948 <col:35> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    |   `-IntegerLiteral 0x555e9725f9c8 <col:37> 'int' 1
    `-ImplicitCastExpr 0x555e9725fae0 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725fac8 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725fa90 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725fa78 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725fa58 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725fa30 <line:439:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B38.13])
   T: if [B38.14]
   Preds (1): B39
   Succs (2): B37 B36

 [B39]
  case OP_RETURN:
   1: DeclRefExpr 0x555e9725f850 <ldebug.c:438:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: UnaryOperator 0x555e9725f878 <ldebug.c:438:9, col:10> 'int' postfix '--'
`-DeclRefExpr 0x555e9725f850 <col:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B39.1]--
   3: DeclRefExpr 0x555e9725f898 <ldebug.c:439:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e9725f8e0 <ldebug.c:439:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f898 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B39.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9725f8c0 <ldebug.c:439:17> 'int' 0
0
   6: BinaryOperator 0x555e9725f8f8 <ldebug.c:439:13, col:17> 'int' '>'
|-ImplicitCastExpr 0x555e9725f8e0 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725f898 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e9725f8c0 <col:17> 'int' 0
[B39.4] > [B39.5]
   T: if [B39.6]
   Preds (1): B3
   Succs (2): B38 B36

 [B40]
  case OP_CALL:
   Preds (1): B3
   Succs (1): B52

 [B41]
   T: break;
   Preds (2): B42 B43
   Succs (1): B2

 [B42]
   1: DeclRefExpr 0x555e9725f708 <ldebug.c:434:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725f730 <ldebug.c:434:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f708 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B42.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725f6e0 <ldebug.c:434:23> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
   4: BinaryOperator 0x555e9725f748 <ldebug.c:434:23, col:30> 'int' '='
|-DeclRefExpr 0x555e9725f6e0 <col:23> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
`-ImplicitCastExpr 0x555e9725f730 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725f708 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B42.3] = [B42.2]
   Preds (1): B43
   Succs (1): B41

 [B43]
   1: DeclRefExpr 0x555e9725f638 <ldebug.c:434:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   2: ImplicitCastExpr 0x555e9725f688 <ldebug.c:434:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f638 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B43.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725f660 <ldebug.c:434:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   4: ImplicitCastExpr 0x555e9725f6a0 <ldebug.c:434:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f660 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B43.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725f6b8 <ldebug.c:434:13, col:20> 'int' '>='
|-ImplicitCastExpr 0x555e9725f688 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725f638 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
`-ImplicitCastExpr 0x555e9725f6a0 <col:20> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725f660 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B43.2] >= [B43.4]
   T: if [B43.5]
   Preds (3): B45 B46 B48
   Succs (2): B42 B41

 [B44]
   1: IntegerLiteral 0x555e9725f530 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725f550 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725f530 <col:36> 'int' 0
[B44.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725f568 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725f550 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725f530 <col:36> 'int' 0
return [B44.2];
   Preds (1): B45
   Succs (1): B0

 [B45]
   1: DeclRefExpr 0x555e9725f2c8 <ldebug.c:433:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725f318 <ldebug.c:433:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f2c8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B45.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725f2f0 <ldebug.c:433:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   4: ImplicitCastExpr 0x555e9725f330 <ldebug.c:433:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f2f0 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B45.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725f348 <ldebug.c:433:24, col:26> 'int' '+'
|-ImplicitCastExpr 0x555e9725f318 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725f2c8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e9725f330 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725f2f0 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B45.2] + [B45.4]
   6: IntegerLiteral 0x555e9725f370 <ldebug.c:433:28> 'int' 1
1
   7: BinaryOperator 0x555e9725f390 <ldebug.c:433:24, col:28> 'int' '-'
|-BinaryOperator 0x555e9725f348 <col:24, col:26> 'int' '+'
| |-ImplicitCastExpr 0x555e9725f318 <col:24> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e9725f2c8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
| `-ImplicitCastExpr 0x555e9725f330 <col:26> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x555e9725f2f0 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-IntegerLiteral 0x555e9725f370 <col:28> 'int' 1
[B45.5] - [B45.6]
   8: DeclRefExpr 0x555e9725f3d8 <ldebug.c:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   9: ImplicitCastExpr 0x555e9725f420 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725f400 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725f3d8 <line:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B45.8]) (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x555e9725f460 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725f420 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725f400 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725f3d8 <line:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B45.9]->maxstacksize
  11: ImplicitCastExpr 0x555e9725f498 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725f460 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725f420 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725f400 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725f3d8 <line:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B45.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x555e9725f4b0 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725f498 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725f460 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725f420 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725f400 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725f3d8 <line:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B45.11] (ImplicitCastExpr, IntegralCast, int)
  13: BinaryOperator 0x555e9725f4c8 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725f3b8 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725f390 <line:433:24, col:28> 'int' '-'
|   |-BinaryOperator 0x555e9725f348 <col:24, col:26> 'int' '+'
|   | |-ImplicitCastExpr 0x555e9725f318 <col:24> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x555e9725f2c8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   | `-ImplicitCastExpr 0x555e9725f330 <col:26> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e9725f2f0 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
|   `-IntegerLiteral 0x555e9725f370 <col:28> 'int' 1
`-ImplicitCastExpr 0x555e9725f4b0 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725f498 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725f460 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725f420 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725f400 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725f3d8 <line:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B45.7]) < [B45.12]
  14: UnaryOperator 0x555e9725f510 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725f4f0 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725f4c8 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725f3b8 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725f390 <line:433:24, col:28> 'int' '-'
    |   |-BinaryOperator 0x555e9725f348 <col:24, col:26> 'int' '+'
    |   | |-ImplicitCastExpr 0x555e9725f318 <col:24> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x555e9725f2c8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   | `-ImplicitCastExpr 0x555e9725f330 <col:26> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e9725f2f0 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
    |   `-IntegerLiteral 0x555e9725f370 <col:28> 'int' 1
    `-ImplicitCastExpr 0x555e9725f4b0 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725f498 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725f460 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725f420 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725f400 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725f3d8 <line:433:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B45.13])
   T: if [B45.14]
   Preds (1): B46
   Succs (2): B44 B43

 [B46]
   1: DeclRefExpr 0x555e9725f240 <ldebug.c:432:18> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   2: ImplicitCastExpr 0x555e9725f288 <ldebug.c:432:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725f240 <col:18> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B46.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725f268 <ldebug.c:432:23> 'int' 0
0
   4: BinaryOperator 0x555e9725f2a0 <ldebug.c:432:18, col:23> 'int' '!='
|-ImplicitCastExpr 0x555e9725f288 <col:18> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725f240 <col:18> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-IntegerLiteral 0x555e9725f268 <col:23> 'int' 0
[B46.2] != [B46.3]
   T: if [B46.4]
   Preds (1): B49
   Succs (2): B45 B43

 [B47]
   1: IntegerLiteral 0x555e9725f188 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725f1a8 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725f188 <col:36> 'int' 0
[B47.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725f1c0 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725f1a8 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725f188 <col:36> 'int' 0
return [B47.2];
   Preds (1): B48
   Succs (1): B0

 [B48]
   1: DeclRefExpr 0x555e9725eee8 <ldebug.c:288:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
luaG_checkopenop
   2: ImplicitCastExpr 0x555e9725f0e8 <ldebug.c:288:28> 'int (*)(Instruction)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e9725eee8 <col:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
[B48.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(Instruction))
   3: DeclRefExpr 0x555e9725ef10 <ldebug.c:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e9725ef58 <ldebug.c:288:45, col:48> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B48.3]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e9725ef70 <ldebug.c:288:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e9725ef58 <col:45, col:48> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B48.4]->code
   6: ImplicitCastExpr 0x555e9725f050 <ldebug.c:288:45, col:51> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e9725ef70 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e9725ef58 <col:45, col:48> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B48.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x555e9725efa8 <ldebug.c:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   8: ImplicitCastExpr 0x555e9725f010 <ldebug.c:288:56, col:59> 'int' <LValueToRValue>
`-ParenExpr 0x555e9725efd0 <col:56, col:59> 'int' lvalue
  `-DeclRefExpr 0x555e9725efa8 <line:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
([B48.7]) (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x555e9725eff0 <ldebug.c:288:61> 'int' 1
1
  10: BinaryOperator 0x555e9725f028 <ldebug.c:288:56, col:61> 'int' '+'
|-ImplicitCastExpr 0x555e9725f010 <col:56, col:59> 'int' <LValueToRValue>
| `-ParenExpr 0x555e9725efd0 <col:56, col:59> 'int' lvalue
|   `-DeclRefExpr 0x555e9725efa8 <line:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e9725eff0 <line:288:61> 'int' 1
[B48.8] + [B48.9]
  11: ArraySubscriptExpr 0x555e9725f068 <ldebug.c:288:45, col:62> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e9725f050 <col:45, col:51> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e9725ef70 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e9725ef58 <col:45, col:48> 'const Proto *' <LValueToRValue>
|     `-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
|       `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e9725f028 <line:288:56, col:61> 'int' '+'
  |-ImplicitCastExpr 0x555e9725f010 <col:56, col:59> 'int' <LValueToRValue>
  | `-ParenExpr 0x555e9725efd0 <col:56, col:59> 'int' lvalue
  |   `-DeclRefExpr 0x555e9725efa8 <line:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  `-IntegerLiteral 0x555e9725eff0 <line:288:61> 'int' 1
[B48.6][[B48.10]]
  12: ImplicitCastExpr 0x555e9725f130 <ldebug.c:288:45, col:62> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x555e9725f068 <col:45, col:62> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x555e9725f050 <col:45, col:51> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x555e9725ef70 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
  |   `-ImplicitCastExpr 0x555e9725ef58 <col:45, col:48> 'const Proto *' <LValueToRValue>
  |     `-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
  |       `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-BinaryOperator 0x555e9725f028 <line:288:56, col:61> 'int' '+'
    |-ImplicitCastExpr 0x555e9725f010 <col:56, col:59> 'int' <LValueToRValue>
    | `-ParenExpr 0x555e9725efd0 <col:56, col:59> 'int' lvalue
    |   `-DeclRefExpr 0x555e9725efa8 <line:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    `-IntegerLiteral 0x555e9725eff0 <line:288:61> 'int' 1
[B48.11] (ImplicitCastExpr, LValueToRValue, Instruction)
  13: CallExpr 0x555e9725f100 <ldebug.c:288:28, col:63> 'int'
|-ImplicitCastExpr 0x555e9725f0e8 <col:28> 'int (*)(Instruction)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e9725eee8 <col:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
`-ImplicitCastExpr 0x555e9725f130 <col:45, col:62> 'Instruction':'unsigned int' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e9725f068 <col:45, col:62> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e9725f050 <col:45, col:51> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e9725ef70 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e9725ef58 <col:45, col:48> 'const Proto *' <LValueToRValue>
    |     `-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
    |       `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-BinaryOperator 0x555e9725f028 <line:288:56, col:61> 'int' '+'
      |-ImplicitCastExpr 0x555e9725f010 <col:56, col:59> 'int' <LValueToRValue>
      | `-ParenExpr 0x555e9725efd0 <col:56, col:59> 'int' lvalue
      |   `-DeclRefExpr 0x555e9725efa8 <line:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      `-IntegerLiteral 0x555e9725eff0 <line:288:61> 'int' 1
[B48.2]([B48.12])
  14: UnaryOperator 0x555e9725f168 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725f148 <col:24, col:26> 'int'
  `-CallExpr 0x555e9725f100 <line:288:28, col:63> 'int'
    |-ImplicitCastExpr 0x555e9725f0e8 <col:28> 'int (*)(Instruction)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e9725eee8 <col:28> 'int (Instruction)' Function 0x555e9724e5d0 'luaG_checkopenop' 'int (Instruction)'
    `-ImplicitCastExpr 0x555e9725f130 <col:45, col:62> 'Instruction':'unsigned int' <LValueToRValue>
      `-ArraySubscriptExpr 0x555e9725f068 <col:45, col:62> 'Instruction':'unsigned int' lvalue
        |-ImplicitCastExpr 0x555e9725f050 <col:45, col:51> 'Instruction *' <LValueToRValue>
        | `-MemberExpr 0x555e9725ef70 <col:45, col:51> 'Instruction *const' lvalue ->code 0x555e971d9508
        |   `-ImplicitCastExpr 0x555e9725ef58 <col:45, col:48> 'const Proto *' <LValueToRValue>
        |     `-ParenExpr 0x555e9725ef38 <col:45, col:48> 'const Proto *' lvalue
        |       `-DeclRefExpr 0x555e9725ef10 <line:430:29> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
        `-BinaryOperator 0x555e9725f028 <line:288:56, col:61> 'int' '+'
          |-ImplicitCastExpr 0x555e9725f010 <col:56, col:59> 'int' <LValueToRValue>
          | `-ParenExpr 0x555e9725efd0 <col:56, col:59> 'int' lvalue
          |   `-DeclRefExpr 0x555e9725efa8 <line:430:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
          `-IntegerLiteral 0x555e9725eff0 <line:288:61> 'int' 1
!([B48.13])
   T: if [B48.14]
   Preds (1): B49
   Succs (2): B47 B43

 [B49]
   1: DeclRefExpr 0x555e9725edd8 <ldebug.c:428:9> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   2: UnaryOperator 0x555e9725ee00 <ldebug.c:428:9, col:10> 'int' postfix '--'
`-DeclRefExpr 0x555e9725edd8 <col:9> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B49.1]--
   3: DeclRefExpr 0x555e9725ee20 <ldebug.c:429:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   4: ImplicitCastExpr 0x555e9725eea8 <ldebug.c:429:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725ee20 <col:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B49.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9725ee48 <./lua.h:30:23> 'int' 1
1
   6: UnaryOperator 0x555e9725ee68 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x555e9725ee48 <col:23> 'int' 1
-[B49.5]
   7: BinaryOperator 0x555e9725eec0 <ldebug.c:429:13, ./lua.h:30:24> 'int' '=='
|-ImplicitCastExpr 0x555e9725eea8 <ldebug.c:429:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725ee20 <col:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-ParenExpr 0x555e9725ee88 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x555e9725ee68 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x555e9725ee48 <col:23> 'int' 1
[B49.4] == ([B49.6])
   T: if [B49.7]
   Preds (2): B51 B52
   Succs (2): B48 B46

 [B50]
   1: IntegerLiteral 0x555e9725ece8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725ed08 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725ece8 <col:36> 'int' 0
[B50.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725ed20 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725ed08 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725ece8 <col:36> 'int' 0
return [B50.2];
   Preds (1): B51
   Succs (1): B0

 [B51]
   1: DeclRefExpr 0x555e9725eaa8 <ldebug.c:426:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725eaf8 <ldebug.c:426:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725eaa8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B51.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725ead0 <ldebug.c:426:26> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e9725eb10 <ldebug.c:426:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725ead0 <col:26> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B51.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725eb28 <ldebug.c:426:24, col:26> 'int' '+'
|-ImplicitCastExpr 0x555e9725eaf8 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725eaa8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e9725eb10 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725ead0 <col:26> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B51.2] + [B51.4]
   6: IntegerLiteral 0x555e9725eb50 <ldebug.c:426:28> 'int' 1
1
   7: BinaryOperator 0x555e9725eb70 <ldebug.c:426:24, col:28> 'int' '-'
|-BinaryOperator 0x555e9725eb28 <col:24, col:26> 'int' '+'
| |-ImplicitCastExpr 0x555e9725eaf8 <col:24> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e9725eaa8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
| `-ImplicitCastExpr 0x555e9725eb10 <col:26> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x555e9725ead0 <col:26> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e9725eb50 <col:28> 'int' 1
[B51.5] - [B51.6]
   8: DeclRefExpr 0x555e9725ebb8 <ldebug.c:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   9: ImplicitCastExpr 0x555e9725ec00 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725ebe0 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725ebb8 <line:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B51.8]) (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x555e9725ec18 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725ec00 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725ebe0 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725ebb8 <line:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B51.9]->maxstacksize
  11: ImplicitCastExpr 0x555e9725ec50 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725ec18 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725ec00 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725ebe0 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725ebb8 <line:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B51.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x555e9725ec68 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725ec50 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725ec18 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725ec00 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725ebe0 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725ebb8 <line:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B51.11] (ImplicitCastExpr, IntegralCast, int)
  13: BinaryOperator 0x555e9725ec80 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725eb98 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725eb70 <line:426:24, col:28> 'int' '-'
|   |-BinaryOperator 0x555e9725eb28 <col:24, col:26> 'int' '+'
|   | |-ImplicitCastExpr 0x555e9725eaf8 <col:24> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x555e9725eaa8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   | `-ImplicitCastExpr 0x555e9725eb10 <col:26> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e9725ead0 <col:26> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
|   `-IntegerLiteral 0x555e9725eb50 <col:28> 'int' 1
`-ImplicitCastExpr 0x555e9725ec68 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725ec50 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725ec18 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725ec00 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725ebe0 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725ebb8 <line:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B51.7]) < [B51.12]
  14: UnaryOperator 0x555e9725ecc8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725eca8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725ec80 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725eb98 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725eb70 <line:426:24, col:28> 'int' '-'
    |   |-BinaryOperator 0x555e9725eb28 <col:24, col:26> 'int' '+'
    |   | |-ImplicitCastExpr 0x555e9725eaf8 <col:24> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x555e9725eaa8 <col:24> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   | `-ImplicitCastExpr 0x555e9725eb10 <col:26> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e9725ead0 <col:26> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    |   `-IntegerLiteral 0x555e9725eb50 <col:28> 'int' 1
    `-ImplicitCastExpr 0x555e9725ec68 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725ec50 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725ec18 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725ec00 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725ebe0 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725ebb8 <line:426:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B51.13])
   T: if [B51.14]
   Preds (1): B52
   Succs (2): B50 B49

 [B52]
  case OP_TAILCALL:
   1: DeclRefExpr 0x555e9725ea20 <ldebug.c:425:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: ImplicitCastExpr 0x555e9725ea68 <ldebug.c:425:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725ea20 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B52.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725ea48 <ldebug.c:425:18> 'int' 0
0
   4: BinaryOperator 0x555e9725ea80 <ldebug.c:425:13, col:18> 'int' '!='
|-ImplicitCastExpr 0x555e9725ea68 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725ea20 <col:13> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e9725ea48 <col:18> 'int' 0
[B52.2] != [B52.3]
   T: if [B52.4]
   Preds (2): B3 B40
   Succs (2): B51 B49

 [B53]
   T: break;
   Preds (4): B54 B55 B56 B57
   Succs (1): B2

 [B54]
   1: DeclRefExpr 0x555e9725e858 <ldebug.c:420:11> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: DeclRefExpr 0x555e9725e880 <ldebug.c:420:17> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   3: ImplicitCastExpr 0x555e9725e8a8 <ldebug.c:420:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e880 <col:17> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B54.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CompoundAssignOperator 0x555e9725e8c0 <ldebug.c:420:11, col:17> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x555e9725e858 <col:11> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-ImplicitCastExpr 0x555e9725e8a8 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725e880 <col:17> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B54.1] += [B54.3]
   Preds (1): B55
   Succs (1): B53

 [B55]
   1: DeclRefExpr 0x555e9725e788 <ldebug.c:419:43> 'int' lvalue Var 0x555e9725e3f8 'dest' 'int'
dest
   2: ImplicitCastExpr 0x555e9725e7d8 <ldebug.c:419:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e788 <col:43> 'int' lvalue Var 0x555e9725e3f8 'dest' 'int'
[B55.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725e7b0 <ldebug.c:419:51> 'int' lvalue ParmVar 0x555e97251cd0 'lastpc' 'int'
lastpc
   4: ImplicitCastExpr 0x555e9725e7f0 <ldebug.c:419:51> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e7b0 <col:51> 'int' lvalue ParmVar 0x555e97251cd0 'lastpc' 'int'
[B55.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725e808 <ldebug.c:419:43, col:51> 'int' '<='
|-ImplicitCastExpr 0x555e9725e7d8 <col:43> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725e788 <col:43> 'int' lvalue Var 0x555e9725e3f8 'dest' 'int'
`-ImplicitCastExpr 0x555e9725e7f0 <col:51> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725e7b0 <col:51> 'int' lvalue ParmVar 0x555e97251cd0 'lastpc' 'int'
[B55.2] <= [B55.4]
   T: if [B57.16] && [B56.5] && [B55.5]
   Preds (1): B56
   Succs (2): B54 B53

 [B56]
   1: DeclRefExpr 0x555e9725e6b8 <ldebug.c:419:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725e708 <ldebug.c:419:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e6b8 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B56.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725e6e0 <ldebug.c:419:35> 'int' lvalue Var 0x555e9725e3f8 'dest' 'int'
dest
   4: ImplicitCastExpr 0x555e9725e720 <ldebug.c:419:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e6e0 <col:35> 'int' lvalue Var 0x555e9725e3f8 'dest' 'int'
[B56.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725e738 <ldebug.c:419:30, col:35> 'int' '<'
|-ImplicitCastExpr 0x555e9725e708 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725e6b8 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-ImplicitCastExpr 0x555e9725e720 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725e6e0 <col:35> 'int' lvalue Var 0x555e9725e3f8 'dest' 'int'
[B56.2] < [B56.4]
   T: [B57.16] && [B56.5] && ...
   Preds (1): B57
   Succs (2): B55 B53

 [B57]
  case OP_JMP:
   1: DeclRefExpr 0x555e9725e458 <ldebug.c:417:20> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725e4a0 <ldebug.c:417:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e458 <col:20> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B57.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725e480 <ldebug.c:417:23> 'int' 1
1
   4: BinaryOperator 0x555e9725e4b8 <ldebug.c:417:20, col:23> 'int' '+'
|-ImplicitCastExpr 0x555e9725e4a0 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725e458 <col:20> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e9725e480 <col:23> 'int' 1
[B57.2] + [B57.3]
   5: DeclRefExpr 0x555e9725e4e0 <ldebug.c:417:25> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   6: ImplicitCastExpr 0x555e9725e508 <ldebug.c:417:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e4e0 <col:25> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B57.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x555e9725e520 <ldebug.c:417:20, col:25> 'int' '+'
|-BinaryOperator 0x555e9725e4b8 <col:20, col:23> 'int' '+'
| |-ImplicitCastExpr 0x555e9725e4a0 <col:20> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e9725e458 <col:20> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
| `-IntegerLiteral 0x555e9725e480 <col:23> 'int' 1
`-ImplicitCastExpr 0x555e9725e508 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725e4e0 <col:25> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B57.4] + [B57.6]
   8: DeclStmt 0x555e9725e548 <ldebug.c:417:9, col:26>col:13
`-VarDecl 0x555e9725e3f8 <col:9, col:25> col:13 used dest 'int' cinit
  `-BinaryOperator 0x555e9725e520 <col:20, col:25> 'int' '+'
    |-BinaryOperator 0x555e9725e4b8 <col:20, col:23> 'int' '+'
    | |-ImplicitCastExpr 0x555e9725e4a0 <col:20> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x555e9725e458 <col:20> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    | `-IntegerLiteral 0x555e9725e480 <col:23> 'int' 1
    `-ImplicitCastExpr 0x555e9725e508 <col:25> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e9725e4e0 <col:25> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
int dest = pc + 1 + b;
   9: DeclRefExpr 0x555e9725e560 <ldebug.c:419:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
  10: ImplicitCastExpr 0x555e9725e678 <ldebug.c:419:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e560 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B57.9] (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x555e9725e588 <./lopcodes.h:65:27> 'int' 1
1
  12: IntegerLiteral 0x555e9725e5a8 <./lopcodes.h:40:17> 'int' 8
8
  13: BinaryOperator 0x555e9725e5c8 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x555e9725e588 <line:65:27> 'int' 1
`-IntegerLiteral 0x555e9725e5a8 <line:40:17> 'int' 8
[B57.11] << [B57.12]
  14: IntegerLiteral 0x555e9725e610 <./lopcodes.h:65:38> 'int' 1
1
  15: BinaryOperator 0x555e9725e630 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x555e9725e5f0 <col:26, col:36> 'int'
| `-BinaryOperator 0x555e9725e5c8 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x555e9725e588 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x555e9725e5a8 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e9725e610 <line:65:38> 'int' 1
([B57.13]) - [B57.14]
  16: BinaryOperator 0x555e9725e690 <ldebug.c:419:13, ./lopcodes.h:65:39> 'int' '!='
|-ImplicitCastExpr 0x555e9725e678 <ldebug.c:419:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725e560 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
`-ParenExpr 0x555e9725e658 <./lopcodes.h:65:25, col:39> 'int'
  `-BinaryOperator 0x555e9725e630 <col:26, col:38> 'int' '-'
    |-ParenExpr 0x555e9725e5f0 <col:26, col:36> 'int'
    | `-BinaryOperator 0x555e9725e5c8 <col:27, line:40:17> 'int' '<<'
    |   |-IntegerLiteral 0x555e9725e588 <line:65:27> 'int' 1
    |   `-IntegerLiteral 0x555e9725e5a8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e9725e610 <line:65:38> 'int' 1
[B57.10] != ([B57.15])
   T: [B57.16] && ...
   Preds (2): B3 B60
   Succs (2): B56 B53

 [B58]
  case OP_FORLOOP:
   Preds (1): B3
   Succs (1): B60

 [B59]
   1: IntegerLiteral 0x555e9725e2e8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725e308 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725e2e8 <col:36> 'int' 0
[B59.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725e320 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725e308 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725e2e8 <col:36> 'int' 0
return [B59.2];
   Preds (1): B60
   Succs (1): B0

 [B60]
  case OP_FORPREP:
   1: DeclRefExpr 0x555e9725e110 <ldebug.c:414:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725e158 <ldebug.c:414:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725e110 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B60.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725e138 <ldebug.c:414:24> 'int' 3
3
   4: BinaryOperator 0x555e9725e170 <ldebug.c:414:22, col:24> 'int' '+'
|-ImplicitCastExpr 0x555e9725e158 <col:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725e110 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-IntegerLiteral 0x555e9725e138 <col:24> 'int' 3
[B60.2] + [B60.3]
   5: DeclRefExpr 0x555e9725e1b8 <ldebug.c:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e9725e200 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725e1e0 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725e1b8 <line:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B60.5]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e9725e218 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725e200 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725e1e0 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725e1b8 <line:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B60.6]->maxstacksize
   8: ImplicitCastExpr 0x555e9725e250 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725e218 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725e200 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725e1e0 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725e1b8 <line:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B60.7] (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x555e9725e268 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725e250 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725e218 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725e200 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725e1e0 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725e1b8 <line:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B60.8] (ImplicitCastExpr, IntegralCast, int)
  10: BinaryOperator 0x555e9725e280 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725e198 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725e170 <line:414:22, col:24> 'int' '+'
|   |-ImplicitCastExpr 0x555e9725e158 <col:22> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x555e9725e110 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   `-IntegerLiteral 0x555e9725e138 <col:24> 'int' 3
`-ImplicitCastExpr 0x555e9725e268 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725e250 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725e218 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725e200 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725e1e0 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725e1b8 <line:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B60.4]) < [B60.9]
  11: UnaryOperator 0x555e9725e2c8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725e2a8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725e280 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725e198 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725e170 <line:414:22, col:24> 'int' '+'
    |   |-ImplicitCastExpr 0x555e9725e158 <col:22> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e9725e110 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   `-IntegerLiteral 0x555e9725e138 <col:24> 'int' 3
    `-ImplicitCastExpr 0x555e9725e268 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725e250 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725e218 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725e200 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725e1e0 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725e1b8 <line:414:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B60.10])
   T: if [B60.11]
   Preds (2): B3 B58
   Succs (2): B59 B57

 [B61]
   T: break;
   Preds (2): B62 B63
   Succs (1): B2

 [B62]
   1: DeclRefExpr 0x555e9725df68 <ldebug.c:409:32> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725df90 <ldebug.c:409:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725df68 <col:32> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B62.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725df40 <ldebug.c:409:25> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
   4: BinaryOperator 0x555e9725dfa8 <ldebug.c:409:25, col:32> 'int' '='
|-DeclRefExpr 0x555e9725df40 <col:25> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
`-ImplicitCastExpr 0x555e9725df90 <col:32> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725df68 <col:32> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B62.3] = [B62.2]
   Preds (1): B63
   Succs (1): B61

 [B63]
   1: DeclRefExpr 0x555e9725de50 <ldebug.c:409:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   2: ImplicitCastExpr 0x555e9725df00 <ldebug.c:409:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725de50 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B63.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725de78 <ldebug.c:409:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   4: ImplicitCastExpr 0x555e9725dec0 <ldebug.c:409:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725de78 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B63.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9725dea0 <ldebug.c:409:22> 'int' 2
2
   6: BinaryOperator 0x555e9725ded8 <ldebug.c:409:20, col:22> 'int' '+'
|-ImplicitCastExpr 0x555e9725dec0 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725de78 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-IntegerLiteral 0x555e9725dea0 <col:22> 'int' 2
[B63.4] + [B63.5]
   7: BinaryOperator 0x555e9725df18 <ldebug.c:409:13, col:22> 'int' '>='
|-ImplicitCastExpr 0x555e9725df00 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725de50 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
`-BinaryOperator 0x555e9725ded8 <col:20, col:22> 'int' '+'
  |-ImplicitCastExpr 0x555e9725dec0 <col:20> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e9725de78 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
  `-IntegerLiteral 0x555e9725dea0 <col:22> 'int' 2
[B63.2] >= [B63.6]
   T: if [B63.7]
   Preds (1): B65
   Succs (2): B62 B61

 [B64]
   1: IntegerLiteral 0x555e9725ddb8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725ddd8 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725ddb8 <col:36> 'int' 0
[B64.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725ddf0 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725ddd8 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725ddb8 <col:36> 'int' 0
return [B64.2];
   Preds (1): B65
   Succs (1): B0

 [B65]
   1: DeclRefExpr 0x555e9725db78 <ldebug.c:408:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725dbc0 <ldebug.c:408:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725db78 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B65.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725dba0 <ldebug.c:408:24> 'int' 2
2
   4: BinaryOperator 0x555e9725dbd8 <ldebug.c:408:22, col:24> 'int' '+'
|-ImplicitCastExpr 0x555e9725dbc0 <col:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725db78 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-IntegerLiteral 0x555e9725dba0 <col:24> 'int' 2
[B65.2] + [B65.3]
   5: DeclRefExpr 0x555e9725dc00 <ldebug.c:408:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   6: ImplicitCastExpr 0x555e9725dc28 <ldebug.c:408:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725dc00 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B65.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x555e9725dc40 <ldebug.c:408:22, col:26> 'int' '+'
|-BinaryOperator 0x555e9725dbd8 <col:22, col:24> 'int' '+'
| |-ImplicitCastExpr 0x555e9725dbc0 <col:22> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e9725db78 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
| `-IntegerLiteral 0x555e9725dba0 <col:24> 'int' 2
`-ImplicitCastExpr 0x555e9725dc28 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725dc00 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B65.4] + [B65.6]
   8: DeclRefExpr 0x555e9725dc88 <ldebug.c:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   9: ImplicitCastExpr 0x555e9725dcd0 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725dcb0 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725dc88 <line:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B65.8]) (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x555e9725dce8 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725dcd0 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725dcb0 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725dc88 <line:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B65.9]->maxstacksize
  11: ImplicitCastExpr 0x555e9725dd20 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725dce8 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725dcd0 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725dcb0 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725dc88 <line:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B65.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x555e9725dd38 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725dd20 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725dce8 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725dcd0 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725dcb0 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725dc88 <line:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B65.11] (ImplicitCastExpr, IntegralCast, int)
  13: BinaryOperator 0x555e9725dd50 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725dc68 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725dc40 <line:408:22, col:26> 'int' '+'
|   |-BinaryOperator 0x555e9725dbd8 <col:22, col:24> 'int' '+'
|   | |-ImplicitCastExpr 0x555e9725dbc0 <col:22> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x555e9725db78 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   | `-IntegerLiteral 0x555e9725dba0 <col:24> 'int' 2
|   `-ImplicitCastExpr 0x555e9725dc28 <col:26> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x555e9725dc00 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-ImplicitCastExpr 0x555e9725dd38 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725dd20 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725dce8 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725dcd0 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725dcb0 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725dc88 <line:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B65.7]) < [B65.12]
  14: UnaryOperator 0x555e9725dd98 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725dd78 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725dd50 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725dc68 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725dc40 <line:408:22, col:26> 'int' '+'
    |   |-BinaryOperator 0x555e9725dbd8 <col:22, col:24> 'int' '+'
    |   | |-ImplicitCastExpr 0x555e9725dbc0 <col:22> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x555e9725db78 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   | `-IntegerLiteral 0x555e9725dba0 <col:24> 'int' 2
    |   `-ImplicitCastExpr 0x555e9725dc28 <col:26> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x555e9725dc00 <col:26> 'int' lvalue Var 0x555e97252f68 'c' 'int'
    `-ImplicitCastExpr 0x555e9725dd38 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725dd20 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725dce8 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725dcd0 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725dcb0 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725dc88 <line:408:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B65.13])
   T: if [B65.14]
   Preds (1): B67
   Succs (2): B64 B63

 [B66]
   1: IntegerLiteral 0x555e9725dae0 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725db00 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725dae0 <col:36> 'int' 0
[B66.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725db18 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725db00 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725dae0 <col:36> 'int' 0
return [B66.2];
   Preds (1): B67
   Succs (1): B0

 [B67]
  case OP_TFORLOOP:
   1: DeclRefExpr 0x555e9725da18 <ldebug.c:407:15> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   2: ImplicitCastExpr 0x555e9725da60 <ldebug.c:407:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725da18 <col:15> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B67.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725da40 <ldebug.c:407:20> 'int' 1
1
   4: BinaryOperator 0x555e9725da78 <ldebug.c:407:15, col:20> 'int' '>='
|-ImplicitCastExpr 0x555e9725da60 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725da18 <col:15> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-IntegerLiteral 0x555e9725da40 <col:20> 'int' 1
[B67.2] >= [B67.3]
   5: UnaryOperator 0x555e9725dac0 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725daa0 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725da78 <line:407:15, col:20> 'int' '>='
    |-ImplicitCastExpr 0x555e9725da60 <col:15> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e9725da18 <col:15> 'int' lvalue Var 0x555e97252f68 'c' 'int'
    `-IntegerLiteral 0x555e9725da40 <col:20> 'int' 1
!([B67.4])
   T: if [B67.5]
   Preds (1): B3
   Succs (2): B66 B65

 [B68]
   T: break;
   Preds (1): B70
   Succs (1): B2

 [B69]
   1: IntegerLiteral 0x555e9725d8f0 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725d910 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725d8f0 <col:36> 'int' 0
[B69.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725d928 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725d910 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725d8f0 <col:36> 'int' 0
return [B69.2];
   Preds (1): B70
   Succs (1): B0

 [B70]
  case OP_CONCAT:
   1: DeclRefExpr 0x555e9725d808 <ldebug.c:403:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: ImplicitCastExpr 0x555e9725d858 <ldebug.c:403:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725d808 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B70.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725d830 <ldebug.c:403:19> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   4: ImplicitCastExpr 0x555e9725d870 <ldebug.c:403:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725d830 <col:19> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B70.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725d888 <ldebug.c:403:15, col:19> 'int' '<'
|-ImplicitCastExpr 0x555e9725d858 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725d808 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ImplicitCastExpr 0x555e9725d870 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725d830 <col:19> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B70.2] < [B70.4]
   6: UnaryOperator 0x555e9725d8d0 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725d8b0 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725d888 <line:403:15, col:19> 'int' '<'
    |-ImplicitCastExpr 0x555e9725d858 <col:15> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e9725d808 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    `-ImplicitCastExpr 0x555e9725d870 <col:19> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e9725d830 <col:19> 'int' lvalue Var 0x555e97252f68 'c' 'int'
!([B70.5])
   T: if [B70.6]
   Preds (1): B3
   Succs (2): B69 B68

 [B71]
   T: break;
   Preds (2): B72 B73
   Succs (1): B2

 [B72]
   1: DeclRefExpr 0x555e9725d6d0 <ldebug.c:399:32> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725d6f8 <ldebug.c:399:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725d6d0 <col:32> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B72.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725d6a8 <ldebug.c:399:25> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
   4: BinaryOperator 0x555e9725d710 <ldebug.c:399:25, col:32> 'int' '='
|-DeclRefExpr 0x555e9725d6a8 <col:25> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
`-ImplicitCastExpr 0x555e9725d6f8 <col:32> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725d6d0 <col:32> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B72.3] = [B72.2]
   Preds (1): B73
   Succs (1): B71

 [B73]
   1: DeclRefExpr 0x555e9725d5b8 <ldebug.c:399:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   2: ImplicitCastExpr 0x555e9725d668 <ldebug.c:399:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725d5b8 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B73.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725d5e0 <ldebug.c:399:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   4: ImplicitCastExpr 0x555e9725d628 <ldebug.c:399:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725d5e0 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B73.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9725d608 <ldebug.c:399:22> 'int' 1
1
   6: BinaryOperator 0x555e9725d640 <ldebug.c:399:20, col:22> 'int' '+'
|-ImplicitCastExpr 0x555e9725d628 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725d5e0 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-IntegerLiteral 0x555e9725d608 <col:22> 'int' 1
[B73.4] + [B73.5]
   7: BinaryOperator 0x555e9725d680 <ldebug.c:399:13, col:22> 'int' '=='
|-ImplicitCastExpr 0x555e9725d668 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725d5b8 <col:13> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
`-BinaryOperator 0x555e9725d640 <col:20, col:22> 'int' '+'
  |-ImplicitCastExpr 0x555e9725d628 <col:20> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e9725d5e0 <col:20> 'int' lvalue Var 0x555e97252a58 'a' 'int'
  `-IntegerLiteral 0x555e9725d608 <col:22> 'int' 1
[B73.2] == [B73.6]
   T: if [B73.7]
   Preds (1): B75
   Succs (2): B72 B71

 [B74]
   1: IntegerLiteral 0x555e9725d520 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725d540 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725d520 <col:36> 'int' 0
[B74.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725d558 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725d540 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725d520 <col:36> 'int' 0
return [B74.2];
   Preds (1): B75
   Succs (1): B0

 [B75]
  case OP_SELF:
   1: DeclRefExpr 0x555e9725c118 <ldebug.c:398:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725c160 <ldebug.c:398:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725c118 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B75.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725c140 <ldebug.c:398:24> 'int' 1
1
   4: BinaryOperator 0x555e9725c178 <ldebug.c:398:22, col:24> 'int' '+'
|-ImplicitCastExpr 0x555e9725c160 <col:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725c118 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-IntegerLiteral 0x555e9725c140 <col:24> 'int' 1
[B75.2] + [B75.3]
   5: DeclRefExpr 0x555e9725c1c0 <ldebug.c:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e9725c208 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e9725c1e8 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e9725c1c0 <line:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B75.5]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e9725d450 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9725c208 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e9725c1e8 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e9725c1c0 <line:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B75.6]->maxstacksize
   8: ImplicitCastExpr 0x555e9725d488 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725d450 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9725c208 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e9725c1e8 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e9725c1c0 <line:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B75.7] (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x555e9725d4a0 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725d488 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725d450 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9725c208 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e9725c1e8 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e9725c1c0 <line:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B75.8] (ImplicitCastExpr, IntegralCast, int)
  10: BinaryOperator 0x555e9725d4b8 <ldebug.c:272:32, col:46> 'int' '<'
|-ParenExpr 0x555e9725c1a0 <col:32, col:36> 'int'
| `-BinaryOperator 0x555e9725c178 <line:398:22, col:24> 'int' '+'
|   |-ImplicitCastExpr 0x555e9725c160 <col:22> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x555e9725c118 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
|   `-IntegerLiteral 0x555e9725c140 <col:24> 'int' 1
`-ImplicitCastExpr 0x555e9725d4a0 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725d488 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725d450 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9725c208 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e9725c1e8 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e9725c1c0 <line:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B75.4]) < [B75.9]
  11: UnaryOperator 0x555e9725d500 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725d4e0 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725d4b8 <line:272:32, col:46> 'int' '<'
    |-ParenExpr 0x555e9725c1a0 <col:32, col:36> 'int'
    | `-BinaryOperator 0x555e9725c178 <line:398:22, col:24> 'int' '+'
    |   |-ImplicitCastExpr 0x555e9725c160 <col:22> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e9725c118 <col:22> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    |   `-IntegerLiteral 0x555e9725c140 <col:24> 'int' 1
    `-ImplicitCastExpr 0x555e9725d4a0 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725d488 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725d450 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9725c208 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e9725c1e8 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e9725c1c0 <line:398:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B75.10])
   T: if [B75.11]
   Preds (1): B3
   Succs (2): B74 B73

 [B76]
  case OP_GETGLOBAL:
   Preds (1): B3
   Succs (1): B79

 [B77]
   T: break;
   Preds (1): B79
   Succs (1): B2

 [B78]
   1: IntegerLiteral 0x555e9725bff0 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725c010 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725bff0 <col:36> 'int' 0
[B78.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725c028 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725c010 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725bff0 <col:36> 'int' 0
return [B78.2];
   Preds (1): B79
   Succs (1): B0

 [B79]
  case OP_SETGLOBAL:
   1: DeclRefExpr 0x555e9725bda0 <ldebug.c:394:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9725bdc8 <ldebug.c:394:27> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B79.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9725bde0 <ldebug.c:394:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
`-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B79.2]->k
   4: ImplicitCastExpr 0x555e9725be40 <ldebug.c:394:27, col:31> 'TValue *' <LValueToRValue>
`-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
  `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B79.3] (ImplicitCastExpr, LValueToRValue, TValue *)
   5: DeclRefExpr 0x555e9725be18 <ldebug.c:394:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   6: ImplicitCastExpr 0x555e9725be58 <ldebug.c:394:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B79.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x555e9725be70 <ldebug.c:394:27, col:34> 'TValue':'struct lua_TValue' lvalue
|-ImplicitCastExpr 0x555e9725be40 <col:27, col:31> 'TValue *' <LValueToRValue>
| `-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
|   `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-ImplicitCastExpr 0x555e9725be58 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B79.4][[B79.6]]
   8: UnaryOperator 0x555e9725be98 <ldebug.c:394:26, col:34> 'TValue *' prefix '&'
`-ArraySubscriptExpr 0x555e9725be70 <col:27, col:34> 'TValue':'struct lua_TValue' lvalue
  |-ImplicitCastExpr 0x555e9725be40 <col:27, col:31> 'TValue *' <LValueToRValue>
  | `-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
  |   `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-ImplicitCastExpr 0x555e9725be58 <col:33> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
&[B79.7]
   9: MemberExpr 0x555e9725bed8 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
`-ParenExpr 0x555e9725beb8 <col:19, col:21> 'TValue *'
  `-UnaryOperator 0x555e9725be98 <ldebug.c:394:26, col:34> 'TValue *' prefix '&'
    `-ArraySubscriptExpr 0x555e9725be70 <col:27, col:34> 'TValue':'struct lua_TValue' lvalue
      |-ImplicitCastExpr 0x555e9725be40 <col:27, col:31> 'TValue *' <LValueToRValue>
      | `-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
      |   `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      `-ImplicitCastExpr 0x555e9725be58 <col:33> 'int' <LValueToRValue>
        `-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
([B79.8])->tt
  10: ImplicitCastExpr 0x555e9725bf50 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x555e9725bf10 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x555e9725bed8 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
    `-ParenExpr 0x555e9725beb8 <col:19, col:21> 'TValue *'
      `-UnaryOperator 0x555e9725be98 <ldebug.c:394:26, col:34> 'TValue *' prefix '&'
        `-ArraySubscriptExpr 0x555e9725be70 <col:27, col:34> 'TValue':'struct lua_TValue' lvalue
          |-ImplicitCastExpr 0x555e9725be40 <col:27, col:31> 'TValue *' <LValueToRValue>
          | `-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
          |   `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
          |     `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
          `-ImplicitCastExpr 0x555e9725be58 <col:33> 'int' <LValueToRValue>
            `-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
([B79.9]) (ImplicitCastExpr, LValueToRValue, int)
  11: IntegerLiteral 0x555e9725bf30 <./lua.h:78:22> 'int' 4
4
  12: BinaryOperator 0x555e9725bf68 <./lobject.h:90:18, ./lua.h:78:22> 'int' '=='
|-ImplicitCastExpr 0x555e9725bf50 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x555e9725bf10 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x555e9725bed8 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
|     `-ParenExpr 0x555e9725beb8 <col:19, col:21> 'TValue *'
|       `-UnaryOperator 0x555e9725be98 <ldebug.c:394:26, col:34> 'TValue *' prefix '&'
|         `-ArraySubscriptExpr 0x555e9725be70 <col:27, col:34> 'TValue':'struct lua_TValue' lvalue
|           |-ImplicitCastExpr 0x555e9725be40 <col:27, col:31> 'TValue *' <LValueToRValue>
|           | `-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
|           |   `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
|           |     `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|           `-ImplicitCastExpr 0x555e9725be58 <col:33> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-IntegerLiteral 0x555e9725bf30 <./lua.h:78:22> 'int' 4
[B79.10] == [B79.11]
  13: UnaryOperator 0x555e9725bfd0 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725bfb0 <col:24, col:26> 'int'
  `-ParenExpr 0x555e9725bf90 <./lobject.h:81:23, col:47> 'int'
    `-BinaryOperator 0x555e9725bf68 <line:90:18, ./lua.h:78:22> 'int' '=='
      |-ImplicitCastExpr 0x555e9725bf50 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
      | `-ParenExpr 0x555e9725bf10 <col:18, col:26> 'int' lvalue
      |   `-MemberExpr 0x555e9725bed8 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
      |     `-ParenExpr 0x555e9725beb8 <col:19, col:21> 'TValue *'
      |       `-UnaryOperator 0x555e9725be98 <ldebug.c:394:26, col:34> 'TValue *' prefix '&'
      |         `-ArraySubscriptExpr 0x555e9725be70 <col:27, col:34> 'TValue':'struct lua_TValue' lvalue
      |           |-ImplicitCastExpr 0x555e9725be40 <col:27, col:31> 'TValue *' <LValueToRValue>
      |           | `-MemberExpr 0x555e9725bde0 <col:27, col:31> 'TValue *const' lvalue ->k 0x555e971d9438
      |           |   `-ImplicitCastExpr 0x555e9725bdc8 <col:27> 'const Proto *' <LValueToRValue>
      |           |     `-DeclRefExpr 0x555e9725bda0 <col:27> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      |           `-ImplicitCastExpr 0x555e9725be58 <col:33> 'int' <LValueToRValue>
      |             `-DeclRefExpr 0x555e9725be18 <col:33> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
      `-IntegerLiteral 0x555e9725bf30 <./lua.h:78:22> 'int' 4
!(([B79.12]))
   T: if [B79.13]
   Preds (2): B3 B76
   Succs (2): B78 B77

 [B80]
  case OP_GETUPVAL:
   Preds (1): B3
   Succs (1): B83

 [B81]
   T: break;
   Preds (1): B83
   Succs (1): B2

 [B82]
   1: IntegerLiteral 0x555e9725bc18 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725bc38 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725bc18 <col:36> 'int' 0
[B82.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725bc50 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725bc38 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725bc18 <col:36> 'int' 0
return [B82.2];
   Preds (1): B83
   Succs (1): B0

 [B83]
  case OP_SETUPVAL:
   1: DeclRefExpr 0x555e9725bac8 <ldebug.c:389:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: ImplicitCastExpr 0x555e9725bb68 <ldebug.c:389:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725bac8 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B83.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725baf0 <ldebug.c:389:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e9725bb18 <ldebug.c:389:19> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9725baf0 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B83.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e9725bb30 <ldebug.c:389:19, col:23> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
`-ImplicitCastExpr 0x555e9725bb18 <col:19> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9725baf0 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B83.4]->nups
   6: ImplicitCastExpr 0x555e9725bb80 <ldebug.c:389:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9725bb30 <col:19, col:23> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
  `-ImplicitCastExpr 0x555e9725bb18 <col:19> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9725baf0 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B83.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x555e9725bb98 <ldebug.c:389:19, col:23> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9725bb80 <col:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9725bb30 <col:19, col:23> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
    `-ImplicitCastExpr 0x555e9725bb18 <col:19> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9725baf0 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B83.6] (ImplicitCastExpr, IntegralCast, int)
   8: BinaryOperator 0x555e9725bbb0 <ldebug.c:389:15, col:23> 'int' '<'
|-ImplicitCastExpr 0x555e9725bb68 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725bac8 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ImplicitCastExpr 0x555e9725bb98 <col:19, col:23> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9725bb80 <col:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9725bb30 <col:19, col:23> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
      `-ImplicitCastExpr 0x555e9725bb18 <col:19> 'const Proto *' <LValueToRValue>
        `-DeclRefExpr 0x555e9725baf0 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B83.2] < [B83.7]
   9: UnaryOperator 0x555e9725bbf8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725bbd8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725bbb0 <line:389:15, col:23> 'int' '<'
    |-ImplicitCastExpr 0x555e9725bb68 <col:15> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e9725bac8 <col:15> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    `-ImplicitCastExpr 0x555e9725bb98 <col:19, col:23> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9725bb80 <col:19, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9725bb30 <col:19, col:23> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
          `-ImplicitCastExpr 0x555e9725bb18 <col:19> 'const Proto *' <LValueToRValue>
            `-DeclRefExpr 0x555e9725baf0 <col:19> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B83.8])
   T: if [B83.9]
   Preds (2): B3 B80
   Succs (2): B82 B81

 [B84]
   T: break;
   Preds (3): B85 B86 B87
   Succs (1): B2

 [B85]
   1: DeclRefExpr 0x555e9725b940 <ldebug.c:384:18> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725b968 <ldebug.c:384:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725b940 <col:18> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B85.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725b918 <ldebug.c:384:11> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
   4: BinaryOperator 0x555e9725b980 <ldebug.c:384:11, col:18> 'int' '='
|-DeclRefExpr 0x555e9725b918 <col:11> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
`-ImplicitCastExpr 0x555e9725b968 <col:18> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725b940 <col:18> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B85.3] = [B85.2]
   Preds (1): B86
   Succs (1): B84

 [B86]
   1: DeclRefExpr 0x555e9725b848 <ldebug.c:383:25> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   2: ImplicitCastExpr 0x555e9725b898 <ldebug.c:383:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725b848 <col:25> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B86.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725b870 <ldebug.c:383:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   4: ImplicitCastExpr 0x555e9725b8b0 <ldebug.c:383:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725b870 <col:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B86.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725b8c8 <ldebug.c:383:25, col:32> 'int' '<='
|-ImplicitCastExpr 0x555e9725b898 <col:25> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725b848 <col:25> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
`-ImplicitCastExpr 0x555e9725b8b0 <col:32> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725b870 <col:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B86.2] <= [B86.4]
   T: if [B87.5] && [B86.5]
   Preds (1): B87
   Succs (2): B85 B84

 [B87]
  case OP_LOADNIL:
   1: DeclRefExpr 0x555e9725b7a0 <ldebug.c:383:13> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e9725b7f0 <ldebug.c:383:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725b7a0 <col:13> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B87.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e9725b7c8 <ldebug.c:383:18> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   4: ImplicitCastExpr 0x555e9725b808 <ldebug.c:383:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725b7c8 <col:18> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B87.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e9725b820 <ldebug.c:383:13, col:18> 'int' '<='
|-ImplicitCastExpr 0x555e9725b7f0 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725b7a0 <col:13> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e9725b808 <col:18> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e9725b7c8 <col:18> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B87.2] <= [B87.4]
   T: [B87.5] && ...
   Preds (1): B3
   Succs (2): B86 B84

 [B88]
   T: break;
   Preds (2): B90 B95
   Succs (1): B2

 [B89]
   1: IntegerLiteral 0x555e9725b618 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725b638 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725b618 <col:36> 'int' 0
[B89.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725b650 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725b638 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725b618 <col:36> 'int' 0
return [B89.2];
   Preds (1): B90
   Succs (1): B0

 [B90]
   1: BinaryOperator 0x555e9725b5b0 <./lopcodes.h:80:23, ldebug.c:378:45> 'int' '||'
|-BinaryOperator 0x555e9725aff0 <./lopcodes.h:80:23, ldebug.c:377:47> 'int' '!='
| |-ImplicitCastExpr 0x555e9725afc0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| | `-ParenExpr 0x555e9725af78 <col:23, col:70> 'OpCode':'OpCode'
| |   `-ParenExpr 0x555e9725af58 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
| |     `-CStyleCastExpr 0x555e9725af30 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
| |       `-ParenExpr 0x555e9725af10 <col:26, col:30> 'unsigned int'
| |         `-BinaryOperator 0x555e9725aea8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
| |           |-ParenExpr 0x555e9725ace0 <line:80:37, col:49> 'Instruction':'unsigned int'
| |           | `-BinaryOperator 0x555e9725acb8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
| |           |   |-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| |           |   | `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
| |           |   |   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
| |           |   |     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
| |           |   |     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
| |           |   |     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
| |           |   |     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
| |           |   |     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
| |           |   |       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
| |           |   |       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
| |           |   |       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
| |           |   `-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
| |           `-ParenExpr 0x555e9725ae88 <line:71:20, col:49> 'Instruction':'unsigned int'
| |             `-BinaryOperator 0x555e9725ae60 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
| |               |-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
| |               | `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |               |   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
| |               |     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
| |               |       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
| |               |       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |               |       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |               |       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
| |               |       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
| |               `-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
| `-ImplicitCastExpr 0x555e9725afd8 <ldebug.c:377:47> 'unsigned int' <IntegralCast>
|   `-DeclRefExpr 0x555e9725af98 <col:47> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
`-BinaryOperator 0x555e9725b588 <./lopcodes.h:92:21, ldebug.c:378:45> 'int' '!='
  |-ParenExpr 0x555e9725b548 <./lopcodes.h:92:21, col:63> 'int'
  | `-ParenExpr 0x555e9725b528 <./llimits.h:75:22, col:31> 'int'
  |   `-CStyleCastExpr 0x555e9725b500 <col:23, col:30> 'int' <IntegralCast>
  |     `-ParenExpr 0x555e9725b4e0 <col:26, col:30> 'unsigned int'
  |       `-BinaryOperator 0x555e9725b470 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
  |         |-ParenExpr 0x555e9725b2a8 <line:92:32, col:43> 'Instruction':'unsigned int'
  |         | `-BinaryOperator 0x555e9725b280 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
  |         |   |-ImplicitCastExpr 0x555e9725b268 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
  |         |   | `-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  |         |   |   `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
  |         |   |     |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
  |         |   |     | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
  |         |   |     |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
  |         |   |     |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  |         |   |     `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
  |         |   |       |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
  |         |   |       | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  |         |   |       `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
  |         |   `-ParenExpr 0x555e9725b248 <./lopcodes.h:46:16, col:31> 'int'
  |         |     `-BinaryOperator 0x555e9725b220 <line:45:16, line:40:17> 'int' '+'
  |         |       |-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
  |         |       | `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
  |         |       |   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
  |         |       |   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
  |         |       `-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
  |         `-ParenExpr 0x555e9725b450 <line:71:20, col:49> 'Instruction':'unsigned int'
  |           `-BinaryOperator 0x555e9725b428 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
  |             |-ParenExpr 0x555e9725b3e8 <line:71:21, col:45> 'Instruction':'unsigned int'
  |             | `-UnaryOperator 0x555e9725b3c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
  |             |   `-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
  |             |     `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
  |             |       |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
  |             |       | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
  |             |       |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  |             |       |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
  |             |       `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
  |             `-IntegerLiteral 0x555e9725b408 <line:92:60> 'int' 0
  `-IntegerLiteral 0x555e9725b568 <ldebug.c:378:45> 'int' 0
[B92.26] || [B91.28]
   2: UnaryOperator 0x555e9725b5f8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725b5d8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725b5b0 <./lopcodes.h:80:23, ldebug.c:378:45> 'int' '||'
    |-BinaryOperator 0x555e9725aff0 <./lopcodes.h:80:23, ldebug.c:377:47> 'int' '!='
    | |-ImplicitCastExpr 0x555e9725afc0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
    | | `-ParenExpr 0x555e9725af78 <col:23, col:70> 'OpCode':'OpCode'
    | |   `-ParenExpr 0x555e9725af58 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    | |     `-CStyleCastExpr 0x555e9725af30 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
    | |       `-ParenExpr 0x555e9725af10 <col:26, col:30> 'unsigned int'
    | |         `-BinaryOperator 0x555e9725aea8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    | |           |-ParenExpr 0x555e9725ace0 <line:80:37, col:49> 'Instruction':'unsigned int'
    | |           | `-BinaryOperator 0x555e9725acb8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    | |           |   |-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    | |           |   | `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    | |           |   |   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
    | |           |   |     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
    | |           |   |     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
    | |           |   |     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
    | |           |   |     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    | |           |   |     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
    | |           |   |       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
    | |           |   |       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    | |           |   |       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
    | |           |   `-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
    | |           `-ParenExpr 0x555e9725ae88 <line:71:20, col:49> 'Instruction':'unsigned int'
    | |             `-BinaryOperator 0x555e9725ae60 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    | |               |-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
    | |               | `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    | |               |   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
    | |               |     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    | |               |       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
    | |               |       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    | |               |       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    | |               |       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
    | |               |       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
    | |               `-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
    | `-ImplicitCastExpr 0x555e9725afd8 <ldebug.c:377:47> 'unsigned int' <IntegralCast>
    |   `-DeclRefExpr 0x555e9725af98 <col:47> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
    `-BinaryOperator 0x555e9725b588 <./lopcodes.h:92:21, ldebug.c:378:45> 'int' '!='
      |-ParenExpr 0x555e9725b548 <./lopcodes.h:92:21, col:63> 'int'
      | `-ParenExpr 0x555e9725b528 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x555e9725b500 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x555e9725b4e0 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x555e9725b470 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x555e9725b2a8 <line:92:32, col:43> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x555e9725b280 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x555e9725b268 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
      |         |   |   `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
      |         |   |     |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
      |         |   |     | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
      |         |   |     |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
      |         |   |     |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      |         |   |     `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
      |         |   |       |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
      |         |   |       | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      |         |   |       `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
      |         |   `-ParenExpr 0x555e9725b248 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x555e9725b220 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
      |         `-ParenExpr 0x555e9725b450 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x555e9725b428 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x555e9725b3e8 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x555e9725b3c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
      |             |       `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
      |             `-IntegerLiteral 0x555e9725b408 <line:92:60> 'int' 0
      `-IntegerLiteral 0x555e9725b568 <ldebug.c:378:45> 'int' 0
!([B90.1])
   T: if [B90.2]
   Preds (2): B91 B92
   Succs (2): B89 B88

 [B91]
   1: DeclRefExpr 0x555e9725b018 <ldebug.c:378:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9725b040 <ldebug.c:378:26> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B91.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9725b058 <ldebug.c:378:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B91.2]->code
   4: ImplicitCastExpr 0x555e9725b118 <ldebug.c:378:26, col:30> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B91.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e9725b090 <ldebug.c:378:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   6: ImplicitCastExpr 0x555e9725b0d8 <ldebug.c:378:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B91.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x555e9725b0b8 <ldebug.c:378:38> 'int' 1
1
   8: BinaryOperator 0x555e9725b0f0 <ldebug.c:378:35, col:38> 'int' '+'
|-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
[B91.6] + [B91.7]
   9: ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
  |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
[B91.4][[B91.8]]
  10: ImplicitCastExpr 0x555e9725b268 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
      |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
([B91.9]) (ImplicitCastExpr, LValueToRValue, Instruction)
  11: IntegerLiteral 0x555e9725b178 <./lopcodes.h:44:17> 'int' 0
0
  12: IntegerLiteral 0x555e9725b198 <./lopcodes.h:42:18> 'int' 6
6
  13: BinaryOperator 0x555e9725b1b8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
[B91.11] + [B91.12]
  14: IntegerLiteral 0x555e9725b200 <./lopcodes.h:40:17> 'int' 8
8
  15: BinaryOperator 0x555e9725b220 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
([B91.13]) + [B91.14]
  16: BinaryOperator 0x555e9725b280 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9725b268 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
|     |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|     `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
|       |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|       `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
`-ParenExpr 0x555e9725b248 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e9725b220 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
[B91.10] >> ([B91.15])
  17: IntegerLiteral 0x555e9725b2c8 <./lopcodes.h:71:39> 'int' 0
0
  18: CStyleCastExpr 0x555e9725b2f8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
(Instruction)[B91.17] (CStyleCastExpr, IntegralCast, Instruction)
  19: UnaryOperator 0x555e9725b320 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
~[B91.18]
  20: IntegerLiteral 0x555e9725b360 <./lopcodes.h:37:17> 'int' 9
9
  21: BinaryOperator 0x555e9725b380 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
`-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
([B91.19]) << [B91.20]
  22: UnaryOperator 0x555e9725b3c8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
~([B91.21])
  23: IntegerLiteral 0x555e9725b408 <./lopcodes.h:92:60> 'int' 0
0
  24: BinaryOperator 0x555e9725b428 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9725b3e8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9725b3c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e9725b408 <line:92:60> 'int' 0
([B91.22]) << [B91.23]
  25: BinaryOperator 0x555e9725b470 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9725b2a8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9725b280 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9725b268 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
|   |     |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|   |     `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
|   |       |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|   |       `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
|   `-ParenExpr 0x555e9725b248 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e9725b220 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
`-ParenExpr 0x555e9725b450 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9725b428 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9725b3e8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9725b3c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e9725b408 <line:92:60> 'int' 0
([B91.16]) & ([B91.24])
  26: CStyleCastExpr 0x555e9725b500 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e9725b4e0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9725b470 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9725b2a8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9725b280 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9725b268 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   |     |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |   |     `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
    |   |       |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    |   |       `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
    |   `-ParenExpr 0x555e9725b248 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e9725b220 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
    `-ParenExpr 0x555e9725b450 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9725b428 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9725b3e8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9725b3c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e9725b408 <line:92:60> 'int' 0
(int)([B91.25]) (CStyleCastExpr, IntegralCast, int)
  27: IntegerLiteral 0x555e9725b568 <ldebug.c:378:45> 'int' 0
0
  28: BinaryOperator 0x555e9725b588 <./lopcodes.h:92:21, ldebug.c:378:45> 'int' '!='
|-ParenExpr 0x555e9725b548 <./lopcodes.h:92:21, col:63> 'int'
| `-ParenExpr 0x555e9725b528 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x555e9725b500 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x555e9725b4e0 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x555e9725b470 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x555e9725b2a8 <line:92:32, col:43> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x555e9725b280 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x555e9725b268 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x555e9725b158 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|         |   |   `-ArraySubscriptExpr 0x555e9725b130 <ldebug.c:378:26, col:39> 'Instruction':'unsigned int' lvalue
|         |   |     |-ImplicitCastExpr 0x555e9725b118 <col:26, col:30> 'Instruction *' <LValueToRValue>
|         |   |     | `-MemberExpr 0x555e9725b058 <col:26, col:30> 'Instruction *const' lvalue ->code 0x555e971d9508
|         |   |     |   `-ImplicitCastExpr 0x555e9725b040 <col:26> 'const Proto *' <LValueToRValue>
|         |   |     |     `-DeclRefExpr 0x555e9725b018 <col:26> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|         |   |     `-BinaryOperator 0x555e9725b0f0 <col:35, col:38> 'int' '+'
|         |   |       |-ImplicitCastExpr 0x555e9725b0d8 <col:35> 'int' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x555e9725b090 <col:35> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|         |   |       `-IntegerLiteral 0x555e9725b0b8 <col:38> 'int' 1
|         |   `-ParenExpr 0x555e9725b248 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x555e9725b220 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x555e9725b1e0 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x555e9725b1b8 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x555e9725b178 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x555e9725b198 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x555e9725b200 <line:40:17> 'int' 8
|         `-ParenExpr 0x555e9725b450 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x555e9725b428 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x555e9725b3e8 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x555e9725b3c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x555e9725b3a8 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x555e9725b380 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x555e9725b340 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x555e9725b320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x555e9725b2f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x555e9725b2c8 <col:39> 'int' 0
|             |       `-IntegerLiteral 0x555e9725b360 <line:37:17> 'int' 9
|             `-IntegerLiteral 0x555e9725b408 <line:92:60> 'int' 0
`-IntegerLiteral 0x555e9725b568 <ldebug.c:378:45> 'int' 0
(([B91.26])) != [B91.27]
   Preds (1): B92
   Succs (1): B90

 [B92]
   1: DeclRefExpr 0x555e9725ab20 <ldebug.c:377:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9725ab48 <ldebug.c:377:28> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B92.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9725ab60 <ldebug.c:377:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B92.2]->code
   4: ImplicitCastExpr 0x555e9725ac20 <ldebug.c:377:28, col:32> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B92.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e9725ab98 <ldebug.c:377:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   6: ImplicitCastExpr 0x555e9725abe0 <ldebug.c:377:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B92.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x555e9725abc0 <ldebug.c:377:40> 'int' 1
1
   8: BinaryOperator 0x555e9725abf8 <ldebug.c:377:37, col:40> 'int' '+'
|-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
[B92.6] + [B92.7]
   9: ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
  |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
[B92.4][[B92.8]]
  10: ImplicitCastExpr 0x555e9725aca0 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
      |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
([B92.9]) (ImplicitCastExpr, LValueToRValue, Instruction)
  11: IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
0
  12: BinaryOperator 0x555e9725acb8 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
|     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
|       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
`-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
[B92.10] >> [B92.11]
  13: IntegerLiteral 0x555e9725ad00 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x555e9725ad30 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
(Instruction)[B92.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x555e9725ad58 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
~[B92.14]
  16: IntegerLiteral 0x555e9725ad98 <./lopcodes.h:42:18> 'int' 6
6
  17: BinaryOperator 0x555e9725adb8 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
`-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
([B92.15]) << [B92.16]
  18: UnaryOperator 0x555e9725ae00 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
~([B92.17])
  19: IntegerLiteral 0x555e9725ae40 <./lopcodes.h:80:67> 'int' 0
0
  20: BinaryOperator 0x555e9725ae60 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
([B92.18]) << [B92.19]
  21: BinaryOperator 0x555e9725aea8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9725ace0 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9725acb8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
|   |     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|   |     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
|   |       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|   |       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
|   `-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e9725ae88 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9725ae60 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
([B92.12]) & ([B92.20])
  22: CStyleCastExpr 0x555e9725af30 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e9725af10 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9725aea8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9725ace0 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9725acb8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   |     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |   |     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
    |   |       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    |   |       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
    |   `-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e9725ae88 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9725ae60 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
(OpCode)([B92.21]) (CStyleCastExpr, IntegralCast, OpCode)
  23: ImplicitCastExpr 0x555e9725afc0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e9725af78 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e9725af58 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e9725af30 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e9725af10 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e9725aea8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e9725ace0 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e9725acb8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
          |   |     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
          |   |     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
          |   |     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
          |   |     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
          |   |     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
          |   |       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
          |   |       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
          |   |       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
          |   `-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e9725ae88 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e9725ae60 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
(([B92.22])) (ImplicitCastExpr, IntegralCast, unsigned int)
  24: DeclRefExpr 0x555e9725af98 <ldebug.c:377:47> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
OP_SETLIST
  25: ImplicitCastExpr 0x555e9725afd8 <ldebug.c:377:47> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e9725af98 <col:47> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
[B92.24] (ImplicitCastExpr, IntegralCast, unsigned int)
  26: BinaryOperator 0x555e9725aff0 <./lopcodes.h:80:23, ldebug.c:377:47> 'int' '!='
|-ImplicitCastExpr 0x555e9725afc0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e9725af78 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e9725af58 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e9725af30 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e9725af10 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e9725aea8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e9725ace0 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e9725acb8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e9725aca0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e9725ac60 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-ArraySubscriptExpr 0x555e9725ac38 <ldebug.c:377:28, col:41> 'Instruction':'unsigned int' lvalue
|           |   |     |-ImplicitCastExpr 0x555e9725ac20 <col:28, col:32> 'Instruction *' <LValueToRValue>
|           |   |     | `-MemberExpr 0x555e9725ab60 <col:28, col:32> 'Instruction *const' lvalue ->code 0x555e971d9508
|           |   |     |   `-ImplicitCastExpr 0x555e9725ab48 <col:28> 'const Proto *' <LValueToRValue>
|           |   |     |     `-DeclRefExpr 0x555e9725ab20 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|           |   |     `-BinaryOperator 0x555e9725abf8 <col:37, col:40> 'int' '+'
|           |   |       |-ImplicitCastExpr 0x555e9725abe0 <col:37> 'int' <LValueToRValue>
|           |   |       | `-DeclRefExpr 0x555e9725ab98 <col:37> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|           |   |       `-IntegerLiteral 0x555e9725abc0 <col:40> 'int' 1
|           |   `-IntegerLiteral 0x555e9725ac80 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e9725ae88 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e9725ae60 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e9725ae20 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e9725ae00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e9725ade0 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e9725adb8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e9725ad78 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e9725ad58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e9725ad30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e9725ad00 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e9725ad98 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e9725ae40 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e9725afd8 <ldebug.c:377:47> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e9725af98 <col:47> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
[B92.23] != [B92.25]
   T: [B92.26] || ...
   Preds (1): B94
   Succs (2): B90 B91

 [B93]
   1: IntegerLiteral 0x555e9725aa88 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725aaa8 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725aa88 <col:36> 'int' 0
[B93.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725aac0 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725aaa8 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725aa88 <col:36> 'int' 0
return [B93.2];
   Preds (1): B94
   Succs (1): B0

 [B94]
   1: DeclRefExpr 0x555e9725a908 <ldebug.c:376:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e9725a950 <ldebug.c:376:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725a908 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B94.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725a930 <ldebug.c:376:20> 'int' 2
2
   4: BinaryOperator 0x555e9725a968 <ldebug.c:376:17, col:20> 'int' '+'
|-ImplicitCastExpr 0x555e9725a950 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725a908 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e9725a930 <col:20> 'int' 2
[B94.2] + [B94.3]
   5: DeclRefExpr 0x555e9725a990 <ldebug.c:376:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e9725a9b8 <ldebug.c:376:24> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9725a990 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B94.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e9725a9d0 <ldebug.c:376:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e9725a9b8 <col:24> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9725a990 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B94.6]->sizecode
   8: ImplicitCastExpr 0x555e9725aa08 <ldebug.c:376:24, col:28> 'int' <LValueToRValue>
`-MemberExpr 0x555e9725a9d0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e9725a9b8 <col:24> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9725a990 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B94.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e9725aa20 <ldebug.c:376:17, col:28> 'int' '<'
|-BinaryOperator 0x555e9725a968 <col:17, col:20> 'int' '+'
| |-ImplicitCastExpr 0x555e9725a950 <col:17> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e9725a908 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
| `-IntegerLiteral 0x555e9725a930 <col:20> 'int' 2
`-ImplicitCastExpr 0x555e9725aa08 <col:24, col:28> 'int' <LValueToRValue>
  `-MemberExpr 0x555e9725a9d0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
    `-ImplicitCastExpr 0x555e9725a9b8 <col:24> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9725a990 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B94.4] < [B94.8]
  10: UnaryOperator 0x555e9725aa68 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725aa48 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725aa20 <line:376:17, col:28> 'int' '<'
    |-BinaryOperator 0x555e9725a968 <col:17, col:20> 'int' '+'
    | |-ImplicitCastExpr 0x555e9725a950 <col:17> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x555e9725a908 <col:17> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    | `-IntegerLiteral 0x555e9725a930 <col:20> 'int' 2
    `-ImplicitCastExpr 0x555e9725aa08 <col:24, col:28> 'int' <LValueToRValue>
      `-MemberExpr 0x555e9725a9d0 <col:24, col:28> 'const int' lvalue ->sizecode 0x555e971d9ce8
        `-ImplicitCastExpr 0x555e9725a9b8 <col:24> 'const Proto *' <LValueToRValue>
          `-DeclRefExpr 0x555e9725a990 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B94.9])
   T: if [B94.10]
   Preds (1): B95
   Succs (2): B93 B92

 [B95]
  case OP_LOADBOOL:
   1: DeclRefExpr 0x555e9725a880 <ldebug.c:375:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   2: ImplicitCastExpr 0x555e9725a8c8 <ldebug.c:375:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e9725a880 <col:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B95.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e9725a8a8 <ldebug.c:375:18> 'int' 1
1
   4: BinaryOperator 0x555e9725a8e0 <ldebug.c:375:13, col:18> 'int' '=='
|-ImplicitCastExpr 0x555e9725a8c8 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e9725a880 <col:13> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-IntegerLiteral 0x555e9725a8a8 <col:18> 'int' 1
[B95.2] == [B95.3]
   T: if [B95.4]
   Preds (1): B3
   Succs (2): B94 B88

 [B96]
   1: IntegerLiteral 0x555e9725a698 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e9725a6b8 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725a698 <col:36> 'int' 0
[B96.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e9725a6d0 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e9725a6b8 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725a698 <col:36> 'int' 0
return [B96.2];
   Preds (1): B97
   Succs (1): B0

 [B97]
   1: DeclRefExpr 0x555e97258b18 <ldebug.c:371:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97258b40 <ldebug.c:371:24> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B97.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e97258b58 <ldebug.c:371:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B97.2]->code
   4: ImplicitCastExpr 0x555e9725a260 <ldebug.c:371:24, col:28> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B97.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e97258b90 <ldebug.c:371:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   6: ImplicitCastExpr 0x555e9725a220 <ldebug.c:371:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B97.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x555e97258bb8 <ldebug.c:371:36> 'int' 1
1
   8: BinaryOperator 0x555e9725a238 <ldebug.c:371:33, col:36> 'int' '+'
|-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
[B97.6] + [B97.7]
   9: ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
  |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
  `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
[B97.4][[B97.8]]
  10: ImplicitCastExpr 0x555e9725a2e0 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
      |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
      `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
([B97.9]) (ImplicitCastExpr, LValueToRValue, Instruction)
  11: IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
0
  12: BinaryOperator 0x555e9725a2f8 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9725a2e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
|     |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|     `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
|       |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|       `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
`-IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
[B97.10] >> [B97.11]
  13: IntegerLiteral 0x555e9725a340 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x555e9725a370 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
(Instruction)[B97.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x555e9725a398 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
~[B97.14]
  16: IntegerLiteral 0x555e9725a3d8 <./lopcodes.h:42:18> 'int' 6
6
  17: BinaryOperator 0x555e9725a3f8 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
`-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
([B97.15]) << [B97.16]
  18: UnaryOperator 0x555e9725a440 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
~([B97.17])
  19: IntegerLiteral 0x555e9725a480 <./lopcodes.h:80:67> 'int' 0
0
  20: BinaryOperator 0x555e9725a4a0 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9725a460 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9725a440 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9725a480 <line:80:67> 'int' 0
([B97.18]) << [B97.19]
  21: BinaryOperator 0x555e9725a4e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9725a320 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9725a2f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9725a2e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
|   |     |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|   |     `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
|   |       |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|   |       `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
|   `-IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e9725a4c8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9725a4a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9725a460 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9725a440 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9725a480 <line:80:67> 'int' 0
([B97.12]) & ([B97.20])
  22: CStyleCastExpr 0x555e9725a570 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e9725a550 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9725a4e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9725a320 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9725a2f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9725a2e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   |     |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |   |     `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
    |   |       |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    |   |       `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
    |   `-IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e9725a4c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9725a4a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9725a460 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9725a440 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e9725a480 <line:80:67> 'int' 0
(OpCode)([B97.21]) (CStyleCastExpr, IntegralCast, OpCode)
  23: ImplicitCastExpr 0x555e9725a600 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e9725a5b8 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e9725a598 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e9725a570 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e9725a550 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e9725a4e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e9725a320 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e9725a2f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e9725a2e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
          |   |     |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
          |   |     | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
          |   |     |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
          |   |     |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
          |   |     `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
          |   |       |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
          |   |       | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
          |   |       `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
          |   `-IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e9725a4c8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e9725a4a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e9725a460 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e9725a440 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e9725a480 <line:80:67> 'int' 0
(([B97.22])) (ImplicitCastExpr, IntegralCast, unsigned int)
  24: DeclRefExpr 0x555e9725a5d8 <ldebug.c:371:43> 'int' EnumConstant 0x555e971f1ba0 'OP_JMP' 'int'
OP_JMP
  25: ImplicitCastExpr 0x555e9725a618 <ldebug.c:371:43> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e9725a5d8 <col:43> 'int' EnumConstant 0x555e971f1ba0 'OP_JMP' 'int'
[B97.24] (ImplicitCastExpr, IntegralCast, unsigned int)
  26: BinaryOperator 0x555e9725a630 <./lopcodes.h:80:23, ldebug.c:371:43> 'int' '=='
|-ImplicitCastExpr 0x555e9725a600 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e9725a5b8 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e9725a598 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e9725a570 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e9725a550 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e9725a4e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e9725a320 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e9725a2f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e9725a2e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
|           |   |     |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
|           |   |     | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
|           |   |     |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
|           |   |     |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|           |   |     `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
|           |   |       |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
|           |   |       | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
|           |   |       `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
|           |   `-IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e9725a4c8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e9725a4a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e9725a460 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e9725a440 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e9725a480 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e9725a618 <ldebug.c:371:43> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e9725a5d8 <col:43> 'int' EnumConstant 0x555e971f1ba0 'OP_JMP' 'int'
[B97.23] == [B97.25]
  27: UnaryOperator 0x555e9725a678 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9725a658 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9725a630 <./lopcodes.h:80:23, ldebug.c:371:43> 'int' '=='
    |-ImplicitCastExpr 0x555e9725a600 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
    | `-ParenExpr 0x555e9725a5b8 <col:23, col:70> 'OpCode':'OpCode'
    |   `-ParenExpr 0x555e9725a598 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    |     `-CStyleCastExpr 0x555e9725a570 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
    |       `-ParenExpr 0x555e9725a550 <col:26, col:30> 'unsigned int'
    |         `-BinaryOperator 0x555e9725a4e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |           |-ParenExpr 0x555e9725a320 <line:80:37, col:49> 'Instruction':'unsigned int'
    |           | `-BinaryOperator 0x555e9725a2f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |           |   |-ImplicitCastExpr 0x555e9725a2e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |           |   | `-ParenExpr 0x555e9725a2a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |           |   |   `-ArraySubscriptExpr 0x555e9725a278 <ldebug.c:371:24, col:37> 'Instruction':'unsigned int' lvalue
    |           |   |     |-ImplicitCastExpr 0x555e9725a260 <col:24, col:28> 'Instruction *' <LValueToRValue>
    |           |   |     | `-MemberExpr 0x555e97258b58 <col:24, col:28> 'Instruction *const' lvalue ->code 0x555e971d9508
    |           |   |     |   `-ImplicitCastExpr 0x555e97258b40 <col:24> 'const Proto *' <LValueToRValue>
    |           |   |     |     `-DeclRefExpr 0x555e97258b18 <col:24> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |           |   |     `-BinaryOperator 0x555e9725a238 <col:33, col:36> 'int' '+'
    |           |   |       |-ImplicitCastExpr 0x555e9725a220 <col:33> 'int' <LValueToRValue>
    |           |   |       | `-DeclRefExpr 0x555e97258b90 <col:33> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    |           |   |       `-IntegerLiteral 0x555e97258bb8 <col:36> 'int' 1
    |           |   `-IntegerLiteral 0x555e9725a2c0 <./lopcodes.h:44:17> 'int' 0
    |           `-ParenExpr 0x555e9725a4c8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |             `-BinaryOperator 0x555e9725a4a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |               |-ParenExpr 0x555e9725a460 <line:71:21, col:45> 'Instruction':'unsigned int'
    |               | `-UnaryOperator 0x555e9725a440 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |               |   `-ParenExpr 0x555e9725a420 <col:23, col:44> 'Instruction':'unsigned int'
    |               |     `-BinaryOperator 0x555e9725a3f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |               |       |-ParenExpr 0x555e9725a3b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |               |       | `-UnaryOperator 0x555e9725a398 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |               |       |   `-CStyleCastExpr 0x555e9725a370 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |               |       |     `-IntegerLiteral 0x555e9725a340 <col:39> 'int' 0
    |               |       `-IntegerLiteral 0x555e9725a3d8 <line:42:18> 'int' 6
    |               `-IntegerLiteral 0x555e9725a480 <line:80:67> 'int' 0
    `-ImplicitCastExpr 0x555e9725a618 <ldebug.c:371:43> 'unsigned int' <IntegralCast>
      `-DeclRefExpr 0x555e9725a5d8 <col:43> 'int' EnumConstant 0x555e971f1ba0 'OP_JMP' 'int'
!([B97.26])
   T: if [B97.27]
   Preds (1): B99
   Succs (2): B96 B3

 [B98]
   1: IntegerLiteral 0x555e97258a80 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97258aa0 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97258a80 <col:36> 'int' 0
[B98.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97258ab8 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97258aa0 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97258a80 <col:36> 'int' 0
return [B98.2];
   Preds (1): B99
   Succs (1): B0

 [B99]
   1: DeclRefExpr 0x555e97258900 <ldebug.c:370:13> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e97258948 <ldebug.c:370:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97258900 <col:13> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B99.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e97258928 <ldebug.c:370:16> 'int' 2
2
   4: BinaryOperator 0x555e97258960 <ldebug.c:370:13, col:16> 'int' '+'
|-ImplicitCastExpr 0x555e97258948 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97258900 <col:13> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e97258928 <col:16> 'int' 2
[B99.2] + [B99.3]
   5: DeclRefExpr 0x555e97258988 <ldebug.c:370:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e972589b0 <ldebug.c:370:20> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97258988 <col:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B99.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e972589c8 <ldebug.c:370:20, col:24> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e972589b0 <col:20> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97258988 <col:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B99.6]->sizecode
   8: ImplicitCastExpr 0x555e97258a00 <ldebug.c:370:20, col:24> 'int' <LValueToRValue>
`-MemberExpr 0x555e972589c8 <col:20, col:24> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e972589b0 <col:20> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97258988 <col:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B99.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e97258a18 <ldebug.c:370:13, col:24> 'int' '<'
|-BinaryOperator 0x555e97258960 <col:13, col:16> 'int' '+'
| |-ImplicitCastExpr 0x555e97258948 <col:13> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e97258900 <col:13> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
| `-IntegerLiteral 0x555e97258928 <col:16> 'int' 2
`-ImplicitCastExpr 0x555e97258a00 <col:20, col:24> 'int' <LValueToRValue>
  `-MemberExpr 0x555e972589c8 <col:20, col:24> 'const int' lvalue ->sizecode 0x555e971d9ce8
    `-ImplicitCastExpr 0x555e972589b0 <col:20> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e97258988 <col:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B99.4] < [B99.8]
  10: UnaryOperator 0x555e97258a60 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97258a40 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e97258a18 <line:370:13, col:24> 'int' '<'
    |-BinaryOperator 0x555e97258960 <col:13, col:16> 'int' '+'
    | |-ImplicitCastExpr 0x555e97258948 <col:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x555e97258900 <col:13> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    | `-IntegerLiteral 0x555e97258928 <col:16> 'int' 2
    `-ImplicitCastExpr 0x555e97258a00 <col:20, col:24> 'int' <LValueToRValue>
      `-MemberExpr 0x555e972589c8 <col:20, col:24> 'const int' lvalue ->sizecode 0x555e971d9ce8
        `-ImplicitCastExpr 0x555e972589b0 <col:20> 'const Proto *' <LValueToRValue>
          `-DeclRefExpr 0x555e97258988 <col:20> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B99.9])
   T: if [B99.10]
   Preds (1): B100
   Succs (2): B98 B97

 [B100]
   1: DeclRefExpr 0x555e97258758 <./lopcodes.h:258:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   2: ImplicitCastExpr 0x555e972587a8 <./lopcodes.h:258:23> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e97258758 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B100.1] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   3: DeclRefExpr 0x555e97258780 <ldebug.c:369:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
   4: ImplicitCastExpr 0x555e972587c0 <ldebug.c:369:19> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97258780 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B100.3] (ImplicitCastExpr, LValueToRValue, OpCode)
   5: ArraySubscriptExpr 0x555e972587d8 <./lopcodes.h:258:23, col:37> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e972587a8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e97258758 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e972587c0 <ldebug.c:369:19> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97258780 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B100.2][[B100.4]]
   6: ImplicitCastExpr 0x555e97258888 <./lopcodes.h:258:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e972587d8 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e972587a8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e97258758 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e972587c0 <ldebug.c:369:19> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97258780 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B100.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x555e972588a0 <./lopcodes.h:258:23, col:37> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97258888 <col:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e972587d8 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e972587a8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e97258758 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e972587c0 <ldebug.c:369:19> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97258780 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B100.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x555e97258800 <./lopcodes.h:258:42> 'int' 1
1
   9: IntegerLiteral 0x555e97258820 <./lopcodes.h:258:47> 'int' 7
7
  10: BinaryOperator 0x555e97258840 <./lopcodes.h:258:42, col:47> 'int' '<<'
|-IntegerLiteral 0x555e97258800 <col:42> 'int' 1
`-IntegerLiteral 0x555e97258820 <col:47> 'int' 7
[B100.8] << [B100.9]
  11: BinaryOperator 0x555e972588b8 <./lopcodes.h:258:23, col:48> 'int' '&'
|-ImplicitCastExpr 0x555e972588a0 <col:23, col:37> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97258888 <col:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e972587d8 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e972587a8 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e97258758 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e972587c0 <ldebug.c:369:19> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97258780 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-ParenExpr 0x555e97258868 <./lopcodes.h:258:41, col:48> 'int'
  `-BinaryOperator 0x555e97258840 <col:42, col:47> 'int' '<<'
    |-IntegerLiteral 0x555e97258800 <col:42> 'int' 1
    `-IntegerLiteral 0x555e97258820 <col:47> 'int' 7
[B100.7] & ([B100.10])
   T: if ([B100.11])
   Preds (3): B101 B102 B103
   Succs (2): B99 B3

 [B101]
   1: DeclRefExpr 0x555e97258668 <ldebug.c:367:28> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e97258690 <ldebug.c:367:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97258668 <col:28> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B101.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e97258640 <ldebug.c:367:21> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
   4: BinaryOperator 0x555e972586a8 <ldebug.c:367:21, col:28> 'int' '='
|-DeclRefExpr 0x555e97258640 <col:21> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
`-ImplicitCastExpr 0x555e97258690 <col:28> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97258668 <col:28> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B101.3] = [B101.2]
   Preds (1): B102
   Succs (1): B100

 [B102]
   1: DeclRefExpr 0x555e97258598 <ldebug.c:367:11> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e972585e8 <ldebug.c:367:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97258598 <col:11> 'int' lvalue Var 0x555e97252a58 'a' 'int'
[B102.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e972585c0 <ldebug.c:367:16> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
reg
   4: ImplicitCastExpr 0x555e97258600 <ldebug.c:367:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972585c0 <col:16> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B102.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e97258618 <ldebug.c:367:11, col:16> 'int' '=='
|-ImplicitCastExpr 0x555e972585e8 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97258598 <col:11> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e97258600 <col:16> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e972585c0 <col:16> 'int' lvalue ParmVar 0x555e97251d48 'reg' 'int'
[B102.2] == [B102.4]
   T: if [B102.5]
   Preds (1): B103
   Succs (2): B101 B100

 [B103]
   1: DeclRefExpr 0x555e972583f0 <./lopcodes.h:257:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   2: ImplicitCastExpr 0x555e97258440 <./lopcodes.h:257:23> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e972583f0 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B103.1] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   3: DeclRefExpr 0x555e97258418 <ldebug.c:366:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
   4: ImplicitCastExpr 0x555e97258458 <ldebug.c:366:19> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97258418 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B103.3] (ImplicitCastExpr, LValueToRValue, OpCode)
   5: ArraySubscriptExpr 0x555e97258470 <./lopcodes.h:257:23, col:37> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e97258440 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e972583f0 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e97258458 <ldebug.c:366:19> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97258418 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B103.2][[B103.4]]
   6: ImplicitCastExpr 0x555e97258520 <./lopcodes.h:257:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97258470 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e97258440 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e972583f0 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e97258458 <ldebug.c:366:19> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97258418 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B103.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x555e97258538 <./lopcodes.h:257:23, col:37> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97258520 <col:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e97258470 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e97258440 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e972583f0 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e97258458 <ldebug.c:366:19> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97258418 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B103.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x555e97258498 <./lopcodes.h:257:42> 'int' 1
1
   9: IntegerLiteral 0x555e972584b8 <./lopcodes.h:257:47> 'int' 6
6
  10: BinaryOperator 0x555e972584d8 <./lopcodes.h:257:42, col:47> 'int' '<<'
|-IntegerLiteral 0x555e97258498 <col:42> 'int' 1
`-IntegerLiteral 0x555e972584b8 <col:47> 'int' 6
[B103.8] << [B103.9]
  11: BinaryOperator 0x555e97258550 <./lopcodes.h:257:23, col:48> 'int' '&'
|-ImplicitCastExpr 0x555e97258538 <col:23, col:37> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97258520 <col:23, col:37> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e97258470 <col:23, col:37> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e97258440 <col:23> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e972583f0 <col:23> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e97258458 <ldebug.c:366:19> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97258418 <col:19> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-ParenExpr 0x555e97258500 <./lopcodes.h:257:41, col:48> 'int'
  `-BinaryOperator 0x555e972584d8 <col:42, col:47> 'int' '<<'
    |-IntegerLiteral 0x555e97258498 <col:42> 'int' 1
    `-IntegerLiteral 0x555e972584b8 <col:47> 'int' 6
[B103.7] & ([B103.10])
   T: if ([B103.11])
   Preds (4): B105 B121 B125 B104(Unreachable)
   Succs (2): B102 B100

 [B104]
   1: DeclRefExpr 0x555e972534d8 <./lopcodes.h:254:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   2: ImplicitCastExpr 0x555e97253588 <./lopcodes.h:254:41> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B104.1] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   3: DeclRefExpr 0x555e97253500 <ldebug.c:330:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
   4: ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B104.3] (ImplicitCastExpr, LValueToRValue, OpCode)
   5: ArraySubscriptExpr 0x555e972535b8 <./lopcodes.h:254:41, col:55> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e97253588 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B104.2][[B104.4]]
   6: ImplicitCastExpr 0x555e97253600 <./lopcodes.h:254:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e972535b8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e97253588 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B104.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x555e97253618 <./lopcodes.h:254:41, col:55> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97253600 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e972535b8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e97253588 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B104.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x555e972535e0 <./lopcodes.h:254:59> 'int' 3
3
   9: BinaryOperator 0x555e97253630 <./lopcodes.h:254:41, col:59> 'int' '&'
|-ImplicitCastExpr 0x555e97253618 <col:41, col:55> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97253600 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e972535b8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e97253588 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-IntegerLiteral 0x555e972535e0 <./lopcodes.h:254:59> 'int' 3
[B104.7] & [B104.8]
  10: CStyleCastExpr 0x555e97253700 <./llimits.h:75:23, col:30> 'enum OpMode':'enum OpMode' <IntegralCast>
`-ParenExpr 0x555e972536e0 <col:26, col:30> 'int'
  `-BinaryOperator 0x555e97253630 <./lopcodes.h:254:41, col:59> 'int' '&'
    |-ImplicitCastExpr 0x555e97253618 <col:41, col:55> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e97253600 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x555e972535b8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
    |     |-ImplicitCastExpr 0x555e97253588 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    |     `-ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
    |       `-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
    `-IntegerLiteral 0x555e972535e0 <./lopcodes.h:254:59> 'int' 3
(enum OpMode)([B104.9]) (CStyleCastExpr, IntegralCast, enum OpMode)
  11: ImplicitCastExpr 0x555e97253768 <./lopcodes.h:254:22, col:61> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e97253748 <col:22, col:61> 'enum OpMode':'enum OpMode'
  `-ParenExpr 0x555e97253728 <./llimits.h:75:22, col:31> 'enum OpMode':'enum OpMode'
    `-CStyleCastExpr 0x555e97253700 <col:23, col:30> 'enum OpMode':'enum OpMode' <IntegralCast>
      `-ParenExpr 0x555e972536e0 <col:26, col:30> 'int'
        `-BinaryOperator 0x555e97253630 <./lopcodes.h:254:41, col:59> 'int' '&'
          |-ImplicitCastExpr 0x555e97253618 <col:41, col:55> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x555e97253600 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
          |   `-ArraySubscriptExpr 0x555e972535b8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
          |     |-ImplicitCastExpr 0x555e97253588 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
          |     | `-DeclRefExpr 0x555e972534d8 <col:41> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
          |     `-ImplicitCastExpr 0x555e972535a0 <ldebug.c:330:23> 'OpCode':'OpCode' <LValueToRValue>
          |       `-DeclRefExpr 0x555e97253500 <col:23> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
          `-IntegerLiteral 0x555e972535e0 <./lopcodes.h:254:59> 'int' 3
(([B104.10])) (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B104.11]
   Preds (1): B131
   Succs (4): B120 B124 B129 B103(Unreachable)

 [B105]
   T: break;
   Preds (3): B107 B115 B120
   Succs (1): B103

 [B106]
   1: IntegerLiteral 0x555e972581e8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97258208 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e972581e8 <col:36> 'int' 0
[B106.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97258220 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97258208 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e972581e8 <col:36> 'int' 0
return [B106.2];
   Preds (1): B107
   Succs (1): B0

 [B107]
   1: DeclRefExpr 0x555e972580b8 <ldebug.c:360:20> 'int' lvalue Var 0x555e97257338 'j' 'int'
j
   2: ImplicitCastExpr 0x555e97258100 <ldebug.c:360:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972580b8 <col:20> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B107.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e972580e0 <ldebug.c:360:22> 'int' 1
1
   4: BinaryOperator 0x555e97258118 <ldebug.c:360:20, col:22> 'int' '&'
|-ImplicitCastExpr 0x555e97258100 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972580b8 <col:20> 'int' lvalue Var 0x555e97257338 'j' 'int'
`-IntegerLiteral 0x555e972580e0 <col:22> 'int' 1
[B107.2] & [B107.3]
   5: IntegerLiteral 0x555e97258160 <ldebug.c:360:28> 'int' 0
0
   6: BinaryOperator 0x555e97258180 <ldebug.c:360:19, col:28> 'int' '=='
|-ParenExpr 0x555e97258140 <col:19, col:23> 'int'
| `-BinaryOperator 0x555e97258118 <col:20, col:22> 'int' '&'
|   |-ImplicitCastExpr 0x555e97258100 <col:20> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x555e972580b8 <col:20> 'int' lvalue Var 0x555e97257338 'j' 'int'
|   `-IntegerLiteral 0x555e972580e0 <col:22> 'int' 1
`-IntegerLiteral 0x555e97258160 <col:28> 'int' 0
([B107.4]) == [B107.5]
   7: UnaryOperator 0x555e972581c8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e972581a8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e97258180 <line:360:19, col:28> 'int' '=='
    |-ParenExpr 0x555e97258140 <col:19, col:23> 'int'
    | `-BinaryOperator 0x555e97258118 <col:20, col:22> 'int' '&'
    |   |-ImplicitCastExpr 0x555e97258100 <col:20> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e972580b8 <col:20> 'int' lvalue Var 0x555e97257338 'j' 'int'
    |   `-IntegerLiteral 0x555e972580e0 <col:22> 'int' 1
    `-IntegerLiteral 0x555e97258160 <col:28> 'int' 0
!([B107.6])
   T: if [B107.7]
   Preds (2): B109 B113
   Succs (2): B106 B105

 [B108]
   1: DeclRefExpr 0x555e972574c8 <ldebug.c:354:35> 'int' lvalue Var 0x555e97257338 'j' 'int'
j
   2: UnaryOperator 0x555e972574f0 <ldebug.c:354:35, col:36> 'int' postfix '++'
`-DeclRefExpr 0x555e972574c8 <col:35> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B108.1]++
   Preds (1): B110
   Succs (1): B113

 [B109]
   T: break;
   Preds (1): B110
   Succs (1): B107

 [B110]
   1: BinaryOperator 0x555e97257fb8 <./lopcodes.h:80:23, ldebug.c:356:67> 'int' '&&'
|-BinaryOperator 0x555e97257b10 <./lopcodes.h:80:23, ldebug.c:356:38> 'int' '=='
| |-ImplicitCastExpr 0x555e97257ae0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| | `-ParenExpr 0x555e97257a98 <col:23, col:70> 'OpCode':'OpCode'
| |   `-ParenExpr 0x555e97257a78 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
| |     `-CStyleCastExpr 0x555e97257a50 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
| |       `-ParenExpr 0x555e97257a30 <col:26, col:30> 'unsigned int'
| |         `-BinaryOperator 0x555e972579c8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
| |           |-ParenExpr 0x555e97257800 <line:80:37, col:49> 'Instruction':'unsigned int'
| |           | `-BinaryOperator 0x555e972577d8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
| |           |   |-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| |           |   | `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
| |           |   |   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
| |           |   `-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
| |           `-ParenExpr 0x555e972579a8 <line:71:20, col:49> 'Instruction':'unsigned int'
| |             `-BinaryOperator 0x555e97257980 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
| |               |-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
| |               | `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |               |   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
| |               |     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
| |               |       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
| |               |       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |               |       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |               |       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
| |               |       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
| |               `-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
| `-ImplicitCastExpr 0x555e97257af8 <ldebug.c:356:38> 'unsigned int' <IntegralCast>
|   `-DeclRefExpr 0x555e97257ab8 <col:38> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
`-BinaryOperator 0x555e97257f90 <./lopcodes.h:92:21, ldebug.c:356:67> 'int' '=='
  |-ParenExpr 0x555e97257f50 <./lopcodes.h:92:21, col:63> 'int'
  | `-ParenExpr 0x555e97257f30 <./llimits.h:75:22, col:31> 'int'
  |   `-CStyleCastExpr 0x555e97257f08 <col:23, col:30> 'int' <IntegralCast>
  |     `-ParenExpr 0x555e97257ee8 <col:26, col:30> 'unsigned int'
  |       `-BinaryOperator 0x555e97257e78 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
  |         |-ParenExpr 0x555e97257cb0 <line:92:32, col:43> 'Instruction':'unsigned int'
  |         | `-BinaryOperator 0x555e97257c88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
  |         |   |-ImplicitCastExpr 0x555e97257c70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
  |         |   | `-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  |         |   |   `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
  |         |   `-ParenExpr 0x555e97257c50 <./lopcodes.h:46:16, col:31> 'int'
  |         |     `-BinaryOperator 0x555e97257c28 <line:45:16, line:40:17> 'int' '+'
  |         |       |-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
  |         |       | `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
  |         |       |   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
  |         |       |   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
  |         |       `-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
  |         `-ParenExpr 0x555e97257e58 <line:71:20, col:49> 'Instruction':'unsigned int'
  |           `-BinaryOperator 0x555e97257e30 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
  |             |-ParenExpr 0x555e97257df0 <line:71:21, col:45> 'Instruction':'unsigned int'
  |             | `-UnaryOperator 0x555e97257dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
  |             |   `-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
  |             |     `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
  |             |       |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
  |             |       | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
  |             |       |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  |             |       |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
  |             |       `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
  |             `-IntegerLiteral 0x555e97257e10 <line:92:60> 'int' 0
  `-IntegerLiteral 0x555e97257f70 <ldebug.c:356:67> 'int' 0
[B112.32] && [B111.20]
   2: UnaryOperator 0x555e97258000 <ldebug.c:356:19, col:68> 'int' prefix '!'
`-ParenExpr 0x555e97257fe0 <col:20, col:68> 'int'
  `-BinaryOperator 0x555e97257fb8 <./lopcodes.h:80:23, ldebug.c:356:67> 'int' '&&'
    |-BinaryOperator 0x555e97257b10 <./lopcodes.h:80:23, ldebug.c:356:38> 'int' '=='
    | |-ImplicitCastExpr 0x555e97257ae0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
    | | `-ParenExpr 0x555e97257a98 <col:23, col:70> 'OpCode':'OpCode'
    | |   `-ParenExpr 0x555e97257a78 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    | |     `-CStyleCastExpr 0x555e97257a50 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
    | |       `-ParenExpr 0x555e97257a30 <col:26, col:30> 'unsigned int'
    | |         `-BinaryOperator 0x555e972579c8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    | |           |-ParenExpr 0x555e97257800 <line:80:37, col:49> 'Instruction':'unsigned int'
    | |           | `-BinaryOperator 0x555e972577d8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    | |           |   |-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    | |           |   | `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    | |           |   |   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
    | |           |   `-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
    | |           `-ParenExpr 0x555e972579a8 <line:71:20, col:49> 'Instruction':'unsigned int'
    | |             `-BinaryOperator 0x555e97257980 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    | |               |-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
    | |               | `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    | |               |   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
    | |               |     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    | |               |       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
    | |               |       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    | |               |       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    | |               |       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
    | |               |       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
    | |               `-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
    | `-ImplicitCastExpr 0x555e97257af8 <ldebug.c:356:38> 'unsigned int' <IntegralCast>
    |   `-DeclRefExpr 0x555e97257ab8 <col:38> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
    `-BinaryOperator 0x555e97257f90 <./lopcodes.h:92:21, ldebug.c:356:67> 'int' '=='
      |-ParenExpr 0x555e97257f50 <./lopcodes.h:92:21, col:63> 'int'
      | `-ParenExpr 0x555e97257f30 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x555e97257f08 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x555e97257ee8 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x555e97257e78 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x555e97257cb0 <line:92:32, col:43> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x555e97257c88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x555e97257c70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
      |         |   |   `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
      |         |   `-ParenExpr 0x555e97257c50 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x555e97257c28 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
      |         `-ParenExpr 0x555e97257e58 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x555e97257e30 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x555e97257df0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x555e97257dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
      |             |       `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
      |             `-IntegerLiteral 0x555e97257e10 <line:92:60> 'int' 0
      `-IntegerLiteral 0x555e97257f70 <ldebug.c:356:67> 'int' 0
!([B110.1])
   T: if [B110.2]
   Preds (2): B111 B112
   Succs (2): B109 B108

 [B111]
   1: DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
d
   2: ImplicitCastExpr 0x555e97257c70 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
([B111.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97257b80 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e97257ba0 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e97257bc0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
[B111.3] + [B111.4]
   6: IntegerLiteral 0x555e97257c08 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e97257c28 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
([B111.5]) + [B111.6]
   8: BinaryOperator 0x555e97257c88 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97257c70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97257c50 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e97257c28 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
[B111.2] >> ([B111.7])
   9: IntegerLiteral 0x555e97257cd0 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x555e97257d00 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
(Instruction)[B111.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x555e97257d28 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
~[B111.10]
  12: IntegerLiteral 0x555e97257d68 <./lopcodes.h:37:17> 'int' 9
9
  13: BinaryOperator 0x555e97257d88 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
`-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
([B111.11]) << [B111.12]
  14: UnaryOperator 0x555e97257dd0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
~([B111.13])
  15: IntegerLiteral 0x555e97257e10 <./lopcodes.h:92:60> 'int' 0
0
  16: BinaryOperator 0x555e97257e30 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97257df0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97257dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e97257e10 <line:92:60> 'int' 0
([B111.14]) << [B111.15]
  17: BinaryOperator 0x555e97257e78 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97257cb0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97257c88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97257c70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97257c50 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e97257c28 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
`-ParenExpr 0x555e97257e58 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97257e30 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97257df0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97257dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e97257e10 <line:92:60> 'int' 0
([B111.8]) & ([B111.16])
  18: CStyleCastExpr 0x555e97257f08 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97257ee8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97257e78 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97257cb0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97257c88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97257c70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97257c50 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e97257c28 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
    `-ParenExpr 0x555e97257e58 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97257e30 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97257df0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97257dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e97257e10 <line:92:60> 'int' 0
(int)([B111.17]) (CStyleCastExpr, IntegralCast, int)
  19: IntegerLiteral 0x555e97257f70 <ldebug.c:356:67> 'int' 0
0
  20: BinaryOperator 0x555e97257f90 <./lopcodes.h:92:21, ldebug.c:356:67> 'int' '=='
|-ParenExpr 0x555e97257f50 <./lopcodes.h:92:21, col:63> 'int'
| `-ParenExpr 0x555e97257f30 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x555e97257f08 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x555e97257ee8 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x555e97257e78 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x555e97257cb0 <line:92:32, col:43> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x555e97257c88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x555e97257c70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x555e97257b60 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x555e97257b38 <ldebug.c:356:61> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
|         |   `-ParenExpr 0x555e97257c50 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x555e97257c28 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x555e97257be8 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x555e97257bc0 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x555e97257b80 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x555e97257ba0 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x555e97257c08 <line:40:17> 'int' 8
|         `-ParenExpr 0x555e97257e58 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x555e97257e30 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x555e97257df0 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x555e97257dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x555e97257db0 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x555e97257d88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x555e97257d48 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x555e97257d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x555e97257d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x555e97257cd0 <col:39> 'int' 0
|             |       `-IntegerLiteral 0x555e97257d68 <line:37:17> 'int' 9
|             `-IntegerLiteral 0x555e97257e10 <line:92:60> 'int' 0
`-IntegerLiteral 0x555e97257f70 <ldebug.c:356:67> 'int' 0
(([B111.18])) == [B111.19]
   Preds (1): B112
   Succs (1): B110

 [B112]
   1: DeclRefExpr 0x555e97257580 <ldebug.c:355:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e972575a8 <ldebug.c:355:31> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97257580 <col:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B112.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e972575c0 <ldebug.c:355:31, col:35> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e972575a8 <col:31> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97257580 <col:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B112.2]->code
   4: ImplicitCastExpr 0x555e972576e8 <ldebug.c:355:31, col:35> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e972575c0 <col:31, col:35> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e972575a8 <col:31> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97257580 <col:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B112.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e972575f8 <ldebug.c:355:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
dest
   6: ImplicitCastExpr 0x555e97257640 <ldebug.c:355:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972575f8 <col:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B112.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x555e97257620 <ldebug.c:355:45> 'int' 1
1
   8: BinaryOperator 0x555e97257658 <ldebug.c:355:40, col:45> 'int' '-'
|-ImplicitCastExpr 0x555e97257640 <col:40> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972575f8 <col:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
`-IntegerLiteral 0x555e97257620 <col:45> 'int' 1
[B112.6] - [B112.7]
   9: DeclRefExpr 0x555e97257680 <ldebug.c:355:47> 'int' lvalue Var 0x555e97257338 'j' 'int'
j
  10: ImplicitCastExpr 0x555e972576a8 <ldebug.c:355:47> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97257680 <col:47> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B112.9] (ImplicitCastExpr, LValueToRValue, int)
  11: BinaryOperator 0x555e972576c0 <ldebug.c:355:40, col:47> 'int' '-'
|-BinaryOperator 0x555e97257658 <col:40, col:45> 'int' '-'
| |-ImplicitCastExpr 0x555e97257640 <col:40> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e972575f8 <col:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
| `-IntegerLiteral 0x555e97257620 <col:45> 'int' 1
`-ImplicitCastExpr 0x555e972576a8 <col:47> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97257680 <col:47> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B112.8] - [B112.10]
  12: ArraySubscriptExpr 0x555e97257700 <ldebug.c:355:31, col:48> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e972576e8 <col:31, col:35> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e972575c0 <col:31, col:35> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e972575a8 <col:31> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97257580 <col:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-BinaryOperator 0x555e972576c0 <col:40, col:47> 'int' '-'
  |-BinaryOperator 0x555e97257658 <col:40, col:45> 'int' '-'
  | |-ImplicitCastExpr 0x555e97257640 <col:40> 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x555e972575f8 <col:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
  | `-IntegerLiteral 0x555e97257620 <col:45> 'int' 1
  `-ImplicitCastExpr 0x555e972576a8 <col:47> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e97257680 <col:47> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B112.4][[B112.11]]
  13: ImplicitCastExpr 0x555e97257728 <ldebug.c:355:31, col:48> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97257700 <col:31, col:48> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x555e972576e8 <col:31, col:35> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x555e972575c0 <col:31, col:35> 'Instruction *const' lvalue ->code 0x555e971d9508
  |   `-ImplicitCastExpr 0x555e972575a8 <col:31> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97257580 <col:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-BinaryOperator 0x555e972576c0 <col:40, col:47> 'int' '-'
    |-BinaryOperator 0x555e97257658 <col:40, col:45> 'int' '-'
    | |-ImplicitCastExpr 0x555e97257640 <col:40> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x555e972575f8 <col:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
    | `-IntegerLiteral 0x555e97257620 <col:45> 'int' 1
    `-ImplicitCastExpr 0x555e972576a8 <col:47> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97257680 <col:47> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B112.12] (ImplicitCastExpr, LValueToRValue, Instruction)
  14: DeclStmt 0x555e97257740 <ldebug.c:355:15, col:49>col:27
`-VarDecl 0x555e97257520 <col:15, col:48> col:27 used d 'Instruction':'unsigned int' cinit
  `-ImplicitCastExpr 0x555e97257728 <col:31, col:48> 'Instruction':'unsigned int' <LValueToRValue>
    `-ArraySubscriptExpr 0x555e97257700 <col:31, col:48> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x555e972576e8 <col:31, col:35> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x555e972575c0 <col:31, col:35> 'Instruction *const' lvalue ->code 0x555e971d9508
      |   `-ImplicitCastExpr 0x555e972575a8 <col:31> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e97257580 <col:31> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      `-BinaryOperator 0x555e972576c0 <col:40, col:47> 'int' '-'
        |-BinaryOperator 0x555e97257658 <col:40, col:45> 'int' '-'
        | |-ImplicitCastExpr 0x555e97257640 <col:40> 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x555e972575f8 <col:40> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
        | `-IntegerLiteral 0x555e97257620 <col:45> 'int' 1
        `-ImplicitCastExpr 0x555e972576a8 <col:47> 'int' <LValueToRValue>
          `-DeclRefExpr 0x555e97257680 <col:47> 'int' lvalue Var 0x555e97257338 'j' 'int'
Instruction d = pt->code[dest - 1 - j];
  15: DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
d
  16: ImplicitCastExpr 0x555e972577c0 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
([B112.15]) (ImplicitCastExpr, LValueToRValue, Instruction)
  17: IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
0
  18: BinaryOperator 0x555e972577d8 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
`-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
[B112.16] >> [B112.17]
  19: IntegerLiteral 0x555e97257820 <./lopcodes.h:71:39> 'int' 0
0
  20: CStyleCastExpr 0x555e97257850 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
(Instruction)[B112.19] (CStyleCastExpr, IntegralCast, Instruction)
  21: UnaryOperator 0x555e97257878 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
~[B112.20]
  22: IntegerLiteral 0x555e972578b8 <./lopcodes.h:42:18> 'int' 6
6
  23: BinaryOperator 0x555e972578d8 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
`-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
([B112.21]) << [B112.22]
  24: UnaryOperator 0x555e97257920 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
    `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
~([B112.23])
  25: IntegerLiteral 0x555e97257960 <./lopcodes.h:80:67> 'int' 0
0
  26: BinaryOperator 0x555e97257980 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
([B112.24]) << [B112.25]
  27: BinaryOperator 0x555e972579c8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97257800 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e972577d8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e972579a8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97257980 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
([B112.18]) & ([B112.26])
  28: CStyleCastExpr 0x555e97257a50 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e97257a30 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e972579c8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97257800 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e972577d8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e972579a8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97257980 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
(OpCode)([B112.27]) (CStyleCastExpr, IntegralCast, OpCode)
  29: ImplicitCastExpr 0x555e97257ae0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e97257a98 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e97257a78 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e97257a50 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e97257a30 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e972579c8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e97257800 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e972577d8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e972579a8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e97257980 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
(([B112.28])) (ImplicitCastExpr, IntegralCast, unsigned int)
  30: DeclRefExpr 0x555e97257ab8 <ldebug.c:356:38> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
OP_SETLIST
  31: ImplicitCastExpr 0x555e97257af8 <ldebug.c:356:38> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e97257ab8 <col:38> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
[B112.30] (ImplicitCastExpr, IntegralCast, unsigned int)
  32: BinaryOperator 0x555e97257b10 <./lopcodes.h:80:23, ldebug.c:356:38> 'int' '=='
|-ImplicitCastExpr 0x555e97257ae0 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e97257a98 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e97257a78 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e97257a50 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e97257a30 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e972579c8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e97257800 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e972577d8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e972577c0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e97257780 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x555e97257758 <ldebug.c:356:32> 'Instruction':'unsigned int' lvalue Var 0x555e97257520 'd' 'Instruction':'unsigned int'
|           |   `-IntegerLiteral 0x555e972577a0 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e972579a8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e97257980 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e97257940 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e97257920 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e97257900 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e972578d8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e97257898 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e97257878 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e97257850 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e97257820 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e972578b8 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e97257960 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e97257af8 <ldebug.c:356:38> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e97257ab8 <col:38> 'int' EnumConstant 0x555e971f1f00 'OP_SETLIST' 'int'
[B112.29] == [B112.31]
   T: [B112.32] && ...
   Preds (1): B113
   Succs (2): B111 B110

 [B113]
   1: DeclRefExpr 0x555e97257420 <ldebug.c:354:25> 'int' lvalue Var 0x555e97257338 'j' 'int'
j
   2: ImplicitCastExpr 0x555e97257470 <ldebug.c:354:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97257420 <col:25> 'int' lvalue Var 0x555e97257338 'j' 'int'
[B113.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e97257448 <ldebug.c:354:29> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
dest
   4: ImplicitCastExpr 0x555e97257488 <ldebug.c:354:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97257448 <col:29> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B113.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e972574a0 <ldebug.c:354:25, col:29> 'int' '<'
|-ImplicitCastExpr 0x555e97257470 <col:25> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97257420 <col:25> 'int' lvalue Var 0x555e97257338 'j' 'int'
`-ImplicitCastExpr 0x555e97257488 <col:29> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97257448 <col:29> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B113.2] < [B113.4]
   T: for (...; [B113.5]; ...)
   Preds (2): B108 B114
   Succs (2): B112 B107

 [B114]
   1: DeclStmt 0x555e97257398 <ldebug.c:349:13, col:18>col:17
`-VarDecl 0x555e97257338 <col:13, col:17> col:17 used j 'int'
int j;
   2: IntegerLiteral 0x555e972573d8 <ldebug.c:354:22> 'int' 0
0
   3: DeclRefExpr 0x555e972573b0 <ldebug.c:354:18> 'int' lvalue Var 0x555e97257338 'j' 'int'
j
   4: BinaryOperator 0x555e972573f8 <ldebug.c:354:18, col:22> 'int' '='
|-DeclRefExpr 0x555e972573b0 <col:18> 'int' lvalue Var 0x555e97257338 'j' 'int'
`-IntegerLiteral 0x555e972573d8 <col:22> 'int' 0
[B114.3] = [B114.2]
   Preds (1): B115
   Succs (1): B113

 [B115]
   1: DeclRefExpr 0x555e97257298 <ldebug.c:348:15> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
dest
   2: ImplicitCastExpr 0x555e972572e0 <ldebug.c:348:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97257298 <col:15> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B115.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e972572c0 <ldebug.c:348:22> 'int' 0
0
   4: BinaryOperator 0x555e972572f8 <ldebug.c:348:15, col:22> 'int' '>'
|-ImplicitCastExpr 0x555e972572e0 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97257298 <col:15> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
`-IntegerLiteral 0x555e972572c0 <col:22> 'int' 0
[B115.2] > [B115.3]
   T: if [B115.4]
   Preds (1): B117
   Succs (2): B114 B105

 [B116]
   1: IntegerLiteral 0x555e97257200 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97257220 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97257200 <col:36> 'int' 0
[B116.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97257238 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97257220 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97257200 <col:36> 'int' 0
return [B116.2];
   Preds (1): B117
   Succs (1): B0

 [B117]
   1: BinaryOperator 0x555e97257198 <ldebug.c:347:17, col:41> 'int' '&&'
|-BinaryOperator 0x555e97257078 <col:17, col:22> 'int' '<='
| |-IntegerLiteral 0x555e97257018 <col:17> 'int' 0
| `-ImplicitCastExpr 0x555e97257060 <col:22> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x555e97257038 <col:22> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
`-BinaryOperator 0x555e97257170 <col:30, col:41> 'int' '<'
  |-ImplicitCastExpr 0x555e97257140 <col:30> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x555e972570a0 <col:30> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
  `-ImplicitCastExpr 0x555e97257158 <col:37, col:41> 'int' <LValueToRValue>
    `-MemberExpr 0x555e97257108 <col:37, col:41> 'const int' lvalue ->sizecode 0x555e971d9ce8
      `-ImplicitCastExpr 0x555e972570f0 <col:37> 'const Proto *' <LValueToRValue>
        `-DeclRefExpr 0x555e972570c8 <col:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B119.12] && [B118.7]
   2: UnaryOperator 0x555e972571e0 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e972571c0 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e97257198 <line:347:17, col:41> 'int' '&&'
    |-BinaryOperator 0x555e97257078 <col:17, col:22> 'int' '<='
    | |-IntegerLiteral 0x555e97257018 <col:17> 'int' 0
    | `-ImplicitCastExpr 0x555e97257060 <col:22> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x555e97257038 <col:22> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
    `-BinaryOperator 0x555e97257170 <col:30, col:41> 'int' '<'
      |-ImplicitCastExpr 0x555e97257140 <col:30> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x555e972570a0 <col:30> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
      `-ImplicitCastExpr 0x555e97257158 <col:37, col:41> 'int' <LValueToRValue>
        `-MemberExpr 0x555e97257108 <col:37, col:41> 'const int' lvalue ->sizecode 0x555e971d9ce8
          `-ImplicitCastExpr 0x555e972570f0 <col:37> 'const Proto *' <LValueToRValue>
            `-DeclRefExpr 0x555e972570c8 <col:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B117.1])
   T: if [B117.2]
   Preds (2): B118 B119
   Succs (2): B116 B115

 [B118]
   1: DeclRefExpr 0x555e972570a0 <ldebug.c:347:30> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
dest
   2: ImplicitCastExpr 0x555e97257140 <ldebug.c:347:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972570a0 <col:30> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B118.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e972570c8 <ldebug.c:347:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e972570f0 <ldebug.c:347:37> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e972570c8 <col:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B118.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e97257108 <ldebug.c:347:37, col:41> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e972570f0 <col:37> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e972570c8 <col:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B118.4]->sizecode
   6: ImplicitCastExpr 0x555e97257158 <ldebug.c:347:37, col:41> 'int' <LValueToRValue>
`-MemberExpr 0x555e97257108 <col:37, col:41> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e972570f0 <col:37> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e972570c8 <col:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B118.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x555e97257170 <ldebug.c:347:30, col:41> 'int' '<'
|-ImplicitCastExpr 0x555e97257140 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972570a0 <col:30> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
`-ImplicitCastExpr 0x555e97257158 <col:37, col:41> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97257108 <col:37, col:41> 'const int' lvalue ->sizecode 0x555e971d9ce8
    `-ImplicitCastExpr 0x555e972570f0 <col:37> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e972570c8 <col:37> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B118.2] < [B118.6]
   Preds (1): B119
   Succs (1): B117

 [B119]
   1: DeclRefExpr 0x555e97256f10 <ldebug.c:346:22> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e97256f58 <ldebug.c:346:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97256f10 <col:22> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B119.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x555e97256f38 <ldebug.c:346:25> 'int' 1
1
   4: BinaryOperator 0x555e97256f70 <ldebug.c:346:22, col:25> 'int' '+'
|-ImplicitCastExpr 0x555e97256f58 <col:22> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97256f10 <col:22> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e97256f38 <col:25> 'int' 1
[B119.2] + [B119.3]
   5: DeclRefExpr 0x555e97256f98 <ldebug.c:346:27> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   6: ImplicitCastExpr 0x555e97256fc0 <ldebug.c:346:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97256f98 <col:27> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B119.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x555e97256fd8 <ldebug.c:346:22, col:27> 'int' '+'
|-BinaryOperator 0x555e97256f70 <col:22, col:25> 'int' '+'
| |-ImplicitCastExpr 0x555e97256f58 <col:22> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x555e97256f10 <col:22> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
| `-IntegerLiteral 0x555e97256f38 <col:25> 'int' 1
`-ImplicitCastExpr 0x555e97256fc0 <col:27> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97256f98 <col:27> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B119.4] + [B119.6]
   8: DeclStmt 0x555e97257000 <ldebug.c:346:11, col:28>col:15
`-VarDecl 0x555e97256eb0 <col:11, col:27> col:15 used dest 'int' cinit
  `-BinaryOperator 0x555e97256fd8 <col:22, col:27> 'int' '+'
    |-BinaryOperator 0x555e97256f70 <col:22, col:25> 'int' '+'
    | |-ImplicitCastExpr 0x555e97256f58 <col:22> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x555e97256f10 <col:22> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
    | `-IntegerLiteral 0x555e97256f38 <col:25> 'int' 1
    `-ImplicitCastExpr 0x555e97256fc0 <col:27> 'int' <LValueToRValue>
      `-DeclRefExpr 0x555e97256f98 <col:27> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
int dest = pc + 1 + b;
   9: IntegerLiteral 0x555e97257018 <ldebug.c:347:17> 'int' 0
0
  10: DeclRefExpr 0x555e97257038 <ldebug.c:347:22> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
dest
  11: ImplicitCastExpr 0x555e97257060 <ldebug.c:347:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97257038 <col:22> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B119.10] (ImplicitCastExpr, LValueToRValue, int)
  12: BinaryOperator 0x555e97257078 <ldebug.c:347:17, col:22> 'int' '<='
|-IntegerLiteral 0x555e97257018 <col:17> 'int' 0
`-ImplicitCastExpr 0x555e97257060 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e97257038 <col:22> 'int' lvalue Var 0x555e97256eb0 'dest' 'int'
[B119.9] <= [B119.11]
   T: [B119.12] && ...
   Preds (1): B120
   Succs (2): B118 B117

 [B120]
  case iAsBx:
   1: DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e97255dd0 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97255cc0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
([B120.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97255ce0 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e97255d00 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e97255d20 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
[B120.3] + [B120.4]
   6: IntegerLiteral 0x555e97255d68 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e97255d88 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e97255d48 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e97255d20 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97255d68 <line:40:17> 'int' 8
([B120.5]) + [B120.6]
   8: BinaryOperator 0x555e97255de8 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97255dd0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97255cc0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97255db0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e97255d88 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e97255d48 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e97255d20 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e97255d68 <line:40:17> 'int' 8
[B120.2] >> ([B120.7])
   9: IntegerLiteral 0x555e97255e30 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x555e97255e60 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
(Instruction)[B120.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x555e97255e88 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
~[B120.10]
  12: IntegerLiteral 0x555e97255ec8 <./lopcodes.h:37:17> 'int' 9
9
  13: IntegerLiteral 0x555e97255ee8 <./lopcodes.h:38:17> 'int' 9
9
  14: BinaryOperator 0x555e97255f08 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
[B120.12] + [B120.13]
  15: BinaryOperator 0x555e97255f50 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
`-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
([B120.11]) << ([B120.14])
  16: UnaryOperator 0x555e97255f98 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97255f78 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97255f50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
    `-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
~([B120.15])
  17: IntegerLiteral 0x555e97255fd8 <./lopcodes.h:96:63> 'int' 0
0
  18: BinaryOperator 0x555e97255ff8 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97255fb8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97255f98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97255f78 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97255f50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
|       `-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97255fd8 <line:96:63> 'int' 0
([B120.16]) << [B120.17]
  19: BinaryOperator 0x555e97256040 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97255e10 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97255de8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97255dd0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97255cc0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97255db0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e97255d88 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e97255d48 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e97255d20 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e97255d68 <line:40:17> 'int' 8
`-ParenExpr 0x555e97256020 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97255ff8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97255fb8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97255f98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97255f78 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97255f50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
    |       `-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x555e97255fd8 <line:96:63> 'int' 0
([B120.8]) & ([B120.18])
  20: CStyleCastExpr 0x555e972560d0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e972560b0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97256040 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97255e10 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97255de8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97255dd0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97255cc0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97255db0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e97255d88 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e97255d48 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e97255d20 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e97255d68 <line:40:17> 'int' 8
    `-ParenExpr 0x555e97256020 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97255ff8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97255fb8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97255f98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97255f78 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97255f50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
        |       `-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x555e97255fd8 <line:96:63> 'int' 0
(int)([B120.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x555e97256138 <./lopcodes.h:57:28> 'int' 1
1
  22: IntegerLiteral 0x555e97256158 <./lopcodes.h:37:17> 'int' 9
9
  23: IntegerLiteral 0x555e97256178 <./lopcodes.h:38:17> 'int' 9
9
  24: BinaryOperator 0x555e97256198 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x555e97256158 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e97256178 <line:38:17> 'int' 9
[B120.22] + [B120.23]
  25: BinaryOperator 0x555e972561e0 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x555e97256138 <line:57:28> 'int' 1
`-ParenExpr 0x555e972561c0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x555e97256198 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x555e97256158 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e97256178 <line:38:17> 'int' 9
[B120.21] << ([B120.24])
  26: IntegerLiteral 0x555e97256228 <./lopcodes.h:57:40> 'int' 1
1
  27: BinaryOperator 0x555e97256248 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x555e97256208 <col:27, col:38> 'int'
| `-BinaryOperator 0x555e972561e0 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x555e97256138 <line:57:28> 'int' 1
|   `-ParenExpr 0x555e972561c0 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x555e97256198 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x555e97256158 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x555e97256178 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97256228 <line:57:40> 'int' 1
([B120.25]) - [B120.26]
  28: IntegerLiteral 0x555e97256290 <./lopcodes.h:58:39> 'int' 1
1
  29: BinaryOperator 0x555e972562b0 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x555e97256270 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x555e97256248 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x555e97256208 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x555e972561e0 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x555e97256138 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x555e972561c0 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x555e97256198 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x555e97256158 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x555e97256178 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x555e97256228 <line:57:40> 'int' 1
`-IntegerLiteral 0x555e97256290 <line:58:39> 'int' 1
([B120.27]) >> [B120.28]
  30: BinaryOperator 0x555e972562f8 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x555e97256118 <line:96:22, col:66> 'int'
| `-ParenExpr 0x555e972560f8 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x555e972560d0 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x555e972560b0 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x555e97256040 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x555e97255e10 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x555e97255de8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x555e97255dd0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x555e97255cc0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|         |   `-ParenExpr 0x555e97255db0 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x555e97255d88 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x555e97255d48 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x555e97255d20 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x555e97255d68 <line:40:17> 'int' 8
|         `-ParenExpr 0x555e97256020 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x555e97255ff8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x555e97255fb8 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x555e97255f98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x555e97255f78 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x555e97255f50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
|             |       `-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x555e97255fd8 <line:96:63> 'int' 0
`-ParenExpr 0x555e972562d8 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x555e972562b0 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x555e97256270 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x555e97256248 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x555e97256208 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x555e972561e0 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x555e97256138 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x555e972561c0 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x555e97256198 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x555e97256158 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x555e97256178 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x555e97256228 <line:57:40> 'int' 1
    `-IntegerLiteral 0x555e97256290 <line:58:39> 'int' 1
(([B120.20])) - ([B120.29])
  31: DeclRefExpr 0x555e97255c70 <ldebug.c:344:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
  32: BinaryOperator 0x555e97256340 <ldebug.c:344:9, ./lopcodes.h:100:47> 'int' '='
|-DeclRefExpr 0x555e97255c70 <ldebug.c:344:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ParenExpr 0x555e97256320 <./lopcodes.h:100:23, col:47> 'int'
  `-BinaryOperator 0x555e972562f8 <line:96:22, line:58:40> 'int' '-'
    |-ParenExpr 0x555e97256118 <line:96:22, col:66> 'int'
    | `-ParenExpr 0x555e972560f8 <./llimits.h:75:22, col:31> 'int'
    |   `-CStyleCastExpr 0x555e972560d0 <col:23, col:30> 'int' <IntegralCast>
    |     `-ParenExpr 0x555e972560b0 <col:26, col:30> 'unsigned int'
    |       `-BinaryOperator 0x555e97256040 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |         |-ParenExpr 0x555e97255e10 <line:96:33, col:45> 'Instruction':'unsigned int'
    |         | `-BinaryOperator 0x555e97255de8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |         |   |-ImplicitCastExpr 0x555e97255dd0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |         |   | `-ParenExpr 0x555e97255cc0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |         |   |   `-DeclRefExpr 0x555e97255c98 <ldebug.c:344:24> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |         |   `-ParenExpr 0x555e97255db0 <./lopcodes.h:46:16, col:31> 'int'
    |         |     `-BinaryOperator 0x555e97255d88 <line:45:16, line:40:17> 'int' '+'
    |         |       |-ParenExpr 0x555e97255d48 <line:45:16, col:33> 'int'
    |         |       | `-BinaryOperator 0x555e97255d20 <line:44:17, line:42:18> 'int' '+'
    |         |       |   |-IntegerLiteral 0x555e97255ce0 <line:44:17> 'int' 0
    |         |       |   `-IntegerLiteral 0x555e97255d00 <line:42:18> 'int' 6
    |         |       `-IntegerLiteral 0x555e97255d68 <line:40:17> 'int' 8
    |         `-ParenExpr 0x555e97256020 <line:71:20, col:49> 'Instruction':'unsigned int'
    |           `-BinaryOperator 0x555e97255ff8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |             |-ParenExpr 0x555e97255fb8 <line:71:21, col:45> 'Instruction':'unsigned int'
    |             | `-UnaryOperator 0x555e97255f98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |             |   `-ParenExpr 0x555e97255f78 <col:23, col:44> 'Instruction':'unsigned int'
    |             |     `-BinaryOperator 0x555e97255f50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |             |       |-ParenExpr 0x555e97255ea8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |             |       | `-UnaryOperator 0x555e97255e88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |             |       |   `-CStyleCastExpr 0x555e97255e60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |             |       |     `-IntegerLiteral 0x555e97255e30 <col:39> 'int' 0
    |             |       `-ParenExpr 0x555e97255f30 <line:39:18, col:34> 'int'
    |             |         `-BinaryOperator 0x555e97255f08 <line:37:17, line:38:17> 'int' '+'
    |             |           |-IntegerLiteral 0x555e97255ec8 <line:37:17> 'int' 9
    |             |           `-IntegerLiteral 0x555e97255ee8 <line:38:17> 'int' 9
    |             `-IntegerLiteral 0x555e97255fd8 <line:96:63> 'int' 0
    `-ParenExpr 0x555e972562d8 <line:58:27, col:40> 'int'
      `-BinaryOperator 0x555e972562b0 <line:57:26, line:58:39> 'int' '>>'
        |-ParenExpr 0x555e97256270 <line:57:26, col:41> 'int'
        | `-BinaryOperator 0x555e97256248 <col:27, col:40> 'int' '-'
        |   |-ParenExpr 0x555e97256208 <col:27, col:38> 'int'
        |   | `-BinaryOperator 0x555e972561e0 <col:28, line:39:34> 'int' '<<'
        |   |   |-IntegerLiteral 0x555e97256138 <line:57:28> 'int' 1
        |   |   `-ParenExpr 0x555e972561c0 <line:39:18, col:34> 'int'
        |   |     `-BinaryOperator 0x555e97256198 <line:37:17, line:38:17> 'int' '+'
        |   |       |-IntegerLiteral 0x555e97256158 <line:37:17> 'int' 9
        |   |       `-IntegerLiteral 0x555e97256178 <line:38:17> 'int' 9
        |   `-IntegerLiteral 0x555e97256228 <line:57:40> 'int' 1
        `-IntegerLiteral 0x555e97256290 <line:58:39> 'int' 1
[B120.31] = ([B120.30])
  33: DeclRefExpr 0x555e97256368 <./lopcodes.h:255:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
  34: ImplicitCastExpr 0x555e97256c08 <./lopcodes.h:255:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B120.33] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
  35: DeclRefExpr 0x555e97256be0 <ldebug.c:345:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
  36: ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B120.35] (ImplicitCastExpr, LValueToRValue, OpCode)
  37: ArraySubscriptExpr 0x555e97256c38 <./lopcodes.h:255:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B120.34][[B120.36]]
  38: ImplicitCastExpr 0x555e97256c80 <./lopcodes.h:255:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B120.37] (ImplicitCastExpr, LValueToRValue, lu_byte)
  39: ImplicitCastExpr 0x555e97256c98 <./lopcodes.h:255:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97256c80 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B120.38] (ImplicitCastExpr, IntegralCast, int)
  40: IntegerLiteral 0x555e97256c60 <./lopcodes.h:255:63> 'int' 4
4
  41: BinaryOperator 0x555e97256cb0 <./lopcodes.h:255:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x555e97256c98 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97256c80 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-IntegerLiteral 0x555e97256c60 <./lopcodes.h:255:63> 'int' 4
[B120.39] >> [B120.40]
  42: IntegerLiteral 0x555e97256cf8 <./lopcodes.h:255:68> 'int' 3
3
  43: BinaryOperator 0x555e97256d18 <./lopcodes.h:255:43, col:68> 'int' '&'
|-ParenExpr 0x555e97256cd8 <col:43, col:64> 'int'
| `-BinaryOperator 0x555e97256cb0 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x555e97256c98 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x555e97256c80 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x555e97256c60 <./lopcodes.h:255:63> 'int' 4
`-IntegerLiteral 0x555e97256cf8 <col:68> 'int' 3
([B120.41]) & [B120.42]
  44: CStyleCastExpr 0x555e97256db0 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x555e97256d90 <col:26, col:30> 'int'
  `-BinaryOperator 0x555e97256d18 <./lopcodes.h:255:43, col:68> 'int' '&'
    |-ParenExpr 0x555e97256cd8 <col:43, col:64> 'int'
    | `-BinaryOperator 0x555e97256cb0 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x555e97256c98 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e97256c80 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x555e97256c60 <./lopcodes.h:255:63> 'int' 4
    `-IntegerLiteral 0x555e97256cf8 <col:68> 'int' 3
(enum OpArgMask)([B120.43]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  45: ImplicitCastExpr 0x555e97256e40 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e97256df8 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x555e97256dd8 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x555e97256db0 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x555e97256d90 <col:26, col:30> 'int'
        `-BinaryOperator 0x555e97256d18 <./lopcodes.h:255:43, col:68> 'int' '&'
          |-ParenExpr 0x555e97256cd8 <col:43, col:64> 'int'
          | `-BinaryOperator 0x555e97256cb0 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x555e97256c98 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x555e97256c80 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x555e97256c60 <./lopcodes.h:255:63> 'int' 4
          `-IntegerLiteral 0x555e97256cf8 <col:68> 'int' 3
(([B120.44])) (ImplicitCastExpr, IntegralCast, unsigned int)
  46: DeclRefExpr 0x555e97256e18 <ldebug.c:345:29> 'int' EnumConstant 0x555e971f2230 'OpArgR' 'int'
OpArgR
  47: ImplicitCastExpr 0x555e97256e58 <ldebug.c:345:29> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e97256e18 <col:29> 'int' EnumConstant 0x555e971f2230 'OpArgR' 'int'
[B120.46] (ImplicitCastExpr, IntegralCast, unsigned int)
  48: BinaryOperator 0x555e97256e70 <./lopcodes.h:255:21, ldebug.c:345:29> 'int' '=='
|-ImplicitCastExpr 0x555e97256e40 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e97256df8 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
|   `-ParenExpr 0x555e97256dd8 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
|     `-CStyleCastExpr 0x555e97256db0 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
|       `-ParenExpr 0x555e97256d90 <col:26, col:30> 'int'
|         `-BinaryOperator 0x555e97256d18 <./lopcodes.h:255:43, col:68> 'int' '&'
|           |-ParenExpr 0x555e97256cd8 <col:43, col:64> 'int'
|           | `-BinaryOperator 0x555e97256cb0 <col:44, col:63> 'int' '>>'
|           |   |-ImplicitCastExpr 0x555e97256c98 <col:44, col:58> 'int' <IntegralCast>
|           |   | `-ImplicitCastExpr 0x555e97256c80 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|           |   |   `-ArraySubscriptExpr 0x555e97256c38 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|           |   |     |-ImplicitCastExpr 0x555e97256c08 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|           |   |     | `-DeclRefExpr 0x555e97256368 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|           |   |     `-ImplicitCastExpr 0x555e97256c20 <ldebug.c:345:22> 'OpCode':'OpCode' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x555e97256be0 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
|           |   `-IntegerLiteral 0x555e97256c60 <./lopcodes.h:255:63> 'int' 4
|           `-IntegerLiteral 0x555e97256cf8 <col:68> 'int' 3
`-ImplicitCastExpr 0x555e97256e58 <ldebug.c:345:29> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e97256e18 <col:29> 'int' EnumConstant 0x555e971f2230 'OpArgR' 'int'
[B120.45] == [B120.47]
   T: if [B120.48]
   Preds (1): B104
   Succs (2): B119 B105

 [B121]
   T: break;
   Preds (2): B123 B124
   Succs (1): B103

 [B122]
   1: IntegerLiteral 0x555e97255b08 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97255b28 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97255b08 <col:36> 'int' 0
[B122.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97255b40 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97255b28 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97255b08 <col:36> 'int' 0
return [B122.2];
   Preds (1): B123
   Succs (1): B0

 [B123]
   1: DeclRefExpr 0x555e972559d0 <ldebug.c:340:43> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
   2: ImplicitCastExpr 0x555e97255a70 <ldebug.c:340:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972559d0 <col:43> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B123.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e972559f8 <ldebug.c:340:47> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e97255a20 <ldebug.c:340:47> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e972559f8 <col:47> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B123.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e97255a38 <ldebug.c:340:47, col:51> 'const int' lvalue ->sizek 0x555e971d9c88
`-ImplicitCastExpr 0x555e97255a20 <col:47> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e972559f8 <col:47> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B123.4]->sizek
   6: ImplicitCastExpr 0x555e97255a88 <ldebug.c:340:47, col:51> 'int' <LValueToRValue>
`-MemberExpr 0x555e97255a38 <col:47, col:51> 'const int' lvalue ->sizek 0x555e971d9c88
  `-ImplicitCastExpr 0x555e97255a20 <col:47> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e972559f8 <col:47> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B123.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x555e97255aa0 <ldebug.c:340:43, col:51> 'int' '<'
|-ImplicitCastExpr 0x555e97255a70 <col:43> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972559d0 <col:43> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ImplicitCastExpr 0x555e97255a88 <col:47, col:51> 'int' <LValueToRValue>
  `-MemberExpr 0x555e97255a38 <col:47, col:51> 'const int' lvalue ->sizek 0x555e971d9c88
    `-ImplicitCastExpr 0x555e97255a20 <col:47> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e972559f8 <col:47> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B123.2] < [B123.6]
   8: UnaryOperator 0x555e97255ae8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97255ac8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e97255aa0 <line:340:43, col:51> 'int' '<'
    |-ImplicitCastExpr 0x555e97255a70 <col:43> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e972559d0 <col:43> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    `-ImplicitCastExpr 0x555e97255a88 <col:47, col:51> 'int' <LValueToRValue>
      `-MemberExpr 0x555e97255a38 <col:47, col:51> 'const int' lvalue ->sizek 0x555e971d9c88
        `-ImplicitCastExpr 0x555e97255a20 <col:47> 'const Proto *' <LValueToRValue>
          `-DeclRefExpr 0x555e972559f8 <col:47> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B123.7])
   T: if [B123.8]
   Preds (1): B124
   Succs (2): B122 B121

 [B124]
  case iABx:
   1: DeclRefExpr 0x555e97255228 <ldebug.c:339:23> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e97255360 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97255250 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97255228 <ldebug.c:339:23> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
([B124.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97255270 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e97255290 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e972552b0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97255270 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97255290 <line:42:18> 'int' 6
[B124.3] + [B124.4]
   6: IntegerLiteral 0x555e972552f8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e97255318 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e972552d8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e972552b0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97255270 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e97255290 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e972552f8 <line:40:17> 'int' 8
([B124.5]) + [B124.6]
   8: BinaryOperator 0x555e97255378 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97255360 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97255250 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97255228 <ldebug.c:339:23> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97255340 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e97255318 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e972552d8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e972552b0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e97255270 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e97255290 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e972552f8 <line:40:17> 'int' 8
[B124.2] >> ([B124.7])
   9: IntegerLiteral 0x555e972553c0 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x555e972553f0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
(Instruction)[B124.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x555e97255418 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
~[B124.10]
  12: IntegerLiteral 0x555e97255458 <./lopcodes.h:37:17> 'int' 9
9
  13: IntegerLiteral 0x555e97255478 <./lopcodes.h:38:17> 'int' 9
9
  14: BinaryOperator 0x555e97255498 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
[B124.12] + [B124.13]
  15: BinaryOperator 0x555e972554e0 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97255438 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97255418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
`-ParenExpr 0x555e972554c0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x555e97255498 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
([B124.11]) << ([B124.14])
  16: UnaryOperator 0x555e97255528 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97255508 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e972554e0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97255438 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97255418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
    `-ParenExpr 0x555e972554c0 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x555e97255498 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
~([B124.15])
  17: IntegerLiteral 0x555e97255568 <./lopcodes.h:96:63> 'int' 0
0
  18: BinaryOperator 0x555e97255588 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97255548 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97255528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97255508 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e972554e0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97255438 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97255418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
|       `-ParenExpr 0x555e972554c0 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x555e97255498 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97255568 <line:96:63> 'int' 0
([B124.16]) << [B124.17]
  19: BinaryOperator 0x555e972555d0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e972553a0 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97255378 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97255360 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97255250 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97255228 <ldebug.c:339:23> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97255340 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e97255318 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e972552d8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e972552b0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e97255270 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e97255290 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e972552f8 <line:40:17> 'int' 8
`-ParenExpr 0x555e972555b0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97255588 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97255548 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97255528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97255508 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e972554e0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97255438 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97255418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
    |       `-ParenExpr 0x555e972554c0 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x555e97255498 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
    `-IntegerLiteral 0x555e97255568 <line:96:63> 'int' 0
([B124.8]) & ([B124.18])
  20: CStyleCastExpr 0x555e97255660 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97255640 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e972555d0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e972553a0 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97255378 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97255360 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97255250 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97255228 <ldebug.c:339:23> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97255340 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e97255318 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e972552d8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e972552b0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e97255270 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e97255290 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e972552f8 <line:40:17> 'int' 8
    `-ParenExpr 0x555e972555b0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97255588 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97255548 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97255528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97255508 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e972554e0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97255438 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97255418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
        |       `-ParenExpr 0x555e972554c0 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x555e97255498 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
        `-IntegerLiteral 0x555e97255568 <line:96:63> 'int' 0
(int)([B124.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclRefExpr 0x555e97255200 <ldebug.c:339:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
  22: BinaryOperator 0x555e972556c8 <ldebug.c:339:9, ./lopcodes.h:96:66> 'int' '='
|-DeclRefExpr 0x555e97255200 <ldebug.c:339:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ParenExpr 0x555e972556a8 <./lopcodes.h:96:22, col:66> 'int'
  `-ParenExpr 0x555e97255688 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x555e97255660 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x555e97255640 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e972555d0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e972553a0 <line:96:33, col:45> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e97255378 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e97255360 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e97255250 <col:34, col:36> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e97255228 <ldebug.c:339:23> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
          |   `-ParenExpr 0x555e97255340 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x555e97255318 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x555e972552d8 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x555e972552b0 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x555e97255270 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x555e97255290 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x555e972552f8 <line:40:17> 'int' 8
          `-ParenExpr 0x555e972555b0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e97255588 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e97255548 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e97255528 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e97255508 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e972554e0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e97255438 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e97255418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e972553f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e972553c0 <col:39> 'int' 0
              |       `-ParenExpr 0x555e972554c0 <line:39:18, col:34> 'int'
              |         `-BinaryOperator 0x555e97255498 <line:37:17, line:38:17> 'int' '+'
              |           |-IntegerLiteral 0x555e97255458 <line:37:17> 'int' 9
              |           `-IntegerLiteral 0x555e97255478 <line:38:17> 'int' 9
              `-IntegerLiteral 0x555e97255568 <line:96:63> 'int' 0
[B124.21] = (([B124.20]))
  23: DeclRefExpr 0x555e972556f0 <./lopcodes.h:255:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
  24: ImplicitCastExpr 0x555e97255740 <./lopcodes.h:255:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B124.23] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
  25: DeclRefExpr 0x555e97255718 <ldebug.c:340:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
  26: ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B124.25] (ImplicitCastExpr, LValueToRValue, OpCode)
  27: ArraySubscriptExpr 0x555e97255770 <./lopcodes.h:255:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B124.24][[B124.26]]
  28: ImplicitCastExpr 0x555e972557b8 <./lopcodes.h:255:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B124.27] (ImplicitCastExpr, LValueToRValue, lu_byte)
  29: ImplicitCastExpr 0x555e972557d0 <./lopcodes.h:255:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e972557b8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B124.28] (ImplicitCastExpr, IntegralCast, int)
  30: IntegerLiteral 0x555e97255798 <./lopcodes.h:255:63> 'int' 4
4
  31: BinaryOperator 0x555e972557e8 <./lopcodes.h:255:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x555e972557d0 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e972557b8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-IntegerLiteral 0x555e97255798 <./lopcodes.h:255:63> 'int' 4
[B124.29] >> [B124.30]
  32: IntegerLiteral 0x555e97255830 <./lopcodes.h:255:68> 'int' 3
3
  33: BinaryOperator 0x555e97255850 <./lopcodes.h:255:43, col:68> 'int' '&'
|-ParenExpr 0x555e97255810 <col:43, col:64> 'int'
| `-BinaryOperator 0x555e972557e8 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x555e972557d0 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x555e972557b8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x555e97255798 <./lopcodes.h:255:63> 'int' 4
`-IntegerLiteral 0x555e97255830 <col:68> 'int' 3
([B124.31]) & [B124.32]
  34: CStyleCastExpr 0x555e972558e8 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x555e972558c8 <col:26, col:30> 'int'
  `-BinaryOperator 0x555e97255850 <./lopcodes.h:255:43, col:68> 'int' '&'
    |-ParenExpr 0x555e97255810 <col:43, col:64> 'int'
    | `-BinaryOperator 0x555e972557e8 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x555e972557d0 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e972557b8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x555e97255798 <./lopcodes.h:255:63> 'int' 4
    `-IntegerLiteral 0x555e97255830 <col:68> 'int' 3
(enum OpArgMask)([B124.33]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  35: ImplicitCastExpr 0x555e97255978 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e97255930 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x555e97255910 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x555e972558e8 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x555e972558c8 <col:26, col:30> 'int'
        `-BinaryOperator 0x555e97255850 <./lopcodes.h:255:43, col:68> 'int' '&'
          |-ParenExpr 0x555e97255810 <col:43, col:64> 'int'
          | `-BinaryOperator 0x555e972557e8 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x555e972557d0 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x555e972557b8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x555e97255798 <./lopcodes.h:255:63> 'int' 4
          `-IntegerLiteral 0x555e97255830 <col:68> 'int' 3
(([B124.34])) (ImplicitCastExpr, IntegralCast, unsigned int)
  36: DeclRefExpr 0x555e97255950 <ldebug.c:340:29> 'int' EnumConstant 0x555e971f2278 'OpArgK' 'int'
OpArgK
  37: ImplicitCastExpr 0x555e97255990 <ldebug.c:340:29> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e97255950 <col:29> 'int' EnumConstant 0x555e971f2278 'OpArgK' 'int'
[B124.36] (ImplicitCastExpr, IntegralCast, unsigned int)
  38: BinaryOperator 0x555e972559a8 <./lopcodes.h:255:21, ldebug.c:340:29> 'int' '=='
|-ImplicitCastExpr 0x555e97255978 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e97255930 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
|   `-ParenExpr 0x555e97255910 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
|     `-CStyleCastExpr 0x555e972558e8 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
|       `-ParenExpr 0x555e972558c8 <col:26, col:30> 'int'
|         `-BinaryOperator 0x555e97255850 <./lopcodes.h:255:43, col:68> 'int' '&'
|           |-ParenExpr 0x555e97255810 <col:43, col:64> 'int'
|           | `-BinaryOperator 0x555e972557e8 <col:44, col:63> 'int' '>>'
|           |   |-ImplicitCastExpr 0x555e972557d0 <col:44, col:58> 'int' <IntegralCast>
|           |   | `-ImplicitCastExpr 0x555e972557b8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|           |   |   `-ArraySubscriptExpr 0x555e97255770 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|           |   |     |-ImplicitCastExpr 0x555e97255740 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|           |   |     | `-DeclRefExpr 0x555e972556f0 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|           |   |     `-ImplicitCastExpr 0x555e97255758 <ldebug.c:340:22> 'OpCode':'OpCode' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x555e97255718 <col:22> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
|           |   `-IntegerLiteral 0x555e97255798 <./lopcodes.h:255:63> 'int' 4
|           `-IntegerLiteral 0x555e97255830 <col:68> 'int' 3
`-ImplicitCastExpr 0x555e97255990 <ldebug.c:340:29> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e97255950 <col:29> 'int' EnumConstant 0x555e971f2278 'OpArgK' 'int'
[B124.35] == [B124.37]
   T: if [B124.38]
   Preds (1): B104
   Succs (2): B123 B121

 [B125]
   T: break;
   Preds (1): B127
   Succs (1): B103

 [B126]
   1: IntegerLiteral 0x555e972550b8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e972550d8 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e972550b8 <col:36> 'int' 0
[B126.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e972550f0 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e972550d8 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e972550b8 <col:36> 'int' 0
return [B126.2];
   Preds (1): B127
   Succs (1): B0

 [B127]
   1: DeclRefExpr 0x555e97254d18 <ldebug.c:335:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
checkArgMode
   2: ImplicitCastExpr 0x555e97254ff0 <ldebug.c:335:15> 'int (*)(const Proto *, int, enum OpArgMask)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97254d18 <col:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
[B127.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const Proto *, int, enum OpArgMask))
   3: DeclRefExpr 0x555e97254d40 <ldebug.c:335:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e97255048 <ldebug.c:335:28> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97254d40 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B127.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: DeclRefExpr 0x555e97254d68 <ldebug.c:335:32> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
   6: ImplicitCastExpr 0x555e97255060 <ldebug.c:335:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e97254d68 <col:32> 'int' lvalue Var 0x555e97252f68 'c' 'int'
[B127.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x555e97254d90 <./lopcodes.h:256:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   8: ImplicitCastExpr 0x555e97254de0 <./lopcodes.h:256:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B127.7] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   9: DeclRefExpr 0x555e97254db8 <ldebug.c:335:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
  10: ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B127.9] (ImplicitCastExpr, LValueToRValue, OpCode)
  11: ArraySubscriptExpr 0x555e97254e10 <./lopcodes.h:256:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B127.8][[B127.10]]
  12: ImplicitCastExpr 0x555e97254e58 <./lopcodes.h:256:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B127.11] (ImplicitCastExpr, LValueToRValue, lu_byte)
  13: ImplicitCastExpr 0x555e97254e70 <./lopcodes.h:256:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e97254e58 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B127.12] (ImplicitCastExpr, IntegralCast, int)
  14: IntegerLiteral 0x555e97254e38 <./lopcodes.h:256:63> 'int' 2
2
  15: BinaryOperator 0x555e97254e88 <./lopcodes.h:256:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x555e97254e70 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97254e58 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-IntegerLiteral 0x555e97254e38 <./lopcodes.h:256:63> 'int' 2
[B127.13] >> [B127.14]
  16: IntegerLiteral 0x555e97254ed0 <./lopcodes.h:256:68> 'int' 3
3
  17: BinaryOperator 0x555e97254ef0 <./lopcodes.h:256:43, col:68> 'int' '&'
|-ParenExpr 0x555e97254eb0 <col:43, col:64> 'int'
| `-BinaryOperator 0x555e97254e88 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x555e97254e70 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x555e97254e58 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x555e97254e38 <./lopcodes.h:256:63> 'int' 2
`-IntegerLiteral 0x555e97254ed0 <col:68> 'int' 3
([B127.15]) & [B127.16]
  18: CStyleCastExpr 0x555e97254f88 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x555e97254f68 <col:26, col:30> 'int'
  `-BinaryOperator 0x555e97254ef0 <./lopcodes.h:256:43, col:68> 'int' '&'
    |-ParenExpr 0x555e97254eb0 <col:43, col:64> 'int'
    | `-BinaryOperator 0x555e97254e88 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x555e97254e70 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e97254e58 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x555e97254e38 <./lopcodes.h:256:63> 'int' 2
    `-IntegerLiteral 0x555e97254ed0 <col:68> 'int' 3
(enum OpArgMask)([B127.17]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  19: CallExpr 0x555e97255008 <ldebug.c:335:15, col:47> 'int'
|-ImplicitCastExpr 0x555e97254ff0 <col:15> 'int (*)(const Proto *, int, enum OpArgMask)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97254d18 <col:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
|-ImplicitCastExpr 0x555e97255048 <col:28> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x555e97254d40 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|-ImplicitCastExpr 0x555e97255060 <col:32> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e97254d68 <col:32> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-ParenExpr 0x555e97254fd0 <./lopcodes.h:256:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x555e97254fb0 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x555e97254f88 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x555e97254f68 <col:26, col:30> 'int'
        `-BinaryOperator 0x555e97254ef0 <./lopcodes.h:256:43, col:68> 'int' '&'
          |-ParenExpr 0x555e97254eb0 <col:43, col:64> 'int'
          | `-BinaryOperator 0x555e97254e88 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x555e97254e70 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x555e97254e58 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x555e97254e38 <./lopcodes.h:256:63> 'int' 2
          `-IntegerLiteral 0x555e97254ed0 <col:68> 'int' 3
[B127.2]([B127.4], [B127.6], (([B127.18])))
  20: UnaryOperator 0x555e97255098 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97255078 <col:24, col:26> 'int'
  `-CallExpr 0x555e97255008 <line:335:15, col:47> 'int'
    |-ImplicitCastExpr 0x555e97254ff0 <col:15> 'int (*)(const Proto *, int, enum OpArgMask)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97254d18 <col:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
    |-ImplicitCastExpr 0x555e97255048 <col:28> 'const Proto *' <LValueToRValue>
    | `-DeclRefExpr 0x555e97254d40 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |-ImplicitCastExpr 0x555e97255060 <col:32> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e97254d68 <col:32> 'int' lvalue Var 0x555e97252f68 'c' 'int'
    `-ParenExpr 0x555e97254fd0 <./lopcodes.h:256:21, col:70> 'enum OpArgMask':'enum OpArgMask'
      `-ParenExpr 0x555e97254fb0 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
        `-CStyleCastExpr 0x555e97254f88 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
          `-ParenExpr 0x555e97254f68 <col:26, col:30> 'int'
            `-BinaryOperator 0x555e97254ef0 <./lopcodes.h:256:43, col:68> 'int' '&'
              |-ParenExpr 0x555e97254eb0 <col:43, col:64> 'int'
              | `-BinaryOperator 0x555e97254e88 <col:44, col:63> 'int' '>>'
              |   |-ImplicitCastExpr 0x555e97254e70 <col:44, col:58> 'int' <IntegralCast>
              |   | `-ImplicitCastExpr 0x555e97254e58 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
              |   |   `-ArraySubscriptExpr 0x555e97254e10 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
              |   |     |-ImplicitCastExpr 0x555e97254de0 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
              |   |     | `-DeclRefExpr 0x555e97254d90 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
              |   |     `-ImplicitCastExpr 0x555e97254df8 <ldebug.c:335:44> 'OpCode':'OpCode' <LValueToRValue>
              |   |       `-DeclRefExpr 0x555e97254db8 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
              |   `-IntegerLiteral 0x555e97254e38 <./lopcodes.h:256:63> 'int' 2
              `-IntegerLiteral 0x555e97254ed0 <col:68> 'int' 3
!([B127.19])
   T: if [B127.20]
   Preds (1): B129
   Succs (2): B126 B125

 [B128]
   1: IntegerLiteral 0x555e97254c80 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97254ca0 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97254c80 <col:36> 'int' 0
[B128.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97254cb8 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97254ca0 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97254c80 <col:36> 'int' 0
return [B128.2];
   Preds (1): B129
   Succs (1): B0

 [B129]
  case iABC:
   1: DeclRefExpr 0x555e97253838 <ldebug.c:332:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e972539d8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97253860 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97253838 <ldebug.c:332:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
([B129.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e97253880 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x555e972538a0 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x555e972538c0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
[B129.3] + [B129.4]
   6: IntegerLiteral 0x555e97253908 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x555e97253928 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e972538e8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e972538c0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e97253908 <line:40:17> 'int' 8
([B129.5]) + [B129.6]
   8: IntegerLiteral 0x555e97253970 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x555e97253990 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x555e97253950 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x555e97253928 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x555e972538e8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x555e972538c0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x555e97253908 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e97253970 <line:37:17> 'int' 9
([B129.7]) + [B129.8]
  10: BinaryOperator 0x555e972539f0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e972539d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97253860 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97253838 <ldebug.c:332:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e972539b8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x555e97253990 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x555e97253950 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x555e97253928 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x555e972538e8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x555e972538c0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x555e97253908 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e97253970 <line:37:17> 'int' 9
[B129.2] >> ([B129.9])
  11: IntegerLiteral 0x555e97253a38 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x555e97253a68 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
(Instruction)[B129.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x555e97253a90 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
~[B129.12]
  14: IntegerLiteral 0x555e97253ad0 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x555e97253af0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97253ab0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97253a90 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
`-IntegerLiteral 0x555e97253ad0 <line:38:17> 'int' 9
([B129.13]) << [B129.14]
  16: UnaryOperator 0x555e97253b38 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97253b18 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97253af0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97253ab0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97253a90 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97253ad0 <line:38:17> 'int' 9
~([B129.15])
  17: IntegerLiteral 0x555e97253b78 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x555e97253b98 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97253b58 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97253b38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97253b18 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97253af0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97253ab0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97253a90 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97253ad0 <line:38:17> 'int' 9
`-IntegerLiteral 0x555e97253b78 <line:88:60> 'int' 0
([B129.16]) << [B129.17]
  19: BinaryOperator 0x555e97253be0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97253a18 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e972539f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e972539d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97253860 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97253838 <ldebug.c:332:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e972539b8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x555e97253990 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x555e97253950 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x555e97253928 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x555e972538e8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x555e972538c0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x555e97253908 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x555e97253970 <line:37:17> 'int' 9
`-ParenExpr 0x555e97253bc0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97253b98 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97253b58 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97253b38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97253b18 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97253af0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97253ab0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97253a90 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97253ad0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x555e97253b78 <line:88:60> 'int' 0
([B129.10]) & ([B129.18])
  20: CStyleCastExpr 0x555e97253c70 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97253c50 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97253be0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97253a18 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e972539f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e972539d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97253860 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97253838 <ldebug.c:332:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e972539b8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x555e97253990 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x555e97253950 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x555e97253928 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x555e972538e8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x555e972538c0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x555e97253908 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x555e97253970 <line:37:17> 'int' 9
    `-ParenExpr 0x555e97253bc0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97253b98 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97253b58 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97253b38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97253b18 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97253af0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97253ab0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97253a90 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97253ad0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x555e97253b78 <line:88:60> 'int' 0
(int)([B129.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclRefExpr 0x555e97253810 <ldebug.c:332:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
  22: BinaryOperator 0x555e972543d0 <ldebug.c:332:9, ./lopcodes.h:88:63> 'int' '='
|-DeclRefExpr 0x555e97253810 <ldebug.c:332:9> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ParenExpr 0x555e972543b0 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x555e97253c98 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x555e97253c70 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x555e97253c50 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e97253be0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e97253a18 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e972539f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e972539d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e97253860 <col:33, col:35> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e97253838 <ldebug.c:332:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
          |   `-ParenExpr 0x555e972539b8 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x555e97253990 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x555e97253950 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x555e97253928 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x555e972538e8 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x555e972538c0 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x555e97253880 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x555e972538a0 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x555e97253908 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x555e97253970 <line:37:17> 'int' 9
          `-ParenExpr 0x555e97253bc0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e97253b98 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e97253b58 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e97253b38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e97253b18 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e97253af0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e97253ab0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e97253a90 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e97253a68 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e97253a38 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e97253ad0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x555e97253b78 <line:88:60> 'int' 0
[B129.21] = (([B129.20]))
  23: DeclRefExpr 0x555e97254420 <ldebug.c:333:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
i
  24: ImplicitCastExpr 0x555e97254558 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97254448 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97254420 <ldebug.c:333:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
([B129.23]) (ImplicitCastExpr, LValueToRValue, Instruction)
  25: IntegerLiteral 0x555e97254468 <./lopcodes.h:44:17> 'int' 0
0
  26: IntegerLiteral 0x555e97254488 <./lopcodes.h:42:18> 'int' 6
6
  27: BinaryOperator 0x555e972544a8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97254468 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97254488 <line:42:18> 'int' 6
[B129.25] + [B129.26]
  28: IntegerLiteral 0x555e972544f0 <./lopcodes.h:40:17> 'int' 8
8
  29: BinaryOperator 0x555e97254510 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x555e972544d0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x555e972544a8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x555e97254468 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x555e97254488 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e972544f0 <line:40:17> 'int' 8
([B129.27]) + [B129.28]
  30: BinaryOperator 0x555e97254570 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97254558 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97254448 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97254420 <ldebug.c:333:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97254538 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x555e97254510 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x555e972544d0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x555e972544a8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x555e97254468 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x555e97254488 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e972544f0 <line:40:17> 'int' 8
[B129.24] >> ([B129.29])
  31: IntegerLiteral 0x555e972545b8 <./lopcodes.h:71:39> 'int' 0
0
  32: CStyleCastExpr 0x555e972545e8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
(Instruction)[B129.31] (CStyleCastExpr, IntegralCast, Instruction)
  33: UnaryOperator 0x555e97254610 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
~[B129.32]
  34: IntegerLiteral 0x555e97254650 <./lopcodes.h:37:17> 'int' 9
9
  35: BinaryOperator 0x555e97254670 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97254630 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97254610 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
`-IntegerLiteral 0x555e97254650 <line:37:17> 'int' 9
([B129.33]) << [B129.34]
  36: UnaryOperator 0x555e972546b8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97254698 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97254670 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97254630 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97254610 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97254650 <line:37:17> 'int' 9
~([B129.35])
  37: IntegerLiteral 0x555e972546f8 <./lopcodes.h:92:60> 'int' 0
0
  38: BinaryOperator 0x555e97254718 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e972546d8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e972546b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97254698 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97254670 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97254630 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97254610 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97254650 <line:37:17> 'int' 9
`-IntegerLiteral 0x555e972546f8 <line:92:60> 'int' 0
([B129.36]) << [B129.37]
  39: BinaryOperator 0x555e97254760 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97254598 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97254570 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97254558 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97254448 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97254420 <ldebug.c:333:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97254538 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x555e97254510 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x555e972544d0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x555e972544a8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x555e97254468 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x555e97254488 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x555e972544f0 <line:40:17> 'int' 8
`-ParenExpr 0x555e97254740 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97254718 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e972546d8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e972546b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97254698 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97254670 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97254630 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97254610 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97254650 <line:37:17> 'int' 9
    `-IntegerLiteral 0x555e972546f8 <line:92:60> 'int' 0
([B129.30]) & ([B129.38])
  40: CStyleCastExpr 0x555e972547f0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e972547d0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97254760 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97254598 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97254570 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97254558 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97254448 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97254420 <ldebug.c:333:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97254538 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x555e97254510 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x555e972544d0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x555e972544a8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x555e97254468 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x555e97254488 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x555e972544f0 <line:40:17> 'int' 8
    `-ParenExpr 0x555e97254740 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97254718 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e972546d8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e972546b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97254698 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97254670 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97254630 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97254610 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97254650 <line:37:17> 'int' 9
        `-IntegerLiteral 0x555e972546f8 <line:92:60> 'int' 0
(int)([B129.39]) (CStyleCastExpr, IntegralCast, int)
  41: DeclRefExpr 0x555e972543f8 <ldebug.c:333:9> 'int' lvalue Var 0x555e97252f68 'c' 'int'
c
  42: BinaryOperator 0x555e97254858 <ldebug.c:333:9, ./lopcodes.h:92:63> 'int' '='
|-DeclRefExpr 0x555e972543f8 <ldebug.c:333:9> 'int' lvalue Var 0x555e97252f68 'c' 'int'
`-ParenExpr 0x555e97254838 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x555e97254818 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x555e972547f0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x555e972547d0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e97254760 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e97254598 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e97254570 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e97254558 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e97254448 <col:33, col:35> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e97254420 <ldebug.c:333:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
          |   `-ParenExpr 0x555e97254538 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x555e97254510 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x555e972544d0 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x555e972544a8 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x555e97254468 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x555e97254488 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x555e972544f0 <line:40:17> 'int' 8
          `-ParenExpr 0x555e97254740 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e97254718 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e972546d8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e972546b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e97254698 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e97254670 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e97254630 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e97254610 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e972545e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e972545b8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e97254650 <line:37:17> 'int' 9
              `-IntegerLiteral 0x555e972546f8 <line:92:60> 'int' 0
[B129.41] = (([B129.40]))
  43: DeclRefExpr 0x555e97254880 <ldebug.c:334:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
checkArgMode
  44: ImplicitCastExpr 0x555e97254bb8 <ldebug.c:334:15> 'int (*)(const Proto *, int, enum OpArgMask)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97254880 <col:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
[B129.43] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const Proto *, int, enum OpArgMask))
  45: DeclRefExpr 0x555e972548a8 <ldebug.c:334:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
  46: ImplicitCastExpr 0x555e97254c10 <ldebug.c:334:28> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e972548a8 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B129.45] (ImplicitCastExpr, LValueToRValue, const Proto *)
  47: DeclRefExpr 0x555e972548d0 <ldebug.c:334:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
b
  48: ImplicitCastExpr 0x555e97254c28 <ldebug.c:334:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972548d0 <col:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
[B129.47] (ImplicitCastExpr, LValueToRValue, int)
  49: DeclRefExpr 0x555e972548f8 <./lopcodes.h:255:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
  50: ImplicitCastExpr 0x555e97254948 <./lopcodes.h:255:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
[B129.49] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
  51: DeclRefExpr 0x555e97254920 <ldebug.c:334:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
  52: ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B129.51] (ImplicitCastExpr, LValueToRValue, OpCode)
  53: ArraySubscriptExpr 0x555e97254978 <./lopcodes.h:255:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B129.50][[B129.52]]
  54: ImplicitCastExpr 0x555e972549c0 <./lopcodes.h:255:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B129.53] (ImplicitCastExpr, LValueToRValue, lu_byte)
  55: ImplicitCastExpr 0x555e972549d8 <./lopcodes.h:255:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e972549c0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B129.54] (ImplicitCastExpr, IntegralCast, int)
  56: IntegerLiteral 0x555e972549a0 <./lopcodes.h:255:63> 'int' 4
4
  57: BinaryOperator 0x555e972549f0 <./lopcodes.h:255:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x555e972549d8 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e972549c0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-IntegerLiteral 0x555e972549a0 <./lopcodes.h:255:63> 'int' 4
[B129.55] >> [B129.56]
  58: IntegerLiteral 0x555e97254a38 <./lopcodes.h:255:68> 'int' 3
3
  59: BinaryOperator 0x555e97254a58 <./lopcodes.h:255:43, col:68> 'int' '&'
|-ParenExpr 0x555e97254a18 <col:43, col:64> 'int'
| `-BinaryOperator 0x555e972549f0 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x555e972549d8 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x555e972549c0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x555e972549a0 <./lopcodes.h:255:63> 'int' 4
`-IntegerLiteral 0x555e97254a38 <col:68> 'int' 3
([B129.57]) & [B129.58]
  60: CStyleCastExpr 0x555e97254af0 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x555e97254ad0 <col:26, col:30> 'int'
  `-BinaryOperator 0x555e97254a58 <./lopcodes.h:255:43, col:68> 'int' '&'
    |-ParenExpr 0x555e97254a18 <col:43, col:64> 'int'
    | `-BinaryOperator 0x555e972549f0 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x555e972549d8 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e972549c0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x555e972549a0 <./lopcodes.h:255:63> 'int' 4
    `-IntegerLiteral 0x555e97254a38 <col:68> 'int' 3
(enum OpArgMask)([B129.59]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  61: CallExpr 0x555e97254bd0 <ldebug.c:334:15, col:47> 'int'
|-ImplicitCastExpr 0x555e97254bb8 <col:15> 'int (*)(const Proto *, int, enum OpArgMask)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97254880 <col:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
|-ImplicitCastExpr 0x555e97254c10 <col:28> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x555e972548a8 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
|-ImplicitCastExpr 0x555e97254c28 <col:32> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972548d0 <col:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
`-ParenExpr 0x555e97254b38 <./lopcodes.h:255:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x555e97254b18 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x555e97254af0 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x555e97254ad0 <col:26, col:30> 'int'
        `-BinaryOperator 0x555e97254a58 <./lopcodes.h:255:43, col:68> 'int' '&'
          |-ParenExpr 0x555e97254a18 <col:43, col:64> 'int'
          | `-BinaryOperator 0x555e972549f0 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x555e972549d8 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x555e972549c0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x555e972549a0 <./lopcodes.h:255:63> 'int' 4
          `-IntegerLiteral 0x555e97254a38 <col:68> 'int' 3
[B129.44]([B129.46], [B129.48], (([B129.60])))
  62: UnaryOperator 0x555e97254c60 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97254c40 <col:24, col:26> 'int'
  `-CallExpr 0x555e97254bd0 <line:334:15, col:47> 'int'
    |-ImplicitCastExpr 0x555e97254bb8 <col:15> 'int (*)(const Proto *, int, enum OpArgMask)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97254880 <col:15> 'int (const Proto *, int, enum OpArgMask)' Function 0x555e9724f558 'checkArgMode' 'int (const Proto *, int, enum OpArgMask)'
    |-ImplicitCastExpr 0x555e97254c10 <col:28> 'const Proto *' <LValueToRValue>
    | `-DeclRefExpr 0x555e972548a8 <col:28> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
    |-ImplicitCastExpr 0x555e97254c28 <col:32> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x555e972548d0 <col:32> 'int' lvalue Var 0x555e97252eb8 'b' 'int'
    `-ParenExpr 0x555e97254b38 <./lopcodes.h:255:21, col:70> 'enum OpArgMask':'enum OpArgMask'
      `-ParenExpr 0x555e97254b18 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
        `-CStyleCastExpr 0x555e97254af0 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
          `-ParenExpr 0x555e97254ad0 <col:26, col:30> 'int'
            `-BinaryOperator 0x555e97254a58 <./lopcodes.h:255:43, col:68> 'int' '&'
              |-ParenExpr 0x555e97254a18 <col:43, col:64> 'int'
              | `-BinaryOperator 0x555e972549f0 <col:44, col:63> 'int' '>>'
              |   |-ImplicitCastExpr 0x555e972549d8 <col:44, col:58> 'int' <IntegralCast>
              |   | `-ImplicitCastExpr 0x555e972549c0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
              |   |   `-ArraySubscriptExpr 0x555e97254978 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
              |   |     |-ImplicitCastExpr 0x555e97254948 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
              |   |     | `-DeclRefExpr 0x555e972548f8 <col:44> 'const lu_byte [38]' lvalue Var 0x555e971fc6f8 'luaP_opmodes' 'const lu_byte [38]'
              |   |     `-ImplicitCastExpr 0x555e97254960 <ldebug.c:334:44> 'OpCode':'OpCode' <LValueToRValue>
              |   |       `-DeclRefExpr 0x555e97254920 <col:44> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
              |   `-IntegerLiteral 0x555e972549a0 <./lopcodes.h:255:63> 'int' 4
              `-IntegerLiteral 0x555e97254a38 <col:68> 'int' 3
!([B129.61])
   T: if [B129.62]
   Preds (1): B104
   Succs (2): B128 B127

 [B130]
   1: IntegerLiteral 0x555e97253440 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97253460 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97253440 <col:36> 'int' 0
[B130.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97253478 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97253460 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97253440 <col:36> 'int' 0
return [B130.2];
   Preds (1): B131
   Succs (1): B0

 [B131]
   1: DeclRefExpr 0x555e972532b0 <ldebug.c:329:18> 'int' lvalue Var 0x555e97252a58 'a' 'int'
a
   2: ImplicitCastExpr 0x555e97253390 <ldebug.c:272:32, col:36> 'int' <LValueToRValue>
`-ParenExpr 0x555e972532d8 <col:32, col:36> 'int' lvalue
  `-DeclRefExpr 0x555e972532b0 <line:329:18> 'int' lvalue Var 0x555e97252a58 'a' 'int'
([B131.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e972532f8 <ldebug.c:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e97253340 <ldebug.c:272:40, col:43> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x555e97253320 <col:40, col:43> 'const Proto *' lvalue
  `-DeclRefExpr 0x555e972532f8 <line:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
([B131.3]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e97253358 <ldebug.c:272:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e97253340 <col:40, col:43> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x555e97253320 <col:40, col:43> 'const Proto *' lvalue
    `-DeclRefExpr 0x555e972532f8 <line:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B131.4]->maxstacksize
   6: ImplicitCastExpr 0x555e972533a8 <ldebug.c:272:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e97253358 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e97253340 <col:40, col:43> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x555e97253320 <col:40, col:43> 'const Proto *' lvalue
      `-DeclRefExpr 0x555e972532f8 <line:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B131.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x555e972533c0 <ldebug.c:272:40, col:46> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e972533a8 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e97253358 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e97253340 <col:40, col:43> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x555e97253320 <col:40, col:43> 'const Proto *' lvalue
        `-DeclRefExpr 0x555e972532f8 <line:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B131.6] (ImplicitCastExpr, IntegralCast, int)
   8: BinaryOperator 0x555e972533d8 <ldebug.c:272:32, col:46> 'int' '<'
|-ImplicitCastExpr 0x555e97253390 <col:32, col:36> 'int' <LValueToRValue>
| `-ParenExpr 0x555e972532d8 <col:32, col:36> 'int' lvalue
|   `-DeclRefExpr 0x555e972532b0 <line:329:18> 'int' lvalue Var 0x555e97252a58 'a' 'int'
`-ImplicitCastExpr 0x555e972533c0 <line:272:40, col:46> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e972533a8 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e97253358 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e97253340 <col:40, col:43> 'const Proto *' <LValueToRValue>
        `-ParenExpr 0x555e97253320 <col:40, col:43> 'const Proto *' lvalue
          `-DeclRefExpr 0x555e972532f8 <line:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B131.2] < [B131.7]
   9: UnaryOperator 0x555e97253420 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97253400 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972533d8 <line:272:32, col:46> 'int' '<'
    |-ImplicitCastExpr 0x555e97253390 <col:32, col:36> 'int' <LValueToRValue>
    | `-ParenExpr 0x555e972532d8 <col:32, col:36> 'int' lvalue
    |   `-DeclRefExpr 0x555e972532b0 <line:329:18> 'int' lvalue Var 0x555e97252a58 'a' 'int'
    `-ImplicitCastExpr 0x555e972533c0 <line:272:40, col:46> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e972533a8 <col:40, col:46> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e97253358 <col:40, col:46> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e97253340 <col:40, col:43> 'const Proto *' <LValueToRValue>
            `-ParenExpr 0x555e97253320 <col:40, col:43> 'const Proto *' lvalue
              `-DeclRefExpr 0x555e972532f8 <line:329:14> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B131.8])
   T: if [B131.9]
   Preds (1): B133
   Succs (2): B130 B104

 [B132]
   1: IntegerLiteral 0x555e97253218 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e97253238 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97253218 <col:36> 'int' 0
[B132.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97253250 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e97253238 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97253218 <col:36> 'int' 0
return [B132.2];
   Preds (1): B133
   Succs (1): B0

 [B133]
   1: DeclRefExpr 0x555e97252530 <ldebug.c:323:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e97252558 <ldebug.c:323:21> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97252530 <col:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B133.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e97252570 <ldebug.c:323:21, col:25> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e97252558 <col:21> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97252530 <col:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B133.2]->code
   4: ImplicitCastExpr 0x555e972525d0 <ldebug.c:323:21, col:25> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e97252570 <col:21, col:25> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e97252558 <col:21> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97252530 <col:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B133.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e972525a8 <ldebug.c:323:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   6: ImplicitCastExpr 0x555e972525e8 <ldebug.c:323:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972525a8 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B133.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x555e97252600 <ldebug.c:323:21, col:32> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e972525d0 <col:21, col:25> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e97252570 <col:21, col:25> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e97252558 <col:21> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97252530 <col:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-ImplicitCastExpr 0x555e972525e8 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e972525a8 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B133.4][[B133.6]]
   8: ImplicitCastExpr 0x555e97252628 <ldebug.c:323:21, col:32> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x555e97252600 <col:21, col:32> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x555e972525d0 <col:21, col:25> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x555e97252570 <col:21, col:25> 'Instruction *const' lvalue ->code 0x555e971d9508
  |   `-ImplicitCastExpr 0x555e97252558 <col:21> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97252530 <col:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-ImplicitCastExpr 0x555e972525e8 <col:30> 'int' <LValueToRValue>
    `-DeclRefExpr 0x555e972525a8 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B133.7] (ImplicitCastExpr, LValueToRValue, Instruction)
   9: DeclStmt 0x555e97252640 <ldebug.c:323:5, col:33>col:17
`-VarDecl 0x555e972524d0 <col:5, col:32> col:17 used i 'Instruction':'unsigned int' cinit
  `-ImplicitCastExpr 0x555e97252628 <col:21, col:32> 'Instruction':'unsigned int' <LValueToRValue>
    `-ArraySubscriptExpr 0x555e97252600 <col:21, col:32> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x555e972525d0 <col:21, col:25> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x555e97252570 <col:21, col:25> 'Instruction *const' lvalue ->code 0x555e971d9508
      |   `-ImplicitCastExpr 0x555e97252558 <col:21> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e97252530 <col:21> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
      `-ImplicitCastExpr 0x555e972525e8 <col:30> 'int' <LValueToRValue>
        `-DeclRefExpr 0x555e972525a8 <col:30> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
Instruction i = pt->code[pc];
  10: DeclRefExpr 0x555e972526c8 <ldebug.c:324:28> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
i
  11: ImplicitCastExpr 0x555e97252730 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e972526f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e972526c8 <ldebug.c:324:28> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
([B133.10]) (ImplicitCastExpr, LValueToRValue, Instruction)
  12: IntegerLiteral 0x555e97252710 <./lopcodes.h:44:17> 'int' 0
0
  13: BinaryOperator 0x555e97252748 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97252730 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e972526f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e972526c8 <ldebug.c:324:28> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x555e97252710 <./lopcodes.h:44:17> 'int' 0
[B133.11] >> [B133.12]
  14: IntegerLiteral 0x555e97252790 <./lopcodes.h:71:39> 'int' 0
0
  15: CStyleCastExpr 0x555e972527c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
(Instruction)[B133.14] (CStyleCastExpr, IntegralCast, Instruction)
  16: UnaryOperator 0x555e972527e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
~[B133.15]
  17: IntegerLiteral 0x555e97252828 <./lopcodes.h:42:18> 'int' 6
6
  18: BinaryOperator 0x555e97252848 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97252808 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e972527e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
`-IntegerLiteral 0x555e97252828 <line:42:18> 'int' 6
([B133.16]) << [B133.17]
  19: UnaryOperator 0x555e97252890 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97252870 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97252848 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97252808 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e972527e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97252828 <line:42:18> 'int' 6
~([B133.18])
  20: IntegerLiteral 0x555e972528d0 <./lopcodes.h:80:67> 'int' 0
0
  21: BinaryOperator 0x555e972528f0 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e972528b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97252890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97252870 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97252848 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97252808 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e972527e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97252828 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e972528d0 <line:80:67> 'int' 0
([B133.19]) << [B133.20]
  22: BinaryOperator 0x555e97252938 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97252770 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97252748 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97252730 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e972526f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e972526c8 <ldebug.c:324:28> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x555e97252710 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e97252918 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e972528f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e972528b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97252890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97252870 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97252848 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97252808 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e972527e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97252828 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e972528d0 <line:80:67> 'int' 0
([B133.13]) & ([B133.21])
  23: CStyleCastExpr 0x555e972529c0 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e972529a0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97252938 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97252770 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97252748 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97252730 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e972526f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e972526c8 <ldebug.c:324:28> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x555e97252710 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e97252918 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e972528f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e972528b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97252890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97252870 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97252848 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97252808 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e972527e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97252828 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e972528d0 <line:80:67> 'int' 0
(OpCode)([B133.22]) (CStyleCastExpr, IntegralCast, OpCode)
  24: DeclStmt 0x555e97252a28 <ldebug.c:324:5, col:30>col:12
`-VarDecl 0x555e97252668 <col:5, ./lopcodes.h:80:70> ldebug.c:324:12 used op 'OpCode':'OpCode' cinit
  `-ParenExpr 0x555e97252a08 <./lopcodes.h:80:23, col:70> 'OpCode':'OpCode'
    `-ParenExpr 0x555e972529e8 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
      `-CStyleCastExpr 0x555e972529c0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
        `-ParenExpr 0x555e972529a0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97252938 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97252770 <line:80:37, col:49> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97252748 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e97252730 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e972526f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e972526c8 <ldebug.c:324:28> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
            |   `-IntegerLiteral 0x555e97252710 <./lopcodes.h:44:17> 'int' 0
            `-ParenExpr 0x555e97252918 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e972528f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e972528b0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97252890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97252870 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97252848 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e97252808 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e972527e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e972527c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97252790 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e97252828 <line:42:18> 'int' 6
                `-IntegerLiteral 0x555e972528d0 <line:80:67> 'int' 0
OpCode op = (((OpCode)(((i) >> 0) & ((~((~(Instruction)0) << 6)) << 0))));
  25: DeclRefExpr 0x555e97252ab8 <ldebug.c:325:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
i
  26: ImplicitCastExpr 0x555e97252b88 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e97252ae0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e97252ab8 <ldebug.c:325:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
([B133.25]) (ImplicitCastExpr, LValueToRValue, Instruction)
  27: IntegerLiteral 0x555e97252b00 <./lopcodes.h:44:17> 'int' 0
0
  28: IntegerLiteral 0x555e97252b20 <./lopcodes.h:42:18> 'int' 6
6
  29: BinaryOperator 0x555e97252b40 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e97252b00 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e97252b20 <line:42:18> 'int' 6
[B133.27] + [B133.28]
  30: BinaryOperator 0x555e97252ba0 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e97252b88 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e97252ae0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e97252ab8 <ldebug.c:325:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e97252b68 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x555e97252b40 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x555e97252b00 <line:44:17> 'int' 0
    `-IntegerLiteral 0x555e97252b20 <line:42:18> 'int' 6
[B133.26] >> ([B133.29])
  31: IntegerLiteral 0x555e97252be8 <./lopcodes.h:71:39> 'int' 0
0
  32: CStyleCastExpr 0x555e97252c18 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
(Instruction)[B133.31] (CStyleCastExpr, IntegralCast, Instruction)
  33: UnaryOperator 0x555e97252c40 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
~[B133.32]
  34: IntegerLiteral 0x555e97252c80 <./lopcodes.h:40:17> 'int' 8
8
  35: BinaryOperator 0x555e97252ca0 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97252c60 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97252c40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
`-IntegerLiteral 0x555e97252c80 <line:40:17> 'int' 8
([B133.33]) << [B133.34]
  36: UnaryOperator 0x555e97252ce8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e97252cc8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97252ca0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97252c60 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97252c40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
    `-IntegerLiteral 0x555e97252c80 <line:40:17> 'int' 8
~([B133.35])
  37: IntegerLiteral 0x555e97252d28 <./lopcodes.h:84:60> 'int' 0
0
  38: BinaryOperator 0x555e97252d48 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e97252d08 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e97252ce8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e97252cc8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e97252ca0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e97252c60 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e97252c40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e97252c80 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e97252d28 <line:84:60> 'int' 0
([B133.36]) << [B133.37]
  39: BinaryOperator 0x555e97252d90 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e97252bc8 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e97252ba0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e97252b88 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e97252ae0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e97252ab8 <ldebug.c:325:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e97252b68 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x555e97252b40 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x555e97252b00 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x555e97252b20 <line:42:18> 'int' 6
`-ParenExpr 0x555e97252d70 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e97252d48 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e97252d08 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e97252ce8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e97252cc8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e97252ca0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e97252c60 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e97252c40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e97252c80 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e97252d28 <line:84:60> 'int' 0
([B133.30]) & ([B133.38])
  40: CStyleCastExpr 0x555e97252e20 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e97252e00 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e97252d90 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e97252bc8 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e97252ba0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e97252b88 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e97252ae0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e97252ab8 <ldebug.c:325:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e97252b68 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x555e97252b40 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x555e97252b00 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x555e97252b20 <line:42:18> 'int' 6
    `-ParenExpr 0x555e97252d70 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e97252d48 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e97252d08 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e97252ce8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e97252cc8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e97252ca0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e97252c60 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e97252c40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e97252c80 <line:40:17> 'int' 8
        `-IntegerLiteral 0x555e97252d28 <line:84:60> 'int' 0
(int)([B133.39]) (CStyleCastExpr, IntegralCast, int)
  41: DeclStmt 0x555e97252e88 <ldebug.c:325:5, col:24>col:9
`-VarDecl 0x555e97252a58 <col:5, ./lopcodes.h:84:63> ldebug.c:325:9 used a 'int' cinit
  `-ParenExpr 0x555e97252e68 <./lopcodes.h:84:21, col:63> 'int'
    `-ParenExpr 0x555e97252e48 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x555e97252e20 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x555e97252e00 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x555e97252d90 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x555e97252bc8 <line:84:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x555e97252ba0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x555e97252b88 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x555e97252ae0 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x555e97252ab8 <ldebug.c:325:22> 'Instruction':'unsigned int' lvalue Var 0x555e972524d0 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x555e97252b68 <./lopcodes.h:45:16, col:33> 'int'
            |     `-BinaryOperator 0x555e97252b40 <line:44:17, line:42:18> 'int' '+'
            |       |-IntegerLiteral 0x555e97252b00 <line:44:17> 'int' 0
            |       `-IntegerLiteral 0x555e97252b20 <line:42:18> 'int' 6
            `-ParenExpr 0x555e97252d70 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x555e97252d48 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x555e97252d08 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x555e97252ce8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x555e97252cc8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x555e97252ca0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x555e97252c60 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x555e97252c40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x555e97252c18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x555e97252be8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x555e97252c80 <line:40:17> 'int' 8
                `-IntegerLiteral 0x555e97252d28 <line:84:60> 'int' 0
int a = (((int)(((i) >> (0 + 6)) & ((~((~(Instruction)0) << 8)) << 0))));
  42: IntegerLiteral 0x555e97252f18 <ldebug.c:326:13> 'int' 0
0
  43: DeclStmt 0x555e97252f38 <ldebug.c:326:5, col:14>col:9
`-VarDecl 0x555e97252eb8 <col:5, col:13> col:9 used b 'int' cinit
  `-IntegerLiteral 0x555e97252f18 <col:13> 'int' 0
int b = 0;
  44: IntegerLiteral 0x555e97252fc8 <ldebug.c:327:13> 'int' 0
0
  45: DeclStmt 0x555e97252fe8 <ldebug.c:327:5, col:14>col:9
`-VarDecl 0x555e97252f68 <col:5, col:13> col:9 used c 'int' cinit
  `-IntegerLiteral 0x555e97252fc8 <col:13> 'int' 0
int c = 0;
  46: DeclRefExpr 0x555e97253000 <ldebug.c:328:11> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
op
  47: ImplicitCastExpr 0x555e97253168 <ldebug.c:328:11> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x555e97253000 <col:11> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B133.46] (ImplicitCastExpr, LValueToRValue, OpCode)
  48: ImplicitCastExpr 0x555e97253180 <ldebug.c:328:11> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x555e97253168 <col:11> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x555e97253000 <col:11> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
[B133.47] (ImplicitCastExpr, IntegralCast, unsigned int)
  49: DeclRefExpr 0x555e97253028 <./lopcodes.h:211:32> 'int' EnumConstant 0x555e971f1fd8 'OP_VARARG' 'int'
OP_VARARG
  50: CStyleCastExpr 0x555e972530b8 <./llimits.h:75:23, col:30> 'int' <NoOp>
`-ParenExpr 0x555e97253098 <col:26, col:30> 'int'
  `-DeclRefExpr 0x555e97253028 <./lopcodes.h:211:32> 'int' EnumConstant 0x555e971f1fd8 'OP_VARARG' 'int'
(int)([B133.49]) (CStyleCastExpr, NoOp, int)
  51: IntegerLiteral 0x555e97253100 <./lopcodes.h:211:45> 'int' 1
1
  52: BinaryOperator 0x555e97253120 <./llimits.h:75:22, ./lopcodes.h:211:45> 'int' '+'
|-ParenExpr 0x555e972530e0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x555e972530b8 <col:23, col:30> 'int' <NoOp>
|   `-ParenExpr 0x555e97253098 <col:26, col:30> 'int'
|     `-DeclRefExpr 0x555e97253028 <./lopcodes.h:211:32> 'int' EnumConstant 0x555e971f1fd8 'OP_VARARG' 'int'
`-IntegerLiteral 0x555e97253100 <col:45> 'int' 1
([B133.50]) + [B133.51]
  53: ImplicitCastExpr 0x555e97253198 <./lopcodes.h:211:21, col:46> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e97253148 <col:21, col:46> 'int'
  `-BinaryOperator 0x555e97253120 <./llimits.h:75:22, ./lopcodes.h:211:45> 'int' '+'
    |-ParenExpr 0x555e972530e0 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x555e972530b8 <col:23, col:30> 'int' <NoOp>
    |   `-ParenExpr 0x555e97253098 <col:26, col:30> 'int'
    |     `-DeclRefExpr 0x555e97253028 <./lopcodes.h:211:32> 'int' EnumConstant 0x555e971f1fd8 'OP_VARARG' 'int'
    `-IntegerLiteral 0x555e97253100 <col:45> 'int' 1
([B133.52]) (ImplicitCastExpr, IntegralCast, unsigned int)
  54: BinaryOperator 0x555e972531b0 <ldebug.c:328:11, ./lopcodes.h:211:46> 'int' '<'
|-ImplicitCastExpr 0x555e97253180 <ldebug.c:328:11> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x555e97253168 <col:11> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x555e97253000 <col:11> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x555e97253198 <./lopcodes.h:211:21, col:46> 'unsigned int' <IntegralCast>
  `-ParenExpr 0x555e97253148 <col:21, col:46> 'int'
    `-BinaryOperator 0x555e97253120 <./llimits.h:75:22, ./lopcodes.h:211:45> 'int' '+'
      |-ParenExpr 0x555e972530e0 <./llimits.h:75:22, col:31> 'int'
      | `-CStyleCastExpr 0x555e972530b8 <col:23, col:30> 'int' <NoOp>
      |   `-ParenExpr 0x555e97253098 <col:26, col:30> 'int'
      |     `-DeclRefExpr 0x555e97253028 <./lopcodes.h:211:32> 'int' EnumConstant 0x555e971f1fd8 'OP_VARARG' 'int'
      `-IntegerLiteral 0x555e97253100 <col:45> 'int' 1
[B133.48] < [B133.53]
  55: UnaryOperator 0x555e972531f8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e972531d8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e972531b0 <line:328:11, ./lopcodes.h:211:46> 'int' '<'
    |-ImplicitCastExpr 0x555e97253180 <ldebug.c:328:11> 'unsigned int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e97253168 <col:11> 'OpCode':'OpCode' <LValueToRValue>
    |   `-DeclRefExpr 0x555e97253000 <col:11> 'OpCode':'OpCode' lvalue Var 0x555e97252668 'op' 'OpCode':'OpCode'
    `-ImplicitCastExpr 0x555e97253198 <./lopcodes.h:211:21, col:46> 'unsigned int' <IntegralCast>
      `-ParenExpr 0x555e97253148 <col:21, col:46> 'int'
        `-BinaryOperator 0x555e97253120 <./llimits.h:75:22, ./lopcodes.h:211:45> 'int' '+'
          |-ParenExpr 0x555e972530e0 <./llimits.h:75:22, col:31> 'int'
          | `-CStyleCastExpr 0x555e972530b8 <col:23, col:30> 'int' <NoOp>
          |   `-ParenExpr 0x555e97253098 <col:26, col:30> 'int'
          |     `-DeclRefExpr 0x555e97253028 <./lopcodes.h:211:32> 'int' EnumConstant 0x555e971f1fd8 'OP_VARARG' 'int'
          `-IntegerLiteral 0x555e97253100 <col:45> 'int' 1
!([B133.54])
   T: if [B133.55]
   Preds (1): B134
   Succs (2): B132 B131

 [B134]
   1: DeclRefExpr 0x555e972523d0 <ldebug.c:322:16> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   2: ImplicitCastExpr 0x555e97252420 <ldebug.c:322:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972523d0 <col:16> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
[B134.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x555e972523f8 <ldebug.c:322:21> 'int' lvalue ParmVar 0x555e97251cd0 'lastpc' 'int'
lastpc
   4: ImplicitCastExpr 0x555e97252438 <ldebug.c:322:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x555e972523f8 <col:21> 'int' lvalue ParmVar 0x555e97251cd0 'lastpc' 'int'
[B134.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x555e97252450 <ldebug.c:322:16, col:21> 'int' '<'
|-ImplicitCastExpr 0x555e97252420 <col:16> 'int' <LValueToRValue>
| `-DeclRefExpr 0x555e972523d0 <col:16> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-ImplicitCastExpr 0x555e97252438 <col:21> 'int' <LValueToRValue>
  `-DeclRefExpr 0x555e972523f8 <col:21> 'int' lvalue ParmVar 0x555e97251cd0 'lastpc' 'int'
[B134.2] < [B134.4]
   T: for (...; [B134.5]; ...)
   Preds (2): B2 B135
   Succs (2): B133 B1

 [B135]
   1: IntegerLiteral 0x555e97252388 <ldebug.c:322:13> 'int' 0
0
   2: DeclRefExpr 0x555e97252360 <ldebug.c:322:8> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
pc
   3: BinaryOperator 0x555e972523a8 <ldebug.c:322:8, col:13> 'int' '='
|-DeclRefExpr 0x555e97252360 <col:8> 'int' lvalue Var 0x555e97251f50 'pc' 'int'
`-IntegerLiteral 0x555e97252388 <col:13> 'int' 0
[B135.2] = [B135.1]
   Preds (1): B137
   Succs (1): B134

 [B136]
   1: IntegerLiteral 0x555e972522c8 <ldebug.c:268:36> 'int' 0
0
   2: ImplicitCastExpr 0x555e972522e8 <ldebug.c:268:36> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e972522c8 <col:36> 'int' 0
[B136.1] (ImplicitCastExpr, IntegralCast, Instruction)
   3: ReturnStmt 0x555e97252300 <ldebug.c:268:29, col:36>
`-ImplicitCastExpr 0x555e972522e8 <col:36> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e972522c8 <col:36> 'int' 0
return [B136.2];
   Preds (1): B137
   Succs (1): B0

 [B137]
   1: DeclStmt 0x555e97251fb0 <ldebug.c:318:3, col:9>col:7
`-VarDecl 0x555e97251f50 <col:3, col:7> col:7 used pc 'int'
int pc;
   2: DeclStmt 0x555e97252040 <ldebug.c:319:3, col:11>col:7
`-VarDecl 0x555e97251fe0 <col:3, col:7> col:7 used last 'int'
int last;
   3: DeclRefExpr 0x555e97252080 <ldebug.c:320:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
   4: ImplicitCastExpr 0x555e972520a8 <ldebug.c:320:10> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e97252080 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B137.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x555e972520c0 <ldebug.c:320:10, col:14> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e972520a8 <col:10> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e97252080 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B137.4]->sizecode
   6: ImplicitCastExpr 0x555e97252118 <ldebug.c:320:10, col:14> 'int' <LValueToRValue>
`-MemberExpr 0x555e972520c0 <col:10, col:14> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e972520a8 <col:10> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e97252080 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B137.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x555e972520f8 <ldebug.c:320:23> 'int' 1
1
   8: BinaryOperator 0x555e97252130 <ldebug.c:320:10, col:23> 'int' '-'
|-ImplicitCastExpr 0x555e97252118 <col:10, col:14> 'int' <LValueToRValue>
| `-MemberExpr 0x555e972520c0 <col:10, col:14> 'const int' lvalue ->sizecode 0x555e971d9ce8
|   `-ImplicitCastExpr 0x555e972520a8 <col:10> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e97252080 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
`-IntegerLiteral 0x555e972520f8 <col:23> 'int' 1
[B137.6] - [B137.7]
   9: DeclRefExpr 0x555e97252058 <ldebug.c:320:3> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
last
  10: BinaryOperator 0x555e97252158 <ldebug.c:320:3, col:23> 'int' '='
|-DeclRefExpr 0x555e97252058 <col:3> 'int' lvalue Var 0x555e97251fe0 'last' 'int'
`-BinaryOperator 0x555e97252130 <col:10, col:23> 'int' '-'
  |-ImplicitCastExpr 0x555e97252118 <col:10, col:14> 'int' <LValueToRValue>
  | `-MemberExpr 0x555e972520c0 <col:10, col:14> 'const int' lvalue ->sizecode 0x555e971d9ce8
  |   `-ImplicitCastExpr 0x555e972520a8 <col:10> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e97252080 <col:10> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
  `-IntegerLiteral 0x555e972520f8 <col:23> 'int' 1
[B137.9] = [B137.8]
  11: DeclRefExpr 0x555e97252180 <ldebug.c:321:9> 'int (const Proto *)' Function 0x555e9724b020 'precheck' 'int (const Proto *)'
precheck
  12: ImplicitCastExpr 0x555e97252228 <ldebug.c:321:9> 'int (*)(const Proto *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e97252180 <col:9> 'int (const Proto *)' Function 0x555e9724b020 'precheck' 'int (const Proto *)'
[B137.11] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const Proto *))
  13: DeclRefExpr 0x555e972521a8 <ldebug.c:321:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
pt
  14: ImplicitCastExpr 0x555e97252270 <ldebug.c:321:18> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e972521a8 <col:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B137.13] (ImplicitCastExpr, LValueToRValue, const Proto *)
  15: CallExpr 0x555e97252240 <ldebug.c:321:9, col:20> 'int'
|-ImplicitCastExpr 0x555e97252228 <col:9> 'int (*)(const Proto *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e97252180 <col:9> 'int (const Proto *)' Function 0x555e9724b020 'precheck' 'int (const Proto *)'
`-ImplicitCastExpr 0x555e97252270 <col:18> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e972521a8 <col:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
[B137.12]([B137.14])
  16: UnaryOperator 0x555e972522a8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e97252288 <col:24, col:26> 'int'
  `-CallExpr 0x555e97252240 <line:321:9, col:20> 'int'
    |-ImplicitCastExpr 0x555e97252228 <col:9> 'int (*)(const Proto *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e97252180 <col:9> 'int (const Proto *)' Function 0x555e9724b020 'precheck' 'int (const Proto *)'
    `-ImplicitCastExpr 0x555e97252270 <col:18> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e972521a8 <col:18> 'const Proto *' lvalue ParmVar 0x555e97250330 'pt' 'const Proto *'
!([B137.15])
   T: if [B137.16]
   Preds (1): B138
   Succs (2): B136 B135

 [B0 (EXIT)]
   Preds (32): B1 B6 B8 B11 B19 B25 B27 B30
      B33 B37 B44 B47 B50 B59 B64 B66 B69 B74
      B78 B82 B89 B93 B96 B98 B106 B116 B122 B126
      B128 B130 B132 B136
