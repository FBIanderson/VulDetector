static void dischargejpc(FuncState *fs)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x5637768bb478 <lcode.c:164:3> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
patchlistaux
   2: ImplicitCastExpr 0x5637768bb778 <lcode.c:164:3> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768bb478 <col:3> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int, int, int))
   3: DeclRefExpr 0x5637768bb4a0 <lcode.c:164:16> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768bb7e0 <lcode.c:164:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bb4a0 <col:16> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768bb4c8 <lcode.c:164:20> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768bb4f0 <lcode.c:164:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bb4c8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: MemberExpr 0x5637768bb508 <lcode.c:164:20, col:24> 'int' lvalue ->jpc 0x56377687e208
`-ImplicitCastExpr 0x5637768bb4f0 <col:20> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bb4c8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.6]->jpc
   8: ImplicitCastExpr 0x5637768bb7f8 <lcode.c:164:20, col:24> 'int' <LValueToRValue>
`-MemberExpr 0x5637768bb508 <col:20, col:24> 'int' lvalue ->jpc 0x56377687e208
  `-ImplicitCastExpr 0x5637768bb4f0 <col:20> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bb4c8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768bb540 <lcode.c:164:29> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x5637768bb568 <lcode.c:164:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bb540 <col:29> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: MemberExpr 0x5637768bb580 <lcode.c:164:29, col:33> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768bb568 <col:29> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bb540 <col:29> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.10]->pc
  12: ImplicitCastExpr 0x5637768bb810 <lcode.c:164:29, col:33> 'int' <LValueToRValue>
`-MemberExpr 0x5637768bb580 <col:29, col:33> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768bb568 <col:29> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bb540 <col:29> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: IntegerLiteral 0x5637768bb5b8 <./lopcodes.h:65:27> 'int' 1
1
  14: IntegerLiteral 0x5637768bb5d8 <./lopcodes.h:40:17> 'int' 8
8
  15: BinaryOperator 0x5637768bb5f8 <./lopcodes.h:65:27, line:40:17> 'int' '<<'
|-IntegerLiteral 0x5637768bb5b8 <line:65:27> 'int' 1
`-IntegerLiteral 0x5637768bb5d8 <line:40:17> 'int' 8
[B1.13] << [B1.14]
  16: IntegerLiteral 0x5637768bb640 <./lopcodes.h:65:38> 'int' 1
1
  17: BinaryOperator 0x5637768bb660 <./lopcodes.h:65:26, col:38> 'int' '-'
|-ParenExpr 0x5637768bb620 <col:26, col:36> 'int'
| `-BinaryOperator 0x5637768bb5f8 <col:27, line:40:17> 'int' '<<'
|   |-IntegerLiteral 0x5637768bb5b8 <line:65:27> 'int' 1
|   `-IntegerLiteral 0x5637768bb5d8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768bb640 <line:65:38> 'int' 1
([B1.15]) - [B1.16]
  18: DeclRefExpr 0x5637768bb6a8 <lcode.c:164:45> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
fs
  19: ImplicitCastExpr 0x5637768bb6d0 <lcode.c:164:45> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bb6a8 <col:45> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.18] (ImplicitCastExpr, LValueToRValue, FuncState *)
  20: MemberExpr 0x5637768bb6e8 <lcode.c:164:45, col:49> 'int' lvalue ->pc 0x56377687e130
`-ImplicitCastExpr 0x5637768bb6d0 <col:45> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bb6a8 <col:45> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.19]->pc
  21: ImplicitCastExpr 0x5637768bb828 <lcode.c:164:45, col:49> 'int' <LValueToRValue>
`-MemberExpr 0x5637768bb6e8 <col:45, col:49> 'int' lvalue ->pc 0x56377687e130
  `-ImplicitCastExpr 0x5637768bb6d0 <col:45> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bb6a8 <col:45> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: CallExpr 0x5637768bb790 <lcode.c:164:3, col:51> 'void'
|-ImplicitCastExpr 0x5637768bb778 <col:3> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768bb478 <col:3> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
|-ImplicitCastExpr 0x5637768bb7e0 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768bb4a0 <col:16> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768bb7f8 <col:20, col:24> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768bb508 <col:20, col:24> 'int' lvalue ->jpc 0x56377687e208
|   `-ImplicitCastExpr 0x5637768bb4f0 <col:20> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768bb4c8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768bb810 <col:29, col:33> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768bb580 <col:29, col:33> 'int' lvalue ->pc 0x56377687e130
|   `-ImplicitCastExpr 0x5637768bb568 <col:29> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768bb540 <col:29> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
|-ParenExpr 0x5637768bb688 <./lopcodes.h:65:25, col:39> 'int'
| `-BinaryOperator 0x5637768bb660 <col:26, col:38> 'int' '-'
|   |-ParenExpr 0x5637768bb620 <col:26, col:36> 'int'
|   | `-BinaryOperator 0x5637768bb5f8 <col:27, line:40:17> 'int' '<<'
|   |   |-IntegerLiteral 0x5637768bb5b8 <line:65:27> 'int' 1
|   |   `-IntegerLiteral 0x5637768bb5d8 <line:40:17> 'int' 8
|   `-IntegerLiteral 0x5637768bb640 <line:65:38> 'int' 1
`-ImplicitCastExpr 0x5637768bb828 <lcode.c:164:45, col:49> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768bb6e8 <col:45, col:49> 'int' lvalue ->pc 0x56377687e130
    `-ImplicitCastExpr 0x5637768bb6d0 <col:45> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768bb6a8 <col:45> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.2]([B1.4], [B1.8], [B1.12], ([B1.17]), [B1.21])
  23: IntegerLiteral 0x5637768bb8b8 <./lcode.h:20:19> 'int' 1
1
  24: UnaryOperator 0x5637768bb8d8 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768bb8b8 <col:19> 'int' 1
-[B1.23]
  25: DeclRefExpr 0x5637768bb840 <lcode.c:165:3> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
fs
  26: ImplicitCastExpr 0x5637768bb868 <lcode.c:165:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bb840 <col:3> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.25] (ImplicitCastExpr, LValueToRValue, FuncState *)
  27: MemberExpr 0x5637768bb880 <lcode.c:165:3, col:7> 'int' lvalue ->jpc 0x56377687e208
`-ImplicitCastExpr 0x5637768bb868 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bb840 <col:3> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
[B1.26]->jpc
  28: BinaryOperator 0x5637768bb918 <lcode.c:165:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768bb880 <lcode.c:165:3, col:7> 'int' lvalue ->jpc 0x56377687e208
| `-ImplicitCastExpr 0x5637768bb868 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768bb840 <col:3> 'FuncState *' lvalue ParmVar 0x5637768bb2d0 'fs' 'FuncState *'
`-ParenExpr 0x5637768bb8f8 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768bb8d8 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768bb8b8 <col:19> 'int' 1
[B1.27] = ([B1.24])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
