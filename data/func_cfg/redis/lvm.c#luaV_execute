void luaV_execute(lua_State *L, int nexeccalls)
 [B262 (ENTRY)]
   Succs (1): B261

 [B1]
   Preds (39): B3 B15 B24 B25 B34 B40 B43 B56
      B73 B85 B91 B97 B103 B112 B121 B132 B133 B136
      B143 B147 B151 B162 B173 B184 B195 B206 B217 B221
      B224 B231 B236 B237 B241 B242 B243 B248 B251 B252
      B2(Unreachable)
   Succs (1): B259

 [B2]
   1: DeclRefExpr 0x5590ecefdce8 <lvm.c:347:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecefe0e0 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefdce8 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B2.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecefdde0 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecefdd38 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B2.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecefdd58 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecefdd78 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecefdd98 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecefdd58 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecefdd78 <line:42:18> 'int' 6
[B2.5] + [B2.6]
   8: BinaryOperator 0x5590ecefddf8 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecefdde0 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecefdd38 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecefddc0 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecefdd98 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecefdd58 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecefdd78 <line:42:18> 'int' 6
[B2.4] >> ([B2.7])
   9: IntegerLiteral 0x5590ecefde40 <./lopcodes.h:71:39> 'int' 0
0
  10: CStyleCastExpr 0x5590ecefde70 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
(Instruction)[B2.9] (CStyleCastExpr, IntegralCast, Instruction)
  11: UnaryOperator 0x5590ecefde98 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
~[B2.10]
  12: IntegerLiteral 0x5590ecefded8 <./lopcodes.h:40:17> 'int' 8
8
  13: BinaryOperator 0x5590ecefdef8 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
([B2.11]) << [B2.12]
  14: UnaryOperator 0x5590ecefdf40 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecefdf20 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecefdef8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
~([B2.13])
  15: IntegerLiteral 0x5590ecefdf80 <./lopcodes.h:84:60> 'int' 0
0
  16: BinaryOperator 0x5590ecefdfa0 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecefdf60 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecefdf40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecefdf20 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecefdef8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecefdf80 <line:84:60> 'int' 0
([B2.14]) << [B2.15]
  17: BinaryOperator 0x5590ecefdfe8 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecefde20 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecefddf8 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecefdde0 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecefdd38 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecefddc0 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecefdd98 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecefdd58 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecefdd78 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecefdfc8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecefdfa0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecefdf60 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecefdf40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecefdf20 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecefdef8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecefdf80 <line:84:60> 'int' 0
([B2.8]) & ([B2.16])
  18: CStyleCastExpr 0x5590ecefe078 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecefe058 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecefdfe8 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecefde20 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecefddf8 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecefdde0 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecefdd38 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecefddc0 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecefdd98 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecefdd58 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecefdd78 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecefdfc8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecefdfa0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecefdf60 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecefdf40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecefdf20 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecefdef8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecefdf80 <line:84:60> 'int' 0
(int)([B2.17]) (CStyleCastExpr, IntegralCast, int)
  19: BinaryOperator 0x5590ecefe0f8 <lvm.c:347:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecefe0e0 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecefdce8 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecefe0c0 <./lopcodes.h:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecefe0a0 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecefe078 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecefe058 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecefdfe8 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecefde20 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecefddf8 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecefdde0 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecefdd38 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecefddc0 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecefdd98 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecefdd58 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecefdd78 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecefdfc8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecefdfa0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecefdf60 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecefdf40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecefdf20 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecefdef8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecefdf80 <line:84:60> 'int' 0
[B2.2] + (([B2.18]))
  20: DeclRefExpr 0x5590ecefdcc0 <lvm.c:402:5> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  21: BinaryOperator 0x5590ecefe140 <lvm.c:402:5, line:347:32> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecefdcc0 <line:402:5> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ParenExpr 0x5590ecefe120 <line:347:15, col:32> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecefe0f8 <col:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecefe0e0 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecefdce8 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    `-ParenExpr 0x5590ecefe0c0 <./lopcodes.h:84:21, col:63> 'int'
      `-ParenExpr 0x5590ecefe0a0 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecefe078 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecefe058 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecefdfe8 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecefde20 <line:84:32, col:43> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecefddf8 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecefdde0 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecefdd38 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
              |   |   `-DeclRefExpr 0x5590ecefdd10 <lvm.c:402:13> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
              |   `-ParenExpr 0x5590ecefddc0 <./lopcodes.h:45:16, col:33> 'int'
              |     `-BinaryOperator 0x5590ecefdd98 <line:44:17, line:42:18> 'int' '+'
              |       |-IntegerLiteral 0x5590ecefdd58 <line:44:17> 'int' 0
              |       `-IntegerLiteral 0x5590ecefdd78 <line:42:18> 'int' 6
              `-ParenExpr 0x5590ecefdfc8 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecefdfa0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecefdf60 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecefdf40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecefdf20 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecefdef8 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecefdeb8 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecefde98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecefde70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecefde40 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5590ecefded8 <line:40:17> 'int' 8
                  `-IntegerLiteral 0x5590ecefdf80 <line:84:60> 'int' 0
[B2.20] = ([B2.19])
  22: IntegerLiteral 0x5590ecefe168 <./llimits.h:62:31> 'int' 0
0
  23: CStyleCastExpr 0x5590ecefe198 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecefe168 <col:31> 'int' 0
(void)[B2.22] (CStyleCastExpr, ToVoid, void)
  24: IntegerLiteral 0x5590ecefe1e0 <./llimits.h:62:31> 'int' 0
0
  25: CStyleCastExpr 0x5590ecefe210 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecefe1e0 <col:31> 'int' 0
(void)[B2.24] (CStyleCastExpr, ToVoid, void)
  26: IntegerLiteral 0x5590ecefe258 <./llimits.h:62:31> 'int' 0
0
  27: CStyleCastExpr 0x5590ecefe288 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecefe258 <col:31> 'int' 0
(void)[B2.26] (CStyleCastExpr, ToVoid, void)
  28: DeclRefExpr 0x5590ecefe2f0 <lvm.c:406:24> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  29: ImplicitCastExpr 0x5590ecefe358 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecefe318 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecefe2f0 <lvm.c:406:24> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B2.28]) (ImplicitCastExpr, LValueToRValue, Instruction)
  30: IntegerLiteral 0x5590ecefe338 <./lopcodes.h:44:17> 'int' 0
0
  31: BinaryOperator 0x5590ecefe370 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecefe358 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecefe318 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecefe2f0 <lvm.c:406:24> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-IntegerLiteral 0x5590ecefe338 <./lopcodes.h:44:17> 'int' 0
[B2.29] >> [B2.30]
  32: IntegerLiteral 0x5590ecefe3b8 <./lopcodes.h:71:39> 'int' 0
0
  33: CStyleCastExpr 0x5590ecefe3e8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
(Instruction)[B2.32] (CStyleCastExpr, IntegralCast, Instruction)
  34: UnaryOperator 0x5590ecefe410 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
~[B2.33]
  35: IntegerLiteral 0x5590ecefe450 <./lopcodes.h:42:18> 'int' 6
6
  36: BinaryOperator 0x5590ecefe470 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecefe430 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecefe410 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecefe450 <line:42:18> 'int' 6
([B2.34]) << [B2.35]
  37: UnaryOperator 0x5590ecefe4b8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecefe498 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecefe470 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecefe430 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecefe410 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecefe450 <line:42:18> 'int' 6
~([B2.36])
  38: IntegerLiteral 0x5590ecefe4f8 <./lopcodes.h:80:67> 'int' 0
0
  39: BinaryOperator 0x5590ecefe518 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecefe4d8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecefe4b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecefe498 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecefe470 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecefe430 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecefe410 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecefe450 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecefe4f8 <line:80:67> 'int' 0
([B2.37]) << [B2.38]
  40: BinaryOperator 0x5590ecefe560 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecefe398 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecefe370 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecefe358 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecefe318 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecefe2f0 <lvm.c:406:24> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-IntegerLiteral 0x5590ecefe338 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5590ecefe540 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecefe518 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecefe4d8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecefe4b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecefe498 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecefe470 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecefe430 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecefe410 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecefe450 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecefe4f8 <line:80:67> 'int' 0
([B2.31]) & ([B2.39])
  41: CStyleCastExpr 0x5590ecefe5e8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5590ecefe5c8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecefe560 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecefe398 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecefe370 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecefe358 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecefe318 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecefe2f0 <lvm.c:406:24> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-IntegerLiteral 0x5590ecefe338 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5590ecefe540 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecefe518 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecefe4d8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecefe4b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecefe498 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecefe470 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecefe430 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecefe410 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecefe450 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5590ecefe4f8 <line:80:67> 'int' 0
(OpCode)([B2.40]) (CStyleCastExpr, IntegralCast, OpCode)
  42: ImplicitCastExpr 0x5590ecefe650 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x5590ecefe630 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5590ecefe610 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5590ecefe5e8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5590ecefe5c8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecefe560 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecefe398 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecefe370 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecefe358 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecefe318 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecefe2f0 <lvm.c:406:24> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-IntegerLiteral 0x5590ecefe338 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5590ecefe540 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecefe518 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecefe4d8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecefe4b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecefe498 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecefe470 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecefe430 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecefe410 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecefe3e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecefe3b8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecefe450 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5590ecefe4f8 <line:80:67> 'int' 0
(([B2.41])) (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.42]
   Preds (3): B253 B256 B258
   Succs (39): B14 B23 B24 B39 B42 B55 B61 B70
     B82 B90 B96 B102 B111 B120 B131 B132 B135 B137
     B146 B150 B161 B172 B183 B194 B205 B216 B220 B223
     B230 B235 B236 B240 B241 B242 B247 B250 B251 B252
     B1(Unreachable)

 [B3]
   T: continue;
   Preds (1): B8
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x5590ecf68bc0 <lvm.c:754:28> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
   2: UnaryOperator 0x5590ecf68be8 <lvm.c:754:28, col:29> 'int' postfix '++'
`-DeclRefExpr 0x5590ecf68bc0 <col:28> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B4.1]++
   Preds (2): B5 B6
   Succs (1): B8

 [B5]
   1: IntegerLiteral 0x5590ecf69478 <./lua.h:74:19> 'int' 0
0
   2: DeclRefExpr 0x5590ecf69378 <lvm.c:759:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   3: ImplicitCastExpr 0x5590ecf693c8 <lvm.c:759:25> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf69378 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B5.2] (ImplicitCastExpr, LValueToRValue, StkId)
   4: DeclRefExpr 0x5590ecf693a0 <lvm.c:759:30> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
   5: ImplicitCastExpr 0x5590ecf693e0 <lvm.c:759:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf693a0 <col:30> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: BinaryOperator 0x5590ecf693f8 <lvm.c:759:25, col:30> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf693c8 <col:25> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf69378 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf693e0 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf693a0 <col:30> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B5.3] + [B5.5]
   7: MemberExpr 0x5590ecf69440 <./lobject.h:117:27, col:34> 'int' lvalue ->tt 0x5590ece76e00
`-ParenExpr 0x5590ecf69420 <col:27, col:31> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf693f8 <lvm.c:759:25, col:30> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf693c8 <col:25> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf69378 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-ImplicitCastExpr 0x5590ecf693e0 <col:30> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf693a0 <col:30> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
([B5.6])->tt
   8: BinaryOperator 0x5590ecf69498 <./lobject.h:117:27, ./lua.h:74:19> 'int' '='
|-MemberExpr 0x5590ecf69440 <./lobject.h:117:27, col:34> 'int' lvalue ->tt 0x5590ece76e00
| `-ParenExpr 0x5590ecf69420 <col:27, col:31> 'StkId':'TValue *'
|   `-BinaryOperator 0x5590ecf693f8 <lvm.c:759:25, col:30> 'StkId':'TValue *' '+'
|     |-ImplicitCastExpr 0x5590ecf693c8 <col:25> 'StkId':'TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf69378 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|     `-ImplicitCastExpr 0x5590ecf693e0 <col:30> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf693a0 <col:30> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
`-IntegerLiteral 0x5590ecf69478 <./lua.h:74:19> 'int' 0
[B5.7] = [B5.1]
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x5590ecf68d20 <lvm.c:756:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x5590ecf68d48 <lvm.c:756:34> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B6.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x5590ecf68d60 <lvm.c:756:34, col:38> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
`-ImplicitCastExpr 0x5590ecf68d48 <col:34> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B6.2]->base
   4: ImplicitCastExpr 0x5590ecf68dc0 <lvm.c:756:34, col:38> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf68d60 <col:34, col:38> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
  `-ImplicitCastExpr 0x5590ecf68d48 <col:34> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B6.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf68d98 <lvm.c:756:45> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
n
   6: ImplicitCastExpr 0x5590ecf68dd8 <lvm.c:756:45> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68d98 <col:45> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B6.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x5590ecf68df0 <lvm.c:756:34, col:45> 'StkId':'TValue *' '-'
|-ImplicitCastExpr 0x5590ecf68dc0 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x5590ecf68d60 <col:34, col:38> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
|   `-ImplicitCastExpr 0x5590ecf68d48 <col:34> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x5590ecf68dd8 <col:45> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68d98 <col:45> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B6.4] - [B6.6]
   8: DeclRefExpr 0x5590ecf68e18 <lvm.c:756:49> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
   9: ImplicitCastExpr 0x5590ecf68e40 <lvm.c:756:49> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68e18 <col:49> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B6.8] (ImplicitCastExpr, LValueToRValue, int)
  10: BinaryOperator 0x5590ecf68e58 <lvm.c:756:34, col:49> 'StkId':'TValue *' '+'
|-BinaryOperator 0x5590ecf68df0 <col:34, col:45> 'StkId':'TValue *' '-'
| |-ImplicitCastExpr 0x5590ecf68dc0 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
| | `-MemberExpr 0x5590ecf68d60 <col:34, col:38> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
| |   `-ImplicitCastExpr 0x5590ecf68d48 <col:34> 'CallInfo *' <LValueToRValue>
| |     `-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
| `-ImplicitCastExpr 0x5590ecf68dd8 <col:45> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf68d98 <col:45> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
`-ImplicitCastExpr 0x5590ecf68e40 <col:49> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68e18 <col:49> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B6.7] + [B6.9]
  11: ImplicitCastExpr 0x5590ecf68ea0 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf68e80 <col:22, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf68e58 <lvm.c:756:34, col:49> 'StkId':'TValue *' '+'
    |-BinaryOperator 0x5590ecf68df0 <col:34, col:45> 'StkId':'TValue *' '-'
    | |-ImplicitCastExpr 0x5590ecf68dc0 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
    | | `-MemberExpr 0x5590ecf68d60 <col:34, col:38> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
    | |   `-ImplicitCastExpr 0x5590ecf68d48 <col:34> 'CallInfo *' <LValueToRValue>
    | |     `-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
    | `-ImplicitCastExpr 0x5590ecf68dd8 <col:45> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x5590ecf68d98 <col:45> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
    `-ImplicitCastExpr 0x5590ecf68e40 <col:49> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf68e18 <col:49> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
([B6.10]) (ImplicitCastExpr, BitCast, const TValue *)
  12: DeclStmt 0x5590ecf68eb8 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf68cc0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf68ea0 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf68e80 <col:22, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf68e58 <lvm.c:756:34, col:49> 'StkId':'TValue *' '+'
        |-BinaryOperator 0x5590ecf68df0 <col:34, col:45> 'StkId':'TValue *' '-'
        | |-ImplicitCastExpr 0x5590ecf68dc0 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
        | | `-MemberExpr 0x5590ecf68d60 <col:34, col:38> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
        | |   `-ImplicitCastExpr 0x5590ecf68d48 <col:34> 'CallInfo *' <LValueToRValue>
        | |     `-DeclRefExpr 0x5590ecf68d20 <col:34> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
        | `-ImplicitCastExpr 0x5590ecf68dd8 <col:45> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x5590ecf68d98 <col:45> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
        `-ImplicitCastExpr 0x5590ecf68e40 <col:49> 'int' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf68e18 <col:49> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
const TValue *o2 = (ci->base - n + j);
  13: DeclRefExpr 0x5590ecf68f40 <lvm.c:756:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf68f90 <lvm.c:756:26> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68f40 <col:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B6.13] (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclRefExpr 0x5590ecf68f68 <lvm.c:756:31> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
  16: ImplicitCastExpr 0x5590ecf68fa8 <lvm.c:756:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68f68 <col:31> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B6.15] (ImplicitCastExpr, LValueToRValue, int)
  17: BinaryOperator 0x5590ecf68fc0 <lvm.c:756:26, col:31> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf68f90 <col:26> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf68f40 <col:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf68fa8 <col:31> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68f68 <col:31> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B6.14] + [B6.16]
  18: DeclStmt 0x5590ecf69008 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf68ee0 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf68fe8 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf68fc0 <lvm.c:756:26, col:31> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf68f90 <col:26> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf68f40 <col:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-ImplicitCastExpr 0x5590ecf68fa8 <col:31> 'int' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf68f68 <col:31> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
TValue *o1 = (ra + j);
  19: DeclRefExpr 0x5590ecf690b0 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
o2
  20: ImplicitCastExpr 0x5590ecf690d8 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf690b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.19] (ImplicitCastExpr, LValueToRValue, const TValue *)
  21: MemberExpr 0x5590ecf690f0 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf690d8 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf690b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.20]->value
  22: ImplicitCastExpr 0x5590ecf69128 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf690f0 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf690d8 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf690b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.21] (ImplicitCastExpr, LValueToRValue, Value)
  23: DeclRefExpr 0x5590ecf69020 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
o1
  24: ImplicitCastExpr 0x5590ecf69048 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf69020 <col:5> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
[B6.23] (ImplicitCastExpr, LValueToRValue, TValue *)
  25: MemberExpr 0x5590ecf69060 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf69048 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf69020 <col:5> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
[B6.24]->value
  26: BinaryOperator 0x5590ecf69140 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf69060 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf69048 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf69020 <col:5> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf69128 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf690f0 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf690d8 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf690b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.25] = [B6.22]
  27: DeclRefExpr 0x5590ecf691e0 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
o2
  28: ImplicitCastExpr 0x5590ecf69208 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf691e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.27] (ImplicitCastExpr, LValueToRValue, const TValue *)
  29: MemberExpr 0x5590ecf69220 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf69208 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf691e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.28]->tt
  30: ImplicitCastExpr 0x5590ecf69258 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf69220 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf69208 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf691e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.29] (ImplicitCastExpr, LValueToRValue, int)
  31: DeclRefExpr 0x5590ecf69168 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
o1
  32: ImplicitCastExpr 0x5590ecf69190 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf69168 <col:28> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
[B6.31] (ImplicitCastExpr, LValueToRValue, TValue *)
  33: MemberExpr 0x5590ecf691a8 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf69190 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf69168 <col:28> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
[B6.32]->tt
  34: BinaryOperator 0x5590ecf69270 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf691a8 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf69190 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf69168 <col:28> 'TValue *' lvalue Var 0x5590ecf68ee0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf69258 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf69220 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf69208 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf691e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf68cc0 'o2' 'const TValue *'
[B6.33] = [B6.30]
  35: IntegerLiteral 0x5590ecf69298 <./llimits.h:62:31> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf692c8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf69298 <col:31> 'int' 0
(void)[B6.35] (CStyleCastExpr, ToVoid, void)
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: DeclRefExpr 0x5590ecf68c08 <lvm.c:755:15> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
   2: ImplicitCastExpr 0x5590ecf68c58 <lvm.c:755:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68c08 <col:15> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5590ecf68c30 <lvm.c:755:19> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
n
   4: ImplicitCastExpr 0x5590ecf68c70 <lvm.c:755:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68c30 <col:19> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf68c88 <lvm.c:755:15, col:19> 'int' '<'
|-ImplicitCastExpr 0x5590ecf68c58 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf68c08 <col:15> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
`-ImplicitCastExpr 0x5590ecf68c70 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68c30 <col:19> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B7.2] < [B7.4]
   T: if [B7.5]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
   1: DeclRefExpr 0x5590ecf68b18 <lvm.c:754:21> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
   2: ImplicitCastExpr 0x5590ecf68b68 <lvm.c:754:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68b18 <col:21> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
[B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5590ecf68b40 <lvm.c:754:25> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
b
   4: ImplicitCastExpr 0x5590ecf68b80 <lvm.c:754:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68b40 <col:25> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
[B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf68b98 <lvm.c:754:21, col:25> 'int' '<'
|-ImplicitCastExpr 0x5590ecf68b68 <col:21> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf68b18 <col:21> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
`-ImplicitCastExpr 0x5590ecf68b80 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68b40 <col:25> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
[B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B4 B9
   Succs (2): B7 B3

 [B9]
   1: IntegerLiteral 0x5590ecf68ad0 <lvm.c:754:18> 'int' 0
0
   2: DeclRefExpr 0x5590ecf68aa8 <lvm.c:754:14> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
j
   3: BinaryOperator 0x5590ecf68af0 <lvm.c:754:14, col:18> 'int' '='
|-DeclRefExpr 0x5590ecf68aa8 <col:14> 'int' lvalue Var 0x5590ecf67668 'j' 'int'
`-IntegerLiteral 0x5590ecf68ad0 <col:18> 'int' 0
[B9.2] = [B9.1]
   Preds (2): B10 B14
   Succs (1): B8

 [B10]
   1: DeclRefExpr 0x5590ecf682c0 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf682e8 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf682c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B10.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf68300 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf682e8 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf682c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B10.2]->base
   4: ImplicitCastExpr 0x5590ecf68338 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf68300 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf682e8 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf682c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B10.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf68298 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf68350 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf68298 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf68338 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf68300 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf682e8 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf682c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B10.5] = [B10.4]
   7: DeclRefExpr 0x5590ecf683e0 <lvm.c:347:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   8: ImplicitCastExpr 0x5590ecf687d8 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf683e0 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B10.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  10: ImplicitCastExpr 0x5590ecf684d8 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf68430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B10.9]) (ImplicitCastExpr, LValueToRValue, Instruction)
  11: IntegerLiteral 0x5590ecf68450 <./lopcodes.h:44:17> 'int' 0
0
  12: IntegerLiteral 0x5590ecf68470 <./lopcodes.h:42:18> 'int' 6
6
  13: BinaryOperator 0x5590ecf68490 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf68450 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf68470 <line:42:18> 'int' 6
[B10.11] + [B10.12]
  14: BinaryOperator 0x5590ecf684f0 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf684d8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf68430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf684b8 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecf68490 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecf68450 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecf68470 <line:42:18> 'int' 6
[B10.10] >> ([B10.13])
  15: IntegerLiteral 0x5590ecf68538 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x5590ecf68568 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
(Instruction)[B10.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x5590ecf68590 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
~[B10.16]
  18: IntegerLiteral 0x5590ecf685d0 <./lopcodes.h:40:17> 'int' 8
8
  19: BinaryOperator 0x5590ecf685f0 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
([B10.17]) << [B10.18]
  20: UnaryOperator 0x5590ecf68638 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf68618 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf685f0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
~([B10.19])
  21: IntegerLiteral 0x5590ecf68678 <./lopcodes.h:84:60> 'int' 0
0
  22: BinaryOperator 0x5590ecf68698 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf68658 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf68638 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf68618 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf685f0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf68678 <line:84:60> 'int' 0
([B10.20]) << [B10.21]
  23: BinaryOperator 0x5590ecf686e0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf68518 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf684f0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf684d8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf68430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf684b8 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecf68490 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecf68450 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecf68470 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecf686c0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf68698 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf68658 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf68638 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf68618 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf685f0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf68678 <line:84:60> 'int' 0
([B10.14]) & ([B10.22])
  24: CStyleCastExpr 0x5590ecf68770 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf68750 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf686e0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf68518 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf684f0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf684d8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf68430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf684b8 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecf68490 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecf68450 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecf68470 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecf686c0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf68698 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf68658 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf68638 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf68618 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf685f0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecf68678 <line:84:60> 'int' 0
(int)([B10.23]) (CStyleCastExpr, IntegralCast, int)
  25: BinaryOperator 0x5590ecf687f0 <lvm.c:347:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf687d8 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf683e0 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf687b8 <./lopcodes.h:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecf68798 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf68770 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf68750 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf686e0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf68518 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf684f0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf684d8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf68430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf684b8 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecf68490 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecf68450 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecf68470 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecf686c0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf68698 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf68658 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf68638 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf68618 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf685f0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecf68678 <line:84:60> 'int' 0
[B10.8] + (([B10.24]))
  26: DeclRefExpr 0x5590ecf683b8 <lvm.c:750:11> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  27: BinaryOperator 0x5590ecf68838 <lvm.c:750:11, line:347:32> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf683b8 <line:750:11> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf68818 <line:347:15, col:32> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf687f0 <col:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf687d8 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf683e0 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    `-ParenExpr 0x5590ecf687b8 <./lopcodes.h:84:21, col:63> 'int'
      `-ParenExpr 0x5590ecf68798 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecf68770 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecf68750 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecf686e0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecf68518 <line:84:32, col:43> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecf684f0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecf684d8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecf68430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
              |   |   `-DeclRefExpr 0x5590ecf68408 <lvm.c:750:19> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
              |   `-ParenExpr 0x5590ecf684b8 <./lopcodes.h:45:16, col:33> 'int'
              |     `-BinaryOperator 0x5590ecf68490 <line:44:17, line:42:18> 'int' '+'
              |       |-IntegerLiteral 0x5590ecf68450 <line:44:17> 'int' 0
              |       `-IntegerLiteral 0x5590ecf68470 <line:42:18> 'int' 6
              `-ParenExpr 0x5590ecf686c0 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecf68698 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecf68658 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecf68638 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecf68618 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecf685f0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecf685b0 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecf68590 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecf68568 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecf68538 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5590ecf685d0 <line:40:17> 'int' 8
                  `-IntegerLiteral 0x5590ecf68678 <line:84:60> 'int' 0
[B10.26] = ([B10.25])
  28: DeclRefExpr 0x5590ecf68888 <lvm.c:751:15> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
n
  29: ImplicitCastExpr 0x5590ecf688b0 <lvm.c:751:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68888 <col:15> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B10.28] (ImplicitCastExpr, LValueToRValue, int)
  30: DeclRefExpr 0x5590ecf68860 <lvm.c:751:11> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
b
  31: BinaryOperator 0x5590ecf688c8 <lvm.c:751:11, col:15> 'int' '='
|-DeclRefExpr 0x5590ecf68860 <col:11> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
`-ImplicitCastExpr 0x5590ecf688b0 <col:15> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68888 <col:15> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B10.30] = [B10.29]
  32: DeclRefExpr 0x5590ecf68968 <lvm.c:752:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  33: ImplicitCastExpr 0x5590ecf689b8 <lvm.c:752:20> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68968 <col:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B10.32] (ImplicitCastExpr, LValueToRValue, StkId)
  34: DeclRefExpr 0x5590ecf68990 <lvm.c:752:25> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
n
  35: ImplicitCastExpr 0x5590ecf689d0 <lvm.c:752:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68990 <col:25> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B10.34] (ImplicitCastExpr, LValueToRValue, int)
  36: BinaryOperator 0x5590ecf689e8 <lvm.c:752:20, col:25> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf689b8 <col:20> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf68968 <col:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf689d0 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68990 <col:25> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B10.33] + [B10.35]
  37: DeclRefExpr 0x5590ecf688f0 <lvm.c:752:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  38: ImplicitCastExpr 0x5590ecf68918 <lvm.c:752:11> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf688f0 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B10.37] (ImplicitCastExpr, LValueToRValue, lua_State *)
  39: MemberExpr 0x5590ecf68930 <lvm.c:752:11, col:14> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf68918 <col:11> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf688f0 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B10.38]->top
  40: BinaryOperator 0x5590ecf68a10 <lvm.c:752:11, col:25> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf68930 <col:11, col:14> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf68918 <col:11> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf688f0 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf689e8 <col:20, col:25> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf689b8 <col:20> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf68968 <col:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-ImplicitCastExpr 0x5590ecf689d0 <col:25> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf68990 <col:25> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B10.39] = [B10.36]
   Preds (2): B11 B12
   Succs (1): B9

 [B11]
   1: IntegerLiteral 0x5590ecf681a8 <./llimits.h:123:38> 'int' 0
0
   2: CStyleCastExpr 0x5590ecf681d8 <./llimits.h:123:32, col:38> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf681a8 <col:38> 'int' 0
(void)[B11.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B13
   Succs (1): B10

 [B12]
   1: DeclRefExpr 0x5590ecf680b0 <./ldo.h:18:5> 'void (lua_State *, int)' Function 0x5590eceaa8a8 'luaD_growstack' 'void (lua_State *, int)'
luaD_growstack
   2: ImplicitCastExpr 0x5590ecf68128 <./ldo.h:18:5> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf680b0 <col:5> 'void (lua_State *, int)' Function 0x5590eceaa8a8 'luaD_growstack' 'void (lua_State *, int)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int))
   3: DeclRefExpr 0x5590ecf680d8 <lvm.c:749:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf68178 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf680d8 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B12.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf68100 <lvm.c:749:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
n
   6: ImplicitCastExpr 0x5590ecf68190 <lvm.c:749:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf68100 <col:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B12.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x5590ecf68140 <./ldo.h:18:5, col:24> 'void'
|-ImplicitCastExpr 0x5590ecf68128 <col:5> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf680b0 <col:5> 'void (lua_State *, int)' Function 0x5590eceaa8a8 'luaD_growstack' 'void (lua_State *, int)'
|-ImplicitCastExpr 0x5590ecf68178 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf680d8 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf68190 <col:38> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf68100 <col:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
[B12.2]([B12.4], [B12.6])
   Preds (1): B13
   Succs (1): B10

 [B13]
   1: DeclRefExpr 0x5590ecf67d48 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf67d70 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67d48 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B13.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf67cd0 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf67cf8 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67cd0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf67d10 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf67cf8 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67cd0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.4]->savedpc
   6: BinaryOperator 0x5590ecf67d88 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf67d10 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf67cf8 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf67cd0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf67d70 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67d48 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B13.5] = [B13.2]
   7: DeclRefExpr 0x5590ecf67db0 <lvm.c:749:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   8: ImplicitCastExpr 0x5590ecf67dd8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67db0 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.7] (ImplicitCastExpr, LValueToRValue, lua_State *)
   9: MemberExpr 0x5590ecf67df0 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x5590ecea0298
`-ImplicitCastExpr 0x5590ecf67dd8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67db0 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.8]->stack_last
  10: ImplicitCastExpr 0x5590ecf67e40 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf67df0 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x5590ecea0298
  `-ImplicitCastExpr 0x5590ecf67dd8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf67db0 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.9] (ImplicitCastExpr, LValueToRValue, StkId)
  11: CStyleCastExpr 0x5590ecf67e58 <./ldo.h:17:7, col:18> 'char *' <BitCast>
`-ImplicitCastExpr 0x5590ecf67e40 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf67df0 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x5590ecea0298
    `-ImplicitCastExpr 0x5590ecf67dd8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf67db0 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
(char *)[B13.10] (CStyleCastExpr, BitCast, char *)
  12: DeclRefExpr 0x5590ecf67e80 <lvm.c:749:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  13: ImplicitCastExpr 0x5590ecf67ea8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67e80 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.12] (ImplicitCastExpr, LValueToRValue, lua_State *)
  14: MemberExpr 0x5590ecf67ec0 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf67ea8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67e80 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.13]->top
  15: ImplicitCastExpr 0x5590ecf67f10 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf67ec0 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
  `-ImplicitCastExpr 0x5590ecf67ea8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf67e80 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.14] (ImplicitCastExpr, LValueToRValue, StkId)
  16: CStyleCastExpr 0x5590ecf67f28 <./ldo.h:17:31, col:42> 'char *' <BitCast>
`-ImplicitCastExpr 0x5590ecf67f10 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf67ec0 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
    `-ImplicitCastExpr 0x5590ecf67ea8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf67e80 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
(char *)[B13.15] (CStyleCastExpr, BitCast, char *)
  17: BinaryOperator 0x5590ecf67f50 <./ldo.h:17:7, col:42> 'long' '-'
|-CStyleCastExpr 0x5590ecf67e58 <col:7, col:18> 'char *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf67e40 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
|   `-MemberExpr 0x5590ecf67df0 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x5590ecea0298
|     `-ImplicitCastExpr 0x5590ecf67dd8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf67db0 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-CStyleCastExpr 0x5590ecf67f28 <./ldo.h:17:31, col:42> 'char *' <BitCast>
  `-ImplicitCastExpr 0x5590ecf67f10 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x5590ecf67ec0 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
      `-ImplicitCastExpr 0x5590ecf67ea8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf67e80 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B13.11] - [B13.16]
  18: DeclRefExpr 0x5590ecf67f78 <lvm.c:749:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
n
  19: ImplicitCastExpr 0x5590ecf68030 <./ldo.h:17:49, col:51> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf67fa0 <col:49, col:51> 'int' lvalue
  `-DeclRefExpr 0x5590ecf67f78 <lvm.c:749:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
([B13.18]) (ImplicitCastExpr, LValueToRValue, int)
  20: UnaryExprOrTypeTraitExpr 0x5590ecf67fd0 <./ldo.h:17:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
sizeof(TValue)
  21: CStyleCastExpr 0x5590ecf68008 <./ldo.h:17:53, col:71> 'int' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x5590ecf67fd0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
(int)[B13.20] (CStyleCastExpr, IntegralCast, int)
  22: BinaryOperator 0x5590ecf68048 <./ldo.h:17:49, col:71> 'int' '*'
|-ImplicitCastExpr 0x5590ecf68030 <col:49, col:51> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf67fa0 <col:49, col:51> 'int' lvalue
|   `-DeclRefExpr 0x5590ecf67f78 <lvm.c:749:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
`-CStyleCastExpr 0x5590ecf68008 <./ldo.h:17:53, col:71> 'int' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x5590ecf67fd0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B13.19] * [B13.21]
  23: ImplicitCastExpr 0x5590ecf68070 <./ldo.h:17:49, col:71> 'long' <IntegralCast>
`-BinaryOperator 0x5590ecf68048 <col:49, col:71> 'int' '*'
  |-ImplicitCastExpr 0x5590ecf68030 <col:49, col:51> 'int' <LValueToRValue>
  | `-ParenExpr 0x5590ecf67fa0 <col:49, col:51> 'int' lvalue
  |   `-DeclRefExpr 0x5590ecf67f78 <lvm.c:749:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
  `-CStyleCastExpr 0x5590ecf68008 <./ldo.h:17:53, col:71> 'int' <IntegralCast>
    `-UnaryExprOrTypeTraitExpr 0x5590ecf67fd0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B13.22] (ImplicitCastExpr, IntegralCast, long)
  24: BinaryOperator 0x5590ecf68088 <./ldo.h:17:7, col:71> 'int' '<='
|-BinaryOperator 0x5590ecf67f50 <col:7, col:42> 'long' '-'
| |-CStyleCastExpr 0x5590ecf67e58 <col:7, col:18> 'char *' <BitCast>
| | `-ImplicitCastExpr 0x5590ecf67e40 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
| |   `-MemberExpr 0x5590ecf67df0 <lvm.c:749:35, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x5590ecea0298
| |     `-ImplicitCastExpr 0x5590ecf67dd8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
| |       `-DeclRefExpr 0x5590ecf67db0 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
| `-CStyleCastExpr 0x5590ecf67f28 <./ldo.h:17:31, col:42> 'char *' <BitCast>
|   `-ImplicitCastExpr 0x5590ecf67f10 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
|     `-MemberExpr 0x5590ecf67ec0 <lvm.c:749:35, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
|       `-ImplicitCastExpr 0x5590ecf67ea8 <lvm.c:749:35> 'lua_State *' <LValueToRValue>
|         `-DeclRefExpr 0x5590ecf67e80 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf68070 <./ldo.h:17:49, col:71> 'long' <IntegralCast>
  `-BinaryOperator 0x5590ecf68048 <col:49, col:71> 'int' '*'
    |-ImplicitCastExpr 0x5590ecf68030 <col:49, col:51> 'int' <LValueToRValue>
    | `-ParenExpr 0x5590ecf67fa0 <col:49, col:51> 'int' lvalue
    |   `-DeclRefExpr 0x5590ecf67f78 <lvm.c:749:38> 'int' lvalue Var 0x5590ecf67810 'n' 'int'
    `-CStyleCastExpr 0x5590ecf68008 <./ldo.h:17:53, col:71> 'int' <IntegralCast>
      `-UnaryExprOrTypeTraitExpr 0x5590ecf67fd0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B13.17] <= [B13.23]
   T: if [B13.24]
   Preds (1): B14
   Succs (2): B12 B11

 [B14]
  case OP_VARARG:
   1: DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf672f0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf67178 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B14.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf67198 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf671b8 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf671d8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
[B14.3] + [B14.4]
   6: IntegerLiteral 0x5590ecf67220 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf67240 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
([B14.5]) + [B14.6]
   8: IntegerLiteral 0x5590ecf67288 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf672a8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf67268 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf67240 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf67288 <line:37:17> 'int' 9
([B14.7]) + [B14.8]
  10: BinaryOperator 0x5590ecf67308 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf672f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf67178 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf672d0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf672a8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf67268 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf67240 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf67288 <line:37:17> 'int' 9
[B14.2] >> ([B14.9])
  11: IntegerLiteral 0x5590ecf67350 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf67380 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
(Instruction)[B14.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf673a8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
~[B14.12]
  14: IntegerLiteral 0x5590ecf673e8 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf67408 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
([B14.13]) << [B14.14]
  16: UnaryOperator 0x5590ecf67450 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf67430 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf67408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
~([B14.15])
  17: IntegerLiteral 0x5590ecf67490 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf674b0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf67470 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf67450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf67430 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf67408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf67490 <line:88:60> 'int' 0
([B14.16]) << [B14.17]
  19: BinaryOperator 0x5590ecf674f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf67330 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf67308 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf672f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf67178 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf672d0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf672a8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf67268 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf67240 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf67288 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf674d8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf674b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf67470 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf67450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf67430 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf67408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf67490 <line:88:60> 'int' 0
([B14.10]) & ([B14.18])
  20: CStyleCastExpr 0x5590ecf67588 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf67568 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf674f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf67330 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf67308 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf672f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf67178 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf672d0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf672a8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf67268 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf67240 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf67288 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf674d8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf674b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf67470 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf67450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf67430 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf67408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf67490 <line:88:60> 'int' 0
(int)([B14.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf675f0 <lvm.c:744:31> 'int' 1
1
  22: BinaryOperator 0x5590ecf67610 <./lopcodes.h:88:21, lvm.c:744:31> 'int' '-'
|-ParenExpr 0x5590ecf675d0 <./lopcodes.h:88:21, col:63> 'int'
| `-ParenExpr 0x5590ecf675b0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf67588 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf67568 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf674f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf67330 <line:88:32, col:43> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf67308 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf672f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf67178 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|         |   `-ParenExpr 0x5590ecf672d0 <./lopcodes.h:47:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf672a8 <line:46:16, line:37:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf67268 <line:46:16, col:31> 'int'
|         |       | `-BinaryOperator 0x5590ecf67240 <line:45:16, line:40:17> 'int' '+'
|         |       |   |-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
|         |       |   | `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
|         |       |   |   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
|         |       |   |   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
|         |       |   `-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
|         |       `-IntegerLiteral 0x5590ecf67288 <line:37:17> 'int' 9
|         `-ParenExpr 0x5590ecf674d8 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf674b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf67470 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf67450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf67430 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf67408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
|             |       `-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf67490 <line:88:60> 'int' 0
`-IntegerLiteral 0x5590ecf675f0 <lvm.c:744:31> 'int' 1
(([B14.20])) - [B14.21]
  23: DeclStmt 0x5590ecf67638 <lvm.c:744:9, col:32>col:13
`-VarDecl 0x5590ecf670f0 <col:9, col:31> col:13 used b 'int' cinit
  `-BinaryOperator 0x5590ecf67610 <./lopcodes.h:88:21, lvm.c:744:31> 'int' '-'
    |-ParenExpr 0x5590ecf675d0 <./lopcodes.h:88:21, col:63> 'int'
    | `-ParenExpr 0x5590ecf675b0 <./llimits.h:75:22, col:31> 'int'
    |   `-CStyleCastExpr 0x5590ecf67588 <col:23, col:30> 'int' <IntegralCast>
    |     `-ParenExpr 0x5590ecf67568 <col:26, col:30> 'unsigned int'
    |       `-BinaryOperator 0x5590ecf674f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |         |-ParenExpr 0x5590ecf67330 <line:88:32, col:43> 'Instruction':'unsigned int'
    |         | `-BinaryOperator 0x5590ecf67308 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |         |   |-ImplicitCastExpr 0x5590ecf672f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |         |   | `-ParenExpr 0x5590ecf67178 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |         |   |   `-DeclRefExpr 0x5590ecf67150 <lvm.c:744:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |         |   `-ParenExpr 0x5590ecf672d0 <./lopcodes.h:47:16, col:31> 'int'
    |         |     `-BinaryOperator 0x5590ecf672a8 <line:46:16, line:37:17> 'int' '+'
    |         |       |-ParenExpr 0x5590ecf67268 <line:46:16, col:31> 'int'
    |         |       | `-BinaryOperator 0x5590ecf67240 <line:45:16, line:40:17> 'int' '+'
    |         |       |   |-ParenExpr 0x5590ecf67200 <line:45:16, col:33> 'int'
    |         |       |   | `-BinaryOperator 0x5590ecf671d8 <line:44:17, line:42:18> 'int' '+'
    |         |       |   |   |-IntegerLiteral 0x5590ecf67198 <line:44:17> 'int' 0
    |         |       |   |   `-IntegerLiteral 0x5590ecf671b8 <line:42:18> 'int' 6
    |         |       |   `-IntegerLiteral 0x5590ecf67220 <line:40:17> 'int' 8
    |         |       `-IntegerLiteral 0x5590ecf67288 <line:37:17> 'int' 9
    |         `-ParenExpr 0x5590ecf674d8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |           `-BinaryOperator 0x5590ecf674b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |             |-ParenExpr 0x5590ecf67470 <line:71:21, col:45> 'Instruction':'unsigned int'
    |             | `-UnaryOperator 0x5590ecf67450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |             |   `-ParenExpr 0x5590ecf67430 <col:23, col:44> 'Instruction':'unsigned int'
    |             |     `-BinaryOperator 0x5590ecf67408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |             |       |-ParenExpr 0x5590ecf673c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |             |       | `-UnaryOperator 0x5590ecf673a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |             |       |   `-CStyleCastExpr 0x5590ecf67380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |             |       |     `-IntegerLiteral 0x5590ecf67350 <col:39> 'int' 0
    |             |       `-IntegerLiteral 0x5590ecf673e8 <line:38:17> 'int' 9
    |             `-IntegerLiteral 0x5590ecf67490 <line:88:60> 'int' 0
    `-IntegerLiteral 0x5590ecf675f0 <lvm.c:744:31> 'int' 1
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))) - 1;
  24: DeclStmt 0x5590ecf676c8 <lvm.c:745:9, col:14>col:13
`-VarDecl 0x5590ecf67668 <col:9, col:13> col:13 used j 'int'
int j;
  25: DeclRefExpr 0x5590ecf67750 <lvm.c:746:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  26: ImplicitCastExpr 0x5590ecf67778 <lvm.c:746:24> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67750 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B14.25] (ImplicitCastExpr, LValueToRValue, lua_State *)
  27: MemberExpr 0x5590ecf67790 <lvm.c:746:24, col:27> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf67778 <col:24> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67750 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B14.26]->ci
  28: ImplicitCastExpr 0x5590ecf677c8 <lvm.c:746:24, col:27> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecf67790 <col:24, col:27> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf67778 <col:24> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf67750 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B14.27] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  29: DeclStmt 0x5590ecf677e0 <lvm.c:746:9, col:29>col:19
`-VarDecl 0x5590ecf676f0 <col:9, col:27> col:19 used ci 'CallInfo *' cinit
  `-ImplicitCastExpr 0x5590ecf677c8 <col:24, col:27> 'CallInfo *' <LValueToRValue>
    `-MemberExpr 0x5590ecf67790 <col:24, col:27> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
      `-ImplicitCastExpr 0x5590ecf67778 <col:24> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf67750 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
CallInfo *ci = L->ci;
  30: DeclRefExpr 0x5590ecf67870 <lvm.c:747:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
ci
  31: ImplicitCastExpr 0x5590ecf67898 <lvm.c:747:26> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.30] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  32: MemberExpr 0x5590ecf678b0 <lvm.c:747:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
`-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.31]->base
  33: ImplicitCastExpr 0x5590ecf67960 <lvm.c:747:26, col:30> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf678b0 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
  `-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.32] (ImplicitCastExpr, LValueToRValue, StkId)
  34: DeclRefExpr 0x5590ecf678e8 <lvm.c:747:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
ci
  35: ImplicitCastExpr 0x5590ecf67910 <lvm.c:747:37> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.34] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  36: MemberExpr 0x5590ecf67928 <lvm.c:747:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
`-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.35]->func
  37: ImplicitCastExpr 0x5590ecf67978 <lvm.c:747:37, col:41> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf67928 <col:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
  `-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.36] (ImplicitCastExpr, LValueToRValue, StkId)
  38: BinaryOperator 0x5590ecf67990 <lvm.c:747:26, col:41> 'long' '-'
|-ImplicitCastExpr 0x5590ecf67960 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x5590ecf678b0 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
|   `-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x5590ecf67978 <col:37, col:41> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf67928 <col:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
    `-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
[B14.33] - [B14.37]
  39: CStyleCastExpr 0x5590ecf67a40 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf67a20 <col:26, col:30> 'long'
  `-ParenExpr 0x5590ecf679b8 <line:80:31, col:33> 'long'
    `-BinaryOperator 0x5590ecf67990 <lvm.c:747:26, col:41> 'long' '-'
      |-ImplicitCastExpr 0x5590ecf67960 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
      | `-MemberExpr 0x5590ecf678b0 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
      |   `-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
      |     `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
      `-ImplicitCastExpr 0x5590ecf67978 <col:37, col:41> 'StkId':'TValue *' <LValueToRValue>
        `-MemberExpr 0x5590ecf67928 <col:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
          `-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
            `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
(int)(([B14.38])) (CStyleCastExpr, IntegralCast, int)
  40: DeclRefExpr 0x5590ecf67a88 <lvm.c:747:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
  41: ImplicitCastExpr 0x5590ecf67ab0 <lvm.c:747:49> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B14.40] (ImplicitCastExpr, LValueToRValue, LClosure *)
  42: MemberExpr 0x5590ecf67ac8 <lvm.c:747:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
`-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B14.41]->p
  43: ImplicitCastExpr 0x5590ecf67b00 <lvm.c:747:49, col:53> 'struct Proto *' <LValueToRValue>
`-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
  `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B14.42] (ImplicitCastExpr, LValueToRValue, struct Proto *)
  44: MemberExpr 0x5590ecf67b18 <lvm.c:747:49, col:56> 'lu_byte':'unsigned char' lvalue ->numparams 0x5590ece8ceb0
`-ImplicitCastExpr 0x5590ecf67b00 <col:49, col:53> 'struct Proto *' <LValueToRValue>
  `-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
    `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B14.43]->numparams
  45: ImplicitCastExpr 0x5590ecf67b50 <lvm.c:747:49, col:56> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5590ecf67b18 <col:49, col:56> 'lu_byte':'unsigned char' lvalue ->numparams 0x5590ece8ceb0
  `-ImplicitCastExpr 0x5590ecf67b00 <col:49, col:53> 'struct Proto *' <LValueToRValue>
    `-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
      `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B14.44] (ImplicitCastExpr, LValueToRValue, lu_byte)
  46: ImplicitCastExpr 0x5590ecf67b68 <lvm.c:747:49, col:56> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf67b50 <col:49, col:56> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5590ecf67b18 <col:49, col:56> 'lu_byte':'unsigned char' lvalue ->numparams 0x5590ece8ceb0
    `-ImplicitCastExpr 0x5590ecf67b00 <col:49, col:53> 'struct Proto *' <LValueToRValue>
      `-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
        `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B14.45] (ImplicitCastExpr, IntegralCast, int)
  47: BinaryOperator 0x5590ecf67b80 <./llimits.h:75:22, lvm.c:747:56> 'int' '-'
|-ParenExpr 0x5590ecf67a68 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x5590ecf67a40 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x5590ecf67a20 <col:26, col:30> 'long'
|     `-ParenExpr 0x5590ecf679b8 <line:80:31, col:33> 'long'
|       `-BinaryOperator 0x5590ecf67990 <lvm.c:747:26, col:41> 'long' '-'
|         |-ImplicitCastExpr 0x5590ecf67960 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
|         | `-MemberExpr 0x5590ecf678b0 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
|         |   `-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
|         `-ImplicitCastExpr 0x5590ecf67978 <col:37, col:41> 'StkId':'TValue *' <LValueToRValue>
|           `-MemberExpr 0x5590ecf67928 <col:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
|             `-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
|               `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x5590ecf67b68 <col:49, col:56> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x5590ecf67b50 <col:49, col:56> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x5590ecf67b18 <col:49, col:56> 'lu_byte':'unsigned char' lvalue ->numparams 0x5590ece8ceb0
      `-ImplicitCastExpr 0x5590ecf67b00 <col:49, col:53> 'struct Proto *' <LValueToRValue>
        `-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
          `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
            `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
([B14.39]) - [B14.46]
  48: IntegerLiteral 0x5590ecf67ba8 <lvm.c:747:68> 'int' 1
1
  49: BinaryOperator 0x5590ecf67bc8 <./llimits.h:75:22, lvm.c:747:68> 'int' '-'
|-BinaryOperator 0x5590ecf67b80 <./llimits.h:75:22, lvm.c:747:56> 'int' '-'
| |-ParenExpr 0x5590ecf67a68 <./llimits.h:75:22, col:31> 'int'
| | `-CStyleCastExpr 0x5590ecf67a40 <col:23, col:30> 'int' <IntegralCast>
| |   `-ParenExpr 0x5590ecf67a20 <col:26, col:30> 'long'
| |     `-ParenExpr 0x5590ecf679b8 <line:80:31, col:33> 'long'
| |       `-BinaryOperator 0x5590ecf67990 <lvm.c:747:26, col:41> 'long' '-'
| |         |-ImplicitCastExpr 0x5590ecf67960 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
| |         | `-MemberExpr 0x5590ecf678b0 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
| |         |   `-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
| |         |     `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
| |         `-ImplicitCastExpr 0x5590ecf67978 <col:37, col:41> 'StkId':'TValue *' <LValueToRValue>
| |           `-MemberExpr 0x5590ecf67928 <col:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
| |             `-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
| |               `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
| `-ImplicitCastExpr 0x5590ecf67b68 <col:49, col:56> 'int' <IntegralCast>
|   `-ImplicitCastExpr 0x5590ecf67b50 <col:49, col:56> 'lu_byte':'unsigned char' <LValueToRValue>
|     `-MemberExpr 0x5590ecf67b18 <col:49, col:56> 'lu_byte':'unsigned char' lvalue ->numparams 0x5590ece8ceb0
|       `-ImplicitCastExpr 0x5590ecf67b00 <col:49, col:53> 'struct Proto *' <LValueToRValue>
|         `-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
|           `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
|             `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
`-IntegerLiteral 0x5590ecf67ba8 <col:68> 'int' 1
[B14.47] - [B14.48]
  50: DeclStmt 0x5590ecf67bf0 <lvm.c:747:9, col:69>col:13
`-VarDecl 0x5590ecf67810 <col:9, col:68> col:13 used n 'int' cinit
  `-BinaryOperator 0x5590ecf67bc8 <./llimits.h:75:22, lvm.c:747:68> 'int' '-'
    |-BinaryOperator 0x5590ecf67b80 <./llimits.h:75:22, lvm.c:747:56> 'int' '-'
    | |-ParenExpr 0x5590ecf67a68 <./llimits.h:75:22, col:31> 'int'
    | | `-CStyleCastExpr 0x5590ecf67a40 <col:23, col:30> 'int' <IntegralCast>
    | |   `-ParenExpr 0x5590ecf67a20 <col:26, col:30> 'long'
    | |     `-ParenExpr 0x5590ecf679b8 <line:80:31, col:33> 'long'
    | |       `-BinaryOperator 0x5590ecf67990 <lvm.c:747:26, col:41> 'long' '-'
    | |         |-ImplicitCastExpr 0x5590ecf67960 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
    | |         | `-MemberExpr 0x5590ecf678b0 <col:26, col:30> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
    | |         |   `-ImplicitCastExpr 0x5590ecf67898 <col:26> 'CallInfo *' <LValueToRValue>
    | |         |     `-DeclRefExpr 0x5590ecf67870 <col:26> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
    | |         `-ImplicitCastExpr 0x5590ecf67978 <col:37, col:41> 'StkId':'TValue *' <LValueToRValue>
    | |           `-MemberExpr 0x5590ecf67928 <col:37, col:41> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
    | |             `-ImplicitCastExpr 0x5590ecf67910 <col:37> 'CallInfo *' <LValueToRValue>
    | |               `-DeclRefExpr 0x5590ecf678e8 <col:37> 'CallInfo *' lvalue Var 0x5590ecf676f0 'ci' 'CallInfo *'
    | `-ImplicitCastExpr 0x5590ecf67b68 <col:49, col:56> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5590ecf67b50 <col:49, col:56> 'lu_byte':'unsigned char' <LValueToRValue>
    |     `-MemberExpr 0x5590ecf67b18 <col:49, col:56> 'lu_byte':'unsigned char' lvalue ->numparams 0x5590ece8ceb0
    |       `-ImplicitCastExpr 0x5590ecf67b00 <col:49, col:53> 'struct Proto *' <LValueToRValue>
    |         `-MemberExpr 0x5590ecf67ac8 <col:49, col:53> 'struct Proto *' lvalue ->p 0x5590ece8fe98
    |           `-ImplicitCastExpr 0x5590ecf67ab0 <col:49> 'LClosure *' <LValueToRValue>
    |             `-DeclRefExpr 0x5590ecf67a88 <col:49> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
    `-IntegerLiteral 0x5590ecf67ba8 <col:68> 'int' 1
int n = ((int)((ci->base - ci->func))) - cl->p->numparams - 1;
  51: DeclRefExpr 0x5590ecf67c08 <lvm.c:748:13> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
b
  52: ImplicitCastExpr 0x5590ecf67c90 <lvm.c:748:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf67c08 <col:13> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
[B14.51] (ImplicitCastExpr, LValueToRValue, int)
  53: IntegerLiteral 0x5590ecf67c30 <./lua.h:30:23> 'int' 1
1
  54: UnaryOperator 0x5590ecf67c50 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x5590ecf67c30 <col:23> 'int' 1
-[B14.53]
  55: BinaryOperator 0x5590ecf67ca8 <lvm.c:748:13, ./lua.h:30:24> 'int' '=='
|-ImplicitCastExpr 0x5590ecf67c90 <lvm.c:748:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf67c08 <col:13> 'int' lvalue Var 0x5590ecf670f0 'b' 'int'
`-ParenExpr 0x5590ecf67c70 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x5590ecf67c50 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x5590ecf67c30 <col:23> 'int' 1
[B14.52] == ([B14.54])
   T: if [B14.55]
   Preds (1): B2
   Succs (2): B13 B9

 [B15]
   1: DeclRefExpr 0x5590ecf66ee0 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf66f08 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66ee0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B15.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf66f20 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf66f08 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66ee0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B15.2]->base
   4: ImplicitCastExpr 0x5590ecf66f58 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf66f20 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf66f08 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf66ee0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B15.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf66eb8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf66f70 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf66eb8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf66f58 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf66f20 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf66f08 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf66ee0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B15.5] = [B15.4]
   T: continue;
   Preds (2): B16 B17
   Succs (1): B1

 [B16]
   1: DeclRefExpr 0x5590ecf66d70 <./lgc.h:83:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
luaC_step
   2: ImplicitCastExpr 0x5590ecf66dc0 <./lgc.h:83:2> 'void (*)(lua_State *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf66d70 <col:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
[B16.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *))
   3: DeclRefExpr 0x5590ecf66d98 <lvm.c:740:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf66e08 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66d98 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B16.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: CallExpr 0x5590ecf66dd8 <./lgc.h:83:2, col:13> 'void'
|-ImplicitCastExpr 0x5590ecf66dc0 <col:2> 'void (*)(lua_State *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf66d70 <col:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
`-ImplicitCastExpr 0x5590ecf66e08 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66d98 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B16.2]([B16.4])
   Preds (1): B17
   Succs (1): B15

 [B17]
   1: DeclRefExpr 0x5590ecf66620 <lvm.c:739:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf66668 <./lobject.h:144:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf66648 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf66620 <lvm.c:739:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B17.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclStmt 0x5590ecf66680 <./lobject.h:144:5, col:22>col:13
`-VarDecl 0x5590ecf665c0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf66668 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf66648 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf66620 <lvm.c:739:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
   4: DeclRefExpr 0x5590ecf66748 <lvm.c:739:27> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
ncl
   5: ImplicitCastExpr 0x5590ecf667f0 <./llimits.h:75:26, col:30> 'Closure *' <LValueToRValue>
`-ParenExpr 0x5590ecf667d0 <col:26, col:30> 'Closure *' lvalue
  `-ParenExpr 0x5590ecf66770 <./lobject.h:145:36, col:38> 'Closure *' lvalue
    `-DeclRefExpr 0x5590ecf66748 <lvm.c:739:27> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
(([B17.4])) (ImplicitCastExpr, LValueToRValue, Closure *)
   6: CStyleCastExpr 0x5590ecf66808 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x5590ecf667f0 <col:26, col:30> 'Closure *' <LValueToRValue>
  `-ParenExpr 0x5590ecf667d0 <col:26, col:30> 'Closure *' lvalue
    `-ParenExpr 0x5590ecf66770 <./lobject.h:145:36, col:38> 'Closure *' lvalue
      `-DeclRefExpr 0x5590ecf66748 <lvm.c:739:27> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
(GCObject *)[B17.5] (CStyleCastExpr, BitCast, GCObject *)
   7: DeclRefExpr 0x5590ecf66698 <./lobject.h:145:5> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
i_o
   8: ImplicitCastExpr 0x5590ecf666c0 <./lobject.h:145:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66698 <col:5> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
[B17.7] (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf666d8 <./lobject.h:145:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf666c0 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66698 <col:5> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
[B17.8]->value
  10: MemberExpr 0x5590ecf66710 <./lobject.h:145:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf666d8 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf666c0 <col:5> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf66698 <col:5> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
[B17.9].gc
  11: BinaryOperator 0x5590ecf66850 <./lobject.h:145:5, ./llimits.h:75:31> 'GCObject *' '='
|-MemberExpr 0x5590ecf66710 <./lobject.h:145:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
| `-MemberExpr 0x5590ecf666d8 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf666c0 <col:5> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf66698 <col:5> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf66830 <./llimits.h:75:22, col:31> 'GCObject *'
  `-CStyleCastExpr 0x5590ecf66808 <col:23, col:30> 'GCObject *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf667f0 <col:26, col:30> 'Closure *' <LValueToRValue>
      `-ParenExpr 0x5590ecf667d0 <col:26, col:30> 'Closure *' lvalue
        `-ParenExpr 0x5590ecf66770 <./lobject.h:145:36, col:38> 'Closure *' lvalue
          `-DeclRefExpr 0x5590ecf66748 <lvm.c:739:27> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B17.10] = ([B17.6])
  12: IntegerLiteral 0x5590ecf668f0 <./lua.h:80:24> 'int' 6
6
  13: DeclRefExpr 0x5590ecf66878 <./lobject.h:145:42> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
i_o
  14: ImplicitCastExpr 0x5590ecf668a0 <./lobject.h:145:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66878 <col:42> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
[B17.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: MemberExpr 0x5590ecf668b8 <./lobject.h:145:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf668a0 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66878 <col:42> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
[B17.14]->tt
  16: BinaryOperator 0x5590ecf66910 <./lobject.h:145:42, ./lua.h:80:24> 'int' '='
|-MemberExpr 0x5590ecf668b8 <./lobject.h:145:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf668a0 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf66878 <col:42> 'TValue *' lvalue Var 0x5590ecf665c0 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf668f0 <./lua.h:80:24> 'int' 6
[B17.15] = [B17.12]
  17: IntegerLiteral 0x5590ecf66938 <./llimits.h:62:31> 'int' 0
0
  18: CStyleCastExpr 0x5590ecf66968 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf66938 <col:31> 'int' 0
(void)[B17.17] (CStyleCastExpr, ToVoid, void)
  19: DeclRefExpr 0x5590ecf66a68 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  20: ImplicitCastExpr 0x5590ecf66a90 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66a68 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B17.19] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  21: DeclRefExpr 0x5590ecf669f0 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  22: ImplicitCastExpr 0x5590ecf66a18 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf669f0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.21] (ImplicitCastExpr, LValueToRValue, lua_State *)
  23: MemberExpr 0x5590ecf66a30 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf66a18 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf669f0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.22]->savedpc
  24: BinaryOperator 0x5590ecf66aa8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf66a30 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf66a18 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf669f0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf66a90 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66a68 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B17.23] = [B17.20]
  25: IntegerLiteral 0x5590ecf66ad0 <./llimits.h:123:38> 'int' 0
0
  26: CStyleCastExpr 0x5590ecf66b00 <./llimits.h:123:32, col:38> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf66ad0 <col:38> 'int' 0
(void)[B17.25] (CStyleCastExpr, ToVoid, void)
  27: DeclRefExpr 0x5590ecf66b48 <lvm.c:740:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  28: ImplicitCastExpr 0x5590ecf66b70 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66b48 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.27] (ImplicitCastExpr, LValueToRValue, lua_State *)
  29: MemberExpr 0x5590ecf66b88 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
`-ImplicitCastExpr 0x5590ecf66b70 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66b48 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.28]->l_G
  30: ImplicitCastExpr 0x5590ecf66be0 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
`-ParenExpr 0x5590ecf66bc0 <col:14, col:21> 'global_State *' lvalue
  `-MemberExpr 0x5590ecf66b88 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
    `-ImplicitCastExpr 0x5590ecf66b70 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf66b48 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B17.29]) (ImplicitCastExpr, LValueToRValue, global_State *)
  31: MemberExpr 0x5590ecf66bf8 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
`-ImplicitCastExpr 0x5590ecf66be0 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
  `-ParenExpr 0x5590ecf66bc0 <col:14, col:21> 'global_State *' lvalue
    `-MemberExpr 0x5590ecf66b88 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
      `-ImplicitCastExpr 0x5590ecf66b70 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf66b48 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.30]->totalbytes
  32: ImplicitCastExpr 0x5590ecf66d18 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' <LValueToRValue>
`-MemberExpr 0x5590ecf66bf8 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
  `-ImplicitCastExpr 0x5590ecf66be0 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
    `-ParenExpr 0x5590ecf66bc0 <col:14, col:21> 'global_State *' lvalue
      `-MemberExpr 0x5590ecf66b88 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
        `-ImplicitCastExpr 0x5590ecf66b70 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf66b48 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.31] (ImplicitCastExpr, LValueToRValue, lu_mem)
  33: DeclRefExpr 0x5590ecf66c30 <lvm.c:740:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  34: ImplicitCastExpr 0x5590ecf66c58 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf66c30 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.33] (ImplicitCastExpr, LValueToRValue, lua_State *)
  35: MemberExpr 0x5590ecf66c70 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
`-ImplicitCastExpr 0x5590ecf66c58 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf66c30 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.34]->l_G
  36: ImplicitCastExpr 0x5590ecf66cc8 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
`-ParenExpr 0x5590ecf66ca8 <col:14, col:21> 'global_State *' lvalue
  `-MemberExpr 0x5590ecf66c70 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
    `-ImplicitCastExpr 0x5590ecf66c58 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf66c30 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B17.35]) (ImplicitCastExpr, LValueToRValue, global_State *)
  37: MemberExpr 0x5590ecf66ce0 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
`-ImplicitCastExpr 0x5590ecf66cc8 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
  `-ParenExpr 0x5590ecf66ca8 <col:14, col:21> 'global_State *' lvalue
    `-MemberExpr 0x5590ecf66c70 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
      `-ImplicitCastExpr 0x5590ecf66c58 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf66c30 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.36]->GCthreshold
  38: ImplicitCastExpr 0x5590ecf66d30 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' <LValueToRValue>
`-MemberExpr 0x5590ecf66ce0 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
  `-ImplicitCastExpr 0x5590ecf66cc8 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
    `-ParenExpr 0x5590ecf66ca8 <col:14, col:21> 'global_State *' lvalue
      `-MemberExpr 0x5590ecf66c70 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
        `-ImplicitCastExpr 0x5590ecf66c58 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf66c30 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.37] (ImplicitCastExpr, LValueToRValue, lu_mem)
  39: BinaryOperator 0x5590ecf66d48 <./lstate.h:130:14, ./lgc.h:82:33> 'int' '>='
|-ImplicitCastExpr 0x5590ecf66d18 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' <LValueToRValue>
| `-MemberExpr 0x5590ecf66bf8 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
|   `-ImplicitCastExpr 0x5590ecf66be0 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
|     `-ParenExpr 0x5590ecf66bc0 <col:14, col:21> 'global_State *' lvalue
|       `-MemberExpr 0x5590ecf66b88 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
|         `-ImplicitCastExpr 0x5590ecf66b70 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
|           `-DeclRefExpr 0x5590ecf66b48 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf66d30 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' <LValueToRValue>
  `-MemberExpr 0x5590ecf66ce0 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
    `-ImplicitCastExpr 0x5590ecf66cc8 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
      `-ParenExpr 0x5590ecf66ca8 <col:14, col:21> 'global_State *' lvalue
        `-MemberExpr 0x5590ecf66c70 <lvm.c:740:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
          `-ImplicitCastExpr 0x5590ecf66c58 <lvm.c:740:30> 'lua_State *' <LValueToRValue>
            `-DeclRefExpr 0x5590ecf66c30 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B17.32] >= [B17.38]
   T: if [B17.39]
   Preds (1): B22
   Succs (2): B16 B15

 [B18]
   1: DeclRefExpr 0x5590ecf65110 <lvm.c:731:26> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
j
   2: UnaryOperator 0x5590ecf65138 <lvm.c:731:26, col:27> 'int' postfix '++'
`-DeclRefExpr 0x5590ecf65110 <col:26> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
[B18.1]++
   3: DeclRefExpr 0x5590ecf65158 <lvm.c:731:31> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   4: UnaryOperator 0x5590ecf65180 <lvm.c:731:31, col:33> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf65158 <col:31> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B18.3]++
   5: BinaryOperator 0x5590ecf651a0 <lvm.c:731:26, col:33> 'const Instruction *' ','
|-UnaryOperator 0x5590ecf65138 <col:26, col:27> 'int' postfix '++'
| `-DeclRefExpr 0x5590ecf65110 <col:26> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
`-UnaryOperator 0x5590ecf65180 <col:31, col:33> 'const Instruction *' postfix '++'
  `-DeclRefExpr 0x5590ecf65158 <col:31> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
... , [B18.4]
   Preds (2): B19 B20
   Succs (1): B22

 [B19]
   1: IntegerLiteral 0x5590ecf65ce0 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5590ecf65d10 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf65ce0 <col:31> 'int' 0
(void)[B19.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5590ecf65e88 <lvm.c:736:32> 'UpVal *(lua_State *, StkId)' Function 0x5590eceafb30 'luaF_findupval' 'UpVal *(lua_State *, StkId)'
luaF_findupval
   4: ImplicitCastExpr 0x5590ecf66478 <lvm.c:736:32> 'UpVal *(*)(lua_State *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf65e88 <col:32> 'UpVal *(lua_State *, StkId)' Function 0x5590eceafb30 'luaF_findupval' 'UpVal *(lua_State *, StkId)'
[B19.3] (ImplicitCastExpr, FunctionToPointerDecay, UpVal *(*)(lua_State *, StkId))
   5: DeclRefExpr 0x5590ecf65eb0 <lvm.c:736:47> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x5590ecf664c8 <lvm.c:736:47> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65eb0 <col:47> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B19.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: DeclRefExpr 0x5590ecf65ed8 <lvm.c:736:50> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   8: ImplicitCastExpr 0x5590ecf663d8 <lvm.c:736:50> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65ed8 <col:50> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B19.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclRefExpr 0x5590ecf65f00 <lvm.c:736:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  10: ImplicitCastExpr 0x5590ecf65f28 <lvm.c:736:67> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B19.9] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  11: UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B19.10]
  12: ImplicitCastExpr 0x5590ecf660d8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B19.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x5590ecf65f80 <./lopcodes.h:44:17> 'int' 0
0
  14: IntegerLiteral 0x5590ecf65fa0 <./lopcodes.h:42:18> 'int' 6
6
  15: BinaryOperator 0x5590ecf65fc0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
[B19.13] + [B19.14]
  16: IntegerLiteral 0x5590ecf66008 <./lopcodes.h:40:17> 'int' 8
8
  17: BinaryOperator 0x5590ecf66028 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
([B19.15]) + [B19.16]
  18: IntegerLiteral 0x5590ecf66070 <./lopcodes.h:37:17> 'int' 9
9
  19: BinaryOperator 0x5590ecf66090 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
([B19.17]) + [B19.18]
  20: BinaryOperator 0x5590ecf660f0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf660d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf660b8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf66090 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
[B19.12] >> ([B19.19])
  21: IntegerLiteral 0x5590ecf66138 <./lopcodes.h:71:39> 'int' 0
0
  22: CStyleCastExpr 0x5590ecf66168 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
(Instruction)[B19.21] (CStyleCastExpr, IntegralCast, Instruction)
  23: UnaryOperator 0x5590ecf66190 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
~[B19.22]
  24: IntegerLiteral 0x5590ecf661d0 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5590ecf661f0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
([B19.23]) << [B19.24]
  26: UnaryOperator 0x5590ecf66238 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
~([B19.25])
  27: IntegerLiteral 0x5590ecf66278 <./lopcodes.h:88:60> 'int' 0
0
  28: BinaryOperator 0x5590ecf66298 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf66258 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf66238 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf66278 <line:88:60> 'int' 0
([B19.26]) << [B19.27]
  29: BinaryOperator 0x5590ecf662e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf66118 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf660f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf660d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf660b8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf66090 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf662c0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf66298 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf66258 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf66238 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf66278 <line:88:60> 'int' 0
([B19.20]) & ([B19.28])
  30: CStyleCastExpr 0x5590ecf66370 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf66350 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf662e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf66118 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf660f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf660d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf660b8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf66090 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf662c0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf66298 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf66258 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf66238 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf66278 <line:88:60> 'int' 0
(int)([B19.29]) (CStyleCastExpr, IntegralCast, int)
  31: BinaryOperator 0x5590ecf663f0 <lvm.c:736:50, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf663d8 <lvm.c:736:50> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf65ed8 <col:50> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf663b8 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf66398 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf66370 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf66350 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf662e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf66118 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf660f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf660d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
          |   |     `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
          |   |       `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
          |   `-ParenExpr 0x5590ecf660b8 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf66090 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf662c0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf66298 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf66258 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf66238 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf66278 <line:88:60> 'int' 0
[B19.8] + (([B19.30]))
  32: CallExpr 0x5590ecf66490 <lvm.c:736:32, col:70> 'UpVal *'
|-ImplicitCastExpr 0x5590ecf66478 <col:32> 'UpVal *(*)(lua_State *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf65e88 <col:32> 'UpVal *(lua_State *, StkId)' Function 0x5590eceafb30 'luaF_findupval' 'UpVal *(lua_State *, StkId)'
|-ImplicitCastExpr 0x5590ecf664c8 <col:47> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf65eb0 <col:47> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf663f0 <col:50, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf663d8 <lvm.c:736:50> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf65ed8 <col:50> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf663b8 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf66398 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf66370 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf66350 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf662e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf66118 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf660f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf660d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
            |   |     `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
            |   |       `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
            |   `-ParenExpr 0x5590ecf660b8 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf66090 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf662c0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf66298 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf66258 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf66238 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf66278 <line:88:60> 'int' 0
[B19.4]([B19.6], [B19.31])
  33: DeclRefExpr 0x5590ecf65d58 <lvm.c:736:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
ncl
  34: ImplicitCastExpr 0x5590ecf65d80 <lvm.c:736:13> 'Closure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65d58 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B19.33] (ImplicitCastExpr, LValueToRValue, Closure *)
  35: MemberExpr 0x5590ecf65d98 <lvm.c:736:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
`-ImplicitCastExpr 0x5590ecf65d80 <col:13> 'Closure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65d58 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B19.34]->l
  36: MemberExpr 0x5590ecf65dd0 <lvm.c:736:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
`-MemberExpr 0x5590ecf65d98 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
  `-ImplicitCastExpr 0x5590ecf65d80 <col:13> 'Closure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf65d58 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B19.35].upvals
  37: ImplicitCastExpr 0x5590ecf65e30 <lvm.c:736:13, col:20> 'UpVal **' <ArrayToPointerDecay>
`-MemberExpr 0x5590ecf65dd0 <col:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
  `-MemberExpr 0x5590ecf65d98 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
    `-ImplicitCastExpr 0x5590ecf65d80 <col:13> 'Closure *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf65d58 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B19.36] (ImplicitCastExpr, ArrayToPointerDecay, UpVal **)
  38: DeclRefExpr 0x5590ecf65e08 <lvm.c:736:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
j
  39: ImplicitCastExpr 0x5590ecf65e48 <lvm.c:736:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65e08 <col:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
[B19.38] (ImplicitCastExpr, LValueToRValue, int)
  40: ArraySubscriptExpr 0x5590ecf65e60 <lvm.c:736:13, col:28> 'UpVal *' lvalue
|-ImplicitCastExpr 0x5590ecf65e30 <col:13, col:20> 'UpVal **' <ArrayToPointerDecay>
| `-MemberExpr 0x5590ecf65dd0 <col:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
|   `-MemberExpr 0x5590ecf65d98 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
|     `-ImplicitCastExpr 0x5590ecf65d80 <col:13> 'Closure *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf65d58 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
`-ImplicitCastExpr 0x5590ecf65e48 <col:27> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65e08 <col:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
[B19.37][[B19.39]]
  41: BinaryOperator 0x5590ecf664e0 <lvm.c:736:13, col:70> 'UpVal *' '='
|-ArraySubscriptExpr 0x5590ecf65e60 <col:13, col:28> 'UpVal *' lvalue
| |-ImplicitCastExpr 0x5590ecf65e30 <col:13, col:20> 'UpVal **' <ArrayToPointerDecay>
| | `-MemberExpr 0x5590ecf65dd0 <col:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
| |   `-MemberExpr 0x5590ecf65d98 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
| |     `-ImplicitCastExpr 0x5590ecf65d80 <col:13> 'Closure *' <LValueToRValue>
| |       `-DeclRefExpr 0x5590ecf65d58 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
| `-ImplicitCastExpr 0x5590ecf65e48 <col:27> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf65e08 <col:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
`-CallExpr 0x5590ecf66490 <col:32, col:70> 'UpVal *'
  |-ImplicitCastExpr 0x5590ecf66478 <col:32> 'UpVal *(*)(lua_State *, StkId)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf65e88 <col:32> 'UpVal *(lua_State *, StkId)' Function 0x5590eceafb30 'luaF_findupval' 'UpVal *(lua_State *, StkId)'
  |-ImplicitCastExpr 0x5590ecf664c8 <col:47> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf65eb0 <col:47> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  `-BinaryOperator 0x5590ecf663f0 <col:50, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf663d8 <lvm.c:736:50> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf65ed8 <col:50> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    `-ParenExpr 0x5590ecf663b8 <./lopcodes.h:88:21, col:63> 'int'
      `-ParenExpr 0x5590ecf66398 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecf66370 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecf66350 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecf662e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecf66118 <line:88:32, col:43> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecf660f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecf660d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecf65f60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
              |   |   `-UnaryOperator 0x5590ecf65f40 <lvm.c:736:66, col:67> 'const Instruction':'const unsigned int' lvalue prefix '*'
              |   |     `-ImplicitCastExpr 0x5590ecf65f28 <col:67> 'const Instruction *' <LValueToRValue>
              |   |       `-DeclRefExpr 0x5590ecf65f00 <col:67> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
              |   `-ParenExpr 0x5590ecf660b8 <./lopcodes.h:47:16, col:31> 'int'
              |     `-BinaryOperator 0x5590ecf66090 <line:46:16, line:37:17> 'int' '+'
              |       |-ParenExpr 0x5590ecf66050 <line:46:16, col:31> 'int'
              |       | `-BinaryOperator 0x5590ecf66028 <line:45:16, line:40:17> 'int' '+'
              |       |   |-ParenExpr 0x5590ecf65fe8 <line:45:16, col:33> 'int'
              |       |   | `-BinaryOperator 0x5590ecf65fc0 <line:44:17, line:42:18> 'int' '+'
              |       |   |   |-IntegerLiteral 0x5590ecf65f80 <line:44:17> 'int' 0
              |       |   |   `-IntegerLiteral 0x5590ecf65fa0 <line:42:18> 'int' 6
              |       |   `-IntegerLiteral 0x5590ecf66008 <line:40:17> 'int' 8
              |       `-IntegerLiteral 0x5590ecf66070 <line:37:17> 'int' 9
              `-ParenExpr 0x5590ecf662c0 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecf66298 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecf66258 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecf66238 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecf66218 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecf661f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecf661b0 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecf66190 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecf66168 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecf66138 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5590ecf661d0 <line:38:17> 'int' 9
                  `-IntegerLiteral 0x5590ecf66278 <line:88:60> 'int' 0
[B19.40] = [B19.32]
   Preds (1): B21
   Succs (1): B18

 [B20]
   1: DeclRefExpr 0x5590ecf65710 <lvm.c:733:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
   2: ImplicitCastExpr 0x5590ecf65738 <lvm.c:733:32> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65710 <col:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B20.1] (ImplicitCastExpr, LValueToRValue, LClosure *)
   3: MemberExpr 0x5590ecf65750 <lvm.c:733:32, col:36> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
`-ImplicitCastExpr 0x5590ecf65738 <col:32> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65710 <col:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B20.2]->upvals
   4: ImplicitCastExpr 0x5590ecf65c60 <lvm.c:733:32, col:36> 'UpVal **' <ArrayToPointerDecay>
`-MemberExpr 0x5590ecf65750 <col:32, col:36> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
  `-ImplicitCastExpr 0x5590ecf65738 <col:32> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf65710 <col:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B20.3] (ImplicitCastExpr, ArrayToPointerDecay, UpVal **)
   5: DeclRefExpr 0x5590ecf65788 <lvm.c:733:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   6: ImplicitCastExpr 0x5590ecf657b0 <lvm.c:733:53> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B20.5] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   7: UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B20.6]
   8: ImplicitCastExpr 0x5590ecf65960 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B20.7]) (ImplicitCastExpr, LValueToRValue, Instruction)
   9: IntegerLiteral 0x5590ecf65808 <./lopcodes.h:44:17> 'int' 0
0
  10: IntegerLiteral 0x5590ecf65828 <./lopcodes.h:42:18> 'int' 6
6
  11: BinaryOperator 0x5590ecf65848 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
[B20.9] + [B20.10]
  12: IntegerLiteral 0x5590ecf65890 <./lopcodes.h:40:17> 'int' 8
8
  13: BinaryOperator 0x5590ecf658b0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
([B20.11]) + [B20.12]
  14: IntegerLiteral 0x5590ecf658f8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf65918 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
([B20.13]) + [B20.14]
  16: BinaryOperator 0x5590ecf65978 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf65960 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf65940 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf65918 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
[B20.8] >> ([B20.15])
  17: IntegerLiteral 0x5590ecf659c0 <./lopcodes.h:71:39> 'int' 0
0
  18: CStyleCastExpr 0x5590ecf659f0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
(Instruction)[B20.17] (CStyleCastExpr, IntegralCast, Instruction)
  19: UnaryOperator 0x5590ecf65a18 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
~[B20.18]
  20: IntegerLiteral 0x5590ecf65a58 <./lopcodes.h:38:17> 'int' 9
9
  21: BinaryOperator 0x5590ecf65a78 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
([B20.19]) << [B20.20]
  22: UnaryOperator 0x5590ecf65ac0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
~([B20.21])
  23: IntegerLiteral 0x5590ecf65b00 <./lopcodes.h:88:60> 'int' 0
0
  24: BinaryOperator 0x5590ecf65b20 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf65ae0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf65ac0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf65b00 <line:88:60> 'int' 0
([B20.22]) << [B20.23]
  25: BinaryOperator 0x5590ecf65b68 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf659a0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf65978 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf65960 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf65940 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf65918 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf65b48 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf65b20 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf65ae0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf65ac0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf65b00 <line:88:60> 'int' 0
([B20.16]) & ([B20.24])
  26: CStyleCastExpr 0x5590ecf65bf8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf65bd8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf65b68 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf659a0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf65978 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf65960 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf65940 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf65918 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf65b48 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf65b20 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf65ae0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf65ac0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf65b00 <line:88:60> 'int' 0
(int)([B20.25]) (CStyleCastExpr, IntegralCast, int)
  27: ArraySubscriptExpr 0x5590ecf65c78 <lvm.c:733:32, col:56> 'UpVal *' lvalue
|-ImplicitCastExpr 0x5590ecf65c60 <col:32, col:36> 'UpVal **' <ArrayToPointerDecay>
| `-MemberExpr 0x5590ecf65750 <col:32, col:36> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
|   `-ImplicitCastExpr 0x5590ecf65738 <col:32> 'LClosure *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf65710 <col:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
`-ParenExpr 0x5590ecf65c40 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf65c20 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf65bf8 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf65bd8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf65b68 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf659a0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf65978 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf65960 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
          |   |     `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
          |   |       `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
          |   `-ParenExpr 0x5590ecf65940 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf65918 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf65b48 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf65b20 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf65ae0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf65ac0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf65b00 <line:88:60> 'int' 0
[B20.4][(([B20.26]))]
  28: ImplicitCastExpr 0x5590ecf65ca0 <lvm.c:733:32, col:56> 'UpVal *' <LValueToRValue>
`-ArraySubscriptExpr 0x5590ecf65c78 <col:32, col:56> 'UpVal *' lvalue
  |-ImplicitCastExpr 0x5590ecf65c60 <col:32, col:36> 'UpVal **' <ArrayToPointerDecay>
  | `-MemberExpr 0x5590ecf65750 <col:32, col:36> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
  |   `-ImplicitCastExpr 0x5590ecf65738 <col:32> 'LClosure *' <LValueToRValue>
  |     `-DeclRefExpr 0x5590ecf65710 <col:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
  `-ParenExpr 0x5590ecf65c40 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf65c20 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf65bf8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf65bd8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf65b68 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf659a0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf65978 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf65960 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
            |   |     `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
            |   |       `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
            |   `-ParenExpr 0x5590ecf65940 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf65918 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf65b48 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf65b20 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf65ae0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf65ac0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf65b00 <line:88:60> 'int' 0
[B20.27] (ImplicitCastExpr, LValueToRValue, UpVal *)
  29: DeclRefExpr 0x5590ecf655e0 <lvm.c:733:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
ncl
  30: ImplicitCastExpr 0x5590ecf65608 <lvm.c:733:13> 'Closure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf655e0 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B20.29] (ImplicitCastExpr, LValueToRValue, Closure *)
  31: MemberExpr 0x5590ecf65620 <lvm.c:733:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
`-ImplicitCastExpr 0x5590ecf65608 <col:13> 'Closure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf655e0 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B20.30]->l
  32: MemberExpr 0x5590ecf65658 <lvm.c:733:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
`-MemberExpr 0x5590ecf65620 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
  `-ImplicitCastExpr 0x5590ecf65608 <col:13> 'Closure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf655e0 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B20.31].upvals
  33: ImplicitCastExpr 0x5590ecf656b8 <lvm.c:733:13, col:20> 'UpVal **' <ArrayToPointerDecay>
`-MemberExpr 0x5590ecf65658 <col:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
  `-MemberExpr 0x5590ecf65620 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
    `-ImplicitCastExpr 0x5590ecf65608 <col:13> 'Closure *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf655e0 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B20.32] (ImplicitCastExpr, ArrayToPointerDecay, UpVal **)
  34: DeclRefExpr 0x5590ecf65690 <lvm.c:733:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
j
  35: ImplicitCastExpr 0x5590ecf656d0 <lvm.c:733:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65690 <col:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
[B20.34] (ImplicitCastExpr, LValueToRValue, int)
  36: ArraySubscriptExpr 0x5590ecf656e8 <lvm.c:733:13, col:28> 'UpVal *' lvalue
|-ImplicitCastExpr 0x5590ecf656b8 <col:13, col:20> 'UpVal **' <ArrayToPointerDecay>
| `-MemberExpr 0x5590ecf65658 <col:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
|   `-MemberExpr 0x5590ecf65620 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
|     `-ImplicitCastExpr 0x5590ecf65608 <col:13> 'Closure *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf655e0 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
`-ImplicitCastExpr 0x5590ecf656d0 <col:27> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65690 <col:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
[B20.33][[B20.35]]
  37: BinaryOperator 0x5590ecf65cb8 <lvm.c:733:13, col:56> 'UpVal *' '='
|-ArraySubscriptExpr 0x5590ecf656e8 <col:13, col:28> 'UpVal *' lvalue
| |-ImplicitCastExpr 0x5590ecf656b8 <col:13, col:20> 'UpVal **' <ArrayToPointerDecay>
| | `-MemberExpr 0x5590ecf65658 <col:13, col:20> 'UpVal *[1]' lvalue .upvals 0x5590ece8ffe8
| |   `-MemberExpr 0x5590ecf65620 <col:13, col:18> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
| |     `-ImplicitCastExpr 0x5590ecf65608 <col:13> 'Closure *' <LValueToRValue>
| |       `-DeclRefExpr 0x5590ecf655e0 <col:13> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
| `-ImplicitCastExpr 0x5590ecf656d0 <col:27> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf65690 <col:27> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
`-ImplicitCastExpr 0x5590ecf65ca0 <col:32, col:56> 'UpVal *' <LValueToRValue>
  `-ArraySubscriptExpr 0x5590ecf65c78 <col:32, col:56> 'UpVal *' lvalue
    |-ImplicitCastExpr 0x5590ecf65c60 <col:32, col:36> 'UpVal **' <ArrayToPointerDecay>
    | `-MemberExpr 0x5590ecf65750 <col:32, col:36> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
    |   `-ImplicitCastExpr 0x5590ecf65738 <col:32> 'LClosure *' <LValueToRValue>
    |     `-DeclRefExpr 0x5590ecf65710 <col:32> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
    `-ParenExpr 0x5590ecf65c40 <./lopcodes.h:88:21, col:63> 'int'
      `-ParenExpr 0x5590ecf65c20 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecf65bf8 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecf65bd8 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecf65b68 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecf659a0 <line:88:32, col:43> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecf65978 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecf65960 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecf657e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
              |   |   `-UnaryOperator 0x5590ecf657c8 <lvm.c:733:52, col:53> 'const Instruction':'const unsigned int' lvalue prefix '*'
              |   |     `-ImplicitCastExpr 0x5590ecf657b0 <col:53> 'const Instruction *' <LValueToRValue>
              |   |       `-DeclRefExpr 0x5590ecf65788 <col:53> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
              |   `-ParenExpr 0x5590ecf65940 <./lopcodes.h:47:16, col:31> 'int'
              |     `-BinaryOperator 0x5590ecf65918 <line:46:16, line:37:17> 'int' '+'
              |       |-ParenExpr 0x5590ecf658d8 <line:46:16, col:31> 'int'
              |       | `-BinaryOperator 0x5590ecf658b0 <line:45:16, line:40:17> 'int' '+'
              |       |   |-ParenExpr 0x5590ecf65870 <line:45:16, col:33> 'int'
              |       |   | `-BinaryOperator 0x5590ecf65848 <line:44:17, line:42:18> 'int' '+'
              |       |   |   |-IntegerLiteral 0x5590ecf65808 <line:44:17> 'int' 0
              |       |   |   `-IntegerLiteral 0x5590ecf65828 <line:42:18> 'int' 6
              |       |   `-IntegerLiteral 0x5590ecf65890 <line:40:17> 'int' 8
              |       `-IntegerLiteral 0x5590ecf658f8 <line:37:17> 'int' 9
              `-ParenExpr 0x5590ecf65b48 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecf65b20 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecf65ae0 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecf65ac0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecf65aa0 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecf65a78 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecf65a38 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecf65a18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecf659f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecf659c0 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5590ecf65a58 <line:38:17> 'int' 9
                  `-IntegerLiteral 0x5590ecf65b00 <line:88:60> 'int' 0
[B20.36] = [B20.28]
   Preds (1): B21
   Succs (1): B18

 [B21]
   1: DeclRefExpr 0x5590ecf651c8 <lvm.c:732:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf651f0 <lvm.c:732:27> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B21.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B21.2]
   4: ImplicitCastExpr 0x5590ecf65268 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf65228 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B21.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf65248 <./lopcodes.h:44:17> 'int' 0
0
   6: BinaryOperator 0x5590ecf65280 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf65268 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf65228 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-IntegerLiteral 0x5590ecf65248 <./lopcodes.h:44:17> 'int' 0
[B21.4] >> [B21.5]
   7: IntegerLiteral 0x5590ecf652c8 <./lopcodes.h:71:39> 'int' 0
0
   8: CStyleCastExpr 0x5590ecf652f8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
(Instruction)[B21.7] (CStyleCastExpr, IntegralCast, Instruction)
   9: UnaryOperator 0x5590ecf65320 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
~[B21.8]
  10: IntegerLiteral 0x5590ecf65360 <./lopcodes.h:42:18> 'int' 6
6
  11: BinaryOperator 0x5590ecf65380 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
([B21.9]) << [B21.10]
  12: UnaryOperator 0x5590ecf653c8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf653a8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf65380 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
~([B21.11])
  13: IntegerLiteral 0x5590ecf65408 <./lopcodes.h:80:67> 'int' 0
0
  14: BinaryOperator 0x5590ecf65428 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf653e8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf653c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf653a8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf65380 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf65408 <line:80:67> 'int' 0
([B21.12]) << [B21.13]
  15: BinaryOperator 0x5590ecf65470 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf652a8 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf65280 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf65268 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf65228 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-IntegerLiteral 0x5590ecf65248 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5590ecf65450 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf65428 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf653e8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf653c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf653a8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf65380 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf65408 <line:80:67> 'int' 0
([B21.6]) & ([B21.14])
  16: CStyleCastExpr 0x5590ecf654f8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5590ecf654d8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf65470 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf652a8 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf65280 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf65268 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf65228 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-IntegerLiteral 0x5590ecf65248 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5590ecf65450 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf65428 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf653e8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf653c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf653a8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf65380 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5590ecf65408 <line:80:67> 'int' 0
(OpCode)([B21.15]) (CStyleCastExpr, IntegralCast, OpCode)
  17: ImplicitCastExpr 0x5590ecf65588 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x5590ecf65540 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5590ecf65520 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5590ecf654f8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5590ecf654d8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf65470 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf652a8 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf65280 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf65268 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf65228 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
          |   |   `-UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
          |   |     `-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
          |   |       `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
          |   `-IntegerLiteral 0x5590ecf65248 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5590ecf65450 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf65428 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf653e8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf653c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf653a8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf65380 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5590ecf65408 <line:80:67> 'int' 0
(([B21.16])) (ImplicitCastExpr, IntegralCast, unsigned int)
  18: DeclRefExpr 0x5590ecf65560 <lvm.c:732:34> 'int' EnumConstant 0x5590eceb2f50 'OP_GETUPVAL' 'int'
OP_GETUPVAL
  19: ImplicitCastExpr 0x5590ecf655a0 <lvm.c:732:34> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5590ecf65560 <col:34> 'int' EnumConstant 0x5590eceb2f50 'OP_GETUPVAL' 'int'
[B21.18] (ImplicitCastExpr, IntegralCast, unsigned int)
  20: BinaryOperator 0x5590ecf655b8 <./lopcodes.h:80:23, lvm.c:732:34> 'int' '=='
|-ImplicitCastExpr 0x5590ecf65588 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x5590ecf65540 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x5590ecf65520 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x5590ecf654f8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x5590ecf654d8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf65470 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf652a8 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf65280 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf65268 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf65228 <col:38, col:40> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-UnaryOperator 0x5590ecf65208 <lvm.c:732:26, col:27> 'const Instruction':'const unsigned int' lvalue prefix '*'
|           |   |     `-ImplicitCastExpr 0x5590ecf651f0 <col:27> 'const Instruction *' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x5590ecf651c8 <col:27> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|           |   `-IntegerLiteral 0x5590ecf65248 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x5590ecf65450 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf65428 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf653e8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf653c8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf653a8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf65380 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf65340 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf65320 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf652f8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf652c8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf65360 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x5590ecf65408 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x5590ecf655a0 <lvm.c:732:34> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5590ecf65560 <col:34> 'int' EnumConstant 0x5590eceb2f50 'OP_GETUPVAL' 'int'
[B21.17] == [B21.19]
   T: if [B21.20]
   Preds (1): B22
   Succs (2): B20 B19

 [B22]
   1: DeclRefExpr 0x5590ecf65048 <lvm.c:731:19> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
j
   2: ImplicitCastExpr 0x5590ecf650b8 <lvm.c:731:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65048 <col:19> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
[B22.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5590ecf65090 <lvm.c:731:21> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
nup
   4: ImplicitCastExpr 0x5590ecf650d0 <lvm.c:731:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf65090 <col:21> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
[B22.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf650e8 <lvm.c:731:19, col:21> 'int' '<'
|-ImplicitCastExpr 0x5590ecf650b8 <col:19> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf65048 <col:19> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
`-ImplicitCastExpr 0x5590ecf650d0 <col:21> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf65090 <col:21> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
[B22.2] < [B22.4]
   T: for (...; [B22.5]; ...)
   Preds (2): B18 B23
   Succs (2): B21 B17

 [B23]
  case OP_CLOSURE:
   1: DeclStmt 0x5590ecf643b8 <lvm.c:724:9, col:17>col:16
`-VarDecl 0x5590ecf64358 <col:9, col:16> col:16 used p 'Proto *'
Proto *p;
   2: DeclStmt 0x5590ecf64440 <lvm.c:725:9, col:21>col:18
`-VarDecl 0x5590ecf643e0 <col:9, col:18> col:18 used ncl 'Closure *'
Closure *ncl;
   3: DeclStmt 0x5590ecf82458 <lvm.c:726:13>col:13
`-VarDecl 0x5590ecf64470 <col:9, col:13> col:13 used nup 'int'
int nup;
   4: DeclStmt 0x5590ecf82440 <lvm.c:726:18>col:18
`-VarDecl 0x5590ecf644e8 <col:9, col:18> col:18 used j 'int'
int j;
   5: DeclRefExpr 0x5590ecf645a0 <lvm.c:727:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
   6: ImplicitCastExpr 0x5590ecf645c8 <lvm.c:727:13> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.5] (ImplicitCastExpr, LValueToRValue, LClosure *)
   7: MemberExpr 0x5590ecf645e0 <lvm.c:727:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
`-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.6]->p
   8: ImplicitCastExpr 0x5590ecf64618 <lvm.c:727:13, col:17> 'struct Proto *' <LValueToRValue>
`-MemberExpr 0x5590ecf645e0 <col:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
  `-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.7] (ImplicitCastExpr, LValueToRValue, struct Proto *)
   9: MemberExpr 0x5590ecf64630 <lvm.c:727:13, col:20> 'struct Proto **' lvalue ->p 0x5590ece8c700
`-ImplicitCastExpr 0x5590ecf64618 <col:13, col:17> 'struct Proto *' <LValueToRValue>
  `-MemberExpr 0x5590ecf645e0 <col:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
    `-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.8]->p
  10: ImplicitCastExpr 0x5590ecf64b08 <lvm.c:727:13, col:20> 'struct Proto **' <LValueToRValue>
`-MemberExpr 0x5590ecf64630 <col:13, col:20> 'struct Proto **' lvalue ->p 0x5590ece8c700
  `-ImplicitCastExpr 0x5590ecf64618 <col:13, col:17> 'struct Proto *' <LValueToRValue>
    `-MemberExpr 0x5590ecf645e0 <col:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
      `-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.9] (ImplicitCastExpr, LValueToRValue, struct Proto **)
  11: DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  12: ImplicitCastExpr 0x5590ecf647a0 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B23.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x5590ecf646b0 <./lopcodes.h:44:17> 'int' 0
0
  14: IntegerLiteral 0x5590ecf646d0 <./lopcodes.h:42:18> 'int' 6
6
  15: BinaryOperator 0x5590ecf646f0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
[B23.13] + [B23.14]
  16: IntegerLiteral 0x5590ecf64738 <./lopcodes.h:40:17> 'int' 8
8
  17: BinaryOperator 0x5590ecf64758 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
([B23.15]) + [B23.16]
  18: BinaryOperator 0x5590ecf647b8 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf647a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf64780 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf64758 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
[B23.12] >> ([B23.17])
  19: IntegerLiteral 0x5590ecf64800 <./lopcodes.h:71:39> 'int' 0
0
  20: CStyleCastExpr 0x5590ecf64830 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
(Instruction)[B23.19] (CStyleCastExpr, IntegralCast, Instruction)
  21: UnaryOperator 0x5590ecf64858 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
~[B23.20]
  22: IntegerLiteral 0x5590ecf64898 <./lopcodes.h:37:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf648b8 <./lopcodes.h:38:17> 'int' 9
9
  24: BinaryOperator 0x5590ecf648d8 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
[B23.22] + [B23.23]
  25: BinaryOperator 0x5590ecf64920 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
`-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
([B23.21]) << ([B23.24])
  26: UnaryOperator 0x5590ecf64968 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
~([B23.25])
  27: IntegerLiteral 0x5590ecf649a8 <./lopcodes.h:96:63> 'int' 0
0
  28: BinaryOperator 0x5590ecf649c8 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf64988 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf64968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf649a8 <line:96:63> 'int' 0
([B23.26]) << [B23.27]
  29: BinaryOperator 0x5590ecf64a10 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf647e0 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf647b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf647a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf64780 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf64758 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf649f0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf649c8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf64988 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf64968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf649a8 <line:96:63> 'int' 0
([B23.18]) & ([B23.28])
  30: CStyleCastExpr 0x5590ecf64aa0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf64a80 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf64a10 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf647e0 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf647b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf647a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf64780 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf64758 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf649f0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf649c8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf64988 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf64968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf649a8 <line:96:63> 'int' 0
(int)([B23.29]) (CStyleCastExpr, IntegralCast, int)
  31: ArraySubscriptExpr 0x5590ecf64b20 <lvm.c:727:13, col:34> 'struct Proto *' lvalue
|-ImplicitCastExpr 0x5590ecf64b08 <col:13, col:20> 'struct Proto **' <LValueToRValue>
| `-MemberExpr 0x5590ecf64630 <col:13, col:20> 'struct Proto **' lvalue ->p 0x5590ece8c700
|   `-ImplicitCastExpr 0x5590ecf64618 <col:13, col:17> 'struct Proto *' <LValueToRValue>
|     `-MemberExpr 0x5590ecf645e0 <col:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
|       `-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
|         `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
`-ParenExpr 0x5590ecf64ae8 <./lopcodes.h:96:22, col:66> 'int'
  `-ParenExpr 0x5590ecf64ac8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf64aa0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf64a80 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf64a10 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf647e0 <line:96:33, col:45> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf647b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf647a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf64780 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf64758 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf649f0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf649c8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf64988 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf64968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
              |       `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
              |         `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
              |           |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
              |           `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf649a8 <line:96:63> 'int' 0
[B23.10][(([B23.30]))]
  32: ImplicitCastExpr 0x5590ecf64b48 <lvm.c:727:13, col:34> 'struct Proto *' <LValueToRValue>
`-ArraySubscriptExpr 0x5590ecf64b20 <col:13, col:34> 'struct Proto *' lvalue
  |-ImplicitCastExpr 0x5590ecf64b08 <col:13, col:20> 'struct Proto **' <LValueToRValue>
  | `-MemberExpr 0x5590ecf64630 <col:13, col:20> 'struct Proto **' lvalue ->p 0x5590ece8c700
  |   `-ImplicitCastExpr 0x5590ecf64618 <col:13, col:17> 'struct Proto *' <LValueToRValue>
  |     `-MemberExpr 0x5590ecf645e0 <col:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
  |       `-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
  |         `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
  `-ParenExpr 0x5590ecf64ae8 <./lopcodes.h:96:22, col:66> 'int'
    `-ParenExpr 0x5590ecf64ac8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf64aa0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf64a80 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf64a10 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf647e0 <line:96:33, col:45> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf647b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf647a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf64780 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf64758 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf649f0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf649c8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf64988 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf64968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
                |       `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
                |         `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
                |           |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
                |           `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf649a8 <line:96:63> 'int' 0
[B23.31] (ImplicitCastExpr, LValueToRValue, struct Proto *)
  33: DeclRefExpr 0x5590ecf64578 <lvm.c:727:9> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
p
  34: BinaryOperator 0x5590ecf64b60 <lvm.c:727:9, col:34> 'Proto *' '='
|-DeclRefExpr 0x5590ecf64578 <col:9> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
`-ImplicitCastExpr 0x5590ecf64b48 <col:13, col:34> 'struct Proto *' <LValueToRValue>
  `-ArraySubscriptExpr 0x5590ecf64b20 <col:13, col:34> 'struct Proto *' lvalue
    |-ImplicitCastExpr 0x5590ecf64b08 <col:13, col:20> 'struct Proto **' <LValueToRValue>
    | `-MemberExpr 0x5590ecf64630 <col:13, col:20> 'struct Proto **' lvalue ->p 0x5590ece8c700
    |   `-ImplicitCastExpr 0x5590ecf64618 <col:13, col:17> 'struct Proto *' <LValueToRValue>
    |     `-MemberExpr 0x5590ecf645e0 <col:13, col:17> 'struct Proto *' lvalue ->p 0x5590ece8fe98
    |       `-ImplicitCastExpr 0x5590ecf645c8 <col:13> 'LClosure *' <LValueToRValue>
    |         `-DeclRefExpr 0x5590ecf645a0 <col:13> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
    `-ParenExpr 0x5590ecf64ae8 <./lopcodes.h:96:22, col:66> 'int'
      `-ParenExpr 0x5590ecf64ac8 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecf64aa0 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecf64a80 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecf64a10 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecf647e0 <line:96:33, col:45> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecf647b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecf647a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecf64690 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
              |   |   `-DeclRefExpr 0x5590ecf64668 <lvm.c:727:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
              |   `-ParenExpr 0x5590ecf64780 <./lopcodes.h:46:16, col:31> 'int'
              |     `-BinaryOperator 0x5590ecf64758 <line:45:16, line:40:17> 'int' '+'
              |       |-ParenExpr 0x5590ecf64718 <line:45:16, col:33> 'int'
              |       | `-BinaryOperator 0x5590ecf646f0 <line:44:17, line:42:18> 'int' '+'
              |       |   |-IntegerLiteral 0x5590ecf646b0 <line:44:17> 'int' 0
              |       |   `-IntegerLiteral 0x5590ecf646d0 <line:42:18> 'int' 6
              |       `-IntegerLiteral 0x5590ecf64738 <line:40:17> 'int' 8
              `-ParenExpr 0x5590ecf649f0 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecf649c8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecf64988 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecf64968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecf64948 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecf64920 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecf64878 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecf64858 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecf64830 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecf64800 <col:39> 'int' 0
                  |       `-ParenExpr 0x5590ecf64900 <line:39:18, col:34> 'int'
                  |         `-BinaryOperator 0x5590ecf648d8 <line:37:17, line:38:17> 'int' '+'
                  |           |-IntegerLiteral 0x5590ecf64898 <line:37:17> 'int' 9
                  |           `-IntegerLiteral 0x5590ecf648b8 <line:38:17> 'int' 9
                  `-IntegerLiteral 0x5590ecf649a8 <line:96:63> 'int' 0
[B23.33] = [B23.32]
  35: DeclRefExpr 0x5590ecf64bb0 <lvm.c:728:15> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
p
  36: ImplicitCastExpr 0x5590ecf64bd8 <lvm.c:728:15> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64bb0 <col:15> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.35] (ImplicitCastExpr, LValueToRValue, Proto *)
  37: MemberExpr 0x5590ecf64bf0 <lvm.c:728:15, col:18> 'lu_byte':'unsigned char' lvalue ->nups 0x5590ece8ce58
`-ImplicitCastExpr 0x5590ecf64bd8 <col:15> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf64bb0 <col:15> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.36]->nups
  38: ImplicitCastExpr 0x5590ecf64c28 <lvm.c:728:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5590ecf64bf0 <col:15, col:18> 'lu_byte':'unsigned char' lvalue ->nups 0x5590ece8ce58
  `-ImplicitCastExpr 0x5590ecf64bd8 <col:15> 'Proto *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf64bb0 <col:15> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.37] (ImplicitCastExpr, LValueToRValue, lu_byte)
  39: ImplicitCastExpr 0x5590ecf64c40 <lvm.c:728:15, col:18> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf64c28 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5590ecf64bf0 <col:15, col:18> 'lu_byte':'unsigned char' lvalue ->nups 0x5590ece8ce58
    `-ImplicitCastExpr 0x5590ecf64bd8 <col:15> 'Proto *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf64bb0 <col:15> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.38] (ImplicitCastExpr, IntegralCast, int)
  40: DeclRefExpr 0x5590ecf64b88 <lvm.c:728:9> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
nup
  41: BinaryOperator 0x5590ecf64c58 <lvm.c:728:9, col:18> 'int' '='
|-DeclRefExpr 0x5590ecf64b88 <col:9> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
`-ImplicitCastExpr 0x5590ecf64c40 <col:15, col:18> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x5590ecf64c28 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x5590ecf64bf0 <col:15, col:18> 'lu_byte':'unsigned char' lvalue ->nups 0x5590ece8ce58
      `-ImplicitCastExpr 0x5590ecf64bd8 <col:15> 'Proto *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf64bb0 <col:15> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.40] = [B23.39]
  42: DeclRefExpr 0x5590ecf64ca8 <lvm.c:729:15> 'Closure *(lua_State *, int, Table *)' Function 0x5590eceaf640 'luaF_newLclosure' 'Closure *(lua_State *, int, Table *)'
luaF_newLclosure
  43: ImplicitCastExpr 0x5590ecf64df8 <lvm.c:729:15> 'Closure *(*)(lua_State *, int, Table *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf64ca8 <col:15> 'Closure *(lua_State *, int, Table *)' Function 0x5590eceaf640 'luaF_newLclosure' 'Closure *(lua_State *, int, Table *)'
[B23.42] (ImplicitCastExpr, FunctionToPointerDecay, Closure *(*)(lua_State *, int, Table *))
  44: DeclRefExpr 0x5590ecf64cd0 <lvm.c:729:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  45: ImplicitCastExpr 0x5590ecf64e50 <lvm.c:729:32> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64cd0 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B23.44] (ImplicitCastExpr, LValueToRValue, lua_State *)
  46: DeclRefExpr 0x5590ecf64cf8 <lvm.c:729:35> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
nup
  47: ImplicitCastExpr 0x5590ecf64e68 <lvm.c:729:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64cf8 <col:35> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
[B23.46] (ImplicitCastExpr, LValueToRValue, int)
  48: DeclRefExpr 0x5590ecf64d20 <lvm.c:729:40> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
  49: ImplicitCastExpr 0x5590ecf64d48 <lvm.c:729:40> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64d20 <col:40> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.48] (ImplicitCastExpr, LValueToRValue, LClosure *)
  50: MemberExpr 0x5590ecf64d60 <lvm.c:729:40, col:44> 'struct Table *' lvalue ->env 0x5590ece8fe28
`-ImplicitCastExpr 0x5590ecf64d48 <col:40> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf64d20 <col:40> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.49]->env
  51: ImplicitCastExpr 0x5590ecf64e80 <lvm.c:729:40, col:44> 'struct Table *' <LValueToRValue>
`-MemberExpr 0x5590ecf64d60 <col:40, col:44> 'struct Table *' lvalue ->env 0x5590ece8fe28
  `-ImplicitCastExpr 0x5590ecf64d48 <col:40> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf64d20 <col:40> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.50] (ImplicitCastExpr, LValueToRValue, struct Table *)
  52: CallExpr 0x5590ecf64e10 <lvm.c:729:15, col:47> 'Closure *'
|-ImplicitCastExpr 0x5590ecf64df8 <col:15> 'Closure *(*)(lua_State *, int, Table *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf64ca8 <col:15> 'Closure *(lua_State *, int, Table *)' Function 0x5590eceaf640 'luaF_newLclosure' 'Closure *(lua_State *, int, Table *)'
|-ImplicitCastExpr 0x5590ecf64e50 <col:32> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf64cd0 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf64e68 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf64cf8 <col:35> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
`-ImplicitCastExpr 0x5590ecf64e80 <col:40, col:44> 'struct Table *' <LValueToRValue>
  `-MemberExpr 0x5590ecf64d60 <col:40, col:44> 'struct Table *' lvalue ->env 0x5590ece8fe28
    `-ImplicitCastExpr 0x5590ecf64d48 <col:40> 'LClosure *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf64d20 <col:40> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.43]([B23.45], [B23.47], [B23.51])
  53: DeclRefExpr 0x5590ecf64c80 <lvm.c:729:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
ncl
  54: BinaryOperator 0x5590ecf64e98 <lvm.c:729:9, col:47> 'Closure *' '='
|-DeclRefExpr 0x5590ecf64c80 <col:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
`-CallExpr 0x5590ecf64e10 <col:15, col:47> 'Closure *'
  |-ImplicitCastExpr 0x5590ecf64df8 <col:15> 'Closure *(*)(lua_State *, int, Table *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf64ca8 <col:15> 'Closure *(lua_State *, int, Table *)' Function 0x5590eceaf640 'luaF_newLclosure' 'Closure *(lua_State *, int, Table *)'
  |-ImplicitCastExpr 0x5590ecf64e50 <col:32> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf64cd0 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  |-ImplicitCastExpr 0x5590ecf64e68 <col:35> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf64cf8 <col:35> 'int' lvalue Var 0x5590ecf64470 'nup' 'int'
  `-ImplicitCastExpr 0x5590ecf64e80 <col:40, col:44> 'struct Table *' <LValueToRValue>
    `-MemberExpr 0x5590ecf64d60 <col:40, col:44> 'struct Table *' lvalue ->env 0x5590ece8fe28
      `-ImplicitCastExpr 0x5590ecf64d48 <col:40> 'LClosure *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf64d20 <col:40> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B23.53] = [B23.52]
  55: DeclRefExpr 0x5590ecf64f70 <lvm.c:730:20> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
p
  56: ImplicitCastExpr 0x5590ecf64f98 <lvm.c:730:20> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64f70 <col:20> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.55] (ImplicitCastExpr, LValueToRValue, Proto *)
  57: DeclRefExpr 0x5590ecf64ec0 <lvm.c:730:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
ncl
  58: ImplicitCastExpr 0x5590ecf64ee8 <lvm.c:730:9> 'Closure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64ec0 <col:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B23.57] (ImplicitCastExpr, LValueToRValue, Closure *)
  59: MemberExpr 0x5590ecf64f00 <lvm.c:730:9, col:14> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
`-ImplicitCastExpr 0x5590ecf64ee8 <col:9> 'Closure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf64ec0 <col:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B23.58]->l
  60: MemberExpr 0x5590ecf64f38 <lvm.c:730:9, col:16> 'struct Proto *' lvalue .p 0x5590ece8fe98
`-MemberExpr 0x5590ecf64f00 <col:9, col:14> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
  `-ImplicitCastExpr 0x5590ecf64ee8 <col:9> 'Closure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf64ec0 <col:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
[B23.59].p
  61: BinaryOperator 0x5590ecf64fb0 <lvm.c:730:9, col:20> 'struct Proto *' '='
|-MemberExpr 0x5590ecf64f38 <col:9, col:16> 'struct Proto *' lvalue .p 0x5590ece8fe98
| `-MemberExpr 0x5590ecf64f00 <col:9, col:14> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
|   `-ImplicitCastExpr 0x5590ecf64ee8 <col:9> 'Closure *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf64ec0 <col:9> 'Closure *' lvalue Var 0x5590ecf643e0 'ncl' 'Closure *'
`-ImplicitCastExpr 0x5590ecf64f98 <col:20> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf64f70 <col:20> 'Proto *' lvalue Var 0x5590ecf64358 'p' 'Proto *'
[B23.60] = [B23.56]
  62: IntegerLiteral 0x5590ecf65000 <lvm.c:731:16> 'int' 0
0
  63: DeclRefExpr 0x5590ecf64fd8 <lvm.c:731:14> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
j
  64: BinaryOperator 0x5590ecf65020 <lvm.c:731:14, col:16> 'int' '='
|-DeclRefExpr 0x5590ecf64fd8 <col:14> 'int' lvalue Var 0x5590ecf644e8 'j' 'int'
`-IntegerLiteral 0x5590ecf65000 <col:16> 'int' 0
[B23.63] = [B23.62]
   Preds (1): B2
   Succs (1): B22

 [B24]
  case OP_CLOSE:
   1: DeclRefExpr 0x5590ecf641c8 <lvm.c:720:9> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
luaF_close
   2: ImplicitCastExpr 0x5590ecf64240 <lvm.c:720:9> 'void (*)(lua_State *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf641c8 <col:9> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
[B24.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId))
   3: DeclRefExpr 0x5590ecf641f0 <lvm.c:720:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf64290 <lvm.c:720:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf641f0 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B24.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf64218 <lvm.c:720:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf642a8 <lvm.c:720:23> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf64218 <col:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B24.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: CallExpr 0x5590ecf64258 <lvm.c:720:9, col:25> 'void'
|-ImplicitCastExpr 0x5590ecf64240 <col:9> 'void (*)(lua_State *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf641c8 <col:9> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
|-ImplicitCastExpr 0x5590ecf64290 <col:20> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf641f0 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf642a8 <col:23> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf64218 <col:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B24.2]([B24.4], [B24.6])
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B25]
   T: continue;
   Preds (1): B31
   Succs (1): B1

 [B26]
   1: DeclRefExpr 0x5590ecf62e48 <lvm.c:712:23> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
n
   2: UnaryOperator 0x5590ecf62e70 <lvm.c:712:23, col:24> 'int' postfix '--'
`-DeclRefExpr 0x5590ecf62e48 <col:23> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B26.1]--
   Preds (4): B27 B28 B29 B30
   Succs (1): B31

 [B27]
   1: DeclRefExpr 0x5590ecf63f20 <./lgc.h:90:2> 'void (lua_State *, Table *)' Function 0x5590eceb2af0 'luaC_barrierback' 'void (lua_State *, Table *)'
luaC_barrierback
   2: ImplicitCastExpr 0x5590ecf63f98 <./lgc.h:90:2> 'void (*)(lua_State *, Table *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf63f20 <col:2> 'void (lua_State *, Table *)' Function 0x5590eceb2af0 'luaC_barrierback' 'void (lua_State *, Table *)'
[B27.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, Table *))
   3: DeclRefExpr 0x5590ecf63f48 <lvm.c:715:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf63fe8 <lvm.c:715:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf63f48 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B27.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf63f70 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
h
   6: ImplicitCastExpr 0x5590ecf64000 <lvm.c:715:28> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf63f70 <col:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B27.5] (ImplicitCastExpr, LValueToRValue, Table *)
   7: CallExpr 0x5590ecf63fb0 <./lgc.h:90:2, col:22> 'void'
|-ImplicitCastExpr 0x5590ecf63f98 <col:2> 'void (*)(lua_State *, Table *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf63f20 <col:2> 'void (lua_State *, Table *)' Function 0x5590eceb2af0 'luaC_barrierback' 'void (lua_State *, Table *)'
|-ImplicitCastExpr 0x5590ecf63fe8 <lvm.c:715:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf63f48 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf64000 <col:28> 'Table *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf63f70 <col:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B27.2]([B27.4], [B27.6])
   Preds (1): B28
   Succs (1): B26

 [B28]
   1: DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
h
   2: ImplicitCastExpr 0x5590ecf63c88 <./llimits.h:75:26, col:30> 'Table *' <LValueToRValue>
`-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
  `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
    `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
(([B28.1])) (ImplicitCastExpr, LValueToRValue, Table *)
   3: CStyleCastExpr 0x5590ecf63ca0 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x5590ecf63c88 <col:26, col:30> 'Table *' <LValueToRValue>
  `-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
    `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
      `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
(GCObject *)[B28.2] (CStyleCastExpr, BitCast, GCObject *)
   4: MemberExpr 0x5590ecf63d28 <./lgc.h:66:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
`-ParenExpr 0x5590ecf63d08 <col:33, col:35> 'GCObject *'
  `-ParenExpr 0x5590ecf63ce8 <./lstate.h:162:20, col:42> 'GCObject *'
    `-ParenExpr 0x5590ecf63cc8 <./llimits.h:75:22, col:31> 'GCObject *'
      `-CStyleCastExpr 0x5590ecf63ca0 <col:23, col:30> 'GCObject *' <BitCast>
        `-ImplicitCastExpr 0x5590ecf63c88 <col:26, col:30> 'Table *' <LValueToRValue>
          `-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
            `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
              `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
((([B28.3])))->gch
   5: MemberExpr 0x5590ecf63d60 <./lgc.h:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
`-MemberExpr 0x5590ecf63d28 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
  `-ParenExpr 0x5590ecf63d08 <col:33, col:35> 'GCObject *'
    `-ParenExpr 0x5590ecf63ce8 <./lstate.h:162:20, col:42> 'GCObject *'
      `-ParenExpr 0x5590ecf63cc8 <./llimits.h:75:22, col:31> 'GCObject *'
        `-CStyleCastExpr 0x5590ecf63ca0 <col:23, col:30> 'GCObject *' <BitCast>
          `-ImplicitCastExpr 0x5590ecf63c88 <col:26, col:30> 'Table *' <LValueToRValue>
            `-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
              `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
                `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B28.4].marked
   6: ImplicitCastExpr 0x5590ecf63e80 <./lgc.h:29:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-ParenExpr 0x5590ecf63d98 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
  `-MemberExpr 0x5590ecf63d60 <line:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
    `-MemberExpr 0x5590ecf63d28 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
      `-ParenExpr 0x5590ecf63d08 <col:33, col:35> 'GCObject *'
        `-ParenExpr 0x5590ecf63ce8 <./lstate.h:162:20, col:42> 'GCObject *'
          `-ParenExpr 0x5590ecf63cc8 <./llimits.h:75:22, col:31> 'GCObject *'
            `-CStyleCastExpr 0x5590ecf63ca0 <col:23, col:30> 'GCObject *' <BitCast>
              `-ImplicitCastExpr 0x5590ecf63c88 <col:26, col:30> 'Table *' <LValueToRValue>
                `-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
                  `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
                    `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
([B28.5]) (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x5590ecf63e98 <./lgc.h:29:24, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf63e80 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ParenExpr 0x5590ecf63d98 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
    `-MemberExpr 0x5590ecf63d60 <line:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
      `-MemberExpr 0x5590ecf63d28 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
        `-ParenExpr 0x5590ecf63d08 <col:33, col:35> 'GCObject *'
          `-ParenExpr 0x5590ecf63ce8 <./lstate.h:162:20, col:42> 'GCObject *'
            `-ParenExpr 0x5590ecf63cc8 <./llimits.h:75:22, col:31> 'GCObject *'
              `-CStyleCastExpr 0x5590ecf63ca0 <col:23, col:30> 'GCObject *' <BitCast>
                `-ImplicitCastExpr 0x5590ecf63c88 <col:26, col:30> 'Table *' <LValueToRValue>
                  `-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
                    `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
                      `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B28.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x5590ecf63db8 <./lgc.h:30:21> 'int' 1
1
   9: IntegerLiteral 0x5590ecf63dd8 <./lgc.h:56:18> 'int' 2
2
  10: BinaryOperator 0x5590ecf63e18 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x5590ecf63db8 <col:21> 'int' 1
`-ParenExpr 0x5590ecf63df8 <col:24, col:26> 'int'
  `-IntegerLiteral 0x5590ecf63dd8 <line:56:18> 'int' 2
[B28.8] << ([B28.9])
  11: BinaryOperator 0x5590ecf63eb0 <./lgc.h:29:24, col:32> 'int' '&'
|-ImplicitCastExpr 0x5590ecf63e98 <col:24, col:26> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecf63e80 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ParenExpr 0x5590ecf63d98 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
|     `-MemberExpr 0x5590ecf63d60 <line:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
|       `-MemberExpr 0x5590ecf63d28 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
|         `-ParenExpr 0x5590ecf63d08 <col:33, col:35> 'GCObject *'
|           `-ParenExpr 0x5590ecf63ce8 <./lstate.h:162:20, col:42> 'GCObject *'
|             `-ParenExpr 0x5590ecf63cc8 <./llimits.h:75:22, col:31> 'GCObject *'
|               `-CStyleCastExpr 0x5590ecf63ca0 <col:23, col:30> 'GCObject *' <BitCast>
|                 `-ImplicitCastExpr 0x5590ecf63c88 <col:26, col:30> 'Table *' <LValueToRValue>
|                   `-ParenExpr 0x5590ecf63c68 <col:26, col:30> 'Table *' lvalue
|                     `-ParenExpr 0x5590ecf63c08 <./lstate.h:162:38, col:40> 'Table *' lvalue
|                       `-DeclRefExpr 0x5590ecf63be0 <lvm.c:715:28> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
`-ParenExpr 0x5590ecf63e60 <./lgc.h:29:30, col:32> 'int'
  `-ParenExpr 0x5590ecf63e40 <line:30:20, col:27> 'int'
    `-BinaryOperator 0x5590ecf63e18 <col:21, col:26> 'int' '<<'
      |-IntegerLiteral 0x5590ecf63db8 <col:21> 'int' 1
      `-ParenExpr 0x5590ecf63df8 <col:24, col:26> 'int'
        `-IntegerLiteral 0x5590ecf63dd8 <line:56:18> 'int' 2
[B28.7] & (([B28.10]))
   T: if (([B30.44]) && ([B29.17])) && ([B28.11])
   Preds (1): B29
   Succs (2): B27 B26

 [B29]
   1: DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
val
   2: ImplicitCastExpr 0x5590ecf637d8 <./lobject.h:91:48, col:50> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
([B29.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf637f0 <./lobject.h:91:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B29.2]->value
   4: MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B29.3].gc
   5: ImplicitCastExpr 0x5590ecf638a0 <./lgc.h:65:35, col:37> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x5590ecf63880 <col:35, col:37> 'GCObject *' lvalue
  `-ParenExpr 0x5590ecf63860 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
    `-MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
            `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
(([B29.4])) (ImplicitCastExpr, LValueToRValue, GCObject *)
   6: MemberExpr 0x5590ecf638b8 <./lgc.h:65:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
`-ImplicitCastExpr 0x5590ecf638a0 <col:35, col:37> 'GCObject *' <LValueToRValue>
  `-ParenExpr 0x5590ecf63880 <col:35, col:37> 'GCObject *' lvalue
    `-ParenExpr 0x5590ecf63860 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
      `-MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
        `-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B29.5]->gch
   7: MemberExpr 0x5590ecf638f0 <./lgc.h:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
`-MemberExpr 0x5590ecf638b8 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
  `-ImplicitCastExpr 0x5590ecf638a0 <col:35, col:37> 'GCObject *' <LValueToRValue>
    `-ParenExpr 0x5590ecf63880 <col:35, col:37> 'GCObject *' lvalue
      `-ParenExpr 0x5590ecf63860 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
        `-MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
          `-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
            `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
              `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
                `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B29.6].marked
   8: ImplicitCastExpr 0x5590ecf63b20 <./lgc.h:29:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-ParenExpr 0x5590ecf63928 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
  `-MemberExpr 0x5590ecf638f0 <line:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
    `-MemberExpr 0x5590ecf638b8 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
      `-ImplicitCastExpr 0x5590ecf638a0 <col:35, col:37> 'GCObject *' <LValueToRValue>
        `-ParenExpr 0x5590ecf63880 <col:35, col:37> 'GCObject *' lvalue
          `-ParenExpr 0x5590ecf63860 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
            `-MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
              `-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
                `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
                  `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
                    `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
([B29.7]) (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x5590ecf63b38 <./lgc.h:29:24, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf63b20 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ParenExpr 0x5590ecf63928 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
    `-MemberExpr 0x5590ecf638f0 <line:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
      `-MemberExpr 0x5590ecf638b8 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
        `-ImplicitCastExpr 0x5590ecf638a0 <col:35, col:37> 'GCObject *' <LValueToRValue>
          `-ParenExpr 0x5590ecf63880 <col:35, col:37> 'GCObject *' lvalue
            `-ParenExpr 0x5590ecf63860 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
              `-MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
                `-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
                  `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
                    `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
                      `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B29.8] (ImplicitCastExpr, IntegralCast, int)
  10: IntegerLiteral 0x5590ecf63948 <./lgc.h:30:21> 'int' 1
1
  11: IntegerLiteral 0x5590ecf63968 <./lgc.h:54:19> 'int' 0
0
  12: BinaryOperator 0x5590ecf639a8 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x5590ecf63948 <col:21> 'int' 1
`-ParenExpr 0x5590ecf63988 <col:24, col:26> 'int'
  `-IntegerLiteral 0x5590ecf63968 <line:54:19> 'int' 0
[B29.10] << ([B29.11])
  13: IntegerLiteral 0x5590ecf639f0 <./lgc.h:30:21> 'int' 1
1
  14: IntegerLiteral 0x5590ecf63a10 <./lgc.h:55:19> 'int' 1
1
  15: BinaryOperator 0x5590ecf63a50 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x5590ecf639f0 <col:21> 'int' 1
`-ParenExpr 0x5590ecf63a30 <col:24, col:26> 'int'
  `-IntegerLiteral 0x5590ecf63a10 <line:55:19> 'int' 1
[B29.13] << ([B29.14])
  16: BinaryOperator 0x5590ecf63a98 <./lgc.h:30:20, col:27> 'int' '|'
|-ParenExpr 0x5590ecf639d0 <col:20, col:27> 'int'
| `-BinaryOperator 0x5590ecf639a8 <col:21, col:26> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf63948 <col:21> 'int' 1
|   `-ParenExpr 0x5590ecf63988 <col:24, col:26> 'int'
|     `-IntegerLiteral 0x5590ecf63968 <line:54:19> 'int' 0
`-ParenExpr 0x5590ecf63a78 <line:30:20, col:27> 'int'
  `-BinaryOperator 0x5590ecf63a50 <col:21, col:26> 'int' '<<'
    |-IntegerLiteral 0x5590ecf639f0 <col:21> 'int' 1
    `-ParenExpr 0x5590ecf63a30 <col:24, col:26> 'int'
      `-IntegerLiteral 0x5590ecf63a10 <line:55:19> 'int' 1
([B29.12]) | ([B29.15])
  17: BinaryOperator 0x5590ecf63b50 <./lgc.h:29:24, col:32> 'int' '&'
|-ImplicitCastExpr 0x5590ecf63b38 <col:24, col:26> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecf63b20 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ParenExpr 0x5590ecf63928 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
|     `-MemberExpr 0x5590ecf638f0 <line:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
|       `-MemberExpr 0x5590ecf638b8 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
|         `-ImplicitCastExpr 0x5590ecf638a0 <col:35, col:37> 'GCObject *' <LValueToRValue>
|           `-ParenExpr 0x5590ecf63880 <col:35, col:37> 'GCObject *' lvalue
|             `-ParenExpr 0x5590ecf63860 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
|               `-MemberExpr 0x5590ecf63828 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
|                 `-MemberExpr 0x5590ecf637f0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
|                   `-ImplicitCastExpr 0x5590ecf637d8 <col:48, col:50> 'TValue *' <LValueToRValue>
|                     `-ParenExpr 0x5590ecf637b8 <col:48, col:50> 'TValue *' lvalue
|                       `-DeclRefExpr 0x5590ecf63790 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
`-ParenExpr 0x5590ecf63b00 <./lgc.h:29:30, col:32> 'int'
  `-ParenExpr 0x5590ecf63ae0 <line:37:40, col:57> 'int'
    `-ParenExpr 0x5590ecf63ac0 <line:31:25, col:51> 'int'
      `-BinaryOperator 0x5590ecf63a98 <line:30:20, col:27> 'int' '|'
        |-ParenExpr 0x5590ecf639d0 <col:20, col:27> 'int'
        | `-BinaryOperator 0x5590ecf639a8 <col:21, col:26> 'int' '<<'
        |   |-IntegerLiteral 0x5590ecf63948 <col:21> 'int' 1
        |   `-ParenExpr 0x5590ecf63988 <col:24, col:26> 'int'
        |     `-IntegerLiteral 0x5590ecf63968 <line:54:19> 'int' 0
        `-ParenExpr 0x5590ecf63a78 <line:30:20, col:27> 'int'
          `-BinaryOperator 0x5590ecf63a50 <col:21, col:26> 'int' '<<'
            |-IntegerLiteral 0x5590ecf639f0 <col:21> 'int' 1
            `-ParenExpr 0x5590ecf63a30 <col:24, col:26> 'int'
              `-IntegerLiteral 0x5590ecf63a10 <line:55:19> 'int' 1
[B29.9] & ((([B29.16])))
   T: (([B30.44]) && ([B29.17])) && ...
   Preds (1): B30
   Succs (2): B28 B26

 [B30]
   1: DeclRefExpr 0x5590ecf62f00 <lvm.c:713:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf62f50 <lvm.c:713:25> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62f00 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B30.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf62f28 <lvm.c:713:28> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
n
   4: ImplicitCastExpr 0x5590ecf62f68 <lvm.c:713:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62f28 <col:28> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B30.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf62f80 <lvm.c:713:25, col:28> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf62f50 <col:25> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62f00 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf62f68 <col:28> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf62f28 <col:28> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B30.2] + [B30.4]
   6: DeclStmt 0x5590ecf62fa8 <lvm.c:713:11, col:29>col:19
`-VarDecl 0x5590ecf62ea0 <col:11, col:28> col:19 used val 'TValue *' cinit
  `-BinaryOperator 0x5590ecf62f80 <col:25, col:28> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf62f50 <col:25> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf62f00 <col:25> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-ImplicitCastExpr 0x5590ecf62f68 <col:28> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf62f28 <col:28> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
TValue *val = ra + n;
   7: DeclRefExpr 0x5590ecf63030 <lvm.c:714:50> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
val
   8: ImplicitCastExpr 0x5590ecf630a0 <./lobject.h:162:22, col:27> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf63080 <col:22, col:27> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf63030 <lvm.c:714:50> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
([B30.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: ImplicitCastExpr 0x5590ecf630b8 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf630a0 <col:22, col:27> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf63080 <col:22, col:27> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf63030 <lvm.c:714:50> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B30.8] (ImplicitCastExpr, BitCast, const TValue *)
  10: DeclStmt 0x5590ecf630d0 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf62fd0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf630b8 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf630a0 <col:22, col:27> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf63080 <col:22, col:27> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf63030 <lvm.c:714:50> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
const TValue *o2 = (val);
  11: DeclRefExpr 0x5590ecf63158 <lvm.c:714:23> 'TValue *(lua_State *, Table *, int)' Function 0x5590ecec6fc0 'luaH_setnum' 'TValue *(lua_State *, Table *, int)'
luaH_setnum
  12: ImplicitCastExpr 0x5590ecf63278 <lvm.c:714:23> 'TValue *(*)(lua_State *, Table *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf63158 <col:23> 'TValue *(lua_State *, Table *, int)' Function 0x5590ecec6fc0 'luaH_setnum' 'TValue *(lua_State *, Table *, int)'
[B30.11] (ImplicitCastExpr, FunctionToPointerDecay, TValue *(*)(lua_State *, Table *, int))
  13: DeclRefExpr 0x5590ecf63180 <lvm.c:714:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  14: ImplicitCastExpr 0x5590ecf632d0 <lvm.c:714:35> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf63180 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B30.13] (ImplicitCastExpr, LValueToRValue, lua_State *)
  15: DeclRefExpr 0x5590ecf631a8 <lvm.c:714:38> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
h
  16: ImplicitCastExpr 0x5590ecf632e8 <lvm.c:714:38> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf631a8 <col:38> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B30.15] (ImplicitCastExpr, LValueToRValue, Table *)
  17: DeclRefExpr 0x5590ecf631d0 <lvm.c:714:41> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
last
  18: UnaryOperator 0x5590ecf631f8 <lvm.c:714:41, col:45> 'int' postfix '--'
`-DeclRefExpr 0x5590ecf631d0 <col:41> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
[B30.17]--
  19: CallExpr 0x5590ecf63290 <lvm.c:714:23, col:47> 'TValue *'
|-ImplicitCastExpr 0x5590ecf63278 <col:23> 'TValue *(*)(lua_State *, Table *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf63158 <col:23> 'TValue *(lua_State *, Table *, int)' Function 0x5590ecec6fc0 'luaH_setnum' 'TValue *(lua_State *, Table *, int)'
|-ImplicitCastExpr 0x5590ecf632d0 <col:35> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf63180 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf632e8 <col:38> 'Table *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf631a8 <col:38> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
`-UnaryOperator 0x5590ecf631f8 <col:41, col:45> 'int' postfix '--'
  `-DeclRefExpr 0x5590ecf631d0 <col:41> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
[B30.12]([B30.14], [B30.16], [B30.18])
  20: DeclStmt 0x5590ecf63320 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf630f8 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf63300 <col:41, col:46> 'TValue *'
    `-CallExpr 0x5590ecf63290 <lvm.c:714:23, col:47> 'TValue *'
      |-ImplicitCastExpr 0x5590ecf63278 <col:23> 'TValue *(*)(lua_State *, Table *, int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5590ecf63158 <col:23> 'TValue *(lua_State *, Table *, int)' Function 0x5590ecec6fc0 'luaH_setnum' 'TValue *(lua_State *, Table *, int)'
      |-ImplicitCastExpr 0x5590ecf632d0 <col:35> 'lua_State *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf63180 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
      |-ImplicitCastExpr 0x5590ecf632e8 <col:38> 'Table *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf631a8 <col:38> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
      `-UnaryOperator 0x5590ecf631f8 <col:41, col:45> 'int' postfix '--'
        `-DeclRefExpr 0x5590ecf631d0 <col:41> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
TValue *o1 = (luaH_setnum(L, h, last--));
  21: DeclRefExpr 0x5590ecf633b0 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
o2
  22: ImplicitCastExpr 0x5590ecf633d8 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf633b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.21] (ImplicitCastExpr, LValueToRValue, const TValue *)
  23: MemberExpr 0x5590ecf633f0 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf633d8 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf633b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.22]->value
  24: ImplicitCastExpr 0x5590ecf63428 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf633f0 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf633d8 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf633b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.23] (ImplicitCastExpr, LValueToRValue, Value)
  25: DeclRefExpr 0x5590ecf63338 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
o1
  26: ImplicitCastExpr 0x5590ecf63360 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf63338 <col:5> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
[B30.25] (ImplicitCastExpr, LValueToRValue, TValue *)
  27: MemberExpr 0x5590ecf63378 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf63360 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf63338 <col:5> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
[B30.26]->value
  28: BinaryOperator 0x5590ecf63440 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf63378 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf63360 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf63338 <col:5> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf63428 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf633f0 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf633d8 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf633b0 <col:17> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.27] = [B30.24]
  29: DeclRefExpr 0x5590ecf634e0 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
o2
  30: ImplicitCastExpr 0x5590ecf63508 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf634e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.29] (ImplicitCastExpr, LValueToRValue, const TValue *)
  31: MemberExpr 0x5590ecf63520 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf63508 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf634e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.30]->tt
  32: ImplicitCastExpr 0x5590ecf63558 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf63520 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf63508 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf634e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.31] (ImplicitCastExpr, LValueToRValue, int)
  33: DeclRefExpr 0x5590ecf63468 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
o1
  34: ImplicitCastExpr 0x5590ecf63490 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf63468 <col:28> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
[B30.33] (ImplicitCastExpr, LValueToRValue, TValue *)
  35: MemberExpr 0x5590ecf634a8 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf63490 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf63468 <col:28> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
[B30.34]->tt
  36: BinaryOperator 0x5590ecf63570 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf634a8 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf63490 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf63468 <col:28> 'TValue *' lvalue Var 0x5590ecf630f8 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf63558 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf63520 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf63508 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf634e0 <col:35> 'const TValue *' lvalue Var 0x5590ecf62fd0 'o2' 'const TValue *'
[B30.35] = [B30.32]
  37: IntegerLiteral 0x5590ecf63598 <./llimits.h:62:31> 'int' 0
0
  38: CStyleCastExpr 0x5590ecf635c8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf63598 <col:31> 'int' 0
(void)[B30.37] (CStyleCastExpr, ToVoid, void)
  39: DeclRefExpr 0x5590ecf63658 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
val
  40: ImplicitCastExpr 0x5590ecf636a0 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf63680 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf63658 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
([B30.39]) (ImplicitCastExpr, LValueToRValue, TValue *)
  41: MemberExpr 0x5590ecf636b8 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf636a0 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf63680 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf63658 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
[B30.40]->tt
  42: ImplicitCastExpr 0x5590ecf63730 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf636f0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf636b8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf636a0 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf63680 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf63658 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
([B30.41]) (ImplicitCastExpr, LValueToRValue, int)
  43: IntegerLiteral 0x5590ecf63710 <./lua.h:78:22> 'int' 4
4
  44: BinaryOperator 0x5590ecf63748 <./lobject.h:90:18, ./lua.h:78:22> 'int' '>='
|-ImplicitCastExpr 0x5590ecf63730 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf636f0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf636b8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf636a0 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf63680 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf63658 <lvm.c:715:31> 'TValue *' lvalue Var 0x5590ecf62ea0 'val' 'TValue *'
`-IntegerLiteral 0x5590ecf63710 <./lua.h:78:22> 'int' 4
[B30.42] >= [B30.43]
   T: ([B30.44]) && ...
   Preds (1): B31
   Succs (2): B29 B26

 [B31]
   1: DeclRefExpr 0x5590ecf62dc0 <lvm.c:712:16> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
n
   2: ImplicitCastExpr 0x5590ecf62e08 <lvm.c:712:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62dc0 <col:16> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B31.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5590ecf62de8 <lvm.c:712:20> 'int' 0
0
   4: BinaryOperator 0x5590ecf62e20 <lvm.c:712:16, col:20> 'int' '>'
|-ImplicitCastExpr 0x5590ecf62e08 <col:16> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62dc0 <col:16> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
`-IntegerLiteral 0x5590ecf62de8 <col:20> 'int' 0
[B31.2] > [B31.3]
   T: for (; [B31.4]; ...)
   Preds (3): B26 B32 B33
   Succs (2): B30 B25

 [B32]
   1: DeclRefExpr 0x5590ecf62be8 <lvm.c:711:11> 'void (lua_State *, Table *, int)' Function 0x5590ececd2d0 'luaH_resizearray' 'void (lua_State *, Table *, int)'
luaH_resizearray
   2: ImplicitCastExpr 0x5590ecf62ce8 <lvm.c:711:11> 'void (*)(lua_State *, Table *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf62be8 <col:11> 'void (lua_State *, Table *, int)' Function 0x5590ececd2d0 'luaH_resizearray' 'void (lua_State *, Table *, int)'
[B32.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, Table *, int))
   3: DeclRefExpr 0x5590ecf62c10 <lvm.c:711:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf62d40 <lvm.c:711:28> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62c10 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B32.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf62c38 <lvm.c:711:31> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
h
   6: ImplicitCastExpr 0x5590ecf62d58 <lvm.c:711:31> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62c38 <col:31> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B32.5] (ImplicitCastExpr, LValueToRValue, Table *)
   7: DeclRefExpr 0x5590ecf62c60 <lvm.c:711:34> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
last
   8: ImplicitCastExpr 0x5590ecf62d70 <lvm.c:711:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62c60 <col:34> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
[B32.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x5590ecf62d00 <lvm.c:711:11, col:38> 'void'
|-ImplicitCastExpr 0x5590ecf62ce8 <col:11> 'void (*)(lua_State *, Table *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf62be8 <col:11> 'void (lua_State *, Table *, int)' Function 0x5590ececd2d0 'luaH_resizearray' 'void (lua_State *, Table *, int)'
|-ImplicitCastExpr 0x5590ecf62d40 <col:28> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62c10 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf62d58 <col:31> 'Table *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62c38 <col:31> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
`-ImplicitCastExpr 0x5590ecf62d70 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf62c60 <col:34> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
[B32.2]([B32.4], [B32.6], [B32.8])
   Preds (1): B33
   Succs (1): B31

 [B33]
   1: DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf627e8 <./lobject.h:99:44, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B33.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: MemberExpr 0x5590ecf62800 <./lobject.h:99:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf627e8 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B33.2]->value
   4: MemberExpr 0x5590ecf62838 <./lobject.h:99:44, col:55> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf62800 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf627e8 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B33.3].gc
   5: ImplicitCastExpr 0x5590ecf62870 <./lobject.h:99:44, col:55> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590ecf62838 <col:44, col:55> 'GCObject *' lvalue .gc 0x5590ece76aa0
  `-MemberExpr 0x5590ecf62800 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf627e8 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B33.4] (ImplicitCastExpr, LValueToRValue, GCObject *)
   6: MemberExpr 0x5590ecf62888 <./lobject.h:99:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
`-ImplicitCastExpr 0x5590ecf62870 <col:44, col:55> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x5590ecf62838 <col:44, col:55> 'GCObject *' lvalue .gc 0x5590ece76aa0
    `-MemberExpr 0x5590ecf62800 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf627e8 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B33.5]->h
   7: UnaryOperator 0x5590ecf628c0 <./lobject.h:99:43, col:59> 'struct Table *' prefix '&'
`-MemberExpr 0x5590ecf62888 <col:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
  `-ImplicitCastExpr 0x5590ecf62870 <col:44, col:55> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x5590ecf62838 <col:44, col:55> 'GCObject *' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecf62800 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf627e8 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
            `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
&[B33.6]
   8: DeclRefExpr 0x5590ecf62778 <lvm.c:708:9> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
h
   9: BinaryOperator 0x5590ecf62900 <lvm.c:708:9, ./llimits.h:63:27> 'Table *' '='
|-DeclRefExpr 0x5590ecf62778 <lvm.c:708:9> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
`-ParenExpr 0x5590ecf628e0 <./llimits.h:63:25, col:27> 'struct Table *'
  `-UnaryOperator 0x5590ecf628c0 <./lobject.h:99:43, col:59> 'struct Table *' prefix '&'
    `-MemberExpr 0x5590ecf62888 <col:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
      `-ImplicitCastExpr 0x5590ecf62870 <col:44, col:55> 'GCObject *' <LValueToRValue>
        `-MemberExpr 0x5590ecf62838 <col:44, col:55> 'GCObject *' lvalue .gc 0x5590ece76aa0
          `-MemberExpr 0x5590ecf62800 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
            `-ImplicitCastExpr 0x5590ecf627e8 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
              `-ParenExpr 0x5590ecf627c8 <col:44, col:46> 'StkId':'TValue *' lvalue
                `-DeclRefExpr 0x5590ecf627a0 <lvm.c:708:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B33.8] = ([B33.7])
  10: DeclRefExpr 0x5590ecf62950 <lvm.c:709:18> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
c
  11: ImplicitCastExpr 0x5590ecf62998 <lvm.c:709:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62950 <col:18> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
[B33.10] (ImplicitCastExpr, LValueToRValue, int)
  12: IntegerLiteral 0x5590ecf62978 <lvm.c:709:20> 'int' 1
1
  13: BinaryOperator 0x5590ecf629b0 <lvm.c:709:18, col:20> 'int' '-'
|-ImplicitCastExpr 0x5590ecf62998 <col:18> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62950 <col:18> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
`-IntegerLiteral 0x5590ecf62978 <col:20> 'int' 1
[B33.11] - [B33.12]
  14: IntegerLiteral 0x5590ecf629f8 <./lopcodes.h:265:27> 'int' 50
50
  15: BinaryOperator 0x5590ecf62a18 <lvm.c:709:17, ./lopcodes.h:265:27> 'int' '*'
|-ParenExpr 0x5590ecf629d8 <lvm.c:709:17, col:21> 'int'
| `-BinaryOperator 0x5590ecf629b0 <col:18, col:20> 'int' '-'
|   |-ImplicitCastExpr 0x5590ecf62998 <col:18> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5590ecf62950 <col:18> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
|   `-IntegerLiteral 0x5590ecf62978 <col:20> 'int' 1
`-IntegerLiteral 0x5590ecf629f8 <./lopcodes.h:265:27> 'int' 50
([B33.13]) * [B33.14]
  16: DeclRefExpr 0x5590ecf62a60 <lvm.c:709:44> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
n
  17: ImplicitCastExpr 0x5590ecf62a88 <lvm.c:709:44> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62a60 <col:44> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B33.16] (ImplicitCastExpr, LValueToRValue, int)
  18: BinaryOperator 0x5590ecf62aa0 <lvm.c:709:16, col:44> 'int' '+'
|-ParenExpr 0x5590ecf62a40 <col:16, col:40> 'int'
| `-BinaryOperator 0x5590ecf62a18 <col:17, ./lopcodes.h:265:27> 'int' '*'
|   |-ParenExpr 0x5590ecf629d8 <lvm.c:709:17, col:21> 'int'
|   | `-BinaryOperator 0x5590ecf629b0 <col:18, col:20> 'int' '-'
|   |   |-ImplicitCastExpr 0x5590ecf62998 <col:18> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5590ecf62950 <col:18> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
|   |   `-IntegerLiteral 0x5590ecf62978 <col:20> 'int' 1
|   `-IntegerLiteral 0x5590ecf629f8 <./lopcodes.h:265:27> 'int' 50
`-ImplicitCastExpr 0x5590ecf62a88 <lvm.c:709:44> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf62a60 <col:44> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
([B33.15]) + [B33.17]
  19: DeclRefExpr 0x5590ecf62928 <lvm.c:709:9> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
last
  20: BinaryOperator 0x5590ecf62ac8 <lvm.c:709:9, col:44> 'int' '='
|-DeclRefExpr 0x5590ecf62928 <col:9> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
`-BinaryOperator 0x5590ecf62aa0 <col:16, col:44> 'int' '+'
  |-ParenExpr 0x5590ecf62a40 <col:16, col:40> 'int'
  | `-BinaryOperator 0x5590ecf62a18 <col:17, ./lopcodes.h:265:27> 'int' '*'
  |   |-ParenExpr 0x5590ecf629d8 <lvm.c:709:17, col:21> 'int'
  |   | `-BinaryOperator 0x5590ecf629b0 <col:18, col:20> 'int' '-'
  |   |   |-ImplicitCastExpr 0x5590ecf62998 <col:18> 'int' <LValueToRValue>
  |   |   | `-DeclRefExpr 0x5590ecf62950 <col:18> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
  |   |   `-IntegerLiteral 0x5590ecf62978 <col:20> 'int' 1
  |   `-IntegerLiteral 0x5590ecf629f8 <./lopcodes.h:265:27> 'int' 50
  `-ImplicitCastExpr 0x5590ecf62a88 <lvm.c:709:44> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf62a60 <col:44> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B33.19] = [B33.18]
  21: DeclRefExpr 0x5590ecf62af0 <lvm.c:710:13> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
last
  22: ImplicitCastExpr 0x5590ecf62b90 <lvm.c:710:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62af0 <col:13> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
[B33.21] (ImplicitCastExpr, LValueToRValue, int)
  23: DeclRefExpr 0x5590ecf62b18 <lvm.c:710:20> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
h
  24: ImplicitCastExpr 0x5590ecf62b40 <lvm.c:710:20> 'Table *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62b18 <col:20> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B33.23] (ImplicitCastExpr, LValueToRValue, Table *)
  25: MemberExpr 0x5590ecf62b58 <lvm.c:710:20, col:23> 'int' lvalue ->sizearray 0x5590ece91018
`-ImplicitCastExpr 0x5590ecf62b40 <col:20> 'Table *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf62b18 <col:20> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B33.24]->sizearray
  26: ImplicitCastExpr 0x5590ecf62ba8 <lvm.c:710:20, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf62b58 <col:20, col:23> 'int' lvalue ->sizearray 0x5590ece91018
  `-ImplicitCastExpr 0x5590ecf62b40 <col:20> 'Table *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf62b18 <col:20> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B33.25] (ImplicitCastExpr, LValueToRValue, int)
  27: BinaryOperator 0x5590ecf62bc0 <lvm.c:710:13, col:23> 'int' '>'
|-ImplicitCastExpr 0x5590ecf62b90 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62af0 <col:13> 'int' lvalue Var 0x5590ecf61d78 'last' 'int'
`-ImplicitCastExpr 0x5590ecf62ba8 <col:20, col:23> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf62b58 <col:20, col:23> 'int' lvalue ->sizearray 0x5590ece91018
    `-ImplicitCastExpr 0x5590ecf62b40 <col:20> 'Table *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf62b18 <col:20> 'Table *' lvalue Var 0x5590ecf61e00 'h' 'Table *'
[B33.22] > [B33.26]
   T: if [B33.27]
   Preds (1): B35
   Succs (2): B32 B31

 [B34]
   T: break;
   Preds (1): B35
   Succs (1): B1

 [B35]
   1: DeclRefExpr 0x5590ecf62598 <lvm.c:707:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf625e0 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf625c0 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf62598 <lvm.c:707:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B35.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: MemberExpr 0x5590ecf625f8 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf625e0 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf625c0 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf62598 <lvm.c:707:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B35.2]->tt
   4: ImplicitCastExpr 0x5590ecf62670 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf62630 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf625f8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf625e0 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf625c0 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf62598 <lvm.c:707:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B35.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf62650 <./lua.h:79:21> 'int' 5
5
   6: BinaryOperator 0x5590ecf62688 <./lobject.h:90:18, ./lua.h:79:21> 'int' '=='
|-ImplicitCastExpr 0x5590ecf62670 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf62630 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf625f8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf625e0 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf625c0 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf62598 <lvm.c:707:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf62650 <./lua.h:79:21> 'int' 5
[B35.4] == [B35.5]
   7: UnaryOperator 0x5590ecf626f0 <lvm.c:345:35, col:38> 'int' prefix '!'
`-ParenExpr 0x5590ecf626d0 <col:36, col:38> 'int'
  `-ParenExpr 0x5590ecf626b0 <./lobject.h:82:22, col:45> 'int'
    `-BinaryOperator 0x5590ecf62688 <line:90:18, ./lua.h:79:21> 'int' '=='
      |-ImplicitCastExpr 0x5590ecf62670 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
      | `-ParenExpr 0x5590ecf62630 <col:18, col:26> 'int' lvalue
      |   `-MemberExpr 0x5590ecf625f8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
      |     `-ImplicitCastExpr 0x5590ecf625e0 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      |       `-ParenExpr 0x5590ecf625c0 <col:19, col:21> 'StkId':'TValue *' lvalue
      |         `-DeclRefExpr 0x5590ecf62598 <lvm.c:707:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf62650 <./lua.h:79:21> 'int' 5
!(([B35.6]))
   T: if [B35.7]
   Preds (2): B36 B37
   Succs (2): B34 B33

 [B36]
   1: DeclRefExpr 0x5590ecf623e8 <lvm.c:706:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: UnaryOperator 0x5590ecf62410 <lvm.c:706:35, col:37> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf623e8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B36.1]++
   3: UnaryOperator 0x5590ecf62430 <lvm.c:706:34, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-UnaryOperator 0x5590ecf62410 <col:35, col:37> 'const Instruction *' postfix '++'
  `-DeclRefExpr 0x5590ecf623e8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B36.2]
   4: ImplicitCastExpr 0x5590ecf624d8 <./llimits.h:75:26, col:30> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf624b8 <col:26, col:30> 'const Instruction':'const unsigned int' lvalue
  `-ParenExpr 0x5590ecf62450 <line:80:31, col:33> 'const Instruction':'const unsigned int' lvalue
    `-UnaryOperator 0x5590ecf62430 <lvm.c:706:34, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
      `-UnaryOperator 0x5590ecf62410 <col:35, col:37> 'const Instruction *' postfix '++'
        `-DeclRefExpr 0x5590ecf623e8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
(([B36.3])) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: CStyleCastExpr 0x5590ecf624f0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf624d8 <col:26, col:30> 'Instruction':'unsigned int' <LValueToRValue>
  `-ParenExpr 0x5590ecf624b8 <col:26, col:30> 'const Instruction':'const unsigned int' lvalue
    `-ParenExpr 0x5590ecf62450 <line:80:31, col:33> 'const Instruction':'const unsigned int' lvalue
      `-UnaryOperator 0x5590ecf62430 <lvm.c:706:34, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
        `-UnaryOperator 0x5590ecf62410 <col:35, col:37> 'const Instruction *' postfix '++'
          `-DeclRefExpr 0x5590ecf623e8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
(int)[B36.4] (CStyleCastExpr, IntegralCast, int)
   6: DeclRefExpr 0x5590ecf623c0 <lvm.c:706:21> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
c
   7: BinaryOperator 0x5590ecf62538 <lvm.c:706:21, ./llimits.h:75:31> 'int' '='
|-DeclRefExpr 0x5590ecf623c0 <lvm.c:706:21> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
`-ParenExpr 0x5590ecf62518 <./llimits.h:75:22, col:31> 'int'
  `-CStyleCastExpr 0x5590ecf624f0 <col:23, col:30> 'int' <IntegralCast>
    `-ImplicitCastExpr 0x5590ecf624d8 <col:26, col:30> 'Instruction':'unsigned int' <LValueToRValue>
      `-ParenExpr 0x5590ecf624b8 <col:26, col:30> 'const Instruction':'const unsigned int' lvalue
        `-ParenExpr 0x5590ecf62450 <line:80:31, col:33> 'const Instruction':'const unsigned int' lvalue
          `-UnaryOperator 0x5590ecf62430 <lvm.c:706:34, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
            `-UnaryOperator 0x5590ecf62410 <col:35, col:37> 'const Instruction *' postfix '++'
              `-DeclRefExpr 0x5590ecf623e8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B36.6] = ([B36.5])
   Preds (1): B37
   Succs (1): B35

 [B37]
   1: DeclRefExpr 0x5590ecf62338 <lvm.c:706:13> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
c
   2: ImplicitCastExpr 0x5590ecf62380 <lvm.c:706:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62338 <col:13> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
[B37.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5590ecf62360 <lvm.c:706:18> 'int' 0
0
   4: BinaryOperator 0x5590ecf62398 <lvm.c:706:13, col:18> 'int' '=='
|-ImplicitCastExpr 0x5590ecf62380 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf62338 <col:13> 'int' lvalue Var 0x5590ecf618b0 'c' 'int'
`-IntegerLiteral 0x5590ecf62360 <col:18> 'int' 0
[B37.2] == [B37.3]
   T: if [B37.4]
   Preds (2): B38 B39
   Succs (2): B36 B35

 [B38]
   1: DeclRefExpr 0x5590ecf61f28 <lvm.c:703:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf61f50 <lvm.c:703:24> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf61f68 <lvm.c:703:24, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf61f50 <col:24> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.2]->top
   4: ImplicitCastExpr 0x5590ecf61fc8 <lvm.c:703:24, col:27> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf61f68 <col:24, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
  `-ImplicitCastExpr 0x5590ecf61f50 <col:24> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf61fa0 <lvm.c:703:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf61fe0 <lvm.c:703:33> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf61fa0 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B38.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: BinaryOperator 0x5590ecf61ff8 <lvm.c:703:24, col:33> 'long' '-'
|-ImplicitCastExpr 0x5590ecf61fc8 <col:24, col:27> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x5590ecf61f68 <col:24, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
|   `-ImplicitCastExpr 0x5590ecf61f50 <col:24> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf61fe0 <col:33> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf61fa0 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B38.4] - [B38.6]
   8: CStyleCastExpr 0x5590ecf620a8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf62088 <col:26, col:30> 'long'
  `-ParenExpr 0x5590ecf62020 <line:80:31, col:33> 'long'
    `-BinaryOperator 0x5590ecf61ff8 <lvm.c:703:24, col:33> 'long' '-'
      |-ImplicitCastExpr 0x5590ecf61fc8 <col:24, col:27> 'StkId':'TValue *' <LValueToRValue>
      | `-MemberExpr 0x5590ecf61f68 <col:24, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
      |   `-ImplicitCastExpr 0x5590ecf61f50 <col:24> 'lua_State *' <LValueToRValue>
      |     `-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
      `-ImplicitCastExpr 0x5590ecf61fe0 <col:33> 'StkId':'TValue *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf61fa0 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
(int)(([B38.7])) (CStyleCastExpr, IntegralCast, int)
   9: IntegerLiteral 0x5590ecf620f0 <lvm.c:703:39> 'int' 1
1
  10: BinaryOperator 0x5590ecf62110 <./llimits.h:75:22, lvm.c:703:39> 'int' '-'
|-ParenExpr 0x5590ecf620d0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x5590ecf620a8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x5590ecf62088 <col:26, col:30> 'long'
|     `-ParenExpr 0x5590ecf62020 <line:80:31, col:33> 'long'
|       `-BinaryOperator 0x5590ecf61ff8 <lvm.c:703:24, col:33> 'long' '-'
|         |-ImplicitCastExpr 0x5590ecf61fc8 <col:24, col:27> 'StkId':'TValue *' <LValueToRValue>
|         | `-MemberExpr 0x5590ecf61f68 <col:24, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
|         |   `-ImplicitCastExpr 0x5590ecf61f50 <col:24> 'lua_State *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|         `-ImplicitCastExpr 0x5590ecf61fe0 <col:33> 'StkId':'TValue *' <LValueToRValue>
|           `-DeclRefExpr 0x5590ecf61fa0 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf620f0 <col:39> 'int' 1
([B38.8]) - [B38.9]
  11: DeclRefExpr 0x5590ecf61f00 <lvm.c:703:11> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
n
  12: BinaryOperator 0x5590ecf62138 <lvm.c:703:11, col:39> 'int' '='
|-DeclRefExpr 0x5590ecf61f00 <col:11> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
`-BinaryOperator 0x5590ecf62110 <./llimits.h:75:22, lvm.c:703:39> 'int' '-'
  |-ParenExpr 0x5590ecf620d0 <./llimits.h:75:22, col:31> 'int'
  | `-CStyleCastExpr 0x5590ecf620a8 <col:23, col:30> 'int' <IntegralCast>
  |   `-ParenExpr 0x5590ecf62088 <col:26, col:30> 'long'
  |     `-ParenExpr 0x5590ecf62020 <line:80:31, col:33> 'long'
  |       `-BinaryOperator 0x5590ecf61ff8 <lvm.c:703:24, col:33> 'long' '-'
  |         |-ImplicitCastExpr 0x5590ecf61fc8 <col:24, col:27> 'StkId':'TValue *' <LValueToRValue>
  |         | `-MemberExpr 0x5590ecf61f68 <col:24, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
  |         |   `-ImplicitCastExpr 0x5590ecf61f50 <col:24> 'lua_State *' <LValueToRValue>
  |         |     `-DeclRefExpr 0x5590ecf61f28 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  |         `-ImplicitCastExpr 0x5590ecf61fe0 <col:33> 'StkId':'TValue *' <LValueToRValue>
  |           `-DeclRefExpr 0x5590ecf61fa0 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-IntegerLiteral 0x5590ecf620f0 <col:39> 'int' 1
[B38.11] = [B38.10]
  13: DeclRefExpr 0x5590ecf621d8 <lvm.c:704:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  14: ImplicitCastExpr 0x5590ecf62200 <lvm.c:704:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf621d8 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.13] (ImplicitCastExpr, LValueToRValue, lua_State *)
  15: MemberExpr 0x5590ecf62218 <lvm.c:704:20, col:23> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf62200 <col:20> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf621d8 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.14]->ci
  16: ImplicitCastExpr 0x5590ecf62250 <lvm.c:704:20, col:23> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecf62218 <col:20, col:23> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf62200 <col:20> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf621d8 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.15] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  17: MemberExpr 0x5590ecf62268 <lvm.c:704:20, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
`-ImplicitCastExpr 0x5590ecf62250 <col:20, col:23> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x5590ecf62218 <col:20, col:23> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
    `-ImplicitCastExpr 0x5590ecf62200 <col:20> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf621d8 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.16]->top
  18: ImplicitCastExpr 0x5590ecf622a0 <lvm.c:704:20, col:27> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf62268 <col:20, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
  `-ImplicitCastExpr 0x5590ecf62250 <col:20, col:23> 'CallInfo *' <LValueToRValue>
    `-MemberExpr 0x5590ecf62218 <col:20, col:23> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
      `-ImplicitCastExpr 0x5590ecf62200 <col:20> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf621d8 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.17] (ImplicitCastExpr, LValueToRValue, StkId)
  19: DeclRefExpr 0x5590ecf62160 <lvm.c:704:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  20: ImplicitCastExpr 0x5590ecf62188 <lvm.c:704:11> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf62160 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.19] (ImplicitCastExpr, LValueToRValue, lua_State *)
  21: MemberExpr 0x5590ecf621a0 <lvm.c:704:11, col:14> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf62188 <col:11> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf62160 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.20]->top
  22: BinaryOperator 0x5590ecf622b8 <lvm.c:704:11, col:27> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf621a0 <col:11, col:14> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf62188 <col:11> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf62160 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf622a0 <col:20, col:27> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf62268 <col:20, col:27> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
    `-ImplicitCastExpr 0x5590ecf62250 <col:20, col:23> 'CallInfo *' <LValueToRValue>
      `-MemberExpr 0x5590ecf62218 <col:20, col:23> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
        `-ImplicitCastExpr 0x5590ecf62200 <col:20> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf621d8 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B38.21] = [B38.18]
   Preds (1): B39
   Succs (1): B37

 [B39]
  case OP_SETLIST:
   1: DeclRefExpr 0x5590ecf613e0 <lvm.c:698:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf61580 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf61408 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf613e0 <lvm.c:698:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B39.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf61428 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf61448 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf61468 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
[B39.3] + [B39.4]
   6: IntegerLiteral 0x5590ecf614b0 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf614d0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf61490 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf61468 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf614b0 <line:40:17> 'int' 8
([B39.5]) + [B39.6]
   8: IntegerLiteral 0x5590ecf61518 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf61538 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf614f8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf614d0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf61490 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf61468 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf614b0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf61518 <line:37:17> 'int' 9
([B39.7]) + [B39.8]
  10: BinaryOperator 0x5590ecf61598 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf61580 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf61408 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf613e0 <lvm.c:698:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf61560 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf61538 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf614f8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf614d0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf61490 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf61468 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf614b0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf61518 <line:37:17> 'int' 9
[B39.2] >> ([B39.9])
  11: IntegerLiteral 0x5590ecf615e0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf61610 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
(Instruction)[B39.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf61638 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
~[B39.12]
  14: IntegerLiteral 0x5590ecf61678 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf61698 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf61658 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf61638 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf61678 <line:38:17> 'int' 9
([B39.13]) << [B39.14]
  16: UnaryOperator 0x5590ecf616e0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf616c0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf61698 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf61658 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf61638 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf61678 <line:38:17> 'int' 9
~([B39.15])
  17: IntegerLiteral 0x5590ecf61720 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf61740 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf61700 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf616e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf616c0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf61698 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf61658 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf61638 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf61678 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf61720 <line:88:60> 'int' 0
([B39.16]) << [B39.17]
  19: BinaryOperator 0x5590ecf61788 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf615c0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf61598 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf61580 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf61408 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf613e0 <lvm.c:698:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf61560 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf61538 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf614f8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf614d0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf61490 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf61468 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf614b0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf61518 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf61768 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf61740 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf61700 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf616e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf616c0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf61698 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf61658 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf61638 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf61678 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf61720 <line:88:60> 'int' 0
([B39.10]) & ([B39.18])
  20: CStyleCastExpr 0x5590ecf61818 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf617f8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf61788 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf615c0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf61598 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf61580 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf61408 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf613e0 <lvm.c:698:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf61560 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf61538 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf614f8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf614d0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf61490 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf61468 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf614b0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf61518 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf61768 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf61740 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf61700 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf616e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf616c0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf61698 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf61658 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf61638 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf61678 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf61720 <line:88:60> 'int' 0
(int)([B39.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf61880 <lvm.c:698:9, col:28>col:13
`-VarDecl 0x5590ecf61380 <col:9, ./lopcodes.h:88:63> lvm.c:698:13 used n 'int' cinit
  `-ParenExpr 0x5590ecf61860 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf61840 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf61818 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf617f8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf61788 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf615c0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf61598 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf61580 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf61408 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf613e0 <lvm.c:698:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf61560 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf61538 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf614f8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf614d0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf61490 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf61468 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf61428 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf61448 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf614b0 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf61518 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf61768 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf61740 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf61700 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf616e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf616c0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf61698 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf61658 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf61638 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf61610 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf615e0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf61678 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf61720 <line:88:60> 'int' 0
int n = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf61910 <lvm.c:699:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  23: ImplicitCastExpr 0x5590ecf61a48 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf61938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf61910 <lvm.c:699:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B39.22]) (ImplicitCastExpr, LValueToRValue, Instruction)
  24: IntegerLiteral 0x5590ecf61958 <./lopcodes.h:44:17> 'int' 0
0
  25: IntegerLiteral 0x5590ecf61978 <./lopcodes.h:42:18> 'int' 6
6
  26: BinaryOperator 0x5590ecf61998 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf61958 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf61978 <line:42:18> 'int' 6
[B39.24] + [B39.25]
  27: IntegerLiteral 0x5590ecf619e0 <./lopcodes.h:40:17> 'int' 8
8
  28: BinaryOperator 0x5590ecf61a00 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf619c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf61998 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf61958 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf61978 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf619e0 <line:40:17> 'int' 8
([B39.26]) + [B39.27]
  29: BinaryOperator 0x5590ecf61a60 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf61a48 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf61938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf61910 <lvm.c:699:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf61a28 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf61a00 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf619c0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf61998 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf61958 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf61978 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf619e0 <line:40:17> 'int' 8
[B39.23] >> ([B39.28])
  30: IntegerLiteral 0x5590ecf61aa8 <./lopcodes.h:71:39> 'int' 0
0
  31: CStyleCastExpr 0x5590ecf61ad8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
(Instruction)[B39.30] (CStyleCastExpr, IntegralCast, Instruction)
  32: UnaryOperator 0x5590ecf61b00 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
~[B39.31]
  33: IntegerLiteral 0x5590ecf61b40 <./lopcodes.h:37:17> 'int' 9
9
  34: BinaryOperator 0x5590ecf61b60 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf61b20 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf61b00 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf61b40 <line:37:17> 'int' 9
([B39.32]) << [B39.33]
  35: UnaryOperator 0x5590ecf61ba8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf61b88 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf61b60 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf61b20 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf61b00 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf61b40 <line:37:17> 'int' 9
~([B39.34])
  36: IntegerLiteral 0x5590ecf61be8 <./lopcodes.h:92:60> 'int' 0
0
  37: BinaryOperator 0x5590ecf61c08 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf61bc8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf61ba8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf61b88 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf61b60 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf61b20 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf61b00 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf61b40 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf61be8 <line:92:60> 'int' 0
([B39.35]) << [B39.36]
  38: BinaryOperator 0x5590ecf61c50 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf61a88 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf61a60 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf61a48 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf61938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf61910 <lvm.c:699:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf61a28 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf61a00 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf619c0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf61998 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf61958 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf61978 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf619e0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf61c30 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf61c08 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf61bc8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf61ba8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf61b88 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf61b60 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf61b20 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf61b00 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf61b40 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf61be8 <line:92:60> 'int' 0
([B39.29]) & ([B39.37])
  39: CStyleCastExpr 0x5590ecf61ce0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf61cc0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf61c50 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf61a88 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf61a60 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf61a48 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf61938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf61910 <lvm.c:699:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf61a28 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf61a00 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf619c0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf61998 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf61958 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf61978 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf619e0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf61c30 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf61c08 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf61bc8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf61ba8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf61b88 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf61b60 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf61b20 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf61b00 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf61b40 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf61be8 <line:92:60> 'int' 0
(int)([B39.38]) (CStyleCastExpr, IntegralCast, int)
  40: DeclStmt 0x5590ecf61d48 <lvm.c:699:9, col:28>col:13
`-VarDecl 0x5590ecf618b0 <col:9, ./lopcodes.h:92:63> lvm.c:699:13 used c 'int' cinit
  `-ParenExpr 0x5590ecf61d28 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf61d08 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf61ce0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf61cc0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf61c50 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf61a88 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf61a60 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf61a48 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf61938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf61910 <lvm.c:699:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf61a28 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf61a00 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf619c0 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf61998 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf61958 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf61978 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf619e0 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf61c30 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf61c08 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf61bc8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf61ba8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf61b88 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf61b60 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf61b20 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf61b00 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf61ad8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf61aa8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf61b40 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf61be8 <line:92:60> 'int' 0
int c = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))));
  41: DeclStmt 0x5590ecf61dd8 <lvm.c:700:9, col:17>col:13
`-VarDecl 0x5590ecf61d78 <col:9, col:13> col:13 used last 'int'
int last;
  42: DeclStmt 0x5590ecf61e60 <lvm.c:701:9, col:17>col:16
`-VarDecl 0x5590ecf61e00 <col:9, col:16> col:16 used h 'Table *'
Table *h;
  43: DeclRefExpr 0x5590ecf61e78 <lvm.c:702:13> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
n
  44: ImplicitCastExpr 0x5590ecf61ec0 <lvm.c:702:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf61e78 <col:13> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
[B39.43] (ImplicitCastExpr, LValueToRValue, int)
  45: IntegerLiteral 0x5590ecf61ea0 <lvm.c:702:18> 'int' 0
0
  46: BinaryOperator 0x5590ecf61ed8 <lvm.c:702:13, col:18> 'int' '=='
|-ImplicitCastExpr 0x5590ecf61ec0 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf61e78 <col:13> 'int' lvalue Var 0x5590ecf61380 'n' 'int'
`-IntegerLiteral 0x5590ecf61ea0 <col:18> 'int' 0
[B39.44] == [B39.45]
   T: if [B39.46]
   Preds (1): B2
   Succs (2): B38 B37

 [B40]
   1: DeclRefExpr 0x5590ecf61230 <lvm.c:694:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: UnaryOperator 0x5590ecf61258 <lvm.c:694:9, col:11> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf61230 <col:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B40.1]++
   T: continue;
   Preds (2): B41 B42
   Succs (1): B1

 [B41]
   1: DeclRefExpr 0x5590ecf60400 <lvm.c:691:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
   2: ImplicitCastExpr 0x5590ecf60448 <./lobject.h:162:22, col:27> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf60428 <col:22, col:27> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf60400 <lvm.c:691:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
([B41.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: ImplicitCastExpr 0x5590ecf60460 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf60448 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf60428 <col:22, col:27> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf60400 <lvm.c:691:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B41.2] (ImplicitCastExpr, BitCast, const TValue *)
   4: DeclStmt 0x5590ecf60478 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf603a0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf60460 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf60448 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf60428 <col:22, col:27> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf60400 <lvm.c:691:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
const TValue *o2 = (cb);
   5: DeclRefExpr 0x5590ecf60500 <lvm.c:691:24> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
   6: ImplicitCastExpr 0x5590ecf60548 <lvm.c:691:24> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf60500 <col:24> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B41.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: IntegerLiteral 0x5590ecf60528 <lvm.c:691:27> 'int' 1
1
   8: BinaryOperator 0x5590ecf60560 <lvm.c:691:24, col:27> 'StkId':'TValue *' '-'
|-ImplicitCastExpr 0x5590ecf60548 <col:24> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf60500 <col:24> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf60528 <col:27> 'int' 1
[B41.6] - [B41.7]
   9: DeclStmt 0x5590ecf605a8 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf604a0 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf60588 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf60560 <lvm.c:691:24, col:27> 'StkId':'TValue *' '-'
      |-ImplicitCastExpr 0x5590ecf60548 <col:24> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf60500 <col:24> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf60528 <col:27> 'int' 1
TValue *o1 = (cb - 1);
  10: DeclRefExpr 0x5590ecf60638 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
o2
  11: ImplicitCastExpr 0x5590ecf60660 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf60638 <col:17> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.10] (ImplicitCastExpr, LValueToRValue, const TValue *)
  12: MemberExpr 0x5590ecf60678 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf60660 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf60638 <col:17> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.11]->value
  13: ImplicitCastExpr 0x5590ecf606b0 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf60678 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf60660 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf60638 <col:17> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.12] (ImplicitCastExpr, LValueToRValue, Value)
  14: DeclRefExpr 0x5590ecf605c0 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
o1
  15: ImplicitCastExpr 0x5590ecf605e8 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf605c0 <col:5> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
[B41.14] (ImplicitCastExpr, LValueToRValue, TValue *)
  16: MemberExpr 0x5590ecf60600 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf605e8 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf605c0 <col:5> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
[B41.15]->value
  17: BinaryOperator 0x5590ecf606c8 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf60600 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf605e8 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf605c0 <col:5> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf606b0 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf60678 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf60660 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf60638 <col:17> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.16] = [B41.13]
  18: DeclRefExpr 0x5590ecf60768 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
o2
  19: ImplicitCastExpr 0x5590ecf60790 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf60768 <col:35> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.18] (ImplicitCastExpr, LValueToRValue, const TValue *)
  20: MemberExpr 0x5590ecf607a8 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf60790 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf60768 <col:35> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.19]->tt
  21: ImplicitCastExpr 0x5590ecf607e0 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf607a8 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf60790 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf60768 <col:35> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.20] (ImplicitCastExpr, LValueToRValue, int)
  22: DeclRefExpr 0x5590ecf606f0 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
o1
  23: ImplicitCastExpr 0x5590ecf60718 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf606f0 <col:28> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
[B41.22] (ImplicitCastExpr, LValueToRValue, TValue *)
  24: MemberExpr 0x5590ecf60730 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf60718 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf606f0 <col:28> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
[B41.23]->tt
  25: BinaryOperator 0x5590ecf607f8 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf60730 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf60718 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf606f0 <col:28> 'TValue *' lvalue Var 0x5590ecf604a0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf607e0 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf607a8 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf60790 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf60768 <col:35> 'const TValue *' lvalue Var 0x5590ecf603a0 'o2' 'const TValue *'
[B41.24] = [B41.21]
  26: IntegerLiteral 0x5590ecf60820 <./llimits.h:62:31> 'int' 0
0
  27: CStyleCastExpr 0x5590ecf60850 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf60820 <col:31> 'int' 0
(void)[B41.26] (CStyleCastExpr, ToVoid, void)
  28: DeclRefExpr 0x5590ecf608e0 <lvm.c:692:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  29: DeclRefExpr 0x5590ecf60928 <lvm.c:692:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  30: ImplicitCastExpr 0x5590ecf60950 <lvm.c:692:37> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B41.29] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  31: UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B41.30]
  32: ImplicitCastExpr 0x5590ecf60a98 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf60988 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B41.31]) (ImplicitCastExpr, LValueToRValue, Instruction)
  33: IntegerLiteral 0x5590ecf609a8 <./lopcodes.h:44:17> 'int' 0
0
  34: IntegerLiteral 0x5590ecf609c8 <./lopcodes.h:42:18> 'int' 6
6
  35: BinaryOperator 0x5590ecf609e8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
[B41.33] + [B41.34]
  36: IntegerLiteral 0x5590ecf60a30 <./lopcodes.h:40:17> 'int' 8
8
  37: BinaryOperator 0x5590ecf60a50 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf60a10 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf609e8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf60a30 <line:40:17> 'int' 8
([B41.35]) + [B41.36]
  38: BinaryOperator 0x5590ecf60ab0 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf60a98 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf60988 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf60a78 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf60a50 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf60a10 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf609e8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf60a30 <line:40:17> 'int' 8
[B41.32] >> ([B41.37])
  39: IntegerLiteral 0x5590ecf60af8 <./lopcodes.h:71:39> 'int' 0
0
  40: CStyleCastExpr 0x5590ecf60b28 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
(Instruction)[B41.39] (CStyleCastExpr, IntegralCast, Instruction)
  41: UnaryOperator 0x5590ecf60b50 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
~[B41.40]
  42: IntegerLiteral 0x5590ecf60b90 <./lopcodes.h:37:17> 'int' 9
9
  43: IntegerLiteral 0x5590ecf60bb0 <./lopcodes.h:38:17> 'int' 9
9
  44: BinaryOperator 0x5590ecf60bd0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
[B41.42] + [B41.43]
  45: BinaryOperator 0x5590ecf60c18 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
`-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
([B41.41]) << ([B41.44])
  46: UnaryOperator 0x5590ecf60c60 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf60c40 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf60c18 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
~([B41.45])
  47: IntegerLiteral 0x5590ecf60ca0 <./lopcodes.h:96:63> 'int' 0
0
  48: BinaryOperator 0x5590ecf60cc0 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf60c80 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf60c60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf60c40 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf60c18 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf60ca0 <line:96:63> 'int' 0
([B41.46]) << [B41.47]
  49: BinaryOperator 0x5590ecf60d08 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf60ad8 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf60ab0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf60a98 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf60988 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf60a78 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf60a50 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf60a10 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf609e8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf60a30 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf60ce8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf60cc0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf60c80 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf60c60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf60c40 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf60c18 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf60ca0 <line:96:63> 'int' 0
([B41.38]) & ([B41.48])
  50: CStyleCastExpr 0x5590ecf60d98 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf60d78 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf60d08 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf60ad8 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf60ab0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf60a98 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf60988 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf60a78 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf60a50 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf60a10 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf609e8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf60a30 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf60ce8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf60cc0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf60c80 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf60c60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf60c40 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf60c18 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf60ca0 <line:96:63> 'int' 0
(int)([B41.49]) (CStyleCastExpr, IntegralCast, int)
  51: IntegerLiteral 0x5590ecf60e00 <./lopcodes.h:57:28> 'int' 1
1
  52: IntegerLiteral 0x5590ecf60e20 <./lopcodes.h:37:17> 'int' 9
9
  53: IntegerLiteral 0x5590ecf60e40 <./lopcodes.h:38:17> 'int' 9
9
  54: BinaryOperator 0x5590ecf60e60 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf60e20 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf60e40 <line:38:17> 'int' 9
[B41.52] + [B41.53]
  55: BinaryOperator 0x5590ecf60ea8 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf60e00 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf60e88 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf60e60 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf60e20 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf60e40 <line:38:17> 'int' 9
[B41.51] << ([B41.54])
  56: IntegerLiteral 0x5590ecf60ef0 <./lopcodes.h:57:40> 'int' 1
1
  57: BinaryOperator 0x5590ecf60f10 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf60ed0 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf60ea8 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf60e00 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf60e88 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf60e60 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf60e20 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf60e40 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf60ef0 <line:57:40> 'int' 1
([B41.55]) - [B41.56]
  58: IntegerLiteral 0x5590ecf60f58 <./lopcodes.h:58:39> 'int' 1
1
  59: BinaryOperator 0x5590ecf60f78 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf60f38 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf60f10 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf60ed0 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf60ea8 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf60e00 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf60e88 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf60e60 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf60e20 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf60e40 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf60ef0 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf60f58 <line:58:39> 'int' 1
([B41.57]) >> [B41.58]
  60: BinaryOperator 0x5590ecf60fc0 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf60de0 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf60dc0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf60d98 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf60d78 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf60d08 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf60ad8 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf60ab0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf60a98 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf60988 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|         |   |     `-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|         |   `-ParenExpr 0x5590ecf60a78 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf60a50 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf60a10 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf609e8 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf60a30 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf60ce8 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf60cc0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf60c80 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf60c60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf60c40 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf60c18 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf60ca0 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf60fa0 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf60f78 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf60f38 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf60f10 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf60ed0 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf60ea8 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf60e00 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf60e88 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf60e60 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf60e20 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf60e40 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf60ef0 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf60f58 <line:58:39> 'int' 1
(([B41.50])) - ([B41.59])
  61: CompoundAssignOperator 0x5590ecf61028 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf60908 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf608e0 <line:692:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf61008 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf60fe8 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf60fc0 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf60de0 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf60dc0 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf60d98 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf60d78 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf60d08 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf60ad8 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf60ab0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf60a98 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf60988 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-UnaryOperator 0x5590ecf60968 <lvm.c:692:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
      |         |   |     `-ImplicitCastExpr 0x5590ecf60950 <col:37> 'const Instruction *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5590ecf60928 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
      |         |   `-ParenExpr 0x5590ecf60a78 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf60a50 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf60a10 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf609e8 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf609a8 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf609c8 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf60a30 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf60ce8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf60cc0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf60c80 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf60c60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf60c40 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf60c18 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf60b70 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf60b50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf60b28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf60af8 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf60bf8 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf60bd0 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf60b90 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf60bb0 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf60ca0 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf60fa0 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf60f78 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf60f38 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf60f10 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf60ed0 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf60ea8 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf60e00 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf60e88 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf60e60 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf60e20 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf60e40 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf60ef0 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf60f58 <line:58:39> 'int' 1
([B41.28]) += (([B41.60]))
  62: IntegerLiteral 0x5590ecf61070 <./llimits.h:111:33> 'int' 0
0
  63: CStyleCastExpr 0x5590ecf610a0 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf61070 <col:33> 'int' 0
(void)[B41.62] (CStyleCastExpr, ToVoid, void)
  64: IntegerLiteral 0x5590ecf610e8 <./llimits.h:110:33> 'int' 0
0
  65: CStyleCastExpr 0x5590ecf61118 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf610e8 <col:33> 'int' 0
(void)[B41.64] (CStyleCastExpr, ToVoid, void)
   Preds (1): B42
   Succs (1): B40

 [B42]
  case OP_TFORLOOP:
   1: DeclRefExpr 0x5590ecf5e228 <lvm.c:682:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf5e270 <lvm.c:682:20> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e228 <col:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B42.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: IntegerLiteral 0x5590ecf5e250 <lvm.c:682:25> 'int' 3
3
   4: BinaryOperator 0x5590ecf5e288 <lvm.c:682:20, col:25> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5e270 <col:20> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5e228 <col:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5e250 <col:25> 'int' 3
[B42.2] + [B42.3]
   5: DeclStmt 0x5590ecf5e2b0 <lvm.c:682:9, col:26>col:15
`-VarDecl 0x5590ecf5e1c8 <col:9, col:25> col:15 used cb 'StkId':'TValue *' cinit
  `-BinaryOperator 0x5590ecf5e288 <col:20, col:25> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5e270 <col:20> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5e228 <col:20> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5e250 <col:25> 'int' 3
StkId cb = ra + 3;
   6: DeclRefExpr 0x5590ecf5e338 <lvm.c:683:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   7: ImplicitCastExpr 0x5590ecf5e380 <lvm.c:683:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e338 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B42.6] (ImplicitCastExpr, LValueToRValue, StkId)
   8: IntegerLiteral 0x5590ecf5e360 <lvm.c:683:31> 'int' 2
2
   9: BinaryOperator 0x5590ecf5e398 <lvm.c:683:28, col:31> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5e380 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5e338 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5e360 <col:31> 'int' 2
[B42.7] + [B42.8]
  10: ImplicitCastExpr 0x5590ecf5e3e0 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf5e3c0 <col:22, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf5e398 <lvm.c:683:28, col:31> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5e380 <col:28> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5e338 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5e360 <col:31> 'int' 2
([B42.9]) (ImplicitCastExpr, BitCast, const TValue *)
  11: DeclStmt 0x5590ecf5e3f8 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf5e2d8 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5e3e0 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf5e3c0 <col:22, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf5e398 <lvm.c:683:28, col:31> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf5e380 <col:28> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf5e338 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
        `-IntegerLiteral 0x5590ecf5e360 <col:31> 'int' 2
const TValue *o2 = (ra + 2);
  12: DeclRefExpr 0x5590ecf5e480 <lvm.c:683:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
  13: ImplicitCastExpr 0x5590ecf5e4c8 <lvm.c:683:22> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e480 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B42.12] (ImplicitCastExpr, LValueToRValue, StkId)
  14: IntegerLiteral 0x5590ecf5e4a8 <lvm.c:683:25> 'int' 2
2
  15: BinaryOperator 0x5590ecf5e4e0 <lvm.c:683:22, col:25> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5e4c8 <col:22> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5e480 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5e4a8 <col:25> 'int' 2
[B42.13] + [B42.14]
  16: DeclStmt 0x5590ecf5e528 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf5e420 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf5e508 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf5e4e0 <lvm.c:683:22, col:25> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5e4c8 <col:22> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5e480 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5e4a8 <col:25> 'int' 2
TValue *o1 = (cb + 2);
  17: DeclRefExpr 0x5590ecf5e5b8 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
o2
  18: ImplicitCastExpr 0x5590ecf5e5e0 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e5b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.17] (ImplicitCastExpr, LValueToRValue, const TValue *)
  19: MemberExpr 0x5590ecf5e5f8 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5e5e0 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5e5b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.18]->value
  20: ImplicitCastExpr 0x5590ecf5e630 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf5e5f8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5e5e0 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5e5b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.19] (ImplicitCastExpr, LValueToRValue, Value)
  21: DeclRefExpr 0x5590ecf5e540 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
o1
  22: ImplicitCastExpr 0x5590ecf5e568 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e540 <col:5> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
[B42.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf5e580 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5e568 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5e540 <col:5> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
[B42.22]->value
  24: BinaryOperator 0x5590ecf5e648 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf5e580 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf5e568 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5e540 <col:5> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5e630 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf5e5f8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf5e5e0 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5e5b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.23] = [B42.20]
  25: DeclRefExpr 0x5590ecf5e6e8 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
o2
  26: ImplicitCastExpr 0x5590ecf5e710 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e6e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.25] (ImplicitCastExpr, LValueToRValue, const TValue *)
  27: MemberExpr 0x5590ecf5e728 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5e710 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5e6e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.26]->tt
  28: ImplicitCastExpr 0x5590ecf5e760 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf5e728 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf5e710 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5e6e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.27] (ImplicitCastExpr, LValueToRValue, int)
  29: DeclRefExpr 0x5590ecf5e670 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
o1
  30: ImplicitCastExpr 0x5590ecf5e698 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e670 <col:28> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
[B42.29] (ImplicitCastExpr, LValueToRValue, TValue *)
  31: MemberExpr 0x5590ecf5e6b0 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5e698 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5e670 <col:28> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
[B42.30]->tt
  32: BinaryOperator 0x5590ecf5e778 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf5e6b0 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf5e698 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5e670 <col:28> 'TValue *' lvalue Var 0x5590ecf5e420 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5e760 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf5e728 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf5e710 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5e6e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e2d8 'o2' 'const TValue *'
[B42.31] = [B42.28]
  33: IntegerLiteral 0x5590ecf5e7a0 <./llimits.h:62:31> 'int' 0
0
  34: CStyleCastExpr 0x5590ecf5e7d0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5e7a0 <col:31> 'int' 0
(void)[B42.33] (CStyleCastExpr, ToVoid, void)
  35: DeclRefExpr 0x5590ecf5e8d0 <lvm.c:684:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  36: ImplicitCastExpr 0x5590ecf5e918 <lvm.c:684:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5e8d0 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B42.35] (ImplicitCastExpr, LValueToRValue, StkId)
  37: IntegerLiteral 0x5590ecf5e8f8 <lvm.c:684:31> 'int' 1
1
  38: BinaryOperator 0x5590ecf5e930 <lvm.c:684:28, col:31> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5e918 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5e8d0 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5e8f8 <col:31> 'int' 1
[B42.36] + [B42.37]
  39: ImplicitCastExpr 0x5590ecf5e978 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf5e958 <col:22, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf5e930 <lvm.c:684:28, col:31> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5e918 <col:28> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5e8d0 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5e8f8 <col:31> 'int' 1
([B42.38]) (ImplicitCastExpr, BitCast, const TValue *)
  40: DeclStmt 0x5590ecf5e990 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf5e870 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5e978 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf5e958 <col:22, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf5e930 <lvm.c:684:28, col:31> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf5e918 <col:28> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf5e8d0 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
        `-IntegerLiteral 0x5590ecf5e8f8 <col:31> 'int' 1
const TValue *o2 = (ra + 1);
  41: DeclRefExpr 0x5590ecf5ea18 <lvm.c:684:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
  42: ImplicitCastExpr 0x5590ecf5ea60 <lvm.c:684:22> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5ea18 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B42.41] (ImplicitCastExpr, LValueToRValue, StkId)
  43: IntegerLiteral 0x5590ecf5ea40 <lvm.c:684:25> 'int' 1
1
  44: BinaryOperator 0x5590ecf5ea78 <lvm.c:684:22, col:25> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5ea60 <col:22> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5ea18 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5ea40 <col:25> 'int' 1
[B42.42] + [B42.43]
  45: DeclStmt 0x5590ecf5eac0 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf5e9b8 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf5eaa0 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf5ea78 <lvm.c:684:22, col:25> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5ea60 <col:22> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5ea18 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5ea40 <col:25> 'int' 1
TValue *o1 = (cb + 1);
  46: DeclRefExpr 0x5590ecf5eb50 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
o2
  47: ImplicitCastExpr 0x5590ecf5eb78 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5eb50 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.46] (ImplicitCastExpr, LValueToRValue, const TValue *)
  48: MemberExpr 0x5590ecf5eb90 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5eb78 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5eb50 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.47]->value
  49: ImplicitCastExpr 0x5590ecf5ebc8 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf5eb90 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5eb78 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5eb50 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.48] (ImplicitCastExpr, LValueToRValue, Value)
  50: DeclRefExpr 0x5590ecf5ead8 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
o1
  51: ImplicitCastExpr 0x5590ecf5eb00 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5ead8 <col:5> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
[B42.50] (ImplicitCastExpr, LValueToRValue, TValue *)
  52: MemberExpr 0x5590ecf5eb18 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5eb00 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5ead8 <col:5> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
[B42.51]->value
  53: BinaryOperator 0x5590ecf5ebe0 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf5eb18 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf5eb00 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5ead8 <col:5> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5ebc8 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf5eb90 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf5eb78 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5eb50 <col:17> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.52] = [B42.49]
  54: DeclRefExpr 0x5590ecf5ec80 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
o2
  55: ImplicitCastExpr 0x5590ecf5eca8 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5ec80 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.54] (ImplicitCastExpr, LValueToRValue, const TValue *)
  56: MemberExpr 0x5590ecf5ecc0 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5eca8 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5ec80 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.55]->tt
  57: ImplicitCastExpr 0x5590ecf5ecf8 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf5ecc0 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf5eca8 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5ec80 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.56] (ImplicitCastExpr, LValueToRValue, int)
  58: DeclRefExpr 0x5590ecf5ec08 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
o1
  59: ImplicitCastExpr 0x5590ecf5ec30 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5ec08 <col:28> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
[B42.58] (ImplicitCastExpr, LValueToRValue, TValue *)
  60: MemberExpr 0x5590ecf5ec48 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5ec30 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5ec08 <col:28> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
[B42.59]->tt
  61: BinaryOperator 0x5590ecf5ed10 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf5ec48 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf5ec30 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5ec08 <col:28> 'TValue *' lvalue Var 0x5590ecf5e9b8 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5ecf8 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf5ecc0 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf5eca8 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5ec80 <col:35> 'const TValue *' lvalue Var 0x5590ecf5e870 'o2' 'const TValue *'
[B42.60] = [B42.57]
  62: IntegerLiteral 0x5590ecf5ed38 <./llimits.h:62:31> 'int' 0
0
  63: CStyleCastExpr 0x5590ecf5ed68 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5ed38 <col:31> 'int' 0
(void)[B42.62] (CStyleCastExpr, ToVoid, void)
  64: DeclRefExpr 0x5590ecf5ee68 <lvm.c:685:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  65: ImplicitCastExpr 0x5590ecf5eeb0 <./lobject.h:162:22, col:27> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5ee90 <col:22, col:27> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5ee68 <lvm.c:685:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B42.64]) (ImplicitCastExpr, LValueToRValue, StkId)
  66: ImplicitCastExpr 0x5590ecf5eec8 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf5eeb0 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5ee90 <col:22, col:27> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5ee68 <lvm.c:685:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B42.65] (ImplicitCastExpr, BitCast, const TValue *)
  67: DeclStmt 0x5590ecf5eee0 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf5ee08 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5eec8 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf5eeb0 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf5ee90 <col:22, col:27> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf5ee68 <lvm.c:685:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
const TValue *o2 = (ra);
  68: DeclRefExpr 0x5590ecf5ef68 <lvm.c:685:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
  69: ImplicitCastExpr 0x5590ecf5efb0 <./lobject.h:162:41, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5ef90 <col:41, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5ef68 <lvm.c:685:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
([B42.68]) (ImplicitCastExpr, LValueToRValue, StkId)
  70: DeclStmt 0x5590ecf5efc8 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf5ef08 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5efb0 <col:41, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf5ef90 <col:41, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf5ef68 <lvm.c:685:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
TValue *o1 = (cb);
  71: DeclRefExpr 0x5590ecf5f098 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
o2
  72: ImplicitCastExpr 0x5590ecf5f0c0 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f098 <col:17> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.71] (ImplicitCastExpr, LValueToRValue, const TValue *)
  73: MemberExpr 0x5590ecf5f0d8 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5f0c0 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5f098 <col:17> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.72]->value
  74: ImplicitCastExpr 0x5590ecf5f110 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf5f0d8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5f0c0 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5f098 <col:17> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.73] (ImplicitCastExpr, LValueToRValue, Value)
  75: DeclRefExpr 0x5590ecf5efe0 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
o1
  76: ImplicitCastExpr 0x5590ecf5f008 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5efe0 <col:5> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
[B42.75] (ImplicitCastExpr, LValueToRValue, TValue *)
  77: MemberExpr 0x5590ecf5f060 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5f008 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5efe0 <col:5> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
[B42.76]->value
  78: BinaryOperator 0x5590ecf5f128 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf5f060 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf5f008 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5efe0 <col:5> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5f110 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf5f0d8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf5f0c0 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5f098 <col:17> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.77] = [B42.74]
  79: DeclRefExpr 0x5590ecf5f1c8 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
o2
  80: ImplicitCastExpr 0x5590ecf5f1f0 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f1c8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.79] (ImplicitCastExpr, LValueToRValue, const TValue *)
  81: MemberExpr 0x5590ecf5f208 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5f1f0 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5f1c8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.80]->tt
  82: ImplicitCastExpr 0x5590ecf5f240 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf5f208 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf5f1f0 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5f1c8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.81] (ImplicitCastExpr, LValueToRValue, int)
  83: DeclRefExpr 0x5590ecf5f150 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
o1
  84: ImplicitCastExpr 0x5590ecf5f178 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f150 <col:28> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
[B42.83] (ImplicitCastExpr, LValueToRValue, TValue *)
  85: MemberExpr 0x5590ecf5f190 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5f178 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5f150 <col:28> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
[B42.84]->tt
  86: BinaryOperator 0x5590ecf5f258 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf5f190 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf5f178 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5f150 <col:28> 'TValue *' lvalue Var 0x5590ecf5ef08 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5f240 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf5f208 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf5f1f0 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5f1c8 <col:35> 'const TValue *' lvalue Var 0x5590ecf5ee08 'o2' 'const TValue *'
[B42.85] = [B42.82]
  87: IntegerLiteral 0x5590ecf5f280 <./llimits.h:62:31> 'int' 0
0
  88: CStyleCastExpr 0x5590ecf5f2b0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5f280 <col:31> 'int' 0
(void)[B42.87] (CStyleCastExpr, ToVoid, void)
  89: DeclRefExpr 0x5590ecf5f3b8 <lvm.c:686:18> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
  90: ImplicitCastExpr 0x5590ecf5f400 <lvm.c:686:18> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f3b8 <col:18> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B42.89] (ImplicitCastExpr, LValueToRValue, StkId)
  91: IntegerLiteral 0x5590ecf5f3e0 <lvm.c:686:21> 'int' 3
3
  92: BinaryOperator 0x5590ecf5f418 <lvm.c:686:18, col:21> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5f400 <col:18> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5f3b8 <col:18> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5f3e0 <col:21> 'int' 3
[B42.90] + [B42.91]
  93: DeclRefExpr 0x5590ecf5f340 <lvm.c:686:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  94: ImplicitCastExpr 0x5590ecf5f368 <lvm.c:686:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f340 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.93] (ImplicitCastExpr, LValueToRValue, lua_State *)
  95: MemberExpr 0x5590ecf5f380 <lvm.c:686:9, col:12> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf5f368 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5f340 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.94]->top
  96: BinaryOperator 0x5590ecf5f440 <lvm.c:686:9, col:21> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf5f380 <col:9, col:12> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf5f368 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5f340 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf5f418 <col:18, col:21> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf5f400 <col:18> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5f3b8 <col:18> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
  `-IntegerLiteral 0x5590ecf5f3e0 <col:21> 'int' 3
[B42.95] = [B42.92]
  97: DeclRefExpr 0x5590ecf5f4e0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  98: ImplicitCastExpr 0x5590ecf5f508 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f4e0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B42.97] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  99: DeclRefExpr 0x5590ecf5f468 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
 100: ImplicitCastExpr 0x5590ecf5f490 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f468 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.99] (ImplicitCastExpr, LValueToRValue, lua_State *)
 101: MemberExpr 0x5590ecf5f4a8 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf5f490 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5f468 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.100]->savedpc
 102: BinaryOperator 0x5590ecf5f520 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf5f4a8 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf5f490 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5f468 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5f508 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5f4e0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B42.101] = [B42.98]
 103: DeclRefExpr 0x5590ecf5f548 <lvm.c:687:17> 'void (lua_State *, StkId, int)' Function 0x5590ecea9a70 'luaD_call' 'void (lua_State *, StkId, int)'
luaD_call
 104: ImplicitCastExpr 0x5590ecf5f9f8 <lvm.c:687:17> 'void (*)(lua_State *, StkId, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5f548 <col:17> 'void (lua_State *, StkId, int)' Function 0x5590ecea9a70 'luaD_call' 'void (lua_State *, StkId, int)'
[B42.103] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, int))
 105: DeclRefExpr 0x5590ecf5f570 <lvm.c:687:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
 106: ImplicitCastExpr 0x5590ecf5fa50 <lvm.c:687:27> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f570 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.105] (ImplicitCastExpr, LValueToRValue, lua_State *)
 107: DeclRefExpr 0x5590ecf5f598 <lvm.c:687:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
 108: ImplicitCastExpr 0x5590ecf5fa68 <lvm.c:687:30> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5f598 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B42.107] (ImplicitCastExpr, LValueToRValue, StkId)
 109: DeclRefExpr 0x5590ecf5f5c0 <lvm.c:687:43> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
 110: ImplicitCastExpr 0x5590ecf5f6f8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf5f5e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf5f5c0 <lvm.c:687:43> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B42.109]) (ImplicitCastExpr, LValueToRValue, Instruction)
 111: IntegerLiteral 0x5590ecf5f608 <./lopcodes.h:44:17> 'int' 0
0
 112: IntegerLiteral 0x5590ecf5f628 <./lopcodes.h:42:18> 'int' 6
6
 113: BinaryOperator 0x5590ecf5f648 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf5f608 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf5f628 <line:42:18> 'int' 6
[B42.111] + [B42.112]
 114: IntegerLiteral 0x5590ecf5f690 <./lopcodes.h:40:17> 'int' 8
8
 115: BinaryOperator 0x5590ecf5f6b0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf5f670 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf5f648 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf5f608 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf5f628 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf5f690 <line:40:17> 'int' 8
([B42.113]) + [B42.114]
 116: BinaryOperator 0x5590ecf5f710 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf5f6f8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5f5e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf5f5c0 <lvm.c:687:43> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf5f6d8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf5f6b0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf5f670 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf5f648 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf5f608 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf5f628 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf5f690 <line:40:17> 'int' 8
[B42.110] >> ([B42.115])
 117: IntegerLiteral 0x5590ecf5f758 <./lopcodes.h:71:39> 'int' 0
0
 118: CStyleCastExpr 0x5590ecf5f788 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
(Instruction)[B42.117] (CStyleCastExpr, IntegralCast, Instruction)
 119: UnaryOperator 0x5590ecf5f7b0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
~[B42.118]
 120: IntegerLiteral 0x5590ecf5f7f0 <./lopcodes.h:37:17> 'int' 9
9
 121: BinaryOperator 0x5590ecf5f810 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5f7d0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5f7b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf5f7f0 <line:37:17> 'int' 9
([B42.119]) << [B42.120]
 122: UnaryOperator 0x5590ecf5f858 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf5f838 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5f810 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5f7d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5f7b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf5f7f0 <line:37:17> 'int' 9
~([B42.121])
 123: IntegerLiteral 0x5590ecf5f898 <./lopcodes.h:92:60> 'int' 0
0
 124: BinaryOperator 0x5590ecf5f8b8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5f878 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5f858 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf5f838 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf5f810 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf5f7d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf5f7b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf5f7f0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf5f898 <line:92:60> 'int' 0
([B42.122]) << [B42.123]
 125: BinaryOperator 0x5590ecf5f900 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf5f738 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf5f710 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf5f6f8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf5f5e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf5f5c0 <lvm.c:687:43> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf5f6d8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf5f6b0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf5f670 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf5f648 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf5f608 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf5f628 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf5f690 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf5f8e0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5f8b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5f878 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5f858 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf5f838 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf5f810 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf5f7d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf5f7b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf5f7f0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5f898 <line:92:60> 'int' 0
([B42.116]) & ([B42.124])
 126: CStyleCastExpr 0x5590ecf5f990 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf5f970 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf5f900 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf5f738 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf5f710 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf5f6f8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf5f5e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf5f5c0 <lvm.c:687:43> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf5f6d8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf5f6b0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf5f670 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf5f648 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf5f608 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf5f628 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf5f690 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf5f8e0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf5f8b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf5f878 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf5f858 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf5f838 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf5f810 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf5f7d0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf5f7b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf5f7f0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf5f898 <line:92:60> 'int' 0
(int)([B42.125]) (CStyleCastExpr, IntegralCast, int)
 127: CallExpr 0x5590ecf5fa10 <lvm.c:687:17, col:45> 'void'
|-ImplicitCastExpr 0x5590ecf5f9f8 <col:17> 'void (*)(lua_State *, StkId, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5f548 <col:17> 'void (lua_State *, StkId, int)' Function 0x5590ecea9a70 'luaD_call' 'void (lua_State *, StkId, int)'
|-ImplicitCastExpr 0x5590ecf5fa50 <col:27> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5f570 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf5fa68 <col:30> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5f598 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf5f9d8 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf5f9b8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf5f990 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf5f970 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf5f900 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf5f738 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf5f710 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf5f6f8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf5f5e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf5f5c0 <lvm.c:687:43> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf5f6d8 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf5f6b0 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf5f670 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf5f648 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf5f608 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf5f628 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf5f690 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf5f8e0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf5f8b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf5f878 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf5f858 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf5f838 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf5f810 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf5f7d0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf5f7b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf5f788 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf5f758 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf5f7f0 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf5f898 <line:92:60> 'int' 0
[B42.104]([B42.106], [B42.108], (([B42.126])))
 128: DeclRefExpr 0x5590ecf5fad0 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
 129: ImplicitCastExpr 0x5590ecf5faf8 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5fad0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.128] (ImplicitCastExpr, LValueToRValue, lua_State *)
 130: MemberExpr 0x5590ecf5fb10 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf5faf8 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5fad0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.129]->base
 131: ImplicitCastExpr 0x5590ecf5fb48 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf5fb10 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf5faf8 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5fad0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.130] (ImplicitCastExpr, LValueToRValue, StkId)
 132: DeclRefExpr 0x5590ecf5faa8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
 133: BinaryOperator 0x5590ecf5fb60 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf5faa8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf5fb48 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf5fb10 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf5faf8 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5fad0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.132] = [B42.131]
 134: DeclRefExpr 0x5590ecf5fc40 <lvm.c:688:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
 135: ImplicitCastExpr 0x5590ecf5fc68 <lvm.c:688:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5fc40 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.134] (ImplicitCastExpr, LValueToRValue, lua_State *)
 136: MemberExpr 0x5590ecf5fc80 <lvm.c:688:18, col:21> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf5fc68 <col:18> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5fc40 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.135]->ci
 137: ImplicitCastExpr 0x5590ecf5fcb8 <lvm.c:688:18, col:21> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecf5fc80 <col:18, col:21> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf5fc68 <col:18> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5fc40 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.136] (ImplicitCastExpr, LValueToRValue, CallInfo *)
 138: MemberExpr 0x5590ecf5fcd0 <lvm.c:688:18, col:25> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
`-ImplicitCastExpr 0x5590ecf5fcb8 <col:18, col:21> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x5590ecf5fc80 <col:18, col:21> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
    `-ImplicitCastExpr 0x5590ecf5fc68 <col:18> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5fc40 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.137]->top
 139: ImplicitCastExpr 0x5590ecf5fd08 <lvm.c:688:18, col:25> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf5fcd0 <col:18, col:25> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
  `-ImplicitCastExpr 0x5590ecf5fcb8 <col:18, col:21> 'CallInfo *' <LValueToRValue>
    `-MemberExpr 0x5590ecf5fc80 <col:18, col:21> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
      `-ImplicitCastExpr 0x5590ecf5fc68 <col:18> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf5fc40 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.138] (ImplicitCastExpr, LValueToRValue, StkId)
 140: DeclRefExpr 0x5590ecf5fbc8 <lvm.c:688:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
 141: ImplicitCastExpr 0x5590ecf5fbf0 <lvm.c:688:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5fbc8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.140] (ImplicitCastExpr, LValueToRValue, lua_State *)
 142: MemberExpr 0x5590ecf5fc08 <lvm.c:688:9, col:12> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf5fbf0 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5fbc8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.141]->top
 143: BinaryOperator 0x5590ecf5fd20 <lvm.c:688:9, col:25> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf5fc08 <col:9, col:12> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf5fbf0 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5fbc8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5fd08 <col:18, col:25> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf5fcd0 <col:18, col:25> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
    `-ImplicitCastExpr 0x5590ecf5fcb8 <col:18, col:21> 'CallInfo *' <LValueToRValue>
      `-MemberExpr 0x5590ecf5fc80 <col:18, col:21> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
        `-ImplicitCastExpr 0x5590ecf5fc68 <col:18> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf5fc40 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B42.142] = [B42.139]
 144: DeclRefExpr 0x5590ecf5fd70 <lvm.c:347:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
 145: ImplicitCastExpr 0x5590ecf60168 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5fd70 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B42.144] (ImplicitCastExpr, LValueToRValue, StkId)
 146: DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
 147: ImplicitCastExpr 0x5590ecf5fe68 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B42.146]) (ImplicitCastExpr, LValueToRValue, Instruction)
 148: IntegerLiteral 0x5590ecf5fde0 <./lopcodes.h:44:17> 'int' 0
0
 149: IntegerLiteral 0x5590ecf5fe00 <./lopcodes.h:42:18> 'int' 6
6
 150: BinaryOperator 0x5590ecf5fe20 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
[B42.148] + [B42.149]
 151: BinaryOperator 0x5590ecf5fe80 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf5fe68 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf5fe48 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecf5fe20 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
[B42.147] >> ([B42.150])
 152: IntegerLiteral 0x5590ecf5fec8 <./lopcodes.h:71:39> 'int' 0
0
 153: CStyleCastExpr 0x5590ecf5fef8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
(Instruction)[B42.152] (CStyleCastExpr, IntegralCast, Instruction)
 154: UnaryOperator 0x5590ecf5ff20 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
~[B42.153]
 155: IntegerLiteral 0x5590ecf5ff60 <./lopcodes.h:40:17> 'int' 8
8
 156: BinaryOperator 0x5590ecf5ff80 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
([B42.154]) << [B42.155]
 157: UnaryOperator 0x5590ecf5ffc8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
~([B42.156])
 158: IntegerLiteral 0x5590ecf60008 <./lopcodes.h:84:60> 'int' 0
0
 159: BinaryOperator 0x5590ecf60028 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5ffe8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5ffc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf60008 <line:84:60> 'int' 0
([B42.157]) << [B42.158]
 160: BinaryOperator 0x5590ecf60070 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf5fea8 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf5fe80 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf5fe68 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf5fe48 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecf5fe20 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecf60050 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf60028 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5ffe8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5ffc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf60008 <line:84:60> 'int' 0
([B42.151]) & ([B42.159])
 161: CStyleCastExpr 0x5590ecf60100 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf600e0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf60070 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf5fea8 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf5fe80 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf5fe68 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf5fe48 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecf5fe20 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecf60050 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf60028 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf5ffe8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf5ffc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecf60008 <line:84:60> 'int' 0
(int)([B42.160]) (CStyleCastExpr, IntegralCast, int)
 162: BinaryOperator 0x5590ecf60180 <lvm.c:347:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf60168 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5fd70 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf60148 <./lopcodes.h:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecf60128 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf60100 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf600e0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf60070 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf5fea8 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf5fe80 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf5fe68 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf5fe48 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecf5fe20 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecf60050 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf60028 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf5ffe8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf5ffc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecf60008 <line:84:60> 'int' 0
[B42.145] + (([B42.161]))
 163: IntegerLiteral 0x5590ecf601c8 <lvm.c:689:22> 'int' 3
3
 164: BinaryOperator 0x5590ecf601e8 <lvm.c:347:15, line:689:22> 'StkId':'TValue *' '+'
|-ParenExpr 0x5590ecf601a8 <line:347:15, col:32> 'StkId':'TValue *'
| `-BinaryOperator 0x5590ecf60180 <col:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
|   |-ImplicitCastExpr 0x5590ecf60168 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
|   | `-DeclRefExpr 0x5590ecf5fd70 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|   `-ParenExpr 0x5590ecf60148 <./lopcodes.h:84:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf60128 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf60100 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf600e0 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf60070 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf5fea8 <line:84:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf5fe80 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf5fe68 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf5fe48 <./lopcodes.h:45:16, col:33> 'int'
|             |     `-BinaryOperator 0x5590ecf5fe20 <line:44:17, line:42:18> 'int' '+'
|             |       |-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
|             |       `-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
|             `-ParenExpr 0x5590ecf60050 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf60028 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf5ffe8 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf5ffc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
|                 `-IntegerLiteral 0x5590ecf60008 <line:84:60> 'int' 0
`-IntegerLiteral 0x5590ecf601c8 <lvm.c:689:22> 'int' 3
([B42.162]) + [B42.163]
 165: DeclRefExpr 0x5590ecf5fd48 <lvm.c:689:9> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
 166: BinaryOperator 0x5590ecf60210 <lvm.c:689:9, col:22> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf5fd48 <col:9> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-BinaryOperator 0x5590ecf601e8 <line:347:15, line:689:22> 'StkId':'TValue *' '+'
  |-ParenExpr 0x5590ecf601a8 <line:347:15, col:32> 'StkId':'TValue *'
  | `-BinaryOperator 0x5590ecf60180 <col:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
  |   |-ImplicitCastExpr 0x5590ecf60168 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
  |   | `-DeclRefExpr 0x5590ecf5fd70 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  |   `-ParenExpr 0x5590ecf60148 <./lopcodes.h:84:21, col:63> 'int'
  |     `-ParenExpr 0x5590ecf60128 <./llimits.h:75:22, col:31> 'int'
  |       `-CStyleCastExpr 0x5590ecf60100 <col:23, col:30> 'int' <IntegralCast>
  |         `-ParenExpr 0x5590ecf600e0 <col:26, col:30> 'unsigned int'
  |           `-BinaryOperator 0x5590ecf60070 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
  |             |-ParenExpr 0x5590ecf5fea8 <line:84:32, col:43> 'Instruction':'unsigned int'
  |             | `-BinaryOperator 0x5590ecf5fe80 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
  |             |   |-ImplicitCastExpr 0x5590ecf5fe68 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
  |             |   | `-ParenExpr 0x5590ecf5fdc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  |             |   |   `-DeclRefExpr 0x5590ecf5fd98 <lvm.c:689:17> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
  |             |   `-ParenExpr 0x5590ecf5fe48 <./lopcodes.h:45:16, col:33> 'int'
  |             |     `-BinaryOperator 0x5590ecf5fe20 <line:44:17, line:42:18> 'int' '+'
  |             |       |-IntegerLiteral 0x5590ecf5fde0 <line:44:17> 'int' 0
  |             |       `-IntegerLiteral 0x5590ecf5fe00 <line:42:18> 'int' 6
  |             `-ParenExpr 0x5590ecf60050 <line:71:20, col:49> 'Instruction':'unsigned int'
  |               `-BinaryOperator 0x5590ecf60028 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
  |                 |-ParenExpr 0x5590ecf5ffe8 <line:71:21, col:45> 'Instruction':'unsigned int'
  |                 | `-UnaryOperator 0x5590ecf5ffc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
  |                 |   `-ParenExpr 0x5590ecf5ffa8 <col:23, col:44> 'Instruction':'unsigned int'
  |                 |     `-BinaryOperator 0x5590ecf5ff80 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
  |                 |       |-ParenExpr 0x5590ecf5ff40 <line:71:24, col:40> 'Instruction':'unsigned int'
  |                 |       | `-UnaryOperator 0x5590ecf5ff20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
  |                 |       |   `-CStyleCastExpr 0x5590ecf5fef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  |                 |       |     `-IntegerLiteral 0x5590ecf5fec8 <col:39> 'int' 0
  |                 |       `-IntegerLiteral 0x5590ecf5ff60 <line:40:17> 'int' 8
  |                 `-IntegerLiteral 0x5590ecf60008 <line:84:60> 'int' 0
  `-IntegerLiteral 0x5590ecf601c8 <lvm.c:689:22> 'int' 3
[B42.165] = [B42.164]
 167: DeclRefExpr 0x5590ecf60238 <lvm.c:690:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
cb
 168: ImplicitCastExpr 0x5590ecf60280 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf60260 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf60238 <lvm.c:690:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
([B42.167]) (ImplicitCastExpr, LValueToRValue, StkId)
 169: MemberExpr 0x5590ecf60298 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf60280 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf60260 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf60238 <lvm.c:690:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
[B42.168]->tt
 170: ImplicitCastExpr 0x5590ecf60310 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf602d0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf60298 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf60280 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf60260 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf60238 <lvm.c:690:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
([B42.169]) (ImplicitCastExpr, LValueToRValue, int)
 171: IntegerLiteral 0x5590ecf602f0 <./lua.h:74:19> 'int' 0
0
 172: BinaryOperator 0x5590ecf60328 <./lobject.h:90:18, ./lua.h:74:19> 'int' '=='
|-ImplicitCastExpr 0x5590ecf60310 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf602d0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf60298 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf60280 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf60260 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf60238 <lvm.c:690:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf602f0 <./lua.h:74:19> 'int' 0
[B42.170] == [B42.171]
 173: UnaryOperator 0x5590ecf60370 <lvm.c:690:13, ./lobject.h:79:41> 'int' prefix '!'
`-ParenExpr 0x5590ecf60350 <col:20, col:41> 'int'
  `-BinaryOperator 0x5590ecf60328 <line:90:18, ./lua.h:74:19> 'int' '=='
    |-ImplicitCastExpr 0x5590ecf60310 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    | `-ParenExpr 0x5590ecf602d0 <col:18, col:26> 'int' lvalue
    |   `-MemberExpr 0x5590ecf60298 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    |     `-ImplicitCastExpr 0x5590ecf60280 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
    |       `-ParenExpr 0x5590ecf60260 <col:19, col:21> 'StkId':'TValue *' lvalue
    |         `-DeclRefExpr 0x5590ecf60238 <lvm.c:690:22> 'StkId':'TValue *' lvalue Var 0x5590ecf5e1c8 'cb' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf602f0 <./lua.h:74:19> 'int' 0
!([B42.172])
   T: if [B42.173]
   Preds (1): B2
   Succs (2): B41 B40

 [B43]
   1: DeclRefExpr 0x5590ecf5d350 <lvm.c:677:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf5d398 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5d378 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5d350 <lvm.c:677:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B43.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclStmt 0x5590ecf5d3b0 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf5d2f0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5d398 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf5d378 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf5d350 <lvm.c:677:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
   4: DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   5: ImplicitCastExpr 0x5590ecf5d4c0 <./lobject.h:93:44, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5d4a0 <col:44, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B43.4]) (ImplicitCastExpr, LValueToRValue, StkId)
   6: MemberExpr 0x5590ecf5d4d8 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5d4c0 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5d4a0 <col:44, col:46> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B43.5]->value
   7: MemberExpr 0x5590ecf5d510 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5d4d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5d4c0 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf5d4a0 <col:44, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B43.6].n
   8: ImplicitCastExpr 0x5590ecf5d698 <./luaconf.h:534:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5d568 <col:27, col:29> 'lua_Number':'double' lvalue
  `-ParenExpr 0x5590ecf5d548 <./llimits.h:63:25, col:27> 'lua_Number':'double' lvalue
    `-MemberExpr 0x5590ecf5d510 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
      `-MemberExpr 0x5590ecf5d4d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf5d4c0 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf5d4a0 <col:44, col:46> 'StkId':'TValue *' lvalue
            `-DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
(([B43.7])) (ImplicitCastExpr, LValueToRValue, lua_Number)
   9: DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
pstep
  10: ImplicitCastExpr 0x5590ecf5d5d0 <./lobject.h:93:44, col:46> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5d5b0 <col:44, col:46> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
([B43.9]) (ImplicitCastExpr, LValueToRValue, const TValue *)
  11: MemberExpr 0x5590ecf5d5e8 <./lobject.h:93:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5d5d0 <col:44, col:46> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5d5b0 <col:44, col:46> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
[B43.10]->value
  12: MemberExpr 0x5590ecf5d620 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5d5e8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5d5d0 <col:44, col:46> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf5d5b0 <col:44, col:46> 'const TValue *' lvalue
      `-DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
[B43.11].n
  13: ImplicitCastExpr 0x5590ecf5d6b0 <./luaconf.h:534:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5d678 <col:31, col:33> 'const lua_Number':'const double' lvalue
  `-ParenExpr 0x5590ecf5d658 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
    `-MemberExpr 0x5590ecf5d620 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5590ece76b58
      `-MemberExpr 0x5590ecf5d5e8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf5d5d0 <col:44, col:46> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf5d5b0 <col:44, col:46> 'const TValue *' lvalue
            `-DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
(([B43.12])) (ImplicitCastExpr, LValueToRValue, lua_Number)
  14: BinaryOperator 0x5590ecf5d6c8 <./luaconf.h:534:27, col:33> 'double' '-'
|-ImplicitCastExpr 0x5590ecf5d698 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf5d568 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-ParenExpr 0x5590ecf5d548 <./llimits.h:63:25, col:27> 'lua_Number':'double' lvalue
|     `-MemberExpr 0x5590ecf5d510 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
|       `-MemberExpr 0x5590ecf5d4d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
|         `-ImplicitCastExpr 0x5590ecf5d4c0 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
|           `-ParenExpr 0x5590ecf5d4a0 <col:44, col:46> 'StkId':'TValue *' lvalue
|             `-DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf5d6b0 <./luaconf.h:534:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5d678 <col:31, col:33> 'const lua_Number':'const double' lvalue
    `-ParenExpr 0x5590ecf5d658 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
      `-MemberExpr 0x5590ecf5d620 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf5d5e8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf5d5d0 <col:44, col:46> 'const TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf5d5b0 <col:44, col:46> 'const TValue *' lvalue
              `-DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
[B43.8] - [B43.13]
  15: DeclRefExpr 0x5590ecf5d3c8 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
i_o
  16: ImplicitCastExpr 0x5590ecf5d3f0 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5d3c8 <col:24> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
[B43.15] (ImplicitCastExpr, LValueToRValue, TValue *)
  17: MemberExpr 0x5590ecf5d408 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5d3f0 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5d3c8 <col:24> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
[B43.16]->value
  18: MemberExpr 0x5590ecf5d440 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5d408 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5d3f0 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5d3c8 <col:24> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
[B43.17].n
  19: BinaryOperator 0x5590ecf5d730 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf5d440 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf5d408 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf5d3f0 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf5d3c8 <col:24> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf5d710 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf5d6f0 <./luaconf.h:534:26, col:34> 'double'
    `-BinaryOperator 0x5590ecf5d6c8 <col:27, col:33> 'double' '-'
      |-ImplicitCastExpr 0x5590ecf5d698 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf5d568 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-ParenExpr 0x5590ecf5d548 <./llimits.h:63:25, col:27> 'lua_Number':'double' lvalue
      |     `-MemberExpr 0x5590ecf5d510 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
      |       `-MemberExpr 0x5590ecf5d4d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      |         `-ImplicitCastExpr 0x5590ecf5d4c0 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
      |           `-ParenExpr 0x5590ecf5d4a0 <col:44, col:46> 'StkId':'TValue *' lvalue
      |             `-DeclRefExpr 0x5590ecf5d478 <lvm.c:677:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-ImplicitCastExpr 0x5590ecf5d6b0 <./luaconf.h:534:31, col:33> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf5d678 <col:31, col:33> 'const lua_Number':'const double' lvalue
          `-ParenExpr 0x5590ecf5d658 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
            `-MemberExpr 0x5590ecf5d620 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5590ece76b58
              `-MemberExpr 0x5590ecf5d5e8 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                `-ImplicitCastExpr 0x5590ecf5d5d0 <col:44, col:46> 'const TValue *' <LValueToRValue>
                  `-ParenExpr 0x5590ecf5d5b0 <col:44, col:46> 'const TValue *' lvalue
                    `-DeclRefExpr 0x5590ecf5d588 <lvm.c:677:54> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
[B43.18] = (([B43.14]))
  20: IntegerLiteral 0x5590ecf5d7d0 <./lua.h:77:22> 'int' 3
3
  21: DeclRefExpr 0x5590ecf5d758 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x5590ecf5d780 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5d758 <col:42> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
[B43.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf5d798 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5d780 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5d758 <col:42> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
[B43.22]->tt
  24: BinaryOperator 0x5590ecf5d7f0 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf5d798 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf5d780 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5d758 <col:42> 'TValue *' lvalue Var 0x5590ecf5d2f0 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf5d7d0 <./lua.h:77:22> 'int' 3
[B43.23] = [B43.20]
  25: DeclRefExpr 0x5590ecf5d850 <lvm.c:678:19> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  26: DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  27: ImplicitCastExpr 0x5590ecf5d9d0 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf5d8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B43.26]) (ImplicitCastExpr, LValueToRValue, Instruction)
  28: IntegerLiteral 0x5590ecf5d8e0 <./lopcodes.h:44:17> 'int' 0
0
  29: IntegerLiteral 0x5590ecf5d900 <./lopcodes.h:42:18> 'int' 6
6
  30: BinaryOperator 0x5590ecf5d920 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
[B43.28] + [B43.29]
  31: IntegerLiteral 0x5590ecf5d968 <./lopcodes.h:40:17> 'int' 8
8
  32: BinaryOperator 0x5590ecf5d988 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf5d948 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf5d920 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf5d968 <line:40:17> 'int' 8
([B43.30]) + [B43.31]
  33: BinaryOperator 0x5590ecf5d9e8 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf5d9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5d8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf5d9b0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf5d988 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf5d948 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf5d920 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf5d968 <line:40:17> 'int' 8
[B43.27] >> ([B43.32])
  34: IntegerLiteral 0x5590ecf5da30 <./lopcodes.h:71:39> 'int' 0
0
  35: CStyleCastExpr 0x5590ecf5da60 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
(Instruction)[B43.34] (CStyleCastExpr, IntegralCast, Instruction)
  36: UnaryOperator 0x5590ecf5da88 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
~[B43.35]
  37: IntegerLiteral 0x5590ecf5dac8 <./lopcodes.h:37:17> 'int' 9
9
  38: IntegerLiteral 0x5590ecf5dae8 <./lopcodes.h:38:17> 'int' 9
9
  39: BinaryOperator 0x5590ecf5db08 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
[B43.37] + [B43.38]
  40: BinaryOperator 0x5590ecf5db50 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
`-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
([B43.36]) << ([B43.39])
  41: UnaryOperator 0x5590ecf5db98 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf5db78 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5db50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
~([B43.40])
  42: IntegerLiteral 0x5590ecf5dbd8 <./lopcodes.h:96:63> 'int' 0
0
  43: BinaryOperator 0x5590ecf5dbf8 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5dbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5db98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf5db78 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf5db50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf5dbd8 <line:96:63> 'int' 0
([B43.41]) << [B43.42]
  44: BinaryOperator 0x5590ecf5dc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf5da10 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf5d9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf5d9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf5d8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf5d9b0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf5d988 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf5d948 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf5d920 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf5d968 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf5dc20 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5dbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5dbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5db98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf5db78 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf5db50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5dbd8 <line:96:63> 'int' 0
([B43.33]) & ([B43.43])
  45: CStyleCastExpr 0x5590ecf5dcd0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf5dcb0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf5dc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf5da10 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf5d9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf5d9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf5d8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf5d9b0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf5d988 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf5d948 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf5d920 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf5d968 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf5dc20 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf5dbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf5dbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf5db98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf5db78 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf5db50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf5dbd8 <line:96:63> 'int' 0
(int)([B43.44]) (CStyleCastExpr, IntegralCast, int)
  46: IntegerLiteral 0x5590ecf5dd38 <./lopcodes.h:57:28> 'int' 1
1
  47: IntegerLiteral 0x5590ecf5dd58 <./lopcodes.h:37:17> 'int' 9
9
  48: IntegerLiteral 0x5590ecf5dd78 <./lopcodes.h:38:17> 'int' 9
9
  49: BinaryOperator 0x5590ecf5dd98 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf5dd58 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf5dd78 <line:38:17> 'int' 9
[B43.47] + [B43.48]
  50: BinaryOperator 0x5590ecf5dde0 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf5dd38 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf5ddc0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf5dd98 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf5dd58 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5dd78 <line:38:17> 'int' 9
[B43.46] << ([B43.49])
  51: IntegerLiteral 0x5590ecf5de28 <./lopcodes.h:57:40> 'int' 1
1
  52: BinaryOperator 0x5590ecf5de48 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf5de08 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf5dde0 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf5dd38 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf5ddc0 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf5dd98 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf5dd58 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf5dd78 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf5de28 <line:57:40> 'int' 1
([B43.50]) - [B43.51]
  53: IntegerLiteral 0x5590ecf5de90 <./lopcodes.h:58:39> 'int' 1
1
  54: BinaryOperator 0x5590ecf5deb0 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf5de70 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf5de48 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf5de08 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf5dde0 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf5dd38 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf5ddc0 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf5dd98 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf5dd58 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf5dd78 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf5de28 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf5de90 <line:58:39> 'int' 1
([B43.52]) >> [B43.53]
  55: BinaryOperator 0x5590ecf5def8 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf5dd18 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf5dcf8 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf5dcd0 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf5dcb0 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf5dc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf5da10 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf5d9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf5d9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf5d8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|         |   `-ParenExpr 0x5590ecf5d9b0 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf5d988 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf5d948 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf5d920 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf5d968 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf5dc20 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf5dbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf5dbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf5db98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf5db78 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf5db50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf5dbd8 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf5ded8 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf5deb0 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf5de70 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf5de48 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf5de08 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf5dde0 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf5dd38 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf5ddc0 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf5dd98 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf5dd58 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf5dd78 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf5de28 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf5de90 <line:58:39> 'int' 1
(([B43.45])) - ([B43.54])
  56: CompoundAssignOperator 0x5590ecf5df60 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf5d878 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf5d850 <line:678:19> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf5df40 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf5df20 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf5def8 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf5dd18 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf5dcf8 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf5dcd0 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf5dcb0 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf5dc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf5da10 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf5d9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf5d9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf5d8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-DeclRefExpr 0x5590ecf5d898 <lvm.c:678:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |         |   `-ParenExpr 0x5590ecf5d9b0 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf5d988 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf5d948 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf5d920 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf5d8e0 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf5d900 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf5d968 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf5dc20 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf5dbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf5dbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf5db98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf5db78 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf5db50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf5daa8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf5da88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf5da60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf5da30 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf5db30 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf5db08 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf5dac8 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf5dae8 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf5dbd8 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf5ded8 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf5deb0 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf5de70 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf5de48 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf5de08 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf5dde0 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf5dd38 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf5ddc0 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf5dd98 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf5dd58 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf5dd78 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf5de28 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf5de90 <line:58:39> 'int' 1
([B43.25]) += (([B43.55]))
  57: IntegerLiteral 0x5590ecf5df98 <./llimits.h:111:33> 'int' 0
0
  58: CStyleCastExpr 0x5590ecf5dfc8 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5df98 <col:33> 'int' 0
(void)[B43.57] (CStyleCastExpr, ToVoid, void)
  59: IntegerLiteral 0x5590ecf5e010 <./llimits.h:110:33> 'int' 0
0
  60: CStyleCastExpr 0x5590ecf5e040 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5e010 <col:33> 'int' 0
(void)[B43.59] (CStyleCastExpr, ToVoid, void)
   T: continue;
   Preds (4): B44 B45 B48 B52
   Succs (1): B1

 [B44]
   1: DeclRefExpr 0x5590ecf5d0b8 <lvm.c:676:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
luaG_runerror
   2: ImplicitCastExpr 0x5590ecf5d1a0 <lvm.c:676:11> 'void (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5d0b8 <col:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
[B44.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const char *, ...))
   3: DeclRefExpr 0x5590ecf5d0e0 <lvm.c:676:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf5d1f0 <lvm.c:676:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5d0e0 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B44.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: StringLiteral 0x5590ecf5d148 <./luaconf.h:201:19, lvm.c:676:42> 'char [28]' lvalue "'for' step must be a number"
"'for' step must be a number"
   6: ImplicitCastExpr 0x5590ecf5d208 <./luaconf.h:201:19, lvm.c:676:42> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5590ecf5d148 <./luaconf.h:201:19, lvm.c:676:42> 'char [28]' lvalue "'for' step must be a number"
[B44.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x5590ecf5d220 <./luaconf.h:201:19, lvm.c:676:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5590ecf5d208 <./luaconf.h:201:19, lvm.c:676:42> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5590ecf5d148 <./luaconf.h:201:19, lvm.c:676:42> 'char [28]' lvalue "'for' step must be a number"
[B44.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x5590ecf5d1b8 <lvm.c:676:11, col:66> 'void'
|-ImplicitCastExpr 0x5590ecf5d1a0 <col:11> 'void (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5d0b8 <col:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x5590ecf5d1f0 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5d0e0 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5d220 <./luaconf.h:201:19, lvm.c:676:42> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5590ecf5d208 <./luaconf.h:201:19, lvm.c:676:42> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5590ecf5d148 <./luaconf.h:201:19, lvm.c:676:42> 'char [28]' lvalue "'for' step must be a number"
[B44.2]([B44.4], [B44.7])
   Preds (1): B45
   Succs (1): B43

 [B45]
   1: BinaryOperator 0x5590ecf5d050 <./lobject.h:90:18, ./lvm.h:19:61> 'int' '||'
|-BinaryOperator 0x5590ecf5cd58 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
| |-ImplicitCastExpr 0x5590ecf5cd40 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| | `-ParenExpr 0x5590ecf5cd00 <col:18, col:26> 'const int' lvalue
| |   `-MemberExpr 0x5590ecf5ccc8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
| |     `-ImplicitCastExpr 0x5590ecf5ccb0 <col:19, col:21> 'const TValue *' <LValueToRValue>
| |       `-ParenExpr 0x5590ecf5cc90 <col:19, col:21> 'const TValue *' lvalue
| |         `-DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
| `-IntegerLiteral 0x5590ecf5cd20 <./lua.h:77:22> 'int' 3
`-ParenExpr 0x5590ecf5d010 <./lvm.h:19:26, col:61> 'int'
  `-BinaryOperator 0x5590ecf5cfe8 <col:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
    |-ParenExpr 0x5590ecf5cf30 <./lvm.h:19:27, col:52> 'const TValue *'
    | `-BinaryOperator 0x5590ecf5cf08 <col:28, col:51> 'const TValue *' '='
    |   |-ParenExpr 0x5590ecf5cda8 <col:28, col:30> 'const TValue *' lvalue
    |   | `-DeclRefExpr 0x5590ecf5cd80 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
    |   `-CallExpr 0x5590ecf5ceb8 <./lvm.h:19:34, col:51> 'const TValue *'
    |     |-ImplicitCastExpr 0x5590ecf5cea0 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5590ecf5cdc8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
    |     |-ImplicitCastExpr 0x5590ecf5cef0 <lvm.c:675:28> 'const TValue *' <LValueToRValue>
    |     | `-DeclRefExpr 0x5590ecf5cdf0 <col:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
    |     `-BinaryOperator 0x5590ecf5ce78 <col:35, col:38> 'StkId':'TValue *' '+'
    |       |-ImplicitCastExpr 0x5590ecf5ce60 <col:35> 'StkId':'TValue *' <LValueToRValue>
    |       | `-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    |       `-IntegerLiteral 0x5590ecf5ce40 <col:38> 'int' 2
    `-ImplicitCastExpr 0x5590ecf5cfd0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
      `-ParenExpr 0x5590ecf5cfb0 <col:16, col:25> 'void *'
        `-CStyleCastExpr 0x5590ecf5cf88 <col:17, col:24> 'void *' <NullToPointer>
          `-IntegerLiteral 0x5590ecf5cf50 <col:24> 'int' 0
[B47.6] || ([B46.15])
   2: UnaryOperator 0x5590ecf5d098 <lvm.c:675:18, ./lvm.h:19:62> 'int' prefix '!'
`-ParenExpr 0x5590ecf5d078 <line:18:23, line:19:62> 'int'
  `-BinaryOperator 0x5590ecf5d050 <./lobject.h:90:18, ./lvm.h:19:61> 'int' '||'
    |-BinaryOperator 0x5590ecf5cd58 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
    | |-ImplicitCastExpr 0x5590ecf5cd40 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    | | `-ParenExpr 0x5590ecf5cd00 <col:18, col:26> 'const int' lvalue
    | |   `-MemberExpr 0x5590ecf5ccc8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    | |     `-ImplicitCastExpr 0x5590ecf5ccb0 <col:19, col:21> 'const TValue *' <LValueToRValue>
    | |       `-ParenExpr 0x5590ecf5cc90 <col:19, col:21> 'const TValue *' lvalue
    | |         `-DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
    | `-IntegerLiteral 0x5590ecf5cd20 <./lua.h:77:22> 'int' 3
    `-ParenExpr 0x5590ecf5d010 <./lvm.h:19:26, col:61> 'int'
      `-BinaryOperator 0x5590ecf5cfe8 <col:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
        |-ParenExpr 0x5590ecf5cf30 <./lvm.h:19:27, col:52> 'const TValue *'
        | `-BinaryOperator 0x5590ecf5cf08 <col:28, col:51> 'const TValue *' '='
        |   |-ParenExpr 0x5590ecf5cda8 <col:28, col:30> 'const TValue *' lvalue
        |   | `-DeclRefExpr 0x5590ecf5cd80 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
        |   `-CallExpr 0x5590ecf5ceb8 <./lvm.h:19:34, col:51> 'const TValue *'
        |     |-ImplicitCastExpr 0x5590ecf5cea0 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x5590ecf5cdc8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
        |     |-ImplicitCastExpr 0x5590ecf5cef0 <lvm.c:675:28> 'const TValue *' <LValueToRValue>
        |     | `-DeclRefExpr 0x5590ecf5cdf0 <col:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
        |     `-BinaryOperator 0x5590ecf5ce78 <col:35, col:38> 'StkId':'TValue *' '+'
        |       |-ImplicitCastExpr 0x5590ecf5ce60 <col:35> 'StkId':'TValue *' <LValueToRValue>
        |       | `-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
        |       `-IntegerLiteral 0x5590ecf5ce40 <col:38> 'int' 2
        `-ImplicitCastExpr 0x5590ecf5cfd0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
          `-ParenExpr 0x5590ecf5cfb0 <col:16, col:25> 'void *'
            `-CStyleCastExpr 0x5590ecf5cf88 <col:17, col:24> 'void *' <NullToPointer>
              `-IntegerLiteral 0x5590ecf5cf50 <col:24> 'int' 0
!([B45.1])
   T: if [B45.2]
   Preds (2): B46 B47
   Succs (2): B44 B43

 [B46]
   1: DeclRefExpr 0x5590ecf5cdc8 <./lvm.h:19:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
luaV_tonumber
   2: ImplicitCastExpr 0x5590ecf5cea0 <./lvm.h:19:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5cdc8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
[B46.1] (ImplicitCastExpr, FunctionToPointerDecay, const TValue *(*)(const TValue *, TValue *))
   3: DeclRefExpr 0x5590ecf5cdf0 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
pstep
   4: ImplicitCastExpr 0x5590ecf5cef0 <lvm.c:675:28> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5cdf0 <col:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
[B46.3] (ImplicitCastExpr, LValueToRValue, const TValue *)
   5: DeclRefExpr 0x5590ecf5ce18 <lvm.c:675:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf5ce60 <lvm.c:675:35> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B46.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: IntegerLiteral 0x5590ecf5ce40 <lvm.c:675:38> 'int' 2
2
   8: BinaryOperator 0x5590ecf5ce78 <lvm.c:675:35, col:38> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5ce60 <col:35> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5ce40 <col:38> 'int' 2
[B46.6] + [B46.7]
   9: CallExpr 0x5590ecf5ceb8 <./lvm.h:19:34, col:51> 'const TValue *'
|-ImplicitCastExpr 0x5590ecf5cea0 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5cdc8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|-ImplicitCastExpr 0x5590ecf5cef0 <lvm.c:675:28> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5cdf0 <col:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
`-BinaryOperator 0x5590ecf5ce78 <col:35, col:38> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf5ce60 <col:35> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-IntegerLiteral 0x5590ecf5ce40 <col:38> 'int' 2
[B46.2]([B46.4], [B46.8])
  10: DeclRefExpr 0x5590ecf5cd80 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
pstep
  11: BinaryOperator 0x5590ecf5cf08 <./lvm.h:19:28, col:51> 'const TValue *' '='
|-ParenExpr 0x5590ecf5cda8 <col:28, col:30> 'const TValue *' lvalue
| `-DeclRefExpr 0x5590ecf5cd80 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
`-CallExpr 0x5590ecf5ceb8 <./lvm.h:19:34, col:51> 'const TValue *'
  |-ImplicitCastExpr 0x5590ecf5cea0 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf5cdc8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
  |-ImplicitCastExpr 0x5590ecf5cef0 <lvm.c:675:28> 'const TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5cdf0 <col:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
  `-BinaryOperator 0x5590ecf5ce78 <col:35, col:38> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5ce60 <col:35> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5ce40 <col:38> 'int' 2
([B46.10]) = [B46.9]
  12: IntegerLiteral 0x5590ecf5cf50 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf5cf88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x5590ecf5cf50 <col:24> 'int' 0
(void *)[B46.12] (CStyleCastExpr, NullToPointer, void *)
  14: ImplicitCastExpr 0x5590ecf5cfd0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf5cfb0 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x5590ecf5cf88 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x5590ecf5cf50 <col:24> 'int' 0
([B46.13]) (ImplicitCastExpr, BitCast, const TValue *)
  15: BinaryOperator 0x5590ecf5cfe8 <./lvm.h:19:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ParenExpr 0x5590ecf5cf30 <./lvm.h:19:27, col:52> 'const TValue *'
| `-BinaryOperator 0x5590ecf5cf08 <col:28, col:51> 'const TValue *' '='
|   |-ParenExpr 0x5590ecf5cda8 <col:28, col:30> 'const TValue *' lvalue
|   | `-DeclRefExpr 0x5590ecf5cd80 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
|   `-CallExpr 0x5590ecf5ceb8 <./lvm.h:19:34, col:51> 'const TValue *'
|     |-ImplicitCastExpr 0x5590ecf5cea0 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5590ecf5cdc8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|     |-ImplicitCastExpr 0x5590ecf5cef0 <lvm.c:675:28> 'const TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf5cdf0 <col:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
|     `-BinaryOperator 0x5590ecf5ce78 <col:35, col:38> 'StkId':'TValue *' '+'
|       |-ImplicitCastExpr 0x5590ecf5ce60 <col:35> 'StkId':'TValue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5590ecf5ce18 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|       `-IntegerLiteral 0x5590ecf5ce40 <col:38> 'int' 2
`-ImplicitCastExpr 0x5590ecf5cfd0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
  `-ParenExpr 0x5590ecf5cfb0 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x5590ecf5cf88 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x5590ecf5cf50 <col:24> 'int' 0
([B46.11]) != [B46.14]
   Preds (1): B47
   Succs (1): B45

 [B47]
   1: DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
pstep
   2: ImplicitCastExpr 0x5590ecf5ccb0 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5cc90 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
([B47.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5590ecf5ccc8 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5ccb0 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5cc90 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
[B47.2]->tt
   4: ImplicitCastExpr 0x5590ecf5cd40 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf5cd00 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5590ecf5ccc8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf5ccb0 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf5cc90 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
([B47.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf5cd20 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf5cd58 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf5cd40 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5cd00 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5590ecf5ccc8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf5ccb0 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf5cc90 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf5cc68 <lvm.c:675:28> 'const TValue *' lvalue Var 0x5590ecf5bf60 'pstep' 'const TValue *'
`-IntegerLiteral 0x5590ecf5cd20 <./lua.h:77:22> 'int' 3
[B47.4] == [B47.5]
   T: [B47.6] || ...
   Preds (1): B49
   Succs (2): B45 B46

 [B48]
   1: DeclRefExpr 0x5590ecf5caf0 <lvm.c:674:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
luaG_runerror
   2: ImplicitCastExpr 0x5590ecf5cbd0 <lvm.c:674:11> 'void (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5caf0 <col:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
[B48.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const char *, ...))
   3: DeclRefExpr 0x5590ecf5cb18 <lvm.c:674:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf5cc20 <lvm.c:674:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5cb18 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B48.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: StringLiteral 0x5590ecf5cb78 <./luaconf.h:201:19, lvm.c:674:42> 'char [29]' lvalue "'for' limit must be a number"
"'for' limit must be a number"
   6: ImplicitCastExpr 0x5590ecf5cc38 <./luaconf.h:201:19, lvm.c:674:42> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5590ecf5cb78 <./luaconf.h:201:19, lvm.c:674:42> 'char [29]' lvalue "'for' limit must be a number"
[B48.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x5590ecf5cc50 <./luaconf.h:201:19, lvm.c:674:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5590ecf5cc38 <./luaconf.h:201:19, lvm.c:674:42> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5590ecf5cb78 <./luaconf.h:201:19, lvm.c:674:42> 'char [29]' lvalue "'for' limit must be a number"
[B48.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x5590ecf5cbe8 <lvm.c:674:11, col:67> 'void'
|-ImplicitCastExpr 0x5590ecf5cbd0 <col:11> 'void (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5caf0 <col:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x5590ecf5cc20 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5cb18 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5cc50 <./luaconf.h:201:19, lvm.c:674:42> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5590ecf5cc38 <./luaconf.h:201:19, lvm.c:674:42> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5590ecf5cb78 <./luaconf.h:201:19, lvm.c:674:42> 'char [29]' lvalue "'for' limit must be a number"
[B48.2]([B48.4], [B48.7])
   Preds (1): B49
   Succs (1): B43

 [B49]
   1: BinaryOperator 0x5590ecf5ca88 <./lobject.h:90:18, ./lvm.h:19:61> 'int' '||'
|-BinaryOperator 0x5590ecf5c7b0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
| |-ImplicitCastExpr 0x5590ecf5c798 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| | `-ParenExpr 0x5590ecf5c758 <col:18, col:26> 'const int' lvalue
| |   `-MemberExpr 0x5590ecf5c720 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
| |     `-ImplicitCastExpr 0x5590ecf5c708 <col:19, col:21> 'const TValue *' <LValueToRValue>
| |       `-ParenExpr 0x5590ecf5c6e8 <col:19, col:21> 'const TValue *' lvalue
| |         `-DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
| `-IntegerLiteral 0x5590ecf5c778 <./lua.h:77:22> 'int' 3
`-ParenExpr 0x5590ecf5ca68 <./lvm.h:19:26, col:61> 'int'
  `-BinaryOperator 0x5590ecf5ca40 <col:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
    |-ParenExpr 0x5590ecf5c988 <./lvm.h:19:27, col:52> 'const TValue *'
    | `-BinaryOperator 0x5590ecf5c960 <col:28, col:51> 'const TValue *' '='
    |   |-ParenExpr 0x5590ecf5c800 <col:28, col:30> 'const TValue *' lvalue
    |   | `-DeclRefExpr 0x5590ecf5c7d8 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
    |   `-CallExpr 0x5590ecf5c910 <./lvm.h:19:34, col:51> 'const TValue *'
    |     |-ImplicitCastExpr 0x5590ecf5c8f8 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5590ecf5c820 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
    |     |-ImplicitCastExpr 0x5590ecf5c948 <lvm.c:673:28> 'const TValue *' <LValueToRValue>
    |     | `-DeclRefExpr 0x5590ecf5c848 <col:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
    |     `-BinaryOperator 0x5590ecf5c8d0 <col:36, col:39> 'StkId':'TValue *' '+'
    |       |-ImplicitCastExpr 0x5590ecf5c8b8 <col:36> 'StkId':'TValue *' <LValueToRValue>
    |       | `-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    |       `-IntegerLiteral 0x5590ecf5c898 <col:39> 'int' 1
    `-ImplicitCastExpr 0x5590ecf5ca28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
      `-ParenExpr 0x5590ecf5ca08 <col:16, col:25> 'void *'
        `-CStyleCastExpr 0x5590ecf5c9e0 <col:17, col:24> 'void *' <NullToPointer>
          `-IntegerLiteral 0x5590ecf5c9a8 <col:24> 'int' 0
[B51.6] || ([B50.15])
   2: UnaryOperator 0x5590ecf5cad0 <lvm.c:673:18, ./lvm.h:19:62> 'int' prefix '!'
`-ParenExpr 0x5590ecf5cab0 <line:18:23, line:19:62> 'int'
  `-BinaryOperator 0x5590ecf5ca88 <./lobject.h:90:18, ./lvm.h:19:61> 'int' '||'
    |-BinaryOperator 0x5590ecf5c7b0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
    | |-ImplicitCastExpr 0x5590ecf5c798 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    | | `-ParenExpr 0x5590ecf5c758 <col:18, col:26> 'const int' lvalue
    | |   `-MemberExpr 0x5590ecf5c720 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    | |     `-ImplicitCastExpr 0x5590ecf5c708 <col:19, col:21> 'const TValue *' <LValueToRValue>
    | |       `-ParenExpr 0x5590ecf5c6e8 <col:19, col:21> 'const TValue *' lvalue
    | |         `-DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
    | `-IntegerLiteral 0x5590ecf5c778 <./lua.h:77:22> 'int' 3
    `-ParenExpr 0x5590ecf5ca68 <./lvm.h:19:26, col:61> 'int'
      `-BinaryOperator 0x5590ecf5ca40 <col:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
        |-ParenExpr 0x5590ecf5c988 <./lvm.h:19:27, col:52> 'const TValue *'
        | `-BinaryOperator 0x5590ecf5c960 <col:28, col:51> 'const TValue *' '='
        |   |-ParenExpr 0x5590ecf5c800 <col:28, col:30> 'const TValue *' lvalue
        |   | `-DeclRefExpr 0x5590ecf5c7d8 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
        |   `-CallExpr 0x5590ecf5c910 <./lvm.h:19:34, col:51> 'const TValue *'
        |     |-ImplicitCastExpr 0x5590ecf5c8f8 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x5590ecf5c820 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
        |     |-ImplicitCastExpr 0x5590ecf5c948 <lvm.c:673:28> 'const TValue *' <LValueToRValue>
        |     | `-DeclRefExpr 0x5590ecf5c848 <col:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
        |     `-BinaryOperator 0x5590ecf5c8d0 <col:36, col:39> 'StkId':'TValue *' '+'
        |       |-ImplicitCastExpr 0x5590ecf5c8b8 <col:36> 'StkId':'TValue *' <LValueToRValue>
        |       | `-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
        |       `-IntegerLiteral 0x5590ecf5c898 <col:39> 'int' 1
        `-ImplicitCastExpr 0x5590ecf5ca28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
          `-ParenExpr 0x5590ecf5ca08 <col:16, col:25> 'void *'
            `-CStyleCastExpr 0x5590ecf5c9e0 <col:17, col:24> 'void *' <NullToPointer>
              `-IntegerLiteral 0x5590ecf5c9a8 <col:24> 'int' 0
!([B49.1])
   T: if [B49.2]
   Preds (2): B50 B51
   Succs (2): B48 B47

 [B50]
   1: DeclRefExpr 0x5590ecf5c820 <./lvm.h:19:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
luaV_tonumber
   2: ImplicitCastExpr 0x5590ecf5c8f8 <./lvm.h:19:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5c820 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
[B50.1] (ImplicitCastExpr, FunctionToPointerDecay, const TValue *(*)(const TValue *, TValue *))
   3: DeclRefExpr 0x5590ecf5c848 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
plimit
   4: ImplicitCastExpr 0x5590ecf5c948 <lvm.c:673:28> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c848 <col:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
[B50.3] (ImplicitCastExpr, LValueToRValue, const TValue *)
   5: DeclRefExpr 0x5590ecf5c870 <lvm.c:673:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf5c8b8 <lvm.c:673:36> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B50.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: IntegerLiteral 0x5590ecf5c898 <lvm.c:673:39> 'int' 1
1
   8: BinaryOperator 0x5590ecf5c8d0 <lvm.c:673:36, col:39> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5c8b8 <col:36> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5c898 <col:39> 'int' 1
[B50.6] + [B50.7]
   9: CallExpr 0x5590ecf5c910 <./lvm.h:19:34, col:51> 'const TValue *'
|-ImplicitCastExpr 0x5590ecf5c8f8 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5c820 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|-ImplicitCastExpr 0x5590ecf5c948 <lvm.c:673:28> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5c848 <col:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
`-BinaryOperator 0x5590ecf5c8d0 <col:36, col:39> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf5c8b8 <col:36> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-IntegerLiteral 0x5590ecf5c898 <col:39> 'int' 1
[B50.2]([B50.4], [B50.8])
  10: DeclRefExpr 0x5590ecf5c7d8 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
plimit
  11: BinaryOperator 0x5590ecf5c960 <./lvm.h:19:28, col:51> 'const TValue *' '='
|-ParenExpr 0x5590ecf5c800 <col:28, col:30> 'const TValue *' lvalue
| `-DeclRefExpr 0x5590ecf5c7d8 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
`-CallExpr 0x5590ecf5c910 <./lvm.h:19:34, col:51> 'const TValue *'
  |-ImplicitCastExpr 0x5590ecf5c8f8 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf5c820 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
  |-ImplicitCastExpr 0x5590ecf5c948 <lvm.c:673:28> 'const TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5c848 <col:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
  `-BinaryOperator 0x5590ecf5c8d0 <col:36, col:39> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5c8b8 <col:36> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5c898 <col:39> 'int' 1
([B50.10]) = [B50.9]
  12: IntegerLiteral 0x5590ecf5c9a8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf5c9e0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x5590ecf5c9a8 <col:24> 'int' 0
(void *)[B50.12] (CStyleCastExpr, NullToPointer, void *)
  14: ImplicitCastExpr 0x5590ecf5ca28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf5ca08 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x5590ecf5c9e0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x5590ecf5c9a8 <col:24> 'int' 0
([B50.13]) (ImplicitCastExpr, BitCast, const TValue *)
  15: BinaryOperator 0x5590ecf5ca40 <./lvm.h:19:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ParenExpr 0x5590ecf5c988 <./lvm.h:19:27, col:52> 'const TValue *'
| `-BinaryOperator 0x5590ecf5c960 <col:28, col:51> 'const TValue *' '='
|   |-ParenExpr 0x5590ecf5c800 <col:28, col:30> 'const TValue *' lvalue
|   | `-DeclRefExpr 0x5590ecf5c7d8 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
|   `-CallExpr 0x5590ecf5c910 <./lvm.h:19:34, col:51> 'const TValue *'
|     |-ImplicitCastExpr 0x5590ecf5c8f8 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5590ecf5c820 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|     |-ImplicitCastExpr 0x5590ecf5c948 <lvm.c:673:28> 'const TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf5c848 <col:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
|     `-BinaryOperator 0x5590ecf5c8d0 <col:36, col:39> 'StkId':'TValue *' '+'
|       |-ImplicitCastExpr 0x5590ecf5c8b8 <col:36> 'StkId':'TValue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5590ecf5c870 <col:36> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|       `-IntegerLiteral 0x5590ecf5c898 <col:39> 'int' 1
`-ImplicitCastExpr 0x5590ecf5ca28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
  `-ParenExpr 0x5590ecf5ca08 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x5590ecf5c9e0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x5590ecf5c9a8 <col:24> 'int' 0
([B50.11]) != [B50.14]
   Preds (1): B51
   Succs (1): B49

 [B51]
   1: DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
plimit
   2: ImplicitCastExpr 0x5590ecf5c708 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5c6e8 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
([B51.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5590ecf5c720 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5c708 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5c6e8 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
[B51.2]->tt
   4: ImplicitCastExpr 0x5590ecf5c798 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf5c758 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5590ecf5c720 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf5c708 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf5c6e8 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
([B51.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf5c778 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf5c7b0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf5c798 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5c758 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5590ecf5c720 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf5c708 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf5c6e8 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf5c6c0 <lvm.c:673:28> 'const TValue *' lvalue Var 0x5590ecf5be38 'plimit' 'const TValue *'
`-IntegerLiteral 0x5590ecf5c778 <./lua.h:77:22> 'int' 3
[B51.4] == [B51.5]
   T: [B51.6] || ...
   Preds (1): B53
   Succs (2): B49 B50

 [B52]
   1: DeclRefExpr 0x5590ecf5c540 <lvm.c:672:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
luaG_runerror
   2: ImplicitCastExpr 0x5590ecf5c628 <lvm.c:672:11> 'void (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5c540 <col:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
[B52.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const char *, ...))
   3: DeclRefExpr 0x5590ecf5c568 <lvm.c:672:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf5c678 <lvm.c:672:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c568 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B52.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: StringLiteral 0x5590ecf5c5c8 <./luaconf.h:201:19, lvm.c:672:42> 'char [37]' lvalue "'for' initial value must be a number"
"'for' initial value must be a number"
   6: ImplicitCastExpr 0x5590ecf5c690 <./luaconf.h:201:19, lvm.c:672:42> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5590ecf5c5c8 <./luaconf.h:201:19, lvm.c:672:42> 'char [37]' lvalue "'for' initial value must be a number"
[B52.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x5590ecf5c6a8 <./luaconf.h:201:19, lvm.c:672:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5590ecf5c690 <./luaconf.h:201:19, lvm.c:672:42> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5590ecf5c5c8 <./luaconf.h:201:19, lvm.c:672:42> 'char [37]' lvalue "'for' initial value must be a number"
[B52.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x5590ecf5c640 <lvm.c:672:11, col:75> 'void'
|-ImplicitCastExpr 0x5590ecf5c628 <col:11> 'void (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5c540 <col:11> 'void (lua_State *, const char *, ...)' Function 0x5590ecea4d80 'luaG_runerror' 'void (lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x5590ecf5c678 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5c568 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5c6a8 <./luaconf.h:201:19, lvm.c:672:42> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5590ecf5c690 <./luaconf.h:201:19, lvm.c:672:42> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5590ecf5c5c8 <./luaconf.h:201:19, lvm.c:672:42> 'char [37]' lvalue "'for' initial value must be a number"
[B52.2]([B52.4], [B52.7])
   Preds (1): B53
   Succs (1): B43

 [B53]
   1: BinaryOperator 0x5590ecf5c4d8 <./lobject.h:90:18, ./lvm.h:19:61> 'int' '||'
|-BinaryOperator 0x5590ecf5c248 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
| |-ImplicitCastExpr 0x5590ecf5c230 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| | `-ParenExpr 0x5590ecf5c1f0 <col:18, col:26> 'const int' lvalue
| |   `-MemberExpr 0x5590ecf5c1b8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
| |     `-ImplicitCastExpr 0x5590ecf5c1a0 <col:19, col:21> 'const TValue *' <LValueToRValue>
| |       `-ParenExpr 0x5590ecf5c180 <col:19, col:21> 'const TValue *' lvalue
| |         `-DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
| `-IntegerLiteral 0x5590ecf5c210 <./lua.h:77:22> 'int' 3
`-ParenExpr 0x5590ecf5c4b8 <./lvm.h:19:26, col:61> 'int'
  `-BinaryOperator 0x5590ecf5c490 <col:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
    |-ParenExpr 0x5590ecf5c3d8 <./lvm.h:19:27, col:52> 'const TValue *'
    | `-BinaryOperator 0x5590ecf5c3b0 <col:28, col:51> 'const TValue *' '='
    |   |-ParenExpr 0x5590ecf5c298 <col:28, col:30> 'const TValue *' lvalue
    |   | `-DeclRefExpr 0x5590ecf5c270 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
    |   `-CallExpr 0x5590ecf5c348 <./lvm.h:19:34, col:51> 'const TValue *'
    |     |-ImplicitCastExpr 0x5590ecf5c330 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5590ecf5c2b8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
    |     |-ImplicitCastExpr 0x5590ecf5c380 <lvm.c:671:23> 'const TValue *' <LValueToRValue>
    |     | `-DeclRefExpr 0x5590ecf5c2e0 <col:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
    |     `-ImplicitCastExpr 0x5590ecf5c398 <col:29> 'StkId':'TValue *' <LValueToRValue>
    |       `-DeclRefExpr 0x5590ecf5c308 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-ImplicitCastExpr 0x5590ecf5c478 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
      `-ParenExpr 0x5590ecf5c458 <col:16, col:25> 'void *'
        `-CStyleCastExpr 0x5590ecf5c430 <col:17, col:24> 'void *' <NullToPointer>
          `-IntegerLiteral 0x5590ecf5c3f8 <col:24> 'int' 0
[B55.28] || ([B54.13])
   2: UnaryOperator 0x5590ecf5c520 <lvm.c:671:13, ./lvm.h:19:62> 'int' prefix '!'
`-ParenExpr 0x5590ecf5c500 <line:18:23, line:19:62> 'int'
  `-BinaryOperator 0x5590ecf5c4d8 <./lobject.h:90:18, ./lvm.h:19:61> 'int' '||'
    |-BinaryOperator 0x5590ecf5c248 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
    | |-ImplicitCastExpr 0x5590ecf5c230 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    | | `-ParenExpr 0x5590ecf5c1f0 <col:18, col:26> 'const int' lvalue
    | |   `-MemberExpr 0x5590ecf5c1b8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    | |     `-ImplicitCastExpr 0x5590ecf5c1a0 <col:19, col:21> 'const TValue *' <LValueToRValue>
    | |       `-ParenExpr 0x5590ecf5c180 <col:19, col:21> 'const TValue *' lvalue
    | |         `-DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
    | `-IntegerLiteral 0x5590ecf5c210 <./lua.h:77:22> 'int' 3
    `-ParenExpr 0x5590ecf5c4b8 <./lvm.h:19:26, col:61> 'int'
      `-BinaryOperator 0x5590ecf5c490 <col:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
        |-ParenExpr 0x5590ecf5c3d8 <./lvm.h:19:27, col:52> 'const TValue *'
        | `-BinaryOperator 0x5590ecf5c3b0 <col:28, col:51> 'const TValue *' '='
        |   |-ParenExpr 0x5590ecf5c298 <col:28, col:30> 'const TValue *' lvalue
        |   | `-DeclRefExpr 0x5590ecf5c270 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
        |   `-CallExpr 0x5590ecf5c348 <./lvm.h:19:34, col:51> 'const TValue *'
        |     |-ImplicitCastExpr 0x5590ecf5c330 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x5590ecf5c2b8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
        |     |-ImplicitCastExpr 0x5590ecf5c380 <lvm.c:671:23> 'const TValue *' <LValueToRValue>
        |     | `-DeclRefExpr 0x5590ecf5c2e0 <col:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
        |     `-ImplicitCastExpr 0x5590ecf5c398 <col:29> 'StkId':'TValue *' <LValueToRValue>
        |       `-DeclRefExpr 0x5590ecf5c308 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
        `-ImplicitCastExpr 0x5590ecf5c478 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
          `-ParenExpr 0x5590ecf5c458 <col:16, col:25> 'void *'
            `-CStyleCastExpr 0x5590ecf5c430 <col:17, col:24> 'void *' <NullToPointer>
              `-IntegerLiteral 0x5590ecf5c3f8 <col:24> 'int' 0
!([B53.1])
   T: if [B53.2]
   Preds (2): B54 B55
   Succs (2): B52 B51

 [B54]
   1: DeclRefExpr 0x5590ecf5c2b8 <./lvm.h:19:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
luaV_tonumber
   2: ImplicitCastExpr 0x5590ecf5c330 <./lvm.h:19:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf5c2b8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
[B54.1] (ImplicitCastExpr, FunctionToPointerDecay, const TValue *(*)(const TValue *, TValue *))
   3: DeclRefExpr 0x5590ecf5c2e0 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
init
   4: ImplicitCastExpr 0x5590ecf5c380 <lvm.c:671:23> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c2e0 <col:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
[B54.3] (ImplicitCastExpr, LValueToRValue, const TValue *)
   5: DeclRefExpr 0x5590ecf5c308 <lvm.c:671:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf5c398 <lvm.c:671:29> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c308 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B54.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: CallExpr 0x5590ecf5c348 <./lvm.h:19:34, col:51> 'const TValue *'
|-ImplicitCastExpr 0x5590ecf5c330 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf5c2b8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|-ImplicitCastExpr 0x5590ecf5c380 <lvm.c:671:23> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5c2e0 <col:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
`-ImplicitCastExpr 0x5590ecf5c398 <col:29> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5c308 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B54.2]([B54.4], [B54.6])
   8: DeclRefExpr 0x5590ecf5c270 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
init
   9: BinaryOperator 0x5590ecf5c3b0 <./lvm.h:19:28, col:51> 'const TValue *' '='
|-ParenExpr 0x5590ecf5c298 <col:28, col:30> 'const TValue *' lvalue
| `-DeclRefExpr 0x5590ecf5c270 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
`-CallExpr 0x5590ecf5c348 <./lvm.h:19:34, col:51> 'const TValue *'
  |-ImplicitCastExpr 0x5590ecf5c330 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf5c2b8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
  |-ImplicitCastExpr 0x5590ecf5c380 <lvm.c:671:23> 'const TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5c2e0 <col:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
  `-ImplicitCastExpr 0x5590ecf5c398 <col:29> 'StkId':'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5c308 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B54.8]) = [B54.7]
  10: IntegerLiteral 0x5590ecf5c3f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf5c430 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x5590ecf5c3f8 <col:24> 'int' 0
(void *)[B54.10] (CStyleCastExpr, NullToPointer, void *)
  12: ImplicitCastExpr 0x5590ecf5c478 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf5c458 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x5590ecf5c430 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x5590ecf5c3f8 <col:24> 'int' 0
([B54.11]) (ImplicitCastExpr, BitCast, const TValue *)
  13: BinaryOperator 0x5590ecf5c490 <./lvm.h:19:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ParenExpr 0x5590ecf5c3d8 <./lvm.h:19:27, col:52> 'const TValue *'
| `-BinaryOperator 0x5590ecf5c3b0 <col:28, col:51> 'const TValue *' '='
|   |-ParenExpr 0x5590ecf5c298 <col:28, col:30> 'const TValue *' lvalue
|   | `-DeclRefExpr 0x5590ecf5c270 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
|   `-CallExpr 0x5590ecf5c348 <./lvm.h:19:34, col:51> 'const TValue *'
|     |-ImplicitCastExpr 0x5590ecf5c330 <col:34> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5590ecf5c2b8 <col:34> 'const TValue *(const TValue *, TValue *)' Function 0x5590ececfd58 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|     |-ImplicitCastExpr 0x5590ecf5c380 <lvm.c:671:23> 'const TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf5c2e0 <col:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
|     `-ImplicitCastExpr 0x5590ecf5c398 <col:29> 'StkId':'TValue *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf5c308 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf5c478 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
  `-ParenExpr 0x5590ecf5c458 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x5590ecf5c430 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x5590ecf5c3f8 <col:24> 'int' 0
([B54.9]) != [B54.12]
   Preds (1): B55
   Succs (1): B53

 [B55]
  case OP_FORPREP:
   1: DeclRefExpr 0x5590ecf5bdb8 <lvm.c:667:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf5bde0 <lvm.c:667:30> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5bdb8 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B55.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: ImplicitCastExpr 0x5590ecf5bdf8 <lvm.c:667:30> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf5bde0 <col:30> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5bdb8 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B55.2] (ImplicitCastExpr, BitCast, const TValue *)
   4: DeclStmt 0x5590ecf5be10 <lvm.c:667:9, col:32>col:23
`-VarDecl 0x5590ecf5bd58 <col:9, col:30> col:23 used init 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5bdf8 <col:30> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf5bde0 <col:30> 'StkId':'TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5bdb8 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
const TValue *init = ra;
   5: DeclRefExpr 0x5590ecf5be98 <lvm.c:668:32> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf5bee0 <lvm.c:668:32> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5be98 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B55.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: IntegerLiteral 0x5590ecf5bec0 <lvm.c:668:35> 'int' 1
1
   8: BinaryOperator 0x5590ecf5bef8 <lvm.c:668:32, col:35> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5bee0 <col:32> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5be98 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5bec0 <col:35> 'int' 1
[B55.6] + [B55.7]
   9: ImplicitCastExpr 0x5590ecf5bf20 <lvm.c:668:32, col:35> 'const TValue *' <BitCast>
`-BinaryOperator 0x5590ecf5bef8 <col:32, col:35> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf5bee0 <col:32> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5be98 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-IntegerLiteral 0x5590ecf5bec0 <col:35> 'int' 1
[B55.8] (ImplicitCastExpr, BitCast, const TValue *)
  10: DeclStmt 0x5590ecf5bf38 <lvm.c:668:9, col:36>col:23
`-VarDecl 0x5590ecf5be38 <col:9, col:35> col:23 used plimit 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5bf20 <col:32, col:35> 'const TValue *' <BitCast>
    `-BinaryOperator 0x5590ecf5bef8 <col:32, col:35> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5bee0 <col:32> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5be98 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5bec0 <col:35> 'int' 1
const TValue *plimit = ra + 1;
  11: DeclRefExpr 0x5590ecf5bfc0 <lvm.c:669:31> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf5c008 <lvm.c:669:31> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5bfc0 <col:31> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B55.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: IntegerLiteral 0x5590ecf5bfe8 <lvm.c:669:34> 'int' 2
2
  14: BinaryOperator 0x5590ecf5c020 <lvm.c:669:31, col:34> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5c008 <col:31> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5bfc0 <col:31> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5bfe8 <col:34> 'int' 2
[B55.12] + [B55.13]
  15: ImplicitCastExpr 0x5590ecf5c048 <lvm.c:669:31, col:34> 'const TValue *' <BitCast>
`-BinaryOperator 0x5590ecf5c020 <col:31, col:34> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf5c008 <col:31> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf5bfc0 <col:31> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-IntegerLiteral 0x5590ecf5bfe8 <col:34> 'int' 2
[B55.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclStmt 0x5590ecf5c060 <lvm.c:669:9, col:35>col:23
`-VarDecl 0x5590ecf5bf60 <col:9, col:34> col:23 used pstep 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5c048 <col:31, col:34> 'const TValue *' <BitCast>
    `-BinaryOperator 0x5590ecf5c020 <col:31, col:34> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5c008 <col:31> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5bfc0 <col:31> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5bfe8 <col:34> 'int' 2
const TValue *pstep = ra + 2;
  17: DeclRefExpr 0x5590ecf5c0f0 <lvm.c:670:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  18: ImplicitCastExpr 0x5590ecf5c118 <lvm.c:670:22> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c0f0 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B55.17] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  19: DeclRefExpr 0x5590ecf5c078 <lvm.c:670:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  20: ImplicitCastExpr 0x5590ecf5c0a0 <lvm.c:670:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5c078 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B55.19] (ImplicitCastExpr, LValueToRValue, lua_State *)
  21: MemberExpr 0x5590ecf5c0b8 <lvm.c:670:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf5c0a0 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5c078 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B55.20]->savedpc
  22: BinaryOperator 0x5590ecf5c130 <lvm.c:670:9, col:22> 'const Instruction *' '='
|-MemberExpr 0x5590ecf5c0b8 <col:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf5c0a0 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5c078 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5c118 <col:22> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5c0f0 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B55.21] = [B55.18]
  23: DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
init
  24: ImplicitCastExpr 0x5590ecf5c1a0 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5c180 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
([B55.23]) (ImplicitCastExpr, LValueToRValue, const TValue *)
  25: MemberExpr 0x5590ecf5c1b8 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5c1a0 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5c180 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
[B55.24]->tt
  26: ImplicitCastExpr 0x5590ecf5c230 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf5c1f0 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5590ecf5c1b8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf5c1a0 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf5c180 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
([B55.25]) (ImplicitCastExpr, LValueToRValue, int)
  27: IntegerLiteral 0x5590ecf5c210 <./lua.h:77:22> 'int' 3
3
  28: BinaryOperator 0x5590ecf5c248 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf5c230 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5c1f0 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5590ecf5c1b8 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf5c1a0 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf5c180 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf5c158 <lvm.c:671:23> 'const TValue *' lvalue Var 0x5590ecf5bd58 'init' 'const TValue *'
`-IntegerLiteral 0x5590ecf5c210 <./lua.h:77:22> 'int' 3
[B55.26] == [B55.27]
   T: [B55.28] || ...
   Preds (1): B2
   Succs (2): B53 B54

 [B56]
   T: continue;
   Preds (2): B57 B58
   Succs (1): B1

 [B57]
   1: DeclRefExpr 0x5590ecf5acf0 <lvm.c:660:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   3: ImplicitCastExpr 0x5590ecf5ae70 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf5ad60 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B57.2]) (ImplicitCastExpr, LValueToRValue, Instruction)
   4: IntegerLiteral 0x5590ecf5ad80 <./lopcodes.h:44:17> 'int' 0
0
   5: IntegerLiteral 0x5590ecf5ada0 <./lopcodes.h:42:18> 'int' 6
6
   6: BinaryOperator 0x5590ecf5adc0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
[B57.4] + [B57.5]
   7: IntegerLiteral 0x5590ecf5ae08 <./lopcodes.h:40:17> 'int' 8
8
   8: BinaryOperator 0x5590ecf5ae28 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf5ade8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf5adc0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf5ae08 <line:40:17> 'int' 8
([B57.6]) + [B57.7]
   9: BinaryOperator 0x5590ecf5ae88 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf5ae70 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf5ad60 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf5ae50 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf5ae28 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf5ade8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf5adc0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf5ae08 <line:40:17> 'int' 8
[B57.3] >> ([B57.8])
  10: IntegerLiteral 0x5590ecf5aed0 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf5af00 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
(Instruction)[B57.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf5af28 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
~[B57.11]
  13: IntegerLiteral 0x5590ecf5af68 <./lopcodes.h:37:17> 'int' 9
9
  14: IntegerLiteral 0x5590ecf5af88 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf5afa8 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
[B57.13] + [B57.14]
  16: BinaryOperator 0x5590ecf5aff0 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
`-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
([B57.12]) << ([B57.15])
  17: UnaryOperator 0x5590ecf5b060 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf5b040 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5aff0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
~([B57.16])
  18: IntegerLiteral 0x5590ecf5b0a0 <./lopcodes.h:96:63> 'int' 0
0
  19: BinaryOperator 0x5590ecf5b0c0 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf5b080 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf5b060 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf5b040 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf5aff0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf5b0a0 <line:96:63> 'int' 0
([B57.17]) << [B57.18]
  20: BinaryOperator 0x5590ecf5b108 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf5aeb0 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf5ae88 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf5ae70 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf5ad60 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf5ae50 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf5ae28 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf5ade8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf5adc0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf5ae08 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf5b0e8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf5b0c0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf5b080 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf5b060 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf5b040 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf5aff0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5b0a0 <line:96:63> 'int' 0
([B57.9]) & ([B57.19])
  21: CStyleCastExpr 0x5590ecf5b198 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf5b178 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf5b108 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf5aeb0 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf5ae88 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf5ae70 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf5ad60 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf5ae50 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf5ae28 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf5ade8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf5adc0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf5ae08 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf5b0e8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf5b0c0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf5b080 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf5b060 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf5b040 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf5aff0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf5b0a0 <line:96:63> 'int' 0
(int)([B57.20]) (CStyleCastExpr, IntegralCast, int)
  22: IntegerLiteral 0x5590ecf5b200 <./lopcodes.h:57:28> 'int' 1
1
  23: IntegerLiteral 0x5590ecf5b220 <./lopcodes.h:37:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf5b240 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5590ecf5b260 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf5b220 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf5b240 <line:38:17> 'int' 9
[B57.23] + [B57.24]
  26: BinaryOperator 0x5590ecf5b2a8 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf5b200 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf5b288 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf5b260 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf5b220 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf5b240 <line:38:17> 'int' 9
[B57.22] << ([B57.25])
  27: IntegerLiteral 0x5590ecf5b2f0 <./lopcodes.h:57:40> 'int' 1
1
  28: BinaryOperator 0x5590ecf5b310 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf5b2d0 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf5b2a8 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf5b200 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf5b288 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf5b260 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf5b220 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf5b240 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf5b2f0 <line:57:40> 'int' 1
([B57.26]) - [B57.27]
  29: IntegerLiteral 0x5590ecf5b358 <./lopcodes.h:58:39> 'int' 1
1
  30: BinaryOperator 0x5590ecf5b378 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf5b338 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf5b310 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf5b2d0 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf5b2a8 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf5b200 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf5b288 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf5b260 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf5b220 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf5b240 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf5b2f0 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf5b358 <line:58:39> 'int' 1
([B57.28]) >> [B57.29]
  31: BinaryOperator 0x5590ecf5b3c0 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf5b1e0 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf5b1c0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf5b198 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf5b178 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf5b108 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf5aeb0 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf5ae88 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf5ae70 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf5ad60 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|         |   `-ParenExpr 0x5590ecf5ae50 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf5ae28 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf5ade8 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf5adc0 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf5ae08 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf5b0e8 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf5b0c0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf5b080 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf5b060 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf5b040 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf5aff0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf5b0a0 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf5b3a0 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf5b378 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf5b338 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf5b310 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf5b2d0 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf5b2a8 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf5b200 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf5b288 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf5b260 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf5b220 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf5b240 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf5b2f0 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf5b358 <line:58:39> 'int' 1
(([B57.21])) - ([B57.30])
  32: CompoundAssignOperator 0x5590ecf5b428 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf5ad18 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf5acf0 <line:660:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf5b408 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf5b3e8 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf5b3c0 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf5b1e0 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf5b1c0 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf5b198 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf5b178 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf5b108 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf5aeb0 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf5ae88 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf5ae70 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf5ad60 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-DeclRefExpr 0x5590ecf5ad38 <lvm.c:660:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |         |   `-ParenExpr 0x5590ecf5ae50 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf5ae28 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf5ade8 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf5adc0 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf5ad80 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf5ada0 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf5ae08 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf5b0e8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf5b0c0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf5b080 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf5b060 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf5b040 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf5aff0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf5af48 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf5af28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf5af00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf5aed0 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf5afd0 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf5afa8 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf5af68 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf5af88 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf5b0a0 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf5b3a0 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf5b378 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf5b338 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf5b310 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf5b2d0 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf5b2a8 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf5b200 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf5b288 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf5b260 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf5b220 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf5b240 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf5b2f0 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf5b358 <line:58:39> 'int' 1
([B57.1]) += (([B57.31]))
  33: IntegerLiteral 0x5590ecf5b460 <./llimits.h:111:33> 'int' 0
0
  34: CStyleCastExpr 0x5590ecf5b490 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5b460 <col:33> 'int' 0
(void)[B57.33] (CStyleCastExpr, ToVoid, void)
  35: IntegerLiteral 0x5590ecf5b4d8 <./llimits.h:110:33> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf5b508 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5b4d8 <col:33> 'int' 0
(void)[B57.35] (CStyleCastExpr, ToVoid, void)
  37: DeclRefExpr 0x5590ecf5b628 <lvm.c:661:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  38: ImplicitCastExpr 0x5590ecf5b670 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5b650 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5b628 <lvm.c:661:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B57.37]) (ImplicitCastExpr, LValueToRValue, StkId)
  39: DeclStmt 0x5590ecf5b688 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf5b5c8 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf5b670 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf5b650 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf5b628 <lvm.c:661:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  40: DeclRefExpr 0x5590ecf5b750 <lvm.c:661:25> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
idx
  41: ImplicitCastExpr 0x5590ecf5b798 <./lobject.h:120:37, col:39> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5b778 <col:37, col:39> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5b750 <lvm.c:661:25> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
([B57.40]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  42: DeclRefExpr 0x5590ecf5b6a0 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
i_o
  43: ImplicitCastExpr 0x5590ecf5b6c8 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5b6a0 <col:24> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
[B57.42] (ImplicitCastExpr, LValueToRValue, TValue *)
  44: MemberExpr 0x5590ecf5b6e0 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5b6c8 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5b6a0 <col:24> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
[B57.43]->value
  45: MemberExpr 0x5590ecf5b718 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5b6e0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5b6c8 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5b6a0 <col:24> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
[B57.44].n
  46: BinaryOperator 0x5590ecf5b7b0 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf5b718 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf5b6e0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf5b6c8 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf5b6a0 <col:24> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5b798 <col:37, col:39> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5b778 <col:37, col:39> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf5b750 <lvm.c:661:25> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
[B57.45] = [B57.41]
  47: IntegerLiteral 0x5590ecf5b850 <./lua.h:77:22> 'int' 3
3
  48: DeclRefExpr 0x5590ecf5b7d8 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
i_o
  49: ImplicitCastExpr 0x5590ecf5b800 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5b7d8 <col:42> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
[B57.48] (ImplicitCastExpr, LValueToRValue, TValue *)
  50: MemberExpr 0x5590ecf5b818 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5b800 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5b7d8 <col:42> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
[B57.49]->tt
  51: BinaryOperator 0x5590ecf5b870 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf5b818 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf5b800 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5b7d8 <col:42> 'TValue *' lvalue Var 0x5590ecf5b5c8 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf5b850 <./lua.h:77:22> 'int' 3
[B57.50] = [B57.47]
  52: DeclRefExpr 0x5590ecf5b940 <lvm.c:662:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  53: ImplicitCastExpr 0x5590ecf5b988 <lvm.c:662:21> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5b940 <col:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B57.52] (ImplicitCastExpr, LValueToRValue, StkId)
  54: IntegerLiteral 0x5590ecf5b968 <lvm.c:662:24> 'int' 3
3
  55: BinaryOperator 0x5590ecf5b9a0 <lvm.c:662:21, col:24> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5b988 <col:21> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5b940 <col:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5b968 <col:24> 'int' 3
[B57.53] + [B57.54]
  56: DeclStmt 0x5590ecf5b9e8 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf5b8e0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ParenExpr 0x5590ecf5b9c8 <col:17, col:21> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf5b9a0 <lvm.c:662:21, col:24> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5b988 <col:21> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5b940 <col:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5b968 <col:24> 'int' 3
TValue *i_o = (ra + 3);
  57: DeclRefExpr 0x5590ecf5bab0 <lvm.c:662:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
idx
  58: ImplicitCastExpr 0x5590ecf5baf8 <./lobject.h:120:37, col:39> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5bad8 <col:37, col:39> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5bab0 <lvm.c:662:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
([B57.57]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  59: DeclRefExpr 0x5590ecf5ba00 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
i_o
  60: ImplicitCastExpr 0x5590ecf5ba28 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5ba00 <col:24> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
[B57.59] (ImplicitCastExpr, LValueToRValue, TValue *)
  61: MemberExpr 0x5590ecf5ba40 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5ba28 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5ba00 <col:24> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
[B57.60]->value
  62: MemberExpr 0x5590ecf5ba78 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5ba40 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5ba28 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5ba00 <col:24> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
[B57.61].n
  63: BinaryOperator 0x5590ecf5bb10 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf5ba78 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf5ba40 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf5ba28 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf5ba00 <col:24> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
`-ImplicitCastExpr 0x5590ecf5baf8 <col:37, col:39> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5bad8 <col:37, col:39> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf5bab0 <lvm.c:662:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
[B57.62] = [B57.58]
  64: IntegerLiteral 0x5590ecf5bbb0 <./lua.h:77:22> 'int' 3
3
  65: DeclRefExpr 0x5590ecf5bb38 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
i_o
  66: ImplicitCastExpr 0x5590ecf5bb60 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5bb38 <col:42> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
[B57.65] (ImplicitCastExpr, LValueToRValue, TValue *)
  67: MemberExpr 0x5590ecf5bb78 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf5bb60 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5bb38 <col:42> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
[B57.66]->tt
  68: BinaryOperator 0x5590ecf5bbd0 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf5bb78 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf5bb60 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf5bb38 <col:42> 'TValue *' lvalue Var 0x5590ecf5b8e0 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf5bbb0 <./lua.h:77:22> 'int' 3
[B57.67] = [B57.64]
   Preds (1): B58
   Succs (1): B56

 [B58]
   1: ConditionalOperator 0x5590ecf5acc0 <./luaconf.h:541:26, line:542:35> 'int'
|-ParenExpr 0x5590ecf5aa90 <line:541:26, col:34> 'int'
| `-BinaryOperator 0x5590ecf5aa68 <col:27, col:33> 'int' '<'
|   |-ImplicitCastExpr 0x5590ecf5aa50 <col:27, col:29> 'double' <IntegralToFloating>
|   | `-ParenExpr 0x5590ecf5a9d0 <col:27, col:29> 'int'
|   |   `-IntegerLiteral 0x5590ecf5a9b0 <lvm.c:658:24> 'int' 0
|   `-ImplicitCastExpr 0x5590ecf5aa38 <./luaconf.h:541:31, col:33> 'lua_Number':'double' <LValueToRValue>
|     `-ParenExpr 0x5590ecf5aa18 <col:31, col:33> 'lua_Number':'double' lvalue
|       `-DeclRefExpr 0x5590ecf5a9f0 <lvm.c:658:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
|-ParenExpr 0x5590ecf5ab98 <./luaconf.h:542:26, col:35> 'int'
| `-BinaryOperator 0x5590ecf5ab70 <col:27, col:34> 'int' '<='
|   |-ImplicitCastExpr 0x5590ecf5ab40 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf5aad8 <col:27, col:29> 'lua_Number':'double' lvalue
|   |   `-DeclRefExpr 0x5590ecf5aab0 <lvm.c:658:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
|   `-ImplicitCastExpr 0x5590ecf5ab58 <./luaconf.h:542:32, col:34> 'lua_Number':'double' <LValueToRValue>
|     `-ParenExpr 0x5590ecf5ab20 <col:32, col:34> 'lua_Number':'double' lvalue
|       `-DeclRefExpr 0x5590ecf5aaf8 <lvm.c:658:51> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
`-ParenExpr 0x5590ecf5aca0 <./luaconf.h:542:26, col:35> 'int'
  `-BinaryOperator 0x5590ecf5ac78 <col:27, col:34> 'int' '<='
    |-ImplicitCastExpr 0x5590ecf5ac48 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
    | `-ParenExpr 0x5590ecf5abe0 <col:27, col:29> 'lua_Number':'double' lvalue
    |   `-DeclRefExpr 0x5590ecf5abb8 <lvm.c:659:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
    `-ImplicitCastExpr 0x5590ecf5ac60 <./luaconf.h:542:32, col:34> 'lua_Number':'double' <LValueToRValue>
      `-ParenExpr 0x5590ecf5ac28 <col:32, col:34> 'lua_Number':'double' lvalue
        `-DeclRefExpr 0x5590ecf5ac00 <lvm.c:659:53> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
([B61.30]) ? ([B59.5]) : ([B60.5])
   T: if [B58.1]
   Preds (2): B59 B60
   Succs (2): B57 B56

 [B59]
   1: DeclRefExpr 0x5590ecf5aab0 <lvm.c:658:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
idx
   2: ImplicitCastExpr 0x5590ecf5ab40 <./luaconf.h:542:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5aad8 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5aab0 <lvm.c:658:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
([B59.1]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   3: DeclRefExpr 0x5590ecf5aaf8 <lvm.c:658:51> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
limit
   4: ImplicitCastExpr 0x5590ecf5ab58 <./luaconf.h:542:32, col:34> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5ab20 <col:32, col:34> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5aaf8 <lvm.c:658:51> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
([B59.3]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   5: BinaryOperator 0x5590ecf5ab70 <./luaconf.h:542:27, col:34> 'int' '<='
|-ImplicitCastExpr 0x5590ecf5ab40 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf5aad8 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf5aab0 <lvm.c:658:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf5ab58 <./luaconf.h:542:32, col:34> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5ab20 <col:32, col:34> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf5aaf8 <lvm.c:658:51> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
[B59.2] <= [B59.4]
   Preds (1): B61
   Succs (1): B58

 [B60]
   1: DeclRefExpr 0x5590ecf5abb8 <lvm.c:659:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
limit
   2: ImplicitCastExpr 0x5590ecf5ac48 <./luaconf.h:542:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5abe0 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5abb8 <lvm.c:659:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
([B60.1]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   3: DeclRefExpr 0x5590ecf5ac00 <lvm.c:659:53> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
idx
   4: ImplicitCastExpr 0x5590ecf5ac60 <./luaconf.h:542:32, col:34> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5ac28 <col:32, col:34> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5ac00 <lvm.c:659:53> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
([B60.3]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   5: BinaryOperator 0x5590ecf5ac78 <./luaconf.h:542:27, col:34> 'int' '<='
|-ImplicitCastExpr 0x5590ecf5ac48 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf5abe0 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf5abb8 <lvm.c:659:46> 'lua_Number':'double' lvalue Var 0x5590ecf5a7e8 'limit' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf5ac60 <./luaconf.h:542:32, col:34> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5ac28 <col:32, col:34> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf5ac00 <lvm.c:659:53> 'lua_Number':'double' lvalue Var 0x5590ecf5a590 'idx' 'lua_Number':'double'
[B60.2] <= [B60.4]
   Preds (1): B61
   Succs (1): B58

 [B61]
  case OP_FORLOOP:
   1: DeclRefExpr 0x5590ecf5a418 <lvm.c:655:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf5a460 <lvm.c:655:34> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5a418 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B61.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: IntegerLiteral 0x5590ecf5a440 <lvm.c:655:37> 'int' 2
2
   4: BinaryOperator 0x5590ecf5a478 <lvm.c:655:34, col:37> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5a460 <col:34> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5a418 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5a440 <col:37> 'int' 2
[B61.2] + [B61.3]
   5: MemberExpr 0x5590ecf5a4c0 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ParenExpr 0x5590ecf5a4a0 <col:44, col:46> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf5a478 <lvm.c:655:34, col:37> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5a460 <col:34> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5a418 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5a440 <col:37> 'int' 2
([B61.4])->value
   6: MemberExpr 0x5590ecf5a4f8 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5a4c0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ParenExpr 0x5590ecf5a4a0 <col:44, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf5a478 <lvm.c:655:34, col:37> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5a460 <col:34> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5a418 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5a440 <col:37> 'int' 2
[B61.5].n
   7: ImplicitCastExpr 0x5590ecf5a550 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5a530 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf5a4f8 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf5a4c0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ParenExpr 0x5590ecf5a4a0 <col:44, col:46> 'StkId':'TValue *'
        `-BinaryOperator 0x5590ecf5a478 <lvm.c:655:34, col:37> 'StkId':'TValue *' '+'
          |-ImplicitCastExpr 0x5590ecf5a460 <col:34> 'StkId':'TValue *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecf5a418 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
          `-IntegerLiteral 0x5590ecf5a440 <col:37> 'int' 2
([B61.6]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   8: DeclStmt 0x5590ecf5a568 <lvm.c:655:9, col:39>col:20
`-VarDecl 0x5590ecf5a3b8 <col:9, ./llimits.h:63:27> lvm.c:655:20 used step 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf5a550 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf5a530 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf5a4f8 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf5a4c0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ParenExpr 0x5590ecf5a4a0 <col:44, col:46> 'StkId':'TValue *'
            `-BinaryOperator 0x5590ecf5a478 <lvm.c:655:34, col:37> 'StkId':'TValue *' '+'
              |-ImplicitCastExpr 0x5590ecf5a460 <col:34> 'StkId':'TValue *' <LValueToRValue>
              | `-DeclRefExpr 0x5590ecf5a418 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
              `-IntegerLiteral 0x5590ecf5a440 <col:37> 'int' 2
lua_Number step = ((ra + 2)->value.n);
   9: DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  10: ImplicitCastExpr 0x5590ecf5a638 <./lobject.h:93:44, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf5a618 <col:44, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B61.9]) (ImplicitCastExpr, LValueToRValue, StkId)
  11: MemberExpr 0x5590ecf5a650 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf5a638 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf5a618 <col:44, col:46> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B61.10]->value
  12: MemberExpr 0x5590ecf5a688 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5a650 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf5a638 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf5a618 <col:44, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B61.11].n
  13: ImplicitCastExpr 0x5590ecf5a748 <./luaconf.h:533:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5a6e0 <col:27, col:29> 'lua_Number':'double' lvalue
  `-ParenExpr 0x5590ecf5a6c0 <./llimits.h:63:25, col:27> 'lua_Number':'double' lvalue
    `-MemberExpr 0x5590ecf5a688 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
      `-MemberExpr 0x5590ecf5a650 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf5a638 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf5a618 <col:44, col:46> 'StkId':'TValue *' lvalue
            `-DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
(([B61.12])) (ImplicitCastExpr, LValueToRValue, lua_Number)
  14: DeclRefExpr 0x5590ecf5a700 <lvm.c:656:50> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
step
  15: ImplicitCastExpr 0x5590ecf5a760 <./luaconf.h:533:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5a728 <col:31, col:33> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5a700 <lvm.c:656:50> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
([B61.14]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  16: BinaryOperator 0x5590ecf5a778 <./luaconf.h:533:27, col:33> 'double' '+'
|-ImplicitCastExpr 0x5590ecf5a748 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf5a6e0 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-ParenExpr 0x5590ecf5a6c0 <./llimits.h:63:25, col:27> 'lua_Number':'double' lvalue
|     `-MemberExpr 0x5590ecf5a688 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
|       `-MemberExpr 0x5590ecf5a650 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
|         `-ImplicitCastExpr 0x5590ecf5a638 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
|           `-ParenExpr 0x5590ecf5a618 <col:44, col:46> 'StkId':'TValue *' lvalue
|             `-DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf5a760 <./luaconf.h:533:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5a728 <col:31, col:33> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf5a700 <lvm.c:656:50> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
[B61.13] + [B61.15]
  17: DeclStmt 0x5590ecf5a7c0 <lvm.c:656:9, col:55>col:20
`-VarDecl 0x5590ecf5a590 <col:9, ./luaconf.h:533:34> lvm.c:656:20 used idx 'lua_Number':'double' cinit
  `-ParenExpr 0x5590ecf5a7a0 <./luaconf.h:533:26, col:34> 'double'
    `-BinaryOperator 0x5590ecf5a778 <col:27, col:33> 'double' '+'
      |-ImplicitCastExpr 0x5590ecf5a748 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf5a6e0 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-ParenExpr 0x5590ecf5a6c0 <./llimits.h:63:25, col:27> 'lua_Number':'double' lvalue
      |     `-MemberExpr 0x5590ecf5a688 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
      |       `-MemberExpr 0x5590ecf5a650 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      |         `-ImplicitCastExpr 0x5590ecf5a638 <col:44, col:46> 'StkId':'TValue *' <LValueToRValue>
      |           `-ParenExpr 0x5590ecf5a618 <col:44, col:46> 'StkId':'TValue *' lvalue
      |             `-DeclRefExpr 0x5590ecf5a5f0 <lvm.c:656:45> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-ImplicitCastExpr 0x5590ecf5a760 <./luaconf.h:533:31, col:33> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf5a728 <col:31, col:33> 'lua_Number':'double' lvalue
          `-DeclRefExpr 0x5590ecf5a700 <lvm.c:656:50> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
lua_Number idx = ((((ra)->value.n)) + (step));
  18: DeclRefExpr 0x5590ecf5a848 <lvm.c:657:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  19: ImplicitCastExpr 0x5590ecf5a890 <lvm.c:657:35> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5a848 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B61.18] (ImplicitCastExpr, LValueToRValue, StkId)
  20: IntegerLiteral 0x5590ecf5a870 <lvm.c:657:38> 'int' 1
1
  21: BinaryOperator 0x5590ecf5a8a8 <lvm.c:657:35, col:38> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf5a890 <col:35> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf5a848 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf5a870 <col:38> 'int' 1
[B61.19] + [B61.20]
  22: MemberExpr 0x5590ecf5a8f0 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ParenExpr 0x5590ecf5a8d0 <col:44, col:46> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf5a8a8 <lvm.c:657:35, col:38> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf5a890 <col:35> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf5a848 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    `-IntegerLiteral 0x5590ecf5a870 <col:38> 'int' 1
([B61.21])->value
  23: MemberExpr 0x5590ecf5a928 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf5a8f0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ParenExpr 0x5590ecf5a8d0 <col:44, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf5a8a8 <lvm.c:657:35, col:38> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf5a890 <col:35> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf5a848 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf5a870 <col:38> 'int' 1
[B61.22].n
  24: ImplicitCastExpr 0x5590ecf5a980 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5a960 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf5a928 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf5a8f0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ParenExpr 0x5590ecf5a8d0 <col:44, col:46> 'StkId':'TValue *'
        `-BinaryOperator 0x5590ecf5a8a8 <lvm.c:657:35, col:38> 'StkId':'TValue *' '+'
          |-ImplicitCastExpr 0x5590ecf5a890 <col:35> 'StkId':'TValue *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecf5a848 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
          `-IntegerLiteral 0x5590ecf5a870 <col:38> 'int' 1
([B61.23]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  25: DeclStmt 0x5590ecf5a998 <lvm.c:657:9, col:40>col:20
`-VarDecl 0x5590ecf5a7e8 <col:9, ./llimits.h:63:27> lvm.c:657:20 used limit 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf5a980 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf5a960 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf5a928 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf5a8f0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ParenExpr 0x5590ecf5a8d0 <col:44, col:46> 'StkId':'TValue *'
            `-BinaryOperator 0x5590ecf5a8a8 <lvm.c:657:35, col:38> 'StkId':'TValue *' '+'
              |-ImplicitCastExpr 0x5590ecf5a890 <col:35> 'StkId':'TValue *' <LValueToRValue>
              | `-DeclRefExpr 0x5590ecf5a848 <col:35> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
              `-IntegerLiteral 0x5590ecf5a870 <col:38> 'int' 1
lua_Number limit = ((ra + 1)->value.n);
  26: IntegerLiteral 0x5590ecf5a9b0 <lvm.c:658:24> 'int' 0
0
  27: ImplicitCastExpr 0x5590ecf5aa50 <./luaconf.h:541:27, col:29> 'double' <IntegralToFloating>
`-ParenExpr 0x5590ecf5a9d0 <col:27, col:29> 'int'
  `-IntegerLiteral 0x5590ecf5a9b0 <lvm.c:658:24> 'int' 0
([B61.26]) (ImplicitCastExpr, IntegralToFloating, double)
  28: DeclRefExpr 0x5590ecf5a9f0 <lvm.c:658:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
step
  29: ImplicitCastExpr 0x5590ecf5aa38 <./luaconf.h:541:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf5aa18 <col:31, col:33> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf5a9f0 <lvm.c:658:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
([B61.28]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  30: BinaryOperator 0x5590ecf5aa68 <./luaconf.h:541:27, col:33> 'int' '<'
|-ImplicitCastExpr 0x5590ecf5aa50 <col:27, col:29> 'double' <IntegralToFloating>
| `-ParenExpr 0x5590ecf5a9d0 <col:27, col:29> 'int'
|   `-IntegerLiteral 0x5590ecf5a9b0 <lvm.c:658:24> 'int' 0
`-ImplicitCastExpr 0x5590ecf5aa38 <./luaconf.h:541:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf5aa18 <col:31, col:33> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf5a9f0 <lvm.c:658:27> 'lua_Number':'double' lvalue Var 0x5590ecf5a3b8 'step' 'lua_Number':'double'
[B61.27] < [B61.29]
   T: ([B61.30]) ? ... : ...
   Preds (1): B2
   Succs (2): B59 B60

 [B62]
   1: IntegerLiteral 0x5590ecf5a198 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5590ecf5a1c8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5a198 <col:31> 'int' 0
(void)[B62.1] (CStyleCastExpr, ToVoid, void)
   3: IntegerLiteral 0x5590ecf5a210 <./llimits.h:62:31> 'int' 0
0
   4: CStyleCastExpr 0x5590ecf5a240 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf5a210 <col:31> 'int' 0
(void)[B62.3] (CStyleCastExpr, ToVoid, void)
   T: goto reentry;
   Preds (2): B63 B64
   Succs (1): B260

 [B63]
   1: DeclRefExpr 0x5590ecf5a058 <lvm.c:648:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf5a080 <lvm.c:648:27> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf5a058 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf5a098 <lvm.c:648:27, col:30> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf5a080 <col:27> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf5a058 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.2]->ci
   4: ImplicitCastExpr 0x5590ecf5a0d0 <lvm.c:648:27, col:30> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecf5a098 <col:27, col:30> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf5a080 <col:27> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf5a058 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.3] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: MemberExpr 0x5590ecf5a0e8 <lvm.c:648:27, col:34> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
`-ImplicitCastExpr 0x5590ecf5a0d0 <col:27, col:30> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x5590ecf5a098 <col:27, col:30> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
    `-ImplicitCastExpr 0x5590ecf5a080 <col:27> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf5a058 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.4]->top
   6: ImplicitCastExpr 0x5590ecf5a120 <lvm.c:648:27, col:34> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf5a0e8 <col:27, col:34> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
  `-ImplicitCastExpr 0x5590ecf5a0d0 <col:27, col:30> 'CallInfo *' <LValueToRValue>
    `-MemberExpr 0x5590ecf5a098 <col:27, col:30> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
      `-ImplicitCastExpr 0x5590ecf5a080 <col:27> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf5a058 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: DeclRefExpr 0x5590ecf59fe0 <lvm.c:648:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   8: ImplicitCastExpr 0x5590ecf5a008 <lvm.c:648:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59fe0 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.7] (ImplicitCastExpr, LValueToRValue, lua_State *)
   9: MemberExpr 0x5590ecf5a020 <lvm.c:648:18, col:21> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf5a008 <col:18> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59fe0 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.8]->top
  10: BinaryOperator 0x5590ecf5a138 <lvm.c:648:18, col:34> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf5a020 <col:18, col:21> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf5a008 <col:18> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf59fe0 <col:18> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf5a120 <col:27, col:34> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf5a0e8 <col:27, col:34> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
    `-ImplicitCastExpr 0x5590ecf5a0d0 <col:27, col:30> 'CallInfo *' <LValueToRValue>
      `-MemberExpr 0x5590ecf5a098 <col:27, col:30> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
        `-ImplicitCastExpr 0x5590ecf5a080 <col:27> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf5a058 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B63.9] = [B63.6]
   Preds (1): B64
   Succs (1): B62

 [B64]
   1: DeclRefExpr 0x5590ecf59fa0 <lvm.c:648:15> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
b
   2: ImplicitCastExpr 0x5590ecf59fc8 <lvm.c:648:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59fa0 <col:15> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
[B64.1] (ImplicitCastExpr, LValueToRValue, int)
   T: if [B64.2]
   Preds (1): B66
   Succs (2): B63 B62

 [B65]
   1: ReturnStmt 0x5590ecf59f88 <lvm.c:646:11>
return;
   Preds (1): B66
   Succs (1): B0

 [B66]
   1: DeclRefExpr 0x5590ecf59d48 <lvm.c:643:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf59d70 <lvm.c:643:22> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59d48 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B66.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf59cd0 <lvm.c:643:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf59cf8 <lvm.c:643:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59cd0 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B66.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf59d10 <lvm.c:643:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf59cf8 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59cd0 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B66.4]->savedpc
   6: BinaryOperator 0x5590ecf59d88 <lvm.c:643:9, col:22> 'const Instruction *' '='
|-MemberExpr 0x5590ecf59d10 <col:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf59cf8 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf59cd0 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf59d70 <col:22> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59d48 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B66.5] = [B66.2]
   7: DeclRefExpr 0x5590ecf59dd8 <lvm.c:644:13> 'int (lua_State *, StkId)' Function 0x5590eceaa1e8 'luaD_poscall' 'int (lua_State *, StkId)'
luaD_poscall
   8: ImplicitCastExpr 0x5590ecf59e50 <lvm.c:644:13> 'int (*)(lua_State *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf59dd8 <col:13> 'int (lua_State *, StkId)' Function 0x5590eceaa1e8 'luaD_poscall' 'int (lua_State *, StkId)'
[B66.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, StkId))
   9: DeclRefExpr 0x5590ecf59e00 <lvm.c:644:26> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf59ea0 <lvm.c:644:26> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59e00 <col:26> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B66.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf59e28 <lvm.c:644:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf59eb8 <lvm.c:644:29> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59e28 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B66.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: CallExpr 0x5590ecf59e68 <lvm.c:644:13, col:31> 'int'
|-ImplicitCastExpr 0x5590ecf59e50 <col:13> 'int (*)(lua_State *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf59dd8 <col:13> 'int (lua_State *, StkId)' Function 0x5590eceaa1e8 'luaD_poscall' 'int (lua_State *, StkId)'
|-ImplicitCastExpr 0x5590ecf59ea0 <col:26> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf59e00 <col:26> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf59eb8 <col:29> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59e28 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B66.8]([B66.10], [B66.12])
  14: DeclRefExpr 0x5590ecf59db0 <lvm.c:644:9> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
b
  15: BinaryOperator 0x5590ecf59ed0 <lvm.c:644:9, col:31> 'int' '='
|-DeclRefExpr 0x5590ecf59db0 <col:9> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
`-CallExpr 0x5590ecf59e68 <col:13, col:31> 'int'
  |-ImplicitCastExpr 0x5590ecf59e50 <col:13> 'int (*)(lua_State *, StkId)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf59dd8 <col:13> 'int (lua_State *, StkId)' Function 0x5590eceaa1e8 'luaD_poscall' 'int (lua_State *, StkId)'
  |-ImplicitCastExpr 0x5590ecf59ea0 <col:26> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf59e00 <col:26> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  `-ImplicitCastExpr 0x5590ecf59eb8 <col:29> 'StkId':'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf59e28 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B66.14] = [B66.13]
  16: DeclRefExpr 0x5590ecf59ef8 <lvm.c:645:15> 'int' lvalue ParmVar 0x5590ecef98b8 'nexeccalls' 'int'
nexeccalls
  17: UnaryOperator 0x5590ecf59f20 <lvm.c:645:13, col:15> 'int' prefix '--'
`-DeclRefExpr 0x5590ecf59ef8 <col:15> 'int' lvalue ParmVar 0x5590ecef98b8 'nexeccalls' 'int'
--[B66.16]
  18: IntegerLiteral 0x5590ecf59f40 <lvm.c:645:29> 'int' 0
0
  19: BinaryOperator 0x5590ecf59f60 <lvm.c:645:13, col:29> 'int' '=='
|-UnaryOperator 0x5590ecf59f20 <col:13, col:15> 'int' prefix '--'
| `-DeclRefExpr 0x5590ecf59ef8 <col:15> 'int' lvalue ParmVar 0x5590ecef98b8 'nexeccalls' 'int'
`-IntegerLiteral 0x5590ecf59f40 <col:29> 'int' 0
[B66.17] == [B66.18]
   T: if [B66.19]
   Preds (2): B67 B68
   Succs (2): B65 B64

 [B67]
   1: DeclRefExpr 0x5590ecf59ba0 <lvm.c:642:27> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
luaF_close
   2: ImplicitCastExpr 0x5590ecf59c18 <lvm.c:642:27> 'void (*)(lua_State *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf59ba0 <col:27> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
[B67.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId))
   3: DeclRefExpr 0x5590ecf59bc8 <lvm.c:642:38> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf59c68 <lvm.c:642:38> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59bc8 <col:38> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B67.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf59bf0 <lvm.c:642:41> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: ImplicitCastExpr 0x5590ecf59c80 <lvm.c:642:41> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59bf0 <col:41> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B67.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: CallExpr 0x5590ecf59c30 <lvm.c:642:27, col:45> 'void'
|-ImplicitCastExpr 0x5590ecf59c18 <col:27> 'void (*)(lua_State *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf59ba0 <col:27> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
|-ImplicitCastExpr 0x5590ecf59c68 <col:38> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf59bc8 <col:38> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf59c80 <col:41> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59bf0 <col:41> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B67.2]([B67.4], [B67.6])
   Preds (1): B68
   Succs (1): B66

 [B68]
   1: DeclRefExpr 0x5590ecf59b10 <lvm.c:642:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf59b38 <lvm.c:642:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59b10 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B68.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf59b50 <lvm.c:642:13, col:16> 'GCObject *' lvalue ->openupval 0x5590ecea3450
`-ImplicitCastExpr 0x5590ecf59b38 <col:13> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59b10 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B68.2]->openupval
   4: ImplicitCastExpr 0x5590ecf59b88 <lvm.c:642:13, col:16> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590ecf59b50 <col:13, col:16> 'GCObject *' lvalue ->openupval 0x5590ecea3450
  `-ImplicitCastExpr 0x5590ecf59b38 <col:13> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf59b10 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B68.3] (ImplicitCastExpr, LValueToRValue, GCObject *)
   T: if [B68.4]
   Preds (2): B69 B70
   Succs (2): B67 B66

 [B69]
   1: DeclRefExpr 0x5590ecf599c0 <lvm.c:641:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf59a10 <lvm.c:641:30> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf599c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B69.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf599e8 <lvm.c:641:33> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
b
   4: ImplicitCastExpr 0x5590ecf59a28 <lvm.c:641:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf599e8 <col:33> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
[B69.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf59a40 <lvm.c:641:30, col:33> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf59a10 <col:30> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf599c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf59a28 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf599e8 <col:33> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
[B69.2] + [B69.4]
   6: IntegerLiteral 0x5590ecf59a68 <lvm.c:641:35> 'int' 1
1
   7: BinaryOperator 0x5590ecf59a88 <lvm.c:641:30, col:35> 'StkId':'TValue *' '-'
|-BinaryOperator 0x5590ecf59a40 <col:30, col:33> 'StkId':'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf59a10 <col:30> 'StkId':'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf599c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
| `-ImplicitCastExpr 0x5590ecf59a28 <col:33> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf599e8 <col:33> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
`-IntegerLiteral 0x5590ecf59a68 <col:35> 'int' 1
[B69.5] - [B69.6]
   8: DeclRefExpr 0x5590ecf59948 <lvm.c:641:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   9: ImplicitCastExpr 0x5590ecf59970 <lvm.c:641:21> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf59948 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B69.8] (ImplicitCastExpr, LValueToRValue, lua_State *)
  10: MemberExpr 0x5590ecf59988 <lvm.c:641:21, col:24> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf59970 <col:21> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf59948 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B69.9]->top
  11: BinaryOperator 0x5590ecf59ab0 <lvm.c:641:21, col:35> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf59988 <col:21, col:24> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf59970 <col:21> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf59948 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf59a88 <col:30, col:35> 'StkId':'TValue *' '-'
  |-BinaryOperator 0x5590ecf59a40 <col:30, col:33> 'StkId':'TValue *' '+'
  | |-ImplicitCastExpr 0x5590ecf59a10 <col:30> 'StkId':'TValue *' <LValueToRValue>
  | | `-DeclRefExpr 0x5590ecf599c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  | `-ImplicitCastExpr 0x5590ecf59a28 <col:33> 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x5590ecf599e8 <col:33> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
  `-IntegerLiteral 0x5590ecf59a68 <col:35> 'int' 1
[B69.10] = [B69.7]
   Preds (1): B70
   Succs (1): B68

 [B70]
  case OP_RETURN:
   1: DeclRefExpr 0x5590ecf59408 <lvm.c:640:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf595a8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf59430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf59408 <lvm.c:640:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B70.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf59450 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf59470 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf59490 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
[B70.3] + [B70.4]
   6: IntegerLiteral 0x5590ecf594d8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf594f8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf594b8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf59490 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf594d8 <line:40:17> 'int' 8
([B70.5]) + [B70.6]
   8: IntegerLiteral 0x5590ecf59540 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf59560 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf59520 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf594f8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf594b8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf59490 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf594d8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf59540 <line:37:17> 'int' 9
([B70.7]) + [B70.8]
  10: BinaryOperator 0x5590ecf595c0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf595a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf59430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf59408 <lvm.c:640:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf59588 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf59560 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf59520 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf594f8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf594b8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf59490 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf594d8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf59540 <line:37:17> 'int' 9
[B70.2] >> ([B70.9])
  11: IntegerLiteral 0x5590ecf59608 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf59638 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
(Instruction)[B70.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf59660 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
~[B70.12]
  14: IntegerLiteral 0x5590ecf596a0 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf596c0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf59680 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf59660 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf596a0 <line:38:17> 'int' 9
([B70.13]) << [B70.14]
  16: UnaryOperator 0x5590ecf59708 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf596e8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf596c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf59680 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf59660 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf596a0 <line:38:17> 'int' 9
~([B70.15])
  17: IntegerLiteral 0x5590ecf59748 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf59768 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf59728 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf59708 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf596e8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf596c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf59680 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf59660 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf596a0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf59748 <line:88:60> 'int' 0
([B70.16]) << [B70.17]
  19: BinaryOperator 0x5590ecf597b0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf595e8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf595c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf595a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf59430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf59408 <lvm.c:640:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf59588 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf59560 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf59520 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf594f8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf594b8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf59490 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf594d8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf59540 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf59790 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf59768 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf59728 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf59708 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf596e8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf596c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf59680 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf59660 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf596a0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf59748 <line:88:60> 'int' 0
([B70.10]) & ([B70.18])
  20: CStyleCastExpr 0x5590ecf59840 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf59820 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf597b0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf595e8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf595c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf595a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf59430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf59408 <lvm.c:640:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf59588 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf59560 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf59520 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf594f8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf594b8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf59490 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf594d8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf59540 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf59790 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf59768 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf59728 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf59708 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf596e8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf596c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf59680 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf59660 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf596a0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf59748 <line:88:60> 'int' 0
(int)([B70.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf598a8 <lvm.c:640:9, col:28>col:13
`-VarDecl 0x5590ecf593a8 <col:9, ./lopcodes.h:88:63> lvm.c:640:13 used b 'int' cinit
  `-ParenExpr 0x5590ecf59888 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf59868 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf59840 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf59820 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf597b0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf595e8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf595c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf595a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf59430 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf59408 <lvm.c:640:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf59588 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf59560 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf59520 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf594f8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf594b8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf59490 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf59450 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf59470 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf594d8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf59540 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf59790 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf59768 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf59728 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf59708 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf596e8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf596c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf59680 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf59660 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf59638 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf59608 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf596a0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf59748 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf598c0 <lvm.c:641:13> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
b
  23: ImplicitCastExpr 0x5590ecf59908 <lvm.c:641:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf598c0 <col:13> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
[B70.22] (ImplicitCastExpr, LValueToRValue, int)
  24: IntegerLiteral 0x5590ecf598e8 <lvm.c:641:18> 'int' 0
0
  25: BinaryOperator 0x5590ecf59920 <lvm.c:641:13, col:18> 'int' '!='
|-ImplicitCastExpr 0x5590ecf59908 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf598c0 <col:13> 'int' lvalue Var 0x5590ecf593a8 'b' 'int'
`-IntegerLiteral 0x5590ecf598e8 <col:18> 'int' 0
[B70.23] != [B70.24]
   T: if [B70.25]
   Preds (1): B2
   Succs (2): B69 B68

 [B71]
   1: DeclRefExpr 0x5590ecf57640 <lvm.c:610:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf57668 <lvm.c:610:22> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57640 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B71.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf575c8 <lvm.c:610:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf575f0 <lvm.c:610:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf575c8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B71.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf57608 <lvm.c:610:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf575f0 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf575c8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B71.4]->savedpc
   6: BinaryOperator 0x5590ecf57680 <lvm.c:610:9, col:22> 'const Instruction *' '='
|-MemberExpr 0x5590ecf57608 <col:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf575f0 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf575c8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf57668 <col:22> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf57640 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B71.5] = [B71.2]
   7: IntegerLiteral 0x5590ecf576a8 <./llimits.h:62:31> 'int' 0
0
   8: CStyleCastExpr 0x5590ecf576d8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf576a8 <col:31> 'int' 0
(void)[B71.7] (CStyleCastExpr, ToVoid, void)
   9: DeclRefExpr 0x5590ecf57720 <lvm.c:612:17> 'int (lua_State *, StkId, int)' Function 0x5590ecea9718 'luaD_precall' 'int (lua_State *, StkId, int)'
luaD_precall
  10: ImplicitCastExpr 0x5590ecf577f8 <lvm.c:612:17> 'int (*)(lua_State *, StkId, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf57720 <col:17> 'int (lua_State *, StkId, int)' Function 0x5590ecea9718 'luaD_precall' 'int (lua_State *, StkId, int)'
[B71.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, StkId, int))
  11: DeclRefExpr 0x5590ecf57748 <lvm.c:612:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  12: ImplicitCastExpr 0x5590ecf57850 <lvm.c:612:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57748 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B71.11] (ImplicitCastExpr, LValueToRValue, lua_State *)
  13: DeclRefExpr 0x5590ecf57770 <lvm.c:612:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf57868 <lvm.c:612:33> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57770 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B71.13] (ImplicitCastExpr, LValueToRValue, StkId)
  15: IntegerLiteral 0x5590ecf57798 <./lua.h:30:23> 'int' 1
1
  16: UnaryOperator 0x5590ecf577b8 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x5590ecf57798 <col:23> 'int' 1
-[B71.15]
  17: CallExpr 0x5590ecf57810 <lvm.c:612:17, col:48> 'int'
|-ImplicitCastExpr 0x5590ecf577f8 <col:17> 'int (*)(lua_State *, StkId, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf57720 <col:17> 'int (lua_State *, StkId, int)' Function 0x5590ecea9718 'luaD_precall' 'int (lua_State *, StkId, int)'
|-ImplicitCastExpr 0x5590ecf57850 <col:30> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf57748 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf57868 <col:33> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf57770 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf577d8 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x5590ecf577b8 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x5590ecf57798 <col:23> 'int' 1
[B71.10]([B71.12], [B71.14], ([B71.16]))
   T: switch [B71.17]
   Preds (2): B81 B82
   Succs (3): B73 B80 B72

 [B72]
  default:
   1: ReturnStmt 0x5590ecf59280 <lvm.c:635:13>
return;
   Preds (1): B71
   Succs (1): B0

 [B73]
  case 1:
   1: DeclRefExpr 0x5590ecf591a0 <lvm.c:631:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf591c8 <lvm.c:631:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf591a0 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B73.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf591e0 <lvm.c:631:20, col:23> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf591c8 <col:20> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf591a0 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B73.2]->base
   4: ImplicitCastExpr 0x5590ecf59218 <lvm.c:631:20, col:23> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf591e0 <col:20, col:23> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf591c8 <col:20> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf591a0 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B73.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf59178 <lvm.c:631:13> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf59230 <lvm.c:631:13, col:23> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf59178 <col:13> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf59218 <col:20, col:23> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf591e0 <col:20, col:23> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf591c8 <col:20> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf591a0 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B73.5] = [B73.4]
   T: continue;
   Preds (1): B71
   Succs (1): B1

 [B74]
   1: DeclRefExpr 0x5590ecf58c90 <lvm.c:623:32> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
func
   2: ImplicitCastExpr 0x5590ecf58ce0 <lvm.c:623:32> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58c90 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
[B74.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf58cb8 <lvm.c:623:37> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
aux
   4: ImplicitCastExpr 0x5590ecf58cf8 <lvm.c:623:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58cb8 <col:37> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B74.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf58d10 <lvm.c:623:32, col:37> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf58ce0 <col:32> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf58c90 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf58cf8 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58cb8 <col:37> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B74.2] + [B74.4]
   6: DeclRefExpr 0x5590ecf58c18 <lvm.c:623:23> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   7: ImplicitCastExpr 0x5590ecf58c40 <lvm.c:623:23> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58c18 <col:23> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.6] (ImplicitCastExpr, LValueToRValue, lua_State *)
   8: MemberExpr 0x5590ecf58c58 <lvm.c:623:23, col:26> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf58c40 <col:23> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58c18 <col:23> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.7]->top
   9: BinaryOperator 0x5590ecf58d38 <lvm.c:623:23, col:37> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf58c58 <col:23, col:26> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf58c40 <col:23> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58c18 <col:23> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf58d10 <col:32, col:37> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf58ce0 <col:32> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf58c90 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
  `-ImplicitCastExpr 0x5590ecf58cf8 <col:37> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf58cb8 <col:37> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B74.8] = [B74.5]
  10: DeclRefExpr 0x5590ecf58ba0 <lvm.c:623:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
  11: ImplicitCastExpr 0x5590ecf58bc8 <lvm.c:623:13> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58ba0 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.10] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  12: MemberExpr 0x5590ecf58be0 <lvm.c:623:13, col:17> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
`-ImplicitCastExpr 0x5590ecf58bc8 <col:13> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58ba0 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.11]->top
  13: BinaryOperator 0x5590ecf58d60 <lvm.c:623:13, col:37> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf58be0 <col:13, col:17> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
| `-ImplicitCastExpr 0x5590ecf58bc8 <col:13> 'CallInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58ba0 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
`-BinaryOperator 0x5590ecf58d38 <col:23, col:37> 'StkId':'TValue *' '='
  |-MemberExpr 0x5590ecf58c58 <col:23, col:26> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
  | `-ImplicitCastExpr 0x5590ecf58c40 <col:23> 'lua_State *' <LValueToRValue>
  |   `-DeclRefExpr 0x5590ecf58c18 <col:23> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  `-BinaryOperator 0x5590ecf58d10 <col:32, col:37> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf58ce0 <col:32> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf58c90 <col:32> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
    `-ImplicitCastExpr 0x5590ecf58cf8 <col:37> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf58cb8 <col:37> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B74.12] = [B74.9]
  14: IntegerLiteral 0x5590ecf58d88 <./llimits.h:62:31> 'int' 0
0
  15: CStyleCastExpr 0x5590ecf58db8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf58d88 <col:31> 'int' 0
(void)[B74.14] (CStyleCastExpr, ToVoid, void)
  16: DeclRefExpr 0x5590ecf58e78 <lvm.c:625:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  17: ImplicitCastExpr 0x5590ecf58ea0 <lvm.c:625:27> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58e78 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.16] (ImplicitCastExpr, LValueToRValue, lua_State *)
  18: MemberExpr 0x5590ecf58eb8 <lvm.c:625:27, col:30> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf58ea0 <col:27> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58e78 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.17]->savedpc
  19: ImplicitCastExpr 0x5590ecf58ef0 <lvm.c:625:27, col:30> 'const Instruction *' <LValueToRValue>
`-MemberExpr 0x5590ecf58eb8 <col:27, col:30> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
  `-ImplicitCastExpr 0x5590ecf58ea0 <col:27> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf58e78 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.18] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  20: DeclRefExpr 0x5590ecf58e00 <lvm.c:625:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
  21: ImplicitCastExpr 0x5590ecf58e28 <lvm.c:625:13> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58e00 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.20] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  22: MemberExpr 0x5590ecf58e40 <lvm.c:625:13, col:17> 'const Instruction *' lvalue ->savedpc 0x5590ece9ef38
`-ImplicitCastExpr 0x5590ecf58e28 <col:13> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58e00 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.21]->savedpc
  23: BinaryOperator 0x5590ecf58f08 <lvm.c:625:13, col:30> 'const Instruction *' '='
|-MemberExpr 0x5590ecf58e40 <col:13, col:17> 'const Instruction *' lvalue ->savedpc 0x5590ece9ef38
| `-ImplicitCastExpr 0x5590ecf58e28 <col:13> 'CallInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58e00 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
`-ImplicitCastExpr 0x5590ecf58ef0 <col:27, col:30> 'const Instruction *' <LValueToRValue>
  `-MemberExpr 0x5590ecf58eb8 <col:27, col:30> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
    `-ImplicitCastExpr 0x5590ecf58ea0 <col:27> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf58e78 <col:27> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.22] = [B74.19]
  24: DeclRefExpr 0x5590ecf58f30 <lvm.c:626:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
  25: ImplicitCastExpr 0x5590ecf58f58 <lvm.c:626:13> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58f30 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.24] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  26: MemberExpr 0x5590ecf58f70 <lvm.c:626:13, col:17> 'int' lvalue ->tailcalls 0x5590ece9eff8
`-ImplicitCastExpr 0x5590ecf58f58 <col:13> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58f30 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.25]->tailcalls
  27: UnaryOperator 0x5590ecf58fa8 <lvm.c:626:13, col:26> 'int' postfix '++'
`-MemberExpr 0x5590ecf58f70 <col:13, col:17> 'int' lvalue ->tailcalls 0x5590ece9eff8
  `-ImplicitCastExpr 0x5590ecf58f58 <col:13> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf58f30 <col:13> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B74.26]++
  28: DeclRefExpr 0x5590ecf58fc8 <lvm.c:627:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  29: ImplicitCastExpr 0x5590ecf58ff0 <lvm.c:627:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58fc8 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.28] (ImplicitCastExpr, LValueToRValue, lua_State *)
  30: MemberExpr 0x5590ecf59030 <lvm.c:627:13, col:16> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf58ff0 <col:13> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58fc8 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.29]->ci
  31: UnaryOperator 0x5590ecf59068 <lvm.c:627:13, col:18> 'CallInfo *' postfix '--'
`-MemberExpr 0x5590ecf59030 <col:13, col:16> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf58ff0 <col:13> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf58fc8 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B74.30]--
   T: goto reentry;
   Preds (1): B77
   Succs (1): B260

 [B75]
   1: DeclRefExpr 0x5590ecf58548 <lvm.c:621:47> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
aux
   2: UnaryOperator 0x5590ecf58570 <lvm.c:621:47, col:50> 'int' postfix '++'
`-DeclRefExpr 0x5590ecf58548 <col:47> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B75.1]++
   Preds (1): B76
   Succs (1): B77

 [B76]
   1: DeclRefExpr 0x5590ecf58600 <lvm.c:622:38> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
pfunc
   2: ImplicitCastExpr 0x5590ecf58650 <lvm.c:622:38> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58600 <col:38> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B76.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf58628 <lvm.c:622:44> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
aux
   4: ImplicitCastExpr 0x5590ecf58668 <lvm.c:622:44> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58628 <col:44> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B76.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf58680 <lvm.c:622:38, col:44> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf58650 <col:38> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf58600 <col:38> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf58668 <col:44> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58628 <col:44> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B76.2] + [B76.4]
   6: ImplicitCastExpr 0x5590ecf586c8 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf586a8 <col:22, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf58680 <lvm.c:622:38, col:44> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf58650 <col:38> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf58600 <col:38> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
    `-ImplicitCastExpr 0x5590ecf58668 <col:44> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf58628 <col:44> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
([B76.5]) (ImplicitCastExpr, BitCast, const TValue *)
   7: DeclStmt 0x5590ecf586e0 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf585a0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf586c8 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf586a8 <col:22, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf58680 <lvm.c:622:38, col:44> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf58650 <col:38> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf58600 <col:38> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
        `-ImplicitCastExpr 0x5590ecf58668 <col:44> 'int' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf58628 <col:44> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
const TValue *o2 = (pfunc + aux);
   8: DeclRefExpr 0x5590ecf58768 <lvm.c:622:28> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
func
   9: ImplicitCastExpr 0x5590ecf587b8 <lvm.c:622:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58768 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
[B76.8] (ImplicitCastExpr, LValueToRValue, StkId)
  10: DeclRefExpr 0x5590ecf58790 <lvm.c:622:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
aux
  11: ImplicitCastExpr 0x5590ecf587d0 <lvm.c:622:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58790 <col:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B76.10] (ImplicitCastExpr, LValueToRValue, int)
  12: BinaryOperator 0x5590ecf587e8 <lvm.c:622:28, col:33> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf587b8 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf58768 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf587d0 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58790 <col:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B76.9] + [B76.11]
  13: DeclStmt 0x5590ecf58830 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf58708 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf58810 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf587e8 <lvm.c:622:28, col:33> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf587b8 <col:28> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf58768 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecf57b08 'func' 'StkId':'TValue *'
      `-ImplicitCastExpr 0x5590ecf587d0 <col:33> 'int' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf58790 <col:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
TValue *o1 = (func + aux);
  14: DeclRefExpr 0x5590ecf588c0 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
o2
  15: ImplicitCastExpr 0x5590ecf588e8 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf588c0 <col:17> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.14] (ImplicitCastExpr, LValueToRValue, const TValue *)
  16: MemberExpr 0x5590ecf58900 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf588e8 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf588c0 <col:17> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.15]->value
  17: ImplicitCastExpr 0x5590ecf58938 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf58900 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf588e8 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf588c0 <col:17> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.16] (ImplicitCastExpr, LValueToRValue, Value)
  18: DeclRefExpr 0x5590ecf58848 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
o1
  19: ImplicitCastExpr 0x5590ecf58870 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58848 <col:5> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
[B76.18] (ImplicitCastExpr, LValueToRValue, TValue *)
  20: MemberExpr 0x5590ecf58888 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf58870 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58848 <col:5> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
[B76.19]->value
  21: BinaryOperator 0x5590ecf58950 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf58888 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf58870 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58848 <col:5> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf58938 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf58900 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf588e8 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf588c0 <col:17> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.20] = [B76.17]
  22: DeclRefExpr 0x5590ecf589f0 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
o2
  23: ImplicitCastExpr 0x5590ecf58a18 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf589f0 <col:35> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.22] (ImplicitCastExpr, LValueToRValue, const TValue *)
  24: MemberExpr 0x5590ecf58a30 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf58a18 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf589f0 <col:35> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.23]->tt
  25: ImplicitCastExpr 0x5590ecf58a68 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf58a30 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf58a18 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf589f0 <col:35> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.24] (ImplicitCastExpr, LValueToRValue, int)
  26: DeclRefExpr 0x5590ecf58978 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
o1
  27: ImplicitCastExpr 0x5590ecf589a0 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58978 <col:28> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
[B76.26] (ImplicitCastExpr, LValueToRValue, TValue *)
  28: MemberExpr 0x5590ecf589b8 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf589a0 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58978 <col:28> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
[B76.27]->tt
  29: BinaryOperator 0x5590ecf58a80 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf589b8 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf589a0 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58978 <col:28> 'TValue *' lvalue Var 0x5590ecf58708 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf58a68 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf58a30 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf58a18 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf589f0 <col:35> 'const TValue *' lvalue Var 0x5590ecf585a0 'o2' 'const TValue *'
[B76.28] = [B76.25]
  30: IntegerLiteral 0x5590ecf58aa8 <./llimits.h:62:31> 'int' 0
0
  31: CStyleCastExpr 0x5590ecf58ad8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf58aa8 <col:31> 'int' 0
(void)[B76.30] (CStyleCastExpr, ToVoid, void)
   Preds (1): B77
   Succs (1): B75

 [B77]
   1: DeclRefExpr 0x5590ecf583e8 <lvm.c:621:27> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
pfunc
   2: ImplicitCastExpr 0x5590ecf58438 <lvm.c:621:27> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf583e8 <col:27> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B77.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf58410 <lvm.c:621:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
aux
   4: ImplicitCastExpr 0x5590ecf58450 <lvm.c:621:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58410 <col:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B77.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf58468 <lvm.c:621:27, col:33> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf58438 <col:27> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf583e8 <col:27> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf58450 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58410 <col:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
[B77.2] + [B77.4]
   6: DeclRefExpr 0x5590ecf58490 <lvm.c:621:39> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   7: ImplicitCastExpr 0x5590ecf584b8 <lvm.c:621:39> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58490 <col:39> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B77.6] (ImplicitCastExpr, LValueToRValue, lua_State *)
   8: MemberExpr 0x5590ecf584d0 <lvm.c:621:39, col:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf584b8 <col:39> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58490 <col:39> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B77.7]->top
   9: ImplicitCastExpr 0x5590ecf58508 <lvm.c:621:39, col:42> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf584d0 <col:39, col:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
  `-ImplicitCastExpr 0x5590ecf584b8 <col:39> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf58490 <col:39> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B77.8] (ImplicitCastExpr, LValueToRValue, StkId)
  10: BinaryOperator 0x5590ecf58520 <lvm.c:621:27, col:42> 'int' '<'
|-BinaryOperator 0x5590ecf58468 <col:27, col:33> 'StkId':'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf58438 <col:27> 'StkId':'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf583e8 <col:27> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
| `-ImplicitCastExpr 0x5590ecf58450 <col:33> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58410 <col:33> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
`-ImplicitCastExpr 0x5590ecf58508 <col:39, col:42> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf584d0 <col:39, col:42> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
    `-ImplicitCastExpr 0x5590ecf584b8 <col:39> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf58490 <col:39> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B77.5] < [B77.9]
   T: for (...; [B77.10]; ...)
   Preds (2): B75 B78
   Succs (2): B76 B74

 [B78]
   1: DeclRefExpr 0x5590ecf580f0 <lvm.c:620:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x5590ecf58118 <lvm.c:620:34> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf580f0 <col:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B78.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x5590ecf58130 <lvm.c:620:34, col:38> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
`-ImplicitCastExpr 0x5590ecf58118 <col:34> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf580f0 <col:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B78.2]->func
   4: ImplicitCastExpr 0x5590ecf582e8 <lvm.c:620:34, col:38> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf58130 <col:34, col:38> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
  `-ImplicitCastExpr 0x5590ecf58118 <col:34> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf580f0 <col:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B78.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf58168 <lvm.c:620:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
   6: ImplicitCastExpr 0x5590ecf581b0 <lvm.c:620:47> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B78.5] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   7: IntegerLiteral 0x5590ecf58190 <lvm.c:620:50> 'int' 1
1
   8: BinaryOperator 0x5590ecf581c8 <lvm.c:620:47, col:50> 'CallInfo *' '+'
|-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
`-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
[B78.6] + [B78.7]
   9: MemberExpr 0x5590ecf58210 <lvm.c:620:46, col:54> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
`-ParenExpr 0x5590ecf581f0 <col:46, col:51> 'CallInfo *'
  `-BinaryOperator 0x5590ecf581c8 <col:47, col:50> 'CallInfo *' '+'
    |-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
    `-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
([B78.8])->base
  10: ImplicitCastExpr 0x5590ecf58270 <lvm.c:620:46, col:54> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf58210 <col:46, col:54> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
  `-ParenExpr 0x5590ecf581f0 <col:46, col:51> 'CallInfo *'
    `-BinaryOperator 0x5590ecf581c8 <col:47, col:50> 'CallInfo *' '+'
      |-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
      `-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
[B78.9] (ImplicitCastExpr, LValueToRValue, StkId)
  11: DeclRefExpr 0x5590ecf58248 <lvm.c:620:61> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
pfunc
  12: ImplicitCastExpr 0x5590ecf58288 <lvm.c:620:61> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58248 <col:61> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B78.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: BinaryOperator 0x5590ecf582a0 <lvm.c:620:46, col:61> 'long' '-'
|-ImplicitCastExpr 0x5590ecf58270 <col:46, col:54> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x5590ecf58210 <col:46, col:54> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
|   `-ParenExpr 0x5590ecf581f0 <col:46, col:51> 'CallInfo *'
|     `-BinaryOperator 0x5590ecf581c8 <col:47, col:50> 'CallInfo *' '+'
|       |-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
|       `-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
`-ImplicitCastExpr 0x5590ecf58288 <col:61> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58248 <col:61> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B78.10] - [B78.12]
  14: BinaryOperator 0x5590ecf58300 <lvm.c:620:34, col:66> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf582e8 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
| `-MemberExpr 0x5590ecf58130 <col:34, col:38> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
|   `-ImplicitCastExpr 0x5590ecf58118 <col:34> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf580f0 <col:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
`-ParenExpr 0x5590ecf582c8 <col:45, col:66> 'long'
  `-BinaryOperator 0x5590ecf582a0 <col:46, col:61> 'long' '-'
    |-ImplicitCastExpr 0x5590ecf58270 <col:46, col:54> 'StkId':'TValue *' <LValueToRValue>
    | `-MemberExpr 0x5590ecf58210 <col:46, col:54> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
    |   `-ParenExpr 0x5590ecf581f0 <col:46, col:51> 'CallInfo *'
    |     `-BinaryOperator 0x5590ecf581c8 <col:47, col:50> 'CallInfo *' '+'
    |       |-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
    |       | `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
    |       `-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
    `-ImplicitCastExpr 0x5590ecf58288 <col:61> 'StkId':'TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf58248 <col:61> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B78.4] + ([B78.13])
  15: DeclRefExpr 0x5590ecf58078 <lvm.c:620:23> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
  16: ImplicitCastExpr 0x5590ecf580a0 <lvm.c:620:23> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58078 <col:23> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B78.15] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  17: MemberExpr 0x5590ecf580b8 <lvm.c:620:23, col:27> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
`-ImplicitCastExpr 0x5590ecf580a0 <col:23> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58078 <col:23> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B78.16]->base
  18: BinaryOperator 0x5590ecf58328 <lvm.c:620:23, col:66> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf580b8 <col:23, col:27> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
| `-ImplicitCastExpr 0x5590ecf580a0 <col:23> 'CallInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58078 <col:23> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
`-BinaryOperator 0x5590ecf58300 <col:34, col:66> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf582e8 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
  | `-MemberExpr 0x5590ecf58130 <col:34, col:38> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
  |   `-ImplicitCastExpr 0x5590ecf58118 <col:34> 'CallInfo *' <LValueToRValue>
  |     `-DeclRefExpr 0x5590ecf580f0 <col:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
  `-ParenExpr 0x5590ecf582c8 <col:45, col:66> 'long'
    `-BinaryOperator 0x5590ecf582a0 <col:46, col:61> 'long' '-'
      |-ImplicitCastExpr 0x5590ecf58270 <col:46, col:54> 'StkId':'TValue *' <LValueToRValue>
      | `-MemberExpr 0x5590ecf58210 <col:46, col:54> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
      |   `-ParenExpr 0x5590ecf581f0 <col:46, col:51> 'CallInfo *'
      |     `-BinaryOperator 0x5590ecf581c8 <col:47, col:50> 'CallInfo *' '+'
      |       |-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
      |       | `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
      |       `-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
      `-ImplicitCastExpr 0x5590ecf58288 <col:61> 'StkId':'TValue *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf58248 <col:61> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B78.17] = [B78.14]
  19: DeclRefExpr 0x5590ecf58000 <lvm.c:620:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  20: ImplicitCastExpr 0x5590ecf58028 <lvm.c:620:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf58000 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B78.19] (ImplicitCastExpr, LValueToRValue, lua_State *)
  21: MemberExpr 0x5590ecf58040 <lvm.c:620:13, col:16> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf58028 <col:13> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf58000 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B78.20]->base
  22: BinaryOperator 0x5590ecf58350 <lvm.c:620:13, col:66> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf58040 <col:13, col:16> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
| `-ImplicitCastExpr 0x5590ecf58028 <col:13> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf58000 <col:13> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf58328 <col:23, col:66> 'StkId':'TValue *' '='
  |-MemberExpr 0x5590ecf580b8 <col:23, col:27> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
  | `-ImplicitCastExpr 0x5590ecf580a0 <col:23> 'CallInfo *' <LValueToRValue>
  |   `-DeclRefExpr 0x5590ecf58078 <col:23> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
  `-BinaryOperator 0x5590ecf58300 <col:34, col:66> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf582e8 <col:34, col:38> 'StkId':'TValue *' <LValueToRValue>
    | `-MemberExpr 0x5590ecf58130 <col:34, col:38> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
    |   `-ImplicitCastExpr 0x5590ecf58118 <col:34> 'CallInfo *' <LValueToRValue>
    |     `-DeclRefExpr 0x5590ecf580f0 <col:34> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
    `-ParenExpr 0x5590ecf582c8 <col:45, col:66> 'long'
      `-BinaryOperator 0x5590ecf582a0 <col:46, col:61> 'long' '-'
        |-ImplicitCastExpr 0x5590ecf58270 <col:46, col:54> 'StkId':'TValue *' <LValueToRValue>
        | `-MemberExpr 0x5590ecf58210 <col:46, col:54> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
        |   `-ParenExpr 0x5590ecf581f0 <col:46, col:51> 'CallInfo *'
        |     `-BinaryOperator 0x5590ecf581c8 <col:47, col:50> 'CallInfo *' '+'
        |       |-ImplicitCastExpr 0x5590ecf581b0 <col:47> 'CallInfo *' <LValueToRValue>
        |       | `-DeclRefExpr 0x5590ecf58168 <col:47> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
        |       `-IntegerLiteral 0x5590ecf58190 <col:50> 'int' 1
        `-ImplicitCastExpr 0x5590ecf58288 <col:61> 'StkId':'TValue *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf58248 <col:61> 'StkId':'TValue *' lvalue Var 0x5590ecf57c20 'pfunc' 'StkId':'TValue *'
[B78.21] = [B78.18]
  23: IntegerLiteral 0x5590ecf583a0 <lvm.c:621:24> 'int' 0
0
  24: DeclRefExpr 0x5590ecf58378 <lvm.c:621:18> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
aux
  25: BinaryOperator 0x5590ecf583c0 <lvm.c:621:18, col:24> 'int' '='
|-DeclRefExpr 0x5590ecf58378 <col:18> 'int' lvalue Var 0x5590ecf57a80 'aux' 'int'
`-IntegerLiteral 0x5590ecf583a0 <col:24> 'int' 0
[B78.24] = [B78.23]
   Preds (2): B79 B80
   Succs (1): B77

 [B79]
   1: DeclRefExpr 0x5590ecf57e20 <lvm.c:619:31> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
luaF_close
   2: ImplicitCastExpr 0x5590ecf57f48 <lvm.c:619:31> 'void (*)(lua_State *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf57e20 <col:31> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
[B79.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId))
   3: DeclRefExpr 0x5590ecf57e48 <lvm.c:619:42> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf57f98 <lvm.c:619:42> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57e48 <col:42> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B79.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf57e70 <lvm.c:619:45> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
   6: ImplicitCastExpr 0x5590ecf57e98 <lvm.c:619:45> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57e70 <col:45> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B79.5] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   7: MemberExpr 0x5590ecf57eb0 <lvm.c:619:45, col:49> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
`-ImplicitCastExpr 0x5590ecf57e98 <col:45> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf57e70 <col:45> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B79.6]->base
   8: ImplicitCastExpr 0x5590ecf57fb0 <lvm.c:619:45, col:49> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf57eb0 <col:45, col:49> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
  `-ImplicitCastExpr 0x5590ecf57e98 <col:45> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf57e70 <col:45> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B79.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: CallExpr 0x5590ecf57f60 <lvm.c:619:31, col:53> 'void'
|-ImplicitCastExpr 0x5590ecf57f48 <col:31> 'void (*)(lua_State *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf57e20 <col:31> 'void (lua_State *, StkId)' Function 0x5590eceafdf0 'luaF_close' 'void (lua_State *, StkId)'
|-ImplicitCastExpr 0x5590ecf57f98 <col:42> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf57e48 <col:42> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf57fb0 <col:45, col:49> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf57eb0 <col:45, col:49> 'StkId':'TValue *' lvalue ->base 0x5590ece9edd0
    `-ImplicitCastExpr 0x5590ecf57e98 <col:45> 'CallInfo *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf57e70 <col:45> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B79.2]([B79.4], [B79.8])
   Preds (1): B80
   Succs (1): B78

 [B80]
  case 0:
   1: DeclRefExpr 0x5590ecf57978 <lvm.c:615:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf579a0 <lvm.c:615:28> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57978 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B80.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf579b8 <lvm.c:615:28, col:31> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf579a0 <col:28> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf57978 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B80.2]->ci
   4: ImplicitCastExpr 0x5590ecf57a10 <lvm.c:615:28, col:31> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecf579b8 <col:28, col:31> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf579a0 <col:28> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf57978 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B80.3] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: IntegerLiteral 0x5590ecf579f0 <lvm.c:615:36> 'int' 1
1
   6: BinaryOperator 0x5590ecf57a28 <lvm.c:615:28, col:36> 'CallInfo *' '-'
|-ImplicitCastExpr 0x5590ecf57a10 <col:28, col:31> 'CallInfo *' <LValueToRValue>
| `-MemberExpr 0x5590ecf579b8 <col:28, col:31> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
|   `-ImplicitCastExpr 0x5590ecf579a0 <col:28> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf57978 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-IntegerLiteral 0x5590ecf579f0 <col:36> 'int' 1
[B80.4] - [B80.5]
   7: DeclStmt 0x5590ecf57a50 <lvm.c:615:13, col:37>col:23
`-VarDecl 0x5590ecf57918 <col:13, col:36> col:23 used ci 'CallInfo *' cinit
  `-BinaryOperator 0x5590ecf57a28 <col:28, col:36> 'CallInfo *' '-'
    |-ImplicitCastExpr 0x5590ecf57a10 <col:28, col:31> 'CallInfo *' <LValueToRValue>
    | `-MemberExpr 0x5590ecf579b8 <col:28, col:31> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
    |   `-ImplicitCastExpr 0x5590ecf579a0 <col:28> 'lua_State *' <LValueToRValue>
    |     `-DeclRefExpr 0x5590ecf57978 <col:28> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
    `-IntegerLiteral 0x5590ecf579f0 <col:36> 'int' 1
CallInfo *ci = L->ci - 1;
   8: DeclStmt 0x5590ecf57ae0 <lvm.c:616:13, col:20>col:17
`-VarDecl 0x5590ecf57a80 <col:13, col:17> col:17 used aux 'int'
int aux;
   9: DeclRefExpr 0x5590ecf57b68 <lvm.c:617:26> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
  10: ImplicitCastExpr 0x5590ecf57b90 <lvm.c:617:26> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57b68 <col:26> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B80.9] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  11: MemberExpr 0x5590ecf57ba8 <lvm.c:617:26, col:30> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
`-ImplicitCastExpr 0x5590ecf57b90 <col:26> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf57b68 <col:26> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B80.10]->func
  12: ImplicitCastExpr 0x5590ecf57be0 <lvm.c:617:26, col:30> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf57ba8 <col:26, col:30> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
  `-ImplicitCastExpr 0x5590ecf57b90 <col:26> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf57b68 <col:26> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B80.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclStmt 0x5590ecf57bf8 <lvm.c:617:13, col:34>col:19
`-VarDecl 0x5590ecf57b08 <col:13, col:30> col:19 used func 'StkId':'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf57be0 <col:26, col:30> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x5590ecf57ba8 <col:26, col:30> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
      `-ImplicitCastExpr 0x5590ecf57b90 <col:26> 'CallInfo *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf57b68 <col:26> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
StkId func = ci->func;
  14: DeclRefExpr 0x5590ecf57c80 <lvm.c:618:28> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
ci
  15: ImplicitCastExpr 0x5590ecf57cc8 <lvm.c:618:28> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57c80 <col:28> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
[B80.14] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  16: IntegerLiteral 0x5590ecf57ca8 <lvm.c:618:31> 'int' 1
1
  17: BinaryOperator 0x5590ecf57ce0 <lvm.c:618:28, col:31> 'CallInfo *' '+'
|-ImplicitCastExpr 0x5590ecf57cc8 <col:28> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf57c80 <col:28> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
`-IntegerLiteral 0x5590ecf57ca8 <col:31> 'int' 1
[B80.15] + [B80.16]
  18: MemberExpr 0x5590ecf57d28 <lvm.c:618:27, col:35> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
`-ParenExpr 0x5590ecf57d08 <col:27, col:32> 'CallInfo *'
  `-BinaryOperator 0x5590ecf57ce0 <col:28, col:31> 'CallInfo *' '+'
    |-ImplicitCastExpr 0x5590ecf57cc8 <col:28> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf57c80 <col:28> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
    `-IntegerLiteral 0x5590ecf57ca8 <col:31> 'int' 1
([B80.17])->func
  19: ImplicitCastExpr 0x5590ecf57d60 <lvm.c:618:27, col:35> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf57d28 <col:27, col:35> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
  `-ParenExpr 0x5590ecf57d08 <col:27, col:32> 'CallInfo *'
    `-BinaryOperator 0x5590ecf57ce0 <col:28, col:31> 'CallInfo *' '+'
      |-ImplicitCastExpr 0x5590ecf57cc8 <col:28> 'CallInfo *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf57c80 <col:28> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
      `-IntegerLiteral 0x5590ecf57ca8 <col:31> 'int' 1
[B80.18] (ImplicitCastExpr, LValueToRValue, StkId)
  20: DeclStmt 0x5590ecf57d78 <lvm.c:618:13, col:39>col:19
`-VarDecl 0x5590ecf57c20 <col:13, col:35> col:19 used pfunc 'StkId':'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf57d60 <col:27, col:35> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x5590ecf57d28 <col:27, col:35> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
      `-ParenExpr 0x5590ecf57d08 <col:27, col:32> 'CallInfo *'
        `-BinaryOperator 0x5590ecf57ce0 <col:28, col:31> 'CallInfo *' '+'
          |-ImplicitCastExpr 0x5590ecf57cc8 <col:28> 'CallInfo *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecf57c80 <col:28> 'CallInfo *' lvalue Var 0x5590ecf57918 'ci' 'CallInfo *'
          `-IntegerLiteral 0x5590ecf57ca8 <col:31> 'int' 1
StkId pfunc = (ci + 1)->func;
  21: DeclRefExpr 0x5590ecf57d90 <lvm.c:619:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  22: ImplicitCastExpr 0x5590ecf57db8 <lvm.c:619:17> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57d90 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B80.21] (ImplicitCastExpr, LValueToRValue, lua_State *)
  23: MemberExpr 0x5590ecf57dd0 <lvm.c:619:17, col:20> 'GCObject *' lvalue ->openupval 0x5590ecea3450
`-ImplicitCastExpr 0x5590ecf57db8 <col:17> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf57d90 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B80.22]->openupval
  24: ImplicitCastExpr 0x5590ecf57e08 <lvm.c:619:17, col:20> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590ecf57dd0 <col:17, col:20> 'GCObject *' lvalue ->openupval 0x5590ecea3450
  `-ImplicitCastExpr 0x5590ecf57db8 <col:17> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf57d90 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B80.23] (ImplicitCastExpr, LValueToRValue, GCObject *)
   T: if [B80.24]
   Preds (1): B71
   Succs (2): B79 B78

 [B81]
   1: DeclRefExpr 0x5590ecf574c0 <lvm.c:609:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf57510 <lvm.c:609:30> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf574c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B81.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf574e8 <lvm.c:609:33> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
b
   4: ImplicitCastExpr 0x5590ecf57528 <lvm.c:609:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf574e8 <col:33> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
[B81.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf57540 <lvm.c:609:30, col:33> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf57510 <col:30> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf574c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf57528 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf574e8 <col:33> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
[B81.2] + [B81.4]
   6: DeclRefExpr 0x5590ecf57448 <lvm.c:609:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   7: ImplicitCastExpr 0x5590ecf57470 <lvm.c:609:21> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf57448 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B81.6] (ImplicitCastExpr, LValueToRValue, lua_State *)
   8: MemberExpr 0x5590ecf57488 <lvm.c:609:21, col:24> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf57470 <col:21> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf57448 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B81.7]->top
   9: BinaryOperator 0x5590ecf57568 <lvm.c:609:21, col:33> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf57488 <col:21, col:24> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf57470 <col:21> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf57448 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf57540 <col:30, col:33> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf57510 <col:30> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf574c0 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-ImplicitCastExpr 0x5590ecf57528 <col:33> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf574e8 <col:33> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
[B81.8] = [B81.5]
   Preds (1): B82
   Succs (1): B71

 [B82]
  case OP_TAILCALL:
   1: DeclRefExpr 0x5590ecf56ee0 <lvm.c:608:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf570a8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf56f08 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf56ee0 <lvm.c:608:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B82.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf56f28 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf56f48 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf56f68 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
[B82.3] + [B82.4]
   6: IntegerLiteral 0x5590ecf56fb0 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf56fd0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf56f90 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf56f68 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf56fb0 <line:40:17> 'int' 8
([B82.5]) + [B82.6]
   8: IntegerLiteral 0x5590ecf57040 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf57060 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf57020 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf56fd0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf56f90 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf56f68 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf56fb0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf57040 <line:37:17> 'int' 9
([B82.7]) + [B82.8]
  10: BinaryOperator 0x5590ecf570c0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf570a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf56f08 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf56ee0 <lvm.c:608:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf57088 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf57060 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf57020 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf56fd0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf56f90 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf56f68 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf56fb0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf57040 <line:37:17> 'int' 9
[B82.2] >> ([B82.9])
  11: IntegerLiteral 0x5590ecf57108 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf57138 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
(Instruction)[B82.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf57160 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
~[B82.12]
  14: IntegerLiteral 0x5590ecf571a0 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf571c0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf57180 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf57160 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf571a0 <line:38:17> 'int' 9
([B82.13]) << [B82.14]
  16: UnaryOperator 0x5590ecf57208 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf571e8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf571c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf57180 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf57160 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf571a0 <line:38:17> 'int' 9
~([B82.15])
  17: IntegerLiteral 0x5590ecf57248 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf57268 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf57228 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf57208 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf571e8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf571c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf57180 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf57160 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf571a0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf57248 <line:88:60> 'int' 0
([B82.16]) << [B82.17]
  19: BinaryOperator 0x5590ecf572b0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf570e8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf570c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf570a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf56f08 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf56ee0 <lvm.c:608:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf57088 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf57060 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf57020 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf56fd0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf56f90 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf56f68 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf56fb0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf57040 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf57290 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf57268 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf57228 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf57208 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf571e8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf571c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf57180 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf57160 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf571a0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf57248 <line:88:60> 'int' 0
([B82.10]) & ([B82.18])
  20: CStyleCastExpr 0x5590ecf57340 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf57320 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf572b0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf570e8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf570c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf570a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf56f08 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf56ee0 <lvm.c:608:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf57088 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf57060 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf57020 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf56fd0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf56f90 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf56f68 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf56fb0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf57040 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf57290 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf57268 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf57228 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf57208 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf571e8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf571c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf57180 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf57160 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf571a0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf57248 <line:88:60> 'int' 0
(int)([B82.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf573a8 <lvm.c:608:9, col:28>col:13
`-VarDecl 0x5590ecf56e80 <col:9, ./lopcodes.h:88:63> lvm.c:608:13 used b 'int' cinit
  `-ParenExpr 0x5590ecf57388 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf57368 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf57340 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf57320 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf572b0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf570e8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf570c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf570a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf56f08 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf56ee0 <lvm.c:608:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf57088 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf57060 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf57020 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf56fd0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf56f90 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf56f68 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf56f28 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf56f48 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf56fb0 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf57040 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf57290 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf57268 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf57228 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf57208 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf571e8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf571c0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf57180 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf57160 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf57138 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf57108 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf571a0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf57248 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf573c0 <lvm.c:609:13> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
b
  23: ImplicitCastExpr 0x5590ecf57408 <lvm.c:609:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf573c0 <col:13> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
[B82.22] (ImplicitCastExpr, LValueToRValue, int)
  24: IntegerLiteral 0x5590ecf573e8 <lvm.c:609:18> 'int' 0
0
  25: BinaryOperator 0x5590ecf57420 <lvm.c:609:13, col:18> 'int' '!='
|-ImplicitCastExpr 0x5590ecf57408 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf573c0 <col:13> 'int' lvalue Var 0x5590ecf56e80 'b' 'int'
`-IntegerLiteral 0x5590ecf573e8 <col:18> 'int' 0
[B82.23] != [B82.24]
   T: if [B82.25]
   Preds (1): B2
   Succs (2): B81 B71

 [B83]
   1: DeclRefExpr 0x5590ecf566a8 <lvm.c:590:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf566d0 <lvm.c:590:22> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf566a8 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B83.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf56630 <lvm.c:590:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf56658 <lvm.c:590:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56630 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B83.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf56670 <lvm.c:590:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf56658 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf56630 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B83.4]->savedpc
   6: BinaryOperator 0x5590ecf566e8 <lvm.c:590:9, col:22> 'const Instruction *' '='
|-MemberExpr 0x5590ecf56670 <col:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf56658 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf56630 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf566d0 <col:22> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf566a8 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B83.5] = [B83.2]
   7: DeclRefExpr 0x5590ecf56710 <lvm.c:591:17> 'int (lua_State *, StkId, int)' Function 0x5590ecea9718 'luaD_precall' 'int (lua_State *, StkId, int)'
luaD_precall
   8: ImplicitCastExpr 0x5590ecf56808 <lvm.c:591:17> 'int (*)(lua_State *, StkId, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf56710 <col:17> 'int (lua_State *, StkId, int)' Function 0x5590ecea9718 'luaD_precall' 'int (lua_State *, StkId, int)'
[B83.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, StkId, int))
   9: DeclRefExpr 0x5590ecf56738 <lvm.c:591:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf56860 <lvm.c:591:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56738 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B83.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf56760 <lvm.c:591:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf56878 <lvm.c:591:33> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56760 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B83.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf56788 <lvm.c:591:37> 'int' lvalue Var 0x5590ecf55f30 'nresults' 'int'
nresults
  14: ImplicitCastExpr 0x5590ecf56890 <lvm.c:591:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56788 <col:37> 'int' lvalue Var 0x5590ecf55f30 'nresults' 'int'
[B83.13] (ImplicitCastExpr, LValueToRValue, int)
  15: CallExpr 0x5590ecf56820 <lvm.c:591:17, col:45> 'int'
|-ImplicitCastExpr 0x5590ecf56808 <col:17> 'int (*)(lua_State *, StkId, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf56710 <col:17> 'int (lua_State *, StkId, int)' Function 0x5590ecea9718 'luaD_precall' 'int (lua_State *, StkId, int)'
|-ImplicitCastExpr 0x5590ecf56860 <col:30> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf56738 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf56878 <col:33> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf56760 <col:33> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf56890 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf56788 <col:37> 'int' lvalue Var 0x5590ecf55f30 'nresults' 'int'
[B83.8]([B83.10], [B83.12], [B83.14])
   T: switch [B83.15]
   Preds (2): B89 B90
   Succs (3): B87 B88 B84

 [B84]
  default:
   1: ReturnStmt 0x5590ecf56d58 <lvm.c:603:13>
return;
   Preds (1): B83
   Succs (1): B0

 [B85]
   1: DeclRefExpr 0x5590ecf56c70 <lvm.c:599:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf56c98 <lvm.c:599:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56c70 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B85.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf56cb0 <lvm.c:599:20, col:23> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf56c98 <col:20> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf56c70 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B85.2]->base
   4: ImplicitCastExpr 0x5590ecf56ce8 <lvm.c:599:20, col:23> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf56cb0 <col:20, col:23> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf56c98 <col:20> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf56c70 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B85.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf56c48 <lvm.c:599:13> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf56d00 <lvm.c:599:13, col:23> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf56c48 <col:13> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf56ce8 <col:20, col:23> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf56cb0 <col:20, col:23> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf56c98 <col:20> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf56c70 <col:20> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B85.5] = [B85.4]
   T: continue;
   Preds (2): B86 B87
   Succs (1): B1

 [B86]
   1: DeclRefExpr 0x5590ecf56b08 <lvm.c:598:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf56b30 <lvm.c:598:41> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56b08 <col:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf56b48 <lvm.c:598:41, col:44> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecf56b30 <col:41> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf56b08 <col:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.2]->ci
   4: ImplicitCastExpr 0x5590ecf56b80 <lvm.c:598:41, col:44> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecf56b48 <col:41, col:44> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecf56b30 <col:41> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf56b08 <col:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.3] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: MemberExpr 0x5590ecf56b98 <lvm.c:598:41, col:48> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
`-ImplicitCastExpr 0x5590ecf56b80 <col:41, col:44> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x5590ecf56b48 <col:41, col:44> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
    `-ImplicitCastExpr 0x5590ecf56b30 <col:41> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf56b08 <col:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.4]->top
   6: ImplicitCastExpr 0x5590ecf56bd0 <lvm.c:598:41, col:48> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf56b98 <col:41, col:48> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
  `-ImplicitCastExpr 0x5590ecf56b80 <col:41, col:44> 'CallInfo *' <LValueToRValue>
    `-MemberExpr 0x5590ecf56b48 <col:41, col:44> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
      `-ImplicitCastExpr 0x5590ecf56b30 <col:41> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf56b08 <col:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: DeclRefExpr 0x5590ecf56a90 <lvm.c:598:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   8: ImplicitCastExpr 0x5590ecf56ab8 <lvm.c:598:32> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56a90 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.7] (ImplicitCastExpr, LValueToRValue, lua_State *)
   9: MemberExpr 0x5590ecf56ad0 <lvm.c:598:32, col:35> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf56ab8 <col:32> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf56a90 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.8]->top
  10: BinaryOperator 0x5590ecf56be8 <lvm.c:598:32, col:48> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf56ad0 <col:32, col:35> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf56ab8 <col:32> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf56a90 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf56bd0 <col:41, col:48> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf56b98 <col:41, col:48> 'StkId':'TValue *' lvalue ->top 0x5590ece9ee80
    `-ImplicitCastExpr 0x5590ecf56b80 <col:41, col:44> 'CallInfo *' <LValueToRValue>
      `-MemberExpr 0x5590ecf56b48 <col:41, col:44> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
        `-ImplicitCastExpr 0x5590ecf56b30 <col:41> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf56b08 <col:41> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B86.9] = [B86.6]
   Preds (1): B87
   Succs (1): B85

 [B87]
  case 1:
   1: DeclRefExpr 0x5590ecf56a08 <lvm.c:598:17> 'int' lvalue Var 0x5590ecf55f30 'nresults' 'int'
nresults
   2: ImplicitCastExpr 0x5590ecf56a50 <lvm.c:598:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56a08 <col:17> 'int' lvalue Var 0x5590ecf55f30 'nresults' 'int'
[B87.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5590ecf56a30 <lvm.c:598:29> 'int' 0
0
   4: BinaryOperator 0x5590ecf56a68 <lvm.c:598:17, col:29> 'int' '>='
|-ImplicitCastExpr 0x5590ecf56a50 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf56a08 <col:17> 'int' lvalue Var 0x5590ecf55f30 'nresults' 'int'
`-IntegerLiteral 0x5590ecf56a30 <col:29> 'int' 0
[B87.2] >= [B87.3]
   T: if [B87.4]
   Preds (1): B83
   Succs (2): B86 B85

 [B88]
  case 0:
   1: DeclRefExpr 0x5590ecf56930 <lvm.c:593:13> 'int' lvalue ParmVar 0x5590ecef98b8 'nexeccalls' 'int'
nexeccalls
   2: UnaryOperator 0x5590ecf56958 <lvm.c:593:13, col:23> 'int' postfix '++'
`-DeclRefExpr 0x5590ecf56930 <col:13> 'int' lvalue ParmVar 0x5590ecef98b8 'nexeccalls' 'int'
[B88.1]++
   T: goto reentry;
   Preds (1): B83
   Succs (1): B260

 [B89]
   1: DeclRefExpr 0x5590ecf56528 <lvm.c:589:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf56578 <lvm.c:589:30> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56528 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B89.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf56550 <lvm.c:589:33> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
b
   4: ImplicitCastExpr 0x5590ecf56590 <lvm.c:589:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56550 <col:33> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
[B89.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x5590ecf565a8 <lvm.c:589:30, col:33> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf56578 <col:30> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf56528 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf56590 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf56550 <col:33> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
[B89.2] + [B89.4]
   6: DeclRefExpr 0x5590ecf564b0 <lvm.c:589:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   7: ImplicitCastExpr 0x5590ecf564d8 <lvm.c:589:21> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf564b0 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B89.6] (ImplicitCastExpr, LValueToRValue, lua_State *)
   8: MemberExpr 0x5590ecf564f0 <lvm.c:589:21, col:24> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
`-ImplicitCastExpr 0x5590ecf564d8 <col:21> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf564b0 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B89.7]->top
   9: BinaryOperator 0x5590ecf565d0 <lvm.c:589:21, col:33> 'StkId':'TValue *' '='
|-MemberExpr 0x5590ecf564f0 <col:21, col:24> 'StkId':'TValue *' lvalue ->top 0x5590ece9ffe8
| `-ImplicitCastExpr 0x5590ecf564d8 <col:21> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf564b0 <col:21> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecf565a8 <col:30, col:33> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf56578 <col:30> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf56528 <col:30> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-ImplicitCastExpr 0x5590ecf56590 <col:33> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf56550 <col:33> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
[B89.8] = [B89.5]
   Preds (1): B90
   Succs (1): B83

 [B90]
  case OP_CALL:
   1: DeclRefExpr 0x5590ecf55a60 <lvm.c:587:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf55c00 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf55a88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf55a60 <lvm.c:587:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B90.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf55aa8 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf55ac8 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf55ae8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
[B90.3] + [B90.4]
   6: IntegerLiteral 0x5590ecf55b30 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf55b50 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf55b10 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf55ae8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf55b30 <line:40:17> 'int' 8
([B90.5]) + [B90.6]
   8: IntegerLiteral 0x5590ecf55b98 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf55bb8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf55b78 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf55b50 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf55b10 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf55ae8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf55b30 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf55b98 <line:37:17> 'int' 9
([B90.7]) + [B90.8]
  10: BinaryOperator 0x5590ecf55c18 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf55c00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf55a88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf55a60 <lvm.c:587:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf55be0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf55bb8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf55b78 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf55b50 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf55b10 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf55ae8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf55b30 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf55b98 <line:37:17> 'int' 9
[B90.2] >> ([B90.9])
  11: IntegerLiteral 0x5590ecf55c60 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf55c90 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
(Instruction)[B90.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf55cb8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
~[B90.12]
  14: IntegerLiteral 0x5590ecf55cf8 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf55d18 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf55cd8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf55cb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf55cf8 <line:38:17> 'int' 9
([B90.13]) << [B90.14]
  16: UnaryOperator 0x5590ecf55d60 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf55d40 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf55d18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf55cd8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf55cb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf55cf8 <line:38:17> 'int' 9
~([B90.15])
  17: IntegerLiteral 0x5590ecf55da0 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf55dc0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf55d80 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf55d60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf55d40 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf55d18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf55cd8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf55cb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf55cf8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf55da0 <line:88:60> 'int' 0
([B90.16]) << [B90.17]
  19: BinaryOperator 0x5590ecf55e08 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf55c40 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf55c18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf55c00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf55a88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf55a60 <lvm.c:587:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf55be0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf55bb8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf55b78 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf55b50 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf55b10 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf55ae8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf55b30 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf55b98 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf55de8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf55dc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf55d80 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf55d60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf55d40 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf55d18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf55cd8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf55cb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf55cf8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf55da0 <line:88:60> 'int' 0
([B90.10]) & ([B90.18])
  20: CStyleCastExpr 0x5590ecf55e98 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf55e78 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf55e08 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf55c40 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf55c18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf55c00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf55a88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf55a60 <lvm.c:587:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf55be0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf55bb8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf55b78 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf55b50 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf55b10 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf55ae8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf55b30 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf55b98 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf55de8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf55dc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf55d80 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf55d60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf55d40 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf55d18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf55cd8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf55cb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf55cf8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf55da0 <line:88:60> 'int' 0
(int)([B90.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf55f00 <lvm.c:587:9, col:28>col:13
`-VarDecl 0x5590ecf55a00 <col:9, ./lopcodes.h:88:63> lvm.c:587:13 used b 'int' cinit
  `-ParenExpr 0x5590ecf55ee0 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf55ec0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf55e98 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf55e78 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf55e08 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf55c40 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf55c18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf55c00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf55a88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf55a60 <lvm.c:587:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf55be0 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf55bb8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf55b78 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf55b50 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf55b10 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf55ae8 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf55aa8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf55ac8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf55b30 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf55b98 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf55de8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf55dc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf55d80 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf55d60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf55d40 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf55d18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf55cd8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf55cb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf55c90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf55c60 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf55cf8 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf55da0 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  23: ImplicitCastExpr 0x5590ecf560c8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf55fb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B90.22]) (ImplicitCastExpr, LValueToRValue, Instruction)
  24: IntegerLiteral 0x5590ecf55fd8 <./lopcodes.h:44:17> 'int' 0
0
  25: IntegerLiteral 0x5590ecf55ff8 <./lopcodes.h:42:18> 'int' 6
6
  26: BinaryOperator 0x5590ecf56018 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
[B90.24] + [B90.25]
  27: IntegerLiteral 0x5590ecf56060 <./lopcodes.h:40:17> 'int' 8
8
  28: BinaryOperator 0x5590ecf56080 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf56040 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf56018 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf56060 <line:40:17> 'int' 8
([B90.26]) + [B90.27]
  29: BinaryOperator 0x5590ecf560e0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf560c8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf55fb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf560a8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf56080 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf56040 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf56018 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf56060 <line:40:17> 'int' 8
[B90.23] >> ([B90.28])
  30: IntegerLiteral 0x5590ecf56128 <./lopcodes.h:71:39> 'int' 0
0
  31: CStyleCastExpr 0x5590ecf56158 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
(Instruction)[B90.30] (CStyleCastExpr, IntegralCast, Instruction)
  32: UnaryOperator 0x5590ecf56180 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
~[B90.31]
  33: IntegerLiteral 0x5590ecf561c0 <./lopcodes.h:37:17> 'int' 9
9
  34: BinaryOperator 0x5590ecf561e0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
([B90.32]) << [B90.33]
  35: UnaryOperator 0x5590ecf56228 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf56208 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf561e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
~([B90.34])
  36: IntegerLiteral 0x5590ecf56268 <./lopcodes.h:92:60> 'int' 0
0
  37: BinaryOperator 0x5590ecf56288 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf56248 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf56228 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf56208 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf561e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf56268 <line:92:60> 'int' 0
([B90.35]) << [B90.36]
  38: BinaryOperator 0x5590ecf562d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf56108 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf560e0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf560c8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf55fb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf560a8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf56080 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf56040 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf56018 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf56060 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf562b0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf56288 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf56248 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf56228 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf56208 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf561e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf56268 <line:92:60> 'int' 0
([B90.29]) & ([B90.37])
  39: CStyleCastExpr 0x5590ecf56360 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf56340 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf562d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf56108 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf560e0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf560c8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf55fb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf560a8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf56080 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf56040 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf56018 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf56060 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf562b0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf56288 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf56248 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf56228 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf56208 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf561e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf56268 <line:92:60> 'int' 0
(int)([B90.38]) (CStyleCastExpr, IntegralCast, int)
  40: IntegerLiteral 0x5590ecf563c8 <lvm.c:588:38> 'int' 1
1
  41: BinaryOperator 0x5590ecf563e8 <./lopcodes.h:92:21, lvm.c:588:38> 'int' '-'
|-ParenExpr 0x5590ecf563a8 <./lopcodes.h:92:21, col:63> 'int'
| `-ParenExpr 0x5590ecf56388 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf56360 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf56340 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf562d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf56108 <line:92:32, col:43> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf560e0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf560c8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf55fb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|         |   `-ParenExpr 0x5590ecf560a8 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf56080 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf56040 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf56018 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf56060 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf562b0 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf56288 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf56248 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf56228 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf56208 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf561e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
|             |       `-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf56268 <line:92:60> 'int' 0
`-IntegerLiteral 0x5590ecf563c8 <lvm.c:588:38> 'int' 1
(([B90.39])) - [B90.40]
  42: DeclStmt 0x5590ecf56410 <lvm.c:588:9, col:39>col:13
`-VarDecl 0x5590ecf55f30 <col:9, col:38> col:13 used nresults 'int' cinit
  `-BinaryOperator 0x5590ecf563e8 <./lopcodes.h:92:21, lvm.c:588:38> 'int' '-'
    |-ParenExpr 0x5590ecf563a8 <./lopcodes.h:92:21, col:63> 'int'
    | `-ParenExpr 0x5590ecf56388 <./llimits.h:75:22, col:31> 'int'
    |   `-CStyleCastExpr 0x5590ecf56360 <col:23, col:30> 'int' <IntegralCast>
    |     `-ParenExpr 0x5590ecf56340 <col:26, col:30> 'unsigned int'
    |       `-BinaryOperator 0x5590ecf562d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |         |-ParenExpr 0x5590ecf56108 <line:92:32, col:43> 'Instruction':'unsigned int'
    |         | `-BinaryOperator 0x5590ecf560e0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |         |   |-ImplicitCastExpr 0x5590ecf560c8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |         |   | `-ParenExpr 0x5590ecf55fb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |         |   |   `-DeclRefExpr 0x5590ecf55f90 <lvm.c:588:33> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |         |   `-ParenExpr 0x5590ecf560a8 <./lopcodes.h:46:16, col:31> 'int'
    |         |     `-BinaryOperator 0x5590ecf56080 <line:45:16, line:40:17> 'int' '+'
    |         |       |-ParenExpr 0x5590ecf56040 <line:45:16, col:33> 'int'
    |         |       | `-BinaryOperator 0x5590ecf56018 <line:44:17, line:42:18> 'int' '+'
    |         |       |   |-IntegerLiteral 0x5590ecf55fd8 <line:44:17> 'int' 0
    |         |       |   `-IntegerLiteral 0x5590ecf55ff8 <line:42:18> 'int' 6
    |         |       `-IntegerLiteral 0x5590ecf56060 <line:40:17> 'int' 8
    |         `-ParenExpr 0x5590ecf562b0 <line:71:20, col:49> 'Instruction':'unsigned int'
    |           `-BinaryOperator 0x5590ecf56288 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |             |-ParenExpr 0x5590ecf56248 <line:71:21, col:45> 'Instruction':'unsigned int'
    |             | `-UnaryOperator 0x5590ecf56228 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |             |   `-ParenExpr 0x5590ecf56208 <col:23, col:44> 'Instruction':'unsigned int'
    |             |     `-BinaryOperator 0x5590ecf561e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |             |       |-ParenExpr 0x5590ecf561a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |             |       | `-UnaryOperator 0x5590ecf56180 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |             |       |   `-CStyleCastExpr 0x5590ecf56158 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |             |       |     `-IntegerLiteral 0x5590ecf56128 <col:39> 'int' 0
    |             |       `-IntegerLiteral 0x5590ecf561c0 <line:37:17> 'int' 9
    |             `-IntegerLiteral 0x5590ecf56268 <line:92:60> 'int' 0
    `-IntegerLiteral 0x5590ecf563c8 <lvm.c:588:38> 'int' 1
int nresults = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))) - 1;
  43: DeclRefExpr 0x5590ecf56428 <lvm.c:589:13> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
b
  44: ImplicitCastExpr 0x5590ecf56470 <lvm.c:589:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf56428 <col:13> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
[B90.43] (ImplicitCastExpr, LValueToRValue, int)
  45: IntegerLiteral 0x5590ecf56450 <lvm.c:589:18> 'int' 0
0
  46: BinaryOperator 0x5590ecf56488 <lvm.c:589:13, col:18> 'int' '!='
|-ImplicitCastExpr 0x5590ecf56470 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf56428 <col:13> 'int' lvalue Var 0x5590ecf55a00 'b' 'int'
`-IntegerLiteral 0x5590ecf56450 <col:18> 'int' 0
[B90.44] != [B90.45]
   T: if [B90.46]
   Preds (1): B2
   Succs (2): B89 B83

 [B91]
   1: DeclRefExpr 0x5590ecf55908 <lvm.c:583:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: UnaryOperator 0x5590ecf55930 <lvm.c:583:9, col:11> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf55908 <col:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B91.1]++
   T: continue;
   Preds (2): B92 B93
   Succs (1): B1

 [B92]
   1: DeclRefExpr 0x5590ecf54b10 <lvm.c:580:28> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf54b58 <./lobject.h:162:22, col:27> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf54b38 <col:22, col:27> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf54b10 <lvm.c:580:28> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B92.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: ImplicitCastExpr 0x5590ecf54b70 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf54b58 <col:22, col:27> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf54b38 <col:22, col:27> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf54b10 <lvm.c:580:28> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
[B92.2] (ImplicitCastExpr, BitCast, const TValue *)
   4: DeclStmt 0x5590ecf54b88 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf54ab0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf54b70 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf54b58 <col:22, col:27> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf54b38 <col:22, col:27> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf54b10 <lvm.c:580:28> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
const TValue *o2 = (rb);
   5: DeclRefExpr 0x5590ecf54c10 <lvm.c:580:24> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   6: ImplicitCastExpr 0x5590ecf54c58 <./lobject.h:162:41, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf54c38 <col:41, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf54c10 <lvm.c:580:24> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B92.5]) (ImplicitCastExpr, LValueToRValue, StkId)
   7: DeclStmt 0x5590ecf54c70 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf54bb0 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf54c58 <col:41, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf54c38 <col:41, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf54c10 <lvm.c:580:24> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *o1 = (ra);
   8: DeclRefExpr 0x5590ecf54d00 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
o2
   9: ImplicitCastExpr 0x5590ecf54d28 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf54d00 <col:17> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.8] (ImplicitCastExpr, LValueToRValue, const TValue *)
  10: MemberExpr 0x5590ecf54d40 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf54d28 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf54d00 <col:17> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.9]->value
  11: ImplicitCastExpr 0x5590ecf54d78 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf54d40 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf54d28 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf54d00 <col:17> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.10] (ImplicitCastExpr, LValueToRValue, Value)
  12: DeclRefExpr 0x5590ecf54c88 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
o1
  13: ImplicitCastExpr 0x5590ecf54cb0 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf54c88 <col:5> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
[B92.12] (ImplicitCastExpr, LValueToRValue, TValue *)
  14: MemberExpr 0x5590ecf54cc8 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf54cb0 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf54c88 <col:5> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
[B92.13]->value
  15: BinaryOperator 0x5590ecf54d90 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf54cc8 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf54cb0 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf54c88 <col:5> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf54d78 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf54d40 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf54d28 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf54d00 <col:17> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.14] = [B92.11]
  16: DeclRefExpr 0x5590ecf54e30 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
o2
  17: ImplicitCastExpr 0x5590ecf54e58 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf54e30 <col:35> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.16] (ImplicitCastExpr, LValueToRValue, const TValue *)
  18: MemberExpr 0x5590ecf54e70 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf54e58 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf54e30 <col:35> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.17]->tt
  19: ImplicitCastExpr 0x5590ecf54ea8 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf54e70 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf54e58 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf54e30 <col:35> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.18] (ImplicitCastExpr, LValueToRValue, int)
  20: DeclRefExpr 0x5590ecf54db8 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
o1
  21: ImplicitCastExpr 0x5590ecf54de0 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf54db8 <col:28> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
[B92.20] (ImplicitCastExpr, LValueToRValue, TValue *)
  22: MemberExpr 0x5590ecf54df8 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf54de0 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf54db8 <col:28> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
[B92.21]->tt
  23: BinaryOperator 0x5590ecf54ec0 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf54df8 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf54de0 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf54db8 <col:28> 'TValue *' lvalue Var 0x5590ecf54bb0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf54ea8 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf54e70 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf54e58 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf54e30 <col:35> 'const TValue *' lvalue Var 0x5590ecf54ab0 'o2' 'const TValue *'
[B92.22] = [B92.19]
  24: IntegerLiteral 0x5590ecf54ee8 <./llimits.h:62:31> 'int' 0
0
  25: CStyleCastExpr 0x5590ecf54f18 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf54ee8 <col:31> 'int' 0
(void)[B92.24] (CStyleCastExpr, ToVoid, void)
  26: DeclRefExpr 0x5590ecf54fa8 <lvm.c:581:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  27: DeclRefExpr 0x5590ecf55010 <lvm.c:581:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  28: ImplicitCastExpr 0x5590ecf55038 <lvm.c:581:37> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B92.27] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  29: UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B92.28]
  30: ImplicitCastExpr 0x5590ecf55180 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf55070 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B92.29]) (ImplicitCastExpr, LValueToRValue, Instruction)
  31: IntegerLiteral 0x5590ecf55090 <./lopcodes.h:44:17> 'int' 0
0
  32: IntegerLiteral 0x5590ecf550b0 <./lopcodes.h:42:18> 'int' 6
6
  33: BinaryOperator 0x5590ecf550d0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
[B92.31] + [B92.32]
  34: IntegerLiteral 0x5590ecf55118 <./lopcodes.h:40:17> 'int' 8
8
  35: BinaryOperator 0x5590ecf55138 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf550f8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf550d0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf55118 <line:40:17> 'int' 8
([B92.33]) + [B92.34]
  36: BinaryOperator 0x5590ecf55198 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf55180 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf55070 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf55160 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf55138 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf550f8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf550d0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf55118 <line:40:17> 'int' 8
[B92.30] >> ([B92.35])
  37: IntegerLiteral 0x5590ecf551e0 <./lopcodes.h:71:39> 'int' 0
0
  38: CStyleCastExpr 0x5590ecf55210 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
(Instruction)[B92.37] (CStyleCastExpr, IntegralCast, Instruction)
  39: UnaryOperator 0x5590ecf55238 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
~[B92.38]
  40: IntegerLiteral 0x5590ecf55278 <./lopcodes.h:37:17> 'int' 9
9
  41: IntegerLiteral 0x5590ecf55298 <./lopcodes.h:38:17> 'int' 9
9
  42: BinaryOperator 0x5590ecf552b8 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
[B92.40] + [B92.41]
  43: BinaryOperator 0x5590ecf55300 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
`-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
([B92.39]) << ([B92.42])
  44: UnaryOperator 0x5590ecf55348 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf55328 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf55300 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
~([B92.43])
  45: IntegerLiteral 0x5590ecf55388 <./lopcodes.h:96:63> 'int' 0
0
  46: BinaryOperator 0x5590ecf553a8 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf55368 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf55348 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf55328 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf55300 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf55388 <line:96:63> 'int' 0
([B92.44]) << [B92.45]
  47: BinaryOperator 0x5590ecf553f0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf551c0 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf55198 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf55180 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf55070 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf55160 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf55138 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf550f8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf550d0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf55118 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf553d0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf553a8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf55368 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf55348 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf55328 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf55300 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf55388 <line:96:63> 'int' 0
([B92.36]) & ([B92.46])
  48: CStyleCastExpr 0x5590ecf55480 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf55460 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf553f0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf551c0 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf55198 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf55180 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf55070 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf55160 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf55138 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf550f8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf550d0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf55118 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf553d0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf553a8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf55368 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf55348 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf55328 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf55300 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf55388 <line:96:63> 'int' 0
(int)([B92.47]) (CStyleCastExpr, IntegralCast, int)
  49: IntegerLiteral 0x5590ecf554e8 <./lopcodes.h:57:28> 'int' 1
1
  50: IntegerLiteral 0x5590ecf55508 <./lopcodes.h:37:17> 'int' 9
9
  51: IntegerLiteral 0x5590ecf55528 <./lopcodes.h:38:17> 'int' 9
9
  52: BinaryOperator 0x5590ecf55548 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf55508 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf55528 <line:38:17> 'int' 9
[B92.50] + [B92.51]
  53: BinaryOperator 0x5590ecf55590 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf554e8 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf55570 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf55548 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf55508 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf55528 <line:38:17> 'int' 9
[B92.49] << ([B92.52])
  54: IntegerLiteral 0x5590ecf555d8 <./lopcodes.h:57:40> 'int' 1
1
  55: BinaryOperator 0x5590ecf555f8 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf555b8 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf55590 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf554e8 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf55570 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf55548 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf55508 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf55528 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf555d8 <line:57:40> 'int' 1
([B92.53]) - [B92.54]
  56: IntegerLiteral 0x5590ecf55640 <./lopcodes.h:58:39> 'int' 1
1
  57: BinaryOperator 0x5590ecf55660 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf55620 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf555f8 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf555b8 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf55590 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf554e8 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf55570 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf55548 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf55508 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf55528 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf555d8 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf55640 <line:58:39> 'int' 1
([B92.55]) >> [B92.56]
  58: BinaryOperator 0x5590ecf556a8 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf554c8 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf554a8 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf55480 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf55460 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf553f0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf551c0 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf55198 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf55180 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf55070 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|         |   |     `-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|         |   `-ParenExpr 0x5590ecf55160 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf55138 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf550f8 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf550d0 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf55118 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf553d0 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf553a8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf55368 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf55348 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf55328 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf55300 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf55388 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf55688 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf55660 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf55620 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf555f8 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf555b8 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf55590 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf554e8 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf55570 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf55548 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf55508 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf55528 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf555d8 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf55640 <line:58:39> 'int' 1
(([B92.48])) - ([B92.57])
  59: CompoundAssignOperator 0x5590ecf55710 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf54fd0 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf54fa8 <line:581:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf556f0 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf556d0 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf556a8 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf554c8 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf554a8 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf55480 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf55460 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf553f0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf551c0 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf55198 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf55180 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf55070 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-UnaryOperator 0x5590ecf55050 <lvm.c:581:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
      |         |   |     `-ImplicitCastExpr 0x5590ecf55038 <col:37> 'const Instruction *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5590ecf55010 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
      |         |   `-ParenExpr 0x5590ecf55160 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf55138 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf550f8 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf550d0 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf55090 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf550b0 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf55118 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf553d0 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf553a8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf55368 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf55348 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf55328 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf55300 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf55258 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf55238 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf55210 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf551e0 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf552e0 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf552b8 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf55278 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf55298 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf55388 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf55688 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf55660 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf55620 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf555f8 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf555b8 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf55590 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf554e8 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf55570 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf55548 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf55508 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf55528 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf555d8 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf55640 <line:58:39> 'int' 1
([B92.26]) += (([B92.58]))
  60: IntegerLiteral 0x5590ecf55748 <./llimits.h:111:33> 'int' 0
0
  61: CStyleCastExpr 0x5590ecf55778 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf55748 <col:33> 'int' 0
(void)[B92.60] (CStyleCastExpr, ToVoid, void)
  62: IntegerLiteral 0x5590ecf557c0 <./llimits.h:110:33> 'int' 0
0
  63: CStyleCastExpr 0x5590ecf557f0 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf557c0 <col:33> 'int' 0
(void)[B92.62] (CStyleCastExpr, ToVoid, void)
   Preds (1): B93
   Succs (1): B91

 [B93]
   1: BinaryOperator 0x5590ecf545f8 <./lobject.h:79:20, line:103:70> 'int' '||'
|-ParenExpr 0x5590ecf54308 <line:79:20, col:41> 'int'
| `-BinaryOperator 0x5590ecf542e0 <line:90:18, ./lua.h:74:19> 'int' '=='
|   |-ImplicitCastExpr 0x5590ecf542c8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf54288 <col:18, col:26> 'int' lvalue
|   |   `-MemberExpr 0x5590ecf54250 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   |     `-ImplicitCastExpr 0x5590ecf54238 <col:19, col:21> 'TValue *' <LValueToRValue>
|   |       `-ParenExpr 0x5590ecf54218 <col:19, col:21> 'TValue *' lvalue
|   |         `-DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
|   `-IntegerLiteral 0x5590ecf542a8 <./lua.h:74:19> 'int' 0
`-ParenExpr 0x5590ecf545d8 <./lobject.h:103:37, col:70> 'int'
  `-BinaryOperator 0x5590ecf545b0 <line:84:24, line:103:69> 'int' '&&'
    |-ParenExpr 0x5590ecf54440 <line:84:24, col:49> 'int'
    | `-BinaryOperator 0x5590ecf54418 <line:90:18, ./lua.h:75:23> 'int' '=='
    |   |-ImplicitCastExpr 0x5590ecf54400 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf543c0 <col:18, col:26> 'int' lvalue
    |   |   `-MemberExpr 0x5590ecf54388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    |   |     `-ImplicitCastExpr 0x5590ecf54370 <col:19, col:21> 'TValue *' <LValueToRValue>
    |   |       `-ParenExpr 0x5590ecf54350 <col:19, col:21> 'TValue *' lvalue
    |   |         `-DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
    |   `-IntegerLiteral 0x5590ecf543e0 <./lua.h:75:23> 'int' 1
    `-BinaryOperator 0x5590ecf54588 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
      |-ImplicitCastExpr 0x5590ecf54570 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
      | `-ParenExpr 0x5590ecf54530 <col:25, col:27> 'int' lvalue
      |   `-MemberExpr 0x5590ecf544f8 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
      |     `-MemberExpr 0x5590ecf544c0 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
      |       `-ImplicitCastExpr 0x5590ecf544a8 <col:45, col:47> 'TValue *' <LValueToRValue>
      |         `-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
      |           `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
      `-IntegerLiteral 0x5590ecf54550 <./lobject.h:103:69> 'int' 0
([B96.30]) || (([B95.6]) && [B94.7])
   2: DeclRefExpr 0x5590ecf54640 <lvm.c:579:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   3: ImplicitCastExpr 0x5590ecf54778 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf54668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf54640 <lvm.c:579:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B93.2]) (ImplicitCastExpr, LValueToRValue, Instruction)
   4: IntegerLiteral 0x5590ecf54688 <./lopcodes.h:44:17> 'int' 0
0
   5: IntegerLiteral 0x5590ecf546a8 <./lopcodes.h:42:18> 'int' 6
6
   6: BinaryOperator 0x5590ecf546c8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf54688 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf546a8 <line:42:18> 'int' 6
[B93.4] + [B93.5]
   7: IntegerLiteral 0x5590ecf54710 <./lopcodes.h:40:17> 'int' 8
8
   8: BinaryOperator 0x5590ecf54730 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf546f0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf546c8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf54688 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf546a8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf54710 <line:40:17> 'int' 8
([B93.6]) + [B93.7]
   9: BinaryOperator 0x5590ecf54790 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf54778 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf54668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf54640 <lvm.c:579:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf54758 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf54730 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf546f0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf546c8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf54688 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf546a8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf54710 <line:40:17> 'int' 8
[B93.3] >> ([B93.8])
  10: IntegerLiteral 0x5590ecf547d8 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf54808 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
(Instruction)[B93.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf54830 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
~[B93.11]
  13: IntegerLiteral 0x5590ecf54870 <./lopcodes.h:37:17> 'int' 9
9
  14: BinaryOperator 0x5590ecf54890 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf54850 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf54830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf54870 <line:37:17> 'int' 9
([B93.12]) << [B93.13]
  15: UnaryOperator 0x5590ecf548d8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf548b8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf54890 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf54850 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf54830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf54870 <line:37:17> 'int' 9
~([B93.14])
  16: IntegerLiteral 0x5590ecf54918 <./lopcodes.h:92:60> 'int' 0
0
  17: BinaryOperator 0x5590ecf54938 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf548f8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf548d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf548b8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf54890 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf54850 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf54830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf54870 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf54918 <line:92:60> 'int' 0
([B93.15]) << [B93.16]
  18: BinaryOperator 0x5590ecf54980 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf547b8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf54790 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf54778 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf54668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf54640 <lvm.c:579:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf54758 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf54730 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf546f0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf546c8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf54688 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf546a8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf54710 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf54960 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf54938 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf548f8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf548d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf548b8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf54890 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf54850 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf54830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf54870 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf54918 <line:92:60> 'int' 0
([B93.9]) & ([B93.17])
  19: CStyleCastExpr 0x5590ecf54a10 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf549f0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf54980 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf547b8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf54790 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf54778 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf54668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf54640 <lvm.c:579:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf54758 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf54730 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf546f0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf546c8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf54688 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf546a8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf54710 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf54960 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf54938 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf548f8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf548d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf548b8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf54890 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf54850 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf54830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf54870 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf54918 <line:92:60> 'int' 0
(int)([B93.18]) (CStyleCastExpr, IntegralCast, int)
  20: BinaryOperator 0x5590ecf54a78 <./lobject.h:103:22, ./lopcodes.h:92:63> 'int' '!='
|-ParenExpr 0x5590ecf54620 <./lobject.h:103:22, col:71> 'int'
| `-BinaryOperator 0x5590ecf545f8 <line:79:20, line:103:70> 'int' '||'
|   |-ParenExpr 0x5590ecf54308 <line:79:20, col:41> 'int'
|   | `-BinaryOperator 0x5590ecf542e0 <line:90:18, ./lua.h:74:19> 'int' '=='
|   |   |-ImplicitCastExpr 0x5590ecf542c8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   |   | `-ParenExpr 0x5590ecf54288 <col:18, col:26> 'int' lvalue
|   |   |   `-MemberExpr 0x5590ecf54250 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   |   |     `-ImplicitCastExpr 0x5590ecf54238 <col:19, col:21> 'TValue *' <LValueToRValue>
|   |   |       `-ParenExpr 0x5590ecf54218 <col:19, col:21> 'TValue *' lvalue
|   |   |         `-DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
|   |   `-IntegerLiteral 0x5590ecf542a8 <./lua.h:74:19> 'int' 0
|   `-ParenExpr 0x5590ecf545d8 <./lobject.h:103:37, col:70> 'int'
|     `-BinaryOperator 0x5590ecf545b0 <line:84:24, line:103:69> 'int' '&&'
|       |-ParenExpr 0x5590ecf54440 <line:84:24, col:49> 'int'
|       | `-BinaryOperator 0x5590ecf54418 <line:90:18, ./lua.h:75:23> 'int' '=='
|       |   |-ImplicitCastExpr 0x5590ecf54400 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|       |   | `-ParenExpr 0x5590ecf543c0 <col:18, col:26> 'int' lvalue
|       |   |   `-MemberExpr 0x5590ecf54388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|       |   |     `-ImplicitCastExpr 0x5590ecf54370 <col:19, col:21> 'TValue *' <LValueToRValue>
|       |   |       `-ParenExpr 0x5590ecf54350 <col:19, col:21> 'TValue *' lvalue
|       |   |         `-DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
|       |   `-IntegerLiteral 0x5590ecf543e0 <./lua.h:75:23> 'int' 1
|       `-BinaryOperator 0x5590ecf54588 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
|         |-ImplicitCastExpr 0x5590ecf54570 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
|         | `-ParenExpr 0x5590ecf54530 <col:25, col:27> 'int' lvalue
|         |   `-MemberExpr 0x5590ecf544f8 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
|         |     `-MemberExpr 0x5590ecf544c0 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
|         |       `-ImplicitCastExpr 0x5590ecf544a8 <col:45, col:47> 'TValue *' <LValueToRValue>
|         |         `-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
|         |           `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
|         `-IntegerLiteral 0x5590ecf54550 <./lobject.h:103:69> 'int' 0
`-ParenExpr 0x5590ecf54a58 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf54a38 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf54a10 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf549f0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf54980 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf547b8 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf54790 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf54778 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf54668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf54640 <lvm.c:579:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf54758 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf54730 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf546f0 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf546c8 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf54688 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf546a8 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf54710 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf54960 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf54938 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf548f8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf548d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf548b8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf54890 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf54850 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf54830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf54808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf547d8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf54870 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf54918 <line:92:60> 'int' 0
([B93.1]) != (([B93.19]))
   T: if [B93.20]
   Preds (3): B94 B95 B96
   Succs (2): B92 B91

 [B94]
   1: DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf544a8 <./lobject.h:100:45, col:47> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B94.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf544c0 <./lobject.h:100:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf544a8 <col:45, col:47> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
[B94.2]->value
   4: MemberExpr 0x5590ecf544f8 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
`-MemberExpr 0x5590ecf544c0 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf544a8 <col:45, col:47> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
[B94.3].b
   5: ImplicitCastExpr 0x5590ecf54570 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf54530 <col:25, col:27> 'int' lvalue
  `-MemberExpr 0x5590ecf544f8 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
    `-MemberExpr 0x5590ecf544c0 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf544a8 <col:45, col:47> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B94.4]) (ImplicitCastExpr, LValueToRValue, int)
   6: IntegerLiteral 0x5590ecf54550 <./lobject.h:103:69> 'int' 0
0
   7: BinaryOperator 0x5590ecf54588 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
|-ImplicitCastExpr 0x5590ecf54570 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf54530 <col:25, col:27> 'int' lvalue
|   `-MemberExpr 0x5590ecf544f8 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
|     `-MemberExpr 0x5590ecf544c0 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
|       `-ImplicitCastExpr 0x5590ecf544a8 <col:45, col:47> 'TValue *' <LValueToRValue>
|         `-ParenExpr 0x5590ecf54488 <col:45, col:47> 'TValue *' lvalue
|           `-DeclRefExpr 0x5590ecf54460 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf54550 <./lobject.h:103:69> 'int' 0
[B94.5] == [B94.6]
   Preds (1): B95
   Succs (1): B93

 [B95]
   1: DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf54370 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf54350 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B95.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf54388 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf54370 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf54350 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
[B95.2]->tt
   4: ImplicitCastExpr 0x5590ecf54400 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf543c0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf54388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf54370 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf54350 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B95.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf543e0 <./lua.h:75:23> 'int' 1
1
   6: BinaryOperator 0x5590ecf54418 <./lobject.h:90:18, ./lua.h:75:23> 'int' '=='
|-ImplicitCastExpr 0x5590ecf54400 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf543c0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf54388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf54370 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf54350 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf54328 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf543e0 <./lua.h:75:23> 'int' 1
[B95.4] == [B95.5]
   T: ([B95.6]) && ...
   Preds (1): B96
   Succs (2): B94 B93

 [B96]
  case OP_TESTSET:
   1: DeclRefExpr 0x5590ecf53cb0 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf54178 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf53cb0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B96.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf53e78 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf53d00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B96.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf53d20 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf53d40 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf53d60 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
[B96.5] + [B96.6]
   8: IntegerLiteral 0x5590ecf53da8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf53dc8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
([B96.7]) + [B96.8]
  10: IntegerLiteral 0x5590ecf53e10 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf53e30 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf53df0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf53dc8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf53e10 <line:37:17> 'int' 9
([B96.9]) + [B96.10]
  12: BinaryOperator 0x5590ecf53e90 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf53e78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf53d00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf53e58 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf53e30 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf53df0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf53dc8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf53e10 <line:37:17> 'int' 9
[B96.4] >> ([B96.11])
  13: IntegerLiteral 0x5590ecf53ed8 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf53f08 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
(Instruction)[B96.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf53f30 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
~[B96.14]
  16: IntegerLiteral 0x5590ecf53f70 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf53f90 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
([B96.15]) << [B96.16]
  18: UnaryOperator 0x5590ecf53fd8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf53fb8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf53f90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
~([B96.17])
  19: IntegerLiteral 0x5590ecf54018 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf54038 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf53ff8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf53fd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf53fb8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf53f90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf54018 <line:88:60> 'int' 0
([B96.18]) << [B96.19]
  21: BinaryOperator 0x5590ecf54080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf53eb8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf53e90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf53e78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf53d00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf53e58 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf53e30 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf53df0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf53dc8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf53e10 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf54060 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf54038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf53ff8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf53fd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf53fb8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf53f90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf54018 <line:88:60> 'int' 0
([B96.12]) & ([B96.20])
  22: CStyleCastExpr 0x5590ecf54110 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf540f0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf54080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf53eb8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf53e90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf53e78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf53d00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf53e58 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf53e30 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf53df0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf53dc8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf53e10 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf54060 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf54038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf53ff8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf53fd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf53fb8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf53f90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf54018 <line:88:60> 'int' 0
(int)([B96.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf54190 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf54178 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf53cb0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf54158 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf54138 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf54110 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf540f0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf54080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf53eb8 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf53e90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf53e78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf53d00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf53e58 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf53e30 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf53df0 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf53dc8 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf53e10 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf54060 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf54038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf53ff8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf53fd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf53fb8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf53f90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf54018 <line:88:60> 'int' 0
[B96.2] + (([B96.22]))
  24: DeclStmt 0x5590ecf541d8 <lvm.c:578:9, col:27>col:17
`-VarDecl 0x5590ecf53c50 <col:9, ./llimits.h:63:27> lvm.c:578:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf541b8 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf54190 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf54178 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf53cb0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf54158 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf54138 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf54110 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf540f0 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf54080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf53eb8 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf53e90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf53e78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf53d00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf53cd8 <lvm.c:578:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf53e58 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf53e30 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf53df0 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf53dc8 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf53d88 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf53d60 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf53d20 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf53d40 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf53da8 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf53e10 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf54060 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf54038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf53ff8 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf53fd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf53fb8 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf53f90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf53f50 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf53f30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf53f08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf53ed8 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf53f70 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf54018 <line:88:60> 'int' 0
TValue *rb = (base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
  25: DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
rb
  26: ImplicitCastExpr 0x5590ecf54238 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf54218 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B96.25]) (ImplicitCastExpr, LValueToRValue, TValue *)
  27: MemberExpr 0x5590ecf54250 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf54238 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf54218 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
[B96.26]->tt
  28: ImplicitCastExpr 0x5590ecf542c8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf54288 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf54250 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf54238 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf54218 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
([B96.27]) (ImplicitCastExpr, LValueToRValue, int)
  29: IntegerLiteral 0x5590ecf542a8 <./lua.h:74:19> 'int' 0
0
  30: BinaryOperator 0x5590ecf542e0 <./lobject.h:90:18, ./lua.h:74:19> 'int' '=='
|-ImplicitCastExpr 0x5590ecf542c8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf54288 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf54250 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf54238 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf54218 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf541f0 <lvm.c:579:23> 'TValue *' lvalue Var 0x5590ecf53c50 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf542a8 <./lua.h:74:19> 'int' 0
[B96.28] == [B96.29]
   T: ([B96.30]) || ...
   Preds (1): B2
   Succs (2): B93 B95

 [B97]
   1: DeclRefExpr 0x5590ecf53b60 <lvm.c:574:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: UnaryOperator 0x5590ecf53b88 <lvm.c:574:9, col:11> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf53b60 <col:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B97.1]++
   T: continue;
   Preds (2): B98 B99
   Succs (1): B1

 [B98]
   1: DeclRefExpr 0x5590ecf53250 <lvm.c:573:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: DeclRefExpr 0x5590ecf53298 <lvm.c:573:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   3: ImplicitCastExpr 0x5590ecf532c0 <lvm.c:573:37> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B98.2] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   4: UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B98.3]
   5: ImplicitCastExpr 0x5590ecf53408 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf532f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B98.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf53318 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf53338 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf53358 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
[B98.6] + [B98.7]
   9: IntegerLiteral 0x5590ecf533a0 <./lopcodes.h:40:17> 'int' 8
8
  10: BinaryOperator 0x5590ecf533c0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf53380 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf53358 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf533a0 <line:40:17> 'int' 8
([B98.8]) + [B98.9]
  11: BinaryOperator 0x5590ecf53420 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf53408 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf532f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf533e8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf533c0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf53380 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf53358 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf533a0 <line:40:17> 'int' 8
[B98.5] >> ([B98.10])
  12: IntegerLiteral 0x5590ecf53468 <./lopcodes.h:71:39> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf53498 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
(Instruction)[B98.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: UnaryOperator 0x5590ecf534c0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
~[B98.13]
  15: IntegerLiteral 0x5590ecf53500 <./lopcodes.h:37:17> 'int' 9
9
  16: IntegerLiteral 0x5590ecf53520 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf53540 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
[B98.15] + [B98.16]
  18: BinaryOperator 0x5590ecf53588 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
`-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
([B98.14]) << ([B98.17])
  19: UnaryOperator 0x5590ecf535d0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf535b0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf53588 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
~([B98.18])
  20: IntegerLiteral 0x5590ecf53610 <./lopcodes.h:96:63> 'int' 0
0
  21: BinaryOperator 0x5590ecf53630 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf535f0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf535d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf535b0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf53588 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf53610 <line:96:63> 'int' 0
([B98.19]) << [B98.20]
  22: BinaryOperator 0x5590ecf53678 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf53448 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf53420 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf53408 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf532f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf533e8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf533c0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf53380 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf53358 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf533a0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf53658 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf53630 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf535f0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf535d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf535b0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf53588 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf53610 <line:96:63> 'int' 0
([B98.11]) & ([B98.21])
  23: CStyleCastExpr 0x5590ecf53708 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf536e8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf53678 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf53448 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf53420 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf53408 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf532f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf533e8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf533c0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf53380 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf53358 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf533a0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf53658 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf53630 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf535f0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf535d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf535b0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf53588 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf53610 <line:96:63> 'int' 0
(int)([B98.22]) (CStyleCastExpr, IntegralCast, int)
  24: IntegerLiteral 0x5590ecf53770 <./lopcodes.h:57:28> 'int' 1
1
  25: IntegerLiteral 0x5590ecf53790 <./lopcodes.h:37:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf537b0 <./lopcodes.h:38:17> 'int' 9
9
  27: BinaryOperator 0x5590ecf537d0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf53790 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf537b0 <line:38:17> 'int' 9
[B98.25] + [B98.26]
  28: BinaryOperator 0x5590ecf53818 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf53770 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf537f8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf537d0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf53790 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf537b0 <line:38:17> 'int' 9
[B98.24] << ([B98.27])
  29: IntegerLiteral 0x5590ecf53860 <./lopcodes.h:57:40> 'int' 1
1
  30: BinaryOperator 0x5590ecf53880 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf53840 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf53818 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf53770 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf537f8 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf537d0 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf53790 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf537b0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf53860 <line:57:40> 'int' 1
([B98.28]) - [B98.29]
  31: IntegerLiteral 0x5590ecf538c8 <./lopcodes.h:58:39> 'int' 1
1
  32: BinaryOperator 0x5590ecf538e8 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf538a8 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf53880 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf53840 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf53818 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf53770 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf537f8 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf537d0 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf53790 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf537b0 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf53860 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf538c8 <line:58:39> 'int' 1
([B98.30]) >> [B98.31]
  33: BinaryOperator 0x5590ecf53930 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf53750 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf53730 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf53708 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf536e8 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf53678 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf53448 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf53420 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf53408 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf532f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
|         |   |     `-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|         |   `-ParenExpr 0x5590ecf533e8 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf533c0 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf53380 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf53358 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf533a0 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf53658 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf53630 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf535f0 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf535d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf535b0 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf53588 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf53610 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf53910 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf538e8 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf538a8 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf53880 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf53840 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf53818 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf53770 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf537f8 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf537d0 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf53790 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf537b0 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf53860 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf538c8 <line:58:39> 'int' 1
(([B98.23])) - ([B98.32])
  34: CompoundAssignOperator 0x5590ecf53998 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf53278 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf53250 <line:573:21> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf53978 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf53958 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf53930 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf53750 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf53730 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf53708 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf536e8 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf53678 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf53448 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf53420 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf53408 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf532f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-UnaryOperator 0x5590ecf532d8 <lvm.c:573:36, col:37> 'const Instruction':'const unsigned int' lvalue prefix '*'
      |         |   |     `-ImplicitCastExpr 0x5590ecf532c0 <col:37> 'const Instruction *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5590ecf53298 <col:37> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
      |         |   `-ParenExpr 0x5590ecf533e8 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf533c0 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf53380 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf53358 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf53318 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf53338 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf533a0 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf53658 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf53630 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf535f0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf535d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf535b0 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf53588 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf534e0 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf534c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf53498 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf53468 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf53568 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf53540 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf53500 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf53520 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf53610 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf53910 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf538e8 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf538a8 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf53880 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf53840 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf53818 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf53770 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf537f8 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf537d0 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf53790 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf537b0 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf53860 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf538c8 <line:58:39> 'int' 1
([B98.1]) += (([B98.33]))
  35: IntegerLiteral 0x5590ecf539d0 <./llimits.h:111:33> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf53a00 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf539d0 <col:33> 'int' 0
(void)[B98.35] (CStyleCastExpr, ToVoid, void)
  37: IntegerLiteral 0x5590ecf53a48 <./llimits.h:110:33> 'int' 0
0
  38: CStyleCastExpr 0x5590ecf53a78 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf53a48 <col:33> 'int' 0
(void)[B98.37] (CStyleCastExpr, ToVoid, void)
   Preds (1): B99
   Succs (1): B97

 [B99]
   1: BinaryOperator 0x5590ecf52d88 <./lobject.h:79:20, line:103:70> 'int' '||'
|-ParenExpr 0x5590ecf52a98 <line:79:20, col:41> 'int'
| `-BinaryOperator 0x5590ecf52a70 <line:90:18, ./lua.h:74:19> 'int' '=='
|   |-ImplicitCastExpr 0x5590ecf52a58 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf52a18 <col:18, col:26> 'int' lvalue
|   |   `-MemberExpr 0x5590ecf529e0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   |     `-ImplicitCastExpr 0x5590ecf529c8 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|   |       `-ParenExpr 0x5590ecf529a8 <col:19, col:21> 'StkId':'TValue *' lvalue
|   |         `-DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|   `-IntegerLiteral 0x5590ecf52a38 <./lua.h:74:19> 'int' 0
`-ParenExpr 0x5590ecf52d68 <./lobject.h:103:37, col:70> 'int'
  `-BinaryOperator 0x5590ecf52d40 <line:84:24, line:103:69> 'int' '&&'
    |-ParenExpr 0x5590ecf52bd0 <line:84:24, col:49> 'int'
    | `-BinaryOperator 0x5590ecf52ba8 <line:90:18, ./lua.h:75:23> 'int' '=='
    |   |-ImplicitCastExpr 0x5590ecf52b90 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf52b50 <col:18, col:26> 'int' lvalue
    |   |   `-MemberExpr 0x5590ecf52b18 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    |   |     `-ImplicitCastExpr 0x5590ecf52b00 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
    |   |       `-ParenExpr 0x5590ecf52ae0 <col:19, col:21> 'StkId':'TValue *' lvalue
    |   |         `-DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
    |   `-IntegerLiteral 0x5590ecf52b70 <./lua.h:75:23> 'int' 1
    `-BinaryOperator 0x5590ecf52d18 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
      |-ImplicitCastExpr 0x5590ecf52d00 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
      | `-ParenExpr 0x5590ecf52cc0 <col:25, col:27> 'int' lvalue
      |   `-MemberExpr 0x5590ecf52c88 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
      |     `-MemberExpr 0x5590ecf52c50 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
      |       `-ImplicitCastExpr 0x5590ecf52c38 <col:45, col:47> 'StkId':'TValue *' <LValueToRValue>
      |         `-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
      |           `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf52ce0 <./lobject.h:103:69> 'int' 0
([B102.6]) || (([B101.6]) && [B100.7])
   2: DeclRefExpr 0x5590ecf52dd0 <lvm.c:572:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   3: ImplicitCastExpr 0x5590ecf52f08 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf52df8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf52dd0 <lvm.c:572:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B99.2]) (ImplicitCastExpr, LValueToRValue, Instruction)
   4: IntegerLiteral 0x5590ecf52e18 <./lopcodes.h:44:17> 'int' 0
0
   5: IntegerLiteral 0x5590ecf52e38 <./lopcodes.h:42:18> 'int' 6
6
   6: BinaryOperator 0x5590ecf52e58 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf52e18 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf52e38 <line:42:18> 'int' 6
[B99.4] + [B99.5]
   7: IntegerLiteral 0x5590ecf52ea0 <./lopcodes.h:40:17> 'int' 8
8
   8: BinaryOperator 0x5590ecf52ec0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf52e80 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf52e58 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf52e18 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf52e38 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf52ea0 <line:40:17> 'int' 8
([B99.6]) + [B99.7]
   9: BinaryOperator 0x5590ecf52f20 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf52f08 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf52df8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf52dd0 <lvm.c:572:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf52ee8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf52ec0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf52e80 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf52e58 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf52e18 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf52e38 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf52ea0 <line:40:17> 'int' 8
[B99.3] >> ([B99.8])
  10: IntegerLiteral 0x5590ecf52f68 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf52f98 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
(Instruction)[B99.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf52fc0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
~[B99.11]
  13: IntegerLiteral 0x5590ecf53020 <./lopcodes.h:37:17> 'int' 9
9
  14: BinaryOperator 0x5590ecf53040 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf53000 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf52fc0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf53020 <line:37:17> 'int' 9
([B99.12]) << [B99.13]
  15: UnaryOperator 0x5590ecf53088 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf53068 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf53040 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf53000 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf52fc0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf53020 <line:37:17> 'int' 9
~([B99.14])
  16: IntegerLiteral 0x5590ecf530c8 <./lopcodes.h:92:60> 'int' 0
0
  17: BinaryOperator 0x5590ecf530e8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf530a8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf53088 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf53068 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf53040 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf53000 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf52fc0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf53020 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf530c8 <line:92:60> 'int' 0
([B99.15]) << [B99.16]
  18: BinaryOperator 0x5590ecf53130 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf52f48 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf52f20 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf52f08 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf52df8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf52dd0 <lvm.c:572:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf52ee8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf52ec0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf52e80 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf52e58 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf52e18 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf52e38 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf52ea0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf53110 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf530e8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf530a8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf53088 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf53068 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf53040 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf53000 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf52fc0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf53020 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf530c8 <line:92:60> 'int' 0
([B99.9]) & ([B99.17])
  19: CStyleCastExpr 0x5590ecf531c0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf531a0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf53130 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf52f48 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf52f20 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf52f08 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf52df8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf52dd0 <lvm.c:572:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf52ee8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf52ec0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf52e80 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf52e58 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf52e18 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf52e38 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf52ea0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf53110 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf530e8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf530a8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf53088 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf53068 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf53040 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf53000 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf52fc0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf53020 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf530c8 <line:92:60> 'int' 0
(int)([B99.18]) (CStyleCastExpr, IntegralCast, int)
  20: BinaryOperator 0x5590ecf53228 <./lobject.h:103:22, ./lopcodes.h:92:63> 'int' '!='
|-ParenExpr 0x5590ecf52db0 <./lobject.h:103:22, col:71> 'int'
| `-BinaryOperator 0x5590ecf52d88 <line:79:20, line:103:70> 'int' '||'
|   |-ParenExpr 0x5590ecf52a98 <line:79:20, col:41> 'int'
|   | `-BinaryOperator 0x5590ecf52a70 <line:90:18, ./lua.h:74:19> 'int' '=='
|   |   |-ImplicitCastExpr 0x5590ecf52a58 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   |   | `-ParenExpr 0x5590ecf52a18 <col:18, col:26> 'int' lvalue
|   |   |   `-MemberExpr 0x5590ecf529e0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   |   |     `-ImplicitCastExpr 0x5590ecf529c8 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|   |   |       `-ParenExpr 0x5590ecf529a8 <col:19, col:21> 'StkId':'TValue *' lvalue
|   |   |         `-DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|   |   `-IntegerLiteral 0x5590ecf52a38 <./lua.h:74:19> 'int' 0
|   `-ParenExpr 0x5590ecf52d68 <./lobject.h:103:37, col:70> 'int'
|     `-BinaryOperator 0x5590ecf52d40 <line:84:24, line:103:69> 'int' '&&'
|       |-ParenExpr 0x5590ecf52bd0 <line:84:24, col:49> 'int'
|       | `-BinaryOperator 0x5590ecf52ba8 <line:90:18, ./lua.h:75:23> 'int' '=='
|       |   |-ImplicitCastExpr 0x5590ecf52b90 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|       |   | `-ParenExpr 0x5590ecf52b50 <col:18, col:26> 'int' lvalue
|       |   |   `-MemberExpr 0x5590ecf52b18 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|       |   |     `-ImplicitCastExpr 0x5590ecf52b00 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       |   |       `-ParenExpr 0x5590ecf52ae0 <col:19, col:21> 'StkId':'TValue *' lvalue
|       |   |         `-DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|       |   `-IntegerLiteral 0x5590ecf52b70 <./lua.h:75:23> 'int' 1
|       `-BinaryOperator 0x5590ecf52d18 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
|         |-ImplicitCastExpr 0x5590ecf52d00 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
|         | `-ParenExpr 0x5590ecf52cc0 <col:25, col:27> 'int' lvalue
|         |   `-MemberExpr 0x5590ecf52c88 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
|         |     `-MemberExpr 0x5590ecf52c50 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
|         |       `-ImplicitCastExpr 0x5590ecf52c38 <col:45, col:47> 'StkId':'TValue *' <LValueToRValue>
|         |         `-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
|         |           `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|         `-IntegerLiteral 0x5590ecf52ce0 <./lobject.h:103:69> 'int' 0
`-ParenExpr 0x5590ecf53208 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf531e8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf531c0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf531a0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf53130 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf52f48 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf52f20 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf52f08 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf52df8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf52dd0 <lvm.c:572:39> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf52ee8 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf52ec0 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf52e80 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf52e58 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf52e18 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf52e38 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf52ea0 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf53110 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf530e8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf530a8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf53088 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf53068 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf53040 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf53000 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf52fc0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf52f98 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf52f68 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf53020 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf530c8 <line:92:60> 'int' 0
([B99.1]) != (([B99.19]))
   T: if [B99.20]
   Preds (3): B100 B101 B102
   Succs (2): B98 B97

 [B100]
   1: DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf52c38 <./lobject.h:100:45, col:47> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B100.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: MemberExpr 0x5590ecf52c50 <./lobject.h:100:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf52c38 <col:45, col:47> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B100.2]->value
   4: MemberExpr 0x5590ecf52c88 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
`-MemberExpr 0x5590ecf52c50 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf52c38 <col:45, col:47> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B100.3].b
   5: ImplicitCastExpr 0x5590ecf52d00 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf52cc0 <col:25, col:27> 'int' lvalue
  `-MemberExpr 0x5590ecf52c88 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
    `-MemberExpr 0x5590ecf52c50 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf52c38 <col:45, col:47> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B100.4]) (ImplicitCastExpr, LValueToRValue, int)
   6: IntegerLiteral 0x5590ecf52ce0 <./lobject.h:103:69> 'int' 0
0
   7: BinaryOperator 0x5590ecf52d18 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
|-ImplicitCastExpr 0x5590ecf52d00 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf52cc0 <col:25, col:27> 'int' lvalue
|   `-MemberExpr 0x5590ecf52c88 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
|     `-MemberExpr 0x5590ecf52c50 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
|       `-ImplicitCastExpr 0x5590ecf52c38 <col:45, col:47> 'StkId':'TValue *' <LValueToRValue>
|         `-ParenExpr 0x5590ecf52c18 <col:45, col:47> 'StkId':'TValue *' lvalue
|           `-DeclRefExpr 0x5590ecf52bf0 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf52ce0 <./lobject.h:103:69> 'int' 0
[B100.5] == [B100.6]
   Preds (1): B101
   Succs (1): B99

 [B101]
   1: DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf52b00 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf52ae0 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B101.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: MemberExpr 0x5590ecf52b18 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf52b00 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf52ae0 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B101.2]->tt
   4: ImplicitCastExpr 0x5590ecf52b90 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf52b50 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf52b18 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf52b00 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf52ae0 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B101.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf52b70 <./lua.h:75:23> 'int' 1
1
   6: BinaryOperator 0x5590ecf52ba8 <./lobject.h:90:18, ./lua.h:75:23> 'int' '=='
|-ImplicitCastExpr 0x5590ecf52b90 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf52b50 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf52b18 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf52b00 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf52ae0 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf52ab8 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf52b70 <./lua.h:75:23> 'int' 1
[B101.4] == [B101.5]
   T: ([B101.6]) && ...
   Preds (1): B102
   Succs (2): B100 B99

 [B102]
  case OP_TEST:
   1: DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf529c8 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf529a8 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B102.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: MemberExpr 0x5590ecf529e0 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf529c8 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf529a8 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B102.2]->tt
   4: ImplicitCastExpr 0x5590ecf52a58 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf52a18 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf529e0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf529c8 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf529a8 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B102.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf52a38 <./lua.h:74:19> 'int' 0
0
   6: BinaryOperator 0x5590ecf52a70 <./lobject.h:90:18, ./lua.h:74:19> 'int' '=='
|-ImplicitCastExpr 0x5590ecf52a58 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf52a18 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf529e0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf529c8 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf529a8 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf52980 <lvm.c:572:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf52a38 <./lua.h:74:19> 'int' 0
[B102.4] == [B102.5]
   T: ([B102.6]) || ...
   Preds (1): B2
   Succs (2): B99 B101

 [B103]
   1: DeclRefExpr 0x5590ecf527c0 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf527e8 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf527c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B103.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf52800 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf527e8 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf527c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B103.2]->base
   4: ImplicitCastExpr 0x5590ecf52838 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf52800 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf527e8 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf527c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B103.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf52798 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf52850 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf52798 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf52838 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf52800 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf527e8 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf527c0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B103.5] = [B103.4]
   7: DeclRefExpr 0x5590ecf528a8 <lvm.c:568:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   8: UnaryOperator 0x5590ecf528d0 <lvm.c:568:9, col:11> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf528a8 <col:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B103.7]++
   T: continue;
   Preds (2): B104 B105
   Succs (1): B1

 [B104]
   1: DeclRefExpr 0x5590ecf51e40 <lvm.c:566:23> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: DeclRefExpr 0x5590ecf51e88 <lvm.c:566:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   3: ImplicitCastExpr 0x5590ecf51eb0 <lvm.c:566:39> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B104.2] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   4: UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B104.3]
   5: ImplicitCastExpr 0x5590ecf51ff8 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf51ee8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B104.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf51f08 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf51f28 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf51f48 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
[B104.6] + [B104.7]
   9: IntegerLiteral 0x5590ecf51f90 <./lopcodes.h:40:17> 'int' 8
8
  10: BinaryOperator 0x5590ecf51fb0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf51f70 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf51f48 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf51f90 <line:40:17> 'int' 8
([B104.8]) + [B104.9]
  11: BinaryOperator 0x5590ecf52010 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf51ff8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf51ee8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf51fd8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf51fb0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf51f70 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf51f48 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf51f90 <line:40:17> 'int' 8
[B104.5] >> ([B104.10])
  12: IntegerLiteral 0x5590ecf52058 <./lopcodes.h:71:39> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf52088 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
(Instruction)[B104.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: UnaryOperator 0x5590ecf520b0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
~[B104.13]
  15: IntegerLiteral 0x5590ecf520f0 <./lopcodes.h:37:17> 'int' 9
9
  16: IntegerLiteral 0x5590ecf52110 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf52130 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
[B104.15] + [B104.16]
  18: BinaryOperator 0x5590ecf52178 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
`-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
([B104.14]) << ([B104.17])
  19: UnaryOperator 0x5590ecf521c0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf521a0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf52178 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
~([B104.18])
  20: IntegerLiteral 0x5590ecf52200 <./lopcodes.h:96:63> 'int' 0
0
  21: BinaryOperator 0x5590ecf52220 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf521e0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf521c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf521a0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf52178 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf52200 <line:96:63> 'int' 0
([B104.19]) << [B104.20]
  22: BinaryOperator 0x5590ecf52268 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf52038 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf52010 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf51ff8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf51ee8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf51fd8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf51fb0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf51f70 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf51f48 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf51f90 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf52248 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf52220 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf521e0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf521c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf521a0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf52178 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf52200 <line:96:63> 'int' 0
([B104.11]) & ([B104.21])
  23: CStyleCastExpr 0x5590ecf522f8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf522d8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf52268 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf52038 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf52010 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf51ff8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf51ee8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf51fd8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf51fb0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf51f70 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf51f48 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf51f90 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf52248 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf52220 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf521e0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf521c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf521a0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf52178 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf52200 <line:96:63> 'int' 0
(int)([B104.22]) (CStyleCastExpr, IntegralCast, int)
  24: IntegerLiteral 0x5590ecf52360 <./lopcodes.h:57:28> 'int' 1
1
  25: IntegerLiteral 0x5590ecf52380 <./lopcodes.h:37:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf523a0 <./lopcodes.h:38:17> 'int' 9
9
  27: BinaryOperator 0x5590ecf523c0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf52380 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf523a0 <line:38:17> 'int' 9
[B104.25] + [B104.26]
  28: BinaryOperator 0x5590ecf52408 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf52360 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf523e8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf523c0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf52380 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf523a0 <line:38:17> 'int' 9
[B104.24] << ([B104.27])
  29: IntegerLiteral 0x5590ecf52450 <./lopcodes.h:57:40> 'int' 1
1
  30: BinaryOperator 0x5590ecf52470 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf52430 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf52408 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf52360 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf523e8 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf523c0 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf52380 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf523a0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf52450 <line:57:40> 'int' 1
([B104.28]) - [B104.29]
  31: IntegerLiteral 0x5590ecf524b8 <./lopcodes.h:58:39> 'int' 1
1
  32: BinaryOperator 0x5590ecf524d8 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf52498 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf52470 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf52430 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf52408 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf52360 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf523e8 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf523c0 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf52380 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf523a0 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf52450 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf524b8 <line:58:39> 'int' 1
([B104.30]) >> [B104.31]
  33: BinaryOperator 0x5590ecf52520 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf52340 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf52320 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf522f8 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf522d8 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf52268 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf52038 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf52010 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf51ff8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf51ee8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|         |   |     `-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|         |   `-ParenExpr 0x5590ecf51fd8 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf51fb0 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf51f70 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf51f48 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf51f90 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf52248 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf52220 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf521e0 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf521c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf521a0 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf52178 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf52200 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf52500 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf524d8 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf52498 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf52470 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf52430 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf52408 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf52360 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf523e8 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf523c0 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf52380 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf523a0 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf52450 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf524b8 <line:58:39> 'int' 1
(([B104.23])) - ([B104.32])
  34: CompoundAssignOperator 0x5590ecf52588 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf51e68 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf51e40 <line:566:23> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf52568 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf52548 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf52520 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf52340 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf52320 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf522f8 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf522d8 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf52268 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf52038 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf52010 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf51ff8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf51ee8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-UnaryOperator 0x5590ecf51ec8 <lvm.c:566:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
      |         |   |     `-ImplicitCastExpr 0x5590ecf51eb0 <col:39> 'const Instruction *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5590ecf51e88 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
      |         |   `-ParenExpr 0x5590ecf51fd8 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf51fb0 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf51f70 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf51f48 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf51f08 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf51f28 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf51f90 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf52248 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf52220 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf521e0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf521c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf521a0 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf52178 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf520d0 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf520b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf52088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf52058 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf52158 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf52130 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf520f0 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf52110 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf52200 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf52500 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf524d8 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf52498 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf52470 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf52430 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf52408 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf52360 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf523e8 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf523c0 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf52380 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf523a0 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf52450 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf524b8 <line:58:39> 'int' 1
([B104.1]) += (([B104.33]))
  35: IntegerLiteral 0x5590ecf525c0 <./llimits.h:111:33> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf525f0 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf525c0 <col:33> 'int' 0
(void)[B104.35] (CStyleCastExpr, ToVoid, void)
  37: IntegerLiteral 0x5590ecf52638 <./llimits.h:110:33> 'int' 0
0
  38: CStyleCastExpr 0x5590ecf52668 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf52638 <col:33> 'int' 0
(void)[B104.37] (CStyleCastExpr, ToVoid, void)
   Preds (1): B105
   Succs (1): B103

 [B105]
   1: ConditionalOperator 0x5590ecf51958 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf50df0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf50dc8 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf50cb8 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf50c98 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf50c78 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf50c50 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf50c30 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf50da8 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf50d80 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf50cd8 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf50d60 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf50d38 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf51490 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf51478 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf50e10 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf51458 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf51430 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf512f8 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf51410 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf51930 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf51918 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf514b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf518f8 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf518d8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf518b0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf51890 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
([B108.26]) ? [B106.29] : [B107.21]
   2: ImplicitCastExpr 0x5590ecf51a30 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf51988 <col:25, col:27> 'TValue *'
  `-ConditionalOperator 0x5590ecf51958 <./lopcodes.h:122:17, line:92:63> 'TValue *'
    |-ParenExpr 0x5590ecf50df0 <line:122:17, col:29> 'int'
    | `-BinaryOperator 0x5590ecf50dc8 <col:18, line:119:34> 'int' '&'
    |   |-ParenExpr 0x5590ecf50cb8 <line:122:18, col:20> 'int'
    |   | `-ParenExpr 0x5590ecf50c98 <line:92:21, col:63> 'int'
    |   |   `-ParenExpr 0x5590ecf50c78 <./llimits.h:75:22, col:31> 'int'
    |   |     `-CStyleCastExpr 0x5590ecf50c50 <col:23, col:30> 'int' <IntegralCast>
    |   |       `-ParenExpr 0x5590ecf50c30 <col:26, col:30> 'unsigned int'
    |   |         `-BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |   |           |-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
    |   |           | `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |           |   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   |           |   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |           |   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   |           |   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
    |   |           |     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
    |   |           |       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
    |   |           |       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
    |   |           |       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
    |   |           |       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
    |   |           |       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
    |   |           `-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
    |   |             `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |   |               |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
    |   |               | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   |               |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
    |   |               |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |   |               |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
    |   |               |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   |               |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |   |               |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
    |   |               |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
    |   |               `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
    |   `-ParenExpr 0x5590ecf50da8 <line:119:16, col:34> 'int'
    |     `-BinaryOperator 0x5590ecf50d80 <col:17, col:33> 'int' '<<'
    |       |-IntegerLiteral 0x5590ecf50cd8 <col:17> 'int' 1
    |       `-ParenExpr 0x5590ecf50d60 <col:22, col:33> 'int'
    |         `-BinaryOperator 0x5590ecf50d38 <line:38:17, line:119:32> 'int' '-'
    |           |-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
    |-BinaryOperator 0x5590ecf51490 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
    | |-ImplicitCastExpr 0x5590ecf51478 <lvm.c:354:21> 'TValue *' <LValueToRValue>
    | | `-DeclRefExpr 0x5590ecf50e10 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
    | `-ParenExpr 0x5590ecf51458 <./lopcodes.h:125:19, col:37> 'int'
    |   `-BinaryOperator 0x5590ecf51430 <col:20, line:119:34> 'int' '&'
    |     |-CStyleCastExpr 0x5590ecf512f8 <line:125:20, col:27> 'int' <NoOp>
    |     | `-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
    |     |   `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
    |     |     `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
    |     |       `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
    |     |         `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
    |     |           `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |     |             |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
    |     |             | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |     |             |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |     |             |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |     |             |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |     |             |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
    |     |             |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
    |     |             |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
    |     |             |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
    |     |             |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
    |     |             |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
    |     |             |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
    |     |             `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
    |     |               `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |     |                 |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
    |     |                 | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |     |                 |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
    |     |                 |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |     |                 |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
    |     |                 |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |     |                 |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     |                 |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
    |     |                 |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
    |     |                 `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
    |     `-UnaryOperator 0x5590ecf51410 <line:125:31, line:119:34> 'int' prefix '~'
    |       `-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
    |           |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
    |           `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
    |             `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
    |               |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
    |               `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
    `-BinaryOperator 0x5590ecf51930 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf51918 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf514b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf518f8 <./lopcodes.h:92:21, col:63> 'int'
        `-ParenExpr 0x5590ecf518d8 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf518b0 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf51890 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
                |       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
                |       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
                |       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
                |       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
                `-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
([B105.1]) (ImplicitCastExpr, BitCast, const TValue *)
   3: CallExpr 0x5590ecf519c0 <lvm.c:565:15, col:42> 'int'
|-ImplicitCastExpr 0x5590ecf519a8 <col:15> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf4f5f0 <col:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeca50 'lessequal' 'int (lua_State *, const TValue *, const TValue *)'
|-ImplicitCastExpr 0x5590ecf51a00 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf4f618 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf51a18 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
| `-ParenExpr 0x5590ecf50860 <col:25, col:27> 'TValue *'
|   `-ConditionalOperator 0x5590ecf50830 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|     |-ParenExpr 0x5590ecf4fc18 <line:122:17, col:29> 'int'
|     | `-BinaryOperator 0x5590ecf4fbf0 <col:18, line:119:34> 'int' '&'
|     |   |-ParenExpr 0x5590ecf4fae0 <line:122:18, col:20> 'int'
|     |   | `-ParenExpr 0x5590ecf4fac0 <line:88:21, col:63> 'int'
|     |   |   `-ParenExpr 0x5590ecf4faa0 <./llimits.h:75:22, col:31> 'int'
|     |   |     `-CStyleCastExpr 0x5590ecf4fa78 <col:23, col:30> 'int' <IntegralCast>
|     |   |       `-ParenExpr 0x5590ecf4fa58 <col:26, col:30> 'unsigned int'
|     |   |         `-BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |   |           |-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |   |           | `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |   |           |   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |   |           |   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |   |           |   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |   |           |   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
|     |   |           |     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
|     |   |           |       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
|     |   |           |       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
|     |   |           |       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
|     |   |           |       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
|     |   |           |       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
|     |   |           |       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
|     |   |           |       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
|     |   |           |       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
|     |   |           `-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |   |             `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |   |               |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |   |               | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |   |               |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
|     |   |               |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |   |               |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |   |               |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |   |               |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |   |               |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
|     |   |               |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
|     |   |               `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
|     |   `-ParenExpr 0x5590ecf4fbd0 <line:119:16, col:34> 'int'
|     |     `-BinaryOperator 0x5590ecf4fba8 <col:17, col:33> 'int' '<<'
|     |       |-IntegerLiteral 0x5590ecf4fb00 <col:17> 'int' 1
|     |       `-ParenExpr 0x5590ecf4fb88 <col:22, col:33> 'int'
|     |         `-BinaryOperator 0x5590ecf4fb60 <line:38:17, line:119:32> 'int' '-'
|     |           |-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
|     |           `-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
|     |-BinaryOperator 0x5590ecf50300 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|     | |-ImplicitCastExpr 0x5590ecf502e8 <lvm.c:352:21> 'TValue *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5590ecf4fc38 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|     | `-ParenExpr 0x5590ecf502c8 <./lopcodes.h:125:19, col:37> 'int'
|     |   `-BinaryOperator 0x5590ecf502a0 <col:20, line:119:34> 'int' '&'
|     |     |-CStyleCastExpr 0x5590ecf50168 <line:125:20, col:27> 'int' <NoOp>
|     |     | `-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
|     |     |   `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
|     |     |     `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
|     |     |       `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
|     |     |         `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
|     |     |           `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |     |             |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |     |             | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |     |             |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |     |             |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |     |             |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |     |             |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
|     |     |             |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
|     |     |             |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
|     |     |             |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
|     |     |             |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
|     |     |             |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
|     |     |             |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
|     |     |             |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
|     |     |             |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
|     |     |             |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
|     |     |             `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |     |               `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |     |                 |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |     |                 | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |     |                 |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
|     |     |                 |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |     |                 |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |     |                 |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |     |                 |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |     |                 |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
|     |     |                 |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
|     |     |                 `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
|     |     `-UnaryOperator 0x5590ecf50280 <line:125:31, line:119:34> 'int' prefix '~'
|     |       `-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
|     |         `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
|     |           |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
|     |           `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
|     |             `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
|     |               |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
|     |               `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
|     `-BinaryOperator 0x5590ecf50808 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|       |-ImplicitCastExpr 0x5590ecf507f0 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5590ecf50328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|       `-ParenExpr 0x5590ecf507d0 <./lopcodes.h:88:21, col:63> 'int'
|         `-ParenExpr 0x5590ecf507b0 <./llimits.h:75:22, col:31> 'int'
|           `-CStyleCastExpr 0x5590ecf50788 <col:23, col:30> 'int' <IntegralCast>
|             `-ParenExpr 0x5590ecf50768 <col:26, col:30> 'unsigned int'
|               `-BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|                 |-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
|                 | `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|                 |   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                 |   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                 |   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                 |   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
|                 |     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
|                 |       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
|                 |       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
|                 |       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
|                 |       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
|                 |       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
|                 |       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
|                 |       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
|                 |       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
|                 `-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
|                   `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                     |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
|                     | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                     |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
|                     |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                     |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
|                     |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                     |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                     |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
|                     |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
|                     `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
`-ImplicitCastExpr 0x5590ecf51a30 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
  `-ParenExpr 0x5590ecf51988 <col:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf51958 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf50df0 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf50dc8 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf50cb8 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf50c98 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf50c78 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf50c50 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf50c30 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf50da8 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf50d80 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf50cd8 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf50d60 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf50d38 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf51490 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf51478 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf50e10 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf51458 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf51430 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf512f8 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf51410 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf51930 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf51918 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf514b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf518f8 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf518d8 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf518b0 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf51890 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
[B111.8]([B111.10], [B108.2], [B105.2])
   4: DeclRefExpr 0x5590ecf51a48 <lvm.c:565:56> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   5: ImplicitCastExpr 0x5590ecf51b18 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf51a70 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf51a48 <lvm.c:565:56> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B105.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf51a90 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf51ab0 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf51ad0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf51a90 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf51ab0 <line:42:18> 'int' 6
[B105.6] + [B105.7]
   9: BinaryOperator 0x5590ecf51b30 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf51b18 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf51a70 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf51a48 <lvm.c:565:56> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf51af8 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecf51ad0 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecf51a90 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecf51ab0 <line:42:18> 'int' 6
[B105.5] >> ([B105.8])
  10: IntegerLiteral 0x5590ecf51b78 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf51ba8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
(Instruction)[B105.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf51bd0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
~[B105.11]
  13: IntegerLiteral 0x5590ecf51c10 <./lopcodes.h:40:17> 'int' 8
8
  14: BinaryOperator 0x5590ecf51c30 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf51bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf51bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf51c10 <line:40:17> 'int' 8
([B105.12]) << [B105.13]
  15: UnaryOperator 0x5590ecf51c78 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf51c58 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf51c30 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf51bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf51bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf51c10 <line:40:17> 'int' 8
~([B105.14])
  16: IntegerLiteral 0x5590ecf51cb8 <./lopcodes.h:84:60> 'int' 0
0
  17: BinaryOperator 0x5590ecf51cd8 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf51c98 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf51c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf51c58 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf51c30 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf51bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf51bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf51c10 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf51cb8 <line:84:60> 'int' 0
([B105.15]) << [B105.16]
  18: BinaryOperator 0x5590ecf51d20 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf51b58 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf51b30 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf51b18 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf51a70 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf51a48 <lvm.c:565:56> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf51af8 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecf51ad0 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecf51a90 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecf51ab0 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecf51d00 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf51cd8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf51c98 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf51c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf51c58 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf51c30 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf51bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf51bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf51c10 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf51cb8 <line:84:60> 'int' 0
([B105.9]) & ([B105.17])
  19: CStyleCastExpr 0x5590ecf51db0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf51d90 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf51d20 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf51b58 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf51b30 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf51b18 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf51a70 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf51a48 <lvm.c:565:56> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf51af8 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecf51ad0 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecf51a90 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecf51ab0 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecf51d00 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf51cd8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf51c98 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf51c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf51c58 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf51c30 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf51bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf51bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf51c10 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecf51cb8 <line:84:60> 'int' 0
(int)([B105.18]) (CStyleCastExpr, IntegralCast, int)
  20: BinaryOperator 0x5590ecf51e18 <lvm.c:565:15, ./lopcodes.h:84:63> 'int' '=='
|-CallExpr 0x5590ecf519c0 <lvm.c:565:15, col:42> 'int'
| |-ImplicitCastExpr 0x5590ecf519a8 <col:15> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5590ecf4f5f0 <col:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeca50 'lessequal' 'int (lua_State *, const TValue *, const TValue *)'
| |-ImplicitCastExpr 0x5590ecf51a00 <col:25> 'lua_State *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf4f618 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
| |-ImplicitCastExpr 0x5590ecf51a18 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
| | `-ParenExpr 0x5590ecf50860 <col:25, col:27> 'TValue *'
| |   `-ConditionalOperator 0x5590ecf50830 <./lopcodes.h:122:17, line:88:63> 'TValue *'
| |     |-ParenExpr 0x5590ecf4fc18 <line:122:17, col:29> 'int'
| |     | `-BinaryOperator 0x5590ecf4fbf0 <col:18, line:119:34> 'int' '&'
| |     |   |-ParenExpr 0x5590ecf4fae0 <line:122:18, col:20> 'int'
| |     |   | `-ParenExpr 0x5590ecf4fac0 <line:88:21, col:63> 'int'
| |     |   |   `-ParenExpr 0x5590ecf4faa0 <./llimits.h:75:22, col:31> 'int'
| |     |   |     `-CStyleCastExpr 0x5590ecf4fa78 <col:23, col:30> 'int' <IntegralCast>
| |     |   |       `-ParenExpr 0x5590ecf4fa58 <col:26, col:30> 'unsigned int'
| |     |   |         `-BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
| |     |   |           |-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
| |     |   |           | `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
| |     |   |           |   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| |     |   |           |   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
| |     |   |           |   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
| |     |   |           |   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
| |     |   |           |     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
| |     |   |           |       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
| |     |   |           |       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
| |     |   |           |       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
| |     |   |           |       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
| |     |   |           |       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
| |     |   |           |       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
| |     |   |           |       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
| |     |   |           |       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
| |     |   |           `-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
| |     |   |             `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
| |     |   |               |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
| |     |   |               | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |     |   |               |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
| |     |   |               |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
| |     |   |               |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
| |     |   |               |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |     |   |               |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |     |   |               |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
| |     |   |               |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
| |     |   |               `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
| |     |   `-ParenExpr 0x5590ecf4fbd0 <line:119:16, col:34> 'int'
| |     |     `-BinaryOperator 0x5590ecf4fba8 <col:17, col:33> 'int' '<<'
| |     |       |-IntegerLiteral 0x5590ecf4fb00 <col:17> 'int' 1
| |     |       `-ParenExpr 0x5590ecf4fb88 <col:22, col:33> 'int'
| |     |         `-BinaryOperator 0x5590ecf4fb60 <line:38:17, line:119:32> 'int' '-'
| |     |           |-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
| |     |           `-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
| |     |-BinaryOperator 0x5590ecf50300 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |     | |-ImplicitCastExpr 0x5590ecf502e8 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5590ecf4fc38 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| |     | `-ParenExpr 0x5590ecf502c8 <./lopcodes.h:125:19, col:37> 'int'
| |     |   `-BinaryOperator 0x5590ecf502a0 <col:20, line:119:34> 'int' '&'
| |     |     |-CStyleCastExpr 0x5590ecf50168 <line:125:20, col:27> 'int' <NoOp>
| |     |     | `-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
| |     |     |   `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
| |     |     |     `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
| |     |     |       `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
| |     |     |         `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
| |     |     |           `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
| |     |     |             |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
| |     |     |             | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
| |     |     |             |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| |     |     |             |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
| |     |     |             |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
| |     |     |             |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
| |     |     |             |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
| |     |     |             |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
| |     |     |             |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
| |     |     |             |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
| |     |     |             |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
| |     |     |             |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
| |     |     |             |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
| |     |     |             |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
| |     |     |             |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
| |     |     |             `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
| |     |     |               `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
| |     |     |                 |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
| |     |     |                 | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |     |     |                 |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
| |     |     |                 |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
| |     |     |                 |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
| |     |     |                 |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |     |     |                 |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |     |     |                 |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
| |     |     |                 |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
| |     |     |                 `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
| |     |     `-UnaryOperator 0x5590ecf50280 <line:125:31, line:119:34> 'int' prefix '~'
| |     |       `-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
| |     |         `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
| |     |           |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
| |     |           `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
| |     |             `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
| |     |               |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
| |     |               `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
| |     `-BinaryOperator 0x5590ecf50808 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
| |       |-ImplicitCastExpr 0x5590ecf507f0 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| |       | `-DeclRefExpr 0x5590ecf50328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
| |       `-ParenExpr 0x5590ecf507d0 <./lopcodes.h:88:21, col:63> 'int'
| |         `-ParenExpr 0x5590ecf507b0 <./llimits.h:75:22, col:31> 'int'
| |           `-CStyleCastExpr 0x5590ecf50788 <col:23, col:30> 'int' <IntegralCast>
| |             `-ParenExpr 0x5590ecf50768 <col:26, col:30> 'unsigned int'
| |               `-BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
| |                 |-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
| |                 | `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
| |                 |   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| |                 |   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
| |                 |   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
| |                 |   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
| |                 |     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
| |                 |       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
| |                 |       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
| |                 |       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
| |                 |       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
| |                 |       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
| |                 |       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
| |                 |       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
| |                 |       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
| |                 `-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
| |                   `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
| |                     |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
| |                     | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |                     |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
| |                     |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
| |                     |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
| |                     |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |                     |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |                     |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
| |                     |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
| |                     `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
| `-ImplicitCastExpr 0x5590ecf51a30 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
|   `-ParenExpr 0x5590ecf51988 <col:25, col:27> 'TValue *'
|     `-ConditionalOperator 0x5590ecf51958 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|       |-ParenExpr 0x5590ecf50df0 <line:122:17, col:29> 'int'
|       | `-BinaryOperator 0x5590ecf50dc8 <col:18, line:119:34> 'int' '&'
|       |   |-ParenExpr 0x5590ecf50cb8 <line:122:18, col:20> 'int'
|       |   | `-ParenExpr 0x5590ecf50c98 <line:92:21, col:63> 'int'
|       |   |   `-ParenExpr 0x5590ecf50c78 <./llimits.h:75:22, col:31> 'int'
|       |   |     `-CStyleCastExpr 0x5590ecf50c50 <col:23, col:30> 'int' <IntegralCast>
|       |   |       `-ParenExpr 0x5590ecf50c30 <col:26, col:30> 'unsigned int'
|       |   |         `-BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|       |   |           |-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
|       |   |           | `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|       |   |           |   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|       |   |           |   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|       |   |           |   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|       |   |           |   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
|       |   |           |     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
|       |   |           |       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
|       |   |           |       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
|       |   |           |       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
|       |   |           |       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
|       |   |           |       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
|       |   |           `-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
|       |   |             `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|       |   |               |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
|       |   |               | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|       |   |               |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
|       |   |               |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |   |               |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
|       |   |               |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   |               |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |   |               |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
|       |   |               |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
|       |   |               `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
|       |   `-ParenExpr 0x5590ecf50da8 <line:119:16, col:34> 'int'
|       |     `-BinaryOperator 0x5590ecf50d80 <col:17, col:33> 'int' '<<'
|       |       |-IntegerLiteral 0x5590ecf50cd8 <col:17> 'int' 1
|       |       `-ParenExpr 0x5590ecf50d60 <col:22, col:33> 'int'
|       |         `-BinaryOperator 0x5590ecf50d38 <line:38:17, line:119:32> 'int' '-'
|       |           |-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
|       |           `-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
|       |-BinaryOperator 0x5590ecf51490 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|       | |-ImplicitCastExpr 0x5590ecf51478 <lvm.c:354:21> 'TValue *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5590ecf50e10 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|       | `-ParenExpr 0x5590ecf51458 <./lopcodes.h:125:19, col:37> 'int'
|       |   `-BinaryOperator 0x5590ecf51430 <col:20, line:119:34> 'int' '&'
|       |     |-CStyleCastExpr 0x5590ecf512f8 <line:125:20, col:27> 'int' <NoOp>
|       |     | `-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
|       |     |   `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
|       |     |     `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
|       |     |       `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
|       |     |         `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
|       |     |           `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|       |     |             |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
|       |     |             | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|       |     |             |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|       |     |             |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|       |     |             |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|       |     |             |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
|       |     |             |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
|       |     |             |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
|       |     |             |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
|       |     |             |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
|       |     |             |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
|       |     |             |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
|       |     |             `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
|       |     |               `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|       |     |                 |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
|       |     |                 | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|       |     |                 |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
|       |     |                 |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |     |                 |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
|       |     |                 |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |     |                 |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     |                 |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
|       |     |                 |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
|       |     |                 `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
|       |     `-UnaryOperator 0x5590ecf51410 <line:125:31, line:119:34> 'int' prefix '~'
|       |       `-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
|       |         `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
|       |           |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
|       |           `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
|       |             `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
|       |               |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
|       |               `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
|       `-BinaryOperator 0x5590ecf51930 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|         |-ImplicitCastExpr 0x5590ecf51918 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
|         | `-DeclRefExpr 0x5590ecf514b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|         `-ParenExpr 0x5590ecf518f8 <./lopcodes.h:92:21, col:63> 'int'
|           `-ParenExpr 0x5590ecf518d8 <./llimits.h:75:22, col:31> 'int'
|             `-CStyleCastExpr 0x5590ecf518b0 <col:23, col:30> 'int' <IntegralCast>
|               `-ParenExpr 0x5590ecf51890 <col:26, col:30> 'unsigned int'
|                 `-BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|                   |-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
|                   | `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|                   |   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                   |   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                   |   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                   |   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
|                   |     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
|                   |       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
|                   |       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
|                   |       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
|                   |       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
|                   |       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
|                   `-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
|                     `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                       |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
|                       | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                       |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
|                       |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                       |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|                       |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                       |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                       |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
|                       |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
|                       `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf51df8 <line:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecf51dd8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf51db0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf51d90 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf51d20 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf51b58 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf51b30 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf51b18 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf51a70 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf51a48 <lvm.c:565:56> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf51af8 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecf51ad0 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecf51a90 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecf51ab0 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecf51d00 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf51cd8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf51c98 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf51c78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf51c58 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf51c30 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf51bf0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf51bd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf51ba8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf51b78 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf51c10 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecf51cb8 <line:84:60> 'int' 0
[B105.3] == (([B105.19]))
   T: if [B105.20]
   Preds (2): B106 B107
   Succs (2): B104 B103

 [B106]
   1: DeclRefExpr 0x5590ecf50e10 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf51478 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf50e10 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B106.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf50f70 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B106.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf50e80 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf50ea0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf50ec0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
[B106.5] + [B106.6]
   8: IntegerLiteral 0x5590ecf50f08 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf50f28 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
([B106.7]) + [B106.8]
  10: BinaryOperator 0x5590ecf50f88 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
[B106.4] >> ([B106.9])
  11: IntegerLiteral 0x5590ecf50ff0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf51020 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
(Instruction)[B106.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf51048 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
~[B106.12]
  14: IntegerLiteral 0x5590ecf51088 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf510a8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
([B106.13]) << [B106.14]
  16: UnaryOperator 0x5590ecf510f0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
~([B106.15])
  17: IntegerLiteral 0x5590ecf51130 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf51150 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
([B106.16]) << [B106.17]
  19: BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
([B106.10]) & ([B106.18])
  20: CStyleCastExpr 0x5590ecf51228 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
(int)([B106.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf512f8 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
(int)((([B106.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf51320 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf51340 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf51360 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf51380 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
[B106.23] - [B106.24]
  26: BinaryOperator 0x5590ecf513c8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
`-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
[B106.22] << ([B106.25])
  27: UnaryOperator 0x5590ecf51410 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
~([B106.26])
  28: BinaryOperator 0x5590ecf51430 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf512f8 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf51410 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
[B106.21] & [B106.27]
  29: BinaryOperator 0x5590ecf51490 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf51478 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf50e10 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf51458 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf51430 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf512f8 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf512d8 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf51270 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf51250 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf51228 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf51208 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf51198 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf50fb0 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf50f88 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf50f70 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf50e60 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf50e38 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf50f50 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf50f28 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf50ee8 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf50ec0 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf50e80 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf50ea0 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf50f08 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf51178 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf51150 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf51110 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf510f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf510d0 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf510a8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf51068 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf51048 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf51020 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf50ff0 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf51088 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf51130 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf51410 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf513f0 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf513c8 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf51320 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf513a8 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf51380 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf51340 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf51360 <line:119:32> 'int' 1
[B106.2] + ([B106.28])
   Preds (1): B108
   Succs (1): B105

 [B107]
   1: DeclRefExpr 0x5590ecf514b8 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf51918 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf514b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B107.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf51618 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B107.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf51528 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf51548 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf51568 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
[B107.5] + [B107.6]
   8: IntegerLiteral 0x5590ecf515b0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf515d0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
([B107.7]) + [B107.8]
  10: BinaryOperator 0x5590ecf51630 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
[B107.4] >> ([B107.9])
  11: IntegerLiteral 0x5590ecf51678 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf516a8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
(Instruction)[B107.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf516d0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
~[B107.12]
  14: IntegerLiteral 0x5590ecf51710 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf51730 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
([B107.13]) << [B107.14]
  16: UnaryOperator 0x5590ecf51778 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
~([B107.15])
  17: IntegerLiteral 0x5590ecf517b8 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf517d8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
([B107.16]) << [B107.17]
  19: BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
([B107.10]) & ([B107.18])
  20: CStyleCastExpr 0x5590ecf518b0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf51890 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
(int)([B107.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf51930 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf51918 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf514b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf518f8 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf518d8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf518b0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf51890 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf51820 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf51658 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf51630 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf51618 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf51508 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf514e0 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf515f8 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf515d0 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf51590 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf51568 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf51528 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf51548 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf515b0 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf51800 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf517d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf51798 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf51778 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf51758 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf51730 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf516f0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf516d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf516a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf51678 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf51710 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf517b8 <line:92:60> 'int' 0
[B107.2] + (([B107.20]))
   Preds (1): B108
   Succs (1): B105

 [B108]
   1: ConditionalOperator 0x5590ecf50830 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf4fc18 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf4fbf0 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf4fae0 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf4fac0 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf4faa0 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf4fa78 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf4fa58 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf4fbd0 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf4fba8 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf4fb00 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf4fb88 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf4fb60 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf50300 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf502e8 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf4fc38 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf502c8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf502a0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf50168 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf50280 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf50808 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf507f0 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf50328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf507d0 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf507b0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf50788 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf50768 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
([B111.36]) ? [B109.31] : [B110.23]
   2: ImplicitCastExpr 0x5590ecf51a18 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf50860 <col:25, col:27> 'TValue *'
  `-ConditionalOperator 0x5590ecf50830 <./lopcodes.h:122:17, line:88:63> 'TValue *'
    |-ParenExpr 0x5590ecf4fc18 <line:122:17, col:29> 'int'
    | `-BinaryOperator 0x5590ecf4fbf0 <col:18, line:119:34> 'int' '&'
    |   |-ParenExpr 0x5590ecf4fae0 <line:122:18, col:20> 'int'
    |   | `-ParenExpr 0x5590ecf4fac0 <line:88:21, col:63> 'int'
    |   |   `-ParenExpr 0x5590ecf4faa0 <./llimits.h:75:22, col:31> 'int'
    |   |     `-CStyleCastExpr 0x5590ecf4fa78 <col:23, col:30> 'int' <IntegralCast>
    |   |       `-ParenExpr 0x5590ecf4fa58 <col:26, col:30> 'unsigned int'
    |   |         `-BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |   |           |-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
    |   |           | `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |           |   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   |           |   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |           |   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   |           |   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
    |   |           |     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
    |   |           |       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
    |   |           |       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
    |   |           |       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
    |   |           |       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
    |   |           |       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
    |   |           |       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
    |   |           |       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
    |   |           |       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
    |   |           `-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |   |             `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |   |               |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
    |   |               | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   |               |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
    |   |               |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |   |               |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |   |               |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   |               |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |   |               |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
    |   |               |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
    |   |               `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
    |   `-ParenExpr 0x5590ecf4fbd0 <line:119:16, col:34> 'int'
    |     `-BinaryOperator 0x5590ecf4fba8 <col:17, col:33> 'int' '<<'
    |       |-IntegerLiteral 0x5590ecf4fb00 <col:17> 'int' 1
    |       `-ParenExpr 0x5590ecf4fb88 <col:22, col:33> 'int'
    |         `-BinaryOperator 0x5590ecf4fb60 <line:38:17, line:119:32> 'int' '-'
    |           |-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
    |-BinaryOperator 0x5590ecf50300 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
    | |-ImplicitCastExpr 0x5590ecf502e8 <lvm.c:352:21> 'TValue *' <LValueToRValue>
    | | `-DeclRefExpr 0x5590ecf4fc38 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
    | `-ParenExpr 0x5590ecf502c8 <./lopcodes.h:125:19, col:37> 'int'
    |   `-BinaryOperator 0x5590ecf502a0 <col:20, line:119:34> 'int' '&'
    |     |-CStyleCastExpr 0x5590ecf50168 <line:125:20, col:27> 'int' <NoOp>
    |     | `-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
    |     |   `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
    |     |     `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
    |     |       `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
    |     |         `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
    |     |           `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |     |             |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
    |     |             | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |     |             |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |     |             |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |     |             |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |     |             |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
    |     |             |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
    |     |             |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
    |     |             |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
    |     |             |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
    |     |             |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
    |     |             |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
    |     |             |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
    |     |             |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
    |     |             |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
    |     |             `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |     |               `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |     |                 |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
    |     |                 | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |     |                 |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
    |     |                 |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |     |                 |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |     |                 |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |     |                 |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     |                 |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
    |     |                 |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
    |     |                 `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
    |     `-UnaryOperator 0x5590ecf50280 <line:125:31, line:119:34> 'int' prefix '~'
    |       `-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
    |           |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
    |           `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
    |             `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
    |               |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
    |               `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
    `-BinaryOperator 0x5590ecf50808 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf507f0 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf50328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf507d0 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf507b0 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf50788 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf50768 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
([B108.1]) (ImplicitCastExpr, BitCast, const TValue *)
   3: DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf509b8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B108.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf508c8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf508e8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf50908 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
[B108.5] + [B108.6]
   8: IntegerLiteral 0x5590ecf50950 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf50970 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
([B108.7]) + [B108.8]
  10: BinaryOperator 0x5590ecf509d0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
[B108.4] >> ([B108.9])
  11: IntegerLiteral 0x5590ecf50a18 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf50a48 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
(Instruction)[B108.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf50a70 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
~[B108.12]
  14: IntegerLiteral 0x5590ecf50ab0 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf50ad0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
([B108.13]) << [B108.14]
  16: UnaryOperator 0x5590ecf50b18 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
~([B108.15])
  17: IntegerLiteral 0x5590ecf50b58 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf50b78 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
([B108.16]) << [B108.17]
  19: BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
([B108.10]) & ([B108.18])
  20: CStyleCastExpr 0x5590ecf50c50 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf50c30 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
(int)([B108.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf50cd8 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf50cf8 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf50d18 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf50d38 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
[B108.22] - [B108.23]
  25: BinaryOperator 0x5590ecf50d80 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf50cd8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf50d60 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf50d38 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
[B108.21] << ([B108.24])
  26: BinaryOperator 0x5590ecf50dc8 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf50cb8 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf50c98 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf50c78 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf50c50 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf50c30 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf50bc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf509f8 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf509d0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf509b8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf508a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf50880 <lvm.c:565:40> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf50998 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf50970 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf50930 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf50908 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf508c8 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf508e8 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf50950 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf50ba0 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf50b78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf50b38 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf50b18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf50af8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf50ad0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf50a90 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf50a70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf50a48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf50a18 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf50ab0 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf50b58 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf50da8 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf50d80 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf50cd8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf50d60 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf50d38 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf50cf8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf50d18 <line:119:32> 'int' 1
((([B108.20]))) & ([B108.25])
   T: ([B108.26]) ? ... : ...
   Preds (2): B109 B110
   Succs (2): B106 B107

 [B109]
   1: DeclRefExpr 0x5590ecf4fc38 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf502e8 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4fc38 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B109.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf4fe00 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B109.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf4fca8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf4fcc8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf4fce8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
[B109.5] + [B109.6]
   8: IntegerLiteral 0x5590ecf4fd30 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf4fd50 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
([B109.7]) + [B109.8]
  10: IntegerLiteral 0x5590ecf4fd98 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf4fdb8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
([B109.9]) + [B109.10]
  12: BinaryOperator 0x5590ecf4fe18 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
[B109.4] >> ([B109.11])
  13: IntegerLiteral 0x5590ecf4fe60 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf4fe90 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
(Instruction)[B109.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf4feb8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
~[B109.14]
  16: IntegerLiteral 0x5590ecf4fef8 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf4ff18 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
([B109.15]) << [B109.16]
  18: UnaryOperator 0x5590ecf4ff60 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
~([B109.17])
  19: IntegerLiteral 0x5590ecf4ffa0 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf4ffc0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
([B109.18]) << [B109.19]
  21: BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
([B109.12]) & ([B109.20])
  22: CStyleCastExpr 0x5590ecf50098 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
(int)([B109.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf50168 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
(int)((([B109.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf50190 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf501b0 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf501d0 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf501f0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
[B109.25] - [B109.26]
  28: BinaryOperator 0x5590ecf50238 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
`-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
[B109.24] << ([B109.27])
  29: UnaryOperator 0x5590ecf50280 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
~([B109.28])
  30: BinaryOperator 0x5590ecf502a0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf50168 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf50280 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
[B109.23] & [B109.29]
  31: BinaryOperator 0x5590ecf50300 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf502e8 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf4fc38 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf502c8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf502a0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf50168 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf50148 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf500e0 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf500c0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf50098 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf50078 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf50008 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf4fe40 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf4fe18 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf4fe00 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf4fc88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf4fc60 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf4fde0 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf4fdb8 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf4fd78 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf4fd50 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf4fd10 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf4fce8 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf4fca8 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf4fcc8 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf4fd30 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf4fd98 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf4ffe8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf4ffc0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf4ff80 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf4ff60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf4ff40 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf4ff18 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf4fed8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf4feb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf4fe90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf4fe60 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf4fef8 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf4ffa0 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf50280 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf50260 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf50238 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf50190 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf50218 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf501f0 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf501b0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf501d0 <line:119:32> 'int' 1
[B109.2] + ([B109.30])
   Preds (1): B111
   Succs (1): B108

 [B110]
   1: DeclRefExpr 0x5590ecf50328 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf507f0 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf50328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B110.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf504f0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B110.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf50398 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf503b8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf503d8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
[B110.5] + [B110.6]
   8: IntegerLiteral 0x5590ecf50420 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf50440 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
([B110.7]) + [B110.8]
  10: IntegerLiteral 0x5590ecf50488 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf504a8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
([B110.9]) + [B110.10]
  12: BinaryOperator 0x5590ecf50508 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
[B110.4] >> ([B110.11])
  13: IntegerLiteral 0x5590ecf50550 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf50580 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
(Instruction)[B110.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf505a8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
~[B110.14]
  16: IntegerLiteral 0x5590ecf505e8 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf50608 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
([B110.15]) << [B110.16]
  18: UnaryOperator 0x5590ecf50650 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
~([B110.17])
  19: IntegerLiteral 0x5590ecf50690 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf506b0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
([B110.18]) << [B110.19]
  21: BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
([B110.12]) & ([B110.20])
  22: CStyleCastExpr 0x5590ecf50788 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf50768 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
(int)([B110.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf50808 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf507f0 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf50328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf507d0 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf507b0 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf50788 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf50768 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf506f8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf50530 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf50508 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf504f0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf50378 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf50350 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf504d0 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf504a8 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf50468 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf50440 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf50400 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf503d8 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf50398 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf503b8 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf50420 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf50488 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf506d8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf506b0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf50670 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf50650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf50630 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf50608 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf505c8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf505a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf50580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf50550 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf505e8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf50690 <line:88:60> 'int' 0
[B110.2] + (([B110.22]))
   Preds (1): B111
   Succs (1): B108

 [B111]
  case OP_LE:
   1: DeclRefExpr 0x5590ecf4f588 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf4f5b0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4f588 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B111.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf4f510 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf4f538 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4f510 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B111.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf4f550 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf4f538 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf4f510 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B111.4]->savedpc
   6: BinaryOperator 0x5590ecf4f5c8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf4f550 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf4f538 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf4f510 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf4f5b0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf4f588 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B111.5] = [B111.2]
   7: DeclRefExpr 0x5590ecf4f5f0 <lvm.c:565:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeca50 'lessequal' 'int (lua_State *, const TValue *, const TValue *)'
lessequal
   8: ImplicitCastExpr 0x5590ecf519a8 <lvm.c:565:15> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf4f5f0 <col:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeca50 'lessequal' 'int (lua_State *, const TValue *, const TValue *)'
[B111.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const TValue *, const TValue *))
   9: DeclRefExpr 0x5590ecf4f618 <lvm.c:565:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf51a00 <lvm.c:565:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4f618 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B111.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  12: ImplicitCastExpr 0x5590ecf4f7e0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B111.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x5590ecf4f688 <./lopcodes.h:44:17> 'int' 0
0
  14: IntegerLiteral 0x5590ecf4f6a8 <./lopcodes.h:42:18> 'int' 6
6
  15: BinaryOperator 0x5590ecf4f6c8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
[B111.13] + [B111.14]
  16: IntegerLiteral 0x5590ecf4f710 <./lopcodes.h:40:17> 'int' 8
8
  17: BinaryOperator 0x5590ecf4f730 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
([B111.15]) + [B111.16]
  18: IntegerLiteral 0x5590ecf4f778 <./lopcodes.h:37:17> 'int' 9
9
  19: BinaryOperator 0x5590ecf4f798 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
([B111.17]) + [B111.18]
  20: BinaryOperator 0x5590ecf4f7f8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
[B111.12] >> ([B111.19])
  21: IntegerLiteral 0x5590ecf4f840 <./lopcodes.h:71:39> 'int' 0
0
  22: CStyleCastExpr 0x5590ecf4f870 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
(Instruction)[B111.21] (CStyleCastExpr, IntegralCast, Instruction)
  23: UnaryOperator 0x5590ecf4f898 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
~[B111.22]
  24: IntegerLiteral 0x5590ecf4f8d8 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5590ecf4f8f8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
([B111.23]) << [B111.24]
  26: UnaryOperator 0x5590ecf4f940 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
~([B111.25])
  27: IntegerLiteral 0x5590ecf4f980 <./lopcodes.h:88:60> 'int' 0
0
  28: BinaryOperator 0x5590ecf4f9a0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
([B111.26]) << [B111.27]
  29: BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
([B111.20]) & ([B111.28])
  30: CStyleCastExpr 0x5590ecf4fa78 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4fa58 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
(int)([B111.29]) (CStyleCastExpr, IntegralCast, int)
  31: IntegerLiteral 0x5590ecf4fb00 <./lopcodes.h:119:17> 'int' 1
1
  32: IntegerLiteral 0x5590ecf4fb20 <./lopcodes.h:38:17> 'int' 9
9
  33: IntegerLiteral 0x5590ecf4fb40 <./lopcodes.h:119:32> 'int' 1
1
  34: BinaryOperator 0x5590ecf4fb60 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
[B111.32] - [B111.33]
  35: BinaryOperator 0x5590ecf4fba8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf4fb00 <col:17> 'int' 1
`-ParenExpr 0x5590ecf4fb88 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf4fb60 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
[B111.31] << ([B111.34])
  36: BinaryOperator 0x5590ecf4fbf0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf4fae0 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf4fac0 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf4faa0 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf4fa78 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf4fa58 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf4f9e8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf4f820 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf4f7f8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf4f7e0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf4f668 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf4f640 <lvm.c:565:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf4f7c0 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf4f798 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf4f758 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf4f730 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf4f6f0 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf4f6c8 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf4f688 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf4f6a8 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf4f710 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf4f778 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf4f9c8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf4f9a0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf4f960 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf4f940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf4f920 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf4f8f8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf4f8b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf4f898 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf4f870 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf4f840 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf4f8d8 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf4f980 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf4fbd0 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf4fba8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf4fb00 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf4fb88 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf4fb60 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf4fb20 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4fb40 <line:119:32> 'int' 1
((([B111.30]))) & ([B111.35])
   T: ([B111.36]) ? ... : ...
   Preds (1): B2
   Succs (2): B109 B110

 [B112]
   1: DeclRefExpr 0x5590ecf4f350 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf4f378 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4f350 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B112.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf4f390 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf4f378 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf4f350 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B112.2]->base
   4: ImplicitCastExpr 0x5590ecf4f3c8 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf4f390 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf4f378 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf4f350 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B112.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf4f328 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf4f3e0 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf4f328 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf4f3c8 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf4f390 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf4f378 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf4f350 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B112.5] = [B112.4]
   7: DeclRefExpr 0x5590ecf4f438 <lvm.c:560:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   8: UnaryOperator 0x5590ecf4f460 <lvm.c:560:9, col:11> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf4f438 <col:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B112.7]++
   T: continue;
   Preds (2): B113 B114
   Succs (1): B1

 [B113]
   1: DeclRefExpr 0x5590ecf4e9b0 <lvm.c:558:23> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: DeclRefExpr 0x5590ecf4e9f8 <lvm.c:558:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   3: ImplicitCastExpr 0x5590ecf4ea20 <lvm.c:558:39> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B113.2] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   4: UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B113.3]
   5: ImplicitCastExpr 0x5590ecf4eb68 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4ea58 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B113.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf4ea78 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf4ea98 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf4eab8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
[B113.6] + [B113.7]
   9: IntegerLiteral 0x5590ecf4eb00 <./lopcodes.h:40:17> 'int' 8
8
  10: BinaryOperator 0x5590ecf4eb20 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf4eae0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf4eab8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf4eb00 <line:40:17> 'int' 8
([B113.8]) + [B113.9]
  11: BinaryOperator 0x5590ecf4eb80 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4eb68 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4ea58 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf4eb48 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4eb20 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf4eae0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf4eab8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf4eb00 <line:40:17> 'int' 8
[B113.5] >> ([B113.10])
  12: IntegerLiteral 0x5590ecf4ebc8 <./lopcodes.h:71:39> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf4ebf8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
(Instruction)[B113.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: UnaryOperator 0x5590ecf4ec20 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
~[B113.13]
  15: IntegerLiteral 0x5590ecf4ec60 <./lopcodes.h:37:17> 'int' 9
9
  16: IntegerLiteral 0x5590ecf4ec80 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf4eca0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
[B113.15] + [B113.16]
  18: BinaryOperator 0x5590ecf4ece8 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
`-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
([B113.14]) << ([B113.17])
  19: UnaryOperator 0x5590ecf4ed30 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4ed10 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4ece8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
~([B113.18])
  20: IntegerLiteral 0x5590ecf4ed70 <./lopcodes.h:96:63> 'int' 0
0
  21: BinaryOperator 0x5590ecf4ed90 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4ed50 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4ed30 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4ed10 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4ece8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4ed70 <line:96:63> 'int' 0
([B113.19]) << [B113.20]
  22: BinaryOperator 0x5590ecf4edd8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4eba8 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4eb80 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4eb68 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4ea58 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf4eb48 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4eb20 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4eae0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf4eab8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf4eb00 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf4edb8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4ed90 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4ed50 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4ed30 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4ed10 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4ece8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4ed70 <line:96:63> 'int' 0
([B113.11]) & ([B113.21])
  23: CStyleCastExpr 0x5590ecf4ee68 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4ee48 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4edd8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4eba8 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4eb80 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4eb68 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4ea58 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf4eb48 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4eb20 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4eae0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf4eab8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf4eb00 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf4edb8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4ed90 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4ed50 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4ed30 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4ed10 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4ece8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4ed70 <line:96:63> 'int' 0
(int)([B113.22]) (CStyleCastExpr, IntegralCast, int)
  24: IntegerLiteral 0x5590ecf4eed0 <./lopcodes.h:57:28> 'int' 1
1
  25: IntegerLiteral 0x5590ecf4eef0 <./lopcodes.h:37:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf4ef10 <./lopcodes.h:38:17> 'int' 9
9
  27: BinaryOperator 0x5590ecf4ef30 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf4eef0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf4ef10 <line:38:17> 'int' 9
[B113.25] + [B113.26]
  28: BinaryOperator 0x5590ecf4ef78 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf4eed0 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf4ef58 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf4ef30 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf4eef0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4ef10 <line:38:17> 'int' 9
[B113.24] << ([B113.27])
  29: IntegerLiteral 0x5590ecf4efe0 <./lopcodes.h:57:40> 'int' 1
1
  30: BinaryOperator 0x5590ecf4f000 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf4efa0 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf4ef78 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf4eed0 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf4ef58 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf4ef30 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf4eef0 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf4ef10 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4efe0 <line:57:40> 'int' 1
([B113.28]) - [B113.29]
  31: IntegerLiteral 0x5590ecf4f048 <./lopcodes.h:58:39> 'int' 1
1
  32: BinaryOperator 0x5590ecf4f068 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf4f028 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf4f000 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf4efa0 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf4ef78 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf4eed0 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf4ef58 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf4ef30 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf4eef0 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf4ef10 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf4efe0 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf4f048 <line:58:39> 'int' 1
([B113.30]) >> [B113.31]
  33: BinaryOperator 0x5590ecf4f0b0 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf4eeb0 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf4ee90 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf4ee68 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf4ee48 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf4edd8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf4eba8 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf4eb80 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf4eb68 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf4ea58 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|         |   |     `-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|         |   `-ParenExpr 0x5590ecf4eb48 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf4eb20 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf4eae0 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf4eab8 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf4eb00 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf4edb8 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf4ed90 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf4ed50 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf4ed30 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf4ed10 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf4ece8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf4ed70 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf4f090 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf4f068 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf4f028 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf4f000 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf4efa0 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf4ef78 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf4eed0 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf4ef58 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf4ef30 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf4eef0 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf4ef10 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf4efe0 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf4f048 <line:58:39> 'int' 1
(([B113.23])) - ([B113.32])
  34: CompoundAssignOperator 0x5590ecf4f118 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf4e9d8 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf4e9b0 <line:558:23> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf4f0f8 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf4f0d8 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf4f0b0 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf4eeb0 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf4ee90 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf4ee68 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf4ee48 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf4edd8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf4eba8 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf4eb80 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf4eb68 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf4ea58 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-UnaryOperator 0x5590ecf4ea38 <lvm.c:558:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
      |         |   |     `-ImplicitCastExpr 0x5590ecf4ea20 <col:39> 'const Instruction *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5590ecf4e9f8 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
      |         |   `-ParenExpr 0x5590ecf4eb48 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf4eb20 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf4eae0 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf4eab8 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf4ea78 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf4ea98 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf4eb00 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf4edb8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf4ed90 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf4ed50 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf4ed30 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf4ed10 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf4ece8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf4ec40 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf4ec20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf4ebf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf4ebc8 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf4ecc8 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf4eca0 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf4ec60 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf4ec80 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf4ed70 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf4f090 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf4f068 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf4f028 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf4f000 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf4efa0 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf4ef78 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf4eed0 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf4ef58 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf4ef30 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf4eef0 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf4ef10 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf4efe0 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf4f048 <line:58:39> 'int' 1
([B113.1]) += (([B113.33]))
  35: IntegerLiteral 0x5590ecf4f150 <./llimits.h:111:33> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf4f180 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf4f150 <col:33> 'int' 0
(void)[B113.35] (CStyleCastExpr, ToVoid, void)
  37: IntegerLiteral 0x5590ecf4f1c8 <./llimits.h:110:33> 'int' 0
0
  38: CStyleCastExpr 0x5590ecf4f1f8 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf4f1c8 <col:33> 'int' 0
(void)[B113.37] (CStyleCastExpr, ToVoid, void)
   Preds (1): B114
   Succs (1): B112

 [B114]
   1: ConditionalOperator 0x5590ecf4e4c8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf4d980 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf4d958 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf4d848 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf4d828 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf4d808 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf4d7e0 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf4d7c0 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf4d938 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf4d910 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf4d868 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf4d8f0 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf4d8c8 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf4e000 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf4dfe8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf4d9a0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf4dfc8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf4dfa0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf4de68 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf4df80 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf4e4a0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf4e488 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf4e028 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf4e468 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf4e448 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf4e420 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf4e400 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
([B117.26]) ? [B115.29] : [B116.21]
   2: ImplicitCastExpr 0x5590ecf4e5a0 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf4e4f8 <col:25, col:27> 'TValue *'
  `-ConditionalOperator 0x5590ecf4e4c8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
    |-ParenExpr 0x5590ecf4d980 <line:122:17, col:29> 'int'
    | `-BinaryOperator 0x5590ecf4d958 <col:18, line:119:34> 'int' '&'
    |   |-ParenExpr 0x5590ecf4d848 <line:122:18, col:20> 'int'
    |   | `-ParenExpr 0x5590ecf4d828 <line:92:21, col:63> 'int'
    |   |   `-ParenExpr 0x5590ecf4d808 <./llimits.h:75:22, col:31> 'int'
    |   |     `-CStyleCastExpr 0x5590ecf4d7e0 <col:23, col:30> 'int' <IntegralCast>
    |   |       `-ParenExpr 0x5590ecf4d7c0 <col:26, col:30> 'unsigned int'
    |   |         `-BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |   |           |-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
    |   |           | `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |           |   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   |           |   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |           |   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   |           |   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
    |   |           |     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
    |   |           |       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
    |   |           |       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
    |   |           |       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
    |   |           |       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
    |   |           |       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
    |   |           `-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
    |   |             `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |   |               |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
    |   |               | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   |               |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
    |   |               |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |   |               |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
    |   |               |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   |               |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |   |               |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
    |   |               |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
    |   |               `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
    |   `-ParenExpr 0x5590ecf4d938 <line:119:16, col:34> 'int'
    |     `-BinaryOperator 0x5590ecf4d910 <col:17, col:33> 'int' '<<'
    |       |-IntegerLiteral 0x5590ecf4d868 <col:17> 'int' 1
    |       `-ParenExpr 0x5590ecf4d8f0 <col:22, col:33> 'int'
    |         `-BinaryOperator 0x5590ecf4d8c8 <line:38:17, line:119:32> 'int' '-'
    |           |-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
    |-BinaryOperator 0x5590ecf4e000 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
    | |-ImplicitCastExpr 0x5590ecf4dfe8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
    | | `-DeclRefExpr 0x5590ecf4d9a0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
    | `-ParenExpr 0x5590ecf4dfc8 <./lopcodes.h:125:19, col:37> 'int'
    |   `-BinaryOperator 0x5590ecf4dfa0 <col:20, line:119:34> 'int' '&'
    |     |-CStyleCastExpr 0x5590ecf4de68 <line:125:20, col:27> 'int' <NoOp>
    |     | `-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
    |     |   `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
    |     |     `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
    |     |       `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
    |     |         `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
    |     |           `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |     |             |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
    |     |             | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |     |             |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |     |             |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |     |             |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |     |             |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
    |     |             |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
    |     |             |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
    |     |             |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
    |     |             |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
    |     |             |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
    |     |             |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
    |     |             `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |     |               `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |     |                 |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
    |     |                 | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |     |                 |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
    |     |                 |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |     |                 |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |     |                 |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |     |                 |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     |                 |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
    |     |                 |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
    |     |                 `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
    |     `-UnaryOperator 0x5590ecf4df80 <line:125:31, line:119:34> 'int' prefix '~'
    |       `-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
    |           |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
    |           `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
    |             `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
    |               |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
    |               `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
    `-BinaryOperator 0x5590ecf4e4a0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf4e488 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf4e028 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf4e468 <./lopcodes.h:92:21, col:63> 'int'
        `-ParenExpr 0x5590ecf4e448 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf4e420 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf4e400 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
                |       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
                |       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
                |       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
                |       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
                `-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
([B114.1]) (ImplicitCastExpr, BitCast, const TValue *)
   3: CallExpr 0x5590ecf4e530 <lvm.c:557:15, col:46> 'int'
|-ImplicitCastExpr 0x5590ecf4e518 <col:15> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf46120 <col:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeb4f0 'luaV_lessthan' 'int (lua_State *, const TValue *, const TValue *)'
|-ImplicitCastExpr 0x5590ecf4e570 <col:29> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf46148 <col:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf4e588 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
| `-ParenExpr 0x5590ecf4d3f0 <col:25, col:27> 'TValue *'
|   `-ConditionalOperator 0x5590ecf4d3c0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|     |-ParenExpr 0x5590ecf46748 <line:122:17, col:29> 'int'
|     | `-BinaryOperator 0x5590ecf46720 <col:18, line:119:34> 'int' '&'
|     |   |-ParenExpr 0x5590ecf46610 <line:122:18, col:20> 'int'
|     |   | `-ParenExpr 0x5590ecf465f0 <line:88:21, col:63> 'int'
|     |   |   `-ParenExpr 0x5590ecf465d0 <./llimits.h:75:22, col:31> 'int'
|     |   |     `-CStyleCastExpr 0x5590ecf465a8 <col:23, col:30> 'int' <IntegralCast>
|     |   |       `-ParenExpr 0x5590ecf46588 <col:26, col:30> 'unsigned int'
|     |   |         `-BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |   |           |-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |   |           | `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |   |           |   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |   |           |   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |   |           |   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |   |           |   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
|     |   |           |     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
|     |   |           |       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
|     |   |           |       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
|     |   |           |       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
|     |   |           |       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
|     |   |           |       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
|     |   |           |       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
|     |   |           |       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
|     |   |           |       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
|     |   |           `-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |   |             `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |   |               |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |   |               | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |   |               |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
|     |   |               |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |   |               |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |   |               |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |   |               |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |   |               |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
|     |   |               |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
|     |   |               `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
|     |   `-ParenExpr 0x5590ecf46700 <line:119:16, col:34> 'int'
|     |     `-BinaryOperator 0x5590ecf466d8 <col:17, col:33> 'int' '<<'
|     |       |-IntegerLiteral 0x5590ecf46630 <col:17> 'int' 1
|     |       `-ParenExpr 0x5590ecf466b8 <col:22, col:33> 'int'
|     |         `-BinaryOperator 0x5590ecf46690 <line:38:17, line:119:32> 'int' '-'
|     |           |-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
|     |           `-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
|     |-BinaryOperator 0x5590ecf46e30 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|     | |-ImplicitCastExpr 0x5590ecf46e18 <lvm.c:352:21> 'TValue *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5590ecf46768 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|     | `-ParenExpr 0x5590ecf46df8 <./lopcodes.h:125:19, col:37> 'int'
|     |   `-BinaryOperator 0x5590ecf46dd0 <col:20, line:119:34> 'int' '&'
|     |     |-CStyleCastExpr 0x5590ecf46c98 <line:125:20, col:27> 'int' <NoOp>
|     |     | `-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
|     |     |   `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
|     |     |     `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
|     |     |       `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
|     |     |         `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
|     |     |           `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |     |             |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |     |             | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |     |             |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |     |             |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |     |             |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |     |             |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
|     |     |             |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
|     |     |             |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
|     |     |             |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
|     |     |             |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
|     |     |             |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
|     |     |             |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
|     |     |             |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
|     |     |             |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
|     |     |             |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
|     |     |             `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |     |               `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |     |                 |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |     |                 | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |     |                 |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
|     |     |                 |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |     |                 |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |     |                 |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |     |                 |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |     |                 |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
|     |     |                 |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
|     |     |                 `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
|     |     `-UnaryOperator 0x5590ecf46db0 <line:125:31, line:119:34> 'int' prefix '~'
|     |       `-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
|     |         `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
|     |           |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
|     |           `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
|     |             `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
|     |               |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
|     |               `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
|     `-BinaryOperator 0x5590ecf4d398 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|       |-ImplicitCastExpr 0x5590ecf4d380 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5590ecf46e58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|       `-ParenExpr 0x5590ecf4d360 <./lopcodes.h:88:21, col:63> 'int'
|         `-ParenExpr 0x5590ecf4d340 <./llimits.h:75:22, col:31> 'int'
|           `-CStyleCastExpr 0x5590ecf4d318 <col:23, col:30> 'int' <IntegralCast>
|             `-ParenExpr 0x5590ecf4d2f8 <col:26, col:30> 'unsigned int'
|               `-BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|                 |-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
|                 | `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|                 |   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                 |   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                 |   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                 |   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
|                 |     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
|                 |       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
|                 |       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
|                 |       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
|                 |       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
|                 |       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
|                 |       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
|                 |       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
|                 |       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
|                 `-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
|                   `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                     |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
|                     | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                     |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
|                     |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                     |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
|                     |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                     |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                     |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
|                     |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
|                     `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
`-ImplicitCastExpr 0x5590ecf4e5a0 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
  `-ParenExpr 0x5590ecf4e4f8 <col:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf4e4c8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf4d980 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf4d958 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf4d848 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf4d828 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf4d808 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf4d7e0 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf4d7c0 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf4d938 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf4d910 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf4d868 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf4d8f0 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf4d8c8 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf4e000 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf4dfe8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf4d9a0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf4dfc8 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf4dfa0 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf4de68 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf4df80 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf4e4a0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf4e488 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf4e028 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf4e468 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf4e448 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf4e420 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf4e400 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
[B120.8]([B120.10], [B117.2], [B114.2])
   4: DeclRefExpr 0x5590ecf4e5b8 <lvm.c:557:60> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   5: ImplicitCastExpr 0x5590ecf4e688 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4e5e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf4e5b8 <lvm.c:557:60> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B114.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf4e600 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf4e620 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf4e640 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4e600 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4e620 <line:42:18> 'int' 6
[B114.6] + [B114.7]
   9: BinaryOperator 0x5590ecf4e6a0 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4e688 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4e5e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf4e5b8 <lvm.c:557:60> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4e668 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecf4e640 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecf4e600 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecf4e620 <line:42:18> 'int' 6
[B114.5] >> ([B114.8])
  10: IntegerLiteral 0x5590ecf4e6e8 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf4e718 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
(Instruction)[B114.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf4e740 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
~[B114.11]
  13: IntegerLiteral 0x5590ecf4e780 <./lopcodes.h:40:17> 'int' 8
8
  14: BinaryOperator 0x5590ecf4e7a0 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4e760 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4e740 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4e780 <line:40:17> 'int' 8
([B114.12]) << [B114.13]
  15: UnaryOperator 0x5590ecf4e7e8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4e7c8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4e7a0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4e760 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4e740 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4e780 <line:40:17> 'int' 8
~([B114.14])
  16: IntegerLiteral 0x5590ecf4e828 <./lopcodes.h:84:60> 'int' 0
0
  17: BinaryOperator 0x5590ecf4e848 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4e808 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4e7e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4e7c8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4e7a0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4e760 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4e740 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4e780 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf4e828 <line:84:60> 'int' 0
([B114.15]) << [B114.16]
  18: BinaryOperator 0x5590ecf4e890 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4e6c8 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4e6a0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4e688 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4e5e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf4e5b8 <lvm.c:557:60> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4e668 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecf4e640 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecf4e600 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecf4e620 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecf4e870 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4e848 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4e808 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4e7e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4e7c8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4e7a0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4e760 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4e740 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4e780 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf4e828 <line:84:60> 'int' 0
([B114.9]) & ([B114.17])
  19: CStyleCastExpr 0x5590ecf4e920 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4e900 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4e890 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4e6c8 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4e6a0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4e688 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4e5e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf4e5b8 <lvm.c:557:60> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4e668 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecf4e640 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecf4e600 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4e620 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecf4e870 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4e848 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4e808 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4e7e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4e7c8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4e7a0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4e760 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4e740 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4e780 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecf4e828 <line:84:60> 'int' 0
(int)([B114.18]) (CStyleCastExpr, IntegralCast, int)
  20: BinaryOperator 0x5590ecf4e988 <lvm.c:557:15, ./lopcodes.h:84:63> 'int' '=='
|-CallExpr 0x5590ecf4e530 <lvm.c:557:15, col:46> 'int'
| |-ImplicitCastExpr 0x5590ecf4e518 <col:15> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5590ecf46120 <col:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeb4f0 'luaV_lessthan' 'int (lua_State *, const TValue *, const TValue *)'
| |-ImplicitCastExpr 0x5590ecf4e570 <col:29> 'lua_State *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf46148 <col:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
| |-ImplicitCastExpr 0x5590ecf4e588 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
| | `-ParenExpr 0x5590ecf4d3f0 <col:25, col:27> 'TValue *'
| |   `-ConditionalOperator 0x5590ecf4d3c0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
| |     |-ParenExpr 0x5590ecf46748 <line:122:17, col:29> 'int'
| |     | `-BinaryOperator 0x5590ecf46720 <col:18, line:119:34> 'int' '&'
| |     |   |-ParenExpr 0x5590ecf46610 <line:122:18, col:20> 'int'
| |     |   | `-ParenExpr 0x5590ecf465f0 <line:88:21, col:63> 'int'
| |     |   |   `-ParenExpr 0x5590ecf465d0 <./llimits.h:75:22, col:31> 'int'
| |     |   |     `-CStyleCastExpr 0x5590ecf465a8 <col:23, col:30> 'int' <IntegralCast>
| |     |   |       `-ParenExpr 0x5590ecf46588 <col:26, col:30> 'unsigned int'
| |     |   |         `-BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
| |     |   |           |-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
| |     |   |           | `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
| |     |   |           |   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| |     |   |           |   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
| |     |   |           |   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
| |     |   |           |   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
| |     |   |           |     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
| |     |   |           |       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
| |     |   |           |       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
| |     |   |           |       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
| |     |   |           |       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
| |     |   |           |       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
| |     |   |           |       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
| |     |   |           |       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
| |     |   |           |       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
| |     |   |           `-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
| |     |   |             `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
| |     |   |               |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
| |     |   |               | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |     |   |               |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
| |     |   |               |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
| |     |   |               |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
| |     |   |               |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |     |   |               |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |     |   |               |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
| |     |   |               |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
| |     |   |               `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
| |     |   `-ParenExpr 0x5590ecf46700 <line:119:16, col:34> 'int'
| |     |     `-BinaryOperator 0x5590ecf466d8 <col:17, col:33> 'int' '<<'
| |     |       |-IntegerLiteral 0x5590ecf46630 <col:17> 'int' 1
| |     |       `-ParenExpr 0x5590ecf466b8 <col:22, col:33> 'int'
| |     |         `-BinaryOperator 0x5590ecf46690 <line:38:17, line:119:32> 'int' '-'
| |     |           |-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
| |     |           `-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
| |     |-BinaryOperator 0x5590ecf46e30 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |     | |-ImplicitCastExpr 0x5590ecf46e18 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5590ecf46768 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| |     | `-ParenExpr 0x5590ecf46df8 <./lopcodes.h:125:19, col:37> 'int'
| |     |   `-BinaryOperator 0x5590ecf46dd0 <col:20, line:119:34> 'int' '&'
| |     |     |-CStyleCastExpr 0x5590ecf46c98 <line:125:20, col:27> 'int' <NoOp>
| |     |     | `-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
| |     |     |   `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
| |     |     |     `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
| |     |     |       `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
| |     |     |         `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
| |     |     |           `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
| |     |     |             |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
| |     |     |             | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
| |     |     |             |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| |     |     |             |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
| |     |     |             |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
| |     |     |             |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
| |     |     |             |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
| |     |     |             |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
| |     |     |             |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
| |     |     |             |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
| |     |     |             |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
| |     |     |             |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
| |     |     |             |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
| |     |     |             |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
| |     |     |             |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
| |     |     |             `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
| |     |     |               `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
| |     |     |                 |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
| |     |     |                 | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |     |     |                 |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
| |     |     |                 |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
| |     |     |                 |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
| |     |     |                 |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |     |     |                 |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |     |     |                 |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
| |     |     |                 |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
| |     |     |                 `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
| |     |     `-UnaryOperator 0x5590ecf46db0 <line:125:31, line:119:34> 'int' prefix '~'
| |     |       `-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
| |     |         `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
| |     |           |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
| |     |           `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
| |     |             `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
| |     |               |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
| |     |               `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
| |     `-BinaryOperator 0x5590ecf4d398 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
| |       |-ImplicitCastExpr 0x5590ecf4d380 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| |       | `-DeclRefExpr 0x5590ecf46e58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
| |       `-ParenExpr 0x5590ecf4d360 <./lopcodes.h:88:21, col:63> 'int'
| |         `-ParenExpr 0x5590ecf4d340 <./llimits.h:75:22, col:31> 'int'
| |           `-CStyleCastExpr 0x5590ecf4d318 <col:23, col:30> 'int' <IntegralCast>
| |             `-ParenExpr 0x5590ecf4d2f8 <col:26, col:30> 'unsigned int'
| |               `-BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
| |                 |-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
| |                 | `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
| |                 |   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| |                 |   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
| |                 |   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
| |                 |   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
| |                 |     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
| |                 |       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
| |                 |       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
| |                 |       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
| |                 |       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
| |                 |       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
| |                 |       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
| |                 |       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
| |                 |       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
| |                 `-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
| |                   `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
| |                     |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
| |                     | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
| |                     |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
| |                     |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
| |                     |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
| |                     |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
| |                     |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
| |                     |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
| |                     |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
| |                     `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
| `-ImplicitCastExpr 0x5590ecf4e5a0 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
|   `-ParenExpr 0x5590ecf4e4f8 <col:25, col:27> 'TValue *'
|     `-ConditionalOperator 0x5590ecf4e4c8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|       |-ParenExpr 0x5590ecf4d980 <line:122:17, col:29> 'int'
|       | `-BinaryOperator 0x5590ecf4d958 <col:18, line:119:34> 'int' '&'
|       |   |-ParenExpr 0x5590ecf4d848 <line:122:18, col:20> 'int'
|       |   | `-ParenExpr 0x5590ecf4d828 <line:92:21, col:63> 'int'
|       |   |   `-ParenExpr 0x5590ecf4d808 <./llimits.h:75:22, col:31> 'int'
|       |   |     `-CStyleCastExpr 0x5590ecf4d7e0 <col:23, col:30> 'int' <IntegralCast>
|       |   |       `-ParenExpr 0x5590ecf4d7c0 <col:26, col:30> 'unsigned int'
|       |   |         `-BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|       |   |           |-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
|       |   |           | `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|       |   |           |   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|       |   |           |   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|       |   |           |   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|       |   |           |   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
|       |   |           |     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
|       |   |           |       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
|       |   |           |       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
|       |   |           |       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
|       |   |           |       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
|       |   |           |       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
|       |   |           `-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
|       |   |             `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|       |   |               |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
|       |   |               | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|       |   |               |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
|       |   |               |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |   |               |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
|       |   |               |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   |               |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |   |               |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
|       |   |               |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
|       |   |               `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
|       |   `-ParenExpr 0x5590ecf4d938 <line:119:16, col:34> 'int'
|       |     `-BinaryOperator 0x5590ecf4d910 <col:17, col:33> 'int' '<<'
|       |       |-IntegerLiteral 0x5590ecf4d868 <col:17> 'int' 1
|       |       `-ParenExpr 0x5590ecf4d8f0 <col:22, col:33> 'int'
|       |         `-BinaryOperator 0x5590ecf4d8c8 <line:38:17, line:119:32> 'int' '-'
|       |           |-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
|       |           `-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
|       |-BinaryOperator 0x5590ecf4e000 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|       | |-ImplicitCastExpr 0x5590ecf4dfe8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5590ecf4d9a0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|       | `-ParenExpr 0x5590ecf4dfc8 <./lopcodes.h:125:19, col:37> 'int'
|       |   `-BinaryOperator 0x5590ecf4dfa0 <col:20, line:119:34> 'int' '&'
|       |     |-CStyleCastExpr 0x5590ecf4de68 <line:125:20, col:27> 'int' <NoOp>
|       |     | `-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
|       |     |   `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
|       |     |     `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
|       |     |       `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
|       |     |         `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
|       |     |           `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|       |     |             |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
|       |     |             | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|       |     |             |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|       |     |             |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|       |     |             |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|       |     |             |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
|       |     |             |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
|       |     |             |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
|       |     |             |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
|       |     |             |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
|       |     |             |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
|       |     |             |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
|       |     |             `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
|       |     |               `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|       |     |                 |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
|       |     |                 | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|       |     |                 |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
|       |     |                 |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |     |                 |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       |     |                 |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |     |                 |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     |                 |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
|       |     |                 |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
|       |     |                 `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
|       |     `-UnaryOperator 0x5590ecf4df80 <line:125:31, line:119:34> 'int' prefix '~'
|       |       `-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
|       |         `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
|       |           |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
|       |           `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
|       |             `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
|       |               |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
|       |               `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
|       `-BinaryOperator 0x5590ecf4e4a0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|         |-ImplicitCastExpr 0x5590ecf4e488 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
|         | `-DeclRefExpr 0x5590ecf4e028 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|         `-ParenExpr 0x5590ecf4e468 <./lopcodes.h:92:21, col:63> 'int'
|           `-ParenExpr 0x5590ecf4e448 <./llimits.h:75:22, col:31> 'int'
|             `-CStyleCastExpr 0x5590ecf4e420 <col:23, col:30> 'int' <IntegralCast>
|               `-ParenExpr 0x5590ecf4e400 <col:26, col:30> 'unsigned int'
|                 `-BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|                   |-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
|                   | `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|                   |   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                   |   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                   |   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                   |   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
|                   |     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
|                   |       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
|                   |       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
|                   |       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
|                   |       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
|                   |       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
|                   `-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
|                     `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                       |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
|                       | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                       |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
|                       |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                       |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
|                       |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                       |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                       |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
|                       |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
|                       `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf4e968 <line:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecf4e948 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf4e920 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf4e900 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf4e890 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf4e6c8 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf4e6a0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf4e688 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf4e5e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf4e5b8 <lvm.c:557:60> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf4e668 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecf4e640 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecf4e600 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecf4e620 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecf4e870 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf4e848 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf4e808 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf4e7e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf4e7c8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf4e7a0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf4e760 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf4e740 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf4e718 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf4e6e8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf4e780 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecf4e828 <line:84:60> 'int' 0
[B114.3] == (([B114.19]))
   T: if [B114.20]
   Preds (2): B115 B116
   Succs (2): B113 B112

 [B115]
   1: DeclRefExpr 0x5590ecf4d9a0 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf4dfe8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4d9a0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B115.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf4db00 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B115.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf4da10 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf4da30 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf4da50 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
[B115.5] + [B115.6]
   8: IntegerLiteral 0x5590ecf4da98 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf4dab8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
([B115.7]) + [B115.8]
  10: BinaryOperator 0x5590ecf4db18 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
[B115.4] >> ([B115.9])
  11: IntegerLiteral 0x5590ecf4db60 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf4db90 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
(Instruction)[B115.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf4dbb8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
~[B115.12]
  14: IntegerLiteral 0x5590ecf4dbf8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf4dc18 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
([B115.13]) << [B115.14]
  16: UnaryOperator 0x5590ecf4dc60 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
~([B115.15])
  17: IntegerLiteral 0x5590ecf4dca0 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf4dcc0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
([B115.16]) << [B115.17]
  19: BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
([B115.10]) & ([B115.18])
  20: CStyleCastExpr 0x5590ecf4dd98 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
(int)([B115.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf4de68 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
(int)((([B115.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf4de90 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf4deb0 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf4ded0 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf4def0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
[B115.23] - [B115.24]
  26: BinaryOperator 0x5590ecf4df38 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
`-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
[B115.22] << ([B115.25])
  27: UnaryOperator 0x5590ecf4df80 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
~([B115.26])
  28: BinaryOperator 0x5590ecf4dfa0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf4de68 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf4df80 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
[B115.21] & [B115.27]
  29: BinaryOperator 0x5590ecf4e000 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf4dfe8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf4d9a0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf4dfc8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf4dfa0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf4de68 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf4de48 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf4dde0 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf4ddc0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf4dd98 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf4dd78 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf4dd08 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf4db40 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf4db18 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf4db00 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf4d9f0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf4d9c8 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf4dae0 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf4dab8 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf4da78 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf4da50 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf4da10 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf4da30 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf4da98 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf4dce8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf4dcc0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf4dc80 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf4dc60 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf4dc40 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf4dc18 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf4dbd8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf4dbb8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf4db90 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf4db60 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf4dbf8 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf4dca0 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf4df80 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf4df60 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf4df38 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf4de90 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf4df18 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf4def0 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf4deb0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf4ded0 <line:119:32> 'int' 1
[B115.2] + ([B115.28])
   Preds (1): B117
   Succs (1): B114

 [B116]
   1: DeclRefExpr 0x5590ecf4e028 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf4e488 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf4e028 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B116.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf4e188 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B116.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf4e098 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf4e0b8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf4e0d8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
[B116.5] + [B116.6]
   8: IntegerLiteral 0x5590ecf4e120 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf4e140 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
([B116.7]) + [B116.8]
  10: BinaryOperator 0x5590ecf4e1a0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
[B116.4] >> ([B116.9])
  11: IntegerLiteral 0x5590ecf4e1e8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf4e218 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
(Instruction)[B116.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf4e240 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
~[B116.12]
  14: IntegerLiteral 0x5590ecf4e280 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf4e2a0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
([B116.13]) << [B116.14]
  16: UnaryOperator 0x5590ecf4e2e8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
~([B116.15])
  17: IntegerLiteral 0x5590ecf4e328 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf4e348 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
([B116.16]) << [B116.17]
  19: BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
([B116.10]) & ([B116.18])
  20: CStyleCastExpr 0x5590ecf4e420 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4e400 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
(int)([B116.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf4e4a0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf4e488 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf4e028 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf4e468 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf4e448 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf4e420 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf4e400 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf4e390 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf4e1c8 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf4e1a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf4e188 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf4e078 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf4e050 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf4e168 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf4e140 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf4e100 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf4e0d8 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf4e098 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf4e0b8 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf4e120 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf4e370 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf4e348 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf4e308 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf4e2e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf4e2c8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf4e2a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf4e260 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf4e240 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf4e218 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf4e1e8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf4e280 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf4e328 <line:92:60> 'int' 0
[B116.2] + (([B116.20]))
   Preds (1): B117
   Succs (1): B114

 [B117]
   1: ConditionalOperator 0x5590ecf4d3c0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf46748 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf46720 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf46610 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf465f0 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf465d0 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf465a8 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf46588 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf46700 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf466d8 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf46630 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf466b8 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf46690 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf46e30 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf46e18 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf46768 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf46df8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf46dd0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf46c98 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf46db0 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf4d398 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf4d380 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf46e58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf4d360 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf4d340 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf4d318 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf4d2f8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
([B120.36]) ? [B118.31] : [B119.23]
   2: ImplicitCastExpr 0x5590ecf4e588 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf4d3f0 <col:25, col:27> 'TValue *'
  `-ConditionalOperator 0x5590ecf4d3c0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
    |-ParenExpr 0x5590ecf46748 <line:122:17, col:29> 'int'
    | `-BinaryOperator 0x5590ecf46720 <col:18, line:119:34> 'int' '&'
    |   |-ParenExpr 0x5590ecf46610 <line:122:18, col:20> 'int'
    |   | `-ParenExpr 0x5590ecf465f0 <line:88:21, col:63> 'int'
    |   |   `-ParenExpr 0x5590ecf465d0 <./llimits.h:75:22, col:31> 'int'
    |   |     `-CStyleCastExpr 0x5590ecf465a8 <col:23, col:30> 'int' <IntegralCast>
    |   |       `-ParenExpr 0x5590ecf46588 <col:26, col:30> 'unsigned int'
    |   |         `-BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |   |           |-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
    |   |           | `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |           |   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   |           |   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |           |   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   |           |   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
    |   |           |     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
    |   |           |       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
    |   |           |       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
    |   |           |       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
    |   |           |       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
    |   |           |       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
    |   |           |       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
    |   |           |       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
    |   |           |       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
    |   |           `-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |   |             `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |   |               |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
    |   |               | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   |               |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
    |   |               |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |   |               |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |   |               |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   |               |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |   |               |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
    |   |               |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
    |   |               `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
    |   `-ParenExpr 0x5590ecf46700 <line:119:16, col:34> 'int'
    |     `-BinaryOperator 0x5590ecf466d8 <col:17, col:33> 'int' '<<'
    |       |-IntegerLiteral 0x5590ecf46630 <col:17> 'int' 1
    |       `-ParenExpr 0x5590ecf466b8 <col:22, col:33> 'int'
    |         `-BinaryOperator 0x5590ecf46690 <line:38:17, line:119:32> 'int' '-'
    |           |-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
    |-BinaryOperator 0x5590ecf46e30 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
    | |-ImplicitCastExpr 0x5590ecf46e18 <lvm.c:352:21> 'TValue *' <LValueToRValue>
    | | `-DeclRefExpr 0x5590ecf46768 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
    | `-ParenExpr 0x5590ecf46df8 <./lopcodes.h:125:19, col:37> 'int'
    |   `-BinaryOperator 0x5590ecf46dd0 <col:20, line:119:34> 'int' '&'
    |     |-CStyleCastExpr 0x5590ecf46c98 <line:125:20, col:27> 'int' <NoOp>
    |     | `-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
    |     |   `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
    |     |     `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
    |     |       `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
    |     |         `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
    |     |           `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |     |             |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
    |     |             | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |     |             |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |     |             |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |     |             |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |     |             |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
    |     |             |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
    |     |             |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
    |     |             |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
    |     |             |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
    |     |             |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
    |     |             |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
    |     |             |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
    |     |             |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
    |     |             |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
    |     |             `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
    |     |               `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |     |                 |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |     |                 | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |     |                 |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
    |     |                 |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |     |                 |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
    |     |                 |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |     |                 |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     |                 |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
    |     |                 |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
    |     |                 `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
    |     `-UnaryOperator 0x5590ecf46db0 <line:125:31, line:119:34> 'int' prefix '~'
    |       `-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
    |           |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
    |           `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
    |             `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
    |               |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
    |               `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
    `-BinaryOperator 0x5590ecf4d398 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf4d380 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf46e58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf4d360 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf4d340 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf4d318 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf4d2f8 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
([B117.1]) (ImplicitCastExpr, BitCast, const TValue *)
   3: DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf4d548 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B117.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf4d458 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf4d478 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf4d498 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
[B117.5] + [B117.6]
   8: IntegerLiteral 0x5590ecf4d4e0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf4d500 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
([B117.7]) + [B117.8]
  10: BinaryOperator 0x5590ecf4d560 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
[B117.4] >> ([B117.9])
  11: IntegerLiteral 0x5590ecf4d5a8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf4d5d8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
(Instruction)[B117.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf4d600 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
~[B117.12]
  14: IntegerLiteral 0x5590ecf4d640 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf4d660 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
([B117.13]) << [B117.14]
  16: UnaryOperator 0x5590ecf4d6a8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
~([B117.15])
  17: IntegerLiteral 0x5590ecf4d6e8 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf4d708 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
([B117.16]) << [B117.17]
  19: BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
([B117.10]) & ([B117.18])
  20: CStyleCastExpr 0x5590ecf4d7e0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4d7c0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
(int)([B117.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf4d868 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf4d888 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf4d8a8 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf4d8c8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
[B117.22] - [B117.23]
  25: BinaryOperator 0x5590ecf4d910 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf4d868 <col:17> 'int' 1
`-ParenExpr 0x5590ecf4d8f0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf4d8c8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
[B117.21] << ([B117.24])
  26: BinaryOperator 0x5590ecf4d958 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf4d848 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf4d828 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf4d808 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf4d7e0 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf4d7c0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf4d750 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf4d588 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf4d560 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf4d548 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf4d438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf4d410 <lvm.c:557:44> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf4d528 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf4d500 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf4d4c0 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf4d498 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf4d458 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf4d478 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf4d4e0 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf4d730 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf4d708 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf4d6c8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf4d6a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf4d688 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf4d660 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf4d620 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf4d600 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf4d5d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf4d5a8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf4d640 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf4d6e8 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf4d938 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf4d910 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf4d868 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf4d8f0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf4d8c8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf4d888 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4d8a8 <line:119:32> 'int' 1
((([B117.20]))) & ([B117.25])
   T: ([B117.26]) ? ... : ...
   Preds (2): B118 B119
   Succs (2): B115 B116

 [B118]
   1: DeclRefExpr 0x5590ecf46768 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf46e18 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf46768 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B118.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf46930 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B118.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf467d8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf467f8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf46818 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
[B118.5] + [B118.6]
   8: IntegerLiteral 0x5590ecf46860 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf46880 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
([B118.7]) + [B118.8]
  10: IntegerLiteral 0x5590ecf468c8 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf468e8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
([B118.9]) + [B118.10]
  12: BinaryOperator 0x5590ecf46948 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
[B118.4] >> ([B118.11])
  13: IntegerLiteral 0x5590ecf46990 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf469c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
(Instruction)[B118.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf469e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
~[B118.14]
  16: IntegerLiteral 0x5590ecf46a28 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf46a48 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
([B118.15]) << [B118.16]
  18: UnaryOperator 0x5590ecf46a90 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
~([B118.17])
  19: IntegerLiteral 0x5590ecf46ad0 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf46af0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
([B118.18]) << [B118.19]
  21: BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
([B118.12]) & ([B118.20])
  22: CStyleCastExpr 0x5590ecf46bc8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
(int)([B118.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf46c98 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
(int)((([B118.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf46cc0 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf46ce0 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf46d00 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf46d20 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
[B118.25] - [B118.26]
  28: BinaryOperator 0x5590ecf46d68 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
[B118.24] << ([B118.27])
  29: UnaryOperator 0x5590ecf46db0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
~([B118.28])
  30: BinaryOperator 0x5590ecf46dd0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf46c98 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf46db0 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
[B118.23] & [B118.29]
  31: BinaryOperator 0x5590ecf46e30 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf46e18 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf46768 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf46df8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf46dd0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf46c98 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf46c78 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf46c10 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf46bf0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf46bc8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf46ba8 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf46b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf46970 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf46948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf46930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf467b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf46790 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf46910 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf468e8 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf468a8 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf46880 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf46840 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf46818 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf467d8 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf467f8 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf46860 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf468c8 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf46b18 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf46af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf46ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf46a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf46a70 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf46a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf46a08 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf469e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf469c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf46990 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf46a28 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf46ad0 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf46db0 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf46d90 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf46d68 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf46cc0 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf46d48 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf46d20 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf46ce0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf46d00 <line:119:32> 'int' 1
[B118.2] + ([B118.30])
   Preds (1): B120
   Succs (1): B117

 [B119]
   1: DeclRefExpr 0x5590ecf46e58 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf4d380 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf46e58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B119.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf4d080 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B119.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf46ec8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf46ee8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf46f08 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
[B119.5] + [B119.6]
   8: IntegerLiteral 0x5590ecf46f50 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf4cfd0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
([B119.7]) + [B119.8]
  10: IntegerLiteral 0x5590ecf4d018 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf4d038 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
([B119.9]) + [B119.10]
  12: BinaryOperator 0x5590ecf4d098 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
[B119.4] >> ([B119.11])
  13: IntegerLiteral 0x5590ecf4d0e0 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf4d110 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
(Instruction)[B119.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf4d138 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
~[B119.14]
  16: IntegerLiteral 0x5590ecf4d178 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf4d198 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
([B119.15]) << [B119.16]
  18: UnaryOperator 0x5590ecf4d1e0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
~([B119.17])
  19: IntegerLiteral 0x5590ecf4d220 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf4d240 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
([B119.18]) << [B119.19]
  21: BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
([B119.12]) & ([B119.20])
  22: CStyleCastExpr 0x5590ecf4d318 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf4d2f8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
(int)([B119.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf4d398 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf4d380 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf46e58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf4d360 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf4d340 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf4d318 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf4d2f8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf4d288 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf4d0c0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf4d098 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf4d080 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf46ea8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf46e80 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf4d060 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf4d038 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf4cff8 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf4cfd0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf46f30 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf46f08 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf46ec8 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf46ee8 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf46f50 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf4d018 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf4d268 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf4d240 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf4d200 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf4d1e0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf4d1c0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf4d198 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf4d158 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf4d138 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf4d110 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf4d0e0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf4d178 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf4d220 <line:88:60> 'int' 0
[B119.2] + (([B119.22]))
   Preds (1): B120
   Succs (1): B117

 [B120]
  case OP_LT:
   1: DeclRefExpr 0x5590ecf460b8 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf460e0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf460b8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B120.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf46040 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf46068 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf46040 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B120.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf46080 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf46068 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf46040 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B120.4]->savedpc
   6: BinaryOperator 0x5590ecf460f8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf46080 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf46068 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf46040 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf460e0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf460b8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B120.5] = [B120.2]
   7: DeclRefExpr 0x5590ecf46120 <lvm.c:557:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeb4f0 'luaV_lessthan' 'int (lua_State *, const TValue *, const TValue *)'
luaV_lessthan
   8: ImplicitCastExpr 0x5590ecf4e518 <lvm.c:557:15> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf46120 <col:15> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeb4f0 'luaV_lessthan' 'int (lua_State *, const TValue *, const TValue *)'
[B120.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const TValue *, const TValue *))
   9: DeclRefExpr 0x5590ecf46148 <lvm.c:557:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf4e570 <lvm.c:557:29> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf46148 <col:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B120.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  12: ImplicitCastExpr 0x5590ecf46310 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B120.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x5590ecf461b8 <./lopcodes.h:44:17> 'int' 0
0
  14: IntegerLiteral 0x5590ecf461d8 <./lopcodes.h:42:18> 'int' 6
6
  15: BinaryOperator 0x5590ecf461f8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
[B120.13] + [B120.14]
  16: IntegerLiteral 0x5590ecf46240 <./lopcodes.h:40:17> 'int' 8
8
  17: BinaryOperator 0x5590ecf46260 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
([B120.15]) + [B120.16]
  18: IntegerLiteral 0x5590ecf462a8 <./lopcodes.h:37:17> 'int' 9
9
  19: BinaryOperator 0x5590ecf462c8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
([B120.17]) + [B120.18]
  20: BinaryOperator 0x5590ecf46328 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
[B120.12] >> ([B120.19])
  21: IntegerLiteral 0x5590ecf46370 <./lopcodes.h:71:39> 'int' 0
0
  22: CStyleCastExpr 0x5590ecf463a0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
(Instruction)[B120.21] (CStyleCastExpr, IntegralCast, Instruction)
  23: UnaryOperator 0x5590ecf463c8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
~[B120.22]
  24: IntegerLiteral 0x5590ecf46408 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5590ecf46428 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
([B120.23]) << [B120.24]
  26: UnaryOperator 0x5590ecf46470 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
~([B120.25])
  27: IntegerLiteral 0x5590ecf464b0 <./lopcodes.h:88:60> 'int' 0
0
  28: BinaryOperator 0x5590ecf464d0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
([B120.26]) << [B120.27]
  29: BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
([B120.20]) & ([B120.28])
  30: CStyleCastExpr 0x5590ecf465a8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf46588 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
(int)([B120.29]) (CStyleCastExpr, IntegralCast, int)
  31: IntegerLiteral 0x5590ecf46630 <./lopcodes.h:119:17> 'int' 1
1
  32: IntegerLiteral 0x5590ecf46650 <./lopcodes.h:38:17> 'int' 9
9
  33: IntegerLiteral 0x5590ecf46670 <./lopcodes.h:119:32> 'int' 1
1
  34: BinaryOperator 0x5590ecf46690 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
[B120.32] - [B120.33]
  35: BinaryOperator 0x5590ecf466d8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf46630 <col:17> 'int' 1
`-ParenExpr 0x5590ecf466b8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf46690 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
[B120.31] << ([B120.34])
  36: BinaryOperator 0x5590ecf46720 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf46610 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf465f0 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf465d0 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf465a8 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf46588 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf46518 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf46350 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf46328 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf46310 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf46198 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf46170 <lvm.c:557:36> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf462f0 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf462c8 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf46288 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf46260 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf46220 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf461f8 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf461b8 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf461d8 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf46240 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf462a8 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf464f8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf464d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf46490 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf46470 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf46450 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf46428 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf463e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf463c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf463a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf46370 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf46408 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf464b0 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf46700 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf466d8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf46630 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf466b8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf46690 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf46650 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf46670 <line:119:32> 'int' 1
((([B120.30]))) & ([B120.35])
   T: ([B120.36]) ? ... : ...
   Preds (1): B2
   Succs (2): B118 B119

 [B121]
   1: DeclRefExpr 0x5590ecf45e70 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf45e98 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf45e70 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B121.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf45eb0 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf45e98 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf45e70 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B121.2]->base
   4: ImplicitCastExpr 0x5590ecf45ee8 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf45eb0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf45e98 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf45e70 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B121.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf45e48 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf45f00 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf45e48 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf45ee8 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf45eb0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf45e98 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf45e70 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B121.5] = [B121.4]
   7: DeclRefExpr 0x5590ecf45f58 <lvm.c:552:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   8: UnaryOperator 0x5590ecf45f80 <lvm.c:552:9, col:11> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf45f58 <col:9> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B121.7]++
   T: continue;
   Preds (2): B122 B123
   Succs (1): B1

 [B122]
   1: DeclRefExpr 0x5590ecf454f0 <lvm.c:550:23> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: DeclRefExpr 0x5590ecf45538 <lvm.c:550:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   3: ImplicitCastExpr 0x5590ecf45560 <lvm.c:550:39> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B122.2] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   4: UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B122.3]
   5: ImplicitCastExpr 0x5590ecf456a8 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf45598 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
([B122.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf455b8 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf455d8 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf455f8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
[B122.6] + [B122.7]
   9: IntegerLiteral 0x5590ecf45640 <./lopcodes.h:40:17> 'int' 8
8
  10: BinaryOperator 0x5590ecf45660 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf45620 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf455f8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf45640 <line:40:17> 'int' 8
([B122.8]) + [B122.9]
  11: BinaryOperator 0x5590ecf456c0 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf456a8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf45598 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|     `-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf45688 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf45660 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf45620 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf455f8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf45640 <line:40:17> 'int' 8
[B122.5] >> ([B122.10])
  12: IntegerLiteral 0x5590ecf45708 <./lopcodes.h:71:39> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf45738 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
(Instruction)[B122.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: UnaryOperator 0x5590ecf45760 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
~[B122.13]
  15: IntegerLiteral 0x5590ecf457a0 <./lopcodes.h:37:17> 'int' 9
9
  16: IntegerLiteral 0x5590ecf457c0 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf457e0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
[B122.15] + [B122.16]
  18: BinaryOperator 0x5590ecf45828 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
`-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
([B122.14]) << ([B122.17])
  19: UnaryOperator 0x5590ecf45870 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf45850 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf45828 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
~([B122.18])
  20: IntegerLiteral 0x5590ecf458b0 <./lopcodes.h:96:63> 'int' 0
0
  21: BinaryOperator 0x5590ecf458d0 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf45890 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf45870 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf45850 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf45828 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf458b0 <line:96:63> 'int' 0
([B122.19]) << [B122.20]
  22: BinaryOperator 0x5590ecf45918 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf456e8 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf456c0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf456a8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf45598 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|   `-ParenExpr 0x5590ecf45688 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf45660 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf45620 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf455f8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf45640 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf458f8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf458d0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf45890 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf45870 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf45850 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf45828 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf458b0 <line:96:63> 'int' 0
([B122.11]) & ([B122.21])
  23: CStyleCastExpr 0x5590ecf459a8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf45988 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf45918 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf456e8 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf456c0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf456a8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf45598 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
    |   |     `-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
    |   `-ParenExpr 0x5590ecf45688 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf45660 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf45620 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf455f8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf45640 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf458f8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf458d0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf45890 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf45870 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf45850 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf45828 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf458b0 <line:96:63> 'int' 0
(int)([B122.22]) (CStyleCastExpr, IntegralCast, int)
  24: IntegerLiteral 0x5590ecf45a10 <./lopcodes.h:57:28> 'int' 1
1
  25: IntegerLiteral 0x5590ecf45a30 <./lopcodes.h:37:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf45a50 <./lopcodes.h:38:17> 'int' 9
9
  27: BinaryOperator 0x5590ecf45a70 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf45a30 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf45a50 <line:38:17> 'int' 9
[B122.25] + [B122.26]
  28: BinaryOperator 0x5590ecf45ab8 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf45a10 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf45a98 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf45a70 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf45a30 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf45a50 <line:38:17> 'int' 9
[B122.24] << ([B122.27])
  29: IntegerLiteral 0x5590ecf45b00 <./lopcodes.h:57:40> 'int' 1
1
  30: BinaryOperator 0x5590ecf45b20 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf45ae0 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf45ab8 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf45a10 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf45a98 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf45a70 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf45a30 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf45a50 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf45b00 <line:57:40> 'int' 1
([B122.28]) - [B122.29]
  31: IntegerLiteral 0x5590ecf45b68 <./lopcodes.h:58:39> 'int' 1
1
  32: BinaryOperator 0x5590ecf45b88 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf45b48 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf45b20 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf45ae0 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf45ab8 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf45a10 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf45a98 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf45a70 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf45a30 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf45a50 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf45b00 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf45b68 <line:58:39> 'int' 1
([B122.30]) >> [B122.31]
  33: BinaryOperator 0x5590ecf45bd0 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf459f0 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf459d0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf459a8 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf45988 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf45918 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf456e8 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf456c0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf456a8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf45598 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
|         |   |     `-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
|         |   `-ParenExpr 0x5590ecf45688 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf45660 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf45620 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf455f8 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf45640 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf458f8 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf458d0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf45890 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf45870 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf45850 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf45828 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf458b0 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf45bb0 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf45b88 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf45b48 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf45b20 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf45ae0 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf45ab8 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf45a10 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf45a98 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf45a70 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf45a30 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf45a50 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf45b00 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf45b68 <line:58:39> 'int' 1
(([B122.23])) - ([B122.32])
  34: CompoundAssignOperator 0x5590ecf45c38 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf45518 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf454f0 <line:550:23> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf45c18 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf45bf8 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf45bd0 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf459f0 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf459d0 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf459a8 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf45988 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf45918 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf456e8 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf456c0 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf456a8 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf45598 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-UnaryOperator 0x5590ecf45578 <lvm.c:550:38, col:39> 'const Instruction':'const unsigned int' lvalue prefix '*'
      |         |   |     `-ImplicitCastExpr 0x5590ecf45560 <col:39> 'const Instruction *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5590ecf45538 <col:39> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
      |         |   `-ParenExpr 0x5590ecf45688 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf45660 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf45620 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf455f8 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf455b8 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf455d8 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf45640 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf458f8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf458d0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf45890 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf45870 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf45850 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf45828 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf45780 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf45760 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf45738 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf45708 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf45808 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf457e0 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf457a0 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf457c0 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf458b0 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf45bb0 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf45b88 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf45b48 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf45b20 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf45ae0 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf45ab8 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf45a10 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf45a98 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf45a70 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf45a30 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf45a50 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf45b00 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf45b68 <line:58:39> 'int' 1
([B122.1]) += (([B122.33]))
  35: IntegerLiteral 0x5590ecf45c70 <./llimits.h:111:33> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf45ca0 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf45c70 <col:33> 'int' 0
(void)[B122.35] (CStyleCastExpr, ToVoid, void)
  37: IntegerLiteral 0x5590ecf45ce8 <./llimits.h:110:33> 'int' 0
0
  38: CStyleCastExpr 0x5590ecf45d18 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf45ce8 <col:33> 'int' 0
(void)[B122.37] (CStyleCastExpr, ToVoid, void)
   Preds (1): B123
   Succs (1): B121

 [B123]
   1: BinaryOperator 0x5590ecf450b0 <./lobject.h:90:18, ./lvm.h:22:52> 'int' '&&'
|-BinaryOperator 0x5590ecf424c8 <./lobject.h:90:18, col:26> 'int' '=='
| |-ImplicitCastExpr 0x5590ecf42498 <col:18, col:26> 'int' <LValueToRValue>
| | `-ParenExpr 0x5590ecf423c0 <col:18, col:26> 'int' lvalue
| |   `-MemberExpr 0x5590ecf42388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
| |     `-ImplicitCastExpr 0x5590ecf42370 <col:19, col:21> 'TValue *' <LValueToRValue>
| |       `-ParenExpr 0x5590ecf42350 <col:19, col:21> 'TValue *' lvalue
| |         `-DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
| `-ImplicitCastExpr 0x5590ecf424b0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   `-ParenExpr 0x5590ecf42478 <col:18, col:26> 'int' lvalue
|     `-MemberExpr 0x5590ecf42440 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|       `-ImplicitCastExpr 0x5590ecf42428 <col:19, col:21> 'TValue *' <LValueToRValue>
|         `-ParenExpr 0x5590ecf42408 <col:19, col:21> 'TValue *' lvalue
|           `-DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
`-CallExpr 0x5590ecf44ff8 <./lvm.h:22:29, col:52> 'int'
  |-ImplicitCastExpr 0x5590ecf44fe0 <col:29> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf424f0 <col:29> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeeb70 'luaV_equalval' 'int (lua_State *, const TValue *, const TValue *)'
  |-ImplicitCastExpr 0x5590ecf45038 <lvm.c:549:24> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf42518 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  |-ImplicitCastExpr 0x5590ecf45068 <col:27> 'const TValue *' <BitCast>
  | `-ImplicitCastExpr 0x5590ecf45050 <col:27> 'TValue *' <LValueToRValue>
  |   `-DeclRefExpr 0x5590ecf44f90 <col:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
  `-ImplicitCastExpr 0x5590ecf45098 <col:31> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf45080 <col:31> 'TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf44fb8 <col:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
[B125.17] && [B124.11]
   2: DeclRefExpr 0x5590ecf450f8 <lvm.c:549:47> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   3: ImplicitCastExpr 0x5590ecf451c8 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf45120 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf450f8 <lvm.c:549:47> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B123.2]) (ImplicitCastExpr, LValueToRValue, Instruction)
   4: IntegerLiteral 0x5590ecf45140 <./lopcodes.h:44:17> 'int' 0
0
   5: IntegerLiteral 0x5590ecf45160 <./lopcodes.h:42:18> 'int' 6
6
   6: BinaryOperator 0x5590ecf45180 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf45140 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf45160 <line:42:18> 'int' 6
[B123.4] + [B123.5]
   7: BinaryOperator 0x5590ecf451e0 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf451c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf45120 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf450f8 <lvm.c:549:47> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf451a8 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecf45180 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecf45140 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecf45160 <line:42:18> 'int' 6
[B123.3] >> ([B123.6])
   8: IntegerLiteral 0x5590ecf45228 <./lopcodes.h:71:39> 'int' 0
0
   9: CStyleCastExpr 0x5590ecf45258 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
(Instruction)[B123.8] (CStyleCastExpr, IntegralCast, Instruction)
  10: UnaryOperator 0x5590ecf45280 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
~[B123.9]
  11: IntegerLiteral 0x5590ecf452c0 <./lopcodes.h:40:17> 'int' 8
8
  12: BinaryOperator 0x5590ecf452e0 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf452a0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf45280 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf452c0 <line:40:17> 'int' 8
([B123.10]) << [B123.11]
  13: UnaryOperator 0x5590ecf45328 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf45308 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf452e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf452a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf45280 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf452c0 <line:40:17> 'int' 8
~([B123.12])
  14: IntegerLiteral 0x5590ecf45368 <./lopcodes.h:84:60> 'int' 0
0
  15: BinaryOperator 0x5590ecf45388 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf45348 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf45328 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf45308 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf452e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf452a0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf45280 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf452c0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf45368 <line:84:60> 'int' 0
([B123.13]) << [B123.14]
  16: BinaryOperator 0x5590ecf453d0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf45208 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf451e0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf451c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf45120 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf450f8 <lvm.c:549:47> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf451a8 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecf45180 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecf45140 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecf45160 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecf453b0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf45388 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf45348 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf45328 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf45308 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf452e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf452a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf45280 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf452c0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf45368 <line:84:60> 'int' 0
([B123.7]) & ([B123.15])
  17: CStyleCastExpr 0x5590ecf45460 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf45440 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf453d0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf45208 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf451e0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf451c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf45120 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf450f8 <lvm.c:549:47> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf451a8 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecf45180 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecf45140 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecf45160 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecf453b0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf45388 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf45348 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf45328 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf45308 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf452e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf452a0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf45280 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf452c0 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecf45368 <line:84:60> 'int' 0
(int)([B123.16]) (CStyleCastExpr, IntegralCast, int)
  18: BinaryOperator 0x5590ecf454c8 <./lvm.h:22:2, ./lopcodes.h:84:63> 'int' '=='
|-ParenExpr 0x5590ecf450d8 <./lvm.h:22:2, col:53> 'int'
| `-BinaryOperator 0x5590ecf450b0 <./lobject.h:90:18, ./lvm.h:22:52> 'int' '&&'
|   |-BinaryOperator 0x5590ecf424c8 <./lobject.h:90:18, col:26> 'int' '=='
|   | |-ImplicitCastExpr 0x5590ecf42498 <col:18, col:26> 'int' <LValueToRValue>
|   | | `-ParenExpr 0x5590ecf423c0 <col:18, col:26> 'int' lvalue
|   | |   `-MemberExpr 0x5590ecf42388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   | |     `-ImplicitCastExpr 0x5590ecf42370 <col:19, col:21> 'TValue *' <LValueToRValue>
|   | |       `-ParenExpr 0x5590ecf42350 <col:19, col:21> 'TValue *' lvalue
|   | |         `-DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
|   | `-ImplicitCastExpr 0x5590ecf424b0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   |   `-ParenExpr 0x5590ecf42478 <col:18, col:26> 'int' lvalue
|   |     `-MemberExpr 0x5590ecf42440 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   |       `-ImplicitCastExpr 0x5590ecf42428 <col:19, col:21> 'TValue *' <LValueToRValue>
|   |         `-ParenExpr 0x5590ecf42408 <col:19, col:21> 'TValue *' lvalue
|   |           `-DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
|   `-CallExpr 0x5590ecf44ff8 <./lvm.h:22:29, col:52> 'int'
|     |-ImplicitCastExpr 0x5590ecf44fe0 <col:29> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5590ecf424f0 <col:29> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeeb70 'luaV_equalval' 'int (lua_State *, const TValue *, const TValue *)'
|     |-ImplicitCastExpr 0x5590ecf45038 <lvm.c:549:24> 'lua_State *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf42518 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|     |-ImplicitCastExpr 0x5590ecf45068 <col:27> 'const TValue *' <BitCast>
|     | `-ImplicitCastExpr 0x5590ecf45050 <col:27> 'TValue *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5590ecf44f90 <col:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
|     `-ImplicitCastExpr 0x5590ecf45098 <col:31> 'const TValue *' <BitCast>
|       `-ImplicitCastExpr 0x5590ecf45080 <col:31> 'TValue *' <LValueToRValue>
|         `-DeclRefExpr 0x5590ecf44fb8 <col:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
`-ParenExpr 0x5590ecf454a8 <./lopcodes.h:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecf45488 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf45460 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf45440 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf453d0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf45208 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf451e0 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf451c8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf45120 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf450f8 <lvm.c:549:47> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf451a8 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecf45180 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecf45140 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecf45160 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecf453b0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf45388 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf45348 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf45328 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf45308 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf452e0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf452a0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf45280 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf45258 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf45228 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf452c0 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecf45368 <line:84:60> 'int' 0
([B123.1]) == (([B123.17]))
   T: if [B123.18]
   Preds (2): B124 B125
   Succs (2): B122 B121

 [B124]
   1: DeclRefExpr 0x5590ecf424f0 <./lvm.h:22:29> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeeb70 'luaV_equalval' 'int (lua_State *, const TValue *, const TValue *)'
luaV_equalval
   2: ImplicitCastExpr 0x5590ecf44fe0 <./lvm.h:22:29> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf424f0 <col:29> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeeb70 'luaV_equalval' 'int (lua_State *, const TValue *, const TValue *)'
[B124.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const TValue *, const TValue *))
   3: DeclRefExpr 0x5590ecf42518 <lvm.c:549:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf45038 <lvm.c:549:24> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf42518 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B124.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf44f90 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
rb
   6: ImplicitCastExpr 0x5590ecf45050 <lvm.c:549:27> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf44f90 <col:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
[B124.5] (ImplicitCastExpr, LValueToRValue, TValue *)
   7: ImplicitCastExpr 0x5590ecf45068 <lvm.c:549:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf45050 <col:27> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf44f90 <col:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
[B124.6] (ImplicitCastExpr, BitCast, const TValue *)
   8: DeclRefExpr 0x5590ecf44fb8 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
rc
   9: ImplicitCastExpr 0x5590ecf45080 <lvm.c:549:31> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf44fb8 <col:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
[B124.8] (ImplicitCastExpr, LValueToRValue, TValue *)
  10: ImplicitCastExpr 0x5590ecf45098 <lvm.c:549:31> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf45080 <col:31> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf44fb8 <col:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
[B124.9] (ImplicitCastExpr, BitCast, const TValue *)
  11: CallExpr 0x5590ecf44ff8 <./lvm.h:22:29, col:52> 'int'
|-ImplicitCastExpr 0x5590ecf44fe0 <col:29> 'int (*)(lua_State *, const TValue *, const TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf424f0 <col:29> 'int (lua_State *, const TValue *, const TValue *)' Function 0x5590eceeeb70 'luaV_equalval' 'int (lua_State *, const TValue *, const TValue *)'
|-ImplicitCastExpr 0x5590ecf45038 <lvm.c:549:24> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf42518 <col:24> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf45068 <col:27> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf45050 <col:27> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf44f90 <col:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
`-ImplicitCastExpr 0x5590ecf45098 <col:31> 'const TValue *' <BitCast>
  `-ImplicitCastExpr 0x5590ecf45080 <col:31> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf44fb8 <col:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
[B124.2]([B124.4], [B124.7], [B124.10])
   Preds (1): B125
   Succs (1): B123

 [B125]
   1: ConditionalOperator 0x5590ecf421e0 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf41698 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf41670 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf41560 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf41540 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf41520 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf414f8 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf414d8 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf41468 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf412a0 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf41278 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf41260 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf41240 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf41218 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf41448 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf41420 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf413e0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf413c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf41400 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf41650 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf41628 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf41580 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf41608 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf415e0 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf415a0 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf415c0 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf41d18 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf41d00 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf416b8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf41ce0 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf41cb8 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf41b80 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf41b60 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf41af8 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf41ad8 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf41ab0 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf41a90 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf41c98 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf41c78 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf41c50 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf41ba8 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf41c30 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf41c08 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf421b8 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf421a0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf41d40 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf42180 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf42160 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf42138 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf42118 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf420a8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf41ee0 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf41eb8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf41ea0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf41e80 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf41e58 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf42088 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf42060 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf42020 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf42000 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf42040 <line:92:60> 'int' 0
([B128.26]) ? [B126.29] : [B127.21]
   2: DeclStmt 0x5590ecf42230 <lvm.c:547:9, col:28>col:17
`-VarDecl 0x5590ecf410c8 <col:9, ./llimits.h:63:27> lvm.c:547:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf42210 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf421e0 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf41698 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf41670 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf41560 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf41540 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf41520 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf414f8 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf414d8 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf41468 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf412a0 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf41278 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf41260 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf41240 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf41218 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf41448 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf41420 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf413e0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf413c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf41400 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf41650 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf41628 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf41580 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf41608 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf415e0 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf415a0 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf415c0 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf41d18 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf41d00 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf416b8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf41ce0 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf41cb8 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf41b80 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf41b60 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf41af8 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf41ad8 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf41ab0 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf41a90 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf41c98 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf41c78 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf41c50 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf41ba8 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf41c30 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf41c08 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf421b8 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf421a0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf41d40 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf42180 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf42160 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf42138 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf42118 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf420a8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf41ee0 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf41eb8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf41ea0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf41e80 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf41e58 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf42088 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf42060 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf42020 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf42000 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf42040 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf422c0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   4: ImplicitCastExpr 0x5590ecf422e8 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf422c0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B125.3] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   5: DeclRefExpr 0x5590ecf42248 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x5590ecf42270 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf42248 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B125.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: MemberExpr 0x5590ecf42288 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf42270 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf42248 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B125.6]->savedpc
   8: BinaryOperator 0x5590ecf42300 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf42288 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf42270 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf42248 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf422e8 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf422c0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B125.7] = [B125.4]
   9: DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
rb
  10: ImplicitCastExpr 0x5590ecf42370 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf42350 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
([B125.9]) (ImplicitCastExpr, LValueToRValue, TValue *)
  11: MemberExpr 0x5590ecf42388 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf42370 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf42350 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
[B125.10]->tt
  12: ImplicitCastExpr 0x5590ecf42498 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf423c0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf42388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf42370 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf42350 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
([B125.11]) (ImplicitCastExpr, LValueToRValue, int)
  13: DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
rc
  14: ImplicitCastExpr 0x5590ecf42428 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf42408 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
([B125.13]) (ImplicitCastExpr, LValueToRValue, TValue *)
  15: MemberExpr 0x5590ecf42440 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf42428 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf42408 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
[B125.14]->tt
  16: ImplicitCastExpr 0x5590ecf424b0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf42478 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf42440 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf42428 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf42408 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
([B125.15]) (ImplicitCastExpr, LValueToRValue, int)
  17: BinaryOperator 0x5590ecf424c8 <./lobject.h:90:18, col:26> 'int' '=='
|-ImplicitCastExpr 0x5590ecf42498 <col:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf423c0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf42388 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf42370 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf42350 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf42328 <lvm.c:549:27> 'TValue *' lvalue Var 0x5590ecf3c190 'rb' 'TValue *'
`-ImplicitCastExpr 0x5590ecf424b0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
  `-ParenExpr 0x5590ecf42478 <col:18, col:26> 'int' lvalue
    `-MemberExpr 0x5590ecf42440 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
      `-ImplicitCastExpr 0x5590ecf42428 <col:19, col:21> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf42408 <col:19, col:21> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf423e0 <lvm.c:549:31> 'TValue *' lvalue Var 0x5590ecf410c8 'rc' 'TValue *'
[B125.12] == [B125.16]
   T: [B125.17] && ...
   Preds (2): B126 B127
   Succs (2): B124 B123

 [B126]
   1: DeclRefExpr 0x5590ecf416b8 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf41d00 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf416b8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B126.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf41818 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B126.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf41728 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf41748 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf41768 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
[B126.5] + [B126.6]
   8: IntegerLiteral 0x5590ecf417b0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf417d0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
([B126.7]) + [B126.8]
  10: BinaryOperator 0x5590ecf41830 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
[B126.4] >> ([B126.9])
  11: IntegerLiteral 0x5590ecf41878 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf418a8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
(Instruction)[B126.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf418d0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
~[B126.12]
  14: IntegerLiteral 0x5590ecf41910 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf41930 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
([B126.13]) << [B126.14]
  16: UnaryOperator 0x5590ecf41978 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
~([B126.15])
  17: IntegerLiteral 0x5590ecf419b8 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf419d8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
([B126.16]) << [B126.17]
  19: BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
([B126.10]) & ([B126.18])
  20: CStyleCastExpr 0x5590ecf41ab0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf41a90 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
(int)([B126.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf41b80 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf41b60 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf41af8 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf41ad8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf41ab0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf41a90 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
(int)((([B126.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf41ba8 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf41bc8 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf41be8 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf41c08 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
[B126.23] - [B126.24]
  26: BinaryOperator 0x5590ecf41c50 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf41ba8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf41c30 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf41c08 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
[B126.22] << ([B126.25])
  27: UnaryOperator 0x5590ecf41c98 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf41c78 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf41c50 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf41ba8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf41c30 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf41c08 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
~([B126.26])
  28: BinaryOperator 0x5590ecf41cb8 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf41b80 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf41b60 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf41af8 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf41ad8 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf41ab0 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf41a90 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf41c98 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf41c78 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf41c50 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf41ba8 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf41c30 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf41c08 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
[B126.21] & [B126.27]
  29: BinaryOperator 0x5590ecf41d18 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf41d00 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf416b8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf41ce0 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf41cb8 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf41b80 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf41b60 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf41af8 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf41ad8 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf41ab0 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf41a90 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf41a20 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf41858 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf41830 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf41818 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf41708 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf416e0 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf417f8 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf417d0 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf41790 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf41768 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf41728 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf41748 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf417b0 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf41a00 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf419d8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf41998 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf41978 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf41958 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf41930 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf418f0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf418d0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf418a8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf41878 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf41910 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf419b8 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf41c98 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf41c78 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf41c50 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf41ba8 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf41c30 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf41c08 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf41bc8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf41be8 <line:119:32> 'int' 1
[B126.2] + ([B126.28])
   Preds (1): B128
   Succs (1): B125

 [B127]
   1: DeclRefExpr 0x5590ecf41d40 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf421a0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf41d40 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B127.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf41ea0 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B127.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf41db0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf41dd0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf41df0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
[B127.5] + [B127.6]
   8: IntegerLiteral 0x5590ecf41e38 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf41e58 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
([B127.7]) + [B127.8]
  10: BinaryOperator 0x5590ecf41eb8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf41ea0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf41e80 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf41e58 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
[B127.4] >> ([B127.9])
  11: IntegerLiteral 0x5590ecf41f00 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf41f30 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
(Instruction)[B127.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf41f58 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
~[B127.12]
  14: IntegerLiteral 0x5590ecf41f98 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf41fb8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
([B127.13]) << [B127.14]
  16: UnaryOperator 0x5590ecf42000 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
~([B127.15])
  17: IntegerLiteral 0x5590ecf42040 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf42060 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf42020 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf42000 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf42040 <line:92:60> 'int' 0
([B127.16]) << [B127.17]
  19: BinaryOperator 0x5590ecf420a8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf41ee0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf41eb8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf41ea0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf41e80 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf41e58 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf42088 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf42060 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf42020 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf42000 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf42040 <line:92:60> 'int' 0
([B127.10]) & ([B127.18])
  20: CStyleCastExpr 0x5590ecf42138 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf42118 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf420a8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf41ee0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf41eb8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf41ea0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf41e80 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf41e58 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf42088 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf42060 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf42020 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf42000 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf42040 <line:92:60> 'int' 0
(int)([B127.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf421b8 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf421a0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf41d40 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf42180 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf42160 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf42138 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf42118 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf420a8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf41ee0 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf41eb8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf41ea0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf41d90 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf41d68 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf41e80 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf41e58 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf41e18 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf41df0 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf41db0 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf41dd0 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf41e38 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf42088 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf42060 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf42020 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf42000 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf41fe0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf41fb8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf41f78 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf41f58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf41f30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf41f00 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf41f98 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf42040 <line:92:60> 'int' 0
[B127.2] + (([B127.20]))
   Preds (1): B128
   Succs (1): B125

 [B128]
   1: ConditionalOperator 0x5590ecf41050 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf3c7c8 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf3c7a0 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf3c690 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf3c670 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf3c650 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf3c628 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf3c608 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf3c598 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf3c3d0 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf3c3a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf3c390 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf3c370 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf3c348 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf3c578 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf3c550 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf3c510 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf3c4f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf3c530 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf3c780 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf3c758 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf3c6b0 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf3c738 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf3c710 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf3c6d0 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf3c6f0 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf40b20 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf40b08 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf3c7e8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf40ae8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf40ac0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf40988 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf40968 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf40900 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf408e0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf408b8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf40898 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf40aa0 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf40a80 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf40a58 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf409b0 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf40a38 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf40a10 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf41028 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf41010 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf40b48 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf40ff0 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf40fd0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf40fa8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf40f88 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf40f18 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf40d50 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf40d28 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf40d10 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf40cf0 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf40cc8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf40ef8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf40ed0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf40e90 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf40e70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf40eb0 <line:88:60> 'int' 0
([B131.26]) ? [B129.31] : [B130.23]
   2: DeclStmt 0x5590ecf410a0 <lvm.c:546:9, col:28>col:17
`-VarDecl 0x5590ecf3c190 <col:9, ./llimits.h:63:27> lvm.c:546:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf41080 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf41050 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf3c7c8 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf3c7a0 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf3c690 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf3c670 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf3c650 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf3c628 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf3c608 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf3c598 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf3c3d0 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf3c3a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf3c390 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf3c370 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf3c348 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf3c578 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf3c550 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf3c510 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf3c4f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf3c530 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf3c780 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf3c758 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf3c6b0 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf3c738 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf3c710 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf3c6d0 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf3c6f0 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf40b20 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf40b08 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf3c7e8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf40ae8 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf40ac0 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf40988 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf40968 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf40900 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf408e0 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf408b8 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf40898 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf40aa0 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf40a80 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf40a58 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf409b0 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf40a38 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf40a10 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf41028 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf41010 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf40b48 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf40ff0 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf40fd0 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf40fa8 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf40f88 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf40f18 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf40d50 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf40d28 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf40d10 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf40cf0 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf40cc8 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf40ef8 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf40ed0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf40e90 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf40e70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf40eb0 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf41260 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B128.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf41170 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf41190 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf411b0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
[B128.5] + [B128.6]
   8: IntegerLiteral 0x5590ecf411f8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf41218 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
([B128.7]) + [B128.8]
  10: BinaryOperator 0x5590ecf41278 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf41260 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf41240 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf41218 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
[B128.4] >> ([B128.9])
  11: IntegerLiteral 0x5590ecf412c0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf412f0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
(Instruction)[B128.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf41318 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
~[B128.12]
  14: IntegerLiteral 0x5590ecf41358 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf41378 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
([B128.13]) << [B128.14]
  16: UnaryOperator 0x5590ecf413c0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
~([B128.15])
  17: IntegerLiteral 0x5590ecf41400 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf41420 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf413e0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf413c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf41400 <line:92:60> 'int' 0
([B128.16]) << [B128.17]
  19: BinaryOperator 0x5590ecf41468 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf412a0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf41278 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf41260 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf41240 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf41218 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf41448 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf41420 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf413e0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf413c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf41400 <line:92:60> 'int' 0
([B128.10]) & ([B128.18])
  20: CStyleCastExpr 0x5590ecf414f8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf414d8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf41468 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf412a0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf41278 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf41260 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf41240 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf41218 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf41448 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf41420 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf413e0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf413c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf41400 <line:92:60> 'int' 0
(int)([B128.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf41580 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf415a0 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf415c0 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf415e0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf415a0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf415c0 <line:119:32> 'int' 1
[B128.22] - [B128.23]
  25: BinaryOperator 0x5590ecf41628 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf41580 <col:17> 'int' 1
`-ParenExpr 0x5590ecf41608 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf415e0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf415a0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf415c0 <line:119:32> 'int' 1
[B128.21] << ([B128.24])
  26: BinaryOperator 0x5590ecf41670 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf41560 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf41540 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf41520 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf414f8 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf414d8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf41468 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf412a0 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf41278 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf41260 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf41150 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf41128 <lvm.c:547:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf41240 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf41218 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf411d8 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf411b0 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf41170 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf41190 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf411f8 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf41448 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf41420 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf413e0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf413c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf413a0 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf41378 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf41338 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf41318 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf412f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf412c0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf41358 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf41400 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf41650 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf41628 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf41580 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf41608 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf415e0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf415a0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf415c0 <line:119:32> 'int' 1
((([B128.20]))) & ([B128.25])
   T: ([B128.26]) ? ... : ...
   Preds (2): B129 B130
   Succs (2): B126 B127

 [B129]
   1: DeclRefExpr 0x5590ecf3c7e8 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf40b08 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3c7e8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B129.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf40620 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B129.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf3c858 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf3c878 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf3c898 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
[B129.5] + [B129.6]
   8: IntegerLiteral 0x5590ecf40550 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf40570 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
([B129.7]) + [B129.8]
  10: IntegerLiteral 0x5590ecf405b8 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf405d8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
([B129.9]) + [B129.10]
  12: BinaryOperator 0x5590ecf40638 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
[B129.4] >> ([B129.11])
  13: IntegerLiteral 0x5590ecf40680 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf406b0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
(Instruction)[B129.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf406d8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
~[B129.14]
  16: IntegerLiteral 0x5590ecf40718 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf40738 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
([B129.15]) << [B129.16]
  18: UnaryOperator 0x5590ecf40780 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
~([B129.17])
  19: IntegerLiteral 0x5590ecf407c0 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf407e0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
([B129.18]) << [B129.19]
  21: BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
([B129.12]) & ([B129.20])
  22: CStyleCastExpr 0x5590ecf408b8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf40898 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
(int)([B129.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf40988 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf40968 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf40900 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf408e0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf408b8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf40898 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
(int)((([B129.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf409b0 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf409d0 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf409f0 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf40a10 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
[B129.25] - [B129.26]
  28: BinaryOperator 0x5590ecf40a58 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf409b0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf40a38 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf40a10 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
[B129.24] << ([B129.27])
  29: UnaryOperator 0x5590ecf40aa0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf40a80 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf40a58 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf409b0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf40a38 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf40a10 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
~([B129.28])
  30: BinaryOperator 0x5590ecf40ac0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf40988 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf40968 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf40900 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf408e0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf408b8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf40898 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf40aa0 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf40a80 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf40a58 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf409b0 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf40a38 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf40a10 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
[B129.23] & [B129.29]
  31: BinaryOperator 0x5590ecf40b20 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf40b08 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf3c7e8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf40ae8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf40ac0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf40988 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf40968 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf40900 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf408e0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf408b8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf40898 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf40828 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf40660 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf40638 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf40620 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf3c838 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf3c810 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf40600 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf405d8 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf40598 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf40570 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf3c8c0 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf3c898 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf3c858 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf3c878 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf40550 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf405b8 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf40808 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf407e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf407a0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf40780 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf40760 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf40738 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf406f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf406d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf406b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf40680 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf40718 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf407c0 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf40aa0 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf40a80 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf40a58 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf409b0 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf40a38 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf40a10 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf409d0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf409f0 <line:119:32> 'int' 1
[B129.2] + ([B129.30])
   Preds (1): B131
   Succs (1): B128

 [B130]
   1: DeclRefExpr 0x5590ecf40b48 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf41010 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf40b48 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B130.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf40d10 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B130.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf40bb8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf40bd8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf40bf8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
[B130.5] + [B130.6]
   8: IntegerLiteral 0x5590ecf40c40 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf40c60 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
([B130.7]) + [B130.8]
  10: IntegerLiteral 0x5590ecf40ca8 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf40cc8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
([B130.9]) + [B130.10]
  12: BinaryOperator 0x5590ecf40d28 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf40d10 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf40cf0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf40cc8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
[B130.4] >> ([B130.11])
  13: IntegerLiteral 0x5590ecf40d70 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf40da0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
(Instruction)[B130.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf40dc8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
~[B130.14]
  16: IntegerLiteral 0x5590ecf40e08 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf40e28 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
([B130.15]) << [B130.16]
  18: UnaryOperator 0x5590ecf40e70 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
~([B130.17])
  19: IntegerLiteral 0x5590ecf40eb0 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf40ed0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf40e90 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf40e70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf40eb0 <line:88:60> 'int' 0
([B130.18]) << [B130.19]
  21: BinaryOperator 0x5590ecf40f18 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf40d50 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf40d28 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf40d10 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf40cf0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf40cc8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf40ef8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf40ed0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf40e90 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf40e70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf40eb0 <line:88:60> 'int' 0
([B130.12]) & ([B130.20])
  22: CStyleCastExpr 0x5590ecf40fa8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf40f88 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf40f18 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf40d50 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf40d28 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf40d10 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf40cf0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf40cc8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf40ef8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf40ed0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf40e90 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf40e70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf40eb0 <line:88:60> 'int' 0
(int)([B130.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf41028 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf41010 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf40b48 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf40ff0 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf40fd0 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf40fa8 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf40f88 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf40f18 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf40d50 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf40d28 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf40d10 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf40b98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf40b70 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf40cf0 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf40cc8 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf40c88 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf40c60 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf40c20 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf40bf8 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf40bb8 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf40bd8 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf40c40 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf40ca8 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf40ef8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf40ed0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf40e90 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf40e70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf40e50 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf40e28 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf40de8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf40dc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf40da0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf40d70 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf40e08 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf40eb0 <line:88:60> 'int' 0
[B130.2] + (([B130.22]))
   Preds (1): B131
   Succs (1): B128

 [B131]
  case OP_EQ:
   1: DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf3c390 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B131.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf3c238 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf3c258 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf3c278 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
[B131.3] + [B131.4]
   6: IntegerLiteral 0x5590ecf3c2c0 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf3c2e0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
([B131.5]) + [B131.6]
   8: IntegerLiteral 0x5590ecf3c328 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf3c348 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
([B131.7]) + [B131.8]
  10: BinaryOperator 0x5590ecf3c3a8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf3c390 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf3c370 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf3c348 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
[B131.2] >> ([B131.9])
  11: IntegerLiteral 0x5590ecf3c3f0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf3c420 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
(Instruction)[B131.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf3c448 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
~[B131.12]
  14: IntegerLiteral 0x5590ecf3c488 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf3c4a8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
([B131.13]) << [B131.14]
  16: UnaryOperator 0x5590ecf3c4f0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
~([B131.15])
  17: IntegerLiteral 0x5590ecf3c530 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf3c550 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf3c510 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf3c4f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf3c530 <line:88:60> 'int' 0
([B131.16]) << [B131.17]
  19: BinaryOperator 0x5590ecf3c598 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf3c3d0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf3c3a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf3c390 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf3c370 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf3c348 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf3c578 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf3c550 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf3c510 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf3c4f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf3c530 <line:88:60> 'int' 0
([B131.10]) & ([B131.18])
  20: CStyleCastExpr 0x5590ecf3c628 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf3c608 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf3c598 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf3c3d0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf3c3a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf3c390 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf3c370 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf3c348 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf3c578 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf3c550 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf3c510 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf3c4f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf3c530 <line:88:60> 'int' 0
(int)([B131.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf3c6b0 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf3c6d0 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf3c6f0 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf3c710 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf3c6d0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf3c6f0 <line:119:32> 'int' 1
[B131.22] - [B131.23]
  25: BinaryOperator 0x5590ecf3c758 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf3c6b0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf3c738 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf3c710 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf3c6d0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf3c6f0 <line:119:32> 'int' 1
[B131.21] << ([B131.24])
  26: BinaryOperator 0x5590ecf3c7a0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf3c690 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf3c670 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf3c650 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf3c628 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf3c608 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf3c598 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf3c3d0 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf3c3a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf3c390 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf3c218 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf3c1f0 <lvm.c:546:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf3c370 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf3c348 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf3c308 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf3c2e0 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf3c2a0 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf3c278 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf3c238 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf3c258 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf3c2c0 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf3c328 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf3c578 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf3c550 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf3c510 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf3c4f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf3c4d0 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf3c4a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf3c468 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf3c448 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf3c420 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf3c3f0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf3c488 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf3c530 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf3c780 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf3c758 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf3c6b0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf3c738 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf3c710 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf3c6d0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf3c6f0 <line:119:32> 'int' 1
((([B131.20]))) & ([B131.25])
   T: ([B131.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B129 B130

 [B132]
  case OP_JMP:
   1: DeclRefExpr 0x5590ecf3b850 <lvm.c:542:19> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   3: ImplicitCastExpr 0x5590ecf3b9d0 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf3b8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B132.2]) (ImplicitCastExpr, LValueToRValue, Instruction)
   4: IntegerLiteral 0x5590ecf3b8e0 <./lopcodes.h:44:17> 'int' 0
0
   5: IntegerLiteral 0x5590ecf3b900 <./lopcodes.h:42:18> 'int' 6
6
   6: BinaryOperator 0x5590ecf3b920 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
[B132.4] + [B132.5]
   7: IntegerLiteral 0x5590ecf3b968 <./lopcodes.h:40:17> 'int' 8
8
   8: BinaryOperator 0x5590ecf3b988 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf3b948 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf3b920 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf3b968 <line:40:17> 'int' 8
([B132.6]) + [B132.7]
   9: BinaryOperator 0x5590ecf3b9e8 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf3b9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf3b8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf3b9b0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf3b988 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf3b948 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf3b920 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf3b968 <line:40:17> 'int' 8
[B132.3] >> ([B132.8])
  10: IntegerLiteral 0x5590ecf3ba30 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf3ba60 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
(Instruction)[B132.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf3ba88 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
~[B132.11]
  13: IntegerLiteral 0x5590ecf3bac8 <./lopcodes.h:37:17> 'int' 9
9
  14: IntegerLiteral 0x5590ecf3bae8 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf3bb08 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
[B132.13] + [B132.14]
  16: BinaryOperator 0x5590ecf3bb50 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
`-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
([B132.12]) << ([B132.15])
  17: UnaryOperator 0x5590ecf3bb98 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf3bb78 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf3bb50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
~([B132.16])
  18: IntegerLiteral 0x5590ecf3bbd8 <./lopcodes.h:96:63> 'int' 0
0
  19: BinaryOperator 0x5590ecf3bbf8 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf3bbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf3bb98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf3bb78 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf3bb50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf3bbd8 <line:96:63> 'int' 0
([B132.17]) << [B132.18]
  20: BinaryOperator 0x5590ecf3bc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf3ba10 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf3b9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf3b9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf3b8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf3b9b0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf3b988 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf3b948 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf3b920 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf3b968 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf3bc20 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf3bbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf3bbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf3bb98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf3bb78 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf3bb50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf3bbd8 <line:96:63> 'int' 0
([B132.9]) & ([B132.19])
  21: CStyleCastExpr 0x5590ecf3bcd0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf3bcb0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf3bc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf3ba10 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf3b9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf3b9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf3b8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf3b9b0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf3b988 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf3b948 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf3b920 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf3b968 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf3bc20 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf3bbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf3bbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf3bb98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf3bb78 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf3bb50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf3bbd8 <line:96:63> 'int' 0
(int)([B132.20]) (CStyleCastExpr, IntegralCast, int)
  22: IntegerLiteral 0x5590ecf3bd38 <./lopcodes.h:57:28> 'int' 1
1
  23: IntegerLiteral 0x5590ecf3bd58 <./lopcodes.h:37:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf3bd78 <./lopcodes.h:38:17> 'int' 9
9
  25: BinaryOperator 0x5590ecf3bd98 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf3bd58 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf3bd78 <line:38:17> 'int' 9
[B132.23] + [B132.24]
  26: BinaryOperator 0x5590ecf3bde0 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5590ecf3bd38 <line:57:28> 'int' 1
`-ParenExpr 0x5590ecf3bdc0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf3bd98 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf3bd58 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf3bd78 <line:38:17> 'int' 9
[B132.22] << ([B132.25])
  27: IntegerLiteral 0x5590ecf3be28 <./lopcodes.h:57:40> 'int' 1
1
  28: BinaryOperator 0x5590ecf3be48 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5590ecf3be08 <col:27, col:38> 'int'
| `-BinaryOperator 0x5590ecf3bde0 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf3bd38 <line:57:28> 'int' 1
|   `-ParenExpr 0x5590ecf3bdc0 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5590ecf3bd98 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5590ecf3bd58 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5590ecf3bd78 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf3be28 <line:57:40> 'int' 1
([B132.26]) - [B132.27]
  29: IntegerLiteral 0x5590ecf3be90 <./lopcodes.h:58:39> 'int' 1
1
  30: BinaryOperator 0x5590ecf3beb0 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5590ecf3be70 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5590ecf3be48 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5590ecf3be08 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5590ecf3bde0 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5590ecf3bd38 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5590ecf3bdc0 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf3bd98 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5590ecf3bd58 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5590ecf3bd78 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5590ecf3be28 <line:57:40> 'int' 1
`-IntegerLiteral 0x5590ecf3be90 <line:58:39> 'int' 1
([B132.28]) >> [B132.29]
  31: BinaryOperator 0x5590ecf3bef8 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5590ecf3bd18 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5590ecf3bcf8 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5590ecf3bcd0 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5590ecf3bcb0 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5590ecf3bc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5590ecf3ba10 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5590ecf3b9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5590ecf3b9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5590ecf3b8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|         |   `-ParenExpr 0x5590ecf3b9b0 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5590ecf3b988 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5590ecf3b948 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5590ecf3b920 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5590ecf3b968 <line:40:17> 'int' 8
|         `-ParenExpr 0x5590ecf3bc20 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5590ecf3bbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5590ecf3bbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5590ecf3bb98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5590ecf3bb78 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5590ecf3bb50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
|             |       `-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5590ecf3bbd8 <line:96:63> 'int' 0
`-ParenExpr 0x5590ecf3bed8 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5590ecf3beb0 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5590ecf3be70 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5590ecf3be48 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5590ecf3be08 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5590ecf3bde0 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5590ecf3bd38 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5590ecf3bdc0 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5590ecf3bd98 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5590ecf3bd58 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5590ecf3bd78 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5590ecf3be28 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5590ecf3be90 <line:58:39> 'int' 1
(([B132.21])) - ([B132.30])
  32: CompoundAssignOperator 0x5590ecf3bf60 <lvm.c:358:25, col:35> 'const Instruction *' '+=' ComputeLHSTy='const Instruction *' ComputeResultTy='const Instruction *'
|-ParenExpr 0x5590ecf3b878 <col:25, col:28> 'const Instruction *' lvalue
| `-DeclRefExpr 0x5590ecf3b850 <line:542:19> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ParenExpr 0x5590ecf3bf40 <line:358:33, col:35> 'int'
  `-ParenExpr 0x5590ecf3bf20 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5590ecf3bef8 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5590ecf3bd18 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5590ecf3bcf8 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5590ecf3bcd0 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5590ecf3bcb0 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5590ecf3bc40 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5590ecf3ba10 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5590ecf3b9e8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5590ecf3b9d0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5590ecf3b8c0 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
      |         |   |   `-DeclRefExpr 0x5590ecf3b898 <lvm.c:542:34> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |         |   `-ParenExpr 0x5590ecf3b9b0 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5590ecf3b988 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5590ecf3b948 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5590ecf3b920 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5590ecf3b8e0 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5590ecf3b900 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5590ecf3b968 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5590ecf3bc20 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5590ecf3bbf8 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5590ecf3bbb8 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5590ecf3bb98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5590ecf3bb78 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5590ecf3bb50 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5590ecf3baa8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5590ecf3ba88 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5590ecf3ba60 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5590ecf3ba30 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5590ecf3bb30 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5590ecf3bb08 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5590ecf3bac8 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5590ecf3bae8 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5590ecf3bbd8 <line:96:63> 'int' 0
      `-ParenExpr 0x5590ecf3bed8 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5590ecf3beb0 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5590ecf3be70 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5590ecf3be48 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5590ecf3be08 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5590ecf3bde0 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5590ecf3bd38 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5590ecf3bdc0 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5590ecf3bd98 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5590ecf3bd58 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5590ecf3bd78 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5590ecf3be28 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5590ecf3be90 <line:58:39> 'int' 1
([B132.1]) += (([B132.31]))
  33: IntegerLiteral 0x5590ecf3bf98 <./llimits.h:111:33> 'int' 0
0
  34: CStyleCastExpr 0x5590ecf3bfc8 <./llimits.h:111:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf3bf98 <col:33> 'int' 0
(void)[B132.33] (CStyleCastExpr, ToVoid, void)
  35: IntegerLiteral 0x5590ecf3c010 <./llimits.h:110:33> 'int' 0
0
  36: CStyleCastExpr 0x5590ecf3c040 <./llimits.h:110:26, col:33> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf3c010 <col:33> 'int' 0
(void)[B132.35] (CStyleCastExpr, ToVoid, void)
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B133]
   1: DeclRefExpr 0x5590ecf3ad20 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf3ad48 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3ad20 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B133.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf3ad60 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf3ad48 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3ad20 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B133.2]->base
   4: ImplicitCastExpr 0x5590ecf3ad98 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf3ad60 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf3ad48 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf3ad20 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B133.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf3acf8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf3adb0 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf3acf8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf3ad98 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf3ad60 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf3ad48 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf3ad20 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B133.5] = [B133.4]
   7: DeclRefExpr 0x5590ecf3ae88 <lvm.c:538:29> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   8: ImplicitCastExpr 0x5590ecf3aed8 <lvm.c:538:29> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3ae88 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B133.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclRefExpr 0x5590ecf3aeb0 <lvm.c:538:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
b
  10: ImplicitCastExpr 0x5590ecf3aef0 <lvm.c:538:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3aeb0 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
[B133.9] (ImplicitCastExpr, LValueToRValue, int)
  11: BinaryOperator 0x5590ecf3af08 <lvm.c:538:29, col:34> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf3aed8 <col:29> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf3ae88 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf3aef0 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3aeb0 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
[B133.8] + [B133.10]
  12: ImplicitCastExpr 0x5590ecf3af50 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf3af30 <col:22, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf3af08 <lvm.c:538:29, col:34> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf3aed8 <col:29> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf3ae88 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    `-ImplicitCastExpr 0x5590ecf3aef0 <col:34> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf3aeb0 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
([B133.11]) (ImplicitCastExpr, BitCast, const TValue *)
  13: DeclStmt 0x5590ecf3af68 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf3ae28 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf3af50 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf3af30 <col:22, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf3af08 <lvm.c:538:29, col:34> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf3aed8 <col:29> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf3ae88 <col:29> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ImplicitCastExpr 0x5590ecf3aef0 <col:34> 'int' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf3aeb0 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
const TValue *o2 = (base + b);
  14: DeclRefExpr 0x5590ecf3aff0 <lvm.c:347:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  15: ImplicitCastExpr 0x5590ecf3b3e8 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3aff0 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B133.14] (ImplicitCastExpr, LValueToRValue, StkId)
  16: DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  17: ImplicitCastExpr 0x5590ecf3b0e8 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf3b040 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B133.16]) (ImplicitCastExpr, LValueToRValue, Instruction)
  18: IntegerLiteral 0x5590ecf3b060 <./lopcodes.h:44:17> 'int' 0
0
  19: IntegerLiteral 0x5590ecf3b080 <./lopcodes.h:42:18> 'int' 6
6
  20: BinaryOperator 0x5590ecf3b0a0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf3b060 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf3b080 <line:42:18> 'int' 6
[B133.18] + [B133.19]
  21: BinaryOperator 0x5590ecf3b100 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf3b0e8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf3b040 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf3b0c8 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5590ecf3b0a0 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5590ecf3b060 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5590ecf3b080 <line:42:18> 'int' 6
[B133.17] >> ([B133.20])
  22: IntegerLiteral 0x5590ecf3b148 <./lopcodes.h:71:39> 'int' 0
0
  23: CStyleCastExpr 0x5590ecf3b178 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
(Instruction)[B133.22] (CStyleCastExpr, IntegralCast, Instruction)
  24: UnaryOperator 0x5590ecf3b1a0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
~[B133.23]
  25: IntegerLiteral 0x5590ecf3b1e0 <./lopcodes.h:40:17> 'int' 8
8
  26: BinaryOperator 0x5590ecf3b200 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
([B133.24]) << [B133.25]
  27: UnaryOperator 0x5590ecf3b248 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf3b228 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf3b200 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
~([B133.26])
  28: IntegerLiteral 0x5590ecf3b288 <./lopcodes.h:84:60> 'int' 0
0
  29: BinaryOperator 0x5590ecf3b2a8 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf3b268 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf3b248 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf3b228 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf3b200 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf3b288 <line:84:60> 'int' 0
([B133.27]) << [B133.28]
  30: BinaryOperator 0x5590ecf3b2f0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf3b128 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf3b100 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf3b0e8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf3b040 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf3b0c8 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5590ecf3b0a0 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5590ecf3b060 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5590ecf3b080 <line:42:18> 'int' 6
`-ParenExpr 0x5590ecf3b2d0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf3b2a8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf3b268 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf3b248 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf3b228 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf3b200 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf3b288 <line:84:60> 'int' 0
([B133.21]) & ([B133.29])
  31: CStyleCastExpr 0x5590ecf3b380 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf3b360 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf3b2f0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf3b128 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf3b100 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf3b0e8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf3b040 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf3b0c8 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5590ecf3b0a0 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5590ecf3b060 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5590ecf3b080 <line:42:18> 'int' 6
    `-ParenExpr 0x5590ecf3b2d0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf3b2a8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf3b268 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf3b248 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf3b228 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf3b200 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5590ecf3b288 <line:84:60> 'int' 0
(int)([B133.30]) (CStyleCastExpr, IntegralCast, int)
  32: BinaryOperator 0x5590ecf3b400 <lvm.c:347:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf3b3e8 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf3aff0 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf3b3c8 <./lopcodes.h:84:21, col:63> 'int'
  `-ParenExpr 0x5590ecf3b3a8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf3b380 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf3b360 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf3b2f0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf3b128 <line:84:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf3b100 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf3b0e8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf3b040 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf3b0c8 <./lopcodes.h:45:16, col:33> 'int'
          |     `-BinaryOperator 0x5590ecf3b0a0 <line:44:17, line:42:18> 'int' '+'
          |       |-IntegerLiteral 0x5590ecf3b060 <line:44:17> 'int' 0
          |       `-IntegerLiteral 0x5590ecf3b080 <line:42:18> 'int' 6
          `-ParenExpr 0x5590ecf3b2d0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf3b2a8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf3b268 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf3b248 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf3b228 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf3b200 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
              `-IntegerLiteral 0x5590ecf3b288 <line:84:60> 'int' 0
[B133.15] + (([B133.31]))
  33: DeclStmt 0x5590ecf3b468 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf3af90 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf3b448 <col:41, col:46> 'StkId':'TValue *'
    `-ParenExpr 0x5590ecf3b428 <lvm.c:347:15, col:32> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf3b400 <col:16, ./lopcodes.h:84:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf3b3e8 <lvm.c:347:16> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf3aff0 <col:16> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf3b3c8 <./lopcodes.h:84:21, col:63> 'int'
          `-ParenExpr 0x5590ecf3b3a8 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf3b380 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf3b360 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf3b2f0 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf3b128 <line:84:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf3b100 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf3b0e8 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf3b040 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf3b018 <lvm.c:538:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf3b0c8 <./lopcodes.h:45:16, col:33> 'int'
                  |     `-BinaryOperator 0x5590ecf3b0a0 <line:44:17, line:42:18> 'int' '+'
                  |       |-IntegerLiteral 0x5590ecf3b060 <line:44:17> 'int' 0
                  |       `-IntegerLiteral 0x5590ecf3b080 <line:42:18> 'int' 6
                  `-ParenExpr 0x5590ecf3b2d0 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf3b2a8 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf3b268 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf3b248 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf3b228 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf3b200 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf3b1c0 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf3b1a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf3b178 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf3b148 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf3b1e0 <line:40:17> 'int' 8
                      `-IntegerLiteral 0x5590ecf3b288 <line:84:60> 'int' 0
TValue *o1 = ((base + (((int)(((i) >> (0 + 6)) & ((~((~(Instruction)0) << 8)) << 0))))));
  34: DeclRefExpr 0x5590ecf3b4f8 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
o2
  35: ImplicitCastExpr 0x5590ecf3b520 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3b4f8 <col:17> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.34] (ImplicitCastExpr, LValueToRValue, const TValue *)
  36: MemberExpr 0x5590ecf3b538 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf3b520 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3b4f8 <col:17> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.35]->value
  37: ImplicitCastExpr 0x5590ecf3b570 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf3b538 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf3b520 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf3b4f8 <col:17> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.36] (ImplicitCastExpr, LValueToRValue, Value)
  38: DeclRefExpr 0x5590ecf3b480 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
o1
  39: ImplicitCastExpr 0x5590ecf3b4a8 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3b480 <col:5> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
[B133.38] (ImplicitCastExpr, LValueToRValue, TValue *)
  40: MemberExpr 0x5590ecf3b4c0 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf3b4a8 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3b480 <col:5> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
[B133.39]->value
  41: BinaryOperator 0x5590ecf3b588 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf3b4c0 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf3b4a8 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf3b480 <col:5> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf3b570 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf3b538 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf3b520 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf3b4f8 <col:17> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.40] = [B133.37]
  42: DeclRefExpr 0x5590ecf3b628 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
o2
  43: ImplicitCastExpr 0x5590ecf3b650 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3b628 <col:35> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.42] (ImplicitCastExpr, LValueToRValue, const TValue *)
  44: MemberExpr 0x5590ecf3b668 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf3b650 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3b628 <col:35> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.43]->tt
  45: ImplicitCastExpr 0x5590ecf3b6a0 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf3b668 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf3b650 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf3b628 <col:35> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.44] (ImplicitCastExpr, LValueToRValue, int)
  46: DeclRefExpr 0x5590ecf3b5b0 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
o1
  47: ImplicitCastExpr 0x5590ecf3b5d8 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3b5b0 <col:28> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
[B133.46] (ImplicitCastExpr, LValueToRValue, TValue *)
  48: MemberExpr 0x5590ecf3b5f0 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf3b5d8 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3b5b0 <col:28> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
[B133.47]->tt
  49: BinaryOperator 0x5590ecf3b6b8 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf3b5f0 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf3b5d8 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf3b5b0 <col:28> 'TValue *' lvalue Var 0x5590ecf3af90 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf3b6a0 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf3b668 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf3b650 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf3b628 <col:35> 'const TValue *' lvalue Var 0x5590ecf3ae28 'o2' 'const TValue *'
[B133.48] = [B133.45]
  50: IntegerLiteral 0x5590ecf3b6e0 <./llimits.h:62:31> 'int' 0
0
  51: CStyleCastExpr 0x5590ecf3b710 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf3b6e0 <col:31> 'int' 0
(void)[B133.50] (CStyleCastExpr, ToVoid, void)
   T: continue;
   Preds (2): B134 B135
   Succs (1): B1

 [B134]
   1: DeclRefExpr 0x5590ecf3aba8 <./lgc.h:83:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
luaC_step
   2: ImplicitCastExpr 0x5590ecf3abf8 <./lgc.h:83:2> 'void (*)(lua_State *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf3aba8 <col:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
[B134.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *))
   3: DeclRefExpr 0x5590ecf3abd0 <lvm.c:537:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf3ac40 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3abd0 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B134.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: CallExpr 0x5590ecf3ac10 <./lgc.h:83:2, col:13> 'void'
|-ImplicitCastExpr 0x5590ecf3abf8 <col:2> 'void (*)(lua_State *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf3aba8 <col:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
`-ImplicitCastExpr 0x5590ecf3ac40 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3abd0 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B134.2]([B134.4])
   Preds (1): B135
   Succs (1): B133

 [B135]
  case OP_CONCAT:
   1: DeclRefExpr 0x5590ecf38eb8 <lvm.c:535:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf39058 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf38ee0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf38eb8 <lvm.c:535:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B135.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf38f00 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf38f20 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf38f40 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
[B135.3] + [B135.4]
   6: IntegerLiteral 0x5590ecf38f88 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf38fa8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf38f68 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf38f40 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf38f88 <line:40:17> 'int' 8
([B135.5]) + [B135.6]
   8: IntegerLiteral 0x5590ecf38ff0 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf39010 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf38fd0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf38fa8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf38f68 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf38f40 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf38f88 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf38ff0 <line:37:17> 'int' 9
([B135.7]) + [B135.8]
  10: BinaryOperator 0x5590ecf39070 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf39058 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf38ee0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf38eb8 <lvm.c:535:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf39038 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf39010 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf38fd0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf38fa8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf38f68 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf38f40 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf38f88 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf38ff0 <line:37:17> 'int' 9
[B135.2] >> ([B135.9])
  11: IntegerLiteral 0x5590ecf390b8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf390e8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
(Instruction)[B135.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf39110 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
~[B135.12]
  14: IntegerLiteral 0x5590ecf39150 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf39170 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf39130 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf39110 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf39150 <line:38:17> 'int' 9
([B135.13]) << [B135.14]
  16: UnaryOperator 0x5590ecf391b8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf39198 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf39170 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf39130 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf39110 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf39150 <line:38:17> 'int' 9
~([B135.15])
  17: IntegerLiteral 0x5590ecf391f8 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf39218 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf391d8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf391b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf39198 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf39170 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf39130 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf39110 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf39150 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf391f8 <line:88:60> 'int' 0
([B135.16]) << [B135.17]
  19: BinaryOperator 0x5590ecf39260 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf39098 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf39070 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf39058 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf38ee0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf38eb8 <lvm.c:535:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf39038 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf39010 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf38fd0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf38fa8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf38f68 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf38f40 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf38f88 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf38ff0 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf39240 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf39218 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf391d8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf391b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf39198 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf39170 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf39130 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf39110 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf39150 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf391f8 <line:88:60> 'int' 0
([B135.10]) & ([B135.18])
  20: CStyleCastExpr 0x5590ecf392f0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf392d0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf39260 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf39098 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf39070 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf39058 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf38ee0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf38eb8 <lvm.c:535:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf39038 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf39010 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf38fd0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf38fa8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf38f68 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf38f40 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf38f88 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf38ff0 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf39240 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf39218 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf391d8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf391b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf39198 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf39170 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf39130 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf39110 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf39150 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf391f8 <line:88:60> 'int' 0
(int)([B135.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf39358 <lvm.c:535:9, col:28>col:13
`-VarDecl 0x5590ecf38e58 <col:9, ./lopcodes.h:88:63> lvm.c:535:13 used b 'int' cinit
  `-ParenExpr 0x5590ecf39338 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf39318 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf392f0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf392d0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf39260 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf39098 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf39070 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf39058 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf38ee0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf38eb8 <lvm.c:535:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf39038 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf39010 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf38fd0 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf38fa8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf38f68 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf38f40 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf38f00 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf38f20 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf38f88 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf38ff0 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf39240 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf39218 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf391d8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf391b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf39198 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf39170 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf39130 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf39110 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf390e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf390b8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf39150 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf391f8 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf393e8 <lvm.c:536:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  23: ImplicitCastExpr 0x5590ecf39520 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf39410 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf393e8 <lvm.c:536:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B135.22]) (ImplicitCastExpr, LValueToRValue, Instruction)
  24: IntegerLiteral 0x5590ecf39430 <./lopcodes.h:44:17> 'int' 0
0
  25: IntegerLiteral 0x5590ecf39450 <./lopcodes.h:42:18> 'int' 6
6
  26: BinaryOperator 0x5590ecf39470 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf39430 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf39450 <line:42:18> 'int' 6
[B135.24] + [B135.25]
  27: IntegerLiteral 0x5590ecf394b8 <./lopcodes.h:40:17> 'int' 8
8
  28: BinaryOperator 0x5590ecf394d8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf39498 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf39470 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf39430 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf39450 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf394b8 <line:40:17> 'int' 8
([B135.26]) + [B135.27]
  29: BinaryOperator 0x5590ecf39538 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf39520 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf39410 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf393e8 <lvm.c:536:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf39500 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf394d8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf39498 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf39470 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf39430 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf39450 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf394b8 <line:40:17> 'int' 8
[B135.23] >> ([B135.28])
  30: IntegerLiteral 0x5590ecf39580 <./lopcodes.h:71:39> 'int' 0
0
  31: CStyleCastExpr 0x5590ecf395b0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
(Instruction)[B135.30] (CStyleCastExpr, IntegralCast, Instruction)
  32: UnaryOperator 0x5590ecf395d8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
~[B135.31]
  33: IntegerLiteral 0x5590ecf39618 <./lopcodes.h:37:17> 'int' 9
9
  34: BinaryOperator 0x5590ecf39638 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf395f8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf395d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf39618 <line:37:17> 'int' 9
([B135.32]) << [B135.33]
  35: UnaryOperator 0x5590ecf39680 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf39660 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf39638 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf395f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf395d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf39618 <line:37:17> 'int' 9
~([B135.34])
  36: IntegerLiteral 0x5590ecf396c0 <./lopcodes.h:92:60> 'int' 0
0
  37: BinaryOperator 0x5590ecf396e0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf396a0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf39680 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf39660 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf39638 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf395f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf395d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf39618 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf396c0 <line:92:60> 'int' 0
([B135.35]) << [B135.36]
  38: BinaryOperator 0x5590ecf39728 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf39560 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf39538 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf39520 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf39410 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf393e8 <lvm.c:536:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf39500 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf394d8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf39498 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf39470 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf39430 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf39450 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf394b8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf39708 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf396e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf396a0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf39680 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf39660 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf39638 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf395f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf395d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf39618 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf396c0 <line:92:60> 'int' 0
([B135.29]) & ([B135.37])
  39: CStyleCastExpr 0x5590ecf397b8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf39798 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf39728 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf39560 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf39538 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf39520 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf39410 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf393e8 <lvm.c:536:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf39500 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf394d8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf39498 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf39470 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf39430 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf39450 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf394b8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf39708 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf396e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf396a0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf39680 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf39660 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf39638 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf395f8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf395d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf39618 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf396c0 <line:92:60> 'int' 0
(int)([B135.38]) (CStyleCastExpr, IntegralCast, int)
  40: DeclStmt 0x5590ecf39820 <lvm.c:536:9, col:28>col:13
`-VarDecl 0x5590ecf39388 <col:9, ./lopcodes.h:92:63> lvm.c:536:13 used c 'int' cinit
  `-ParenExpr 0x5590ecf39800 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf397e0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf397b8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf39798 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf39728 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf39560 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf39538 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf39520 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf39410 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf393e8 <lvm.c:536:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf39500 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf394d8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf39498 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf39470 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf39430 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf39450 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf394b8 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf39708 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf396e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf396a0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf39680 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf39660 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf39638 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf395f8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf395d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf395b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf39580 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf39618 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf396c0 <line:92:60> 'int' 0
int c = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))));
  41: DeclRefExpr 0x5590ecf398b0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  42: ImplicitCastExpr 0x5590ecf398d8 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf398b0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B135.41] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  43: DeclRefExpr 0x5590ecf39838 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  44: ImplicitCastExpr 0x5590ecf39860 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf39838 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.43] (ImplicitCastExpr, LValueToRValue, lua_State *)
  45: MemberExpr 0x5590ecf39878 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf39860 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf39838 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.44]->savedpc
  46: BinaryOperator 0x5590ecf398f0 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf39878 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf39860 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf39838 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf398d8 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf398b0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B135.45] = [B135.42]
  47: DeclRefExpr 0x5590ecf39918 <lvm.c:537:17> 'void (lua_State *, int, int)' Function 0x5590ecef1900 'luaV_concat' 'void (lua_State *, int, int)'
luaV_concat
  48: ImplicitCastExpr 0x5590ecf39a80 <lvm.c:537:17> 'void (*)(lua_State *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf39918 <col:17> 'void (lua_State *, int, int)' Function 0x5590ecef1900 'luaV_concat' 'void (lua_State *, int, int)'
[B135.47] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int, int))
  49: DeclRefExpr 0x5590ecf39940 <lvm.c:537:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  50: ImplicitCastExpr 0x5590ecf39ad8 <lvm.c:537:29> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf39940 <col:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.49] (ImplicitCastExpr, LValueToRValue, lua_State *)
  51: DeclRefExpr 0x5590ecf39968 <lvm.c:537:32> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
c
  52: ImplicitCastExpr 0x5590ecf399b8 <lvm.c:537:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf39968 <col:32> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
[B135.51] (ImplicitCastExpr, LValueToRValue, int)
  53: DeclRefExpr 0x5590ecf39990 <lvm.c:537:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
b
  54: ImplicitCastExpr 0x5590ecf399d0 <lvm.c:537:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf39990 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
[B135.53] (ImplicitCastExpr, LValueToRValue, int)
  55: BinaryOperator 0x5590ecf399e8 <lvm.c:537:32, col:34> 'int' '-'
|-ImplicitCastExpr 0x5590ecf399b8 <col:32> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf39968 <col:32> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
`-ImplicitCastExpr 0x5590ecf399d0 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf39990 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
[B135.52] - [B135.54]
  56: IntegerLiteral 0x5590ecf39a10 <lvm.c:537:36> 'int' 1
1
  57: BinaryOperator 0x5590ecf39a30 <lvm.c:537:32, col:36> 'int' '+'
|-BinaryOperator 0x5590ecf399e8 <col:32, col:34> 'int' '-'
| |-ImplicitCastExpr 0x5590ecf399b8 <col:32> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf39968 <col:32> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
| `-ImplicitCastExpr 0x5590ecf399d0 <col:34> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf39990 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
`-IntegerLiteral 0x5590ecf39a10 <col:36> 'int' 1
[B135.55] + [B135.56]
  58: DeclRefExpr 0x5590ecf39a58 <lvm.c:537:39> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
c
  59: ImplicitCastExpr 0x5590ecf3a8f0 <lvm.c:537:39> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf39a58 <col:39> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
[B135.58] (ImplicitCastExpr, LValueToRValue, int)
  60: CallExpr 0x5590ecf39a98 <lvm.c:537:17, col:40> 'void'
|-ImplicitCastExpr 0x5590ecf39a80 <col:17> 'void (*)(lua_State *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf39918 <col:17> 'void (lua_State *, int, int)' Function 0x5590ecef1900 'luaV_concat' 'void (lua_State *, int, int)'
|-ImplicitCastExpr 0x5590ecf39ad8 <col:29> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf39940 <col:29> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-BinaryOperator 0x5590ecf39a30 <col:32, col:36> 'int' '+'
| |-BinaryOperator 0x5590ecf399e8 <col:32, col:34> 'int' '-'
| | |-ImplicitCastExpr 0x5590ecf399b8 <col:32> 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x5590ecf39968 <col:32> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
| | `-ImplicitCastExpr 0x5590ecf399d0 <col:34> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5590ecf39990 <col:34> 'int' lvalue Var 0x5590ecf38e58 'b' 'int'
| `-IntegerLiteral 0x5590ecf39a10 <col:36> 'int' 1
`-ImplicitCastExpr 0x5590ecf3a8f0 <col:39> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf39a58 <col:39> 'int' lvalue Var 0x5590ecf39388 'c' 'int'
[B135.48]([B135.50], [B135.57], [B135.59])
  61: IntegerLiteral 0x5590ecf3a908 <./llimits.h:123:38> 'int' 0
0
  62: CStyleCastExpr 0x5590ecf3a938 <./llimits.h:123:32, col:38> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf3a908 <col:38> 'int' 0
(void)[B135.61] (CStyleCastExpr, ToVoid, void)
  63: DeclRefExpr 0x5590ecf3a980 <lvm.c:537:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  64: ImplicitCastExpr 0x5590ecf3a9a8 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3a980 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.63] (ImplicitCastExpr, LValueToRValue, lua_State *)
  65: MemberExpr 0x5590ecf3a9c0 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
`-ImplicitCastExpr 0x5590ecf3a9a8 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3a980 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.64]->l_G
  66: ImplicitCastExpr 0x5590ecf3aa18 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
`-ParenExpr 0x5590ecf3a9f8 <col:14, col:21> 'global_State *' lvalue
  `-MemberExpr 0x5590ecf3a9c0 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
    `-ImplicitCastExpr 0x5590ecf3a9a8 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf3a980 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B135.65]) (ImplicitCastExpr, LValueToRValue, global_State *)
  67: MemberExpr 0x5590ecf3aa30 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
`-ImplicitCastExpr 0x5590ecf3aa18 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
  `-ParenExpr 0x5590ecf3a9f8 <col:14, col:21> 'global_State *' lvalue
    `-MemberExpr 0x5590ecf3a9c0 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
      `-ImplicitCastExpr 0x5590ecf3a9a8 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf3a980 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.66]->totalbytes
  68: ImplicitCastExpr 0x5590ecf3ab50 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' <LValueToRValue>
`-MemberExpr 0x5590ecf3aa30 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
  `-ImplicitCastExpr 0x5590ecf3aa18 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
    `-ParenExpr 0x5590ecf3a9f8 <col:14, col:21> 'global_State *' lvalue
      `-MemberExpr 0x5590ecf3a9c0 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
        `-ImplicitCastExpr 0x5590ecf3a9a8 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf3a980 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.67] (ImplicitCastExpr, LValueToRValue, lu_mem)
  69: DeclRefExpr 0x5590ecf3aa68 <lvm.c:537:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  70: ImplicitCastExpr 0x5590ecf3aa90 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf3aa68 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.69] (ImplicitCastExpr, LValueToRValue, lua_State *)
  71: MemberExpr 0x5590ecf3aaa8 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
`-ImplicitCastExpr 0x5590ecf3aa90 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf3aa68 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.70]->l_G
  72: ImplicitCastExpr 0x5590ecf3ab00 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
`-ParenExpr 0x5590ecf3aae0 <col:14, col:21> 'global_State *' lvalue
  `-MemberExpr 0x5590ecf3aaa8 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
    `-ImplicitCastExpr 0x5590ecf3aa90 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf3aa68 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B135.71]) (ImplicitCastExpr, LValueToRValue, global_State *)
  73: MemberExpr 0x5590ecf3ab18 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
`-ImplicitCastExpr 0x5590ecf3ab00 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
  `-ParenExpr 0x5590ecf3aae0 <col:14, col:21> 'global_State *' lvalue
    `-MemberExpr 0x5590ecf3aaa8 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
      `-ImplicitCastExpr 0x5590ecf3aa90 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf3aa68 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.72]->GCthreshold
  74: ImplicitCastExpr 0x5590ecf3ab68 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' <LValueToRValue>
`-MemberExpr 0x5590ecf3ab18 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
  `-ImplicitCastExpr 0x5590ecf3ab00 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
    `-ParenExpr 0x5590ecf3aae0 <col:14, col:21> 'global_State *' lvalue
      `-MemberExpr 0x5590ecf3aaa8 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
        `-ImplicitCastExpr 0x5590ecf3aa90 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf3aa68 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.73] (ImplicitCastExpr, LValueToRValue, lu_mem)
  75: BinaryOperator 0x5590ecf3ab80 <./lstate.h:130:14, ./lgc.h:82:33> 'int' '>='
|-ImplicitCastExpr 0x5590ecf3ab50 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' <LValueToRValue>
| `-MemberExpr 0x5590ecf3aa30 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
|   `-ImplicitCastExpr 0x5590ecf3aa18 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
|     `-ParenExpr 0x5590ecf3a9f8 <col:14, col:21> 'global_State *' lvalue
|       `-MemberExpr 0x5590ecf3a9c0 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
|         `-ImplicitCastExpr 0x5590ecf3a9a8 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
|           `-DeclRefExpr 0x5590ecf3a980 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf3ab68 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' <LValueToRValue>
  `-MemberExpr 0x5590ecf3ab18 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
    `-ImplicitCastExpr 0x5590ecf3ab00 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
      `-ParenExpr 0x5590ecf3aae0 <col:14, col:21> 'global_State *' lvalue
        `-MemberExpr 0x5590ecf3aaa8 <lvm.c:537:56, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
          `-ImplicitCastExpr 0x5590ecf3aa90 <lvm.c:537:56> 'lua_State *' <LValueToRValue>
            `-DeclRefExpr 0x5590ecf3aa68 <col:56> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B135.68] >= [B135.74]
   T: if [B135.75]
   Preds (1): B2
   Succs (2): B134 B133

 [B136]
   T: continue;
   Preds (3): B138 B141 B142
   Succs (1): B1

 [B137]
  case OP_LEN:
   1: DeclRefExpr 0x5590ecf373e8 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf378b0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf373e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B137.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf375b0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B137.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf37458 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf37478 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf37498 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
[B137.5] + [B137.6]
   8: IntegerLiteral 0x5590ecf374e0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf37500 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
([B137.7]) + [B137.8]
  10: IntegerLiteral 0x5590ecf37548 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf37568 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
([B137.9]) + [B137.10]
  12: BinaryOperator 0x5590ecf375c8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf375b0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf37590 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf37568 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
[B137.4] >> ([B137.11])
  13: IntegerLiteral 0x5590ecf37610 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf37640 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
(Instruction)[B137.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf37668 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
~[B137.14]
  16: IntegerLiteral 0x5590ecf376a8 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf376c8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
([B137.15]) << [B137.16]
  18: UnaryOperator 0x5590ecf37710 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
~([B137.17])
  19: IntegerLiteral 0x5590ecf37750 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf37770 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf37730 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf37710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf37750 <line:88:60> 'int' 0
([B137.18]) << [B137.19]
  21: BinaryOperator 0x5590ecf377b8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf375f0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf375c8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf375b0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf37590 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf37568 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf37798 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf37770 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf37730 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf37710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf37750 <line:88:60> 'int' 0
([B137.12]) & ([B137.20])
  22: CStyleCastExpr 0x5590ecf37848 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf37828 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf377b8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf375f0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf375c8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf375b0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf37590 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf37568 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf37798 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf37770 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf37730 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf37710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf37750 <line:88:60> 'int' 0
(int)([B137.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf378c8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf378b0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf373e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf37890 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf37870 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf37848 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf37828 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf377b8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf375f0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf375c8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf375b0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf37590 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf37568 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf37798 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf37770 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf37730 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf37710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf37750 <line:88:60> 'int' 0
[B137.2] + (([B137.22]))
  24: ImplicitCastExpr 0x5590ecf37910 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf378f0 <col:25, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf378c8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf378b0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf373e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    `-ParenExpr 0x5590ecf37890 <./lopcodes.h:88:21, col:63> 'int'
      `-ParenExpr 0x5590ecf37870 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecf37848 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecf37828 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecf377b8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecf375f0 <line:88:32, col:43> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecf375c8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecf375b0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
              |   |   `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
              |   `-ParenExpr 0x5590ecf37590 <./lopcodes.h:47:16, col:31> 'int'
              |     `-BinaryOperator 0x5590ecf37568 <line:46:16, line:37:17> 'int' '+'
              |       |-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
              |       | `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
              |       |   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
              |       |   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
              |       |   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
              |       |   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
              |       |   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
              |       `-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
              `-ParenExpr 0x5590ecf37798 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecf37770 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecf37730 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecf37710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
                  `-IntegerLiteral 0x5590ecf37750 <line:88:60> 'int' 0
([B137.23]) (ImplicitCastExpr, BitCast, const TValue *)
  25: DeclStmt 0x5590ecf37928 <lvm.c:515:9, col:33>col:23
`-VarDecl 0x5590ecf37388 <col:9, ./llimits.h:63:27> lvm.c:515:23 used rb 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf37910 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf378f0 <col:25, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf378c8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf378b0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf373e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf37890 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf37870 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf37848 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf37828 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf377b8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf375f0 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf375c8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf375b0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf37438 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf37410 <lvm.c:515:31> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf37590 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf37568 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf37528 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf37500 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf374c0 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf37498 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf37458 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf37478 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf374e0 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf37548 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf37798 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf37770 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf37730 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf37710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf376f0 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf376c8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf37688 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf37668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf37640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf37610 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf376a8 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf37750 <line:88:60> 'int' 0
const TValue *rb = (base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
  26: DeclRefExpr 0x5590ecf37940 <lvm.c:516:23> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
rb
  27: ImplicitCastExpr 0x5590ecf37988 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf37968 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf37940 <lvm.c:516:23> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
([B137.26]) (ImplicitCastExpr, LValueToRValue, const TValue *)
  28: MemberExpr 0x5590ecf379a0 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf37988 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf37968 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf37940 <lvm.c:516:23> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B137.27]->tt
  29: ImplicitCastExpr 0x5590ecf379f8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf379d8 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5590ecf379a0 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf37988 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf37968 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ecf37940 <lvm.c:516:23> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
([B137.28]) (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B137.29]
   Preds (1): B2
   Succs (3): B141 B142 B140

 [B138]
   1: DeclRefExpr 0x5590ecf38c68 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf38c90 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38c68 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B138.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf38ca8 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf38c90 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf38c68 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B138.2]->base
   4: ImplicitCastExpr 0x5590ecf38ce0 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf38ca8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf38c90 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf38c68 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B138.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf38c40 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf38cf8 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf38c40 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf38ce0 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf38ca8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf38c90 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf38c68 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B138.5] = [B138.4]
   Preds (2): B139 B140
   Succs (1): B136

 [B139]
   1: DeclRefExpr 0x5590ecf38a20 <lvm.c:528:17> 'void (lua_State *, const TValue *, const char *)' Function 0x5590ecea40c0 'luaG_typeerror' 'void (lua_State *, const TValue *, const char *)'
luaG_typeerror
   2: ImplicitCastExpr 0x5590ecf38b10 <lvm.c:528:17> 'void (*)(lua_State *, const TValue *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf38a20 <col:17> 'void (lua_State *, const TValue *, const char *)' Function 0x5590ecea40c0 'luaG_typeerror' 'void (lua_State *, const TValue *, const char *)'
[B139.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, const char *))
   3: DeclRefExpr 0x5590ecf38a48 <lvm.c:528:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf38b68 <lvm.c:528:32> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38a48 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B139.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf38a70 <lvm.c:528:35> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
rb
   6: ImplicitCastExpr 0x5590ecf38b80 <lvm.c:528:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38a70 <col:35> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B139.5] (ImplicitCastExpr, LValueToRValue, const TValue *)
   7: StringLiteral 0x5590ecf38ad8 <lvm.c:528:39> 'char [14]' lvalue "get length of"
"get length of"
   8: ImplicitCastExpr 0x5590ecf38b98 <lvm.c:528:39> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5590ecf38ad8 <col:39> 'char [14]' lvalue "get length of"
[B139.7] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   9: ImplicitCastExpr 0x5590ecf38bb0 <lvm.c:528:39> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5590ecf38b98 <col:39> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5590ecf38ad8 <col:39> 'char [14]' lvalue "get length of"
[B139.8] (ImplicitCastExpr, BitCast, const char *)
  10: CallExpr 0x5590ecf38b28 <lvm.c:528:17, col:54> 'void'
|-ImplicitCastExpr 0x5590ecf38b10 <col:17> 'void (*)(lua_State *, const TValue *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf38a20 <col:17> 'void (lua_State *, const TValue *, const char *)' Function 0x5590ecea40c0 'luaG_typeerror' 'void (lua_State *, const TValue *, const char *)'
|-ImplicitCastExpr 0x5590ecf38b68 <col:32> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf38a48 <col:32> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf38b80 <col:35> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf38a70 <col:35> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
`-ImplicitCastExpr 0x5590ecf38bb0 <col:39> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5590ecf38b98 <col:39> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5590ecf38ad8 <col:39> 'char [14]' lvalue "get length of"
[B139.2]([B139.4], [B139.6], [B139.9])
   Preds (1): B140
   Succs (1): B138

 [B140]
  default:
   1: DeclRefExpr 0x5590ecf387a0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf387c8 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf387a0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B140.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf38728 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf38750 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38728 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B140.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf38768 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf38750 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf38728 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B140.4]->savedpc
   6: BinaryOperator 0x5590ecf387e0 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf38768 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf38750 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf38728 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf387c8 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf387a0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B140.5] = [B140.2]
   7: DeclRefExpr 0x5590ecf38808 <lvm.c:527:20> 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)' Function 0x5590ecee4748 'call_binTM' 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)'
call_binTM
   8: ImplicitCastExpr 0x5590ecf38938 <lvm.c:527:20> 'int (*)(lua_State *, const TValue *, const TValue *, StkId, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf38808 <col:20> 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)' Function 0x5590ecee4748 'call_binTM' 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)'
[B140.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const TValue *, const TValue *, StkId, TMS))
   9: DeclRefExpr 0x5590ecf38830 <lvm.c:527:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf389a0 <lvm.c:527:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38830 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B140.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf38858 <lvm.c:527:34> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
rb
  12: ImplicitCastExpr 0x5590ecf389b8 <lvm.c:527:34> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38858 <col:34> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B140.11] (ImplicitCastExpr, LValueToRValue, const TValue *)
  13: DeclRefExpr 0x5590ecf38880 <./lobject.h:363:27> 'const TValue':'const struct lua_TValue' lvalue Var 0x5590ece91168 'luaO_nilobject_' 'const TValue':'const struct lua_TValue'
luaO_nilobject_
  14: UnaryOperator 0x5590ecf388a8 <./lobject.h:363:26, col:27> 'const TValue *' prefix '&'
`-DeclRefExpr 0x5590ecf38880 <col:27> 'const TValue':'const struct lua_TValue' lvalue Var 0x5590ece91168 'luaO_nilobject_' 'const TValue':'const struct lua_TValue'
&[B140.13]
  15: DeclRefExpr 0x5590ecf388e8 <lvm.c:527:54> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  16: ImplicitCastExpr 0x5590ecf389d0 <lvm.c:527:54> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf388e8 <col:54> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B140.15] (ImplicitCastExpr, LValueToRValue, StkId)
  17: DeclRefExpr 0x5590ecf38910 <lvm.c:527:58> 'int' EnumConstant 0x5590ece946a0 'TM_LEN' 'int'
TM_LEN
  18: ImplicitCastExpr 0x5590ecf389e8 <lvm.c:527:58> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf38910 <col:58> 'int' EnumConstant 0x5590ece946a0 'TM_LEN' 'int'
[B140.17] (ImplicitCastExpr, IntegralCast, TMS)
  19: CallExpr 0x5590ecf38950 <lvm.c:527:20, col:64> 'int'
|-ImplicitCastExpr 0x5590ecf38938 <col:20> 'int (*)(lua_State *, const TValue *, const TValue *, StkId, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf38808 <col:20> 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)' Function 0x5590ecee4748 'call_binTM' 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)'
|-ImplicitCastExpr 0x5590ecf389a0 <col:31> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf38830 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf389b8 <col:34> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf38858 <col:34> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
|-ParenExpr 0x5590ecf388c8 <./lobject.h:363:25, col:42> 'const TValue *'
| `-UnaryOperator 0x5590ecf388a8 <col:26, col:27> 'const TValue *' prefix '&'
|   `-DeclRefExpr 0x5590ecf38880 <col:27> 'const TValue':'const struct lua_TValue' lvalue Var 0x5590ece91168 'luaO_nilobject_' 'const TValue':'const struct lua_TValue'
|-ImplicitCastExpr 0x5590ecf389d0 <lvm.c:527:54> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf388e8 <col:54> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf389e8 <col:58> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf38910 <col:58> 'int' EnumConstant 0x5590ece946a0 'TM_LEN' 'int'
[B140.8]([B140.10], [B140.12], ([B140.14]), [B140.16], [B140.18])
  20: UnaryOperator 0x5590ecf38a00 <lvm.c:527:19, col:64> 'int' prefix '!'
`-CallExpr 0x5590ecf38950 <col:20, col:64> 'int'
  |-ImplicitCastExpr 0x5590ecf38938 <col:20> 'int (*)(lua_State *, const TValue *, const TValue *, StkId, TMS)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf38808 <col:20> 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)' Function 0x5590ecee4748 'call_binTM' 'int (lua_State *, const TValue *, const TValue *, StkId, TMS)'
  |-ImplicitCastExpr 0x5590ecf389a0 <col:31> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf38830 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
  |-ImplicitCastExpr 0x5590ecf389b8 <col:34> 'const TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf38858 <col:34> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
  |-ParenExpr 0x5590ecf388c8 <./lobject.h:363:25, col:42> 'const TValue *'
  | `-UnaryOperator 0x5590ecf388a8 <col:26, col:27> 'const TValue *' prefix '&'
  |   `-DeclRefExpr 0x5590ecf38880 <col:27> 'const TValue':'const struct lua_TValue' lvalue Var 0x5590ece91168 'luaO_nilobject_' 'const TValue':'const struct lua_TValue'
  |-ImplicitCastExpr 0x5590ecf389d0 <lvm.c:527:54> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf388e8 <col:54> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
  `-ImplicitCastExpr 0x5590ecf389e8 <col:58> 'TMS':'TMS' <IntegralCast>
    `-DeclRefExpr 0x5590ecf38910 <col:58> 'int' EnumConstant 0x5590ece946a0 'TM_LEN' 'int'
![B140.19]
   T: if [B140.20]
   Preds (1): B137
   Succs (2): B139 B138

 [B141]
  case 4:
   1: DeclRefExpr 0x5590ecf381a0 <lvm.c:522:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf381e8 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf381c8 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf381a0 <lvm.c:522:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B141.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclStmt 0x5590ecf38200 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf38140 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf381e8 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf381c8 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf381a0 <lvm.c:522:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
   4: DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
rb
   5: ImplicitCastExpr 0x5590ecf38310 <./lobject.h:94:49, col:51> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
([B141.4]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   6: MemberExpr 0x5590ecf38328 <./lobject.h:94:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B141.5]->value
   7: MemberExpr 0x5590ecf38360 <./lobject.h:94:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
      `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B141.6].gc
   8: ImplicitCastExpr 0x5590ecf38398 <./lobject.h:94:49, col:60> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
  `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B141.7] (ImplicitCastExpr, LValueToRValue, GCObject *)
   9: MemberExpr 0x5590ecf383b0 <./lobject.h:94:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
`-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
    `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
          `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B141.8]->ts
  10: UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
`-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
  `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
            `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
&[B141.9]
  11: MemberExpr 0x5590ecf38428 <./llimits.h:63:25, ./lobject.h:95:37> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x5590ece8bb50
`-ParenExpr 0x5590ecf38408 <./llimits.h:63:25, col:27> 'union TString *'
  `-UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
    `-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
      `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
        `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
          `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
            `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
              `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
                `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
([B141.10])->tsv
  12: UnaryOperator 0x5590ecf38460 <./lobject.h:95:21, col:37> 'struct (anonymous struct at ./lobject.h:201:3) *' prefix '&'
`-MemberExpr 0x5590ecf38428 <./llimits.h:63:25, ./lobject.h:95:37> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x5590ece8bb50
  `-ParenExpr 0x5590ecf38408 <./llimits.h:63:25, col:27> 'union TString *'
    `-UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
      `-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
        `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
            `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
              `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
                `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
                  `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
&[B141.11]
  13: MemberExpr 0x5590ecf384a0 <./lobject.h:95:20, lvm.c:522:49> 'size_t':'unsigned long' lvalue ->len 0x5590ece8bab0
`-ParenExpr 0x5590ecf38480 <./lobject.h:95:20, col:40> 'struct (anonymous struct at ./lobject.h:201:3) *'
  `-UnaryOperator 0x5590ecf38460 <col:21, col:37> 'struct (anonymous struct at ./lobject.h:201:3) *' prefix '&'
    `-MemberExpr 0x5590ecf38428 <./llimits.h:63:25, ./lobject.h:95:37> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x5590ece8bb50
      `-ParenExpr 0x5590ecf38408 <./llimits.h:63:25, col:27> 'union TString *'
        `-UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
          `-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
            `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
                `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                  `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
                    `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
                      `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
([B141.12])->len
  14: ImplicitCastExpr 0x5590ecf38558 <./llimits.h:75:26, col:30> 'size_t':'unsigned long' <LValueToRValue>
`-ParenExpr 0x5590ecf38538 <col:26, col:30> 'size_t':'unsigned long' lvalue
  `-ParenExpr 0x5590ecf384d8 <line:79:38, col:40> 'size_t':'unsigned long' lvalue
    `-MemberExpr 0x5590ecf384a0 <./lobject.h:95:20, lvm.c:522:49> 'size_t':'unsigned long' lvalue ->len 0x5590ece8bab0
      `-ParenExpr 0x5590ecf38480 <./lobject.h:95:20, col:40> 'struct (anonymous struct at ./lobject.h:201:3) *'
        `-UnaryOperator 0x5590ecf38460 <col:21, col:37> 'struct (anonymous struct at ./lobject.h:201:3) *' prefix '&'
          `-MemberExpr 0x5590ecf38428 <./llimits.h:63:25, ./lobject.h:95:37> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x5590ece8bb50
            `-ParenExpr 0x5590ecf38408 <./llimits.h:63:25, col:27> 'union TString *'
              `-UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
                `-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
                  `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
                    `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
                      `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                        `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
                          `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
                            `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
(([B141.13])) (ImplicitCastExpr, LValueToRValue, size_t)
  15: CStyleCastExpr 0x5590ecf38570 <./llimits.h:75:23, col:30> 'lua_Number':'double' <IntegralToFloating>
`-ImplicitCastExpr 0x5590ecf38558 <col:26, col:30> 'size_t':'unsigned long' <LValueToRValue>
  `-ParenExpr 0x5590ecf38538 <col:26, col:30> 'size_t':'unsigned long' lvalue
    `-ParenExpr 0x5590ecf384d8 <line:79:38, col:40> 'size_t':'unsigned long' lvalue
      `-MemberExpr 0x5590ecf384a0 <./lobject.h:95:20, lvm.c:522:49> 'size_t':'unsigned long' lvalue ->len 0x5590ece8bab0
        `-ParenExpr 0x5590ecf38480 <./lobject.h:95:20, col:40> 'struct (anonymous struct at ./lobject.h:201:3) *'
          `-UnaryOperator 0x5590ecf38460 <col:21, col:37> 'struct (anonymous struct at ./lobject.h:201:3) *' prefix '&'
            `-MemberExpr 0x5590ecf38428 <./llimits.h:63:25, ./lobject.h:95:37> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x5590ece8bb50
              `-ParenExpr 0x5590ecf38408 <./llimits.h:63:25, col:27> 'union TString *'
                `-UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
                  `-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
                    `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
                      `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
                        `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                          `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
                            `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
                              `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
(lua_Number)[B141.14] (CStyleCastExpr, IntegralToFloating, lua_Number)
  16: DeclRefExpr 0x5590ecf38218 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
i_o
  17: ImplicitCastExpr 0x5590ecf38240 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38218 <col:24> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
[B141.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: MemberExpr 0x5590ecf38258 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf38240 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf38218 <col:24> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
[B141.17]->value
  19: MemberExpr 0x5590ecf38290 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf38258 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf38240 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf38218 <col:24> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
[B141.18].n
  20: BinaryOperator 0x5590ecf385d8 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf38290 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf38258 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf38240 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf38218 <col:24> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf385b8 <col:37, col:39> 'lua_Number':'double'
  `-ParenExpr 0x5590ecf38598 <./llimits.h:75:22, col:31> 'lua_Number':'double'
    `-CStyleCastExpr 0x5590ecf38570 <col:23, col:30> 'lua_Number':'double' <IntegralToFloating>
      `-ImplicitCastExpr 0x5590ecf38558 <col:26, col:30> 'size_t':'unsigned long' <LValueToRValue>
        `-ParenExpr 0x5590ecf38538 <col:26, col:30> 'size_t':'unsigned long' lvalue
          `-ParenExpr 0x5590ecf384d8 <line:79:38, col:40> 'size_t':'unsigned long' lvalue
            `-MemberExpr 0x5590ecf384a0 <./lobject.h:95:20, lvm.c:522:49> 'size_t':'unsigned long' lvalue ->len 0x5590ece8bab0
              `-ParenExpr 0x5590ecf38480 <./lobject.h:95:20, col:40> 'struct (anonymous struct at ./lobject.h:201:3) *'
                `-UnaryOperator 0x5590ecf38460 <col:21, col:37> 'struct (anonymous struct at ./lobject.h:201:3) *' prefix '&'
                  `-MemberExpr 0x5590ecf38428 <./llimits.h:63:25, ./lobject.h:95:37> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x5590ece8bb50
                    `-ParenExpr 0x5590ecf38408 <./llimits.h:63:25, col:27> 'union TString *'
                      `-UnaryOperator 0x5590ecf383e8 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
                        `-MemberExpr 0x5590ecf383b0 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
                          `-ImplicitCastExpr 0x5590ecf38398 <col:49, col:60> 'GCObject *' <LValueToRValue>
                            `-MemberExpr 0x5590ecf38360 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
                              `-MemberExpr 0x5590ecf38328 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                                `-ImplicitCastExpr 0x5590ecf38310 <col:49, col:51> 'const TValue *' <LValueToRValue>
                                  `-ParenExpr 0x5590ecf382f0 <col:49, col:51> 'const TValue *' lvalue
                                    `-DeclRefExpr 0x5590ecf382c8 <lvm.c:522:44> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B141.19] = (([B141.15]))
  21: IntegerLiteral 0x5590ecf38678 <./lua.h:77:22> 'int' 3
3
  22: DeclRefExpr 0x5590ecf38600 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
i_o
  23: ImplicitCastExpr 0x5590ecf38628 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf38600 <col:42> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
[B141.22] (ImplicitCastExpr, LValueToRValue, TValue *)
  24: MemberExpr 0x5590ecf38640 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf38628 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf38600 <col:42> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
[B141.23]->tt
  25: BinaryOperator 0x5590ecf38698 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf38640 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf38628 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf38600 <col:42> 'TValue *' lvalue Var 0x5590ecf38140 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf38678 <./lua.h:77:22> 'int' 3
[B141.24] = [B141.21]
   T: break;
   Preds (1): B137
   Succs (1): B136

 [B142]
  case 5:
   1: DeclRefExpr 0x5590ecf37b50 <lvm.c:518:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf37b98 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf37b78 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf37b50 <lvm.c:518:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B142.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclStmt 0x5590ecf37bb0 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf37af0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf37b98 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf37b78 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf37b50 <lvm.c:518:23> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
   4: DeclRefExpr 0x5590ecf37c78 <lvm.c:518:36> 'int (Table *)' Function 0x5590ececdab8 'luaH_getn' 'int (Table *)'
luaH_getn
   5: ImplicitCastExpr 0x5590ecf37e58 <lvm.c:518:36> 'int (*)(Table *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf37c78 <col:36> 'int (Table *)' Function 0x5590ececdab8 'luaH_getn' 'int (Table *)'
[B142.4] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(Table *))
   6: DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
rb
   7: ImplicitCastExpr 0x5590ecf37ce8 <./lobject.h:99:44, col:46> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
([B142.6]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   8: MemberExpr 0x5590ecf37d00 <./lobject.h:99:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B142.7]->value
   9: MemberExpr 0x5590ecf37d38 <./lobject.h:99:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
      `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B142.8].gc
  10: ImplicitCastExpr 0x5590ecf37d70 <./lobject.h:99:44, col:55> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590ecf37d38 <col:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
  `-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B142.9] (ImplicitCastExpr, LValueToRValue, GCObject *)
  11: MemberExpr 0x5590ecf37d88 <./lobject.h:99:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
`-ImplicitCastExpr 0x5590ecf37d70 <col:44, col:55> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x5590ecf37d38 <col:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
    `-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
          `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B142.10]->h
  12: UnaryOperator 0x5590ecf37dc0 <./lobject.h:99:43, col:59> 'struct Table *' prefix '&'
`-MemberExpr 0x5590ecf37d88 <col:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
  `-ImplicitCastExpr 0x5590ecf37d70 <col:44, col:55> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x5590ecf37d38 <col:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
            `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
&[B142.11]
  13: CallExpr 0x5590ecf37e70 <lvm.c:518:36, col:56> 'int'
|-ImplicitCastExpr 0x5590ecf37e58 <col:36> 'int (*)(Table *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf37c78 <col:36> 'int (Table *)' Function 0x5590ececdab8 'luaH_getn' 'int (Table *)'
`-ParenExpr 0x5590ecf37de0 <./llimits.h:63:25, col:27> 'struct Table *'
  `-UnaryOperator 0x5590ecf37dc0 <./lobject.h:99:43, col:59> 'struct Table *' prefix '&'
    `-MemberExpr 0x5590ecf37d88 <col:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
      `-ImplicitCastExpr 0x5590ecf37d70 <col:44, col:55> 'GCObject *' <LValueToRValue>
        `-MemberExpr 0x5590ecf37d38 <col:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
          `-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
            `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
              `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
                `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B142.5](([B142.12]))
  14: CStyleCastExpr 0x5590ecf37f20 <./llimits.h:75:23, col:30> 'lua_Number':'double' <IntegralToFloating>
`-ParenExpr 0x5590ecf37f00 <col:26, col:30> 'int'
  `-ParenExpr 0x5590ecf37ea0 <line:79:38, col:40> 'int'
    `-CallExpr 0x5590ecf37e70 <lvm.c:518:36, col:56> 'int'
      |-ImplicitCastExpr 0x5590ecf37e58 <col:36> 'int (*)(Table *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5590ecf37c78 <col:36> 'int (Table *)' Function 0x5590ececdab8 'luaH_getn' 'int (Table *)'
      `-ParenExpr 0x5590ecf37de0 <./llimits.h:63:25, col:27> 'struct Table *'
        `-UnaryOperator 0x5590ecf37dc0 <./lobject.h:99:43, col:59> 'struct Table *' prefix '&'
          `-MemberExpr 0x5590ecf37d88 <col:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
            `-ImplicitCastExpr 0x5590ecf37d70 <col:44, col:55> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x5590ecf37d38 <col:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
                `-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                  `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
                    `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
                      `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
(lua_Number)(([B142.13])) (CStyleCastExpr, IntegralToFloating, lua_Number)
  15: DeclRefExpr 0x5590ecf37bc8 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
i_o
  16: ImplicitCastExpr 0x5590ecf37bf0 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf37bc8 <col:24> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
[B142.15] (ImplicitCastExpr, LValueToRValue, TValue *)
  17: MemberExpr 0x5590ecf37c08 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf37bf0 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf37bc8 <col:24> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
[B142.16]->value
  18: MemberExpr 0x5590ecf37c40 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf37c08 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf37bf0 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf37bc8 <col:24> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
[B142.17].n
  19: BinaryOperator 0x5590ecf37f88 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf37c40 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf37c08 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf37bf0 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf37bc8 <col:24> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf37f68 <col:37, col:39> 'lua_Number':'double'
  `-ParenExpr 0x5590ecf37f48 <./llimits.h:75:22, col:31> 'lua_Number':'double'
    `-CStyleCastExpr 0x5590ecf37f20 <col:23, col:30> 'lua_Number':'double' <IntegralToFloating>
      `-ParenExpr 0x5590ecf37f00 <col:26, col:30> 'int'
        `-ParenExpr 0x5590ecf37ea0 <line:79:38, col:40> 'int'
          `-CallExpr 0x5590ecf37e70 <lvm.c:518:36, col:56> 'int'
            |-ImplicitCastExpr 0x5590ecf37e58 <col:36> 'int (*)(Table *)' <FunctionToPointerDecay>
            | `-DeclRefExpr 0x5590ecf37c78 <col:36> 'int (Table *)' Function 0x5590ececdab8 'luaH_getn' 'int (Table *)'
            `-ParenExpr 0x5590ecf37de0 <./llimits.h:63:25, col:27> 'struct Table *'
              `-UnaryOperator 0x5590ecf37dc0 <./lobject.h:99:43, col:59> 'struct Table *' prefix '&'
                `-MemberExpr 0x5590ecf37d88 <col:44, col:59> 'struct Table':'struct Table' lvalue ->h 0x5590ecea38a0
                  `-ImplicitCastExpr 0x5590ecf37d70 <col:44, col:55> 'GCObject *' <LValueToRValue>
                    `-MemberExpr 0x5590ecf37d38 <col:44, col:55> 'GCObject *const' lvalue .gc 0x5590ece76aa0
                      `-MemberExpr 0x5590ecf37d00 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
                        `-ImplicitCastExpr 0x5590ecf37ce8 <col:44, col:46> 'const TValue *' <LValueToRValue>
                          `-ParenExpr 0x5590ecf37cc8 <col:44, col:46> 'const TValue *' lvalue
                            `-DeclRefExpr 0x5590ecf37ca0 <lvm.c:518:53> 'const TValue *' lvalue Var 0x5590ecf37388 'rb' 'const TValue *'
[B142.18] = (([B142.14]))
  20: IntegerLiteral 0x5590ecf38028 <./lua.h:77:22> 'int' 3
3
  21: DeclRefExpr 0x5590ecf37fb0 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x5590ecf37fd8 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf37fb0 <col:42> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
[B142.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf37ff0 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf37fd8 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf37fb0 <col:42> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
[B142.22]->tt
  24: BinaryOperator 0x5590ecf38048 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf37ff0 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf37fd8 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf37fb0 <col:42> 'TValue *' lvalue Var 0x5590ecf37af0 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf38028 <./lua.h:77:22> 'int' 3
[B142.23] = [B142.20]
   T: break;
   Preds (1): B137
   Succs (1): B136

 [B143]
   1: BinaryOperator 0x5590ecf36f68 <./lobject.h:79:20, line:103:70> 'int' '||'
|-ParenExpr 0x5590ecf362a8 <line:79:20, col:41> 'int'
| `-BinaryOperator 0x5590ecf36280 <line:90:18, ./lua.h:74:19> 'int' '=='
|   |-ImplicitCastExpr 0x5590ecf36268 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf36228 <col:18, col:26> 'int' lvalue
|   |   `-MemberExpr 0x5590ecf361f0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|   |     `-ParenExpr 0x5590ecf361d0 <col:19, col:21> 'StkId':'TValue *'
|   |       `-ParenExpr 0x5590ecf361b0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
|   |         `-BinaryOperator 0x5590ecf36188 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|   |           |-ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|   |           `-ParenExpr 0x5590ecf36150 <./lopcodes.h:88:21, col:63> 'int'
|   |             `-ParenExpr 0x5590ecf36130 <./llimits.h:75:22, col:31> 'int'
|   |               `-CStyleCastExpr 0x5590ecf36108 <col:23, col:30> 'int' <IntegralCast>
|   |                 `-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
|   |                   `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |                     |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |                     | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |                     |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |                     |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |                     |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |                     |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
|   |                     |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
|   |                     |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
|   |                     |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
|   |                     |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
|   |                     |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
|   |                     |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
|   |                     |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
|   |                     |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
|   |                     |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
|   |                     `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |                       `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |                         |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |                         | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |                         |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
|   |                         |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |                         |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |                         |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |                         |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |                         |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
|   |                         |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
|   |                         `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
|   `-IntegerLiteral 0x5590ecf36248 <./lua.h:74:19> 'int' 0
`-ParenExpr 0x5590ecf36f48 <./lobject.h:103:37, col:70> 'int'
  `-BinaryOperator 0x5590ecf36f20 <line:84:24, line:103:69> 'int' '&&'
    |-ParenExpr 0x5590ecf368c8 <line:84:24, col:49> 'int'
    | `-BinaryOperator 0x5590ecf368a0 <line:90:18, ./lua.h:75:23> 'int' '=='
    |   |-ImplicitCastExpr 0x5590ecf36888 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf36848 <col:18, col:26> 'int' lvalue
    |   |   `-MemberExpr 0x5590ecf36810 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    |   |     `-ParenExpr 0x5590ecf367f0 <col:19, col:21> 'StkId':'TValue *'
    |   |       `-ParenExpr 0x5590ecf367d0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    |   |         `-BinaryOperator 0x5590ecf367a8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
    |   |           |-ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    |   |           `-ParenExpr 0x5590ecf36770 <./lopcodes.h:88:21, col:63> 'int'
    |   |             `-ParenExpr 0x5590ecf36750 <./llimits.h:75:22, col:31> 'int'
    |   |               `-CStyleCastExpr 0x5590ecf36728 <col:23, col:30> 'int' <IntegralCast>
    |   |                 `-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
    |   |                   `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |   |                     |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
    |   |                     | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |                     |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   |                     |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |                     |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   |                     |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
    |   |                     |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
    |   |                     |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
    |   |                     |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
    |   |                     |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
    |   |                     |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
    |   |                     |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
    |   |                     |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
    |   |                     |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
    |   |                     |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
    |   |                     `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
    |   |                       `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |   |                         |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
    |   |                         | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   |                         |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
    |   |                         |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |   |                         |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
    |   |                         |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   |                         |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |   |                         |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
    |   |                         |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
    |   |                         `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
    |   `-IntegerLiteral 0x5590ecf36868 <./lua.h:75:23> 'int' 1
    `-BinaryOperator 0x5590ecf36ef8 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
      |-ImplicitCastExpr 0x5590ecf36ee0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
      | `-ParenExpr 0x5590ecf36ea0 <col:25, col:27> 'int' lvalue
      |   `-MemberExpr 0x5590ecf36e68 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
      |     `-MemberExpr 0x5590ecf36e30 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
      |       `-ParenExpr 0x5590ecf36e10 <col:45, col:47> 'StkId':'TValue *'
      |         `-ParenExpr 0x5590ecf36df0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
      |           `-BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |             |-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      |             | `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      |             `-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
      |               `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
      |                 `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
      |                   `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
      |                     `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |                       |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
      |                       | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |                       |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |                       |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |                       |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |                       |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
      |                       |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
      |                       |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
      |                       |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
      |                       |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
      |                       |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
      |                       |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
      |                       |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
      |                       |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
      |                       |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
      |                       `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
      |                         `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |                           |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
      |                           | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |                           |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
      |                           |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |                           |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
      |                           |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |                           |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |                           |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
      |                           |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
      |                           `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
      `-IntegerLiteral 0x5590ecf36ec0 <./lobject.h:103:69> 'int' 0
([B146.27]) || (([B145.27]) && [B144.28])
   2: DeclStmt 0x5590ecf36fb0 <lvm.c:510:9, col:35>col:13
`-VarDecl 0x5590ecf35c48 <col:9, ./lobject.h:103:71> lvm.c:510:13 used res 'int' cinit
  `-ParenExpr 0x5590ecf36f90 <./lobject.h:103:22, col:71> 'int'
    `-BinaryOperator 0x5590ecf36f68 <line:79:20, line:103:70> 'int' '||'
      |-ParenExpr 0x5590ecf362a8 <line:79:20, col:41> 'int'
      | `-BinaryOperator 0x5590ecf36280 <line:90:18, ./lua.h:74:19> 'int' '=='
      |   |-ImplicitCastExpr 0x5590ecf36268 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
      |   | `-ParenExpr 0x5590ecf36228 <col:18, col:26> 'int' lvalue
      |   |   `-MemberExpr 0x5590ecf361f0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
      |   |     `-ParenExpr 0x5590ecf361d0 <col:19, col:21> 'StkId':'TValue *'
      |   |       `-ParenExpr 0x5590ecf361b0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
      |   |         `-BinaryOperator 0x5590ecf36188 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |   |           |-ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      |   |           | `-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      |   |           `-ParenExpr 0x5590ecf36150 <./lopcodes.h:88:21, col:63> 'int'
      |   |             `-ParenExpr 0x5590ecf36130 <./llimits.h:75:22, col:31> 'int'
      |   |               `-CStyleCastExpr 0x5590ecf36108 <col:23, col:30> 'int' <IntegralCast>
      |   |                 `-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
      |   |                   `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |                     |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |                     | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |                     |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |                     |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |                     |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |                     |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
      |   |                     |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
      |   |                     |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
      |   |                     |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
      |   |                     |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
      |   |                     |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
      |   |                     |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
      |   |                     |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
      |   |                     |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
      |   |                     |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
      |   |                     `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |                       `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |                         |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |                         | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |                         |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
      |   |                         |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |                         |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |                         |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |                         |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |                         |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
      |   |                         |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
      |   |                         `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
      |   `-IntegerLiteral 0x5590ecf36248 <./lua.h:74:19> 'int' 0
      `-ParenExpr 0x5590ecf36f48 <./lobject.h:103:37, col:70> 'int'
        `-BinaryOperator 0x5590ecf36f20 <line:84:24, line:103:69> 'int' '&&'
          |-ParenExpr 0x5590ecf368c8 <line:84:24, col:49> 'int'
          | `-BinaryOperator 0x5590ecf368a0 <line:90:18, ./lua.h:75:23> 'int' '=='
          |   |-ImplicitCastExpr 0x5590ecf36888 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf36848 <col:18, col:26> 'int' lvalue
          |   |   `-MemberExpr 0x5590ecf36810 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
          |   |     `-ParenExpr 0x5590ecf367f0 <col:19, col:21> 'StkId':'TValue *'
          |   |       `-ParenExpr 0x5590ecf367d0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
          |   |         `-BinaryOperator 0x5590ecf367a8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
          |   |           |-ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
          |   |           | `-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
          |   |           `-ParenExpr 0x5590ecf36770 <./lopcodes.h:88:21, col:63> 'int'
          |   |             `-ParenExpr 0x5590ecf36750 <./llimits.h:75:22, col:31> 'int'
          |   |               `-CStyleCastExpr 0x5590ecf36728 <col:23, col:30> 'int' <IntegralCast>
          |   |                 `-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
          |   |                   `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |   |                     |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
          |   |                     | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |                     |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   |                     |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |                     |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   |                     |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
          |   |                     |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
          |   |                     |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
          |   |                     |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
          |   |                     |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
          |   |                     |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
          |   |                     |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
          |   |                     |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
          |   |                     |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
          |   |                     |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
          |   |                     `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
          |   |                       `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
          |   |                         |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
          |   |                         | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
          |   |                         |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
          |   |                         |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
          |   |                         |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
          |   |                         |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
          |   |                         |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
          |   |                         |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
          |   |                         |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
          |   |                         `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
          |   `-IntegerLiteral 0x5590ecf36868 <./lua.h:75:23> 'int' 1
          `-BinaryOperator 0x5590ecf36ef8 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
            |-ImplicitCastExpr 0x5590ecf36ee0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
            | `-ParenExpr 0x5590ecf36ea0 <col:25, col:27> 'int' lvalue
            |   `-MemberExpr 0x5590ecf36e68 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
            |     `-MemberExpr 0x5590ecf36e30 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
            |       `-ParenExpr 0x5590ecf36e10 <col:45, col:47> 'StkId':'TValue *'
            |         `-ParenExpr 0x5590ecf36df0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
            |           `-BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
            |             |-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
            |             | `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
            |             `-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
            |               `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
            |                 `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
            |                   `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
            |                     `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |                       |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
            |                       | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |                       |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |                       |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |                       |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |                       |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
            |                       |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
            |                       |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
            |                       |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
            |                       |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
            |                       |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
            |                       |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
            |                       |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
            |                       |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
            |                       |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
            |                       `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
            |                         `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
            |                           |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
            |                           | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |                           |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
            |                           |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
            |                           |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
            |                           |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |                           |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |                           |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
            |                           |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
            |                           `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
            `-IntegerLiteral 0x5590ecf36ec0 <./lobject.h:103:69> 'int' 0
int res = (((((base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))))->tt) == 0) || (((((base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))))->tt) == 1) && (((base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))))->value.b) == 0));
   3: DeclRefExpr 0x5590ecf37038 <lvm.c:511:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   4: ImplicitCastExpr 0x5590ecf37080 <./lobject.h:126:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf37060 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf37038 <lvm.c:511:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B143.3]) (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclStmt 0x5590ecf37098 <./lobject.h:126:5, col:22>col:13
`-VarDecl 0x5590ecf36fd8 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf37080 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf37060 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf37038 <lvm.c:511:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
   6: DeclRefExpr 0x5590ecf37160 <lvm.c:511:23> 'int' lvalue Var 0x5590ecf35c48 'res' 'int'
res
   7: ImplicitCastExpr 0x5590ecf371a8 <./lobject.h:126:37, col:39> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf37188 <col:37, col:39> 'int' lvalue
  `-DeclRefExpr 0x5590ecf37160 <lvm.c:511:23> 'int' lvalue Var 0x5590ecf35c48 'res' 'int'
([B143.6]) (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x5590ecf370b0 <./lobject.h:126:24> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
i_o
   9: ImplicitCastExpr 0x5590ecf370d8 <./lobject.h:126:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf370b0 <col:24> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
[B143.8] (ImplicitCastExpr, LValueToRValue, TValue *)
  10: MemberExpr 0x5590ecf370f0 <./lobject.h:126:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf370d8 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf370b0 <col:24> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
[B143.9]->value
  11: MemberExpr 0x5590ecf37128 <./lobject.h:126:24, col:35> 'int' lvalue .b 0x5590ece76bb8
`-MemberExpr 0x5590ecf370f0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf370d8 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf370b0 <col:24> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
[B143.10].b
  12: BinaryOperator 0x5590ecf371c0 <./lobject.h:126:24, col:39> 'int' '='
|-MemberExpr 0x5590ecf37128 <col:24, col:35> 'int' lvalue .b 0x5590ece76bb8
| `-MemberExpr 0x5590ecf370f0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf370d8 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf370b0 <col:24> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
`-ImplicitCastExpr 0x5590ecf371a8 <col:37, col:39> 'int' <LValueToRValue>
  `-ParenExpr 0x5590ecf37188 <col:37, col:39> 'int' lvalue
    `-DeclRefExpr 0x5590ecf37160 <lvm.c:511:23> 'int' lvalue Var 0x5590ecf35c48 'res' 'int'
[B143.11] = [B143.7]
  13: IntegerLiteral 0x5590ecf37260 <./lua.h:75:23> 'int' 1
1
  14: DeclRefExpr 0x5590ecf371e8 <./lobject.h:126:42> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
i_o
  15: ImplicitCastExpr 0x5590ecf37210 <./lobject.h:126:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf371e8 <col:42> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
[B143.14] (ImplicitCastExpr, LValueToRValue, TValue *)
  16: MemberExpr 0x5590ecf37228 <./lobject.h:126:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf37210 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf371e8 <col:42> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
[B143.15]->tt
  17: BinaryOperator 0x5590ecf37280 <./lobject.h:126:42, ./lua.h:75:23> 'int' '='
|-MemberExpr 0x5590ecf37228 <./lobject.h:126:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf37210 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf371e8 <col:42> 'TValue *' lvalue Var 0x5590ecf36fd8 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf37260 <./lua.h:75:23> 'int' 1
[B143.16] = [B143.13]
   T: continue;
   Preds (3): B144 B145 B146
   Succs (1): B1

 [B144]
   1: DeclRefExpr 0x5590ecf368e8 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B144.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf36ab0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B144.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf36958 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf36978 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf36998 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
[B144.5] + [B144.6]
   8: IntegerLiteral 0x5590ecf369e0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf36a00 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
([B144.7]) + [B144.8]
  10: IntegerLiteral 0x5590ecf36a48 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf36a68 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
([B144.9]) + [B144.10]
  12: BinaryOperator 0x5590ecf36ac8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
[B144.4] >> ([B144.11])
  13: IntegerLiteral 0x5590ecf36b10 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf36b40 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
(Instruction)[B144.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf36b68 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
~[B144.14]
  16: IntegerLiteral 0x5590ecf36ba8 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf36bc8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
([B144.15]) << [B144.16]
  18: UnaryOperator 0x5590ecf36c10 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
~([B144.17])
  19: IntegerLiteral 0x5590ecf36c50 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf36c70 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
([B144.18]) << [B144.19]
  21: BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
([B144.12]) & ([B144.20])
  22: CStyleCastExpr 0x5590ecf36d48 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
(int)([B144.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
[B144.2] + (([B144.22]))
  24: MemberExpr 0x5590ecf36e30 <./lobject.h:100:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ParenExpr 0x5590ecf36e10 <col:45, col:47> 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf36df0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
(([B144.23]))->value
  25: MemberExpr 0x5590ecf36e68 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
`-MemberExpr 0x5590ecf36e30 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ParenExpr 0x5590ecf36e10 <col:45, col:47> 'StkId':'TValue *'
    `-ParenExpr 0x5590ecf36df0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
      `-BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
[B144.24].b
  26: ImplicitCastExpr 0x5590ecf36ee0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf36ea0 <col:25, col:27> 'int' lvalue
  `-MemberExpr 0x5590ecf36e68 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
    `-MemberExpr 0x5590ecf36e30 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ParenExpr 0x5590ecf36e10 <col:45, col:47> 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf36df0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
          `-BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
            |-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
            | `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
            `-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
              `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
                `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
                  `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
                    `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                      |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
                      | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                      |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                      |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                      |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                      |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
                      |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
                      |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
                      |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
                      |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
                      |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
                      |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
                      |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
                      |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
                      |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
                      `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
                        `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                          |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
                          | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                          |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
                          |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                          |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
                          |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                          |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                          |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
                          |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
                          `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
([B144.25]) (ImplicitCastExpr, LValueToRValue, int)
  27: IntegerLiteral 0x5590ecf36ec0 <./lobject.h:103:69> 'int' 0
0
  28: BinaryOperator 0x5590ecf36ef8 <./llimits.h:63:25, ./lobject.h:103:69> 'int' '=='
|-ImplicitCastExpr 0x5590ecf36ee0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf36ea0 <col:25, col:27> 'int' lvalue
|   `-MemberExpr 0x5590ecf36e68 <./lobject.h:100:45, col:56> 'int' lvalue .b 0x5590ece76bb8
|     `-MemberExpr 0x5590ecf36e30 <col:45, col:50> 'Value':'Value' lvalue ->value 0x5590ece76da0
|       `-ParenExpr 0x5590ecf36e10 <col:45, col:47> 'StkId':'TValue *'
|         `-ParenExpr 0x5590ecf36df0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
|           `-BinaryOperator 0x5590ecf36dc8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|             |-ImplicitCastExpr 0x5590ecf36db0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
|             | `-DeclRefExpr 0x5590ecf368e8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|             `-ParenExpr 0x5590ecf36d90 <./lopcodes.h:88:21, col:63> 'int'
|               `-ParenExpr 0x5590ecf36d70 <./llimits.h:75:22, col:31> 'int'
|                 `-CStyleCastExpr 0x5590ecf36d48 <col:23, col:30> 'int' <IntegralCast>
|                   `-ParenExpr 0x5590ecf36d28 <col:26, col:30> 'unsigned int'
|                     `-BinaryOperator 0x5590ecf36cb8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|                       |-ParenExpr 0x5590ecf36af0 <line:88:32, col:43> 'Instruction':'unsigned int'
|                       | `-BinaryOperator 0x5590ecf36ac8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|                       |   |-ImplicitCastExpr 0x5590ecf36ab0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                       |   | `-ParenExpr 0x5590ecf36938 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                       |   |   `-DeclRefExpr 0x5590ecf36910 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                       |   `-ParenExpr 0x5590ecf36a90 <./lopcodes.h:47:16, col:31> 'int'
|                       |     `-BinaryOperator 0x5590ecf36a68 <line:46:16, line:37:17> 'int' '+'
|                       |       |-ParenExpr 0x5590ecf36a28 <line:46:16, col:31> 'int'
|                       |       | `-BinaryOperator 0x5590ecf36a00 <line:45:16, line:40:17> 'int' '+'
|                       |       |   |-ParenExpr 0x5590ecf369c0 <line:45:16, col:33> 'int'
|                       |       |   | `-BinaryOperator 0x5590ecf36998 <line:44:17, line:42:18> 'int' '+'
|                       |       |   |   |-IntegerLiteral 0x5590ecf36958 <line:44:17> 'int' 0
|                       |       |   |   `-IntegerLiteral 0x5590ecf36978 <line:42:18> 'int' 6
|                       |       |   `-IntegerLiteral 0x5590ecf369e0 <line:40:17> 'int' 8
|                       |       `-IntegerLiteral 0x5590ecf36a48 <line:37:17> 'int' 9
|                       `-ParenExpr 0x5590ecf36c98 <line:71:20, col:49> 'Instruction':'unsigned int'
|                         `-BinaryOperator 0x5590ecf36c70 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                           |-ParenExpr 0x5590ecf36c30 <line:71:21, col:45> 'Instruction':'unsigned int'
|                           | `-UnaryOperator 0x5590ecf36c10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                           |   `-ParenExpr 0x5590ecf36bf0 <col:23, col:44> 'Instruction':'unsigned int'
|                           |     `-BinaryOperator 0x5590ecf36bc8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                           |       |-ParenExpr 0x5590ecf36b88 <line:71:24, col:40> 'Instruction':'unsigned int'
|                           |       | `-UnaryOperator 0x5590ecf36b68 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                           |       |   `-CStyleCastExpr 0x5590ecf36b40 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                           |       |     `-IntegerLiteral 0x5590ecf36b10 <col:39> 'int' 0
|                           |       `-IntegerLiteral 0x5590ecf36ba8 <line:38:17> 'int' 9
|                           `-IntegerLiteral 0x5590ecf36c50 <line:88:60> 'int' 0
`-IntegerLiteral 0x5590ecf36ec0 <./lobject.h:103:69> 'int' 0
[B144.26] == [B144.27]
   Preds (1): B145
   Succs (1): B143

 [B145]
   1: DeclRefExpr 0x5590ecf362c8 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B145.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf36490 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B145.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf36338 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf36358 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf36378 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
[B145.5] + [B145.6]
   8: IntegerLiteral 0x5590ecf363c0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf363e0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
([B145.7]) + [B145.8]
  10: IntegerLiteral 0x5590ecf36428 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf36448 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
([B145.9]) + [B145.10]
  12: BinaryOperator 0x5590ecf364a8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
[B145.4] >> ([B145.11])
  13: IntegerLiteral 0x5590ecf364f0 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf36520 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
(Instruction)[B145.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf36548 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
~[B145.14]
  16: IntegerLiteral 0x5590ecf36588 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf365a8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
([B145.15]) << [B145.16]
  18: UnaryOperator 0x5590ecf365f0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
~([B145.17])
  19: IntegerLiteral 0x5590ecf36630 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf36650 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
([B145.18]) << [B145.19]
  21: BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
([B145.12]) & ([B145.20])
  22: CStyleCastExpr 0x5590ecf36728 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
(int)([B145.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf367a8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf36770 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf36750 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf36728 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
[B145.2] + (([B145.22]))
  24: MemberExpr 0x5590ecf36810 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ParenExpr 0x5590ecf367f0 <col:19, col:21> 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf367d0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf367a8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf36770 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf36750 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf36728 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
(([B145.23]))->tt
  25: ImplicitCastExpr 0x5590ecf36888 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf36848 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf36810 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ParenExpr 0x5590ecf367f0 <col:19, col:21> 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf367d0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
        `-BinaryOperator 0x5590ecf367a8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
          |-ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
          `-ParenExpr 0x5590ecf36770 <./lopcodes.h:88:21, col:63> 'int'
            `-ParenExpr 0x5590ecf36750 <./llimits.h:75:22, col:31> 'int'
              `-CStyleCastExpr 0x5590ecf36728 <col:23, col:30> 'int' <IntegralCast>
                `-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
                  `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                    |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
                    | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                    |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                    |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                    |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                    |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
                    |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
                    |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
                    |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
                    |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
                    |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
                    |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
                    |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
                    |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
                    |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
                    `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
                      `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                        |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
                        | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                        |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
                        |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                        |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
                        |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                        |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                        |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
                        |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
                        `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
([B145.24]) (ImplicitCastExpr, LValueToRValue, int)
  26: IntegerLiteral 0x5590ecf36868 <./lua.h:75:23> 'int' 1
1
  27: BinaryOperator 0x5590ecf368a0 <./lobject.h:90:18, ./lua.h:75:23> 'int' '=='
|-ImplicitCastExpr 0x5590ecf36888 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf36848 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf36810 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ParenExpr 0x5590ecf367f0 <col:19, col:21> 'StkId':'TValue *'
|       `-ParenExpr 0x5590ecf367d0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
|         `-BinaryOperator 0x5590ecf367a8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|           |-ImplicitCastExpr 0x5590ecf36790 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
|           | `-DeclRefExpr 0x5590ecf362c8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|           `-ParenExpr 0x5590ecf36770 <./lopcodes.h:88:21, col:63> 'int'
|             `-ParenExpr 0x5590ecf36750 <./llimits.h:75:22, col:31> 'int'
|               `-CStyleCastExpr 0x5590ecf36728 <col:23, col:30> 'int' <IntegralCast>
|                 `-ParenExpr 0x5590ecf36708 <col:26, col:30> 'unsigned int'
|                   `-BinaryOperator 0x5590ecf36698 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|                     |-ParenExpr 0x5590ecf364d0 <line:88:32, col:43> 'Instruction':'unsigned int'
|                     | `-BinaryOperator 0x5590ecf364a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|                     |   |-ImplicitCastExpr 0x5590ecf36490 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                     |   | `-ParenExpr 0x5590ecf36318 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                     |   |   `-DeclRefExpr 0x5590ecf362f0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                     |   `-ParenExpr 0x5590ecf36470 <./lopcodes.h:47:16, col:31> 'int'
|                     |     `-BinaryOperator 0x5590ecf36448 <line:46:16, line:37:17> 'int' '+'
|                     |       |-ParenExpr 0x5590ecf36408 <line:46:16, col:31> 'int'
|                     |       | `-BinaryOperator 0x5590ecf363e0 <line:45:16, line:40:17> 'int' '+'
|                     |       |   |-ParenExpr 0x5590ecf363a0 <line:45:16, col:33> 'int'
|                     |       |   | `-BinaryOperator 0x5590ecf36378 <line:44:17, line:42:18> 'int' '+'
|                     |       |   |   |-IntegerLiteral 0x5590ecf36338 <line:44:17> 'int' 0
|                     |       |   |   `-IntegerLiteral 0x5590ecf36358 <line:42:18> 'int' 6
|                     |       |   `-IntegerLiteral 0x5590ecf363c0 <line:40:17> 'int' 8
|                     |       `-IntegerLiteral 0x5590ecf36428 <line:37:17> 'int' 9
|                     `-ParenExpr 0x5590ecf36678 <line:71:20, col:49> 'Instruction':'unsigned int'
|                       `-BinaryOperator 0x5590ecf36650 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                         |-ParenExpr 0x5590ecf36610 <line:71:21, col:45> 'Instruction':'unsigned int'
|                         | `-UnaryOperator 0x5590ecf365f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                         |   `-ParenExpr 0x5590ecf365d0 <col:23, col:44> 'Instruction':'unsigned int'
|                         |     `-BinaryOperator 0x5590ecf365a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                         |       |-ParenExpr 0x5590ecf36568 <line:71:24, col:40> 'Instruction':'unsigned int'
|                         |       | `-UnaryOperator 0x5590ecf36548 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                         |       |   `-CStyleCastExpr 0x5590ecf36520 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                         |       |     `-IntegerLiteral 0x5590ecf364f0 <col:39> 'int' 0
|                         |       `-IntegerLiteral 0x5590ecf36588 <line:38:17> 'int' 9
|                         `-IntegerLiteral 0x5590ecf36630 <line:88:60> 'int' 0
`-IntegerLiteral 0x5590ecf36868 <./lua.h:75:23> 'int' 1
[B145.25] == [B145.26]
   T: ([B145.27]) && ...
   Preds (1): B146
   Succs (2): B144 B143

 [B146]
  case OP_NOT:
   1: DeclRefExpr 0x5590ecf35ca8 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B146.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf35e70 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B146.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf35d18 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf35d38 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf35d58 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
[B146.5] + [B146.6]
   8: IntegerLiteral 0x5590ecf35da0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf35dc0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
([B146.7]) + [B146.8]
  10: IntegerLiteral 0x5590ecf35e08 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf35e28 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
([B146.9]) + [B146.10]
  12: BinaryOperator 0x5590ecf35e88 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
[B146.4] >> ([B146.11])
  13: IntegerLiteral 0x5590ecf35ed0 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf35f00 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
(Instruction)[B146.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf35f28 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
~[B146.14]
  16: IntegerLiteral 0x5590ecf35f68 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf35f88 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
([B146.15]) << [B146.16]
  18: UnaryOperator 0x5590ecf35fd0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
~([B146.17])
  19: IntegerLiteral 0x5590ecf36010 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf36030 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
([B146.18]) << [B146.19]
  21: BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
([B146.12]) & ([B146.20])
  22: CStyleCastExpr 0x5590ecf36108 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
(int)([B146.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf36188 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf36150 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf36130 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf36108 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
[B146.2] + (([B146.22]))
  24: MemberExpr 0x5590ecf361f0 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ParenExpr 0x5590ecf361d0 <col:19, col:21> 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf361b0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf36188 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf36150 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf36130 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf36108 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
(([B146.23]))->tt
  25: ImplicitCastExpr 0x5590ecf36268 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf36228 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf361f0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ParenExpr 0x5590ecf361d0 <col:19, col:21> 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf361b0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
        `-BinaryOperator 0x5590ecf36188 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
          |-ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
          `-ParenExpr 0x5590ecf36150 <./lopcodes.h:88:21, col:63> 'int'
            `-ParenExpr 0x5590ecf36130 <./llimits.h:75:22, col:31> 'int'
              `-CStyleCastExpr 0x5590ecf36108 <col:23, col:30> 'int' <IntegralCast>
                `-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
                  `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                    |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
                    | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                    |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                    |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                    |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                    |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
                    |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
                    |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
                    |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
                    |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
                    |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
                    |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
                    |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
                    |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
                    |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
                    `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
                      `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                        |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
                        | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                        |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
                        |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                        |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
                        |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                        |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                        |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
                        |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
                        `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
([B146.24]) (ImplicitCastExpr, LValueToRValue, int)
  26: IntegerLiteral 0x5590ecf36248 <./lua.h:74:19> 'int' 0
0
  27: BinaryOperator 0x5590ecf36280 <./lobject.h:90:18, ./lua.h:74:19> 'int' '=='
|-ImplicitCastExpr 0x5590ecf36268 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf36228 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf361f0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ParenExpr 0x5590ecf361d0 <col:19, col:21> 'StkId':'TValue *'
|       `-ParenExpr 0x5590ecf361b0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
|         `-BinaryOperator 0x5590ecf36188 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|           |-ImplicitCastExpr 0x5590ecf36170 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
|           | `-DeclRefExpr 0x5590ecf35ca8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|           `-ParenExpr 0x5590ecf36150 <./lopcodes.h:88:21, col:63> 'int'
|             `-ParenExpr 0x5590ecf36130 <./llimits.h:75:22, col:31> 'int'
|               `-CStyleCastExpr 0x5590ecf36108 <col:23, col:30> 'int' <IntegralCast>
|                 `-ParenExpr 0x5590ecf360e8 <col:26, col:30> 'unsigned int'
|                   `-BinaryOperator 0x5590ecf36078 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|                     |-ParenExpr 0x5590ecf35eb0 <line:88:32, col:43> 'Instruction':'unsigned int'
|                     | `-BinaryOperator 0x5590ecf35e88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|                     |   |-ImplicitCastExpr 0x5590ecf35e70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|                     |   | `-ParenExpr 0x5590ecf35cf8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|                     |   |   `-DeclRefExpr 0x5590ecf35cd0 <lvm.c:510:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|                     |   `-ParenExpr 0x5590ecf35e50 <./lopcodes.h:47:16, col:31> 'int'
|                     |     `-BinaryOperator 0x5590ecf35e28 <line:46:16, line:37:17> 'int' '+'
|                     |       |-ParenExpr 0x5590ecf35de8 <line:46:16, col:31> 'int'
|                     |       | `-BinaryOperator 0x5590ecf35dc0 <line:45:16, line:40:17> 'int' '+'
|                     |       |   |-ParenExpr 0x5590ecf35d80 <line:45:16, col:33> 'int'
|                     |       |   | `-BinaryOperator 0x5590ecf35d58 <line:44:17, line:42:18> 'int' '+'
|                     |       |   |   |-IntegerLiteral 0x5590ecf35d18 <line:44:17> 'int' 0
|                     |       |   |   `-IntegerLiteral 0x5590ecf35d38 <line:42:18> 'int' 6
|                     |       |   `-IntegerLiteral 0x5590ecf35da0 <line:40:17> 'int' 8
|                     |       `-IntegerLiteral 0x5590ecf35e08 <line:37:17> 'int' 9
|                     `-ParenExpr 0x5590ecf36058 <line:71:20, col:49> 'Instruction':'unsigned int'
|                       `-BinaryOperator 0x5590ecf36030 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                         |-ParenExpr 0x5590ecf35ff0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                         | `-UnaryOperator 0x5590ecf35fd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                         |   `-ParenExpr 0x5590ecf35fb0 <col:23, col:44> 'Instruction':'unsigned int'
|                         |     `-BinaryOperator 0x5590ecf35f88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                         |       |-ParenExpr 0x5590ecf35f48 <line:71:24, col:40> 'Instruction':'unsigned int'
|                         |       | `-UnaryOperator 0x5590ecf35f28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                         |       |   `-CStyleCastExpr 0x5590ecf35f00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                         |       |     `-IntegerLiteral 0x5590ecf35ed0 <col:39> 'int' 0
|                         |       `-IntegerLiteral 0x5590ecf35f68 <line:38:17> 'int' 9
|                         `-IntegerLiteral 0x5590ecf36010 <line:88:60> 'int' 0
`-IntegerLiteral 0x5590ecf36248 <./lua.h:74:19> 'int' 0
[B146.25] == [B146.26]
   T: ([B146.27]) || ...
   Preds (1): B2
   Succs (2): B143 B145

 [B147]
   T: continue;
   Preds (2): B148 B149
   Succs (1): B1

 [B148]
   1: DeclRefExpr 0x5590ecf35770 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf35798 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35770 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B148.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf356f8 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf35720 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf356f8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf35738 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf35720 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf356f8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.4]->savedpc
   6: BinaryOperator 0x5590ecf357b0 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf35738 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf35720 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf356f8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf35798 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf35770 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B148.5] = [B148.2]
   7: DeclRefExpr 0x5590ecf357d8 <lvm.c:505:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf358c8 <lvm.c:505:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf357d8 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B148.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf35800 <lvm.c:505:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf35930 <lvm.c:505:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35800 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf35828 <lvm.c:505:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf35948 <lvm.c:505:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35828 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B148.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf35850 <lvm.c:505:32> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf35960 <lvm.c:505:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35850 <col:32> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B148.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf35978 <lvm.c:505:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf35960 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf35850 <col:32> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B148.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf35878 <lvm.c:505:36> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
rb
  17: ImplicitCastExpr 0x5590ecf35990 <lvm.c:505:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35878 <col:36> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B148.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf359a8 <lvm.c:505:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf35990 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf35878 <col:36> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B148.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf358a0 <lvm.c:505:40> 'int' EnumConstant 0x5590ece94658 'TM_UNM' 'int'
TM_UNM
  20: ImplicitCastExpr 0x5590ecf359c0 <lvm.c:505:40> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf358a0 <col:40> 'int' EnumConstant 0x5590ece94658 'TM_UNM' 'int'
[B148.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf358e0 <lvm.c:505:19, col:46> 'void'
|-ImplicitCastExpr 0x5590ecf358c8 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf357d8 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf35930 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf35800 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf35948 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf35828 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf35978 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf35960 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf35850 <col:32> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf359a8 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf35990 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf35878 <col:36> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
`-ImplicitCastExpr 0x5590ecf359c0 <col:40> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf358a0 <col:40> 'int' EnumConstant 0x5590ece94658 'TM_UNM' 'int'
[B148.8]([B148.10], [B148.12], [B148.15], [B148.18], [B148.20])
  22: DeclRefExpr 0x5590ecf35a28 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf35a50 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35a28 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf35a68 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf35a50 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf35a28 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.23]->base
  25: ImplicitCastExpr 0x5590ecf35aa0 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf35a68 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf35a50 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf35a28 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf35a00 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf35ae0 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf35a00 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf35aa0 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf35a68 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf35a50 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf35a28 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B148.26] = [B148.25]
   Preds (1): B150
   Succs (1): B147

 [B149]
   1: DeclRefExpr 0x5590ecf35238 <lvm.c:501:34> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf35280 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf35260 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf35238 <lvm.c:501:34> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
([B149.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf35298 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf35280 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf35260 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf35238 <lvm.c:501:34> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B149.2]->value
   4: MemberExpr 0x5590ecf352d0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf35298 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf35280 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf35260 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf35238 <lvm.c:501:34> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B149.3].n
   5: ImplicitCastExpr 0x5590ecf35328 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf35308 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf352d0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf35298 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf35280 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf35260 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf35238 <lvm.c:501:34> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
([B149.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecf35340 <lvm.c:501:11, col:37>col:22
`-VarDecl 0x5590ecf351d8 <col:11, ./llimits.h:63:27> lvm.c:501:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf35328 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf35308 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf352d0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf35298 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf35280 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf35260 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf35238 <lvm.c:501:34> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf353c8 <lvm.c:502:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   8: ImplicitCastExpr 0x5590ecf35410 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf353f0 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf353c8 <lvm.c:502:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B149.7]) (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclStmt 0x5590ecf35428 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf35368 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf35410 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf353f0 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf353c8 <lvm.c:502:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  10: DeclRefExpr 0x5590ecf354f0 <lvm.c:502:37> 'lua_Number':'double' lvalue Var 0x5590ecf351d8 'nb' 'lua_Number':'double'
nb
  11: ImplicitCastExpr 0x5590ecf35538 <./luaconf.h:539:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf35518 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf354f0 <lvm.c:502:37> 'lua_Number':'double' lvalue Var 0x5590ecf351d8 'nb' 'lua_Number':'double'
([B149.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: UnaryOperator 0x5590ecf35550 <./luaconf.h:539:26, col:29> 'lua_Number':'double' prefix '-'
`-ImplicitCastExpr 0x5590ecf35538 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf35518 <col:27, col:29> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf354f0 <lvm.c:502:37> 'lua_Number':'double' lvalue Var 0x5590ecf351d8 'nb' 'lua_Number':'double'
-[B149.11]
  13: DeclRefExpr 0x5590ecf35440 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
i_o
  14: ImplicitCastExpr 0x5590ecf35468 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf35440 <col:24> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
[B149.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: MemberExpr 0x5590ecf35480 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf35468 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf35440 <col:24> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
[B149.14]->value
  16: MemberExpr 0x5590ecf354b8 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf35480 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf35468 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf35440 <col:24> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
[B149.15].n
  17: BinaryOperator 0x5590ecf355b0 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf354b8 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf35480 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf35468 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf35440 <col:24> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf35590 <col:37, col:39> 'lua_Number':'double'
  `-ParenExpr 0x5590ecf35570 <./luaconf.h:539:25, col:30> 'lua_Number':'double'
    `-UnaryOperator 0x5590ecf35550 <col:26, col:29> 'lua_Number':'double' prefix '-'
      `-ImplicitCastExpr 0x5590ecf35538 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf35518 <col:27, col:29> 'lua_Number':'double' lvalue
          `-DeclRefExpr 0x5590ecf354f0 <lvm.c:502:37> 'lua_Number':'double' lvalue Var 0x5590ecf351d8 'nb' 'lua_Number':'double'
[B149.16] = (([B149.12]))
  18: IntegerLiteral 0x5590ecf35650 <./lua.h:77:22> 'int' 3
3
  19: DeclRefExpr 0x5590ecf355d8 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
i_o
  20: ImplicitCastExpr 0x5590ecf35600 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf355d8 <col:42> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
[B149.19] (ImplicitCastExpr, LValueToRValue, TValue *)
  21: MemberExpr 0x5590ecf35618 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf35600 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf355d8 <col:42> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
[B149.20]->tt
  22: BinaryOperator 0x5590ecf35670 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf35618 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf35600 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf355d8 <col:42> 'TValue *' lvalue Var 0x5590ecf35368 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf35650 <./lua.h:77:22> 'int' 3
[B149.21] = [B149.18]
   Preds (1): B150
   Succs (1): B147

 [B150]
  case OP_UNM:
   1: DeclRefExpr 0x5590ecf34b50 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf35018 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34b50 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B150.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf34d18 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf34ba0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B150.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf34bc0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf34be0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf34c00 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
[B150.5] + [B150.6]
   8: IntegerLiteral 0x5590ecf34c48 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf34c68 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
([B150.7]) + [B150.8]
  10: IntegerLiteral 0x5590ecf34cb0 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf34cd0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf34c90 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf34c68 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf34cb0 <line:37:17> 'int' 9
([B150.9]) + [B150.10]
  12: BinaryOperator 0x5590ecf34d30 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf34d18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf34ba0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf34cf8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf34cd0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf34c90 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf34c68 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf34cb0 <line:37:17> 'int' 9
[B150.4] >> ([B150.11])
  13: IntegerLiteral 0x5590ecf34d78 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf34da8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
(Instruction)[B150.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf34dd0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
~[B150.14]
  16: IntegerLiteral 0x5590ecf34e10 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf34e30 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
([B150.15]) << [B150.16]
  18: UnaryOperator 0x5590ecf34e78 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf34e58 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf34e30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
~([B150.17])
  19: IntegerLiteral 0x5590ecf34eb8 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf34ed8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf34e98 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf34e78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf34e58 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf34e30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf34eb8 <line:88:60> 'int' 0
([B150.18]) << [B150.19]
  21: BinaryOperator 0x5590ecf34f20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf34d58 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf34d30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf34d18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf34ba0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf34cf8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf34cd0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf34c90 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf34c68 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf34cb0 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf34f00 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf34ed8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf34e98 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf34e78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf34e58 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf34e30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf34eb8 <line:88:60> 'int' 0
([B150.12]) & ([B150.20])
  22: CStyleCastExpr 0x5590ecf34fb0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf34f90 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf34f20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf34d58 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf34d30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf34d18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf34ba0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf34cf8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf34cd0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf34c90 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf34c68 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf34cb0 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf34f00 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf34ed8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf34e98 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf34e78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf34e58 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf34e30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf34eb8 <line:88:60> 'int' 0
(int)([B150.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf35030 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf35018 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf34b50 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf34ff8 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf34fd8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf34fb0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf34f90 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf34f20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf34d58 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf34d30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf34d18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf34ba0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf34cf8 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf34cd0 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf34c90 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf34c68 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf34cb0 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf34f00 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf34ed8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf34e98 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf34e78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf34e58 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf34e30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf34eb8 <line:88:60> 'int' 0
[B150.2] + (([B150.22]))
  24: DeclStmt 0x5590ecf35078 <lvm.c:499:9, col:27>col:17
`-VarDecl 0x5590ecf34af0 <col:9, ./llimits.h:63:27> lvm.c:499:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf35058 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf35030 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf35018 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf34b50 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf34ff8 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf34fd8 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf34fb0 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf34f90 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf34f20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf34d58 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf34d30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf34d18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf34ba0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf34b78 <lvm.c:499:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf34cf8 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf34cd0 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf34c90 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf34c68 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf34c28 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf34c00 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf34bc0 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf34be0 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf34c48 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf34cb0 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf34f00 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf34ed8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf34e98 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf34e78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf34e58 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf34e30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf34df0 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf34dd0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf34da8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf34d78 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf34e10 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf34eb8 <line:88:60> 'int' 0
TValue *rb = (base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
  25: DeclRefExpr 0x5590ecf35090 <lvm.c:500:24> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
rb
  26: ImplicitCastExpr 0x5590ecf350d8 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf350b8 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf35090 <lvm.c:500:24> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
([B150.25]) (ImplicitCastExpr, LValueToRValue, TValue *)
  27: MemberExpr 0x5590ecf350f0 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf350d8 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf350b8 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf35090 <lvm.c:500:24> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
[B150.26]->tt
  28: ImplicitCastExpr 0x5590ecf35168 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf35128 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf350f0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf350d8 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf350b8 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf35090 <lvm.c:500:24> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
([B150.27]) (ImplicitCastExpr, LValueToRValue, int)
  29: IntegerLiteral 0x5590ecf35148 <./lua.h:77:22> 'int' 3
3
  30: BinaryOperator 0x5590ecf35180 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf35168 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf35128 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf350f0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf350d8 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf350b8 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf35090 <lvm.c:500:24> 'TValue *' lvalue Var 0x5590ecf34af0 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf35148 <./lua.h:77:22> 'int' 3
[B150.28] == [B150.29]
   T: if ([B150.30])
   Preds (1): B2
   Succs (2): B149 B148

 [B151]
   T: continue;
   Preds (2): B152 B153
   Succs (1): B1

 [B152]
   1: DeclRefExpr 0x5590ecf34628 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf34650 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34628 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B152.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf345b0 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf345d8 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf345b0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf345f0 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf345d8 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf345b0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.4]->savedpc
   6: BinaryOperator 0x5590ecf34668 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf345f0 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf345d8 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf345b0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf34650 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf34628 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B152.5] = [B152.2]
   7: DeclRefExpr 0x5590ecf34690 <lvm.c:372:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf34780 <lvm.c:372:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf34690 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B152.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf346b8 <lvm.c:372:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf347e8 <lvm.c:372:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf346b8 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf346e0 <lvm.c:372:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf34800 <lvm.c:372:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf346e0 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B152.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf34708 <lvm.c:372:32> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf34818 <lvm.c:372:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34708 <col:32> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
[B152.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf34830 <lvm.c:372:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf34818 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf34708 <col:32> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
[B152.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf34730 <lvm.c:372:36> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
rc
  17: ImplicitCastExpr 0x5590ecf34848 <lvm.c:372:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34730 <col:36> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
[B152.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf34860 <lvm.c:372:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf34848 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf34730 <col:36> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
[B152.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf34758 <lvm.c:495:31> 'int' EnumConstant 0x5590ece94610 'TM_POW' 'int'
TM_POW
  20: ImplicitCastExpr 0x5590ecf34878 <lvm.c:495:31> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf34758 <col:31> 'int' EnumConstant 0x5590ece94610 'TM_POW' 'int'
[B152.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf34798 <lvm.c:372:19, col:42> 'void'
|-ImplicitCastExpr 0x5590ecf34780 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf34690 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf347e8 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf346b8 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf34800 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf346e0 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf34830 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf34818 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf34708 <col:32> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf34860 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf34848 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf34730 <col:36> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
`-ImplicitCastExpr 0x5590ecf34878 <line:495:31> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf34758 <col:31> 'int' EnumConstant 0x5590ece94610 'TM_POW' 'int'
[B152.8]([B152.10], [B152.12], [B152.15], [B152.18], [B152.20])
  22: DeclRefExpr 0x5590ecf348e0 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf34908 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf348e0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf34920 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf34908 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf348e0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.23]->base
  25: ImplicitCastExpr 0x5590ecf34958 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf34920 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf34908 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf348e0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf348b8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf34970 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf348b8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf34958 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf34920 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf34908 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf348e0 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B152.26] = [B152.25]
   Preds (2): B154 B155
   Succs (1): B151

 [B153]
   1: DeclRefExpr 0x5590ecf33ee8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf33f30 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf33f10 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf33ee8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
([B153.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf33f48 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf33f30 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf33f10 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf33ee8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
[B153.2]->value
   4: MemberExpr 0x5590ecf33f80 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf33f48 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf33f30 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf33f10 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf33ee8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
[B153.3].n
   5: ImplicitCastExpr 0x5590ecf33fd8 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf33fb8 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf33f80 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf33f48 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf33f30 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf33f10 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf33ee8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
([B153.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecfa08a0 <lvm.c:368:22, ./llimits.h:63:27>lvm.c:368:22
`-VarDecl 0x5590ecf33e88 <col:11, ./llimits.h:63:27> lvm.c:368:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf33fd8 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf33fb8 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf33f80 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf33f48 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf33f30 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf33f10 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf33ee8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf34060 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
rc
   8: ImplicitCastExpr 0x5590ecf340a8 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf34088 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf34060 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
([B153.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf340c0 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf340a8 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf34088 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf34060 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
[B153.8]->value
  10: MemberExpr 0x5590ecf340f8 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf340c0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf340a8 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf34088 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf34060 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
[B153.9].n
  11: ImplicitCastExpr 0x5590ecf34150 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf34130 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf340f8 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf340c0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf340a8 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf34088 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf34060 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
([B153.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: DeclStmt 0x5590ecfa0888 <lvm.c:368:39, ./llimits.h:63:27>lvm.c:368:39
`-VarDecl 0x5590ecf34000 <col:11, ./llimits.h:63:27> lvm.c:368:39 used nc 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf34150 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf34130 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf340f8 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf340c0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf340a8 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf34088 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf34060 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
lua_Number nc = ((rc)->value.n);
  13: DeclRefExpr 0x5590ecf34208 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf34250 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf34230 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf34208 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B153.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclStmt 0x5590ecf34268 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf341a8 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf34250 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf34230 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf34208 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  16: DeclRefExpr 0x5590ecf34330 <./luaconf.h:538:27> 'double (double, double)' Function 0x5590ecdb93f0 'pow' 'double (double, double)'
pow
  17: ImplicitCastExpr 0x5590ecf343a8 <./luaconf.h:538:27> 'double (*)(double, double)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf34330 <col:27> 'double (double, double)' Function 0x5590ecdb93f0 'pow' 'double (double, double)'
[B153.16] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(double, double))
  18: DeclRefExpr 0x5590ecf34358 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf33e88 'nb' 'lua_Number':'double'
nb
  19: ImplicitCastExpr 0x5590ecf343f8 <lvm.c:369:28> 'lua_Number':'double' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34358 <col:28> 'lua_Number':'double' lvalue Var 0x5590ecf33e88 'nb' 'lua_Number':'double'
[B153.18] (ImplicitCastExpr, LValueToRValue, lua_Number)
  20: DeclRefExpr 0x5590ecf34380 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf34000 'nc' 'lua_Number':'double'
nc
  21: ImplicitCastExpr 0x5590ecf34410 <lvm.c:369:32> 'lua_Number':'double' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34380 <col:32> 'lua_Number':'double' lvalue Var 0x5590ecf34000 'nc' 'lua_Number':'double'
[B153.20] (ImplicitCastExpr, LValueToRValue, lua_Number)
  22: CallExpr 0x5590ecf343c0 <./luaconf.h:538:27, col:34> 'double'
|-ImplicitCastExpr 0x5590ecf343a8 <col:27> 'double (*)(double, double)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf34330 <col:27> 'double (double, double)' Function 0x5590ecdb93f0 'pow' 'double (double, double)'
|-ImplicitCastExpr 0x5590ecf343f8 <lvm.c:369:28> 'lua_Number':'double' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf34358 <col:28> 'lua_Number':'double' lvalue Var 0x5590ecf33e88 'nb' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf34410 <col:32> 'lua_Number':'double' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf34380 <col:32> 'lua_Number':'double' lvalue Var 0x5590ecf34000 'nc' 'lua_Number':'double'
[B153.17]([B153.19], [B153.21])
  23: DeclRefExpr 0x5590ecf34280 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
i_o
  24: ImplicitCastExpr 0x5590ecf342a8 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34280 <col:24> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
[B153.23] (ImplicitCastExpr, LValueToRValue, TValue *)
  25: MemberExpr 0x5590ecf342c0 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf342a8 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf34280 <col:24> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
[B153.24]->value
  26: MemberExpr 0x5590ecf342f8 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf342c0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf342a8 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf34280 <col:24> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
[B153.25].n
  27: BinaryOperator 0x5590ecf34468 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf342f8 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf342c0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf342a8 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf34280 <col:24> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf34448 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf34428 <./luaconf.h:538:26, col:35> 'double'
    `-CallExpr 0x5590ecf343c0 <col:27, col:34> 'double'
      |-ImplicitCastExpr 0x5590ecf343a8 <col:27> 'double (*)(double, double)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5590ecf34330 <col:27> 'double (double, double)' Function 0x5590ecdb93f0 'pow' 'double (double, double)'
      |-ImplicitCastExpr 0x5590ecf343f8 <lvm.c:369:28> 'lua_Number':'double' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf34358 <col:28> 'lua_Number':'double' lvalue Var 0x5590ecf33e88 'nb' 'lua_Number':'double'
      `-ImplicitCastExpr 0x5590ecf34410 <col:32> 'lua_Number':'double' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf34380 <col:32> 'lua_Number':'double' lvalue Var 0x5590ecf34000 'nc' 'lua_Number':'double'
[B153.26] = (([B153.22]))
  28: IntegerLiteral 0x5590ecf34508 <./lua.h:77:22> 'int' 3
3
  29: DeclRefExpr 0x5590ecf34490 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
i_o
  30: ImplicitCastExpr 0x5590ecf344b8 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf34490 <col:42> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
[B153.29] (ImplicitCastExpr, LValueToRValue, TValue *)
  31: MemberExpr 0x5590ecf344d0 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf344b8 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf34490 <col:42> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
[B153.30]->tt
  32: BinaryOperator 0x5590ecf34528 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf344d0 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf344b8 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf34490 <col:42> 'TValue *' lvalue Var 0x5590ecf341a8 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf34508 <./lua.h:77:22> 'int' 3
[B153.31] = [B153.28]
   Preds (1): B154
   Succs (1): B151

 [B154]
   1: DeclRefExpr 0x5590ecf33d18 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
rc
   2: ImplicitCastExpr 0x5590ecf33d60 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf33d40 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf33d18 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
([B154.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf33d78 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf33d60 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf33d40 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf33d18 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
[B154.2]->tt
   4: ImplicitCastExpr 0x5590ecf33df0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf33db0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf33d78 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf33d60 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf33d40 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf33d18 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
([B154.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf33dd0 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf33e08 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf33df0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf33db0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf33d78 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf33d60 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf33d40 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf33d18 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf32a48 'rc' 'TValue *'
`-IntegerLiteral 0x5590ecf33dd0 <./lua.h:77:22> 'int' 3
[B154.4] == [B154.5]
   T: if ([B155.8]) && ([B154.6])
   Preds (1): B155
   Succs (2): B153 B152

 [B155]
   1: ConditionalOperator 0x5590ecf33b78 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf33018 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf32ff0 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf32ee0 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf32ec0 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf32ea0 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf32e78 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf32e58 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf32de8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf32c20 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf32bf8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf32be0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf32bc0 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf32b98 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf32dc8 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf32da0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf32d60 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf32d40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf32d80 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf32fd0 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf32fa8 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf32f00 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf32f88 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf32f60 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf32f20 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf32f40 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf33698 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf33680 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf33038 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf33660 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf33638 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf33500 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf334e0 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf33478 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf33458 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf33430 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf33410 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf33618 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf335f8 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf335d0 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf33528 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf335b0 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf33588 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf33b50 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf33b38 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf336c0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf33b18 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf33af8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf33ad0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf33a98 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf33a28 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf33860 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf33838 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf33820 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf33800 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf337d8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf33a08 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf339e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf339a0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf33980 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf339c0 <line:92:60> 'int' 0
([B158.26]) ? [B156.29] : [B157.21]
   2: DeclStmt 0x5590ecf33bc8 <lvm.c:366:9, col:28>col:17
`-VarDecl 0x5590ecf32a48 <col:9, ./llimits.h:63:27> lvm.c:366:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf33ba8 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf33b78 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf33018 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf32ff0 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf32ee0 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf32ec0 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf32ea0 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf32e78 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf32e58 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf32de8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf32c20 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf32bf8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf32be0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf32bc0 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf32b98 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf32dc8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf32da0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf32d60 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf32d40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf32d80 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf32fd0 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf32fa8 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf32f00 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf32f88 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf32f60 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf32f20 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf32f40 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf33698 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf33680 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf33038 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf33660 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf33638 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf33500 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf334e0 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf33478 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf33458 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf33430 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf33410 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf33618 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf335f8 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf335d0 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf33528 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf335b0 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf33588 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf33b50 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf33b38 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf336c0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf33b18 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf33af8 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf33ad0 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf33a98 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf33a28 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf33860 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf33838 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf33820 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf33800 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf337d8 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf33a08 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf339e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf339a0 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf33980 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf339c0 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf33be0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
rb
   4: ImplicitCastExpr 0x5590ecf33c28 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf33c08 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf33be0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
([B155.3]) (ImplicitCastExpr, LValueToRValue, TValue *)
   5: MemberExpr 0x5590ecf33c40 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf33c28 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf33c08 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf33be0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
[B155.4]->tt
   6: ImplicitCastExpr 0x5590ecf33cb8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf33c78 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf33c40 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf33c28 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf33c08 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf33be0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
([B155.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5590ecf33c98 <./lua.h:77:22> 'int' 3
3
   8: BinaryOperator 0x5590ecf33cd0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf33cb8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf33c78 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf33c40 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf33c28 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf33c08 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf33be0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf31770 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf33c98 <./lua.h:77:22> 'int' 3
[B155.6] == [B155.7]
   T: ([B155.8]) && ...
   Preds (2): B156 B157
   Succs (2): B154 B152

 [B156]
   1: DeclRefExpr 0x5590ecf33038 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf33680 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf33038 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B156.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf33198 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B156.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf330a8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf330c8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf330e8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
[B156.5] + [B156.6]
   8: IntegerLiteral 0x5590ecf33130 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf33150 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
([B156.7]) + [B156.8]
  10: BinaryOperator 0x5590ecf331b0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
[B156.4] >> ([B156.9])
  11: IntegerLiteral 0x5590ecf331f8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf33228 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
(Instruction)[B156.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf33250 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
~[B156.12]
  14: IntegerLiteral 0x5590ecf33290 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf332b0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
([B156.13]) << [B156.14]
  16: UnaryOperator 0x5590ecf332f8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
~([B156.15])
  17: IntegerLiteral 0x5590ecf33338 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf33358 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
([B156.16]) << [B156.17]
  19: BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
([B156.10]) & ([B156.18])
  20: CStyleCastExpr 0x5590ecf33430 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf33410 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
(int)([B156.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf33500 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf334e0 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf33478 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf33458 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf33430 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf33410 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
(int)((([B156.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf33528 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf33548 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf33568 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf33588 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
[B156.23] - [B156.24]
  26: BinaryOperator 0x5590ecf335d0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf33528 <col:17> 'int' 1
`-ParenExpr 0x5590ecf335b0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf33588 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
[B156.22] << ([B156.25])
  27: UnaryOperator 0x5590ecf33618 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf335f8 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf335d0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf33528 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf335b0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf33588 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
~([B156.26])
  28: BinaryOperator 0x5590ecf33638 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf33500 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf334e0 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf33478 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf33458 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf33430 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf33410 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf33618 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf335f8 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf335d0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf33528 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf335b0 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf33588 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
[B156.21] & [B156.27]
  29: BinaryOperator 0x5590ecf33698 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf33680 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf33038 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf33660 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf33638 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf33500 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf334e0 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf33478 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf33458 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf33430 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf33410 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf333a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf331d8 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf331b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf33198 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf33088 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf33060 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf33178 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf33150 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf33110 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf330e8 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf330a8 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf330c8 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf33130 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf33380 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf33358 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf33318 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf332f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf332d8 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf332b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf33270 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf33250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf33228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf331f8 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf33290 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf33338 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf33618 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf335f8 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf335d0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf33528 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf335b0 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf33588 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf33548 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf33568 <line:119:32> 'int' 1
[B156.2] + ([B156.28])
   Preds (1): B158
   Succs (1): B155

 [B157]
   1: DeclRefExpr 0x5590ecf336c0 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf33b38 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf336c0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B157.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf33820 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B157.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf33730 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf33750 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf33770 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
[B157.5] + [B157.6]
   8: IntegerLiteral 0x5590ecf337b8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf337d8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
([B157.7]) + [B157.8]
  10: BinaryOperator 0x5590ecf33838 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf33820 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf33800 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf337d8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
[B157.4] >> ([B157.9])
  11: IntegerLiteral 0x5590ecf33880 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf338b0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
(Instruction)[B157.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf338d8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
~[B157.12]
  14: IntegerLiteral 0x5590ecf33918 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf33938 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
([B157.13]) << [B157.14]
  16: UnaryOperator 0x5590ecf33980 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
~([B157.15])
  17: IntegerLiteral 0x5590ecf339c0 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf339e0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf339a0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf33980 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf339c0 <line:92:60> 'int' 0
([B157.16]) << [B157.17]
  19: BinaryOperator 0x5590ecf33a28 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf33860 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf33838 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf33820 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf33800 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf337d8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf33a08 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf339e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf339a0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf33980 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf339c0 <line:92:60> 'int' 0
([B157.10]) & ([B157.18])
  20: CStyleCastExpr 0x5590ecf33ad0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf33a98 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf33a28 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf33860 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf33838 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf33820 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf33800 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf337d8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf33a08 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf339e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf339a0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf33980 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf339c0 <line:92:60> 'int' 0
(int)([B157.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf33b50 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf33b38 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf336c0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf33b18 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf33af8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf33ad0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf33a98 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf33a28 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf33860 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf33838 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf33820 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf33710 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf336e8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf33800 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf337d8 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf33798 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf33770 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf33730 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf33750 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf337b8 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf33a08 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf339e0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf339a0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf33980 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf33960 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf33938 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf338f8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf338d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf338b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf33880 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf33918 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf339c0 <line:92:60> 'int' 0
[B157.2] + (([B157.20]))
   Preds (1): B158
   Succs (1): B155

 [B158]
   1: ConditionalOperator 0x5590ecf329d0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf31db8 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf31d90 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf31c80 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf31c60 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf31c40 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf31c18 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf31bf8 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf31b88 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf319b0 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf31988 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf31970 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf31950 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf31928 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf31b68 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf31b40 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf31b00 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf31ae0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf31b20 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf31d70 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf31d48 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf31ca0 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf31d28 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf31d00 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf31cc0 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf31ce0 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf324a0 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf32488 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf31dd8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf32468 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf32440 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf32308 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf322e8 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf32280 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf32260 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf32238 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf32218 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf32420 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf32400 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf323d8 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf32330 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf323b8 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf32390 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf329a8 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf32990 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf324c8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf32970 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf32950 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf32928 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf32908 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf32898 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf326d0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf326a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf32690 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf32670 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf32648 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf32878 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf32850 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf32810 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf327f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf32830 <line:88:60> 'int' 0
([B161.26]) ? [B159.31] : [B160.23]
   2: DeclStmt 0x5590ecf32a20 <lvm.c:365:9, col:28>col:17
`-VarDecl 0x5590ecf31770 <col:9, ./llimits.h:63:27> lvm.c:365:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf32a00 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf329d0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf31db8 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf31d90 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf31c80 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf31c60 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf31c40 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf31c18 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf31bf8 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf31b88 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf319b0 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf31988 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf31970 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf31950 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf31928 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf31b68 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf31b40 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf31b00 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf31ae0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf31b20 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf31d70 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf31d48 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf31ca0 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf31d28 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf31d00 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf31cc0 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf31ce0 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf324a0 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf32488 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf31dd8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf32468 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf32440 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf32308 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf322e8 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf32280 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf32260 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf32238 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf32218 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf32420 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf32400 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf323d8 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf32330 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf323b8 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf32390 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf329a8 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf32990 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf324c8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf32970 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf32950 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf32928 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf32908 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf32898 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf326d0 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf326a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf32690 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf32670 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf32648 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf32878 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf32850 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf32810 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf327f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf32830 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf32be0 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B158.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf32af0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf32b10 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf32b30 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
[B158.5] + [B158.6]
   8: IntegerLiteral 0x5590ecf32b78 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf32b98 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
([B158.7]) + [B158.8]
  10: BinaryOperator 0x5590ecf32bf8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf32be0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf32bc0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf32b98 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
[B158.4] >> ([B158.9])
  11: IntegerLiteral 0x5590ecf32c40 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf32c70 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
(Instruction)[B158.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf32c98 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
~[B158.12]
  14: IntegerLiteral 0x5590ecf32cd8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf32cf8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
([B158.13]) << [B158.14]
  16: UnaryOperator 0x5590ecf32d40 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
~([B158.15])
  17: IntegerLiteral 0x5590ecf32d80 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf32da0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf32d60 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf32d40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf32d80 <line:92:60> 'int' 0
([B158.16]) << [B158.17]
  19: BinaryOperator 0x5590ecf32de8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf32c20 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf32bf8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf32be0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf32bc0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf32b98 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf32dc8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf32da0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf32d60 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf32d40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf32d80 <line:92:60> 'int' 0
([B158.10]) & ([B158.18])
  20: CStyleCastExpr 0x5590ecf32e78 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf32e58 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf32de8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf32c20 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf32bf8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf32be0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf32bc0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf32b98 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf32dc8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf32da0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf32d60 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf32d40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf32d80 <line:92:60> 'int' 0
(int)([B158.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf32f00 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf32f20 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf32f40 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf32f60 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf32f20 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf32f40 <line:119:32> 'int' 1
[B158.22] - [B158.23]
  25: BinaryOperator 0x5590ecf32fa8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf32f00 <col:17> 'int' 1
`-ParenExpr 0x5590ecf32f88 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf32f60 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf32f20 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf32f40 <line:119:32> 'int' 1
[B158.21] << ([B158.24])
  26: BinaryOperator 0x5590ecf32ff0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf32ee0 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf32ec0 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf32ea0 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf32e78 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf32e58 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf32de8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf32c20 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf32bf8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf32be0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf32ad0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf32aa8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf32bc0 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf32b98 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf32b58 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf32b30 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf32af0 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf32b10 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf32b78 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf32dc8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf32da0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf32d60 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf32d40 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf32d20 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf32cf8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf32cb8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf32c98 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf32c70 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf32c40 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf32cd8 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf32d80 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf32fd0 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf32fa8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf32f00 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf32f88 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf32f60 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf32f20 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf32f40 <line:119:32> 'int' 1
((([B158.20]))) & ([B158.25])
   T: ([B158.26]) ? ... : ...
   Preds (2): B159 B160
   Succs (2): B156 B157

 [B159]
   1: DeclRefExpr 0x5590ecf31dd8 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf32488 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31dd8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B159.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf31fa0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B159.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf31e48 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf31e68 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf31e88 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
[B159.5] + [B159.6]
   8: IntegerLiteral 0x5590ecf31ed0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf31ef0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
([B159.7]) + [B159.8]
  10: IntegerLiteral 0x5590ecf31f38 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf31f58 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
([B159.9]) + [B159.10]
  12: BinaryOperator 0x5590ecf31fb8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
[B159.4] >> ([B159.11])
  13: IntegerLiteral 0x5590ecf32000 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf32030 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
(Instruction)[B159.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf32058 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
~[B159.14]
  16: IntegerLiteral 0x5590ecf32098 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf320b8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
([B159.15]) << [B159.16]
  18: UnaryOperator 0x5590ecf32100 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
~([B159.17])
  19: IntegerLiteral 0x5590ecf32140 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf32160 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
([B159.18]) << [B159.19]
  21: BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
([B159.12]) & ([B159.20])
  22: CStyleCastExpr 0x5590ecf32238 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf32218 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
(int)([B159.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf32308 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf322e8 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf32280 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf32260 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf32238 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf32218 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
(int)((([B159.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf32330 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf32350 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf32370 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf32390 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
[B159.25] - [B159.26]
  28: BinaryOperator 0x5590ecf323d8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf32330 <col:17> 'int' 1
`-ParenExpr 0x5590ecf323b8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf32390 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
[B159.24] << ([B159.27])
  29: UnaryOperator 0x5590ecf32420 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf32400 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf323d8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf32330 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf323b8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf32390 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
~([B159.28])
  30: BinaryOperator 0x5590ecf32440 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf32308 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf322e8 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf32280 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf32260 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf32238 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf32218 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf32420 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf32400 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf323d8 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf32330 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf323b8 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf32390 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
[B159.23] & [B159.29]
  31: BinaryOperator 0x5590ecf324a0 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf32488 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf31dd8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf32468 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf32440 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf32308 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf322e8 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf32280 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf32260 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf32238 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf32218 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf321a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf31fe0 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf31fb8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf31fa0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf31e28 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf31e00 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf31f80 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf31f58 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf31f18 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf31ef0 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf31eb0 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf31e88 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf31e48 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf31e68 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf31ed0 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf31f38 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf32188 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf32160 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf32120 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf32100 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf320e0 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf320b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf32078 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf32058 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf32030 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf32000 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf32098 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf32140 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf32420 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf32400 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf323d8 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf32330 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf323b8 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf32390 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf32350 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf32370 <line:119:32> 'int' 1
[B159.2] + ([B159.30])
   Preds (1): B161
   Succs (1): B158

 [B160]
   1: DeclRefExpr 0x5590ecf324c8 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf32990 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf324c8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B160.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf32690 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B160.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf32538 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf32558 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf32578 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
[B160.5] + [B160.6]
   8: IntegerLiteral 0x5590ecf325c0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf325e0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
([B160.7]) + [B160.8]
  10: IntegerLiteral 0x5590ecf32628 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf32648 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
([B160.9]) + [B160.10]
  12: BinaryOperator 0x5590ecf326a8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf32690 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf32670 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf32648 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
[B160.4] >> ([B160.11])
  13: IntegerLiteral 0x5590ecf326f0 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf32720 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
(Instruction)[B160.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf32748 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
~[B160.14]
  16: IntegerLiteral 0x5590ecf32788 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf327a8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
([B160.15]) << [B160.16]
  18: UnaryOperator 0x5590ecf327f0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
~([B160.17])
  19: IntegerLiteral 0x5590ecf32830 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf32850 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf32810 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf327f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf32830 <line:88:60> 'int' 0
([B160.18]) << [B160.19]
  21: BinaryOperator 0x5590ecf32898 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf326d0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf326a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf32690 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf32670 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf32648 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf32878 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf32850 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf32810 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf327f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf32830 <line:88:60> 'int' 0
([B160.12]) & ([B160.20])
  22: CStyleCastExpr 0x5590ecf32928 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf32908 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf32898 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf326d0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf326a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf32690 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf32670 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf32648 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf32878 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf32850 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf32810 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf327f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf32830 <line:88:60> 'int' 0
(int)([B160.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf329a8 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf32990 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf324c8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf32970 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf32950 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf32928 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf32908 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf32898 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf326d0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf326a8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf32690 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf32518 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf324f0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf32670 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf32648 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf32608 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf325e0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf325a0 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf32578 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf32538 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf32558 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf325c0 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf32628 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf32878 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf32850 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf32810 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf327f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf327d0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf327a8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf32768 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf32748 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf32720 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf326f0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf32788 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf32830 <line:88:60> 'int' 0
[B160.2] + (([B160.22]))
   Preds (1): B161
   Succs (1): B158

 [B161]
  case OP_POW:
   1: DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf31970 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B161.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf31818 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf31838 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf31858 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
[B161.3] + [B161.4]
   6: IntegerLiteral 0x5590ecf318a0 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf318c0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
([B161.5]) + [B161.6]
   8: IntegerLiteral 0x5590ecf31908 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf31928 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
([B161.7]) + [B161.8]
  10: BinaryOperator 0x5590ecf31988 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf31970 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf31950 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf31928 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
[B161.2] >> ([B161.9])
  11: IntegerLiteral 0x5590ecf319d0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf31a00 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
(Instruction)[B161.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf31a28 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
~[B161.12]
  14: IntegerLiteral 0x5590ecf31a68 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf31a88 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
([B161.13]) << [B161.14]
  16: UnaryOperator 0x5590ecf31ae0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
~([B161.15])
  17: IntegerLiteral 0x5590ecf31b20 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf31b40 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf31b00 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf31ae0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf31b20 <line:88:60> 'int' 0
([B161.16]) << [B161.17]
  19: BinaryOperator 0x5590ecf31b88 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf319b0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf31988 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf31970 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf31950 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf31928 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf31b68 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf31b40 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf31b00 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf31ae0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf31b20 <line:88:60> 'int' 0
([B161.10]) & ([B161.18])
  20: CStyleCastExpr 0x5590ecf31c18 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf31bf8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf31b88 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf319b0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf31988 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf31970 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf31950 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf31928 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf31b68 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf31b40 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf31b00 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf31ae0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf31b20 <line:88:60> 'int' 0
(int)([B161.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf31ca0 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf31cc0 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf31ce0 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf31d00 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf31cc0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf31ce0 <line:119:32> 'int' 1
[B161.22] - [B161.23]
  25: BinaryOperator 0x5590ecf31d48 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf31ca0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf31d28 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf31d00 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf31cc0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf31ce0 <line:119:32> 'int' 1
[B161.21] << ([B161.24])
  26: BinaryOperator 0x5590ecf31d90 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf31c80 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf31c60 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf31c40 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf31c18 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf31bf8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf31b88 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf319b0 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf31988 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf31970 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf317f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf317d0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf31950 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf31928 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf318e8 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf318c0 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf31880 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf31858 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf31818 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf31838 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf318a0 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf31908 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf31b68 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf31b40 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf31b00 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf31ae0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf31ac0 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf31a88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf31a48 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf31a28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf31a00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf319d0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf31a68 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf31b20 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf31d70 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf31d48 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf31ca0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf31d28 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf31d00 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf31cc0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf31ce0 <line:119:32> 'int' 1
((([B161.20]))) & ([B161.25])
   T: ([B161.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B159 B160

 [B162]
   T: continue;
   Preds (2): B163 B164
   Succs (1): B1

 [B163]
   1: DeclRefExpr 0x5590ecf312a8 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf312d0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf312a8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B163.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf31230 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf31258 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31230 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf31270 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf31258 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf31230 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.4]->savedpc
   6: BinaryOperator 0x5590ecf312e8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf31270 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf31258 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf31230 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf312d0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf312a8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B163.5] = [B163.2]
   7: DeclRefExpr 0x5590ecf31310 <lvm.c:372:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf31400 <lvm.c:372:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf31310 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B163.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf31338 <lvm.c:372:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf31468 <lvm.c:372:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31338 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf31360 <lvm.c:372:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf31480 <lvm.c:372:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31360 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B163.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf31388 <lvm.c:372:32> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf31498 <lvm.c:372:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31388 <col:32> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
[B163.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf314b0 <lvm.c:372:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf31498 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf31388 <col:32> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
[B163.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf313b0 <lvm.c:372:36> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
rc
  17: ImplicitCastExpr 0x5590ecf314c8 <lvm.c:372:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf313b0 <col:36> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
[B163.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf314e0 <lvm.c:372:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf314c8 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf313b0 <col:36> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
[B163.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf313d8 <lvm.c:491:31> 'int' EnumConstant 0x5590ece945c8 'TM_MOD' 'int'
TM_MOD
  20: ImplicitCastExpr 0x5590ecf314f8 <lvm.c:491:31> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf313d8 <col:31> 'int' EnumConstant 0x5590ece945c8 'TM_MOD' 'int'
[B163.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf31418 <lvm.c:372:19, col:42> 'void'
|-ImplicitCastExpr 0x5590ecf31400 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf31310 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf31468 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf31338 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf31480 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf31360 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf314b0 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf31498 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf31388 <col:32> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf314e0 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf314c8 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf313b0 <col:36> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
`-ImplicitCastExpr 0x5590ecf314f8 <line:491:31> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf313d8 <col:31> 'int' EnumConstant 0x5590ece945c8 'TM_MOD' 'int'
[B163.8]([B163.10], [B163.12], [B163.15], [B163.18], [B163.20])
  22: DeclRefExpr 0x5590ecf31560 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf31588 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31560 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf315a0 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf31588 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf31560 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.23]->base
  25: ImplicitCastExpr 0x5590ecf315d8 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf315a0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf31588 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf31560 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf31538 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf315f0 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf31538 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf315d8 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf315a0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf31588 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf31560 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B163.26] = [B163.25]
   Preds (2): B165 B166
   Succs (1): B162

 [B164]
   1: DeclRefExpr 0x5590ecf309f8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf30a40 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf30a20 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf309f8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
([B164.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf30a58 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf30a40 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf30a20 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf309f8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
[B164.2]->value
   4: MemberExpr 0x5590ecf30a90 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf30a58 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf30a40 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf30a20 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf309f8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
[B164.3].n
   5: ImplicitCastExpr 0x5590ecf30ae8 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf30ac8 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf30a90 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf30a58 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf30a40 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf30a20 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf309f8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
([B164.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecfa4238 <lvm.c:368:22, ./llimits.h:63:27>lvm.c:368:22
`-VarDecl 0x5590ecf30998 <col:11, ./llimits.h:63:27> lvm.c:368:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf30ae8 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf30ac8 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf30a90 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf30a58 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf30a40 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf30a20 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf309f8 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf30b70 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
rc
   8: ImplicitCastExpr 0x5590ecf30bb8 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf30b98 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf30b70 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
([B164.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf30bd0 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf30bb8 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf30b98 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf30b70 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
[B164.8]->value
  10: MemberExpr 0x5590ecf30c08 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf30bd0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf30bb8 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf30b98 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf30b70 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
[B164.9].n
  11: ImplicitCastExpr 0x5590ecf30c60 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf30c40 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf30c08 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf30bd0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf30bb8 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf30b98 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf30b70 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
([B164.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: DeclStmt 0x5590ecfa3e20 <lvm.c:368:39, ./llimits.h:63:27>lvm.c:368:39
`-VarDecl 0x5590ecf30b10 <col:11, ./llimits.h:63:27> lvm.c:368:39 used nc 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf30c60 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf30c40 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf30c08 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf30bd0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf30bb8 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf30b98 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf30b70 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
lua_Number nc = ((rc)->value.n);
  13: DeclRefExpr 0x5590ecf30d18 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf30d60 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf30d40 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf30d18 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B164.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclStmt 0x5590ecf30d78 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf30cb8 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf30d60 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf30d40 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf30d18 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  16: DeclRefExpr 0x5590ecf30e40 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
nb
  17: ImplicitCastExpr 0x5590ecf31068 <./luaconf.h:537:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf30e68 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf30e40 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
([B164.16]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: DeclRefExpr 0x5590ecf30e88 <./luaconf.h:537:33> 'double (double)' Function 0x5590ecdbb868 'floor' 'double (double)'
floor
  19: ImplicitCastExpr 0x5590ecf30f98 <./luaconf.h:537:33> 'double (*)(double)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf30e88 <col:33> 'double (double)' Function 0x5590ecdbb868 'floor' 'double (double)'
[B164.18] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(double))
  20: DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
nb
  21: ImplicitCastExpr 0x5590ecf30f40 <./luaconf.h:537:39, col:41> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf30ed8 <col:39, col:41> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
([B164.20]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  22: DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
nc
  23: ImplicitCastExpr 0x5590ecf30f58 <./luaconf.h:537:43, col:45> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf30f20 <col:43, col:45> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
([B164.22]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  24: BinaryOperator 0x5590ecf30f70 <./luaconf.h:537:39, col:45> 'double' '/'
|-ImplicitCastExpr 0x5590ecf30f40 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf30ed8 <col:39, col:41> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf30f58 <./luaconf.h:537:43, col:45> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf30f20 <col:43, col:45> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
[B164.21] / [B164.23]
  25: CallExpr 0x5590ecf30fb0 <./luaconf.h:537:33, col:46> 'double'
|-ImplicitCastExpr 0x5590ecf30f98 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf30e88 <col:33> 'double (double)' Function 0x5590ecdbb868 'floor' 'double (double)'
`-BinaryOperator 0x5590ecf30f70 <col:39, col:45> 'double' '/'
  |-ImplicitCastExpr 0x5590ecf30f40 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
  | `-ParenExpr 0x5590ecf30ed8 <col:39, col:41> 'lua_Number':'double' lvalue
  |   `-DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
  `-ImplicitCastExpr 0x5590ecf30f58 <./luaconf.h:537:43, col:45> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf30f20 <col:43, col:45> 'lua_Number':'double' lvalue
      `-DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
[B164.19]([B164.24])
  26: DeclRefExpr 0x5590ecf30fe0 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
nc
  27: ImplicitCastExpr 0x5590ecf31028 <./luaconf.h:537:48, col:50> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf31008 <col:48, col:50> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf30fe0 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
([B164.26]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  28: BinaryOperator 0x5590ecf31040 <./luaconf.h:537:33, col:50> 'double' '*'
|-CallExpr 0x5590ecf30fb0 <col:33, col:46> 'double'
| |-ImplicitCastExpr 0x5590ecf30f98 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5590ecf30e88 <col:33> 'double (double)' Function 0x5590ecdbb868 'floor' 'double (double)'
| `-BinaryOperator 0x5590ecf30f70 <col:39, col:45> 'double' '/'
|   |-ImplicitCastExpr 0x5590ecf30f40 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf30ed8 <col:39, col:41> 'lua_Number':'double' lvalue
|   |   `-DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
|   `-ImplicitCastExpr 0x5590ecf30f58 <./luaconf.h:537:43, col:45> 'lua_Number':'double' <LValueToRValue>
|     `-ParenExpr 0x5590ecf30f20 <col:43, col:45> 'lua_Number':'double' lvalue
|       `-DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf31028 <./luaconf.h:537:48, col:50> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf31008 <col:48, col:50> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf30fe0 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
[B164.25] * [B164.27]
  29: BinaryOperator 0x5590ecf31080 <./luaconf.h:537:27, col:50> 'double' '-'
|-ImplicitCastExpr 0x5590ecf31068 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf30e68 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf30e40 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
`-BinaryOperator 0x5590ecf31040 <./luaconf.h:537:33, col:50> 'double' '*'
  |-CallExpr 0x5590ecf30fb0 <col:33, col:46> 'double'
  | |-ImplicitCastExpr 0x5590ecf30f98 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x5590ecf30e88 <col:33> 'double (double)' Function 0x5590ecdbb868 'floor' 'double (double)'
  | `-BinaryOperator 0x5590ecf30f70 <col:39, col:45> 'double' '/'
  |   |-ImplicitCastExpr 0x5590ecf30f40 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
  |   | `-ParenExpr 0x5590ecf30ed8 <col:39, col:41> 'lua_Number':'double' lvalue
  |   |   `-DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
  |   `-ImplicitCastExpr 0x5590ecf30f58 <./luaconf.h:537:43, col:45> 'lua_Number':'double' <LValueToRValue>
  |     `-ParenExpr 0x5590ecf30f20 <col:43, col:45> 'lua_Number':'double' lvalue
  |       `-DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
  `-ImplicitCastExpr 0x5590ecf31028 <./luaconf.h:537:48, col:50> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf31008 <col:48, col:50> 'lua_Number':'double' lvalue
      `-DeclRefExpr 0x5590ecf30fe0 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
[B164.17] - [B164.28]
  30: DeclRefExpr 0x5590ecf30d90 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
i_o
  31: ImplicitCastExpr 0x5590ecf30db8 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf30d90 <col:24> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
[B164.30] (ImplicitCastExpr, LValueToRValue, TValue *)
  32: MemberExpr 0x5590ecf30dd0 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf30db8 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf30d90 <col:24> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
[B164.31]->value
  33: MemberExpr 0x5590ecf30e08 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf30dd0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf30db8 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf30d90 <col:24> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
[B164.32].n
  34: BinaryOperator 0x5590ecf310e8 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf30e08 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf30dd0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf30db8 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf30d90 <col:24> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf310c8 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf310a8 <./luaconf.h:537:26, col:51> 'double'
    `-BinaryOperator 0x5590ecf31080 <col:27, col:50> 'double' '-'
      |-ImplicitCastExpr 0x5590ecf31068 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf30e68 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-DeclRefExpr 0x5590ecf30e40 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
      `-BinaryOperator 0x5590ecf31040 <./luaconf.h:537:33, col:50> 'double' '*'
        |-CallExpr 0x5590ecf30fb0 <col:33, col:46> 'double'
        | |-ImplicitCastExpr 0x5590ecf30f98 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x5590ecf30e88 <col:33> 'double (double)' Function 0x5590ecdbb868 'floor' 'double (double)'
        | `-BinaryOperator 0x5590ecf30f70 <col:39, col:45> 'double' '/'
        |   |-ImplicitCastExpr 0x5590ecf30f40 <col:39, col:41> 'lua_Number':'double' <LValueToRValue>
        |   | `-ParenExpr 0x5590ecf30ed8 <col:39, col:41> 'lua_Number':'double' lvalue
        |   |   `-DeclRefExpr 0x5590ecf30eb0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf30998 'nb' 'lua_Number':'double'
        |   `-ImplicitCastExpr 0x5590ecf30f58 <./luaconf.h:537:43, col:45> 'lua_Number':'double' <LValueToRValue>
        |     `-ParenExpr 0x5590ecf30f20 <col:43, col:45> 'lua_Number':'double' lvalue
        |       `-DeclRefExpr 0x5590ecf30ef8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
        `-ImplicitCastExpr 0x5590ecf31028 <./luaconf.h:537:48, col:50> 'lua_Number':'double' <LValueToRValue>
          `-ParenExpr 0x5590ecf31008 <col:48, col:50> 'lua_Number':'double' lvalue
            `-DeclRefExpr 0x5590ecf30fe0 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf30b10 'nc' 'lua_Number':'double'
[B164.33] = (([B164.29]))
  35: IntegerLiteral 0x5590ecf31188 <./lua.h:77:22> 'int' 3
3
  36: DeclRefExpr 0x5590ecf31110 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
i_o
  37: ImplicitCastExpr 0x5590ecf31138 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf31110 <col:42> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
[B164.36] (ImplicitCastExpr, LValueToRValue, TValue *)
  38: MemberExpr 0x5590ecf31150 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf31138 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf31110 <col:42> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
[B164.37]->tt
  39: BinaryOperator 0x5590ecf311a8 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf31150 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf31138 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf31110 <col:42> 'TValue *' lvalue Var 0x5590ecf30cb8 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf31188 <./lua.h:77:22> 'int' 3
[B164.38] = [B164.35]
   Preds (1): B165
   Succs (1): B162

 [B165]
   1: DeclRefExpr 0x5590ecf30828 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
rc
   2: ImplicitCastExpr 0x5590ecf30870 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf30850 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf30828 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
([B165.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf30888 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf30870 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf30850 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf30828 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
[B165.2]->tt
   4: ImplicitCastExpr 0x5590ecf30900 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf308c0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf30888 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf30870 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf30850 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf30828 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
([B165.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf308e0 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf30918 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf30900 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf308c0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf30888 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf30870 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf30850 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf30828 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2f550 'rc' 'TValue *'
`-IntegerLiteral 0x5590ecf308e0 <./lua.h:77:22> 'int' 3
[B165.4] == [B165.5]
   T: if ([B166.8]) && ([B165.6])
   Preds (1): B166
   Succs (2): B164 B163

 [B166]
   1: ConditionalOperator 0x5590ecf30688 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf2fb40 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf2fb18 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf2f9e8 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf2f9c8 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf2f9a8 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf2f980 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf2f960 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf2f8f0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf2f728 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf2f700 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf2f6e8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf2f6c8 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf2f6a0 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf2f8d0 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf2f8a8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf2f868 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf2f848 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf2f888 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf2faf8 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf2fad0 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf2fa08 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf2fab0 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf2fa68 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf2fa28 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf2fa48 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf301c0 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf301a8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf2fb60 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf30188 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf30160 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf30028 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf30008 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf2ffa0 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf2ff80 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf2ff58 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf2ff38 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf30140 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf30120 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf300f8 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf30050 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf300d8 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf300b0 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf30660 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf30648 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf301e8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf30628 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf30608 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf305e0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf305c0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf30550 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf30388 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf30360 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf30348 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf30328 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf30300 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf30530 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf30508 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf304c8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf304a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf304e8 <line:92:60> 'int' 0
([B169.26]) ? [B167.29] : [B168.21]
   2: DeclStmt 0x5590ecf306d8 <lvm.c:366:9, col:28>col:17
`-VarDecl 0x5590ecf2f550 <col:9, ./llimits.h:63:27> lvm.c:366:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf306b8 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf30688 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf2fb40 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf2fb18 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf2f9e8 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf2f9c8 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf2f9a8 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf2f980 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf2f960 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf2f8f0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf2f728 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf2f700 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf2f6e8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf2f6c8 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf2f6a0 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf2f8d0 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf2f8a8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf2f868 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf2f848 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf2f888 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf2faf8 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf2fad0 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf2fa08 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf2fab0 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf2fa68 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf2fa28 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf2fa48 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf301c0 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf301a8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf2fb60 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf30188 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf30160 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf30028 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf30008 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf2ffa0 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf2ff80 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf2ff58 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf2ff38 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf30140 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf30120 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf300f8 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf30050 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf300d8 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf300b0 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf30660 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf30648 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf301e8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf30628 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf30608 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf305e0 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf305c0 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf30550 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf30388 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf30360 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf30348 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf30328 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf30300 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf30530 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf30508 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf304c8 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf304a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf304e8 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf306f0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
rb
   4: ImplicitCastExpr 0x5590ecf30738 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf30718 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf306f0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
([B166.3]) (ImplicitCastExpr, LValueToRValue, TValue *)
   5: MemberExpr 0x5590ecf30750 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf30738 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf30718 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf306f0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
[B166.4]->tt
   6: ImplicitCastExpr 0x5590ecf307c8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf30788 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf30750 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf30738 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf30718 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf306f0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
([B166.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5590ecf307a8 <./lua.h:77:22> 'int' 3
3
   8: BinaryOperator 0x5590ecf307e0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf307c8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf30788 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf30750 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf30738 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf30718 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf306f0 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2e288 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf307a8 <./lua.h:77:22> 'int' 3
[B166.6] == [B166.7]
   T: ([B166.8]) && ...
   Preds (2): B167 B168
   Succs (2): B165 B163

 [B167]
   1: DeclRefExpr 0x5590ecf2fb60 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf301a8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2fb60 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B167.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2fcc0 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B167.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2fbd0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2fbf0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2fc10 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
[B167.5] + [B167.6]
   8: IntegerLiteral 0x5590ecf2fc58 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2fc78 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
([B167.7]) + [B167.8]
  10: BinaryOperator 0x5590ecf2fcd8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
[B167.4] >> ([B167.9])
  11: IntegerLiteral 0x5590ecf2fd20 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2fd50 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
(Instruction)[B167.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2fd78 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
~[B167.12]
  14: IntegerLiteral 0x5590ecf2fdb8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2fdd8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
([B167.13]) << [B167.14]
  16: UnaryOperator 0x5590ecf2fe20 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
~([B167.15])
  17: IntegerLiteral 0x5590ecf2fe60 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2fe80 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
([B167.16]) << [B167.17]
  19: BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
([B167.10]) & ([B167.18])
  20: CStyleCastExpr 0x5590ecf2ff58 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2ff38 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
(int)([B167.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf30028 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf30008 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf2ffa0 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2ff80 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2ff58 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2ff38 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
(int)((([B167.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf30050 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf30070 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf30090 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf300b0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
[B167.23] - [B167.24]
  26: BinaryOperator 0x5590ecf300f8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf30050 <col:17> 'int' 1
`-ParenExpr 0x5590ecf300d8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf300b0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
[B167.22] << ([B167.25])
  27: UnaryOperator 0x5590ecf30140 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf30120 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf300f8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf30050 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf300d8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf300b0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
~([B167.26])
  28: BinaryOperator 0x5590ecf30160 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf30028 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf30008 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf2ffa0 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf2ff80 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf2ff58 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf2ff38 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf30140 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf30120 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf300f8 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf30050 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf300d8 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf300b0 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
[B167.21] & [B167.27]
  29: BinaryOperator 0x5590ecf301c0 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf301a8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2fb60 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf30188 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf30160 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf30028 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf30008 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf2ffa0 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf2ff80 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf2ff58 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf2ff38 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf2fec8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf2fd00 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf2fcd8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf2fcc0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf2fbb0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf2fb88 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf2fca0 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf2fc78 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf2fc38 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf2fc10 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf2fbd0 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf2fbf0 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf2fc58 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf2fea8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf2fe80 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf2fe40 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf2fe20 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf2fe00 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf2fdd8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf2fd98 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf2fd78 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf2fd50 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf2fd20 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf2fdb8 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf2fe60 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf30140 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf30120 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf300f8 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf30050 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf300d8 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf300b0 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf30070 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf30090 <line:119:32> 'int' 1
[B167.2] + ([B167.28])
   Preds (1): B169
   Succs (1): B166

 [B168]
   1: DeclRefExpr 0x5590ecf301e8 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf30648 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf301e8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B168.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf30348 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B168.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf30258 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf30278 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf30298 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
[B168.5] + [B168.6]
   8: IntegerLiteral 0x5590ecf302e0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf30300 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
([B168.7]) + [B168.8]
  10: BinaryOperator 0x5590ecf30360 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf30348 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf30328 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf30300 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
[B168.4] >> ([B168.9])
  11: IntegerLiteral 0x5590ecf303a8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf303d8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
(Instruction)[B168.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf30400 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
~[B168.12]
  14: IntegerLiteral 0x5590ecf30440 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf30460 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
([B168.13]) << [B168.14]
  16: UnaryOperator 0x5590ecf304a8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
~([B168.15])
  17: IntegerLiteral 0x5590ecf304e8 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf30508 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf304c8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf304a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf304e8 <line:92:60> 'int' 0
([B168.16]) << [B168.17]
  19: BinaryOperator 0x5590ecf30550 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf30388 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf30360 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf30348 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf30328 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf30300 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf30530 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf30508 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf304c8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf304a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf304e8 <line:92:60> 'int' 0
([B168.10]) & ([B168.18])
  20: CStyleCastExpr 0x5590ecf305e0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf305c0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf30550 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf30388 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf30360 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf30348 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf30328 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf30300 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf30530 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf30508 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf304c8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf304a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf304e8 <line:92:60> 'int' 0
(int)([B168.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf30660 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf30648 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf301e8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf30628 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf30608 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf305e0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf305c0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf30550 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf30388 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf30360 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf30348 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf30238 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf30210 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf30328 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf30300 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf302c0 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf30298 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf30258 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf30278 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf302e0 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf30530 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf30508 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf304c8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf304a8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf30488 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf30460 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf30420 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf30400 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf303d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf303a8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf30440 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf304e8 <line:92:60> 'int' 0
[B168.2] + (([B168.20]))
   Preds (1): B169
   Succs (1): B166

 [B169]
   1: ConditionalOperator 0x5590ecf2f4d8 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf2e8c0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf2e898 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf2e788 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf2e768 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf2e748 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf2e720 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf2e700 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf2e690 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf2e4c8 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf2e4a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf2e488 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf2e468 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf2e440 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf2e670 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf2e648 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf2e608 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf2e5e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf2e628 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf2e878 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf2e850 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf2e7a8 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf2e830 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf2e808 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf2e7c8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf2e7e8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf2efa8 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf2ef90 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf2e8e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf2ef70 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf2ef48 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf2ee10 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf2edf0 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf2ed88 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf2ed68 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf2ed40 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf2ed20 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf2ef28 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf2ef08 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf2eee0 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf2ee38 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf2eec0 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf2ee98 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf2f4b0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf2f498 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf2efd0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf2f478 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2f458 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2f430 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2f410 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2f3a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2f1d8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2f1b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2f198 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2f178 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2f150 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf2f380 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2f358 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2f318 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2f2f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2f338 <line:88:60> 'int' 0
([B172.26]) ? [B170.31] : [B171.23]
   2: DeclStmt 0x5590ecf2f528 <lvm.c:365:9, col:28>col:17
`-VarDecl 0x5590ecf2e288 <col:9, ./llimits.h:63:27> lvm.c:365:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf2f508 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf2f4d8 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf2e8c0 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf2e898 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf2e788 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf2e768 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf2e748 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf2e720 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf2e700 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf2e690 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf2e4c8 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf2e4a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf2e488 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf2e468 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf2e440 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf2e670 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf2e648 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf2e608 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf2e5e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf2e628 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf2e878 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf2e850 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf2e7a8 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf2e830 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf2e808 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf2e7c8 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf2e7e8 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf2efa8 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf2ef90 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf2e8e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf2ef70 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf2ef48 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf2ee10 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf2edf0 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf2ed88 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf2ed68 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf2ed40 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf2ed20 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf2ef28 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf2ef08 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf2eee0 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf2ee38 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf2eec0 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf2ee98 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf2f4b0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf2f498 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf2efd0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf2f478 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf2f458 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf2f430 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf2f410 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf2f3a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf2f1d8 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf2f1b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf2f198 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf2f178 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf2f150 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf2f380 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf2f358 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf2f318 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf2f2f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf2f338 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2f6e8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B169.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2f5f8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2f618 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2f638 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
[B169.5] + [B169.6]
   8: IntegerLiteral 0x5590ecf2f680 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2f6a0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
([B169.7]) + [B169.8]
  10: BinaryOperator 0x5590ecf2f700 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2f6e8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2f6c8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2f6a0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
[B169.4] >> ([B169.9])
  11: IntegerLiteral 0x5590ecf2f748 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2f778 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
(Instruction)[B169.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2f7a0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
~[B169.12]
  14: IntegerLiteral 0x5590ecf2f7e0 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2f800 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
([B169.13]) << [B169.14]
  16: UnaryOperator 0x5590ecf2f848 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
~([B169.15])
  17: IntegerLiteral 0x5590ecf2f888 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2f8a8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2f868 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2f848 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf2f888 <line:92:60> 'int' 0
([B169.16]) << [B169.17]
  19: BinaryOperator 0x5590ecf2f8f0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2f728 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2f700 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2f6e8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2f6c8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2f6a0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf2f8d0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2f8a8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2f868 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2f848 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2f888 <line:92:60> 'int' 0
([B169.10]) & ([B169.18])
  20: CStyleCastExpr 0x5590ecf2f980 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2f960 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2f8f0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2f728 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2f700 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2f6e8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2f6c8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2f6a0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf2f8d0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2f8a8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2f868 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2f848 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2f888 <line:92:60> 'int' 0
(int)([B169.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf2fa08 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf2fa28 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf2fa48 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf2fa68 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2fa28 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2fa48 <line:119:32> 'int' 1
[B169.22] - [B169.23]
  25: BinaryOperator 0x5590ecf2fad0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2fa08 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2fab0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2fa68 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2fa28 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2fa48 <line:119:32> 'int' 1
[B169.21] << ([B169.24])
  26: BinaryOperator 0x5590ecf2fb18 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf2f9e8 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf2f9c8 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf2f9a8 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf2f980 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf2f960 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf2f8f0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf2f728 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf2f700 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf2f6e8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf2f5d8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf2f5b0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf2f6c8 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf2f6a0 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf2f660 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf2f638 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf2f5f8 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf2f618 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf2f680 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf2f8d0 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf2f8a8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf2f868 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf2f848 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf2f828 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf2f800 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf2f7c0 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf2f7a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf2f778 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf2f748 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf2f7e0 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2f888 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf2faf8 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2fad0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2fa08 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2fab0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2fa68 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2fa28 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2fa48 <line:119:32> 'int' 1
((([B169.20]))) & ([B169.25])
   T: ([B169.26]) ? ... : ...
   Preds (2): B170 B171
   Succs (2): B167 B168

 [B170]
   1: DeclRefExpr 0x5590ecf2e8e0 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf2ef90 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2e8e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B170.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2eaa8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B170.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2e950 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2e970 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2e990 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
[B170.5] + [B170.6]
   8: IntegerLiteral 0x5590ecf2e9d8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2e9f8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
([B170.7]) + [B170.8]
  10: IntegerLiteral 0x5590ecf2ea40 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf2ea60 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
([B170.9]) + [B170.10]
  12: BinaryOperator 0x5590ecf2eac0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
[B170.4] >> ([B170.11])
  13: IntegerLiteral 0x5590ecf2eb08 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf2eb38 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
(Instruction)[B170.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf2eb60 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
~[B170.14]
  16: IntegerLiteral 0x5590ecf2eba0 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf2ebc0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
([B170.15]) << [B170.16]
  18: UnaryOperator 0x5590ecf2ec08 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
~([B170.17])
  19: IntegerLiteral 0x5590ecf2ec48 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf2ec68 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
([B170.18]) << [B170.19]
  21: BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
([B170.12]) & ([B170.20])
  22: CStyleCastExpr 0x5590ecf2ed40 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2ed20 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
(int)([B170.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf2ee10 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf2edf0 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf2ed88 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2ed68 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2ed40 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2ed20 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
(int)((([B170.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf2ee38 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf2ee58 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf2ee78 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf2ee98 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
[B170.25] - [B170.26]
  28: BinaryOperator 0x5590ecf2eee0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2ee38 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2eec0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2ee98 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
[B170.24] << ([B170.27])
  29: UnaryOperator 0x5590ecf2ef28 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf2ef08 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2eee0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2ee38 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2eec0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2ee98 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
~([B170.28])
  30: BinaryOperator 0x5590ecf2ef48 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf2ee10 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf2edf0 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf2ed88 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf2ed68 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf2ed40 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf2ed20 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf2ef28 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf2ef08 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf2eee0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf2ee38 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf2eec0 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf2ee98 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
[B170.23] & [B170.29]
  31: BinaryOperator 0x5590ecf2efa8 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf2ef90 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2e8e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf2ef70 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf2ef48 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf2ee10 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf2edf0 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf2ed88 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf2ed68 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf2ed40 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf2ed20 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf2ecb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf2eae8 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf2eac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf2eaa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf2e930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf2e908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf2ea88 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf2ea60 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf2ea20 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf2e9f8 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf2e9b8 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf2e990 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf2e950 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf2e970 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf2e9d8 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf2ea40 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf2ec90 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf2ec68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf2ec28 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf2ec08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf2ebe8 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf2ebc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf2eb80 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf2eb60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf2eb38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf2eb08 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf2eba0 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf2ec48 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf2ef28 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf2ef08 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf2eee0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf2ee38 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf2eec0 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf2ee98 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf2ee58 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf2ee78 <line:119:32> 'int' 1
[B170.2] + ([B170.30])
   Preds (1): B172
   Succs (1): B169

 [B171]
   1: DeclRefExpr 0x5590ecf2efd0 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf2f498 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2efd0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B171.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2f198 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B171.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2f040 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2f060 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2f080 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
[B171.5] + [B171.6]
   8: IntegerLiteral 0x5590ecf2f0c8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2f0e8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
([B171.7]) + [B171.8]
  10: IntegerLiteral 0x5590ecf2f130 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf2f150 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
([B171.9]) + [B171.10]
  12: BinaryOperator 0x5590ecf2f1b0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2f198 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2f178 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2f150 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
[B171.4] >> ([B171.11])
  13: IntegerLiteral 0x5590ecf2f1f8 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf2f228 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
(Instruction)[B171.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf2f250 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
~[B171.14]
  16: IntegerLiteral 0x5590ecf2f290 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf2f2b0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
([B171.15]) << [B171.16]
  18: UnaryOperator 0x5590ecf2f2f8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
~([B171.17])
  19: IntegerLiteral 0x5590ecf2f338 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf2f358 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2f318 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2f2f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2f338 <line:88:60> 'int' 0
([B171.18]) << [B171.19]
  21: BinaryOperator 0x5590ecf2f3a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2f1d8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2f1b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2f198 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2f178 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2f150 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf2f380 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2f358 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2f318 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2f2f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2f338 <line:88:60> 'int' 0
([B171.12]) & ([B171.20])
  22: CStyleCastExpr 0x5590ecf2f430 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2f410 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2f3a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2f1d8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2f1b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2f198 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2f178 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2f150 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf2f380 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2f358 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2f318 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2f2f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2f338 <line:88:60> 'int' 0
(int)([B171.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf2f4b0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf2f498 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2efd0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf2f478 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf2f458 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf2f430 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf2f410 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf2f3a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf2f1d8 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf2f1b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf2f198 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf2f020 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf2eff8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf2f178 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf2f150 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf2f110 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf2f0e8 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf2f0a8 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf2f080 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf2f040 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf2f060 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf2f0c8 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf2f130 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf2f380 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf2f358 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf2f318 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf2f2f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf2f2d8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf2f2b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf2f270 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf2f250 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf2f228 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf2f1f8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf2f290 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf2f338 <line:88:60> 'int' 0
[B171.2] + (([B171.22]))
   Preds (1): B172
   Succs (1): B169

 [B172]
  case OP_MOD:
   1: DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf2e488 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B172.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf2e330 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf2e350 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf2e370 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
[B172.3] + [B172.4]
   6: IntegerLiteral 0x5590ecf2e3b8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf2e3d8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
([B172.5]) + [B172.6]
   8: IntegerLiteral 0x5590ecf2e420 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf2e440 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
([B172.7]) + [B172.8]
  10: BinaryOperator 0x5590ecf2e4a0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2e488 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2e468 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2e440 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
[B172.2] >> ([B172.9])
  11: IntegerLiteral 0x5590ecf2e4e8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2e518 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
(Instruction)[B172.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2e540 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
~[B172.12]
  14: IntegerLiteral 0x5590ecf2e580 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2e5a0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
([B172.13]) << [B172.14]
  16: UnaryOperator 0x5590ecf2e5e8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
~([B172.15])
  17: IntegerLiteral 0x5590ecf2e628 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2e648 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2e608 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2e5e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2e628 <line:88:60> 'int' 0
([B172.16]) << [B172.17]
  19: BinaryOperator 0x5590ecf2e690 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2e4c8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2e4a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2e488 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2e468 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2e440 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf2e670 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2e648 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2e608 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2e5e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2e628 <line:88:60> 'int' 0
([B172.10]) & ([B172.18])
  20: CStyleCastExpr 0x5590ecf2e720 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2e700 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2e690 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2e4c8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2e4a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2e488 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2e468 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2e440 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf2e670 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2e648 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2e608 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2e5e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2e628 <line:88:60> 'int' 0
(int)([B172.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf2e7a8 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf2e7c8 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf2e7e8 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf2e808 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2e7c8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2e7e8 <line:119:32> 'int' 1
[B172.22] - [B172.23]
  25: BinaryOperator 0x5590ecf2e850 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2e7a8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2e830 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2e808 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2e7c8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2e7e8 <line:119:32> 'int' 1
[B172.21] << ([B172.24])
  26: BinaryOperator 0x5590ecf2e898 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf2e788 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf2e768 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf2e748 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf2e720 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf2e700 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf2e690 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf2e4c8 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf2e4a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf2e488 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf2e310 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf2e2e8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf2e468 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf2e440 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf2e400 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf2e3d8 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf2e398 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf2e370 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf2e330 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf2e350 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf2e3b8 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf2e420 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf2e670 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf2e648 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf2e608 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf2e5e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf2e5c8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf2e5a0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf2e560 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf2e540 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf2e518 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf2e4e8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf2e580 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2e628 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf2e878 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2e850 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2e7a8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2e830 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2e808 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2e7c8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2e7e8 <line:119:32> 'int' 1
((([B172.20]))) & ([B172.25])
   T: ([B172.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B170 B171

 [B173]
   T: continue;
   Preds (2): B174 B175
   Succs (1): B1

 [B174]
   1: DeclRefExpr 0x5590ecf2ddc0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf2dde8 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2ddc0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B174.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf2dd48 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf2dd70 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2dd48 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf2dd88 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf2dd70 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2dd48 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.4]->savedpc
   6: BinaryOperator 0x5590ecf2de00 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf2dd88 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf2dd70 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2dd48 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf2dde8 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2ddc0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B174.5] = [B174.2]
   7: DeclRefExpr 0x5590ecf2de28 <lvm.c:372:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf2df18 <lvm.c:372:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf2de28 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B174.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf2de50 <lvm.c:372:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf2df80 <lvm.c:372:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2de50 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf2de78 <lvm.c:372:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf2df98 <lvm.c:372:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2de78 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B174.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf2dea0 <lvm.c:372:32> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf2dfb0 <lvm.c:372:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2dea0 <col:32> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
[B174.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf2dfc8 <lvm.c:372:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf2dfb0 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2dea0 <col:32> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
[B174.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf2dec8 <lvm.c:372:36> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
rc
  17: ImplicitCastExpr 0x5590ecf2dfe0 <lvm.c:372:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2dec8 <col:36> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
[B174.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf2dff8 <lvm.c:372:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf2dfe0 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2dec8 <col:36> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
[B174.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf2def0 <lvm.c:487:31> 'int' EnumConstant 0x5590ece94580 'TM_DIV' 'int'
TM_DIV
  20: ImplicitCastExpr 0x5590ecf2e010 <lvm.c:487:31> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf2def0 <col:31> 'int' EnumConstant 0x5590ece94580 'TM_DIV' 'int'
[B174.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf2df30 <lvm.c:372:19, col:42> 'void'
|-ImplicitCastExpr 0x5590ecf2df18 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf2de28 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf2df80 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2de50 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf2df98 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2de78 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf2dfc8 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf2dfb0 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2dea0 <col:32> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf2dff8 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf2dfe0 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2dec8 <col:36> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
`-ImplicitCastExpr 0x5590ecf2e010 <line:487:31> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf2def0 <col:31> 'int' EnumConstant 0x5590ece94580 'TM_DIV' 'int'
[B174.8]([B174.10], [B174.12], [B174.15], [B174.18], [B174.20])
  22: DeclRefExpr 0x5590ecf2e078 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf2e0a0 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2e078 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf2e0b8 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf2e0a0 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2e078 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.23]->base
  25: ImplicitCastExpr 0x5590ecf2e0f0 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf2e0b8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf2e0a0 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf2e078 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf2e050 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf2e108 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf2e050 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf2e0f0 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf2e0b8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf2e0a0 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf2e078 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B174.26] = [B174.25]
   Preds (2): B176 B177
   Succs (1): B173

 [B175]
   1: DeclRefExpr 0x5590ecf2d678 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf2d6c0 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2d6a0 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2d678 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
([B175.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf2d6d8 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf2d6c0 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2d6a0 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2d678 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
[B175.2]->value
   4: MemberExpr 0x5590ecf2d710 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf2d6d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf2d6c0 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf2d6a0 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf2d678 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
[B175.3].n
   5: ImplicitCastExpr 0x5590ecf2d768 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2d748 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf2d710 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf2d6d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf2d6c0 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf2d6a0 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf2d678 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
([B175.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecfa6e68 <lvm.c:368:22, ./llimits.h:63:27>lvm.c:368:22
`-VarDecl 0x5590ecf2d618 <col:11, ./llimits.h:63:27> lvm.c:368:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf2d768 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf2d748 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf2d710 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf2d6d8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf2d6c0 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf2d6a0 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf2d678 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf2d7f0 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
rc
   8: ImplicitCastExpr 0x5590ecf2d838 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2d818 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2d7f0 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
([B175.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf2d850 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf2d838 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2d818 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2d7f0 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
[B175.8]->value
  10: MemberExpr 0x5590ecf2d888 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf2d850 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf2d838 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf2d818 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf2d7f0 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
[B175.9].n
  11: ImplicitCastExpr 0x5590ecf2d8e0 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2d8c0 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf2d888 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf2d850 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf2d838 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf2d818 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf2d7f0 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
([B175.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: DeclStmt 0x5590ecfa6e50 <lvm.c:368:39, ./llimits.h:63:27>lvm.c:368:39
`-VarDecl 0x5590ecf2d790 <col:11, ./llimits.h:63:27> lvm.c:368:39 used nc 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf2d8e0 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf2d8c0 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf2d888 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf2d850 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf2d838 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf2d818 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf2d7f0 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
lua_Number nc = ((rc)->value.n);
  13: DeclRefExpr 0x5590ecf2d998 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf2d9e0 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2d9c0 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2d998 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B175.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclStmt 0x5590ecf2d9f8 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf2d938 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf2d9e0 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf2d9c0 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf2d998 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  16: DeclRefExpr 0x5590ecf2dad8 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2d618 'nb' 'lua_Number':'double'
nb
  17: ImplicitCastExpr 0x5590ecf2db68 <./luaconf.h:536:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2db00 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf2dad8 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2d618 'nb' 'lua_Number':'double'
([B175.16]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: DeclRefExpr 0x5590ecf2db20 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2d790 'nc' 'lua_Number':'double'
nc
  19: ImplicitCastExpr 0x5590ecf2db80 <./luaconf.h:536:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2db48 <col:31, col:33> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf2db20 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2d790 'nc' 'lua_Number':'double'
([B175.18]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  20: BinaryOperator 0x5590ecf2db98 <./luaconf.h:536:27, col:33> 'double' '/'
|-ImplicitCastExpr 0x5590ecf2db68 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf2db00 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf2dad8 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2d618 'nb' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf2db80 <./luaconf.h:536:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf2db48 <col:31, col:33> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf2db20 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2d790 'nc' 'lua_Number':'double'
[B175.17] / [B175.19]
  21: DeclRefExpr 0x5590ecf2da10 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x5590ecf2da38 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2da10 <col:24> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
[B175.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf2da50 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf2da38 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2da10 <col:24> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
[B175.22]->value
  24: MemberExpr 0x5590ecf2daa0 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf2da50 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf2da38 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf2da10 <col:24> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
[B175.23].n
  25: BinaryOperator 0x5590ecf2dc00 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf2daa0 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf2da50 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf2da38 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf2da10 <col:24> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf2dbe0 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf2dbc0 <./luaconf.h:536:26, col:34> 'double'
    `-BinaryOperator 0x5590ecf2db98 <col:27, col:33> 'double' '/'
      |-ImplicitCastExpr 0x5590ecf2db68 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf2db00 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-DeclRefExpr 0x5590ecf2dad8 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2d618 'nb' 'lua_Number':'double'
      `-ImplicitCastExpr 0x5590ecf2db80 <./luaconf.h:536:31, col:33> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf2db48 <col:31, col:33> 'lua_Number':'double' lvalue
          `-DeclRefExpr 0x5590ecf2db20 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2d790 'nc' 'lua_Number':'double'
[B175.24] = (([B175.20]))
  26: IntegerLiteral 0x5590ecf2dca0 <./lua.h:77:22> 'int' 3
3
  27: DeclRefExpr 0x5590ecf2dc28 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
i_o
  28: ImplicitCastExpr 0x5590ecf2dc50 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2dc28 <col:42> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
[B175.27] (ImplicitCastExpr, LValueToRValue, TValue *)
  29: MemberExpr 0x5590ecf2dc68 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf2dc50 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2dc28 <col:42> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
[B175.28]->tt
  30: BinaryOperator 0x5590ecf2dcc0 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf2dc68 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf2dc50 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2dc28 <col:42> 'TValue *' lvalue Var 0x5590ecf2d938 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf2dca0 <./lua.h:77:22> 'int' 3
[B175.29] = [B175.26]
   Preds (1): B176
   Succs (1): B173

 [B176]
   1: DeclRefExpr 0x5590ecf2d4a8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
rc
   2: ImplicitCastExpr 0x5590ecf2d4f0 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2d4d0 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2d4a8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
([B176.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf2d508 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf2d4f0 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2d4d0 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2d4a8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
[B176.2]->tt
   4: ImplicitCastExpr 0x5590ecf2d580 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf2d540 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf2d508 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf2d4f0 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf2d4d0 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf2d4a8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
([B176.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf2d560 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf2d598 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf2d580 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2d540 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf2d508 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf2d4f0 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf2d4d0 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf2d4a8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf2c1f0 'rc' 'TValue *'
`-IntegerLiteral 0x5590ecf2d560 <./lua.h:77:22> 'int' 3
[B176.4] == [B176.5]
   T: if ([B177.8]) && ([B176.6])
   Preds (1): B177
   Succs (2): B175 B174

 [B177]
   1: ConditionalOperator 0x5590ecf2d308 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf2c7c0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf2c798 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf2c688 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf2c668 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf2c648 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf2c620 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf2c600 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf2c590 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf2c3c8 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf2c3a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf2c388 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf2c368 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf2c340 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf2c570 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf2c548 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf2c508 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf2c4e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf2c528 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf2c778 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf2c750 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf2c6a8 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf2c730 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf2c708 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf2c6c8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf2c6e8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf2ce40 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf2ce28 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf2c7e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf2ce08 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf2cde0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf2cca8 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf2cc88 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf2cc20 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf2cc00 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf2cbd8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf2cbb8 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf2cdc0 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf2cda0 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf2cd78 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf2ccd0 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf2cd58 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf2cd30 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf2d2e0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf2d2c8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf2ce68 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf2d2a8 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2d288 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2d260 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2d240 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2d1d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2d008 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2cfe0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2cfc8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2cfa8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2cf80 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf2d1b0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2d188 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2d148 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2d128 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2d168 <line:92:60> 'int' 0
([B180.26]) ? [B178.29] : [B179.21]
   2: DeclStmt 0x5590ecf2d358 <lvm.c:366:9, col:28>col:17
`-VarDecl 0x5590ecf2c1f0 <col:9, ./llimits.h:63:27> lvm.c:366:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf2d338 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf2d308 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf2c7c0 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf2c798 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf2c688 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf2c668 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf2c648 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf2c620 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf2c600 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf2c590 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf2c3c8 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf2c3a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf2c388 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf2c368 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf2c340 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf2c570 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf2c548 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf2c508 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf2c4e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf2c528 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf2c778 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf2c750 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf2c6a8 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf2c730 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf2c708 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf2c6c8 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf2c6e8 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf2ce40 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf2ce28 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf2c7e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf2ce08 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf2cde0 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf2cca8 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf2cc88 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf2cc20 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf2cc00 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf2cbd8 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf2cbb8 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf2cdc0 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf2cda0 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf2cd78 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf2ccd0 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf2cd58 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf2cd30 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf2d2e0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf2d2c8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf2ce68 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf2d2a8 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf2d288 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf2d260 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf2d240 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf2d1d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf2d008 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf2cfe0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf2cfc8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf2cfa8 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf2cf80 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf2d1b0 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf2d188 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf2d148 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf2d128 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf2d168 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf2d370 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
rb
   4: ImplicitCastExpr 0x5590ecf2d3b8 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2d398 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2d370 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
([B177.3]) (ImplicitCastExpr, LValueToRValue, TValue *)
   5: MemberExpr 0x5590ecf2d3d0 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf2d3b8 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2d398 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2d370 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
[B177.4]->tt
   6: ImplicitCastExpr 0x5590ecf2d448 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf2d408 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf2d3d0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf2d3b8 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf2d398 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf2d370 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
([B177.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5590ecf2d428 <./lua.h:77:22> 'int' 3
3
   8: BinaryOperator 0x5590ecf2d460 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf2d448 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2d408 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf2d3d0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf2d3b8 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf2d398 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf2d370 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf2af10 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf2d428 <./lua.h:77:22> 'int' 3
[B177.6] == [B177.7]
   T: ([B177.8]) && ...
   Preds (2): B178 B179
   Succs (2): B176 B174

 [B178]
   1: DeclRefExpr 0x5590ecf2c7e0 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf2ce28 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2c7e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B178.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2c940 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B178.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2c850 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2c870 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2c890 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
[B178.5] + [B178.6]
   8: IntegerLiteral 0x5590ecf2c8d8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2c8f8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
([B178.7]) + [B178.8]
  10: BinaryOperator 0x5590ecf2c958 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
[B178.4] >> ([B178.9])
  11: IntegerLiteral 0x5590ecf2c9a0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2c9d0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
(Instruction)[B178.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2c9f8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
~[B178.12]
  14: IntegerLiteral 0x5590ecf2ca38 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2ca58 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
([B178.13]) << [B178.14]
  16: UnaryOperator 0x5590ecf2caa0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
~([B178.15])
  17: IntegerLiteral 0x5590ecf2cae0 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2cb00 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
([B178.16]) << [B178.17]
  19: BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
([B178.10]) & ([B178.18])
  20: CStyleCastExpr 0x5590ecf2cbd8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2cbb8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
(int)([B178.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf2cca8 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf2cc88 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf2cc20 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2cc00 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2cbd8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2cbb8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
(int)((([B178.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf2ccd0 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf2ccf0 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf2cd10 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf2cd30 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
[B178.23] - [B178.24]
  26: BinaryOperator 0x5590ecf2cd78 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2ccd0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2cd58 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2cd30 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
[B178.22] << ([B178.25])
  27: UnaryOperator 0x5590ecf2cdc0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf2cda0 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2cd78 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2ccd0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2cd58 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2cd30 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
~([B178.26])
  28: BinaryOperator 0x5590ecf2cde0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf2cca8 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf2cc88 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf2cc20 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf2cc00 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf2cbd8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf2cbb8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf2cdc0 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf2cda0 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf2cd78 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf2ccd0 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf2cd58 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf2cd30 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
[B178.21] & [B178.27]
  29: BinaryOperator 0x5590ecf2ce40 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf2ce28 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2c7e0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf2ce08 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf2cde0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf2cca8 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf2cc88 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf2cc20 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf2cc00 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf2cbd8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf2cbb8 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf2cb48 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf2c980 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf2c958 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf2c940 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf2c830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf2c808 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf2c920 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf2c8f8 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf2c8b8 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf2c890 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf2c850 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf2c870 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf2c8d8 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf2cb28 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf2cb00 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf2cac0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf2caa0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf2ca80 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf2ca58 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf2ca18 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf2c9f8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf2c9d0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf2c9a0 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf2ca38 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf2cae0 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf2cdc0 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf2cda0 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf2cd78 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf2ccd0 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf2cd58 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf2cd30 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf2ccf0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf2cd10 <line:119:32> 'int' 1
[B178.2] + ([B178.28])
   Preds (1): B180
   Succs (1): B177

 [B179]
   1: DeclRefExpr 0x5590ecf2ce68 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf2d2c8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2ce68 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B179.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2cfc8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B179.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2ced8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2cef8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2cf18 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
[B179.5] + [B179.6]
   8: IntegerLiteral 0x5590ecf2cf60 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2cf80 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
([B179.7]) + [B179.8]
  10: BinaryOperator 0x5590ecf2cfe0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2cfc8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2cfa8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2cf80 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
[B179.4] >> ([B179.9])
  11: IntegerLiteral 0x5590ecf2d028 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2d058 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
(Instruction)[B179.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2d080 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
~[B179.12]
  14: IntegerLiteral 0x5590ecf2d0c0 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2d0e0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
([B179.13]) << [B179.14]
  16: UnaryOperator 0x5590ecf2d128 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
~([B179.15])
  17: IntegerLiteral 0x5590ecf2d168 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2d188 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2d148 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2d128 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf2d168 <line:92:60> 'int' 0
([B179.16]) << [B179.17]
  19: BinaryOperator 0x5590ecf2d1d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2d008 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2cfe0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2cfc8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2cfa8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2cf80 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf2d1b0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2d188 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2d148 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2d128 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2d168 <line:92:60> 'int' 0
([B179.10]) & ([B179.18])
  20: CStyleCastExpr 0x5590ecf2d260 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2d240 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2d1d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2d008 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2cfe0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2cfc8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2cfa8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2cf80 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf2d1b0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2d188 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2d148 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2d128 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2d168 <line:92:60> 'int' 0
(int)([B179.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf2d2e0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf2d2c8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2ce68 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf2d2a8 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf2d288 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf2d260 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf2d240 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf2d1d0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf2d008 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf2cfe0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf2cfc8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf2ceb8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf2ce90 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf2cfa8 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf2cf80 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf2cf40 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf2cf18 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf2ced8 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf2cef8 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf2cf60 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf2d1b0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf2d188 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf2d148 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf2d128 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf2d108 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf2d0e0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf2d0a0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf2d080 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf2d058 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf2d028 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf2d0c0 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf2d168 <line:92:60> 'int' 0
[B179.2] + (([B179.20]))
   Preds (1): B180
   Succs (1): B177

 [B180]
   1: ConditionalOperator 0x5590ecf2c178 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf2b548 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf2b520 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf2b410 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf2b3f0 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf2b3d0 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf2b3a8 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf2b388 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf2b318 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf2b150 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf2b128 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf2b110 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf2b0f0 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf2b0c8 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf2b2f8 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf2b2d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf2b290 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf2b270 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf2b2b0 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf2b500 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf2b4d8 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf2b430 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf2b4b8 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf2b490 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf2b450 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf2b470 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf2bc48 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf2bc30 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf2b568 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf2bc10 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf2bbe8 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf2bab0 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf2ba90 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf2ba10 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf2b9f0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf2b9c8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf2b9a8 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf2bbc8 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf2bba8 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf2bb80 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf2bad8 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf2bb60 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf2bb38 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf2c150 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf2c138 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf2bc70 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf2c118 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2c0f8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2c0d0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2c0b0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2c040 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2be78 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2be50 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2be38 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2be18 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2bdf0 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf2c020 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2bff8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2bfb8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2bf98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2bfd8 <line:88:60> 'int' 0
([B183.26]) ? [B181.31] : [B182.23]
   2: DeclStmt 0x5590ecf2c1c8 <lvm.c:365:9, col:28>col:17
`-VarDecl 0x5590ecf2af10 <col:9, ./llimits.h:63:27> lvm.c:365:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf2c1a8 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf2c178 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf2b548 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf2b520 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf2b410 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf2b3f0 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf2b3d0 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf2b3a8 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf2b388 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf2b318 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf2b150 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf2b128 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf2b110 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf2b0f0 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf2b0c8 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf2b2f8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf2b2d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf2b290 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf2b270 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf2b2b0 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf2b500 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf2b4d8 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf2b430 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf2b4b8 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf2b490 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf2b450 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf2b470 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf2bc48 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf2bc30 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf2b568 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf2bc10 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf2bbe8 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf2bab0 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf2ba90 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf2ba10 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf2b9f0 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf2b9c8 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf2b9a8 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf2bbc8 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf2bba8 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf2bb80 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf2bad8 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf2bb60 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf2bb38 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf2c150 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf2c138 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf2bc70 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf2c118 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf2c0f8 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf2c0d0 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf2c0b0 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf2c040 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf2be78 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf2be50 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf2be38 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf2be18 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf2bdf0 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf2c020 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf2bff8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf2bfb8 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf2bf98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf2bfd8 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2c388 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B180.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2c298 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2c2b8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2c2d8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
[B180.5] + [B180.6]
   8: IntegerLiteral 0x5590ecf2c320 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2c340 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
([B180.7]) + [B180.8]
  10: BinaryOperator 0x5590ecf2c3a0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2c388 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2c368 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2c340 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
[B180.4] >> ([B180.9])
  11: IntegerLiteral 0x5590ecf2c3e8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2c418 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
(Instruction)[B180.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2c440 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
~[B180.12]
  14: IntegerLiteral 0x5590ecf2c480 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2c4a0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
([B180.13]) << [B180.14]
  16: UnaryOperator 0x5590ecf2c4e8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
~([B180.15])
  17: IntegerLiteral 0x5590ecf2c528 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2c548 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2c508 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2c4e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf2c528 <line:92:60> 'int' 0
([B180.16]) << [B180.17]
  19: BinaryOperator 0x5590ecf2c590 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2c3c8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2c3a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2c388 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2c368 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2c340 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf2c570 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2c548 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2c508 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2c4e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2c528 <line:92:60> 'int' 0
([B180.10]) & ([B180.18])
  20: CStyleCastExpr 0x5590ecf2c620 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2c600 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2c590 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2c3c8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2c3a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2c388 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2c368 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2c340 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf2c570 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2c548 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2c508 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2c4e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2c528 <line:92:60> 'int' 0
(int)([B180.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf2c6a8 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf2c6c8 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf2c6e8 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf2c708 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2c6c8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2c6e8 <line:119:32> 'int' 1
[B180.22] - [B180.23]
  25: BinaryOperator 0x5590ecf2c750 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2c6a8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2c730 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2c708 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2c6c8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2c6e8 <line:119:32> 'int' 1
[B180.21] << ([B180.24])
  26: BinaryOperator 0x5590ecf2c798 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf2c688 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf2c668 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf2c648 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf2c620 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf2c600 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf2c590 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf2c3c8 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf2c3a0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf2c388 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf2c278 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf2c250 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf2c368 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf2c340 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf2c300 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf2c2d8 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf2c298 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf2c2b8 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf2c320 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf2c570 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf2c548 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf2c508 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf2c4e8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf2c4c8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf2c4a0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf2c460 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf2c440 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf2c418 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf2c3e8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf2c480 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2c528 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf2c778 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2c750 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2c6a8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2c730 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2c708 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2c6c8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2c6e8 <line:119:32> 'int' 1
((([B180.20]))) & ([B180.25])
   T: ([B180.26]) ? ... : ...
   Preds (2): B181 B182
   Succs (2): B178 B179

 [B181]
   1: DeclRefExpr 0x5590ecf2b568 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf2bc30 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2b568 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B181.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2b730 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B181.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2b5d8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2b5f8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2b618 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
[B181.5] + [B181.6]
   8: IntegerLiteral 0x5590ecf2b660 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2b680 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
([B181.7]) + [B181.8]
  10: IntegerLiteral 0x5590ecf2b6c8 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf2b6e8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
([B181.9]) + [B181.10]
  12: BinaryOperator 0x5590ecf2b748 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
[B181.4] >> ([B181.11])
  13: IntegerLiteral 0x5590ecf2b790 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf2b7c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
(Instruction)[B181.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf2b7e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
~[B181.14]
  16: IntegerLiteral 0x5590ecf2b828 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf2b848 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
([B181.15]) << [B181.16]
  18: UnaryOperator 0x5590ecf2b890 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
~([B181.17])
  19: IntegerLiteral 0x5590ecf2b8d0 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf2b8f0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
([B181.18]) << [B181.19]
  21: BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
([B181.12]) & ([B181.20])
  22: CStyleCastExpr 0x5590ecf2b9c8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2b9a8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
(int)([B181.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf2bab0 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf2ba90 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf2ba10 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf2b9f0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf2b9c8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf2b9a8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
(int)((([B181.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf2bad8 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf2baf8 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf2bb18 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf2bb38 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
[B181.25] - [B181.26]
  28: BinaryOperator 0x5590ecf2bb80 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2bad8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2bb60 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2bb38 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
[B181.24] << ([B181.27])
  29: UnaryOperator 0x5590ecf2bbc8 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf2bba8 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2bb80 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2bad8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2bb60 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2bb38 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
~([B181.28])
  30: BinaryOperator 0x5590ecf2bbe8 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf2bab0 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf2ba90 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf2ba10 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf2b9f0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf2b9c8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf2b9a8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf2bbc8 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf2bba8 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf2bb80 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf2bad8 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf2bb60 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf2bb38 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
[B181.23] & [B181.29]
  31: BinaryOperator 0x5590ecf2bc48 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf2bc30 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2b568 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf2bc10 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf2bbe8 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf2bab0 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf2ba90 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf2ba10 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf2b9f0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf2b9c8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf2b9a8 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf2b938 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf2b770 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf2b748 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf2b730 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf2b5b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf2b590 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf2b710 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf2b6e8 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf2b6a8 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf2b680 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf2b640 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf2b618 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf2b5d8 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf2b5f8 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf2b660 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf2b6c8 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf2b918 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf2b8f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf2b8b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf2b890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf2b870 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf2b848 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf2b808 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf2b7e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf2b7c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf2b790 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf2b828 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf2b8d0 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf2bbc8 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf2bba8 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf2bb80 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf2bad8 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf2bb60 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf2bb38 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf2baf8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf2bb18 <line:119:32> 'int' 1
[B181.2] + ([B181.30])
   Preds (1): B183
   Succs (1): B180

 [B182]
   1: DeclRefExpr 0x5590ecf2bc70 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf2c138 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2bc70 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B182.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf2be38 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B182.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf2bce0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf2bd00 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf2bd20 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
[B182.5] + [B182.6]
   8: IntegerLiteral 0x5590ecf2bd68 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf2bd88 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
([B182.7]) + [B182.8]
  10: IntegerLiteral 0x5590ecf2bdd0 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf2bdf0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
([B182.9]) + [B182.10]
  12: BinaryOperator 0x5590ecf2be50 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2be38 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2be18 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2bdf0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
[B182.4] >> ([B182.11])
  13: IntegerLiteral 0x5590ecf2be98 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf2bec8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
(Instruction)[B182.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf2bef0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
~[B182.14]
  16: IntegerLiteral 0x5590ecf2bf30 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf2bf50 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
([B182.15]) << [B182.16]
  18: UnaryOperator 0x5590ecf2bf98 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
~([B182.17])
  19: IntegerLiteral 0x5590ecf2bfd8 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf2bff8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2bfb8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2bf98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2bfd8 <line:88:60> 'int' 0
([B182.18]) << [B182.19]
  21: BinaryOperator 0x5590ecf2c040 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2be78 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2be50 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2be38 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2be18 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2bdf0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf2c020 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2bff8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2bfb8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2bf98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2bfd8 <line:88:60> 'int' 0
([B182.12]) & ([B182.20])
  22: CStyleCastExpr 0x5590ecf2c0d0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2c0b0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2c040 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2be78 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2be50 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2be38 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2be18 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2bdf0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf2c020 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2bff8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2bfb8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2bf98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2bfd8 <line:88:60> 'int' 0
(int)([B182.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf2c150 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf2c138 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2bc70 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf2c118 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf2c0f8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf2c0d0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf2c0b0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf2c040 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf2be78 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf2be50 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf2be38 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf2bcc0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf2bc98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf2be18 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf2bdf0 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf2bdb0 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf2bd88 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf2bd48 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf2bd20 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf2bce0 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf2bd00 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf2bd68 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf2bdd0 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf2c020 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf2bff8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf2bfb8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf2bf98 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf2bf78 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf2bf50 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf2bf10 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf2bef0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf2bec8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf2be98 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf2bf30 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf2bfd8 <line:88:60> 'int' 0
[B182.2] + (([B182.22]))
   Preds (1): B183
   Succs (1): B180

 [B183]
  case OP_DIV:
   1: DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf2b110 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B183.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf2afb8 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf2afd8 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf2aff8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
[B183.3] + [B183.4]
   6: IntegerLiteral 0x5590ecf2b040 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf2b060 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
([B183.5]) + [B183.6]
   8: IntegerLiteral 0x5590ecf2b0a8 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf2b0c8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
([B183.7]) + [B183.8]
  10: BinaryOperator 0x5590ecf2b128 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf2b110 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf2b0f0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf2b0c8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
[B183.2] >> ([B183.9])
  11: IntegerLiteral 0x5590ecf2b170 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf2b1a0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
(Instruction)[B183.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf2b1c8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
~[B183.12]
  14: IntegerLiteral 0x5590ecf2b208 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf2b228 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
([B183.13]) << [B183.14]
  16: UnaryOperator 0x5590ecf2b270 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
~([B183.15])
  17: IntegerLiteral 0x5590ecf2b2b0 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf2b2d0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf2b290 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf2b270 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2b2b0 <line:88:60> 'int' 0
([B183.16]) << [B183.17]
  19: BinaryOperator 0x5590ecf2b318 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf2b150 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf2b128 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf2b110 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf2b0f0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf2b0c8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf2b2f8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf2b2d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf2b290 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf2b270 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2b2b0 <line:88:60> 'int' 0
([B183.10]) & ([B183.18])
  20: CStyleCastExpr 0x5590ecf2b3a8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf2b388 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf2b318 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf2b150 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf2b128 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf2b110 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf2b0f0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf2b0c8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf2b2f8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf2b2d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf2b290 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf2b270 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2b2b0 <line:88:60> 'int' 0
(int)([B183.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf2b430 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf2b450 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf2b470 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf2b490 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf2b450 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf2b470 <line:119:32> 'int' 1
[B183.22] - [B183.23]
  25: BinaryOperator 0x5590ecf2b4d8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf2b430 <col:17> 'int' 1
`-ParenExpr 0x5590ecf2b4b8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf2b490 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf2b450 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf2b470 <line:119:32> 'int' 1
[B183.21] << ([B183.24])
  26: BinaryOperator 0x5590ecf2b520 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf2b410 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf2b3f0 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf2b3d0 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf2b3a8 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf2b388 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf2b318 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf2b150 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf2b128 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf2b110 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf2af98 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf2af70 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf2b0f0 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf2b0c8 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf2b088 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf2b060 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf2b020 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf2aff8 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf2afb8 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf2afd8 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf2b040 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf2b0a8 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf2b2f8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf2b2d0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf2b290 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf2b270 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf2b250 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf2b228 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf2b1e8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf2b1c8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf2b1a0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf2b170 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf2b208 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf2b2b0 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf2b500 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf2b4d8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf2b430 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf2b4b8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf2b490 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf2b450 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf2b470 <line:119:32> 'int' 1
((([B183.20]))) & ([B183.25])
   T: ([B183.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B181 B182

 [B184]
   T: continue;
   Preds (2): B185 B186
   Succs (1): B1

 [B185]
   1: DeclRefExpr 0x5590ecf2aa48 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf2aa70 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2aa48 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B185.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf2a9d0 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf2a9f8 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2a9d0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf2aa10 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf2a9f8 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2a9d0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.4]->savedpc
   6: BinaryOperator 0x5590ecf2aa88 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf2aa10 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf2a9f8 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2a9d0 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf2aa70 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2aa48 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B185.5] = [B185.2]
   7: DeclRefExpr 0x5590ecf2aab0 <lvm.c:372:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf2aba0 <lvm.c:372:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf2aab0 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B185.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf2aad8 <lvm.c:372:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf2ac08 <lvm.c:372:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2aad8 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf2ab00 <lvm.c:372:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf2ac20 <lvm.c:372:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2ab00 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B185.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf2ab28 <lvm.c:372:32> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf2ac38 <lvm.c:372:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2ab28 <col:32> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
[B185.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf2ac50 <lvm.c:372:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf2ac38 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2ab28 <col:32> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
[B185.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf2ab50 <lvm.c:372:36> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
rc
  17: ImplicitCastExpr 0x5590ecf2ac68 <lvm.c:372:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2ab50 <col:36> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
[B185.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf2ac80 <lvm.c:372:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf2ac68 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2ab50 <col:36> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
[B185.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf2ab78 <lvm.c:483:31> 'int' EnumConstant 0x5590ece94538 'TM_MUL' 'int'
TM_MUL
  20: ImplicitCastExpr 0x5590ecf2ac98 <lvm.c:483:31> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf2ab78 <col:31> 'int' EnumConstant 0x5590ece94538 'TM_MUL' 'int'
[B185.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf2abb8 <lvm.c:372:19, col:42> 'void'
|-ImplicitCastExpr 0x5590ecf2aba0 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf2aab0 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf2ac08 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2aad8 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf2ac20 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf2ab00 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf2ac50 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf2ac38 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2ab28 <col:32> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf2ac80 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf2ac68 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2ab50 <col:36> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
`-ImplicitCastExpr 0x5590ecf2ac98 <line:483:31> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf2ab78 <col:31> 'int' EnumConstant 0x5590ece94538 'TM_MUL' 'int'
[B185.8]([B185.10], [B185.12], [B185.15], [B185.18], [B185.20])
  22: DeclRefExpr 0x5590ecf2ad00 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf2ad28 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2ad00 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf2ad40 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf2ad28 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2ad00 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.23]->base
  25: ImplicitCastExpr 0x5590ecf2ad78 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf2ad40 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf2ad28 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf2ad00 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf2acd8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf2ad90 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf2acd8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf2ad78 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf2ad40 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf2ad28 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf2ad00 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B185.26] = [B185.25]
   Preds (2): B187 B188
   Succs (1): B184

 [B186]
   1: DeclRefExpr 0x5590ecf2a318 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf2a360 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2a340 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2a318 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
([B186.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf2a378 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf2a360 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2a340 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2a318 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
[B186.2]->value
   4: MemberExpr 0x5590ecf2a3b0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf2a378 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf2a360 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf2a340 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf2a318 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
[B186.3].n
   5: ImplicitCastExpr 0x5590ecf2a408 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2a3e8 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf2a3b0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf2a378 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf2a360 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf2a340 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf2a318 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
([B186.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecfa9830 <lvm.c:368:22, ./llimits.h:63:27>lvm.c:368:22
`-VarDecl 0x5590ecf2a2b8 <col:11, ./llimits.h:63:27> lvm.c:368:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf2a408 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf2a3e8 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf2a3b0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf2a378 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf2a360 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf2a340 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf2a318 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf2a490 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
rc
   8: ImplicitCastExpr 0x5590ecf2a4d8 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2a4b8 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2a490 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
([B186.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf2a4f0 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf2a4d8 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2a4b8 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2a490 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
[B186.8]->value
  10: MemberExpr 0x5590ecf2a528 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf2a4f0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf2a4d8 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf2a4b8 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf2a490 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
[B186.9].n
  11: ImplicitCastExpr 0x5590ecf2a580 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2a560 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf2a528 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf2a4f0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf2a4d8 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf2a4b8 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf2a490 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
([B186.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: DeclStmt 0x5590ecfa9818 <lvm.c:368:39, ./llimits.h:63:27>lvm.c:368:39
`-VarDecl 0x5590ecf2a430 <col:11, ./llimits.h:63:27> lvm.c:368:39 used nc 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf2a580 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf2a560 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf2a528 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf2a4f0 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf2a4d8 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf2a4b8 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf2a490 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
lua_Number nc = ((rc)->value.n);
  13: DeclRefExpr 0x5590ecf2a638 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf2a680 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2a660 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2a638 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B186.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclStmt 0x5590ecf2a698 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf2a5d8 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf2a680 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf2a660 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf2a638 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  16: DeclRefExpr 0x5590ecf2a760 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2a2b8 'nb' 'lua_Number':'double'
nb
  17: ImplicitCastExpr 0x5590ecf2a7f0 <./luaconf.h:535:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2a788 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf2a760 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2a2b8 'nb' 'lua_Number':'double'
([B186.16]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: DeclRefExpr 0x5590ecf2a7a8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2a430 'nc' 'lua_Number':'double'
nc
  19: ImplicitCastExpr 0x5590ecf2a808 <./luaconf.h:535:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf2a7d0 <col:31, col:33> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf2a7a8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2a430 'nc' 'lua_Number':'double'
([B186.18]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  20: BinaryOperator 0x5590ecf2a820 <./luaconf.h:535:27, col:33> 'double' '*'
|-ImplicitCastExpr 0x5590ecf2a7f0 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf2a788 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf2a760 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2a2b8 'nb' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf2a808 <./luaconf.h:535:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf2a7d0 <col:31, col:33> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf2a7a8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2a430 'nc' 'lua_Number':'double'
[B186.17] * [B186.19]
  21: DeclRefExpr 0x5590ecf2a6b0 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x5590ecf2a6d8 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2a6b0 <col:24> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
[B186.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf2a6f0 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf2a6d8 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2a6b0 <col:24> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
[B186.22]->value
  24: MemberExpr 0x5590ecf2a728 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf2a6f0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf2a6d8 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf2a6b0 <col:24> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
[B186.23].n
  25: BinaryOperator 0x5590ecf2a888 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf2a728 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf2a6f0 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf2a6d8 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf2a6b0 <col:24> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf2a868 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf2a848 <./luaconf.h:535:26, col:34> 'double'
    `-BinaryOperator 0x5590ecf2a820 <col:27, col:33> 'double' '*'
      |-ImplicitCastExpr 0x5590ecf2a7f0 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf2a788 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-DeclRefExpr 0x5590ecf2a760 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf2a2b8 'nb' 'lua_Number':'double'
      `-ImplicitCastExpr 0x5590ecf2a808 <./luaconf.h:535:31, col:33> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf2a7d0 <col:31, col:33> 'lua_Number':'double' lvalue
          `-DeclRefExpr 0x5590ecf2a7a8 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf2a430 'nc' 'lua_Number':'double'
[B186.24] = (([B186.20]))
  26: IntegerLiteral 0x5590ecf2a928 <./lua.h:77:22> 'int' 3
3
  27: DeclRefExpr 0x5590ecf2a8b0 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
i_o
  28: ImplicitCastExpr 0x5590ecf2a8d8 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf2a8b0 <col:42> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
[B186.27] (ImplicitCastExpr, LValueToRValue, TValue *)
  29: MemberExpr 0x5590ecf2a8f0 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf2a8d8 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf2a8b0 <col:42> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
[B186.28]->tt
  30: BinaryOperator 0x5590ecf2a948 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf2a8f0 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf2a8d8 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf2a8b0 <col:42> 'TValue *' lvalue Var 0x5590ecf2a5d8 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf2a928 <./lua.h:77:22> 'int' 3
[B186.29] = [B186.26]
   Preds (1): B187
   Succs (1): B184

 [B187]
   1: DeclRefExpr 0x5590ecf2a148 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
rc
   2: ImplicitCastExpr 0x5590ecf2a190 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2a170 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2a148 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
([B187.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf2a1a8 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf2a190 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2a170 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2a148 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
[B187.2]->tt
   4: ImplicitCastExpr 0x5590ecf2a220 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf2a1e0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf2a1a8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf2a190 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf2a170 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf2a148 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
([B187.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf2a200 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf2a238 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf2a220 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2a1e0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf2a1a8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf2a190 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf2a170 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf2a148 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf28e60 'rc' 'TValue *'
`-IntegerLiteral 0x5590ecf2a200 <./lua.h:77:22> 'int' 3
[B187.4] == [B187.5]
   T: if ([B188.8]) && ([B187.6])
   Preds (1): B188
   Succs (2): B186 B185

 [B188]
   1: ConditionalOperator 0x5590ecf29fa8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf29430 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf29408 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf292f8 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf292d8 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf292b8 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf29290 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf29270 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf29200 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf29038 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf29010 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf28ff8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf28fd8 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf28fb0 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf291e0 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf291b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf29178 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf29158 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf29198 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf293e8 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf293c0 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf29318 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf293a0 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf29378 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf29338 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf29358 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf29ae0 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf29ac8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf29450 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf29aa8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf29a80 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf29918 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf298f8 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf29890 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf29870 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf29848 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf29828 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf29a30 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf29a10 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf299e8 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf29940 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf299c8 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf299a0 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf29f80 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf29f68 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf29b08 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf29f48 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf29f28 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf29f00 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf29ee0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf29e70 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf29ca8 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf29c80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf29c68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf29c48 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf29c20 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf29e50 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf29e28 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf29de8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf29dc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf29e08 <line:92:60> 'int' 0
([B191.26]) ? [B189.29] : [B190.21]
   2: DeclStmt 0x5590ecf29ff8 <lvm.c:366:9, col:28>col:17
`-VarDecl 0x5590ecf28e60 <col:9, ./llimits.h:63:27> lvm.c:366:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf29fd8 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf29fa8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf29430 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf29408 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf292f8 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf292d8 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf292b8 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf29290 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf29270 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf29200 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf29038 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf29010 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf28ff8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf28fd8 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf28fb0 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf291e0 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf291b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf29178 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf29158 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf29198 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf293e8 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf293c0 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf29318 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf293a0 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf29378 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf29338 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf29358 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf29ae0 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf29ac8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf29450 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf29aa8 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf29a80 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf29918 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf298f8 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf29890 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf29870 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf29848 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf29828 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf29a30 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf29a10 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf299e8 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf29940 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf299c8 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf299a0 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf29f80 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf29f68 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf29b08 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf29f48 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf29f28 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf29f00 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf29ee0 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf29e70 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf29ca8 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf29c80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf29c68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf29c48 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf29c20 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf29e50 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf29e28 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf29de8 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf29dc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf29e08 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf2a010 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
rb
   4: ImplicitCastExpr 0x5590ecf2a058 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf2a038 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf2a010 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
([B188.3]) (ImplicitCastExpr, LValueToRValue, TValue *)
   5: MemberExpr 0x5590ecf2a070 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf2a058 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf2a038 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf2a010 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
[B188.4]->tt
   6: ImplicitCastExpr 0x5590ecf2a0e8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf2a0a8 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf2a070 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf2a058 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf2a038 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf2a010 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
([B188.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5590ecf2a0c8 <./lua.h:77:22> 'int' 3
3
   8: BinaryOperator 0x5590ecf2a100 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf2a0e8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf2a0a8 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf2a070 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf2a058 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf2a038 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf2a010 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf27b98 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf2a0c8 <./lua.h:77:22> 'int' 3
[B188.6] == [B188.7]
   T: ([B188.8]) && ...
   Preds (2): B189 B190
   Succs (2): B187 B185

 [B189]
   1: DeclRefExpr 0x5590ecf29450 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf29ac8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf29450 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B189.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf295b0 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B189.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf294c0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf294e0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf29500 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
[B189.5] + [B189.6]
   8: IntegerLiteral 0x5590ecf29548 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf29568 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
([B189.7]) + [B189.8]
  10: BinaryOperator 0x5590ecf295c8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
[B189.4] >> ([B189.9])
  11: IntegerLiteral 0x5590ecf29610 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf29640 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
(Instruction)[B189.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf29668 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
~[B189.12]
  14: IntegerLiteral 0x5590ecf296a8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf296c8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
([B189.13]) << [B189.14]
  16: UnaryOperator 0x5590ecf29710 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
~([B189.15])
  17: IntegerLiteral 0x5590ecf29750 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf29770 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
([B189.16]) << [B189.17]
  19: BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
([B189.10]) & ([B189.18])
  20: CStyleCastExpr 0x5590ecf29848 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf29828 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
(int)([B189.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf29918 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf298f8 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf29890 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf29870 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf29848 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf29828 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
(int)((([B189.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf29940 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf29960 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf29980 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf299a0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
[B189.23] - [B189.24]
  26: BinaryOperator 0x5590ecf299e8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf29940 <col:17> 'int' 1
`-ParenExpr 0x5590ecf299c8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf299a0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
[B189.22] << ([B189.25])
  27: UnaryOperator 0x5590ecf29a30 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf29a10 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf299e8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf29940 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf299c8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf299a0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
~([B189.26])
  28: BinaryOperator 0x5590ecf29a80 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf29918 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf298f8 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf29890 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf29870 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf29848 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf29828 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf29a30 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf29a10 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf299e8 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf29940 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf299c8 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf299a0 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
[B189.21] & [B189.27]
  29: BinaryOperator 0x5590ecf29ae0 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf29ac8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf29450 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf29aa8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf29a80 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf29918 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf298f8 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf29890 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf29870 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf29848 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf29828 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf297b8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf295f0 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf295c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf295b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf294a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf29478 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf29590 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf29568 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf29528 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf29500 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf294c0 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf294e0 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf29548 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf29798 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf29770 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf29730 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf29710 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf296f0 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf296c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf29688 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf29668 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf29640 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf29610 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf296a8 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf29750 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf29a30 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf29a10 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf299e8 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf29940 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf299c8 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf299a0 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf29960 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf29980 <line:119:32> 'int' 1
[B189.2] + ([B189.28])
   Preds (1): B191
   Succs (1): B188

 [B190]
   1: DeclRefExpr 0x5590ecf29b08 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf29f68 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf29b08 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B190.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf29c68 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B190.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf29b78 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf29b98 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf29bb8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
[B190.5] + [B190.6]
   8: IntegerLiteral 0x5590ecf29c00 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf29c20 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
([B190.7]) + [B190.8]
  10: BinaryOperator 0x5590ecf29c80 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf29c68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf29c48 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf29c20 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
[B190.4] >> ([B190.9])
  11: IntegerLiteral 0x5590ecf29cc8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf29cf8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
(Instruction)[B190.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf29d20 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
~[B190.12]
  14: IntegerLiteral 0x5590ecf29d60 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf29d80 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
([B190.13]) << [B190.14]
  16: UnaryOperator 0x5590ecf29dc8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
~([B190.15])
  17: IntegerLiteral 0x5590ecf29e08 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf29e28 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf29de8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf29dc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf29e08 <line:92:60> 'int' 0
([B190.16]) << [B190.17]
  19: BinaryOperator 0x5590ecf29e70 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf29ca8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf29c80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf29c68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf29c48 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf29c20 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf29e50 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf29e28 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf29de8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf29dc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf29e08 <line:92:60> 'int' 0
([B190.10]) & ([B190.18])
  20: CStyleCastExpr 0x5590ecf29f00 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf29ee0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf29e70 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf29ca8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf29c80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf29c68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf29c48 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf29c20 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf29e50 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf29e28 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf29de8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf29dc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf29e08 <line:92:60> 'int' 0
(int)([B190.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf29f80 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf29f68 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf29b08 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf29f48 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf29f28 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf29f00 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf29ee0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf29e70 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf29ca8 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf29c80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf29c68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf29b58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf29b30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf29c48 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf29c20 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf29be0 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf29bb8 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf29b78 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf29b98 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf29c00 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf29e50 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf29e28 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf29de8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf29dc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf29da8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf29d80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf29d40 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf29d20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf29cf8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf29cc8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf29d60 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf29e08 <line:92:60> 'int' 0
[B190.2] + (([B190.20]))
   Preds (1): B191
   Succs (1): B188

 [B191]
   1: ConditionalOperator 0x5590ecf28de8 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf281d0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf281a8 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf28098 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf28078 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf28058 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf28030 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf28010 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf27fa0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf27dd8 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf27db0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf27d98 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf27d78 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf27d50 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf27f80 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf27f58 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf27f18 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf27ef8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf27f38 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf28188 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf28160 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf280b8 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf28140 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf28118 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf280d8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf280f8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf288b8 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf288a0 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf281f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf28880 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf28858 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf28720 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf28700 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf28698 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf28678 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf28650 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf28630 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf28838 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf28818 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf287f0 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf28748 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf287d0 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf287a8 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf28dc0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf28da8 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf288e0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf28d88 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf28d68 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf28d40 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf28d20 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf28cb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf28ae8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf28ac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf28aa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf28a88 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf28a60 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf28c90 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf28c68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf28c28 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf28c08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf28c48 <line:88:60> 'int' 0
([B194.26]) ? [B192.31] : [B193.23]
   2: DeclStmt 0x5590ecf28e38 <lvm.c:365:9, col:28>col:17
`-VarDecl 0x5590ecf27b98 <col:9, ./llimits.h:63:27> lvm.c:365:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf28e18 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf28de8 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf281d0 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf281a8 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf28098 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf28078 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf28058 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf28030 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf28010 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf27fa0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf27dd8 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf27db0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf27d98 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf27d78 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf27d50 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf27f80 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf27f58 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf27f18 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf27ef8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf27f38 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf28188 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf28160 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf280b8 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf28140 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf28118 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf280d8 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf280f8 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf288b8 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf288a0 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf281f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf28880 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf28858 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf28720 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf28700 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf28698 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf28678 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf28650 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf28630 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf28838 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf28818 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf287f0 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf28748 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf287d0 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf287a8 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf28dc0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf28da8 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf288e0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf28d88 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf28d68 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf28d40 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf28d20 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf28cb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf28ae8 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf28ac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf28aa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf28a88 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf28a60 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf28c90 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf28c68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf28c28 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf28c08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf28c48 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf28ff8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B191.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf28f08 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf28f28 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf28f48 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
[B191.5] + [B191.6]
   8: IntegerLiteral 0x5590ecf28f90 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf28fb0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
([B191.7]) + [B191.8]
  10: BinaryOperator 0x5590ecf29010 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf28ff8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf28fd8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf28fb0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
[B191.4] >> ([B191.9])
  11: IntegerLiteral 0x5590ecf29058 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf29088 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
(Instruction)[B191.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf290b0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
~[B191.12]
  14: IntegerLiteral 0x5590ecf290f0 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf29110 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
([B191.13]) << [B191.14]
  16: UnaryOperator 0x5590ecf29158 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
~([B191.15])
  17: IntegerLiteral 0x5590ecf29198 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf291b8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf29178 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf29158 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf29198 <line:92:60> 'int' 0
([B191.16]) << [B191.17]
  19: BinaryOperator 0x5590ecf29200 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf29038 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf29010 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf28ff8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf28fd8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf28fb0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf291e0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf291b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf29178 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf29158 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf29198 <line:92:60> 'int' 0
([B191.10]) & ([B191.18])
  20: CStyleCastExpr 0x5590ecf29290 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf29270 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf29200 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf29038 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf29010 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf28ff8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf28fd8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf28fb0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf291e0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf291b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf29178 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf29158 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf29198 <line:92:60> 'int' 0
(int)([B191.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf29318 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf29338 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf29358 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf29378 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf29338 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf29358 <line:119:32> 'int' 1
[B191.22] - [B191.23]
  25: BinaryOperator 0x5590ecf293c0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf29318 <col:17> 'int' 1
`-ParenExpr 0x5590ecf293a0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf29378 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf29338 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf29358 <line:119:32> 'int' 1
[B191.21] << ([B191.24])
  26: BinaryOperator 0x5590ecf29408 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf292f8 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf292d8 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf292b8 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf29290 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf29270 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf29200 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf29038 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf29010 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf28ff8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf28ee8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf28ec0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf28fd8 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf28fb0 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf28f70 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf28f48 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf28f08 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf28f28 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf28f90 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf291e0 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf291b8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf29178 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf29158 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf29138 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf29110 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf290d0 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf290b0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf29088 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf29058 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf290f0 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf29198 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf293e8 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf293c0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf29318 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf293a0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf29378 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf29338 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf29358 <line:119:32> 'int' 1
((([B191.20]))) & ([B191.25])
   T: ([B191.26]) ? ... : ...
   Preds (2): B192 B193
   Succs (2): B189 B190

 [B192]
   1: DeclRefExpr 0x5590ecf281f0 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf288a0 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf281f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B192.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf283b8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B192.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf28260 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf28280 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf282a0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
[B192.5] + [B192.6]
   8: IntegerLiteral 0x5590ecf282e8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf28308 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
([B192.7]) + [B192.8]
  10: IntegerLiteral 0x5590ecf28350 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf28370 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
([B192.9]) + [B192.10]
  12: BinaryOperator 0x5590ecf283d0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
[B192.4] >> ([B192.11])
  13: IntegerLiteral 0x5590ecf28418 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf28448 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
(Instruction)[B192.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf28470 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
~[B192.14]
  16: IntegerLiteral 0x5590ecf284b0 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf284d0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
([B192.15]) << [B192.16]
  18: UnaryOperator 0x5590ecf28518 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
~([B192.17])
  19: IntegerLiteral 0x5590ecf28558 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf28578 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
([B192.18]) << [B192.19]
  21: BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
([B192.12]) & ([B192.20])
  22: CStyleCastExpr 0x5590ecf28650 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf28630 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
(int)([B192.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf28720 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf28700 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf28698 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf28678 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf28650 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf28630 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
(int)((([B192.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf28748 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf28768 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf28788 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf287a8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
[B192.25] - [B192.26]
  28: BinaryOperator 0x5590ecf287f0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf28748 <col:17> 'int' 1
`-ParenExpr 0x5590ecf287d0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf287a8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
[B192.24] << ([B192.27])
  29: UnaryOperator 0x5590ecf28838 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf28818 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf287f0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf28748 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf287d0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf287a8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
~([B192.28])
  30: BinaryOperator 0x5590ecf28858 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf28720 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf28700 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf28698 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf28678 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf28650 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf28630 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf28838 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf28818 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf287f0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf28748 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf287d0 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf287a8 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
[B192.23] & [B192.29]
  31: BinaryOperator 0x5590ecf288b8 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf288a0 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf281f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf28880 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf28858 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf28720 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf28700 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf28698 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf28678 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf28650 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf28630 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf285c0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf283f8 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf283d0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf283b8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf28240 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf28218 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf28398 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf28370 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf28330 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf28308 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf282c8 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf282a0 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf28260 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf28280 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf282e8 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf28350 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf285a0 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf28578 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf28538 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf28518 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf284f8 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf284d0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf28490 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf28470 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf28448 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf28418 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf284b0 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf28558 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf28838 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf28818 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf287f0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf28748 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf287d0 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf287a8 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf28768 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf28788 <line:119:32> 'int' 1
[B192.2] + ([B192.30])
   Preds (1): B194
   Succs (1): B191

 [B193]
   1: DeclRefExpr 0x5590ecf288e0 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf28da8 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf288e0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B193.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf28aa8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B193.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf28950 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf28970 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf28990 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
[B193.5] + [B193.6]
   8: IntegerLiteral 0x5590ecf289d8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf289f8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
([B193.7]) + [B193.8]
  10: IntegerLiteral 0x5590ecf28a40 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf28a60 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
([B193.9]) + [B193.10]
  12: BinaryOperator 0x5590ecf28ac0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf28aa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf28a88 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf28a60 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
[B193.4] >> ([B193.11])
  13: IntegerLiteral 0x5590ecf28b08 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf28b38 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
(Instruction)[B193.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf28b60 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
~[B193.14]
  16: IntegerLiteral 0x5590ecf28ba0 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf28bc0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
([B193.15]) << [B193.16]
  18: UnaryOperator 0x5590ecf28c08 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
~([B193.17])
  19: IntegerLiteral 0x5590ecf28c48 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf28c68 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf28c28 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf28c08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf28c48 <line:88:60> 'int' 0
([B193.18]) << [B193.19]
  21: BinaryOperator 0x5590ecf28cb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf28ae8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf28ac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf28aa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf28a88 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf28a60 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf28c90 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf28c68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf28c28 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf28c08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf28c48 <line:88:60> 'int' 0
([B193.12]) & ([B193.20])
  22: CStyleCastExpr 0x5590ecf28d40 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf28d20 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf28cb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf28ae8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf28ac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf28aa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf28a88 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf28a60 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf28c90 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf28c68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf28c28 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf28c08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf28c48 <line:88:60> 'int' 0
(int)([B193.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf28dc0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf28da8 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf288e0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf28d88 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf28d68 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf28d40 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf28d20 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf28cb0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf28ae8 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf28ac0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf28aa8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf28930 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf28908 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf28a88 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf28a60 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf28a20 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf289f8 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf289b8 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf28990 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf28950 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf28970 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf289d8 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf28a40 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf28c90 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf28c68 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf28c28 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf28c08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf28be8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf28bc0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf28b80 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf28b60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf28b38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf28b08 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf28ba0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf28c48 <line:88:60> 'int' 0
[B193.2] + (([B193.22]))
   Preds (1): B194
   Succs (1): B191

 [B194]
  case OP_MUL:
   1: DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf27d98 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B194.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf27c40 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf27c60 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf27c80 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
[B194.3] + [B194.4]
   6: IntegerLiteral 0x5590ecf27cc8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf27ce8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
([B194.5]) + [B194.6]
   8: IntegerLiteral 0x5590ecf27d30 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf27d50 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
([B194.7]) + [B194.8]
  10: BinaryOperator 0x5590ecf27db0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf27d98 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf27d78 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf27d50 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
[B194.2] >> ([B194.9])
  11: IntegerLiteral 0x5590ecf27df8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf27e28 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
(Instruction)[B194.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf27e50 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
~[B194.12]
  14: IntegerLiteral 0x5590ecf27e90 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf27eb0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
([B194.13]) << [B194.14]
  16: UnaryOperator 0x5590ecf27ef8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
~([B194.15])
  17: IntegerLiteral 0x5590ecf27f38 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf27f58 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf27f18 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf27ef8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf27f38 <line:88:60> 'int' 0
([B194.16]) << [B194.17]
  19: BinaryOperator 0x5590ecf27fa0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf27dd8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf27db0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf27d98 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf27d78 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf27d50 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf27f80 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf27f58 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf27f18 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf27ef8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf27f38 <line:88:60> 'int' 0
([B194.10]) & ([B194.18])
  20: CStyleCastExpr 0x5590ecf28030 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf28010 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf27fa0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf27dd8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf27db0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf27d98 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf27d78 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf27d50 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf27f80 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf27f58 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf27f18 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf27ef8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf27f38 <line:88:60> 'int' 0
(int)([B194.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf280b8 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf280d8 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf280f8 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf28118 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf280d8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf280f8 <line:119:32> 'int' 1
[B194.22] - [B194.23]
  25: BinaryOperator 0x5590ecf28160 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf280b8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf28140 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf28118 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf280d8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf280f8 <line:119:32> 'int' 1
[B194.21] << ([B194.24])
  26: BinaryOperator 0x5590ecf281a8 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf28098 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf28078 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf28058 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf28030 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf28010 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf27fa0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf27dd8 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf27db0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf27d98 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf27c20 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf27bf8 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf27d78 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf27d50 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf27d10 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf27ce8 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf27ca8 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf27c80 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf27c40 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf27c60 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf27cc8 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf27d30 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf27f80 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf27f58 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf27f18 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf27ef8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf27ed8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf27eb0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf27e70 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf27e50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf27e28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf27df8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf27e90 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf27f38 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf28188 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf28160 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf280b8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf28140 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf28118 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf280d8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf280f8 <line:119:32> 'int' 1
((([B194.20]))) & ([B194.25])
   T: ([B194.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B192 B193

 [B195]
   T: continue;
   Preds (2): B196 B197
   Succs (1): B1

 [B196]
   1: DeclRefExpr 0x5590ecf276b8 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf276e0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf276b8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B196.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf27640 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf27668 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27640 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf27680 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf27668 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf27640 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.4]->savedpc
   6: BinaryOperator 0x5590ecf276f8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf27680 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf27668 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf27640 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf276e0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf276b8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B196.5] = [B196.2]
   7: DeclRefExpr 0x5590ecf27720 <lvm.c:372:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf27810 <lvm.c:372:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf27720 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B196.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf27748 <lvm.c:372:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf27878 <lvm.c:372:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27748 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf27770 <lvm.c:372:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf27890 <lvm.c:372:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27770 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B196.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf27798 <lvm.c:372:32> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf278a8 <lvm.c:372:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27798 <col:32> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
[B196.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf278c0 <lvm.c:372:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf278a8 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf27798 <col:32> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
[B196.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf277c0 <lvm.c:372:36> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
rc
  17: ImplicitCastExpr 0x5590ecf278d8 <lvm.c:372:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf277c0 <col:36> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
[B196.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf278f0 <lvm.c:372:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf278d8 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf277c0 <col:36> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
[B196.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf277e8 <lvm.c:479:31> 'int' EnumConstant 0x5590ece944f0 'TM_SUB' 'int'
TM_SUB
  20: ImplicitCastExpr 0x5590ecf27908 <lvm.c:479:31> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf277e8 <col:31> 'int' EnumConstant 0x5590ece944f0 'TM_SUB' 'int'
[B196.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf27828 <lvm.c:372:19, col:42> 'void'
|-ImplicitCastExpr 0x5590ecf27810 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf27720 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf27878 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf27748 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf27890 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf27770 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf278c0 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf278a8 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf27798 <col:32> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf278f0 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf278d8 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf277c0 <col:36> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
`-ImplicitCastExpr 0x5590ecf27908 <line:479:31> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf277e8 <col:31> 'int' EnumConstant 0x5590ece944f0 'TM_SUB' 'int'
[B196.8]([B196.10], [B196.12], [B196.15], [B196.18], [B196.20])
  22: DeclRefExpr 0x5590ecf27970 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf27998 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27970 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf279b0 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf27998 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf27970 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.23]->base
  25: ImplicitCastExpr 0x5590ecf279e8 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf279b0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf27998 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf27970 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf27948 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf27a00 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf27948 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf279e8 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf279b0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf27998 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf27970 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B196.26] = [B196.25]
   Preds (2): B198 B199
   Succs (1): B195

 [B197]
   1: DeclRefExpr 0x5590ecf26f88 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf26fd0 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf26fb0 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf26f88 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
([B197.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf26fe8 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf26fd0 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf26fb0 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf26f88 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
[B197.2]->value
   4: MemberExpr 0x5590ecf27020 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf26fe8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf26fd0 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf26fb0 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf26f88 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
[B197.3].n
   5: ImplicitCastExpr 0x5590ecf27078 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf27058 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf27020 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf26fe8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf26fd0 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf26fb0 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf26f88 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
([B197.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecfac330 <lvm.c:368:22, ./llimits.h:63:27>lvm.c:368:22
`-VarDecl 0x5590ecf26f28 <col:11, ./llimits.h:63:27> lvm.c:368:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf27078 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf27058 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf27020 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf26fe8 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf26fd0 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf26fb0 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf26f88 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf27100 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
rc
   8: ImplicitCastExpr 0x5590ecf27148 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf27128 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf27100 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
([B197.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf27160 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf27148 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf27128 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf27100 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
[B197.8]->value
  10: MemberExpr 0x5590ecf27198 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf27160 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf27148 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf27128 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf27100 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
[B197.9].n
  11: ImplicitCastExpr 0x5590ecf271f0 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf271d0 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf27198 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf27160 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf27148 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf27128 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf27100 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
([B197.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: DeclStmt 0x5590ecfac318 <lvm.c:368:39, ./llimits.h:63:27>lvm.c:368:39
`-VarDecl 0x5590ecf270a0 <col:11, ./llimits.h:63:27> lvm.c:368:39 used nc 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf271f0 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf271d0 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf27198 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf27160 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf27148 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf27128 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf27100 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
lua_Number nc = ((rc)->value.n);
  13: DeclRefExpr 0x5590ecf272a8 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf272f0 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf272d0 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf272a8 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B197.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclStmt 0x5590ecf27308 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf27248 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf272f0 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf272d0 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf272a8 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  16: DeclRefExpr 0x5590ecf273d0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf26f28 'nb' 'lua_Number':'double'
nb
  17: ImplicitCastExpr 0x5590ecf27460 <./luaconf.h:534:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf273f8 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf273d0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf26f28 'nb' 'lua_Number':'double'
([B197.16]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: DeclRefExpr 0x5590ecf27418 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf270a0 'nc' 'lua_Number':'double'
nc
  19: ImplicitCastExpr 0x5590ecf27478 <./luaconf.h:534:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf27440 <col:31, col:33> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf27418 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf270a0 'nc' 'lua_Number':'double'
([B197.18]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  20: BinaryOperator 0x5590ecf27490 <./luaconf.h:534:27, col:33> 'double' '-'
|-ImplicitCastExpr 0x5590ecf27460 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf273f8 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf273d0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf26f28 'nb' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf27478 <./luaconf.h:534:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf27440 <col:31, col:33> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf27418 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf270a0 'nc' 'lua_Number':'double'
[B197.17] - [B197.19]
  21: DeclRefExpr 0x5590ecf27320 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x5590ecf27348 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27320 <col:24> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
[B197.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf27360 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf27348 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf27320 <col:24> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
[B197.22]->value
  24: MemberExpr 0x5590ecf27398 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf27360 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf27348 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf27320 <col:24> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
[B197.23].n
  25: BinaryOperator 0x5590ecf274f8 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf27398 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf27360 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf27348 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf27320 <col:24> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf274d8 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf274b8 <./luaconf.h:534:26, col:34> 'double'
    `-BinaryOperator 0x5590ecf27490 <col:27, col:33> 'double' '-'
      |-ImplicitCastExpr 0x5590ecf27460 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf273f8 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-DeclRefExpr 0x5590ecf273d0 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf26f28 'nb' 'lua_Number':'double'
      `-ImplicitCastExpr 0x5590ecf27478 <./luaconf.h:534:31, col:33> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf27440 <col:31, col:33> 'lua_Number':'double' lvalue
          `-DeclRefExpr 0x5590ecf27418 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf270a0 'nc' 'lua_Number':'double'
[B197.24] = (([B197.20]))
  26: IntegerLiteral 0x5590ecf27598 <./lua.h:77:22> 'int' 3
3
  27: DeclRefExpr 0x5590ecf27520 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
i_o
  28: ImplicitCastExpr 0x5590ecf27548 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf27520 <col:42> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
[B197.27] (ImplicitCastExpr, LValueToRValue, TValue *)
  29: MemberExpr 0x5590ecf27560 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf27548 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf27520 <col:42> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
[B197.28]->tt
  30: BinaryOperator 0x5590ecf275b8 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf27560 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf27548 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf27520 <col:42> 'TValue *' lvalue Var 0x5590ecf27248 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf27598 <./lua.h:77:22> 'int' 3
[B197.29] = [B197.26]
   Preds (1): B198
   Succs (1): B195

 [B198]
   1: DeclRefExpr 0x5590ecf26db8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
rc
   2: ImplicitCastExpr 0x5590ecf26e00 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf26de0 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf26db8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
([B198.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf26e18 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf26e00 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf26de0 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf26db8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
[B198.2]->tt
   4: ImplicitCastExpr 0x5590ecf26e90 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf26e50 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf26e18 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf26e00 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf26de0 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf26db8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
([B198.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf26e70 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf26ea8 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf26e90 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf26e50 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf26e18 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf26e00 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf26de0 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf26db8 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf25b00 'rc' 'TValue *'
`-IntegerLiteral 0x5590ecf26e70 <./lua.h:77:22> 'int' 3
[B198.4] == [B198.5]
   T: if ([B199.8]) && ([B198.6])
   Preds (1): B199
   Succs (2): B197 B196

 [B199]
   1: ConditionalOperator 0x5590ecf26c18 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf260d0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf260a8 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf25f98 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf25f78 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf25f58 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf25f30 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf25f10 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf25ea0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf25cd8 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf25cb0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf25c98 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf25c78 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf25c50 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf25e80 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf25e58 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf25e18 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf25df8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf25e38 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf26088 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf26060 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf25fb8 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf26040 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf26018 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf25fd8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf25ff8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf26750 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf26738 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf260f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf26718 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf266f0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf265b8 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf26598 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf26530 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf26510 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf264e8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf264c8 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf266d0 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf266b0 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf26688 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf265e0 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf26668 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf26640 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf26bf0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf26bd8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf26778 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf26bb8 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf26b98 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf26b70 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf26b50 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf26ae0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf26918 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf268f0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf268d8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf268b8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf26890 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf26ac0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf26a98 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf26a58 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf26a38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf26a78 <line:92:60> 'int' 0
([B202.26]) ? [B200.29] : [B201.21]
   2: DeclStmt 0x5590ecf26c68 <lvm.c:366:9, col:28>col:17
`-VarDecl 0x5590ecf25b00 <col:9, ./llimits.h:63:27> lvm.c:366:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf26c48 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf26c18 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf260d0 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf260a8 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf25f98 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf25f78 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf25f58 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf25f30 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf25f10 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf25ea0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf25cd8 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf25cb0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf25c98 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf25c78 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf25c50 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf25e80 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf25e58 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf25e18 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf25df8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf25e38 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf26088 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf26060 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf25fb8 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf26040 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf26018 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf25fd8 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf25ff8 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf26750 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf26738 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf260f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf26718 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf266f0 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf265b8 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf26598 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf26530 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf26510 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf264e8 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf264c8 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf266d0 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf266b0 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf26688 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf265e0 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf26668 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf26640 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf26bf0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf26bd8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf26778 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf26bb8 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf26b98 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf26b70 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf26b50 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf26ae0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf26918 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf268f0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf268d8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf268b8 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf26890 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf26ac0 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf26a98 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf26a58 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf26a38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf26a78 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf26c80 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
rb
   4: ImplicitCastExpr 0x5590ecf26cc8 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf26ca8 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf26c80 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
([B199.3]) (ImplicitCastExpr, LValueToRValue, TValue *)
   5: MemberExpr 0x5590ecf26ce0 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf26cc8 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf26ca8 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf26c80 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
[B199.4]->tt
   6: ImplicitCastExpr 0x5590ecf26d58 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf26d18 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf26ce0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf26cc8 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf26ca8 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf26c80 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
([B199.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5590ecf26d38 <./lua.h:77:22> 'int' 3
3
   8: BinaryOperator 0x5590ecf26d70 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf26d58 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf26d18 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf26ce0 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf26cc8 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf26ca8 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf26c80 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf24818 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf26d38 <./lua.h:77:22> 'int' 3
[B199.6] == [B199.7]
   T: ([B199.8]) && ...
   Preds (2): B200 B201
   Succs (2): B198 B196

 [B200]
   1: DeclRefExpr 0x5590ecf260f0 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf26738 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf260f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B200.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf26250 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B200.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf26160 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf26180 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf261a0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
[B200.5] + [B200.6]
   8: IntegerLiteral 0x5590ecf261e8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf26208 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
([B200.7]) + [B200.8]
  10: BinaryOperator 0x5590ecf26268 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
[B200.4] >> ([B200.9])
  11: IntegerLiteral 0x5590ecf262b0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf262e0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
(Instruction)[B200.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf26308 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
~[B200.12]
  14: IntegerLiteral 0x5590ecf26348 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf26368 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
([B200.13]) << [B200.14]
  16: UnaryOperator 0x5590ecf263b0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
~([B200.15])
  17: IntegerLiteral 0x5590ecf263f0 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf26410 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
([B200.16]) << [B200.17]
  19: BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
([B200.10]) & ([B200.18])
  20: CStyleCastExpr 0x5590ecf264e8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf264c8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
(int)([B200.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf265b8 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf26598 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf26530 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf26510 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf264e8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf264c8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
(int)((([B200.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf265e0 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf26600 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf26620 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf26640 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
[B200.23] - [B200.24]
  26: BinaryOperator 0x5590ecf26688 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf265e0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf26668 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf26640 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
[B200.22] << ([B200.25])
  27: UnaryOperator 0x5590ecf266d0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf266b0 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf26688 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf265e0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf26668 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf26640 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
~([B200.26])
  28: BinaryOperator 0x5590ecf266f0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf265b8 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf26598 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf26530 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf26510 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf264e8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf264c8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf266d0 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf266b0 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf26688 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf265e0 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf26668 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf26640 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
[B200.21] & [B200.27]
  29: BinaryOperator 0x5590ecf26750 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf26738 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf260f0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf26718 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf266f0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf265b8 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf26598 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf26530 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf26510 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf264e8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf264c8 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf26458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf26290 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf26268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf26250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf26140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf26118 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf26230 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf26208 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf261c8 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf261a0 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf26160 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf26180 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf261e8 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf26438 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf26410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf263d0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf263b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf26390 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf26368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf26328 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf26308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf262e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf262b0 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf26348 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf263f0 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf266d0 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf266b0 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf26688 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf265e0 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf26668 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf26640 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf26600 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf26620 <line:119:32> 'int' 1
[B200.2] + ([B200.28])
   Preds (1): B202
   Succs (1): B199

 [B201]
   1: DeclRefExpr 0x5590ecf26778 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf26bd8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf26778 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B201.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf268d8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B201.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf267e8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf26808 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf26828 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
[B201.5] + [B201.6]
   8: IntegerLiteral 0x5590ecf26870 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf26890 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
([B201.7]) + [B201.8]
  10: BinaryOperator 0x5590ecf268f0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf268d8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf268b8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf26890 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
[B201.4] >> ([B201.9])
  11: IntegerLiteral 0x5590ecf26938 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf26968 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
(Instruction)[B201.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf26990 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
~[B201.12]
  14: IntegerLiteral 0x5590ecf269d0 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf269f0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
([B201.13]) << [B201.14]
  16: UnaryOperator 0x5590ecf26a38 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
~([B201.15])
  17: IntegerLiteral 0x5590ecf26a78 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf26a98 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf26a58 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf26a38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf26a78 <line:92:60> 'int' 0
([B201.16]) << [B201.17]
  19: BinaryOperator 0x5590ecf26ae0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf26918 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf268f0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf268d8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf268b8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf26890 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf26ac0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf26a98 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf26a58 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf26a38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf26a78 <line:92:60> 'int' 0
([B201.10]) & ([B201.18])
  20: CStyleCastExpr 0x5590ecf26b70 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf26b50 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf26ae0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf26918 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf268f0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf268d8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf268b8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf26890 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf26ac0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf26a98 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf26a58 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf26a38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf26a78 <line:92:60> 'int' 0
(int)([B201.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf26bf0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf26bd8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf26778 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf26bb8 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf26b98 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf26b70 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf26b50 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf26ae0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf26918 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf268f0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf268d8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf267c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf267a0 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf268b8 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf26890 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf26850 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf26828 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf267e8 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf26808 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf26870 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf26ac0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf26a98 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf26a58 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf26a38 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf26a18 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf269f0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf269b0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf26990 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf26968 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf26938 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf269d0 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf26a78 <line:92:60> 'int' 0
[B201.2] + (([B201.20]))
   Preds (1): B202
   Succs (1): B199

 [B202]
   1: ConditionalOperator 0x5590ecf25a88 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf24e50 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf24e28 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf24d18 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf24cf8 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf24cd8 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf24cb0 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf24c90 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf24c20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf24a58 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf24a30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf24a18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf249f8 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf249d0 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf24c00 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf24bd8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf24b98 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf24b78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf24bb8 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf24e08 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf24de0 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf24d38 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf24dc0 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf24d98 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf24d58 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf24d78 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf25538 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf25520 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf24e70 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf25500 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf254d8 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf253a0 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf25380 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf25318 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf252f8 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf252d0 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf252b0 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf254b8 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf25498 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf25470 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf253c8 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf25450 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf25428 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf25a60 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf25a28 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf25560 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf25a08 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf259e8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf259c0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf259a0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf25930 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf25768 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf25740 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf25728 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf25708 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf256e0 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf25910 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf258e8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf258a8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf25888 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf258c8 <line:88:60> 'int' 0
([B205.26]) ? [B203.31] : [B204.23]
   2: DeclStmt 0x5590ecf25ad8 <lvm.c:365:9, col:28>col:17
`-VarDecl 0x5590ecf24818 <col:9, ./llimits.h:63:27> lvm.c:365:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf25ab8 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf25a88 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf24e50 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf24e28 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf24d18 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf24cf8 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf24cd8 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf24cb0 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf24c90 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf24c20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf24a58 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf24a30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf24a18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf249f8 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf249d0 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf24c00 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf24bd8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf24b98 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf24b78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf24bb8 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf24e08 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf24de0 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf24d38 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf24dc0 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf24d98 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf24d58 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf24d78 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf25538 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf25520 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf24e70 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf25500 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf254d8 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf253a0 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf25380 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf25318 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf252f8 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf252d0 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf252b0 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf254b8 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf25498 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf25470 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf253c8 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf25450 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf25428 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf25a60 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf25a28 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf25560 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf25a08 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf259e8 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf259c0 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf259a0 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf25930 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf25768 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf25740 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf25728 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf25708 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf256e0 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf25910 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf258e8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf258a8 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf25888 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf258c8 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf25c98 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B202.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf25ba8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf25bc8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf25be8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
[B202.5] + [B202.6]
   8: IntegerLiteral 0x5590ecf25c30 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf25c50 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
([B202.7]) + [B202.8]
  10: BinaryOperator 0x5590ecf25cb0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf25c98 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf25c78 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf25c50 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
[B202.4] >> ([B202.9])
  11: IntegerLiteral 0x5590ecf25cf8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf25d28 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
(Instruction)[B202.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf25d50 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
~[B202.12]
  14: IntegerLiteral 0x5590ecf25d90 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf25db0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
([B202.13]) << [B202.14]
  16: UnaryOperator 0x5590ecf25df8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
~([B202.15])
  17: IntegerLiteral 0x5590ecf25e38 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf25e58 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf25e18 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf25df8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf25e38 <line:92:60> 'int' 0
([B202.16]) << [B202.17]
  19: BinaryOperator 0x5590ecf25ea0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf25cd8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf25cb0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf25c98 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf25c78 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf25c50 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf25e80 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf25e58 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf25e18 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf25df8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf25e38 <line:92:60> 'int' 0
([B202.10]) & ([B202.18])
  20: CStyleCastExpr 0x5590ecf25f30 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf25f10 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf25ea0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf25cd8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf25cb0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf25c98 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf25c78 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf25c50 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf25e80 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf25e58 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf25e18 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf25df8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf25e38 <line:92:60> 'int' 0
(int)([B202.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf25fb8 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf25fd8 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf25ff8 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf26018 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf25fd8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf25ff8 <line:119:32> 'int' 1
[B202.22] - [B202.23]
  25: BinaryOperator 0x5590ecf26060 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf25fb8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf26040 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf26018 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf25fd8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf25ff8 <line:119:32> 'int' 1
[B202.21] << ([B202.24])
  26: BinaryOperator 0x5590ecf260a8 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf25f98 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf25f78 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf25f58 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf25f30 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf25f10 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf25ea0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf25cd8 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf25cb0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf25c98 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf25b88 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf25b60 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf25c78 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf25c50 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf25c10 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf25be8 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf25ba8 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf25bc8 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf25c30 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf25e80 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf25e58 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf25e18 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf25df8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf25dd8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf25db0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf25d70 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf25d50 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf25d28 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf25cf8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf25d90 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf25e38 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf26088 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf26060 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf25fb8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf26040 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf26018 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf25fd8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf25ff8 <line:119:32> 'int' 1
((([B202.20]))) & ([B202.25])
   T: ([B202.26]) ? ... : ...
   Preds (2): B203 B204
   Succs (2): B200 B201

 [B203]
   1: DeclRefExpr 0x5590ecf24e70 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf25520 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf24e70 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B203.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf25038 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B203.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf24ee0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf24f00 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf24f20 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
[B203.5] + [B203.6]
   8: IntegerLiteral 0x5590ecf24f68 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf24f88 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
([B203.7]) + [B203.8]
  10: IntegerLiteral 0x5590ecf24fd0 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf24ff0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
([B203.9]) + [B203.10]
  12: BinaryOperator 0x5590ecf25050 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
[B203.4] >> ([B203.11])
  13: IntegerLiteral 0x5590ecf25098 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf250c8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
(Instruction)[B203.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf250f0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
~[B203.14]
  16: IntegerLiteral 0x5590ecf25130 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf25150 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
([B203.15]) << [B203.16]
  18: UnaryOperator 0x5590ecf25198 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
~([B203.17])
  19: IntegerLiteral 0x5590ecf251d8 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf251f8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
([B203.18]) << [B203.19]
  21: BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
([B203.12]) & ([B203.20])
  22: CStyleCastExpr 0x5590ecf252d0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf252b0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
(int)([B203.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf253a0 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf25380 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf25318 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf252f8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf252d0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf252b0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
(int)((([B203.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf253c8 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf253e8 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf25408 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf25428 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
[B203.25] - [B203.26]
  28: BinaryOperator 0x5590ecf25470 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf253c8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf25450 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf25428 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
[B203.24] << ([B203.27])
  29: UnaryOperator 0x5590ecf254b8 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf25498 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf25470 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf253c8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf25450 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf25428 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
~([B203.28])
  30: BinaryOperator 0x5590ecf254d8 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf253a0 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf25380 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf25318 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf252f8 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf252d0 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf252b0 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf254b8 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf25498 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf25470 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf253c8 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf25450 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf25428 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
[B203.23] & [B203.29]
  31: BinaryOperator 0x5590ecf25538 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf25520 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf24e70 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf25500 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf254d8 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf253a0 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf25380 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf25318 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf252f8 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf252d0 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf252b0 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf25240 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf25078 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf25050 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf25038 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf24ec0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf24e98 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf25018 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf24ff0 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf24fb0 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf24f88 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf24f48 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf24f20 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf24ee0 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf24f00 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf24f68 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf24fd0 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf25220 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf251f8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf251b8 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf25198 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf25178 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf25150 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf25110 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf250f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf250c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf25098 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf25130 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf251d8 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf254b8 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf25498 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf25470 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf253c8 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf25450 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf25428 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf253e8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf25408 <line:119:32> 'int' 1
[B203.2] + ([B203.30])
   Preds (1): B205
   Succs (1): B202

 [B204]
   1: DeclRefExpr 0x5590ecf25560 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf25a28 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf25560 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B204.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf25728 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B204.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf255d0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf255f0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf25610 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
[B204.5] + [B204.6]
   8: IntegerLiteral 0x5590ecf25658 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf25678 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
([B204.7]) + [B204.8]
  10: IntegerLiteral 0x5590ecf256c0 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf256e0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
([B204.9]) + [B204.10]
  12: BinaryOperator 0x5590ecf25740 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf25728 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf25708 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf256e0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
[B204.4] >> ([B204.11])
  13: IntegerLiteral 0x5590ecf25788 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf257b8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
(Instruction)[B204.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf257e0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
~[B204.14]
  16: IntegerLiteral 0x5590ecf25820 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf25840 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
([B204.15]) << [B204.16]
  18: UnaryOperator 0x5590ecf25888 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
~([B204.17])
  19: IntegerLiteral 0x5590ecf258c8 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf258e8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf258a8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf25888 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf258c8 <line:88:60> 'int' 0
([B204.18]) << [B204.19]
  21: BinaryOperator 0x5590ecf25930 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf25768 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf25740 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf25728 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf25708 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf256e0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf25910 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf258e8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf258a8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf25888 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf258c8 <line:88:60> 'int' 0
([B204.12]) & ([B204.20])
  22: CStyleCastExpr 0x5590ecf259c0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf259a0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf25930 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf25768 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf25740 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf25728 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf25708 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf256e0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf25910 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf258e8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf258a8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf25888 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf258c8 <line:88:60> 'int' 0
(int)([B204.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf25a60 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf25a28 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf25560 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf25a08 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf259e8 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf259c0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf259a0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf25930 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf25768 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf25740 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf25728 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf255b0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf25588 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf25708 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf256e0 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf256a0 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf25678 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf25638 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf25610 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf255d0 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf255f0 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf25658 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf256c0 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf25910 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf258e8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf258a8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf25888 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf25868 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf25840 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf25800 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf257e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf257b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf25788 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf25820 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf258c8 <line:88:60> 'int' 0
[B204.2] + (([B204.22]))
   Preds (1): B205
   Succs (1): B202

 [B205]
  case OP_SUB:
   1: DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf24a18 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B205.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf248c0 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf248e0 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf24900 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
[B205.3] + [B205.4]
   6: IntegerLiteral 0x5590ecf24948 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf24968 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
([B205.5]) + [B205.6]
   8: IntegerLiteral 0x5590ecf249b0 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf249d0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
([B205.7]) + [B205.8]
  10: BinaryOperator 0x5590ecf24a30 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf24a18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf249f8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf249d0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
[B205.2] >> ([B205.9])
  11: IntegerLiteral 0x5590ecf24a78 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf24aa8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
(Instruction)[B205.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf24ad0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
~[B205.12]
  14: IntegerLiteral 0x5590ecf24b10 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf24b30 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
([B205.13]) << [B205.14]
  16: UnaryOperator 0x5590ecf24b78 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
~([B205.15])
  17: IntegerLiteral 0x5590ecf24bb8 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf24bd8 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf24b98 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf24b78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf24bb8 <line:88:60> 'int' 0
([B205.16]) << [B205.17]
  19: BinaryOperator 0x5590ecf24c20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf24a58 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf24a30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf24a18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf249f8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf249d0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf24c00 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf24bd8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf24b98 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf24b78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf24bb8 <line:88:60> 'int' 0
([B205.10]) & ([B205.18])
  20: CStyleCastExpr 0x5590ecf24cb0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf24c90 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf24c20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf24a58 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf24a30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf24a18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf249f8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf249d0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf24c00 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf24bd8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf24b98 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf24b78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf24bb8 <line:88:60> 'int' 0
(int)([B205.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf24d38 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf24d58 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf24d78 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf24d98 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf24d58 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf24d78 <line:119:32> 'int' 1
[B205.22] - [B205.23]
  25: BinaryOperator 0x5590ecf24de0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf24d38 <col:17> 'int' 1
`-ParenExpr 0x5590ecf24dc0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf24d98 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf24d58 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf24d78 <line:119:32> 'int' 1
[B205.21] << ([B205.24])
  26: BinaryOperator 0x5590ecf24e28 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf24d18 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf24cf8 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf24cd8 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf24cb0 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf24c90 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf24c20 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf24a58 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf24a30 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf24a18 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf248a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf24878 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf249f8 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf249d0 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf24990 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf24968 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf24928 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf24900 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf248c0 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf248e0 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf24948 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf249b0 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf24c00 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf24bd8 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf24b98 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf24b78 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf24b58 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf24b30 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf24af0 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf24ad0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf24aa8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf24a78 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf24b10 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf24bb8 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf24e08 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf24de0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf24d38 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf24dc0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf24d98 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf24d58 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf24d78 <line:119:32> 'int' 1
((([B205.20]))) & ([B205.25])
   T: ([B205.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B203 B204

 [B206]
   T: continue;
   Preds (2): B207 B208
   Succs (1): B1

 [B207]
   1: DeclRefExpr 0x5590ecf242f0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf24318 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf242f0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B207.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf24278 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf242a0 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf24278 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf242b8 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf242a0 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf24278 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.4]->savedpc
   6: BinaryOperator 0x5590ecf24330 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf242b8 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf242a0 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf24278 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf24318 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf242f0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B207.5] = [B207.2]
   7: DeclRefExpr 0x5590ecf24358 <lvm.c:372:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
Arith
   8: ImplicitCastExpr 0x5590ecf244a8 <lvm.c:372:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf24358 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
[B207.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS))
   9: DeclRefExpr 0x5590ecf24380 <lvm.c:372:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf24510 <lvm.c:372:25> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf24380 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf243a8 <lvm.c:372:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf24528 <lvm.c:372:28> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf243a8 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B207.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf243d0 <lvm.c:372:32> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
rb
  14: ImplicitCastExpr 0x5590ecf24540 <lvm.c:372:32> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf243d0 <col:32> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
[B207.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: ImplicitCastExpr 0x5590ecf24558 <lvm.c:372:32> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf24540 <col:32> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf243d0 <col:32> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
[B207.14] (ImplicitCastExpr, BitCast, const TValue *)
  16: DeclRefExpr 0x5590ecf243f8 <lvm.c:372:36> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
rc
  17: ImplicitCastExpr 0x5590ecf24570 <lvm.c:372:36> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf243f8 <col:36> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
[B207.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590ecf24588 <lvm.c:372:36> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf24570 <col:36> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf243f8 <col:36> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
[B207.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: DeclRefExpr 0x5590ecf24420 <lvm.c:475:31> 'int' EnumConstant 0x5590ece944a8 'TM_ADD' 'int'
TM_ADD
  20: ImplicitCastExpr 0x5590ecf245a0 <lvm.c:475:31> 'TMS':'TMS' <IntegralCast>
`-DeclRefExpr 0x5590ecf24420 <col:31> 'int' EnumConstant 0x5590ece944a8 'TM_ADD' 'int'
[B207.19] (ImplicitCastExpr, IntegralCast, TMS)
  21: CallExpr 0x5590ecf244c0 <lvm.c:372:19, col:42> 'void'
|-ImplicitCastExpr 0x5590ecf244a8 <col:19> 'void (*)(lua_State *, StkId, const TValue *, const TValue *, TMS)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf24358 <col:19> 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)' Function 0x5590ecef6070 'Arith' 'void (lua_State *, StkId, const TValue *, const TValue *, TMS)'
|-ImplicitCastExpr 0x5590ecf24510 <col:25> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf24380 <col:25> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf24528 <col:28> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf243a8 <col:28> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ImplicitCastExpr 0x5590ecf24558 <col:32> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf24540 <col:32> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf243d0 <col:32> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
|-ImplicitCastExpr 0x5590ecf24588 <col:36> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf24570 <col:36> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf243f8 <col:36> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
`-ImplicitCastExpr 0x5590ecf245a0 <line:475:31> 'TMS':'TMS' <IntegralCast>
  `-DeclRefExpr 0x5590ecf24420 <col:31> 'int' EnumConstant 0x5590ece944a8 'TM_ADD' 'int'
[B207.8]([B207.10], [B207.12], [B207.15], [B207.18], [B207.20])
  22: DeclRefExpr 0x5590ecf24608 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  23: ImplicitCastExpr 0x5590ecf24630 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf24608 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.22] (ImplicitCastExpr, LValueToRValue, lua_State *)
  24: MemberExpr 0x5590ecf24648 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf24630 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf24608 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.23]->base
  25: ImplicitCastExpr 0x5590ecf24680 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf24648 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf24630 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf24608 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.24] (ImplicitCastExpr, LValueToRValue, StkId)
  26: DeclRefExpr 0x5590ecf245e0 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  27: BinaryOperator 0x5590ecf24698 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf245e0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf24680 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf24648 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf24630 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf24608 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B207.26] = [B207.25]
   Preds (2): B209 B210
   Succs (1): B206

 [B208]
   1: DeclRefExpr 0x5590ecf23bc0 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf23c08 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf23be8 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf23bc0 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
([B208.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf23c20 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf23c08 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf23be8 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf23bc0 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
[B208.2]->value
   4: MemberExpr 0x5590ecf23c58 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf23c20 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf23c08 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf23be8 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf23bc0 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
[B208.3].n
   5: ImplicitCastExpr 0x5590ecf23cb0 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf23c90 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf23c58 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf23c20 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf23c08 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf23be8 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf23bc0 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
([B208.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclStmt 0x5590ecfaeee8 <lvm.c:368:22, ./llimits.h:63:27>lvm.c:368:22
`-VarDecl 0x5590ecf23b60 <col:11, ./llimits.h:63:27> lvm.c:368:22 used nb 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf23cb0 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf23c90 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf23c58 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf23c20 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf23c08 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf23be8 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf23bc0 <lvm.c:368:34> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
lua_Number nb = ((rb)->value.n);
   7: DeclRefExpr 0x5590ecf23d38 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
rc
   8: ImplicitCastExpr 0x5590ecf23d80 <./lobject.h:93:44, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf23d60 <col:44, col:46> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf23d38 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
([B208.7]) (ImplicitCastExpr, LValueToRValue, TValue *)
   9: MemberExpr 0x5590ecf23d98 <./lobject.h:93:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf23d80 <col:44, col:46> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf23d60 <col:44, col:46> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf23d38 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
[B208.8]->value
  10: MemberExpr 0x5590ecf23dd0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf23d98 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf23d80 <col:44, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf23d60 <col:44, col:46> 'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf23d38 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
[B208.9].n
  11: ImplicitCastExpr 0x5590ecf23e28 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf23e08 <col:25, col:27> 'lua_Number':'double' lvalue
  `-MemberExpr 0x5590ecf23dd0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
    `-MemberExpr 0x5590ecf23d98 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf23d80 <col:44, col:46> 'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf23d60 <col:44, col:46> 'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf23d38 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
([B208.10]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  12: DeclStmt 0x5590ecfaeed0 <lvm.c:368:39, ./llimits.h:63:27>lvm.c:368:39
`-VarDecl 0x5590ecf23cd8 <col:11, ./llimits.h:63:27> lvm.c:368:39 used nc 'lua_Number':'double' cinit
  `-ImplicitCastExpr 0x5590ecf23e28 <./llimits.h:63:25, col:27> 'lua_Number':'double' <LValueToRValue>
    `-ParenExpr 0x5590ecf23e08 <col:25, col:27> 'lua_Number':'double' lvalue
      `-MemberExpr 0x5590ecf23dd0 <./lobject.h:93:44, col:55> 'lua_Number':'double' lvalue .n 0x5590ece76b58
        `-MemberExpr 0x5590ecf23d98 <col:44, col:49> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf23d80 <col:44, col:46> 'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf23d60 <col:44, col:46> 'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf23d38 <lvm.c:368:51> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
lua_Number nc = ((rc)->value.n);
  13: DeclRefExpr 0x5590ecf23ee0 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  14: ImplicitCastExpr 0x5590ecf23f28 <./lobject.h:120:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf23f08 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf23ee0 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B208.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: DeclStmt 0x5590ecf23f40 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590ecf23e80 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf23f28 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf23f08 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf23ee0 <lvm.c:369:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  16: DeclRefExpr 0x5590ecf24008 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf23b60 'nb' 'lua_Number':'double'
nb
  17: ImplicitCastExpr 0x5590ecf24098 <./luaconf.h:533:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf24030 <col:27, col:29> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf24008 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf23b60 'nb' 'lua_Number':'double'
([B208.16]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  18: DeclRefExpr 0x5590ecf24050 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf23cd8 'nc' 'lua_Number':'double'
nc
  19: ImplicitCastExpr 0x5590ecf240b0 <./luaconf.h:533:31, col:33> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590ecf24078 <col:31, col:33> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590ecf24050 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf23cd8 'nc' 'lua_Number':'double'
([B208.18]) (ImplicitCastExpr, LValueToRValue, lua_Number)
  20: BinaryOperator 0x5590ecf240c8 <./luaconf.h:533:27, col:33> 'double' '+'
|-ImplicitCastExpr 0x5590ecf24098 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5590ecf24030 <col:27, col:29> 'lua_Number':'double' lvalue
|   `-DeclRefExpr 0x5590ecf24008 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf23b60 'nb' 'lua_Number':'double'
`-ImplicitCastExpr 0x5590ecf240b0 <./luaconf.h:533:31, col:33> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590ecf24078 <col:31, col:33> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590ecf24050 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf23cd8 'nc' 'lua_Number':'double'
[B208.17] + [B208.19]
  21: DeclRefExpr 0x5590ecf23f58 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x5590ecf23f80 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf23f58 <col:24> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
[B208.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x5590ecf23f98 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf23f80 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf23f58 <col:24> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
[B208.22]->value
  24: MemberExpr 0x5590ecf23fd0 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590ecf23f98 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf23f80 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf23f58 <col:24> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
[B208.23].n
  25: BinaryOperator 0x5590ecf24130 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590ecf23fd0 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590ecf23f98 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf23f80 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf23f58 <col:24> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf24110 <col:37, col:39> 'double'
  `-ParenExpr 0x5590ecf240f0 <./luaconf.h:533:26, col:34> 'double'
    `-BinaryOperator 0x5590ecf240c8 <col:27, col:33> 'double' '+'
      |-ImplicitCastExpr 0x5590ecf24098 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
      | `-ParenExpr 0x5590ecf24030 <col:27, col:29> 'lua_Number':'double' lvalue
      |   `-DeclRefExpr 0x5590ecf24008 <lvm.c:369:28> 'lua_Number':'double' lvalue Var 0x5590ecf23b60 'nb' 'lua_Number':'double'
      `-ImplicitCastExpr 0x5590ecf240b0 <./luaconf.h:533:31, col:33> 'lua_Number':'double' <LValueToRValue>
        `-ParenExpr 0x5590ecf24078 <col:31, col:33> 'lua_Number':'double' lvalue
          `-DeclRefExpr 0x5590ecf24050 <lvm.c:369:32> 'lua_Number':'double' lvalue Var 0x5590ecf23cd8 'nc' 'lua_Number':'double'
[B208.24] = (([B208.20]))
  26: IntegerLiteral 0x5590ecf241d0 <./lua.h:77:22> 'int' 3
3
  27: DeclRefExpr 0x5590ecf24158 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
i_o
  28: ImplicitCastExpr 0x5590ecf24180 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf24158 <col:42> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
[B208.27] (ImplicitCastExpr, LValueToRValue, TValue *)
  29: MemberExpr 0x5590ecf24198 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf24180 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf24158 <col:42> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
[B208.28]->tt
  30: BinaryOperator 0x5590ecf241f0 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590ecf24198 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf24180 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf24158 <col:42> 'TValue *' lvalue Var 0x5590ecf23e80 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf241d0 <./lua.h:77:22> 'int' 3
[B208.29] = [B208.26]
   Preds (1): B209
   Succs (1): B206

 [B209]
   1: DeclRefExpr 0x5590ecf239d0 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
rc
   2: ImplicitCastExpr 0x5590ecf23a18 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf239f8 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf239d0 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
([B209.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: MemberExpr 0x5590ecf23a50 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf23a18 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf239f8 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf239d0 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
[B209.2]->tt
   4: ImplicitCastExpr 0x5590ecf23ac8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf23a88 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf23a50 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf23a18 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf239f8 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf239d0 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
([B209.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590ecf23aa8 <./lua.h:77:22> 'int' 3
3
   6: BinaryOperator 0x5590ecf23ae0 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf23ac8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf23a88 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf23a50 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf23a18 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf239f8 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf239d0 <lvm.c:367:42> 'TValue *' lvalue Var 0x5590ecf22718 'rc' 'TValue *'
`-IntegerLiteral 0x5590ecf23aa8 <./lua.h:77:22> 'int' 3
[B209.4] == [B209.5]
   T: if ([B210.8]) && ([B209.6])
   Preds (1): B210
   Succs (2): B208 B207

 [B210]
   1: ConditionalOperator 0x5590ecf23830 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf22ce8 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf22cc0 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf22bb0 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf22b90 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf22b70 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf22b48 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf22b28 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf22ab8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf228f0 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf228c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf228b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf22890 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf22868 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf22a98 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf22a70 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf22a30 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf22a10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf22a50 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf22ca0 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf22c78 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf22bd0 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf22c58 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf22c30 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf22bf0 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf22c10 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf23368 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf23350 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf22d08 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf23330 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf23308 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf231d0 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf231b0 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf23148 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf23128 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf23100 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf230e0 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf232e8 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf232c8 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf232a0 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf231f8 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf23280 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf23258 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf23808 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf237f0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf23390 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf237d0 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf237b0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf23788 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf23768 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf236f8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf23530 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf23508 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf234f0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf234d0 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf234a8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf236d8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf236b0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf23670 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf23650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf23690 <line:92:60> 'int' 0
([B213.26]) ? [B211.29] : [B212.21]
   2: DeclStmt 0x5590ecf23880 <lvm.c:366:9, col:28>col:17
`-VarDecl 0x5590ecf22718 <col:9, ./llimits.h:63:27> lvm.c:366:17 used rc 'TValue *' cinit
  `-ParenExpr 0x5590ecf23860 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf23830 <./lopcodes.h:122:17, line:92:63> 'TValue *'
      |-ParenExpr 0x5590ecf22ce8 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf22cc0 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf22bb0 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf22b90 <line:92:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf22b70 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf22b48 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf22b28 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf22ab8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf228f0 <line:92:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf228c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf228b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf22890 <./lopcodes.h:46:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf22868 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
      |   |           |       |   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
      |   |           |       `-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
      |   |           `-ParenExpr 0x5590ecf22a98 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf22a70 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf22a30 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf22a10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf22a50 <line:92:60> 'int' 0
      |   `-ParenExpr 0x5590ecf22ca0 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf22c78 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf22bd0 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf22c58 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf22c30 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf22bf0 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf22c10 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf23368 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf23350 <lvm.c:354:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf22d08 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf23330 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf23308 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf231d0 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf231b0 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf23148 <line:92:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf23128 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf23100 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf230e0 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
      |     |             |       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
      |     |             |       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
      |     |             `-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf232e8 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf232c8 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf232a0 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf231f8 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf23280 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf23258 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf23808 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf237f0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf23390 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf237d0 <./lopcodes.h:92:21, col:63> 'int'
          `-ParenExpr 0x5590ecf237b0 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf23788 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf23768 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf236f8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf23530 <line:92:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf23508 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf234f0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf234d0 <./lopcodes.h:46:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf234a8 <line:45:16, line:40:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
                  |       | `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
                  |       |   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
                  |       |   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
                  |       `-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
                  `-ParenExpr 0x5590ecf236d8 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf236b0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf23670 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf23650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf23690 <line:92:60> 'int' 0
TValue *rc = ((((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf23898 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
rb
   4: ImplicitCastExpr 0x5590ecf238e0 <./lobject.h:90:19, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf238c0 <col:19, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf23898 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
([B210.3]) (ImplicitCastExpr, LValueToRValue, TValue *)
   5: MemberExpr 0x5590ecf238f8 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf238e0 <col:19, col:21> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf238c0 <col:19, col:21> 'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf23898 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
[B210.4]->tt
   6: ImplicitCastExpr 0x5590ecf23970 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf23930 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf238f8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf238e0 <col:19, col:21> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf238c0 <col:19, col:21> 'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf23898 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
([B210.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5590ecf23950 <./lua.h:77:22> 'int' 3
3
   8: BinaryOperator 0x5590ecf23988 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ecf23970 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf23930 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf238f8 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf238e0 <col:19, col:21> 'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf238c0 <col:19, col:21> 'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf23898 <lvm.c:367:24> 'TValue *' lvalue Var 0x5590ecf21430 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf23950 <./lua.h:77:22> 'int' 3
[B210.6] == [B210.7]
   T: ([B210.8]) && ...
   Preds (2): B211 B212
   Succs (2): B209 B207

 [B211]
   1: DeclRefExpr 0x5590ecf22d08 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf23350 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf22d08 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B211.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf22e68 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B211.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf22d78 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf22d98 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf22db8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
[B211.5] + [B211.6]
   8: IntegerLiteral 0x5590ecf22e00 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf22e20 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
([B211.7]) + [B211.8]
  10: BinaryOperator 0x5590ecf22e80 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
[B211.4] >> ([B211.9])
  11: IntegerLiteral 0x5590ecf22ec8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf22ef8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
(Instruction)[B211.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf22f20 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
~[B211.12]
  14: IntegerLiteral 0x5590ecf22f60 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf22f80 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
([B211.13]) << [B211.14]
  16: UnaryOperator 0x5590ecf22fc8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
~([B211.15])
  17: IntegerLiteral 0x5590ecf23008 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf23028 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
([B211.16]) << [B211.17]
  19: BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
([B211.10]) & ([B211.18])
  20: CStyleCastExpr 0x5590ecf23100 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf230e0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
(int)([B211.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf231d0 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf231b0 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf23148 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf23128 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf23100 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf230e0 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
(int)((([B211.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf231f8 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf23218 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf23238 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf23258 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
[B211.23] - [B211.24]
  26: BinaryOperator 0x5590ecf232a0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf231f8 <col:17> 'int' 1
`-ParenExpr 0x5590ecf23280 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf23258 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
[B211.22] << ([B211.25])
  27: UnaryOperator 0x5590ecf232e8 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf232c8 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf232a0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf231f8 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf23280 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf23258 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
~([B211.26])
  28: BinaryOperator 0x5590ecf23308 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf231d0 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf231b0 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf23148 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf23128 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf23100 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf230e0 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf232e8 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf232c8 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf232a0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf231f8 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf23280 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf23258 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
[B211.21] & [B211.27]
  29: BinaryOperator 0x5590ecf23368 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf23350 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf22d08 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf23330 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf23308 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf231d0 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf231b0 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf23148 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf23128 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf23100 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf230e0 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf23070 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf22ea8 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf22e80 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf22e68 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf22d58 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf22d30 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf22e48 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf22e20 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf22de0 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf22db8 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf22d78 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf22d98 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf22e00 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf23050 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf23028 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf22fe8 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf22fc8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf22fa8 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf22f80 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf22f40 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf22f20 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf22ef8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf22ec8 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf22f60 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf23008 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf232e8 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf232c8 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf232a0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf231f8 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf23280 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf23258 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf23218 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf23238 <line:119:32> 'int' 1
[B211.2] + ([B211.28])
   Preds (1): B213
   Succs (1): B210

 [B212]
   1: DeclRefExpr 0x5590ecf23390 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf237f0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf23390 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B212.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf234f0 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B212.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf23400 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf23420 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf23440 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
[B212.5] + [B212.6]
   8: IntegerLiteral 0x5590ecf23488 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf234a8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
([B212.7]) + [B212.8]
  10: BinaryOperator 0x5590ecf23508 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf234f0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf234d0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf234a8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
[B212.4] >> ([B212.9])
  11: IntegerLiteral 0x5590ecf23550 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf23580 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
(Instruction)[B212.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf235a8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
~[B212.12]
  14: IntegerLiteral 0x5590ecf235e8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf23608 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
([B212.13]) << [B212.14]
  16: UnaryOperator 0x5590ecf23650 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
~([B212.15])
  17: IntegerLiteral 0x5590ecf23690 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf236b0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf23670 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf23650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf23690 <line:92:60> 'int' 0
([B212.16]) << [B212.17]
  19: BinaryOperator 0x5590ecf236f8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf23530 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf23508 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf234f0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf234d0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf234a8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf236d8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf236b0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf23670 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf23650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf23690 <line:92:60> 'int' 0
([B212.10]) & ([B212.18])
  20: CStyleCastExpr 0x5590ecf23788 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf23768 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf236f8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf23530 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf23508 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf234f0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf234d0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf234a8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf236d8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf236b0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf23670 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf23650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf23690 <line:92:60> 'int' 0
(int)([B212.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf23808 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf237f0 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf23390 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf237d0 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf237b0 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf23788 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf23768 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf236f8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf23530 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf23508 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf234f0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf233e0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf233b8 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf234d0 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf234a8 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf23468 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf23440 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf23400 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf23420 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf23488 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf236d8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf236b0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf23670 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf23650 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf23630 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf23608 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf235c8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf235a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf23580 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf23550 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf235e8 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf23690 <line:92:60> 'int' 0
[B212.2] + (([B212.20]))
   Preds (1): B213
   Succs (1): B210

 [B213]
   1: ConditionalOperator 0x5590ecf226a0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf21a88 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf21a60 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf21930 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf21910 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf218f0 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf218c8 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf218a8 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf21838 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf21670 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf21648 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf21630 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf21610 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf215e8 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf21818 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf217f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf217b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf21790 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf217d0 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf21a40 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf219f8 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf21950 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf219d8 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf219b0 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf21970 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf21990 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf22170 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf22158 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf21aa8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf22138 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf22110 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf21fd8 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf21fb8 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf21f50 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf21f30 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf21f08 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf21ee8 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf220f0 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf220d0 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf220a8 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf22000 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf22088 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf22060 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf22678 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf22660 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf22198 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf22640 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf22620 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf225f8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf225d8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf22568 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf223a0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf22378 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf22360 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf22340 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf22318 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf22548 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf22520 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf224e0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf224c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf22500 <line:88:60> 'int' 0
([B216.26]) ? [B214.31] : [B215.23]
   2: DeclStmt 0x5590ecf226f0 <lvm.c:365:9, col:28>col:17
`-VarDecl 0x5590ecf21430 <col:9, ./llimits.h:63:27> lvm.c:365:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf226d0 <./llimits.h:63:25, col:27> 'TValue *'
    `-ConditionalOperator 0x5590ecf226a0 <./lopcodes.h:122:17, line:88:63> 'TValue *'
      |-ParenExpr 0x5590ecf21a88 <line:122:17, col:29> 'int'
      | `-BinaryOperator 0x5590ecf21a60 <col:18, line:119:34> 'int' '&'
      |   |-ParenExpr 0x5590ecf21930 <line:122:18, col:20> 'int'
      |   | `-ParenExpr 0x5590ecf21910 <line:88:21, col:63> 'int'
      |   |   `-ParenExpr 0x5590ecf218f0 <./llimits.h:75:22, col:31> 'int'
      |   |     `-CStyleCastExpr 0x5590ecf218c8 <col:23, col:30> 'int' <IntegralCast>
      |   |       `-ParenExpr 0x5590ecf218a8 <col:26, col:30> 'unsigned int'
      |   |         `-BinaryOperator 0x5590ecf21838 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |   |           |-ParenExpr 0x5590ecf21670 <line:88:32, col:43> 'Instruction':'unsigned int'
      |   |           | `-BinaryOperator 0x5590ecf21648 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |   |           |   |-ImplicitCastExpr 0x5590ecf21630 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |   |           |   | `-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |   |           |   |   `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |   |           |   `-ParenExpr 0x5590ecf21610 <./lopcodes.h:47:16, col:31> 'int'
      |   |           |     `-BinaryOperator 0x5590ecf215e8 <line:46:16, line:37:17> 'int' '+'
      |   |           |       |-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
      |   |           |       | `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
      |   |           |       |   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
      |   |           |       |   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
      |   |           |       |   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
      |   |           |       |   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
      |   |           |       |   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
      |   |           |       `-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
      |   |           `-ParenExpr 0x5590ecf21818 <line:71:20, col:49> 'Instruction':'unsigned int'
      |   |             `-BinaryOperator 0x5590ecf217f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |   |               |-ParenExpr 0x5590ecf217b0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |   |               | `-UnaryOperator 0x5590ecf21790 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |   |               |   `-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
      |   |               |     `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |   |               |       |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
      |   |               |       | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |   |               |       |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |   |               |       |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
      |   |               |       `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
      |   |               `-IntegerLiteral 0x5590ecf217d0 <line:88:60> 'int' 0
      |   `-ParenExpr 0x5590ecf21a40 <line:119:16, col:34> 'int'
      |     `-BinaryOperator 0x5590ecf219f8 <col:17, col:33> 'int' '<<'
      |       |-IntegerLiteral 0x5590ecf21950 <col:17> 'int' 1
      |       `-ParenExpr 0x5590ecf219d8 <col:22, col:33> 'int'
      |         `-BinaryOperator 0x5590ecf219b0 <line:38:17, line:119:32> 'int' '-'
      |           |-IntegerLiteral 0x5590ecf21970 <line:38:17> 'int' 9
      |           `-IntegerLiteral 0x5590ecf21990 <line:119:32> 'int' 1
      |-BinaryOperator 0x5590ecf22170 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
      | |-ImplicitCastExpr 0x5590ecf22158 <lvm.c:352:21> 'TValue *' <LValueToRValue>
      | | `-DeclRefExpr 0x5590ecf21aa8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      | `-ParenExpr 0x5590ecf22138 <./lopcodes.h:125:19, col:37> 'int'
      |   `-BinaryOperator 0x5590ecf22110 <col:20, line:119:34> 'int' '&'
      |     |-CStyleCastExpr 0x5590ecf21fd8 <line:125:20, col:27> 'int' <NoOp>
      |     | `-ParenExpr 0x5590ecf21fb8 <col:25, col:27> 'int'
      |     |   `-ParenExpr 0x5590ecf21f50 <line:88:21, col:63> 'int'
      |     |     `-ParenExpr 0x5590ecf21f30 <./llimits.h:75:22, col:31> 'int'
      |     |       `-CStyleCastExpr 0x5590ecf21f08 <col:23, col:30> 'int' <IntegralCast>
      |     |         `-ParenExpr 0x5590ecf21ee8 <col:26, col:30> 'unsigned int'
      |     |           `-BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
      |     |             |-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
      |     |             | `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
      |     |             |   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
      |     |             |   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
      |     |             |   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
      |     |             |   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
      |     |             |     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
      |     |             |       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
      |     |             |       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
      |     |             |       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
      |     |             |       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
      |     |             |       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
      |     |             |       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
      |     |             |       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
      |     |             |       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
      |     |             `-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
      |     |               `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
      |     |                 |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
      |     |                 | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |     |                 |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
      |     |                 |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
      |     |                 |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
      |     |                 |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |     |                 |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |     |                 |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
      |     |                 |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
      |     |                 `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
      |     `-UnaryOperator 0x5590ecf220f0 <line:125:31, line:119:34> 'int' prefix '~'
      |       `-ParenExpr 0x5590ecf220d0 <col:16, col:34> 'int'
      |         `-BinaryOperator 0x5590ecf220a8 <col:17, col:33> 'int' '<<'
      |           |-IntegerLiteral 0x5590ecf22000 <col:17> 'int' 1
      |           `-ParenExpr 0x5590ecf22088 <col:22, col:33> 'int'
      |             `-BinaryOperator 0x5590ecf22060 <line:38:17, line:119:32> 'int' '-'
      |               |-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
      |               `-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
      `-BinaryOperator 0x5590ecf22678 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
        |-ImplicitCastExpr 0x5590ecf22660 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
        | `-DeclRefExpr 0x5590ecf22198 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
        `-ParenExpr 0x5590ecf22640 <./lopcodes.h:88:21, col:63> 'int'
          `-ParenExpr 0x5590ecf22620 <./llimits.h:75:22, col:31> 'int'
            `-CStyleCastExpr 0x5590ecf225f8 <col:23, col:30> 'int' <IntegralCast>
              `-ParenExpr 0x5590ecf225d8 <col:26, col:30> 'unsigned int'
                `-BinaryOperator 0x5590ecf22568 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                  |-ParenExpr 0x5590ecf223a0 <line:88:32, col:43> 'Instruction':'unsigned int'
                  | `-BinaryOperator 0x5590ecf22378 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                  |   |-ImplicitCastExpr 0x5590ecf22360 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                  |   | `-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                  |   |   `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                  |   `-ParenExpr 0x5590ecf22340 <./lopcodes.h:47:16, col:31> 'int'
                  |     `-BinaryOperator 0x5590ecf22318 <line:46:16, line:37:17> 'int' '+'
                  |       |-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
                  |       | `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
                  |       |   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
                  |       |   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
                  |       |   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
                  |       |   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
                  |       |   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
                  |       `-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
                  `-ParenExpr 0x5590ecf22548 <line:71:20, col:49> 'Instruction':'unsigned int'
                    `-BinaryOperator 0x5590ecf22520 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                      |-ParenExpr 0x5590ecf224e0 <line:71:21, col:45> 'Instruction':'unsigned int'
                      | `-UnaryOperator 0x5590ecf224c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                      |   `-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
                      |     `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                      |       |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
                      |       | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                      |       |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                      |       |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
                      |       `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
                      `-IntegerLiteral 0x5590ecf22500 <line:88:60> 'int' 0
TValue *rb = ((((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & (1 << (9 - 1))) ? k + ((int)((((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))) & ~(1 << (9 - 1))) : base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   3: DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf228b0 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B213.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf227c0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf227e0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf22800 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
[B213.5] + [B213.6]
   8: IntegerLiteral 0x5590ecf22848 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf22868 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
([B213.7]) + [B213.8]
  10: BinaryOperator 0x5590ecf228c8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf228b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf22890 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf22868 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
[B213.4] >> ([B213.9])
  11: IntegerLiteral 0x5590ecf22910 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf22940 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
(Instruction)[B213.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf22968 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
~[B213.12]
  14: IntegerLiteral 0x5590ecf229a8 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf229c8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
([B213.13]) << [B213.14]
  16: UnaryOperator 0x5590ecf22a10 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
~([B213.15])
  17: IntegerLiteral 0x5590ecf22a50 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf22a70 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf22a30 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf22a10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf22a50 <line:92:60> 'int' 0
([B213.16]) << [B213.17]
  19: BinaryOperator 0x5590ecf22ab8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf228f0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf228c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf228b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf22890 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf22868 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf22a98 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf22a70 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf22a30 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf22a10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf22a50 <line:92:60> 'int' 0
([B213.10]) & ([B213.18])
  20: CStyleCastExpr 0x5590ecf22b48 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf22b28 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf22ab8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf228f0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf228c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf228b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf22890 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf22868 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf22a98 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf22a70 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf22a30 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf22a10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf22a50 <line:92:60> 'int' 0
(int)([B213.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf22bd0 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf22bf0 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf22c10 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf22c30 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf22bf0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf22c10 <line:119:32> 'int' 1
[B213.22] - [B213.23]
  25: BinaryOperator 0x5590ecf22c78 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf22bd0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf22c58 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf22c30 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf22bf0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf22c10 <line:119:32> 'int' 1
[B213.21] << ([B213.24])
  26: BinaryOperator 0x5590ecf22cc0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf22bb0 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf22b90 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf22b70 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf22b48 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf22b28 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf22ab8 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf228f0 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf228c8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf228b0 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf227a0 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf22778 <lvm.c:366:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf22890 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf22868 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf22828 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf22800 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf227c0 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf227e0 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf22848 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf22a98 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf22a70 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf22a30 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf22a10 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf229f0 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf229c8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf22988 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf22968 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf22940 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf22910 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf229a8 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf22a50 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf22ca0 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf22c78 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf22bd0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf22c58 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf22c30 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf22bf0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf22c10 <line:119:32> 'int' 1
((([B213.20]))) & ([B213.25])
   T: ([B213.26]) ? ... : ...
   Preds (2): B214 B215
   Succs (2): B211 B212

 [B214]
   1: DeclRefExpr 0x5590ecf21aa8 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf22158 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf21aa8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B214.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf21c70 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B214.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf21b18 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf21b38 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf21b58 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
[B214.5] + [B214.6]
   8: IntegerLiteral 0x5590ecf21ba0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf21bc0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
([B214.7]) + [B214.8]
  10: IntegerLiteral 0x5590ecf21c08 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf21c28 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
([B214.9]) + [B214.10]
  12: BinaryOperator 0x5590ecf21c88 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
[B214.4] >> ([B214.11])
  13: IntegerLiteral 0x5590ecf21cd0 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf21d00 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
(Instruction)[B214.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf21d28 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
~[B214.14]
  16: IntegerLiteral 0x5590ecf21d68 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf21d88 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
([B214.15]) << [B214.16]
  18: UnaryOperator 0x5590ecf21dd0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
~([B214.17])
  19: IntegerLiteral 0x5590ecf21e10 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf21e30 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
([B214.18]) << [B214.19]
  21: BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
([B214.12]) & ([B214.20])
  22: CStyleCastExpr 0x5590ecf21f08 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf21ee8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
(int)([B214.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf21fd8 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf21fb8 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf21f50 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf21f30 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf21f08 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf21ee8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
(int)((([B214.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf22000 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf22020 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf22040 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf22060 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
[B214.25] - [B214.26]
  28: BinaryOperator 0x5590ecf220a8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf22000 <col:17> 'int' 1
`-ParenExpr 0x5590ecf22088 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf22060 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
[B214.24] << ([B214.27])
  29: UnaryOperator 0x5590ecf220f0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf220d0 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf220a8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf22000 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf22088 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf22060 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
~([B214.28])
  30: BinaryOperator 0x5590ecf22110 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf21fd8 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf21fb8 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf21f50 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf21f30 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf21f08 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf21ee8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf220f0 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf220d0 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf220a8 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf22000 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf22088 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf22060 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
[B214.23] & [B214.29]
  31: BinaryOperator 0x5590ecf22170 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf22158 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf21aa8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf22138 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf22110 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf21fd8 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf21fb8 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf21f50 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf21f30 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf21f08 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf21ee8 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf21e78 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf21cb0 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf21c88 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf21c70 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf21af8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf21ad0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf21c50 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf21c28 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf21be8 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf21bc0 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf21b80 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf21b58 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf21b18 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf21b38 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf21ba0 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf21c08 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf21e58 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf21e30 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf21df0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf21dd0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf21db0 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf21d88 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf21d48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf21d28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf21d00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf21cd0 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf21d68 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf21e10 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf220f0 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf220d0 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf220a8 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf22000 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf22088 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf22060 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf22020 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf22040 <line:119:32> 'int' 1
[B214.2] + ([B214.30])
   Preds (1): B216
   Succs (1): B213

 [B215]
   1: DeclRefExpr 0x5590ecf22198 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf22660 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf22198 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B215.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf22360 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B215.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf22208 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf22228 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf22248 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
[B215.5] + [B215.6]
   8: IntegerLiteral 0x5590ecf22290 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf222b0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
([B215.7]) + [B215.8]
  10: IntegerLiteral 0x5590ecf222f8 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf22318 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
([B215.9]) + [B215.10]
  12: BinaryOperator 0x5590ecf22378 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf22360 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf22340 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf22318 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
[B215.4] >> ([B215.11])
  13: IntegerLiteral 0x5590ecf223c0 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf223f0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
(Instruction)[B215.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf22418 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
~[B215.14]
  16: IntegerLiteral 0x5590ecf22458 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf22478 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
([B215.15]) << [B215.16]
  18: UnaryOperator 0x5590ecf224c0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
~([B215.17])
  19: IntegerLiteral 0x5590ecf22500 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf22520 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf224e0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf224c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf22500 <line:88:60> 'int' 0
([B215.18]) << [B215.19]
  21: BinaryOperator 0x5590ecf22568 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf223a0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf22378 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf22360 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf22340 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf22318 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf22548 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf22520 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf224e0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf224c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf22500 <line:88:60> 'int' 0
([B215.12]) & ([B215.20])
  22: CStyleCastExpr 0x5590ecf225f8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf225d8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf22568 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf223a0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf22378 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf22360 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf22340 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf22318 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf22548 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf22520 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf224e0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf224c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf22500 <line:88:60> 'int' 0
(int)([B215.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf22678 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf22660 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf22198 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf22640 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf22620 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf225f8 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf225d8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf22568 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf223a0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf22378 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf22360 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf221e8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf221c0 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf22340 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf22318 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf222d8 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf222b0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf22270 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf22248 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf22208 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf22228 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf22290 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf222f8 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf22548 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf22520 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf224e0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf224c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf224a0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf22478 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf22438 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf22418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf223f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf223c0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf22458 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf22500 <line:88:60> 'int' 0
[B215.2] + (([B215.22]))
   Preds (1): B216
   Succs (1): B213

 [B216]
  case OP_ADD:
   1: DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf21630 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B216.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf214d8 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf214f8 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf21518 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
[B216.3] + [B216.4]
   6: IntegerLiteral 0x5590ecf21560 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf21580 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
([B216.5]) + [B216.6]
   8: IntegerLiteral 0x5590ecf215c8 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf215e8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
([B216.7]) + [B216.8]
  10: BinaryOperator 0x5590ecf21648 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf21630 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf21610 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf215e8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
[B216.2] >> ([B216.9])
  11: IntegerLiteral 0x5590ecf21690 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf216c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
(Instruction)[B216.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf216e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
~[B216.12]
  14: IntegerLiteral 0x5590ecf21728 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf21748 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
([B216.13]) << [B216.14]
  16: UnaryOperator 0x5590ecf21790 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
~([B216.15])
  17: IntegerLiteral 0x5590ecf217d0 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf217f0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf217b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf21790 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf217d0 <line:88:60> 'int' 0
([B216.16]) << [B216.17]
  19: BinaryOperator 0x5590ecf21838 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf21670 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf21648 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf21630 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf21610 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf215e8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf21818 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf217f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf217b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf21790 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf217d0 <line:88:60> 'int' 0
([B216.10]) & ([B216.18])
  20: CStyleCastExpr 0x5590ecf218c8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf218a8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf21838 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf21670 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf21648 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf21630 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf21610 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf215e8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf21818 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf217f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf217b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf21790 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf217d0 <line:88:60> 'int' 0
(int)([B216.19]) (CStyleCastExpr, IntegralCast, int)
  21: IntegerLiteral 0x5590ecf21950 <./lopcodes.h:119:17> 'int' 1
1
  22: IntegerLiteral 0x5590ecf21970 <./lopcodes.h:38:17> 'int' 9
9
  23: IntegerLiteral 0x5590ecf21990 <./lopcodes.h:119:32> 'int' 1
1
  24: BinaryOperator 0x5590ecf219b0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf21970 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf21990 <line:119:32> 'int' 1
[B216.22] - [B216.23]
  25: BinaryOperator 0x5590ecf219f8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf21950 <col:17> 'int' 1
`-ParenExpr 0x5590ecf219d8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf219b0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf21970 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf21990 <line:119:32> 'int' 1
[B216.21] << ([B216.24])
  26: BinaryOperator 0x5590ecf21a60 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf21930 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf21910 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf218f0 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf218c8 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf218a8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf21838 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf21670 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf21648 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf21630 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf214b8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf21490 <lvm.c:365:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf21610 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf215e8 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf215a8 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf21580 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf21540 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf21518 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf214d8 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf214f8 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf21560 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf215c8 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf21818 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf217f0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf217b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf21790 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf21770 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf21748 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf21708 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf216e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf216c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf21690 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf21728 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf217d0 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf21a40 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf219f8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf21950 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf219d8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf219b0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf21970 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf21990 <line:119:32> 'int' 1
((([B216.20]))) & ([B216.25])
   T: ([B216.26]) ? ... : ...
   Preds (1): B2
   Succs (2): B214 B215

 [B217]
   1: ConditionalOperator 0x5590ecf210f8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf205b0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf20588 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf20478 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf20458 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf20438 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf20410 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf203f0 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf20380 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf201b8 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf20190 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf20178 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf20158 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf20130 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf20360 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf20338 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf202f8 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf202d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf20318 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf20568 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf20540 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf20498 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf20520 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf204f8 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf204b8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf204d8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf20c30 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf20c18 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf205d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf20bf8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf20bd0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf20a98 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf20a78 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf20a10 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf209f0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf209c8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf209a8 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf20bb0 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf20b90 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf20b68 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf20ac0 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf20b48 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf20b20 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf210d0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf210b8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf20c58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf21098 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf21078 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf21050 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf21030 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf20fc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf20df8 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf20dd0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf20db8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf20d98 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf20d70 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf20fa0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf20f78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf20f38 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf20f18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf20f58 <line:92:60> 'int' 0
([B220.88]) ? [B218.29] : [B219.21]
   2: DeclRefExpr 0x5590ecf21148 <lvm.c:471:46> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   3: ImplicitCastExpr 0x5590ecf21218 <lvm.c:471:46> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf21148 <col:46> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B217.2] (ImplicitCastExpr, LValueToRValue, StkId)
   4: CallExpr 0x5590ecf21188 <lvm.c:471:17, col:48> 'void'
|-ImplicitCastExpr 0x5590ecf21170 <col:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf1ffc8 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
|-ImplicitCastExpr 0x5590ecf211d0 <col:31> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf1fff0 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf21200 <col:34> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf211e8 <col:34> 'StkId':'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf20018 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
|-ParenExpr 0x5590ecf21128 <./llimits.h:63:25, col:27> 'TValue *'
| `-ConditionalOperator 0x5590ecf210f8 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|   |-ParenExpr 0x5590ecf205b0 <line:122:17, col:29> 'int'
|   | `-BinaryOperator 0x5590ecf20588 <col:18, line:119:34> 'int' '&'
|   |   |-ParenExpr 0x5590ecf20478 <line:122:18, col:20> 'int'
|   |   | `-ParenExpr 0x5590ecf20458 <line:92:21, col:63> 'int'
|   |   |   `-ParenExpr 0x5590ecf20438 <./llimits.h:75:22, col:31> 'int'
|   |   |     `-CStyleCastExpr 0x5590ecf20410 <col:23, col:30> 'int' <IntegralCast>
|   |   |       `-ParenExpr 0x5590ecf203f0 <col:26, col:30> 'unsigned int'
|   |   |         `-BinaryOperator 0x5590ecf20380 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |   |           |-ParenExpr 0x5590ecf201b8 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |   |           | `-BinaryOperator 0x5590ecf20190 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |   |           |   |-ImplicitCastExpr 0x5590ecf20178 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |   |           |   | `-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   |           |   |   `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |   |           |   `-ParenExpr 0x5590ecf20158 <./lopcodes.h:46:16, col:31> 'int'
|   |   |           |     `-BinaryOperator 0x5590ecf20130 <line:45:16, line:40:17> 'int' '+'
|   |   |           |       |-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
|   |   |           |       | `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
|   |   |           |       |   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
|   |   |           |       |   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
|   |   |           |       `-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
|   |   |           `-ParenExpr 0x5590ecf20360 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |   |             `-BinaryOperator 0x5590ecf20338 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |   |               |-ParenExpr 0x5590ecf202f8 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |   |               | `-UnaryOperator 0x5590ecf202d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |   |               |   `-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
|   |   |               |     `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |   |               |       |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |   |               |       | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |   |               |       |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |   |               |       |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
|   |   |               |       `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
|   |   |               `-IntegerLiteral 0x5590ecf20318 <line:92:60> 'int' 0
|   |   `-ParenExpr 0x5590ecf20568 <line:119:16, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf20540 <col:17, col:33> 'int' '<<'
|   |       |-IntegerLiteral 0x5590ecf20498 <col:17> 'int' 1
|   |       `-ParenExpr 0x5590ecf20520 <col:22, col:33> 'int'
|   |         `-BinaryOperator 0x5590ecf204f8 <line:38:17, line:119:32> 'int' '-'
|   |           |-IntegerLiteral 0x5590ecf204b8 <line:38:17> 'int' 9
|   |           `-IntegerLiteral 0x5590ecf204d8 <line:119:32> 'int' 1
|   |-BinaryOperator 0x5590ecf20c30 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|   | |-ImplicitCastExpr 0x5590ecf20c18 <lvm.c:354:21> 'TValue *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5590ecf205d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|   | `-ParenExpr 0x5590ecf20bf8 <./lopcodes.h:125:19, col:37> 'int'
|   |   `-BinaryOperator 0x5590ecf20bd0 <col:20, line:119:34> 'int' '&'
|   |     |-CStyleCastExpr 0x5590ecf20a98 <line:125:20, col:27> 'int' <NoOp>
|   |     | `-ParenExpr 0x5590ecf20a78 <col:25, col:27> 'int'
|   |     |   `-ParenExpr 0x5590ecf20a10 <line:92:21, col:63> 'int'
|   |     |     `-ParenExpr 0x5590ecf209f0 <./llimits.h:75:22, col:31> 'int'
|   |     |       `-CStyleCastExpr 0x5590ecf209c8 <col:23, col:30> 'int' <IntegralCast>
|   |     |         `-ParenExpr 0x5590ecf209a8 <col:26, col:30> 'unsigned int'
|   |     |           `-BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |     |             |-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |     |             | `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |     |             |   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |     |             |   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |     |             |   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |     |             |   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
|   |     |             |     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
|   |     |             |       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
|   |     |             |       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
|   |     |             |       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
|   |     |             |       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
|   |     |             |       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
|   |     |             `-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |     |               `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |     |                 |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |     |                 | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |     |                 |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
|   |     |                 |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |     |                 |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |     |                 |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |     |                 |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |     |                 |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
|   |     |                 |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
|   |     |                 `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
|   |     `-UnaryOperator 0x5590ecf20bb0 <line:125:31, line:119:34> 'int' prefix '~'
|   |       `-ParenExpr 0x5590ecf20b90 <col:16, col:34> 'int'
|   |         `-BinaryOperator 0x5590ecf20b68 <col:17, col:33> 'int' '<<'
|   |           |-IntegerLiteral 0x5590ecf20ac0 <col:17> 'int' 1
|   |           `-ParenExpr 0x5590ecf20b48 <col:22, col:33> 'int'
|   |             `-BinaryOperator 0x5590ecf20b20 <line:38:17, line:119:32> 'int' '-'
|   |               |-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
|   `-BinaryOperator 0x5590ecf210d0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|     |-ImplicitCastExpr 0x5590ecf210b8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf20c58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|     `-ParenExpr 0x5590ecf21098 <./lopcodes.h:92:21, col:63> 'int'
|       `-ParenExpr 0x5590ecf21078 <./llimits.h:75:22, col:31> 'int'
|         `-CStyleCastExpr 0x5590ecf21050 <col:23, col:30> 'int' <IntegralCast>
|           `-ParenExpr 0x5590ecf21030 <col:26, col:30> 'unsigned int'
|             `-BinaryOperator 0x5590ecf20fc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|               |-ParenExpr 0x5590ecf20df8 <line:92:32, col:43> 'Instruction':'unsigned int'
|               | `-BinaryOperator 0x5590ecf20dd0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|               |   |-ImplicitCastExpr 0x5590ecf20db8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|               |   | `-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|               |   |   `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|               |   `-ParenExpr 0x5590ecf20d98 <./lopcodes.h:46:16, col:31> 'int'
|               |     `-BinaryOperator 0x5590ecf20d70 <line:45:16, line:40:17> 'int' '+'
|               |       |-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
|               |       | `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
|               |       |   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
|               |       |   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
|               |       `-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
|               `-ParenExpr 0x5590ecf20fa0 <line:71:20, col:49> 'Instruction':'unsigned int'
|                 `-BinaryOperator 0x5590ecf20f78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                   |-ParenExpr 0x5590ecf20f38 <line:71:21, col:45> 'Instruction':'unsigned int'
|                   | `-UnaryOperator 0x5590ecf20f18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                   |   `-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
|                   |     `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                   |       |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
|                   |       | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                   |       |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                   |       |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
|                   |       `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
|                   `-IntegerLiteral 0x5590ecf20f58 <line:92:60> 'int' 0
`-ImplicitCastExpr 0x5590ecf21218 <lvm.c:471:46> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf21148 <col:46> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B220.59]([B220.61], [B220.64], ([B217.1]), [B217.3])
   5: DeclRefExpr 0x5590ecf21280 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x5590ecf212a8 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf21280 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B217.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: MemberExpr 0x5590ecf212c0 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf212a8 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf21280 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B217.6]->base
   8: ImplicitCastExpr 0x5590ecf212f8 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf212c0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf212a8 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf21280 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B217.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclRefExpr 0x5590ecf21258 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  10: BinaryOperator 0x5590ecf21310 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf21258 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf212f8 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf212c0 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf212a8 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf21280 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B217.9] = [B217.8]
   T: continue;
   Preds (2): B218 B219
   Succs (1): B1

 [B218]
   1: DeclRefExpr 0x5590ecf205d0 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf20c18 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf205d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B218.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf20730 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B218.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf20640 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf20660 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf20680 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
[B218.5] + [B218.6]
   8: IntegerLiteral 0x5590ecf206c8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf206e8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
([B218.7]) + [B218.8]
  10: BinaryOperator 0x5590ecf20748 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
[B218.4] >> ([B218.9])
  11: IntegerLiteral 0x5590ecf20790 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf207c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
(Instruction)[B218.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf207e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
~[B218.12]
  14: IntegerLiteral 0x5590ecf20828 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf20848 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
([B218.13]) << [B218.14]
  16: UnaryOperator 0x5590ecf20890 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
~([B218.15])
  17: IntegerLiteral 0x5590ecf208d0 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf208f0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
([B218.16]) << [B218.17]
  19: BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
([B218.10]) & ([B218.18])
  20: CStyleCastExpr 0x5590ecf209c8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf209a8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
(int)([B218.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf20a98 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf20a78 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf20a10 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf209f0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf209c8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf209a8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
(int)((([B218.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf20ac0 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf20ae0 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf20b00 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf20b20 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
[B218.23] - [B218.24]
  26: BinaryOperator 0x5590ecf20b68 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf20ac0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf20b48 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf20b20 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
[B218.22] << ([B218.25])
  27: UnaryOperator 0x5590ecf20bb0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf20b90 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf20b68 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf20ac0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf20b48 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf20b20 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
~([B218.26])
  28: BinaryOperator 0x5590ecf20bd0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf20a98 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf20a78 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf20a10 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf209f0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf209c8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf209a8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf20bb0 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf20b90 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf20b68 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf20ac0 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf20b48 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf20b20 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
[B218.21] & [B218.27]
  29: BinaryOperator 0x5590ecf20c30 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf20c18 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf205d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf20bf8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf20bd0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf20a98 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf20a78 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf20a10 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf209f0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf209c8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf209a8 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf20938 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf20770 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf20748 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf20730 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf20620 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf205f8 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf20710 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf206e8 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf206a8 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf20680 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf20640 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf20660 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf206c8 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf20918 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf208f0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf208b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf20890 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf20870 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf20848 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf20808 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf207e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf207c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf20790 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf20828 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf208d0 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf20bb0 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf20b90 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf20b68 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf20ac0 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf20b48 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf20b20 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf20ae0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf20b00 <line:119:32> 'int' 1
[B218.2] + ([B218.28])
   Preds (1): B220
   Succs (1): B217

 [B219]
   1: DeclRefExpr 0x5590ecf20c58 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf210b8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf20c58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B219.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf20db8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B219.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf20cc8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf20ce8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf20d08 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
[B219.5] + [B219.6]
   8: IntegerLiteral 0x5590ecf20d50 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf20d70 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
([B219.7]) + [B219.8]
  10: BinaryOperator 0x5590ecf20dd0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf20db8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf20d98 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf20d70 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
[B219.4] >> ([B219.9])
  11: IntegerLiteral 0x5590ecf20e18 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf20e48 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
(Instruction)[B219.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf20e70 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
~[B219.12]
  14: IntegerLiteral 0x5590ecf20eb0 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf20ed0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
([B219.13]) << [B219.14]
  16: UnaryOperator 0x5590ecf20f18 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
~([B219.15])
  17: IntegerLiteral 0x5590ecf20f58 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf20f78 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf20f38 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf20f18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf20f58 <line:92:60> 'int' 0
([B219.16]) << [B219.17]
  19: BinaryOperator 0x5590ecf20fc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf20df8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf20dd0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf20db8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf20d98 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf20d70 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf20fa0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf20f78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf20f38 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf20f18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf20f58 <line:92:60> 'int' 0
([B219.10]) & ([B219.18])
  20: CStyleCastExpr 0x5590ecf21050 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf21030 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf20fc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf20df8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf20dd0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf20db8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf20d98 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf20d70 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf20fa0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf20f78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf20f38 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf20f18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf20f58 <line:92:60> 'int' 0
(int)([B219.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf210d0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf210b8 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf20c58 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf21098 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf21078 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf21050 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf21030 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf20fc0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf20df8 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf20dd0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf20db8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf20ca8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf20c80 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf20d98 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf20d70 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf20d30 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf20d08 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf20cc8 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf20ce8 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf20d50 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf20fa0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf20f78 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf20f38 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf20f18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf20ef8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf20ed0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf20e90 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf20e70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf20e48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf20e18 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf20eb0 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf20f58 <line:92:60> 'int' 0
[B219.2] + (([B219.20]))
   Preds (1): B220
   Succs (1): B217

 [B220]
  case OP_SELF:
   1: DeclRefExpr 0x5590ecf1bcb0 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf1c178 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1bcb0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B220.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf1be78 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf1bd00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B220.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf1bd20 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf1bd40 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf1bd60 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
[B220.5] + [B220.6]
   8: IntegerLiteral 0x5590ecf1bda8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf1bdc8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
([B220.7]) + [B220.8]
  10: IntegerLiteral 0x5590ecf1be10 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf1be30 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf1bdf0 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf1bdc8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf1be10 <line:37:17> 'int' 9
([B220.9]) + [B220.10]
  12: BinaryOperator 0x5590ecf1be90 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf1be78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf1bd00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf1be58 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf1be30 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf1bdf0 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf1bdc8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf1be10 <line:37:17> 'int' 9
[B220.4] >> ([B220.11])
  13: IntegerLiteral 0x5590ecf1bed8 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf1bf08 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
(Instruction)[B220.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf1bf30 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
~[B220.14]
  16: IntegerLiteral 0x5590ecf1bf70 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf1bf90 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
([B220.15]) << [B220.16]
  18: UnaryOperator 0x5590ecf1bfd8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf1bfb8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1bf90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
~([B220.17])
  19: IntegerLiteral 0x5590ecf1c018 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf1c038 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1bff8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf1bfd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf1bfb8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf1bf90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf1c018 <line:88:60> 'int' 0
([B220.18]) << [B220.19]
  21: BinaryOperator 0x5590ecf1c080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf1beb8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf1be90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf1be78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf1bd00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf1be58 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf1be30 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf1bdf0 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf1bdc8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf1be10 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf1c060 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1c038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1bff8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf1bfd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf1bfb8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf1bf90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf1c018 <line:88:60> 'int' 0
([B220.12]) & ([B220.20])
  22: CStyleCastExpr 0x5590ecf1c110 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf1c0f0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf1c080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf1beb8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf1be90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf1be78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf1bd00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf1be58 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf1be30 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf1bdf0 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf1bdc8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf1be10 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf1c060 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf1c038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf1bff8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf1bfd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf1bfb8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf1bf90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf1c018 <line:88:60> 'int' 0
(int)([B220.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf1c190 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf1c178 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf1bcb0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf1c158 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf1c138 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf1c110 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf1c0f0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf1c080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf1beb8 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf1be90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf1be78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf1bd00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf1be58 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf1be30 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf1bdf0 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf1bdc8 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf1be10 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf1c060 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf1c038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf1bff8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf1bfd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf1bfb8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf1bf90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf1c018 <line:88:60> 'int' 0
[B220.2] + (([B220.22]))
  24: DeclStmt 0x5590ecf1c1d8 <lvm.c:469:9, col:25>col:15
`-VarDecl 0x5590ecf1bc50 <col:9, ./llimits.h:63:27> lvm.c:469:15 used rb 'StkId':'TValue *' cinit
  `-ParenExpr 0x5590ecf1c1b8 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf1c190 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf1c178 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf1bcb0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf1c158 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf1c138 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf1c110 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf1c0f0 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf1c080 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf1beb8 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf1be90 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf1be78 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf1bd00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf1bcd8 <lvm.c:469:23> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf1be58 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf1be30 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf1bdf0 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf1bdc8 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf1bd88 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf1bd60 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf1bd20 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf1bd40 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf1bda8 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf1be10 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf1c060 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf1c038 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf1bff8 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf1bfd8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf1bfb8 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf1bf90 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf1bf50 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf1bf30 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf1bf08 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf1bed8 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf1bf70 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf1c018 <line:88:60> 'int' 0
StkId rb = (base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
  25: DeclRefExpr 0x5590ecf1c260 <lvm.c:470:28> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
rb
  26: ImplicitCastExpr 0x5590ecf1fa50 <./lobject.h:162:22, col:27> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf1fa30 <col:22, col:27> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf1c260 <lvm.c:470:28> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
([B220.25]) (ImplicitCastExpr, LValueToRValue, StkId)
  27: ImplicitCastExpr 0x5590ecf1fa68 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf1fa50 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf1fa30 <col:22, col:27> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf1c260 <lvm.c:470:28> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
[B220.26] (ImplicitCastExpr, BitCast, const TValue *)
  28: DeclStmt 0x5590ecf1fa80 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf1c200 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf1fa68 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf1fa50 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf1fa30 <col:22, col:27> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf1c260 <lvm.c:470:28> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
const TValue *o2 = (rb);
  29: DeclRefExpr 0x5590ecf1fb08 <lvm.c:470:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  30: ImplicitCastExpr 0x5590ecf1fb50 <lvm.c:470:22> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fb08 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B220.29] (ImplicitCastExpr, LValueToRValue, StkId)
  31: IntegerLiteral 0x5590ecf1fb30 <lvm.c:470:25> 'int' 1
1
  32: BinaryOperator 0x5590ecf1fb68 <lvm.c:470:22, col:25> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf1fb50 <col:22> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf1fb08 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf1fb30 <col:25> 'int' 1
[B220.30] + [B220.31]
  33: DeclStmt 0x5590ecf1fbb0 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf1faa8 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ParenExpr 0x5590ecf1fb90 <col:41, col:46> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf1fb68 <lvm.c:470:22, col:25> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf1fb50 <col:22> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf1fb08 <col:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
      `-IntegerLiteral 0x5590ecf1fb30 <col:25> 'int' 1
TValue *o1 = (ra + 1);
  34: DeclRefExpr 0x5590ecf1fc40 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
o2
  35: ImplicitCastExpr 0x5590ecf1fc68 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fc40 <col:17> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.34] (ImplicitCastExpr, LValueToRValue, const TValue *)
  36: MemberExpr 0x5590ecf1fc80 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf1fc68 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1fc40 <col:17> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.35]->value
  37: ImplicitCastExpr 0x5590ecf1fcb8 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf1fc80 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf1fc68 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf1fc40 <col:17> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.36] (ImplicitCastExpr, LValueToRValue, Value)
  38: DeclRefExpr 0x5590ecf1fbc8 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
o1
  39: ImplicitCastExpr 0x5590ecf1fbf0 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fbc8 <col:5> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
[B220.38] (ImplicitCastExpr, LValueToRValue, TValue *)
  40: MemberExpr 0x5590ecf1fc08 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf1fbf0 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1fbc8 <col:5> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
[B220.39]->value
  41: BinaryOperator 0x5590ecf1fcd0 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf1fc08 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf1fbf0 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf1fbc8 <col:5> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf1fcb8 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf1fc80 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf1fc68 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf1fc40 <col:17> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.40] = [B220.37]
  42: DeclRefExpr 0x5590ecf1fd70 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
o2
  43: ImplicitCastExpr 0x5590ecf1fd98 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fd70 <col:35> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.42] (ImplicitCastExpr, LValueToRValue, const TValue *)
  44: MemberExpr 0x5590ecf1fdb0 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf1fd98 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1fd70 <col:35> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.43]->tt
  45: ImplicitCastExpr 0x5590ecf1fde8 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf1fdb0 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf1fd98 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf1fd70 <col:35> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.44] (ImplicitCastExpr, LValueToRValue, int)
  46: DeclRefExpr 0x5590ecf1fcf8 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
o1
  47: ImplicitCastExpr 0x5590ecf1fd20 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fcf8 <col:28> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
[B220.46] (ImplicitCastExpr, LValueToRValue, TValue *)
  48: MemberExpr 0x5590ecf1fd38 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf1fd20 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1fcf8 <col:28> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
[B220.47]->tt
  49: BinaryOperator 0x5590ecf1fe00 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf1fd38 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf1fd20 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf1fcf8 <col:28> 'TValue *' lvalue Var 0x5590ecf1faa8 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf1fde8 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf1fdb0 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf1fd98 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf1fd70 <col:35> 'const TValue *' lvalue Var 0x5590ecf1c200 'o2' 'const TValue *'
[B220.48] = [B220.45]
  50: IntegerLiteral 0x5590ecf1fe28 <./llimits.h:62:31> 'int' 0
0
  51: CStyleCastExpr 0x5590ecf1fe58 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf1fe28 <col:31> 'int' 0
(void)[B220.50] (CStyleCastExpr, ToVoid, void)
  52: DeclRefExpr 0x5590ecf1ff60 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  53: ImplicitCastExpr 0x5590ecf1ff88 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1ff60 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B220.52] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  54: DeclRefExpr 0x5590ecf1fee8 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  55: ImplicitCastExpr 0x5590ecf1ff10 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fee8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B220.54] (ImplicitCastExpr, LValueToRValue, lua_State *)
  56: MemberExpr 0x5590ecf1ff28 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf1ff10 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1fee8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B220.55]->savedpc
  57: BinaryOperator 0x5590ecf1ffa0 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf1ff28 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf1ff10 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf1fee8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf1ff88 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1ff60 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B220.56] = [B220.53]
  58: DeclRefExpr 0x5590ecf1ffc8 <lvm.c:471:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
luaV_gettable
  59: ImplicitCastExpr 0x5590ecf21170 <lvm.c:471:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf1ffc8 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
[B220.58] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, TValue *, StkId))
  60: DeclRefExpr 0x5590ecf1fff0 <lvm.c:471:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  61: ImplicitCastExpr 0x5590ecf211d0 <lvm.c:471:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1fff0 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B220.60] (ImplicitCastExpr, LValueToRValue, lua_State *)
  62: DeclRefExpr 0x5590ecf20018 <lvm.c:471:34> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
rb
  63: ImplicitCastExpr 0x5590ecf211e8 <lvm.c:471:34> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf20018 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
[B220.62] (ImplicitCastExpr, LValueToRValue, StkId)
  64: ImplicitCastExpr 0x5590ecf21200 <lvm.c:471:34> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf211e8 <col:34> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf20018 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecf1bc50 'rb' 'StkId':'TValue *'
[B220.63] (ImplicitCastExpr, BitCast, const TValue *)
  65: DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  66: ImplicitCastExpr 0x5590ecf20178 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B220.65]) (ImplicitCastExpr, LValueToRValue, Instruction)
  67: IntegerLiteral 0x5590ecf20088 <./lopcodes.h:44:17> 'int' 0
0
  68: IntegerLiteral 0x5590ecf200a8 <./lopcodes.h:42:18> 'int' 6
6
  69: BinaryOperator 0x5590ecf200c8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
[B220.67] + [B220.68]
  70: IntegerLiteral 0x5590ecf20110 <./lopcodes.h:40:17> 'int' 8
8
  71: BinaryOperator 0x5590ecf20130 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
([B220.69]) + [B220.70]
  72: BinaryOperator 0x5590ecf20190 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf20178 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf20158 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf20130 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
[B220.66] >> ([B220.71])
  73: IntegerLiteral 0x5590ecf201d8 <./lopcodes.h:71:39> 'int' 0
0
  74: CStyleCastExpr 0x5590ecf20208 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
(Instruction)[B220.73] (CStyleCastExpr, IntegralCast, Instruction)
  75: UnaryOperator 0x5590ecf20230 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
~[B220.74]
  76: IntegerLiteral 0x5590ecf20270 <./lopcodes.h:37:17> 'int' 9
9
  77: BinaryOperator 0x5590ecf20290 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
([B220.75]) << [B220.76]
  78: UnaryOperator 0x5590ecf202d8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
~([B220.77])
  79: IntegerLiteral 0x5590ecf20318 <./lopcodes.h:92:60> 'int' 0
0
  80: BinaryOperator 0x5590ecf20338 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf202f8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf202d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf20318 <line:92:60> 'int' 0
([B220.78]) << [B220.79]
  81: BinaryOperator 0x5590ecf20380 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf201b8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf20190 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf20178 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf20158 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf20130 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf20360 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf20338 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf202f8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf202d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf20318 <line:92:60> 'int' 0
([B220.72]) & ([B220.80])
  82: CStyleCastExpr 0x5590ecf20410 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf203f0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf20380 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf201b8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf20190 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf20178 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf20158 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf20130 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf20360 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf20338 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf202f8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf202d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf20318 <line:92:60> 'int' 0
(int)([B220.81]) (CStyleCastExpr, IntegralCast, int)
  83: IntegerLiteral 0x5590ecf20498 <./lopcodes.h:119:17> 'int' 1
1
  84: IntegerLiteral 0x5590ecf204b8 <./lopcodes.h:38:17> 'int' 9
9
  85: IntegerLiteral 0x5590ecf204d8 <./lopcodes.h:119:32> 'int' 1
1
  86: BinaryOperator 0x5590ecf204f8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf204b8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf204d8 <line:119:32> 'int' 1
[B220.84] - [B220.85]
  87: BinaryOperator 0x5590ecf20540 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf20498 <col:17> 'int' 1
`-ParenExpr 0x5590ecf20520 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf204f8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf204b8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf204d8 <line:119:32> 'int' 1
[B220.83] << ([B220.86])
  88: BinaryOperator 0x5590ecf20588 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf20478 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf20458 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf20438 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf20410 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf203f0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf20380 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf201b8 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf20190 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf20178 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf20068 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf20040 <lvm.c:471:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf20158 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf20130 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf200f0 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf200c8 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf20088 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf200a8 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf20110 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf20360 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf20338 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf202f8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf202d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf202b8 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf20290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf20250 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf20230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf20208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf201d8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf20270 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf20318 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf20568 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf20540 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf20498 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf20520 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf204f8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf204b8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf204d8 <line:119:32> 'int' 1
((([B220.82]))) & ([B220.87])
   T: ([B220.88]) ? ... : ...
   Preds (1): B2
   Succs (2): B218 B219

 [B221]
   1: DeclRefExpr 0x5590ecf1ba98 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecf1bac0 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1ba98 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B221.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecf1bad8 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf1bac0 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1ba98 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B221.2]->base
   4: ImplicitCastExpr 0x5590ecf1bb10 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf1bad8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf1bac0 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf1ba98 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B221.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecf1ba70 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecf1bb28 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf1ba70 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf1bb10 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf1bad8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf1bac0 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf1ba98 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B221.5] = [B221.4]
   T: continue;
   Preds (2): B222 B223
   Succs (1): B1

 [B222]
   1: DeclRefExpr 0x5590ecf1b8d0 <./lgc.h:83:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
luaC_step
   2: ImplicitCastExpr 0x5590ecf1b978 <./lgc.h:83:2> 'void (*)(lua_State *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf1b8d0 <col:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
[B222.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *))
   3: DeclRefExpr 0x5590ecf1b8f8 <lvm.c:465:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf1b9c0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b8f8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B222.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: CallExpr 0x5590ecf1b990 <./lgc.h:83:2, col:13> 'void'
|-ImplicitCastExpr 0x5590ecf1b978 <col:2> 'void (*)(lua_State *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf1b8d0 <col:2> 'void (lua_State *)' Function 0x5590eceb1da0 'luaC_step' 'void (lua_State *)'
`-ImplicitCastExpr 0x5590ecf1b9c0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b8f8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B222.2]([B222.4])
   Preds (1): B223
   Succs (1): B221

 [B223]
  case OP_NEWTABLE:
   1: DeclRefExpr 0x5590ecf1a528 <lvm.c:462:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf1a6c8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf1a550 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf1a528 <lvm.c:462:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B223.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf1a570 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf1a590 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf1a5b0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
[B223.3] + [B223.4]
   6: IntegerLiteral 0x5590ecf1a5f8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf1a618 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf1a5d8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf1a5b0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf1a5f8 <line:40:17> 'int' 8
([B223.5]) + [B223.6]
   8: IntegerLiteral 0x5590ecf1a660 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf1a680 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf1a640 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf1a618 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf1a5d8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf1a5b0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf1a5f8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf1a660 <line:37:17> 'int' 9
([B223.7]) + [B223.8]
  10: BinaryOperator 0x5590ecf1a6e0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf1a6c8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf1a550 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf1a528 <lvm.c:462:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf1a6a8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf1a680 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf1a640 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf1a618 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf1a5d8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf1a5b0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf1a5f8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf1a660 <line:37:17> 'int' 9
[B223.2] >> ([B223.9])
  11: IntegerLiteral 0x5590ecf1a728 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf1a758 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
(Instruction)[B223.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf1a780 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
~[B223.12]
  14: IntegerLiteral 0x5590ecf1a7c0 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf1a7e0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1a7a0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf1a780 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf1a7c0 <line:38:17> 'int' 9
([B223.13]) << [B223.14]
  16: UnaryOperator 0x5590ecf1a828 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf1a808 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1a7e0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1a7a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf1a780 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf1a7c0 <line:38:17> 'int' 9
~([B223.15])
  17: IntegerLiteral 0x5590ecf1a868 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf1a888 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1a848 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf1a828 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf1a808 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf1a7e0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf1a7a0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf1a780 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf1a7c0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf1a868 <line:88:60> 'int' 0
([B223.16]) << [B223.17]
  19: BinaryOperator 0x5590ecf1a8d0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf1a708 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf1a6e0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf1a6c8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf1a550 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf1a528 <lvm.c:462:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf1a6a8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf1a680 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf1a640 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf1a618 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf1a5d8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf1a5b0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf1a5f8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf1a660 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf1a8b0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1a888 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1a848 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf1a828 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf1a808 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf1a7e0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf1a7a0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf1a780 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf1a7c0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf1a868 <line:88:60> 'int' 0
([B223.10]) & ([B223.18])
  20: CStyleCastExpr 0x5590ecf1a960 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf1a940 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf1a8d0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf1a708 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf1a6e0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf1a6c8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf1a550 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf1a528 <lvm.c:462:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf1a6a8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf1a680 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf1a640 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf1a618 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf1a5d8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf1a5b0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf1a5f8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf1a660 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf1a8b0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf1a888 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf1a848 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf1a828 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf1a808 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf1a7e0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf1a7a0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf1a780 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf1a7c0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf1a868 <line:88:60> 'int' 0
(int)([B223.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf1a9c8 <lvm.c:462:9, col:28>col:13
`-VarDecl 0x5590ecf1a4c8 <col:9, ./lopcodes.h:88:63> lvm.c:462:13 used b 'int' cinit
  `-ParenExpr 0x5590ecf1a9a8 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf1a988 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf1a960 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf1a940 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf1a8d0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf1a708 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf1a6e0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf1a6c8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf1a550 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf1a528 <lvm.c:462:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf1a6a8 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf1a680 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf1a640 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf1a618 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf1a5d8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf1a5b0 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf1a570 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf1a590 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf1a5f8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf1a660 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf1a8b0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf1a888 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf1a848 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf1a828 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf1a808 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf1a7e0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf1a7a0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf1a780 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf1a758 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf1a728 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf1a7c0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf1a868 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf1aa58 <lvm.c:463:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  23: ImplicitCastExpr 0x5590ecf1ab90 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf1aa80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf1aa58 <lvm.c:463:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B223.22]) (ImplicitCastExpr, LValueToRValue, Instruction)
  24: IntegerLiteral 0x5590ecf1aaa0 <./lopcodes.h:44:17> 'int' 0
0
  25: IntegerLiteral 0x5590ecf1aac0 <./lopcodes.h:42:18> 'int' 6
6
  26: BinaryOperator 0x5590ecf1aae0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf1aaa0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf1aac0 <line:42:18> 'int' 6
[B223.24] + [B223.25]
  27: IntegerLiteral 0x5590ecf1ab28 <./lopcodes.h:40:17> 'int' 8
8
  28: BinaryOperator 0x5590ecf1ab48 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf1ab08 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf1aae0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf1aaa0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf1aac0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf1ab28 <line:40:17> 'int' 8
([B223.26]) + [B223.27]
  29: BinaryOperator 0x5590ecf1aba8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf1ab90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf1aa80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf1aa58 <lvm.c:463:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf1ab70 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf1ab48 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf1ab08 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf1aae0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf1aaa0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf1aac0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf1ab28 <line:40:17> 'int' 8
[B223.23] >> ([B223.28])
  30: IntegerLiteral 0x5590ecf1abf0 <./lopcodes.h:71:39> 'int' 0
0
  31: CStyleCastExpr 0x5590ecf1ac20 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
(Instruction)[B223.30] (CStyleCastExpr, IntegralCast, Instruction)
  32: UnaryOperator 0x5590ecf1ac48 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
~[B223.31]
  33: IntegerLiteral 0x5590ecf1ac88 <./lopcodes.h:37:17> 'int' 9
9
  34: BinaryOperator 0x5590ecf1aca8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1ac68 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf1ac48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf1ac88 <line:37:17> 'int' 9
([B223.32]) << [B223.33]
  35: UnaryOperator 0x5590ecf1acf0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf1acd0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1aca8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1ac68 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf1ac48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf1ac88 <line:37:17> 'int' 9
~([B223.34])
  36: IntegerLiteral 0x5590ecf1ad30 <./lopcodes.h:92:60> 'int' 0
0
  37: BinaryOperator 0x5590ecf1ad50 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1ad10 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf1acf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf1acd0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf1aca8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf1ac68 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf1ac48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf1ac88 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf1ad30 <line:92:60> 'int' 0
([B223.35]) << [B223.36]
  38: BinaryOperator 0x5590ecf1ad98 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf1abd0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf1aba8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf1ab90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf1aa80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf1aa58 <lvm.c:463:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf1ab70 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf1ab48 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf1ab08 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf1aae0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf1aaa0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf1aac0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf1ab28 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf1ad78 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1ad50 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1ad10 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf1acf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf1acd0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf1aca8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf1ac68 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf1ac48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf1ac88 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf1ad30 <line:92:60> 'int' 0
([B223.29]) & ([B223.37])
  39: CStyleCastExpr 0x5590ecf1ae28 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf1ae08 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf1ad98 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf1abd0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf1aba8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf1ab90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf1aa80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf1aa58 <lvm.c:463:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf1ab70 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf1ab48 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf1ab08 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf1aae0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf1aaa0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf1aac0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf1ab28 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf1ad78 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf1ad50 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf1ad10 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf1acf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf1acd0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf1aca8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf1ac68 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf1ac48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf1ac88 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf1ad30 <line:92:60> 'int' 0
(int)([B223.38]) (CStyleCastExpr, IntegralCast, int)
  40: DeclStmt 0x5590ecf1ae90 <lvm.c:463:9, col:28>col:13
`-VarDecl 0x5590ecf1a9f8 <col:9, ./lopcodes.h:92:63> lvm.c:463:13 used c 'int' cinit
  `-ParenExpr 0x5590ecf1ae70 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf1ae50 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf1ae28 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf1ae08 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf1ad98 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf1abd0 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf1aba8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf1ab90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf1aa80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf1aa58 <lvm.c:463:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf1ab70 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf1ab48 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf1ab08 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf1aae0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf1aaa0 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf1aac0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf1ab28 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf1ad78 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf1ad50 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf1ad10 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf1acf0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf1acd0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf1aca8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf1ac68 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf1ac48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf1ac20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf1abf0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf1ac88 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf1ad30 <line:92:60> 'int' 0
int c = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))));
  41: DeclRefExpr 0x5590ecf1af18 <lvm.c:464:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  42: ImplicitCastExpr 0x5590ecf1af60 <./lobject.h:149:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf1af40 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf1af18 <lvm.c:464:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B223.41]) (ImplicitCastExpr, LValueToRValue, StkId)
  43: DeclStmt 0x5590ecf1af78 <./lobject.h:149:5, col:22>col:13
`-VarDecl 0x5590ecf1aeb8 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf1af60 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf1af40 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf1af18 <lvm.c:464:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
  44: DeclRefExpr 0x5590ecf1b040 <lvm.c:464:26> 'Table *(lua_State *, int, int)' Function 0x5590ececcf70 'luaH_new' 'Table *(lua_State *, int, int)'
luaH_new
  45: ImplicitCastExpr 0x5590ecf1b278 <lvm.c:464:26> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf1b040 <col:26> 'Table *(lua_State *, int, int)' Function 0x5590ececcf70 'luaH_new' 'Table *(lua_State *, int, int)'
[B223.44] (ImplicitCastExpr, FunctionToPointerDecay, Table *(*)(lua_State *, int, int))
  46: DeclRefExpr 0x5590ecf1b068 <lvm.c:464:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  47: ImplicitCastExpr 0x5590ecf1b2d0 <lvm.c:464:35> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b068 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.46] (ImplicitCastExpr, LValueToRValue, lua_State *)
  48: DeclRefExpr 0x5590ecf1b090 <lvm.c:464:38> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
luaO_fb2int
  49: ImplicitCastExpr 0x5590ecf1b108 <lvm.c:464:38> 'int (*)(int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf1b090 <col:38> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
[B223.48] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
  50: DeclRefExpr 0x5590ecf1b0b8 <lvm.c:464:50> 'int' lvalue Var 0x5590ecf1a4c8 'b' 'int'
b
  51: ImplicitCastExpr 0x5590ecf1b150 <lvm.c:464:50> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b0b8 <col:50> 'int' lvalue Var 0x5590ecf1a4c8 'b' 'int'
[B223.50] (ImplicitCastExpr, LValueToRValue, int)
  52: CallExpr 0x5590ecf1b120 <lvm.c:464:38, col:51> 'int'
|-ImplicitCastExpr 0x5590ecf1b108 <col:38> 'int (*)(int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf1b090 <col:38> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
`-ImplicitCastExpr 0x5590ecf1b150 <col:50> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b0b8 <col:50> 'int' lvalue Var 0x5590ecf1a4c8 'b' 'int'
[B223.49]([B223.51])
  53: DeclRefExpr 0x5590ecf1b168 <lvm.c:464:54> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
luaO_fb2int
  54: ImplicitCastExpr 0x5590ecf1b1b8 <lvm.c:464:54> 'int (*)(int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf1b168 <col:54> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
[B223.53] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
  55: DeclRefExpr 0x5590ecf1b190 <lvm.c:464:66> 'int' lvalue Var 0x5590ecf1a9f8 'c' 'int'
c
  56: ImplicitCastExpr 0x5590ecf1b200 <lvm.c:464:66> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b190 <col:66> 'int' lvalue Var 0x5590ecf1a9f8 'c' 'int'
[B223.55] (ImplicitCastExpr, LValueToRValue, int)
  57: CallExpr 0x5590ecf1b1d0 <lvm.c:464:54, col:67> 'int'
|-ImplicitCastExpr 0x5590ecf1b1b8 <col:54> 'int (*)(int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf1b168 <col:54> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
`-ImplicitCastExpr 0x5590ecf1b200 <col:66> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b190 <col:66> 'int' lvalue Var 0x5590ecf1a9f8 'c' 'int'
[B223.54]([B223.56])
  58: CallExpr 0x5590ecf1b290 <lvm.c:464:26, col:68> 'Table *'
|-ImplicitCastExpr 0x5590ecf1b278 <col:26> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf1b040 <col:26> 'Table *(lua_State *, int, int)' Function 0x5590ececcf70 'luaH_new' 'Table *(lua_State *, int, int)'
|-ImplicitCastExpr 0x5590ecf1b2d0 <col:35> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf1b068 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-CallExpr 0x5590ecf1b120 <col:38, col:51> 'int'
| |-ImplicitCastExpr 0x5590ecf1b108 <col:38> 'int (*)(int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5590ecf1b090 <col:38> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
| `-ImplicitCastExpr 0x5590ecf1b150 <col:50> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf1b0b8 <col:50> 'int' lvalue Var 0x5590ecf1a4c8 'b' 'int'
`-CallExpr 0x5590ecf1b1d0 <col:54, col:67> 'int'
  |-ImplicitCastExpr 0x5590ecf1b1b8 <col:54> 'int (*)(int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5590ecf1b168 <col:54> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
  `-ImplicitCastExpr 0x5590ecf1b200 <col:66> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf1b190 <col:66> 'int' lvalue Var 0x5590ecf1a9f8 'c' 'int'
[B223.45]([B223.47], [B223.52], [B223.57])
  59: CStyleCastExpr 0x5590ecf1b368 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ParenExpr 0x5590ecf1b348 <col:26, col:30> 'Table *'
  `-ParenExpr 0x5590ecf1b2e8 <./lobject.h:150:36, col:38> 'Table *'
    `-CallExpr 0x5590ecf1b290 <lvm.c:464:26, col:68> 'Table *'
      |-ImplicitCastExpr 0x5590ecf1b278 <col:26> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5590ecf1b040 <col:26> 'Table *(lua_State *, int, int)' Function 0x5590ececcf70 'luaH_new' 'Table *(lua_State *, int, int)'
      |-ImplicitCastExpr 0x5590ecf1b2d0 <col:35> 'lua_State *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf1b068 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
      |-CallExpr 0x5590ecf1b120 <col:38, col:51> 'int'
      | |-ImplicitCastExpr 0x5590ecf1b108 <col:38> 'int (*)(int)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x5590ecf1b090 <col:38> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
      | `-ImplicitCastExpr 0x5590ecf1b150 <col:50> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x5590ecf1b0b8 <col:50> 'int' lvalue Var 0x5590ecf1a4c8 'b' 'int'
      `-CallExpr 0x5590ecf1b1d0 <col:54, col:67> 'int'
        |-ImplicitCastExpr 0x5590ecf1b1b8 <col:54> 'int (*)(int)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x5590ecf1b168 <col:54> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
        `-ImplicitCastExpr 0x5590ecf1b200 <col:66> 'int' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf1b190 <col:66> 'int' lvalue Var 0x5590ecf1a9f8 'c' 'int'
(GCObject *)(([B223.58])) (CStyleCastExpr, BitCast, GCObject *)
  60: DeclRefExpr 0x5590ecf1af90 <./lobject.h:150:5> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
i_o
  61: ImplicitCastExpr 0x5590ecf1afb8 <./lobject.h:150:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1af90 <col:5> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
[B223.60] (ImplicitCastExpr, LValueToRValue, TValue *)
  62: MemberExpr 0x5590ecf1afd0 <./lobject.h:150:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf1afb8 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1af90 <col:5> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
[B223.61]->value
  63: MemberExpr 0x5590ecf1b008 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf1afd0 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf1afb8 <col:5> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf1af90 <col:5> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
[B223.62].gc
  64: BinaryOperator 0x5590ecf1b3b0 <./lobject.h:150:5, ./llimits.h:75:31> 'GCObject *' '='
|-MemberExpr 0x5590ecf1b008 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
| `-MemberExpr 0x5590ecf1afd0 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf1afb8 <col:5> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf1af90 <col:5> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf1b390 <./llimits.h:75:22, col:31> 'GCObject *'
  `-CStyleCastExpr 0x5590ecf1b368 <col:23, col:30> 'GCObject *' <BitCast>
    `-ParenExpr 0x5590ecf1b348 <col:26, col:30> 'Table *'
      `-ParenExpr 0x5590ecf1b2e8 <./lobject.h:150:36, col:38> 'Table *'
        `-CallExpr 0x5590ecf1b290 <lvm.c:464:26, col:68> 'Table *'
          |-ImplicitCastExpr 0x5590ecf1b278 <col:26> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x5590ecf1b040 <col:26> 'Table *(lua_State *, int, int)' Function 0x5590ececcf70 'luaH_new' 'Table *(lua_State *, int, int)'
          |-ImplicitCastExpr 0x5590ecf1b2d0 <col:35> 'lua_State *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecf1b068 <col:35> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
          |-CallExpr 0x5590ecf1b120 <col:38, col:51> 'int'
          | |-ImplicitCastExpr 0x5590ecf1b108 <col:38> 'int (*)(int)' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x5590ecf1b090 <col:38> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
          | `-ImplicitCastExpr 0x5590ecf1b150 <col:50> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x5590ecf1b0b8 <col:50> 'int' lvalue Var 0x5590ecf1a4c8 'b' 'int'
          `-CallExpr 0x5590ecf1b1d0 <col:54, col:67> 'int'
            |-ImplicitCastExpr 0x5590ecf1b1b8 <col:54> 'int (*)(int)' <FunctionToPointerDecay>
            | `-DeclRefExpr 0x5590ecf1b168 <col:54> 'int (int)' Function 0x5590ece932f8 'luaO_fb2int' 'int (int)'
            `-ImplicitCastExpr 0x5590ecf1b200 <col:66> 'int' <LValueToRValue>
              `-DeclRefExpr 0x5590ecf1b190 <col:66> 'int' lvalue Var 0x5590ecf1a9f8 'c' 'int'
[B223.63] = ([B223.59])
  65: IntegerLiteral 0x5590ecf1b450 <./lua.h:79:21> 'int' 5
5
  66: DeclRefExpr 0x5590ecf1b3d8 <./lobject.h:150:42> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
i_o
  67: ImplicitCastExpr 0x5590ecf1b400 <./lobject.h:150:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b3d8 <col:42> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
[B223.66] (ImplicitCastExpr, LValueToRValue, TValue *)
  68: MemberExpr 0x5590ecf1b418 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf1b400 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b3d8 <col:42> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
[B223.67]->tt
  69: BinaryOperator 0x5590ecf1b470 <./lobject.h:150:42, ./lua.h:79:21> 'int' '='
|-MemberExpr 0x5590ecf1b418 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf1b400 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf1b3d8 <col:42> 'TValue *' lvalue Var 0x5590ecf1aeb8 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf1b450 <./lua.h:79:21> 'int' 5
[B223.68] = [B223.65]
  70: IntegerLiteral 0x5590ecf1b498 <./llimits.h:62:31> 'int' 0
0
  71: CStyleCastExpr 0x5590ecf1b4c8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf1b498 <col:31> 'int' 0
(void)[B223.70] (CStyleCastExpr, ToVoid, void)
  72: DeclRefExpr 0x5590ecf1b5c8 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  73: ImplicitCastExpr 0x5590ecf1b5f0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b5c8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B223.72] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  74: DeclRefExpr 0x5590ecf1b550 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  75: ImplicitCastExpr 0x5590ecf1b578 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b550 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.74] (ImplicitCastExpr, LValueToRValue, lua_State *)
  76: MemberExpr 0x5590ecf1b590 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf1b578 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b550 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.75]->savedpc
  77: BinaryOperator 0x5590ecf1b608 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf1b590 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf1b578 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf1b550 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf1b5f0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b5c8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B223.76] = [B223.73]
  78: IntegerLiteral 0x5590ecf1b630 <./llimits.h:123:38> 'int' 0
0
  79: CStyleCastExpr 0x5590ecf1b660 <./llimits.h:123:32, col:38> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf1b630 <col:38> 'int' 0
(void)[B223.78] (CStyleCastExpr, ToVoid, void)
  80: DeclRefExpr 0x5590ecf1b6a8 <lvm.c:465:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  81: ImplicitCastExpr 0x5590ecf1b6d0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b6a8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.80] (ImplicitCastExpr, LValueToRValue, lua_State *)
  82: MemberExpr 0x5590ecf1b6e8 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
`-ImplicitCastExpr 0x5590ecf1b6d0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b6a8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.81]->l_G
  83: ImplicitCastExpr 0x5590ecf1b740 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
`-ParenExpr 0x5590ecf1b720 <col:14, col:21> 'global_State *' lvalue
  `-MemberExpr 0x5590ecf1b6e8 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
    `-ImplicitCastExpr 0x5590ecf1b6d0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf1b6a8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B223.82]) (ImplicitCastExpr, LValueToRValue, global_State *)
  84: MemberExpr 0x5590ecf1b758 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
`-ImplicitCastExpr 0x5590ecf1b740 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
  `-ParenExpr 0x5590ecf1b720 <col:14, col:21> 'global_State *' lvalue
    `-MemberExpr 0x5590ecf1b6e8 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
      `-ImplicitCastExpr 0x5590ecf1b6d0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf1b6a8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.83]->totalbytes
  85: ImplicitCastExpr 0x5590ecf1b878 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' <LValueToRValue>
`-MemberExpr 0x5590ecf1b758 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
  `-ImplicitCastExpr 0x5590ecf1b740 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
    `-ParenExpr 0x5590ecf1b720 <col:14, col:21> 'global_State *' lvalue
      `-MemberExpr 0x5590ecf1b6e8 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
        `-ImplicitCastExpr 0x5590ecf1b6d0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf1b6a8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.84] (ImplicitCastExpr, LValueToRValue, lu_mem)
  86: DeclRefExpr 0x5590ecf1b790 <lvm.c:465:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  87: ImplicitCastExpr 0x5590ecf1b7b8 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1b790 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.86] (ImplicitCastExpr, LValueToRValue, lua_State *)
  88: MemberExpr 0x5590ecf1b7d0 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
`-ImplicitCastExpr 0x5590ecf1b7b8 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1b790 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.87]->l_G
  89: ImplicitCastExpr 0x5590ecf1b828 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
`-ParenExpr 0x5590ecf1b808 <col:14, col:21> 'global_State *' lvalue
  `-MemberExpr 0x5590ecf1b7d0 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
    `-ImplicitCastExpr 0x5590ecf1b7b8 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf1b790 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B223.88]) (ImplicitCastExpr, LValueToRValue, global_State *)
  90: MemberExpr 0x5590ecf1b840 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
`-ImplicitCastExpr 0x5590ecf1b828 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
  `-ParenExpr 0x5590ecf1b808 <col:14, col:21> 'global_State *' lvalue
    `-MemberExpr 0x5590ecf1b7d0 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
      `-ImplicitCastExpr 0x5590ecf1b7b8 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf1b790 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.89]->GCthreshold
  91: ImplicitCastExpr 0x5590ecf1b890 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' <LValueToRValue>
`-MemberExpr 0x5590ecf1b840 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
  `-ImplicitCastExpr 0x5590ecf1b828 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
    `-ParenExpr 0x5590ecf1b808 <col:14, col:21> 'global_State *' lvalue
      `-MemberExpr 0x5590ecf1b7d0 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
        `-ImplicitCastExpr 0x5590ecf1b7b8 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf1b790 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.90] (ImplicitCastExpr, LValueToRValue, lu_mem)
  92: BinaryOperator 0x5590ecf1b8a8 <./lstate.h:130:14, ./lgc.h:82:33> 'int' '>='
|-ImplicitCastExpr 0x5590ecf1b878 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' <LValueToRValue>
| `-MemberExpr 0x5590ecf1b758 <./lstate.h:130:14, ./lgc.h:82:13> 'lu_mem':'unsigned long' lvalue ->totalbytes 0x5590ece9f6e8
|   `-ImplicitCastExpr 0x5590ecf1b740 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
|     `-ParenExpr 0x5590ecf1b720 <col:14, col:21> 'global_State *' lvalue
|       `-MemberExpr 0x5590ecf1b6e8 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
|         `-ImplicitCastExpr 0x5590ecf1b6d0 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
|           `-DeclRefExpr 0x5590ecf1b6a8 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf1b890 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' <LValueToRValue>
  `-MemberExpr 0x5590ecf1b840 <./lstate.h:130:14, ./lgc.h:82:33> 'lu_mem':'unsigned long' lvalue ->GCthreshold 0x5590ece9f690
    `-ImplicitCastExpr 0x5590ecf1b828 <./lstate.h:130:14, col:21> 'global_State *' <LValueToRValue>
      `-ParenExpr 0x5590ecf1b808 <col:14, col:21> 'global_State *' lvalue
        `-MemberExpr 0x5590ecf1b7d0 <lvm.c:465:30, ./lstate.h:130:18> 'global_State *' lvalue ->l_G 0x5590ecea0118
          `-ImplicitCastExpr 0x5590ecf1b7b8 <lvm.c:465:30> 'lua_State *' <LValueToRValue>
            `-DeclRefExpr 0x5590ecf1b790 <col:30> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B223.85] >= [B223.91]
   T: if [B223.92]
   Preds (1): B2
   Succs (2): B222 B221

 [B224]
   1: ConditionalOperator 0x5590ecf1a1d0 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf19688 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf19660 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf19550 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf19530 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf19510 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf194e8 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf194c8 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf19458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf19290 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf19268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf19250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf19230 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf19208 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf19438 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf19410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf193d0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf193b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf193f0 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf19640 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf19618 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf19570 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf195f8 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf195d0 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf19590 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf195b0 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf19d08 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf19cf0 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf196a8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf19cd0 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf19ca8 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf19b70 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf19b50 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf19ae8 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf19ac8 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf19aa0 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf19a80 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf19c88 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf19c68 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf19c40 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf19b98 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf19c20 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf19bf8 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf1a1a8 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf1a190 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf19d30 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf1a170 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf1a150 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf1a128 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf1a108 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf1a098 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf19ed0 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf19ea8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf19e90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf19e70 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf19e48 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf1a078 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf1a050 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf1a010 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf19ff0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf1a030 <line:92:60> 'int' 0
([B227.25]) ? [B225.29] : [B226.21]
   2: CallExpr 0x5590ecf1a238 <lvm.c:458:17, col:52> 'void'
|-ImplicitCastExpr 0x5590ecf1a220 <col:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf11208 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedfeb8 'luaV_settable' 'void (lua_State *, const TValue *, TValue *, StkId)'
|-ImplicitCastExpr 0x5590ecf1a290 <col:31> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf11230 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf1a2c0 <col:34> 'const TValue *' <BitCast>
| `-ImplicitCastExpr 0x5590ecf1a2a8 <col:34> 'StkId':'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf11258 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
|-ParenExpr 0x5590ecf190f8 <./llimits.h:63:25, col:27> 'TValue *'
| `-ConditionalOperator 0x5590ecf190c8 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|   |-ParenExpr 0x5590ecf184b0 <line:122:17, col:29> 'int'
|   | `-BinaryOperator 0x5590ecf18488 <col:18, line:119:34> 'int' '&'
|   |   |-ParenExpr 0x5590ecf18378 <line:122:18, col:20> 'int'
|   |   | `-ParenExpr 0x5590ecf18358 <line:88:21, col:63> 'int'
|   |   |   `-ParenExpr 0x5590ecf18338 <./llimits.h:75:22, col:31> 'int'
|   |   |     `-CStyleCastExpr 0x5590ecf18310 <col:23, col:30> 'int' <IntegralCast>
|   |   |       `-ParenExpr 0x5590ecf182f0 <col:26, col:30> 'unsigned int'
|   |   |         `-BinaryOperator 0x5590ecf18280 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |   |           |-ParenExpr 0x5590ecf11460 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |   |           | `-BinaryOperator 0x5590ecf11438 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |   |           |   |-ImplicitCastExpr 0x5590ecf11420 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |   |           |   | `-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   |           |   |   `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |   |           |   `-ParenExpr 0x5590ecf11400 <./lopcodes.h:47:16, col:31> 'int'
|   |   |           |     `-BinaryOperator 0x5590ecf113d8 <line:46:16, line:37:17> 'int' '+'
|   |   |           |       |-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
|   |   |           |       | `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
|   |   |           |       |   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
|   |   |           |       |   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
|   |   |           |       |   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
|   |   |           |       |   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
|   |   |           |       |   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
|   |   |           |       `-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
|   |   |           `-ParenExpr 0x5590ecf11608 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |   |             `-BinaryOperator 0x5590ecf115e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |   |               |-ParenExpr 0x5590ecf115a0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |   |               | `-UnaryOperator 0x5590ecf11580 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |   |               |   `-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
|   |   |               |     `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |   |               |       |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |   |               |       | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |   |               |       |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |   |               |       |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
|   |   |               |       `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
|   |   |               `-IntegerLiteral 0x5590ecf115c0 <line:88:60> 'int' 0
|   |   `-ParenExpr 0x5590ecf18468 <line:119:16, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf18440 <col:17, col:33> 'int' '<<'
|   |       |-IntegerLiteral 0x5590ecf18398 <col:17> 'int' 1
|   |       `-ParenExpr 0x5590ecf18420 <col:22, col:33> 'int'
|   |         `-BinaryOperator 0x5590ecf183f8 <line:38:17, line:119:32> 'int' '-'
|   |           |-IntegerLiteral 0x5590ecf183b8 <line:38:17> 'int' 9
|   |           `-IntegerLiteral 0x5590ecf183d8 <line:119:32> 'int' 1
|   |-BinaryOperator 0x5590ecf18b98 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|   | |-ImplicitCastExpr 0x5590ecf18b80 <lvm.c:352:21> 'TValue *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5590ecf184d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|   | `-ParenExpr 0x5590ecf18b60 <./lopcodes.h:125:19, col:37> 'int'
|   |   `-BinaryOperator 0x5590ecf18b38 <col:20, line:119:34> 'int' '&'
|   |     |-CStyleCastExpr 0x5590ecf18a00 <line:125:20, col:27> 'int' <NoOp>
|   |     | `-ParenExpr 0x5590ecf189e0 <col:25, col:27> 'int'
|   |     |   `-ParenExpr 0x5590ecf18978 <line:88:21, col:63> 'int'
|   |     |     `-ParenExpr 0x5590ecf18958 <./llimits.h:75:22, col:31> 'int'
|   |     |       `-CStyleCastExpr 0x5590ecf18930 <col:23, col:30> 'int' <IntegralCast>
|   |     |         `-ParenExpr 0x5590ecf18910 <col:26, col:30> 'unsigned int'
|   |     |           `-BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |     |             |-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |     |             | `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |     |             |   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |     |             |   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |     |             |   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |     |             |   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
|   |     |             |     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
|   |     |             |       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
|   |     |             |       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
|   |     |             |       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
|   |     |             |       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
|   |     |             |       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
|   |     |             |       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
|   |     |             |       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
|   |     |             |       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
|   |     |             `-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |     |               `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |     |                 |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |     |                 | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |     |                 |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
|   |     |                 |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |     |                 |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |     |                 |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |     |                 |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |     |                 |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
|   |     |                 |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
|   |     |                 `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
|   |     `-UnaryOperator 0x5590ecf18b18 <line:125:31, line:119:34> 'int' prefix '~'
|   |       `-ParenExpr 0x5590ecf18af8 <col:16, col:34> 'int'
|   |         `-BinaryOperator 0x5590ecf18ad0 <col:17, col:33> 'int' '<<'
|   |           |-IntegerLiteral 0x5590ecf18a28 <col:17> 'int' 1
|   |           `-ParenExpr 0x5590ecf18ab0 <col:22, col:33> 'int'
|   |             `-BinaryOperator 0x5590ecf18a88 <line:38:17, line:119:32> 'int' '-'
|   |               |-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
|   `-BinaryOperator 0x5590ecf190a0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|     |-ImplicitCastExpr 0x5590ecf19088 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf18bc0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|     `-ParenExpr 0x5590ecf19068 <./lopcodes.h:88:21, col:63> 'int'
|       `-ParenExpr 0x5590ecf19048 <./llimits.h:75:22, col:31> 'int'
|         `-CStyleCastExpr 0x5590ecf19020 <col:23, col:30> 'int' <IntegralCast>
|           `-ParenExpr 0x5590ecf19000 <col:26, col:30> 'unsigned int'
|             `-BinaryOperator 0x5590ecf18f90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|               |-ParenExpr 0x5590ecf18dc8 <line:88:32, col:43> 'Instruction':'unsigned int'
|               | `-BinaryOperator 0x5590ecf18da0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|               |   |-ImplicitCastExpr 0x5590ecf18d88 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|               |   | `-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|               |   |   `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|               |   `-ParenExpr 0x5590ecf18d68 <./lopcodes.h:47:16, col:31> 'int'
|               |     `-BinaryOperator 0x5590ecf18d40 <line:46:16, line:37:17> 'int' '+'
|               |       |-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
|               |       | `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
|               |       |   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
|               |       |   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
|               |       |   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
|               |       |   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
|               |       |   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
|               |       `-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
|               `-ParenExpr 0x5590ecf18f70 <line:71:20, col:49> 'Instruction':'unsigned int'
|                 `-BinaryOperator 0x5590ecf18f48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                   |-ParenExpr 0x5590ecf18f08 <line:71:21, col:45> 'Instruction':'unsigned int'
|                   | `-UnaryOperator 0x5590ecf18ee8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                   |   `-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
|                   |     `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                   |       |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
|                   |       | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                   |       |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                   |       |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
|                   |       `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
|                   `-IntegerLiteral 0x5590ecf18f28 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf1a200 <./llimits.h:63:25, col:27> 'TValue *'
  `-ConditionalOperator 0x5590ecf1a1d0 <./lopcodes.h:122:17, line:92:63> 'TValue *'
    |-ParenExpr 0x5590ecf19688 <line:122:17, col:29> 'int'
    | `-BinaryOperator 0x5590ecf19660 <col:18, line:119:34> 'int' '&'
    |   |-ParenExpr 0x5590ecf19550 <line:122:18, col:20> 'int'
    |   | `-ParenExpr 0x5590ecf19530 <line:92:21, col:63> 'int'
    |   |   `-ParenExpr 0x5590ecf19510 <./llimits.h:75:22, col:31> 'int'
    |   |     `-CStyleCastExpr 0x5590ecf194e8 <col:23, col:30> 'int' <IntegralCast>
    |   |       `-ParenExpr 0x5590ecf194c8 <col:26, col:30> 'unsigned int'
    |   |         `-BinaryOperator 0x5590ecf19458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |   |           |-ParenExpr 0x5590ecf19290 <line:92:32, col:43> 'Instruction':'unsigned int'
    |   |           | `-BinaryOperator 0x5590ecf19268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |           |   |-ImplicitCastExpr 0x5590ecf19250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   |           |   | `-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |           |   |   `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   |           |   `-ParenExpr 0x5590ecf19230 <./lopcodes.h:46:16, col:31> 'int'
    |   |           |     `-BinaryOperator 0x5590ecf19208 <line:45:16, line:40:17> 'int' '+'
    |   |           |       |-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
    |   |           |       | `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
    |   |           |       |   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
    |   |           |       |   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
    |   |           |       `-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
    |   |           `-ParenExpr 0x5590ecf19438 <line:71:20, col:49> 'Instruction':'unsigned int'
    |   |             `-BinaryOperator 0x5590ecf19410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |   |               |-ParenExpr 0x5590ecf193d0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |   |               | `-UnaryOperator 0x5590ecf193b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   |               |   `-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
    |   |               |     `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |   |               |       |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
    |   |               |       | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   |               |       |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |   |               |       |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
    |   |               |       `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
    |   |               `-IntegerLiteral 0x5590ecf193f0 <line:92:60> 'int' 0
    |   `-ParenExpr 0x5590ecf19640 <line:119:16, col:34> 'int'
    |     `-BinaryOperator 0x5590ecf19618 <col:17, col:33> 'int' '<<'
    |       |-IntegerLiteral 0x5590ecf19570 <col:17> 'int' 1
    |       `-ParenExpr 0x5590ecf195f8 <col:22, col:33> 'int'
    |         `-BinaryOperator 0x5590ecf195d0 <line:38:17, line:119:32> 'int' '-'
    |           |-IntegerLiteral 0x5590ecf19590 <line:38:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf195b0 <line:119:32> 'int' 1
    |-BinaryOperator 0x5590ecf19d08 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
    | |-ImplicitCastExpr 0x5590ecf19cf0 <lvm.c:354:21> 'TValue *' <LValueToRValue>
    | | `-DeclRefExpr 0x5590ecf196a8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
    | `-ParenExpr 0x5590ecf19cd0 <./lopcodes.h:125:19, col:37> 'int'
    |   `-BinaryOperator 0x5590ecf19ca8 <col:20, line:119:34> 'int' '&'
    |     |-CStyleCastExpr 0x5590ecf19b70 <line:125:20, col:27> 'int' <NoOp>
    |     | `-ParenExpr 0x5590ecf19b50 <col:25, col:27> 'int'
    |     |   `-ParenExpr 0x5590ecf19ae8 <line:92:21, col:63> 'int'
    |     |     `-ParenExpr 0x5590ecf19ac8 <./llimits.h:75:22, col:31> 'int'
    |     |       `-CStyleCastExpr 0x5590ecf19aa0 <col:23, col:30> 'int' <IntegralCast>
    |     |         `-ParenExpr 0x5590ecf19a80 <col:26, col:30> 'unsigned int'
    |     |           `-BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |     |             |-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
    |     |             | `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |     |             |   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |     |             |   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |     |             |   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |     |             |   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
    |     |             |     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
    |     |             |       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
    |     |             |       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
    |     |             |       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
    |     |             |       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
    |     |             |       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
    |     |             `-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
    |     |               `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |     |                 |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
    |     |                 | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |     |                 |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
    |     |                 |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |     |                 |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |     |                 |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |     |                 |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     |                 |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
    |     |                 |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
    |     |                 `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
    |     `-UnaryOperator 0x5590ecf19c88 <line:125:31, line:119:34> 'int' prefix '~'
    |       `-ParenExpr 0x5590ecf19c68 <col:16, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf19c40 <col:17, col:33> 'int' '<<'
    |           |-IntegerLiteral 0x5590ecf19b98 <col:17> 'int' 1
    |           `-ParenExpr 0x5590ecf19c20 <col:22, col:33> 'int'
    |             `-BinaryOperator 0x5590ecf19bf8 <line:38:17, line:119:32> 'int' '-'
    |               |-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
    |               `-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
    `-BinaryOperator 0x5590ecf1a1a8 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf1a190 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf19d30 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf1a170 <./lopcodes.h:92:21, col:63> 'int'
        `-ParenExpr 0x5590ecf1a150 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf1a128 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf1a108 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf1a098 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf19ed0 <line:92:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf19ea8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf19e90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf19e70 <./lopcodes.h:46:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf19e48 <line:45:16, line:40:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
                |       | `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
                |       |   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
                |       |   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
                |       `-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
                `-ParenExpr 0x5590ecf1a078 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf1a050 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf1a010 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf19ff0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf1a030 <line:92:60> 'int' 0
[B230.8]([B230.10], [B230.13], ([B227.1]), ([B224.1]))
   3: DeclRefExpr 0x5590ecf1a328 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf1a350 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf1a328 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B224.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf1a368 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf1a350 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf1a328 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B224.4]->base
   6: ImplicitCastExpr 0x5590ecf1a3a0 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf1a368 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf1a350 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf1a328 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B224.5] (ImplicitCastExpr, LValueToRValue, StkId)
   7: DeclRefExpr 0x5590ecf1a300 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   8: BinaryOperator 0x5590ecf1a3b8 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf1a300 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf1a3a0 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf1a368 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf1a350 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf1a328 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B224.7] = [B224.6]
   T: continue;
   Preds (2): B225 B226
   Succs (1): B1

 [B225]
   1: DeclRefExpr 0x5590ecf196a8 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf19cf0 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf196a8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B225.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf19808 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B225.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf19718 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf19738 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf19758 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
[B225.5] + [B225.6]
   8: IntegerLiteral 0x5590ecf197a0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf197c0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
([B225.7]) + [B225.8]
  10: BinaryOperator 0x5590ecf19820 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
[B225.4] >> ([B225.9])
  11: IntegerLiteral 0x5590ecf19868 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf19898 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
(Instruction)[B225.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf198c0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
~[B225.12]
  14: IntegerLiteral 0x5590ecf19900 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf19920 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
([B225.13]) << [B225.14]
  16: UnaryOperator 0x5590ecf19968 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
~([B225.15])
  17: IntegerLiteral 0x5590ecf199a8 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf199c8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
([B225.16]) << [B225.17]
  19: BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
([B225.10]) & ([B225.18])
  20: CStyleCastExpr 0x5590ecf19aa0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf19a80 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
(int)([B225.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf19b70 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf19b50 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf19ae8 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf19ac8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf19aa0 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf19a80 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
(int)((([B225.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf19b98 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf19bb8 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf19bd8 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf19bf8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
[B225.23] - [B225.24]
  26: BinaryOperator 0x5590ecf19c40 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf19b98 <col:17> 'int' 1
`-ParenExpr 0x5590ecf19c20 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf19bf8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
[B225.22] << ([B225.25])
  27: UnaryOperator 0x5590ecf19c88 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf19c68 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf19c40 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf19b98 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf19c20 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf19bf8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
~([B225.26])
  28: BinaryOperator 0x5590ecf19ca8 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf19b70 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf19b50 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf19ae8 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf19ac8 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf19aa0 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf19a80 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf19c88 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf19c68 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf19c40 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf19b98 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf19c20 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf19bf8 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
[B225.21] & [B225.27]
  29: BinaryOperator 0x5590ecf19d08 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf19cf0 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf196a8 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf19cd0 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf19ca8 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf19b70 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf19b50 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf19ae8 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf19ac8 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf19aa0 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf19a80 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf19a10 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf19848 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf19820 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf19808 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf196f8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf196d0 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf197e8 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf197c0 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf19780 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf19758 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf19718 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf19738 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf197a0 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf199f0 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf199c8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf19988 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf19968 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf19948 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf19920 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf198e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf198c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf19898 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf19868 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf19900 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf199a8 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf19c88 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf19c68 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf19c40 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf19b98 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf19c20 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf19bf8 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf19bb8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf19bd8 <line:119:32> 'int' 1
[B225.2] + ([B225.28])
   Preds (1): B227
   Succs (1): B224

 [B226]
   1: DeclRefExpr 0x5590ecf19d30 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf1a190 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf19d30 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B226.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf19e90 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B226.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf19da0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf19dc0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf19de0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
[B226.5] + [B226.6]
   8: IntegerLiteral 0x5590ecf19e28 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf19e48 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
([B226.7]) + [B226.8]
  10: BinaryOperator 0x5590ecf19ea8 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf19e90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf19e70 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf19e48 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
[B226.4] >> ([B226.9])
  11: IntegerLiteral 0x5590ecf19ef0 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf19f20 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
(Instruction)[B226.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf19f48 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
~[B226.12]
  14: IntegerLiteral 0x5590ecf19f88 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf19fa8 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
([B226.13]) << [B226.14]
  16: UnaryOperator 0x5590ecf19ff0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
~([B226.15])
  17: IntegerLiteral 0x5590ecf1a030 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf1a050 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf1a010 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf19ff0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf1a030 <line:92:60> 'int' 0
([B226.16]) << [B226.17]
  19: BinaryOperator 0x5590ecf1a098 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf19ed0 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf19ea8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf19e90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf19e70 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf19e48 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf1a078 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf1a050 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf1a010 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf19ff0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf1a030 <line:92:60> 'int' 0
([B226.10]) & ([B226.18])
  20: CStyleCastExpr 0x5590ecf1a128 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf1a108 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf1a098 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf19ed0 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf19ea8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf19e90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf19e70 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf19e48 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf1a078 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf1a050 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf1a010 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf19ff0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf1a030 <line:92:60> 'int' 0
(int)([B226.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf1a1a8 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf1a190 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf19d30 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf1a170 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf1a150 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf1a128 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf1a108 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf1a098 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf19ed0 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf19ea8 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf19e90 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf19d80 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf19d58 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf19e70 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf19e48 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf19e08 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf19de0 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf19da0 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf19dc0 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf19e28 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf1a078 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf1a050 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf1a010 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf19ff0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf19fd0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf19fa8 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf19f68 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf19f48 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf19f20 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf19ef0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf19f88 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf1a030 <line:92:60> 'int' 0
[B226.2] + (([B226.20]))
   Preds (1): B227
   Succs (1): B224

 [B227]
   1: ConditionalOperator 0x5590ecf190c8 <./lopcodes.h:122:17, line:88:63> 'TValue *'
|-ParenExpr 0x5590ecf184b0 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf18488 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf18378 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf18358 <line:88:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf18338 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf18310 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf182f0 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf18280 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf11460 <line:88:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf11438 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf11420 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf11400 <./lopcodes.h:47:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf113d8 <line:46:16, line:37:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
|   |           |       |   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
|   |           |       |   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
|   |           |       |   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
|   |           |       |   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
|   |           |       `-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
|   |           `-ParenExpr 0x5590ecf11608 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf115e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf115a0 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf11580 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf115c0 <line:88:60> 'int' 0
|   `-ParenExpr 0x5590ecf18468 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf18440 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf18398 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf18420 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf183f8 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf183b8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf183d8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf18b98 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf18b80 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf184d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf18b60 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf18b38 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf18a00 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf189e0 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf18978 <line:88:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf18958 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf18930 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf18910 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
|     |             |       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
|     |             |       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
|     |             |       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
|     |             |       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
|     |             |       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
|     |             `-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
|     `-UnaryOperator 0x5590ecf18b18 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf18af8 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf18ad0 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf18a28 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf18ab0 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf18a88 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf190a0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf19088 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf18bc0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf19068 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf19048 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf19020 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf19000 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf18f90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf18dc8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf18da0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf18d88 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf18d68 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf18d40 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf18f70 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf18f48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf18f08 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf18ee8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf18f28 <line:88:60> 'int' 0
([B230.39]) ? [B228.31] : [B229.23]
   2: DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   3: ImplicitCastExpr 0x5590ecf19250 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B227.2]) (ImplicitCastExpr, LValueToRValue, Instruction)
   4: IntegerLiteral 0x5590ecf19160 <./lopcodes.h:44:17> 'int' 0
0
   5: IntegerLiteral 0x5590ecf19180 <./lopcodes.h:42:18> 'int' 6
6
   6: BinaryOperator 0x5590ecf191a0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
[B227.4] + [B227.5]
   7: IntegerLiteral 0x5590ecf191e8 <./lopcodes.h:40:17> 'int' 8
8
   8: BinaryOperator 0x5590ecf19208 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
([B227.6]) + [B227.7]
   9: BinaryOperator 0x5590ecf19268 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf19250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf19230 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf19208 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
[B227.3] >> ([B227.8])
  10: IntegerLiteral 0x5590ecf192b0 <./lopcodes.h:71:39> 'int' 0
0
  11: CStyleCastExpr 0x5590ecf192e0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
(Instruction)[B227.10] (CStyleCastExpr, IntegralCast, Instruction)
  12: UnaryOperator 0x5590ecf19308 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
~[B227.11]
  13: IntegerLiteral 0x5590ecf19348 <./lopcodes.h:37:17> 'int' 9
9
  14: BinaryOperator 0x5590ecf19368 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
([B227.12]) << [B227.13]
  15: UnaryOperator 0x5590ecf193b0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
~([B227.14])
  16: IntegerLiteral 0x5590ecf193f0 <./lopcodes.h:92:60> 'int' 0
0
  17: BinaryOperator 0x5590ecf19410 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf193d0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf193b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf193f0 <line:92:60> 'int' 0
([B227.15]) << [B227.16]
  18: BinaryOperator 0x5590ecf19458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf19290 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf19268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf19250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf19230 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf19208 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf19438 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf19410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf193d0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf193b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf193f0 <line:92:60> 'int' 0
([B227.9]) & ([B227.17])
  19: CStyleCastExpr 0x5590ecf194e8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf194c8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf19458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf19290 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf19268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf19250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf19230 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf19208 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf19438 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf19410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf193d0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf193b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf193f0 <line:92:60> 'int' 0
(int)([B227.18]) (CStyleCastExpr, IntegralCast, int)
  20: IntegerLiteral 0x5590ecf19570 <./lopcodes.h:119:17> 'int' 1
1
  21: IntegerLiteral 0x5590ecf19590 <./lopcodes.h:38:17> 'int' 9
9
  22: IntegerLiteral 0x5590ecf195b0 <./lopcodes.h:119:32> 'int' 1
1
  23: BinaryOperator 0x5590ecf195d0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf19590 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf195b0 <line:119:32> 'int' 1
[B227.21] - [B227.22]
  24: BinaryOperator 0x5590ecf19618 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf19570 <col:17> 'int' 1
`-ParenExpr 0x5590ecf195f8 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf195d0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf19590 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf195b0 <line:119:32> 'int' 1
[B227.20] << ([B227.23])
  25: BinaryOperator 0x5590ecf19660 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf19550 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf19530 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf19510 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf194e8 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf194c8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf19458 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf19290 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf19268 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf19250 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf19140 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf19118 <lvm.c:458:50> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf19230 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf19208 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf191c8 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf191a0 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf19160 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf19180 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf191e8 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf19438 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf19410 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf193d0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf193b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf19390 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf19368 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf19328 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf19308 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf192e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf192b0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf19348 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf193f0 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf19640 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf19618 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf19570 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf195f8 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf195d0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf19590 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf195b0 <line:119:32> 'int' 1
((([B227.19]))) & ([B227.24])
   T: ([B227.25]) ? ... : ...
   Preds (2): B228 B229
   Succs (2): B225 B226

 [B228]
   1: DeclRefExpr 0x5590ecf184d0 <lvm.c:352:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf18b80 <lvm.c:352:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf184d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B228.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf18698 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B228.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf18540 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf18560 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf18580 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
[B228.5] + [B228.6]
   8: IntegerLiteral 0x5590ecf185c8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf185e8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
([B228.7]) + [B228.8]
  10: IntegerLiteral 0x5590ecf18630 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf18650 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
([B228.9]) + [B228.10]
  12: BinaryOperator 0x5590ecf186b0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
[B228.4] >> ([B228.11])
  13: IntegerLiteral 0x5590ecf186f8 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf18728 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
(Instruction)[B228.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf18750 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
~[B228.14]
  16: IntegerLiteral 0x5590ecf18790 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf187b0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
([B228.15]) << [B228.16]
  18: UnaryOperator 0x5590ecf187f8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
~([B228.17])
  19: IntegerLiteral 0x5590ecf18838 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf18858 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
([B228.18]) << [B228.19]
  21: BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
([B228.12]) & ([B228.20])
  22: CStyleCastExpr 0x5590ecf18930 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf18910 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
(int)([B228.21]) (CStyleCastExpr, IntegralCast, int)
  23: CStyleCastExpr 0x5590ecf18a00 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf189e0 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf18978 <line:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf18958 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf18930 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf18910 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
(int)((([B228.22]))) (CStyleCastExpr, NoOp, int)
  24: IntegerLiteral 0x5590ecf18a28 <./lopcodes.h:119:17> 'int' 1
1
  25: IntegerLiteral 0x5590ecf18a48 <./lopcodes.h:38:17> 'int' 9
9
  26: IntegerLiteral 0x5590ecf18a68 <./lopcodes.h:119:32> 'int' 1
1
  27: BinaryOperator 0x5590ecf18a88 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
[B228.25] - [B228.26]
  28: BinaryOperator 0x5590ecf18ad0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf18a28 <col:17> 'int' 1
`-ParenExpr 0x5590ecf18ab0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf18a88 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
[B228.24] << ([B228.27])
  29: UnaryOperator 0x5590ecf18b18 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf18af8 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf18ad0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf18a28 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf18ab0 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf18a88 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
~([B228.28])
  30: BinaryOperator 0x5590ecf18b38 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf18a00 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf189e0 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf18978 <line:88:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf18958 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf18930 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf18910 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
|             |       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
|             |       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
|             |       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
|             |       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
|             |       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
|             |       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
|             |       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
|             `-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
`-UnaryOperator 0x5590ecf18b18 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf18af8 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf18ad0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf18a28 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf18ab0 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf18a88 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
[B228.23] & [B228.29]
  31: BinaryOperator 0x5590ecf18b98 <lvm.c:352:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf18b80 <lvm.c:352:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf184d0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf18b60 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf18b38 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf18a00 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf189e0 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf18978 <line:88:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf18958 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf18930 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf18910 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf188a0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf186d8 <line:88:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf186b0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf18698 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf18520 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf184f8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf18678 <./lopcodes.h:47:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf18650 <line:46:16, line:37:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf18610 <line:46:16, col:31> 'int'
    |             |       | `-BinaryOperator 0x5590ecf185e8 <line:45:16, line:40:17> 'int' '+'
    |             |       |   |-ParenExpr 0x5590ecf185a8 <line:45:16, col:33> 'int'
    |             |       |   | `-BinaryOperator 0x5590ecf18580 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |   |-IntegerLiteral 0x5590ecf18540 <line:44:17> 'int' 0
    |             |       |   |   `-IntegerLiteral 0x5590ecf18560 <line:42:18> 'int' 6
    |             |       |   `-IntegerLiteral 0x5590ecf185c8 <line:40:17> 'int' 8
    |             |       `-IntegerLiteral 0x5590ecf18630 <line:37:17> 'int' 9
    |             `-ParenExpr 0x5590ecf18880 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf18858 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf18818 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf187f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf187d8 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf187b0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf18770 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf18750 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf18728 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf186f8 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf18790 <line:38:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf18838 <line:88:60> 'int' 0
    `-UnaryOperator 0x5590ecf18b18 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf18af8 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf18ad0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf18a28 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf18ab0 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf18a88 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf18a48 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf18a68 <line:119:32> 'int' 1
[B228.2] + ([B228.30])
   Preds (1): B230
   Succs (1): B227

 [B229]
   1: DeclRefExpr 0x5590ecf18bc0 <lvm.c:352:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf19088 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf18bc0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B229.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf18d88 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B229.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf18c30 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf18c50 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf18c70 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
[B229.5] + [B229.6]
   8: IntegerLiteral 0x5590ecf18cb8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf18cd8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
([B229.7]) + [B229.8]
  10: IntegerLiteral 0x5590ecf18d20 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf18d40 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
([B229.9]) + [B229.10]
  12: BinaryOperator 0x5590ecf18da0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf18d88 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf18d68 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf18d40 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
[B229.4] >> ([B229.11])
  13: IntegerLiteral 0x5590ecf18de8 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf18e18 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
(Instruction)[B229.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf18e40 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
~[B229.14]
  16: IntegerLiteral 0x5590ecf18e80 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf18ea0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
([B229.15]) << [B229.16]
  18: UnaryOperator 0x5590ecf18ee8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
~([B229.17])
  19: IntegerLiteral 0x5590ecf18f28 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf18f48 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf18f08 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf18ee8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf18f28 <line:88:60> 'int' 0
([B229.18]) << [B229.19]
  21: BinaryOperator 0x5590ecf18f90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf18dc8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf18da0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf18d88 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf18d68 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf18d40 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf18f70 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf18f48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf18f08 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf18ee8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf18f28 <line:88:60> 'int' 0
([B229.12]) & ([B229.20])
  22: CStyleCastExpr 0x5590ecf19020 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf19000 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf18f90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf18dc8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf18da0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf18d88 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf18d68 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf18d40 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf18f70 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf18f48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf18f08 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf18ee8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf18f28 <line:88:60> 'int' 0
(int)([B229.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf190a0 <lvm.c:352:45, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf19088 <lvm.c:352:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf18bc0 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf19068 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf19048 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf19020 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf19000 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf18f90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf18dc8 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf18da0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf18d88 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf18c10 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf18be8 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf18d68 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf18d40 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf18d00 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf18cd8 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf18c98 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf18c70 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf18c30 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf18c50 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf18cb8 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf18d20 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf18f70 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf18f48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf18f08 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf18ee8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf18ec8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf18ea0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf18e60 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf18e40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf18e18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf18de8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf18e80 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf18f28 <line:88:60> 'int' 0
[B229.2] + (([B229.22]))
   Preds (1): B230
   Succs (1): B227

 [B230]
  case OP_SETTABLE:
   1: DeclRefExpr 0x5590ecf111a0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf111c8 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf111a0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B230.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf11128 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf11150 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf11128 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B230.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf11168 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf11150 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf11128 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B230.4]->savedpc
   6: BinaryOperator 0x5590ecf111e0 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf11168 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf11150 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf11128 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf111c8 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf111a0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B230.5] = [B230.2]
   7: DeclRefExpr 0x5590ecf11208 <lvm.c:458:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedfeb8 'luaV_settable' 'void (lua_State *, const TValue *, TValue *, StkId)'
luaV_settable
   8: ImplicitCastExpr 0x5590ecf1a220 <lvm.c:458:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf11208 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedfeb8 'luaV_settable' 'void (lua_State *, const TValue *, TValue *, StkId)'
[B230.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, TValue *, StkId))
   9: DeclRefExpr 0x5590ecf11230 <lvm.c:458:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf1a290 <lvm.c:458:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf11230 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B230.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf11258 <lvm.c:458:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  12: ImplicitCastExpr 0x5590ecf1a2a8 <lvm.c:458:34> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf11258 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B230.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: ImplicitCastExpr 0x5590ecf1a2c0 <lvm.c:458:34> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf1a2a8 <col:34> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf11258 <col:34> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B230.12] (ImplicitCastExpr, BitCast, const TValue *)
  14: DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  15: ImplicitCastExpr 0x5590ecf11420 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B230.14]) (ImplicitCastExpr, LValueToRValue, Instruction)
  16: IntegerLiteral 0x5590ecf112c8 <./lopcodes.h:44:17> 'int' 0
0
  17: IntegerLiteral 0x5590ecf112e8 <./lopcodes.h:42:18> 'int' 6
6
  18: BinaryOperator 0x5590ecf11308 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
[B230.16] + [B230.17]
  19: IntegerLiteral 0x5590ecf11350 <./lopcodes.h:40:17> 'int' 8
8
  20: BinaryOperator 0x5590ecf11370 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
([B230.18]) + [B230.19]
  21: IntegerLiteral 0x5590ecf113b8 <./lopcodes.h:37:17> 'int' 9
9
  22: BinaryOperator 0x5590ecf113d8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
([B230.20]) + [B230.21]
  23: BinaryOperator 0x5590ecf11438 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf11420 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf11400 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf113d8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
[B230.15] >> ([B230.22])
  24: IntegerLiteral 0x5590ecf11480 <./lopcodes.h:71:39> 'int' 0
0
  25: CStyleCastExpr 0x5590ecf114b0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
(Instruction)[B230.24] (CStyleCastExpr, IntegralCast, Instruction)
  26: UnaryOperator 0x5590ecf114d8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
~[B230.25]
  27: IntegerLiteral 0x5590ecf11518 <./lopcodes.h:38:17> 'int' 9
9
  28: BinaryOperator 0x5590ecf11538 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
([B230.26]) << [B230.27]
  29: UnaryOperator 0x5590ecf11580 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
~([B230.28])
  30: IntegerLiteral 0x5590ecf115c0 <./lopcodes.h:88:60> 'int' 0
0
  31: BinaryOperator 0x5590ecf115e0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf115a0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf11580 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf115c0 <line:88:60> 'int' 0
([B230.29]) << [B230.30]
  32: BinaryOperator 0x5590ecf18280 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf11460 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf11438 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf11420 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf11400 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf113d8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf11608 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf115e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf115a0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf11580 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf115c0 <line:88:60> 'int' 0
([B230.23]) & ([B230.31])
  33: CStyleCastExpr 0x5590ecf18310 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf182f0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf18280 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf11460 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf11438 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf11420 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf11400 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf113d8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf11608 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf115e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf115a0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf11580 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf115c0 <line:88:60> 'int' 0
(int)([B230.32]) (CStyleCastExpr, IntegralCast, int)
  34: IntegerLiteral 0x5590ecf18398 <./lopcodes.h:119:17> 'int' 1
1
  35: IntegerLiteral 0x5590ecf183b8 <./lopcodes.h:38:17> 'int' 9
9
  36: IntegerLiteral 0x5590ecf183d8 <./lopcodes.h:119:32> 'int' 1
1
  37: BinaryOperator 0x5590ecf183f8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf183b8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf183d8 <line:119:32> 'int' 1
[B230.35] - [B230.36]
  38: BinaryOperator 0x5590ecf18440 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf18398 <col:17> 'int' 1
`-ParenExpr 0x5590ecf18420 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf183f8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf183b8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf183d8 <line:119:32> 'int' 1
[B230.34] << ([B230.37])
  39: BinaryOperator 0x5590ecf18488 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf18378 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf18358 <line:88:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf18338 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf18310 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf182f0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf18280 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf11460 <line:88:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf11438 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf11420 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf112a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf11280 <lvm.c:458:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf11400 <./lopcodes.h:47:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf113d8 <line:46:16, line:37:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf11398 <line:46:16, col:31> 'int'
|           |       | `-BinaryOperator 0x5590ecf11370 <line:45:16, line:40:17> 'int' '+'
|           |       |   |-ParenExpr 0x5590ecf11330 <line:45:16, col:33> 'int'
|           |       |   | `-BinaryOperator 0x5590ecf11308 <line:44:17, line:42:18> 'int' '+'
|           |       |   |   |-IntegerLiteral 0x5590ecf112c8 <line:44:17> 'int' 0
|           |       |   |   `-IntegerLiteral 0x5590ecf112e8 <line:42:18> 'int' 6
|           |       |   `-IntegerLiteral 0x5590ecf11350 <line:40:17> 'int' 8
|           |       `-IntegerLiteral 0x5590ecf113b8 <line:37:17> 'int' 9
|           `-ParenExpr 0x5590ecf11608 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf115e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf115a0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf11580 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf11560 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf11538 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf114f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf114d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf114b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf11480 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf11518 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf115c0 <line:88:60> 'int' 0
`-ParenExpr 0x5590ecf18468 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf18440 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf18398 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf18420 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf183f8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf183b8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf183d8 <line:119:32> 'int' 1
((([B230.33]))) & ([B230.38])
   T: ([B230.39]) ? ... : ...
   Preds (1): B2
   Succs (2): B228 B229

 [B231]
   T: continue;
   Preds (4): B232 B233 B234 B235
   Succs (1): B1

 [B232]
   1: DeclRefExpr 0x5590ecf10cd0 <./lgc.h:87:2> 'void (lua_State *, GCObject *, GCObject *)' Function 0x5590eceb2830 'luaC_barrierf' 'void (lua_State *, GCObject *, GCObject *)'
luaC_barrierf
   2: ImplicitCastExpr 0x5590ecf10f98 <./lgc.h:87:2> 'void (*)(lua_State *, GCObject *, GCObject *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf10cd0 <col:2> 'void (lua_State *, GCObject *, GCObject *)' Function 0x5590eceb2830 'luaC_barrierf' 'void (lua_State *, GCObject *, GCObject *)'
[B232.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, GCObject *, GCObject *))
   3: DeclRefExpr 0x5590ecf10cf8 <lvm.c:454:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf10ff0 <lvm.c:454:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf10cf8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B232.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecf10d20 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
uv
   6: ImplicitCastExpr 0x5590ecf10dc8 <./llimits.h:75:26, col:30> 'UpVal *' <LValueToRValue>
`-ParenExpr 0x5590ecf10da8 <col:26, col:30> 'UpVal *' lvalue
  `-ParenExpr 0x5590ecf10d48 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
    `-DeclRefExpr 0x5590ecf10d20 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
(([B232.5])) (ImplicitCastExpr, LValueToRValue, UpVal *)
   7: CStyleCastExpr 0x5590ecf10de0 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x5590ecf10dc8 <col:26, col:30> 'UpVal *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10da8 <col:26, col:30> 'UpVal *' lvalue
    `-ParenExpr 0x5590ecf10d48 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
      `-DeclRefExpr 0x5590ecf10d20 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
(GCObject *)[B232.6] (CStyleCastExpr, BitCast, GCObject *)
   8: DeclRefExpr 0x5590ecf10e48 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   9: ImplicitCastExpr 0x5590ecf10e90 <./lobject.h:91:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf10e70 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf10e48 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B232.8]) (ImplicitCastExpr, LValueToRValue, StkId)
  10: MemberExpr 0x5590ecf10ea8 <./lobject.h:91:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf10e90 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10e70 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf10e48 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B232.9]->value
  11: MemberExpr 0x5590ecf10ee0 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf10ea8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf10e90 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf10e70 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf10e48 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B232.10].gc
  12: ImplicitCastExpr 0x5590ecf11008 <./llimits.h:63:25, col:27> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x5590ecf10f18 <col:25, col:27> 'GCObject *' lvalue
  `-MemberExpr 0x5590ecf10ee0 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
    `-MemberExpr 0x5590ecf10ea8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecf10e90 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecf10e70 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-DeclRefExpr 0x5590ecf10e48 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B232.11]) (ImplicitCastExpr, LValueToRValue, GCObject *)
  13: CallExpr 0x5590ecf10fb0 <./lgc.h:87:2, col:39> 'void'
|-ImplicitCastExpr 0x5590ecf10f98 <col:2> 'void (*)(lua_State *, GCObject *, GCObject *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf10cd0 <col:2> 'void (lua_State *, GCObject *, GCObject *)' Function 0x5590eceb2830 'luaC_barrierf' 'void (lua_State *, GCObject *, GCObject *)'
|-ImplicitCastExpr 0x5590ecf10ff0 <lvm.c:454:22> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf10cf8 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ParenExpr 0x5590ecf10e28 <./lstate.h:162:20, col:42> 'GCObject *'
| `-ParenExpr 0x5590ecf10e08 <./llimits.h:75:22, col:31> 'GCObject *'
|   `-CStyleCastExpr 0x5590ecf10de0 <col:23, col:30> 'GCObject *' <BitCast>
|     `-ImplicitCastExpr 0x5590ecf10dc8 <col:26, col:30> 'UpVal *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf10da8 <col:26, col:30> 'UpVal *' lvalue
|         `-ParenExpr 0x5590ecf10d48 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
|           `-DeclRefExpr 0x5590ecf10d20 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
`-ImplicitCastExpr 0x5590ecf11008 <./llimits.h:63:25, col:27> 'GCObject *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10f18 <col:25, col:27> 'GCObject *' lvalue
    `-MemberExpr 0x5590ecf10ee0 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecf10ea8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf10e90 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf10e70 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-DeclRefExpr 0x5590ecf10e48 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B232.2]([B232.4], (([B232.7])), [B232.12])
   Preds (1): B233
   Succs (1): B231

 [B233]
   1: DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
uv
   2: ImplicitCastExpr 0x5590ecf10a38 <./llimits.h:75:26, col:30> 'UpVal *' <LValueToRValue>
`-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
  `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
    `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
(([B233.1])) (ImplicitCastExpr, LValueToRValue, UpVal *)
   3: CStyleCastExpr 0x5590ecf10a50 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x5590ecf10a38 <col:26, col:30> 'UpVal *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
    `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
      `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
(GCObject *)[B233.2] (CStyleCastExpr, BitCast, GCObject *)
   4: MemberExpr 0x5590ecf10ad8 <./lgc.h:66:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
`-ParenExpr 0x5590ecf10ab8 <col:33, col:35> 'GCObject *'
  `-ParenExpr 0x5590ecf10a98 <./lstate.h:162:20, col:42> 'GCObject *'
    `-ParenExpr 0x5590ecf10a78 <./llimits.h:75:22, col:31> 'GCObject *'
      `-CStyleCastExpr 0x5590ecf10a50 <col:23, col:30> 'GCObject *' <BitCast>
        `-ImplicitCastExpr 0x5590ecf10a38 <col:26, col:30> 'UpVal *' <LValueToRValue>
          `-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
            `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
              `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
((([B233.3])))->gch
   5: MemberExpr 0x5590ecf10b10 <./lgc.h:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
`-MemberExpr 0x5590ecf10ad8 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
  `-ParenExpr 0x5590ecf10ab8 <col:33, col:35> 'GCObject *'
    `-ParenExpr 0x5590ecf10a98 <./lstate.h:162:20, col:42> 'GCObject *'
      `-ParenExpr 0x5590ecf10a78 <./llimits.h:75:22, col:31> 'GCObject *'
        `-CStyleCastExpr 0x5590ecf10a50 <col:23, col:30> 'GCObject *' <BitCast>
          `-ImplicitCastExpr 0x5590ecf10a38 <col:26, col:30> 'UpVal *' <LValueToRValue>
            `-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
              `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
                `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
[B233.4].marked
   6: ImplicitCastExpr 0x5590ecf10c30 <./lgc.h:29:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-ParenExpr 0x5590ecf10b48 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
  `-MemberExpr 0x5590ecf10b10 <line:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
    `-MemberExpr 0x5590ecf10ad8 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
      `-ParenExpr 0x5590ecf10ab8 <col:33, col:35> 'GCObject *'
        `-ParenExpr 0x5590ecf10a98 <./lstate.h:162:20, col:42> 'GCObject *'
          `-ParenExpr 0x5590ecf10a78 <./llimits.h:75:22, col:31> 'GCObject *'
            `-CStyleCastExpr 0x5590ecf10a50 <col:23, col:30> 'GCObject *' <BitCast>
              `-ImplicitCastExpr 0x5590ecf10a38 <col:26, col:30> 'UpVal *' <LValueToRValue>
                `-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
                  `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
                    `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
([B233.5]) (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x5590ecf10c48 <./lgc.h:29:24, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf10c30 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ParenExpr 0x5590ecf10b48 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
    `-MemberExpr 0x5590ecf10b10 <line:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
      `-MemberExpr 0x5590ecf10ad8 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
        `-ParenExpr 0x5590ecf10ab8 <col:33, col:35> 'GCObject *'
          `-ParenExpr 0x5590ecf10a98 <./lstate.h:162:20, col:42> 'GCObject *'
            `-ParenExpr 0x5590ecf10a78 <./llimits.h:75:22, col:31> 'GCObject *'
              `-CStyleCastExpr 0x5590ecf10a50 <col:23, col:30> 'GCObject *' <BitCast>
                `-ImplicitCastExpr 0x5590ecf10a38 <col:26, col:30> 'UpVal *' <LValueToRValue>
                  `-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
                    `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
                      `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
[B233.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x5590ecf10b68 <./lgc.h:30:21> 'int' 1
1
   9: IntegerLiteral 0x5590ecf10b88 <./lgc.h:56:18> 'int' 2
2
  10: BinaryOperator 0x5590ecf10bc8 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x5590ecf10b68 <col:21> 'int' 1
`-ParenExpr 0x5590ecf10ba8 <col:24, col:26> 'int'
  `-IntegerLiteral 0x5590ecf10b88 <line:56:18> 'int' 2
[B233.8] << ([B233.9])
  11: BinaryOperator 0x5590ecf10c60 <./lgc.h:29:24, col:32> 'int' '&'
|-ImplicitCastExpr 0x5590ecf10c48 <col:24, col:26> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecf10c30 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ParenExpr 0x5590ecf10b48 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
|     `-MemberExpr 0x5590ecf10b10 <line:66:33, col:42> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
|       `-MemberExpr 0x5590ecf10ad8 <col:33, col:38> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
|         `-ParenExpr 0x5590ecf10ab8 <col:33, col:35> 'GCObject *'
|           `-ParenExpr 0x5590ecf10a98 <./lstate.h:162:20, col:42> 'GCObject *'
|             `-ParenExpr 0x5590ecf10a78 <./llimits.h:75:22, col:31> 'GCObject *'
|               `-CStyleCastExpr 0x5590ecf10a50 <col:23, col:30> 'GCObject *' <BitCast>
|                 `-ImplicitCastExpr 0x5590ecf10a38 <col:26, col:30> 'UpVal *' <LValueToRValue>
|                   `-ParenExpr 0x5590ecf10a18 <col:26, col:30> 'UpVal *' lvalue
|                     `-ParenExpr 0x5590ecf109b8 <./lstate.h:162:38, col:40> 'UpVal *' lvalue
|                       `-DeclRefExpr 0x5590ecf10990 <lvm.c:454:25> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
`-ParenExpr 0x5590ecf10c10 <./lgc.h:29:30, col:32> 'int'
  `-ParenExpr 0x5590ecf10bf0 <line:30:20, col:27> 'int'
    `-BinaryOperator 0x5590ecf10bc8 <col:21, col:26> 'int' '<<'
      |-IntegerLiteral 0x5590ecf10b68 <col:21> 'int' 1
      `-ParenExpr 0x5590ecf10ba8 <col:24, col:26> 'int'
        `-IntegerLiteral 0x5590ecf10b88 <line:56:18> 'int' 2
[B233.7] & (([B233.10]))
   T: if (([B235.60]) && ([B234.17])) && ([B233.11])
   Preds (1): B234
   Succs (2): B232 B231

 [B234]
   1: DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf10588 <./lobject.h:91:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B234.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: MemberExpr 0x5590ecf105a0 <./lobject.h:91:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B234.2]->value
   4: MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B234.3].gc
   5: ImplicitCastExpr 0x5590ecf10650 <./lgc.h:65:35, col:37> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x5590ecf10630 <col:35, col:37> 'GCObject *' lvalue
  `-ParenExpr 0x5590ecf10610 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
    `-MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
(([B234.4])) (ImplicitCastExpr, LValueToRValue, GCObject *)
   6: MemberExpr 0x5590ecf10668 <./lgc.h:65:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
`-ImplicitCastExpr 0x5590ecf10650 <col:35, col:37> 'GCObject *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10630 <col:35, col:37> 'GCObject *' lvalue
    `-ParenExpr 0x5590ecf10610 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
      `-MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
        `-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
          `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
            `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
              `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B234.5]->gch
   7: MemberExpr 0x5590ecf106a0 <./lgc.h:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
`-MemberExpr 0x5590ecf10668 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
  `-ImplicitCastExpr 0x5590ecf10650 <col:35, col:37> 'GCObject *' <LValueToRValue>
    `-ParenExpr 0x5590ecf10630 <col:35, col:37> 'GCObject *' lvalue
      `-ParenExpr 0x5590ecf10610 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
        `-MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
          `-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
            `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
              `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
                `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B234.6].marked
   8: ImplicitCastExpr 0x5590ecf108d0 <./lgc.h:29:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-ParenExpr 0x5590ecf106d8 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
  `-MemberExpr 0x5590ecf106a0 <line:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
    `-MemberExpr 0x5590ecf10668 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
      `-ImplicitCastExpr 0x5590ecf10650 <col:35, col:37> 'GCObject *' <LValueToRValue>
        `-ParenExpr 0x5590ecf10630 <col:35, col:37> 'GCObject *' lvalue
          `-ParenExpr 0x5590ecf10610 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
            `-MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
              `-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
                `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B234.7]) (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x5590ecf108e8 <./lgc.h:29:24, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecf108d0 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ParenExpr 0x5590ecf106d8 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
    `-MemberExpr 0x5590ecf106a0 <line:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
      `-MemberExpr 0x5590ecf10668 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
        `-ImplicitCastExpr 0x5590ecf10650 <col:35, col:37> 'GCObject *' <LValueToRValue>
          `-ParenExpr 0x5590ecf10630 <col:35, col:37> 'GCObject *' lvalue
            `-ParenExpr 0x5590ecf10610 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
              `-MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
                `-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
                  `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                    `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
                      `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B234.8] (ImplicitCastExpr, IntegralCast, int)
  10: IntegerLiteral 0x5590ecf106f8 <./lgc.h:30:21> 'int' 1
1
  11: IntegerLiteral 0x5590ecf10718 <./lgc.h:54:19> 'int' 0
0
  12: BinaryOperator 0x5590ecf10758 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x5590ecf106f8 <col:21> 'int' 1
`-ParenExpr 0x5590ecf10738 <col:24, col:26> 'int'
  `-IntegerLiteral 0x5590ecf10718 <line:54:19> 'int' 0
[B234.10] << ([B234.11])
  13: IntegerLiteral 0x5590ecf107a0 <./lgc.h:30:21> 'int' 1
1
  14: IntegerLiteral 0x5590ecf107c0 <./lgc.h:55:19> 'int' 1
1
  15: BinaryOperator 0x5590ecf10800 <./lgc.h:30:21, col:26> 'int' '<<'
|-IntegerLiteral 0x5590ecf107a0 <col:21> 'int' 1
`-ParenExpr 0x5590ecf107e0 <col:24, col:26> 'int'
  `-IntegerLiteral 0x5590ecf107c0 <line:55:19> 'int' 1
[B234.13] << ([B234.14])
  16: BinaryOperator 0x5590ecf10848 <./lgc.h:30:20, col:27> 'int' '|'
|-ParenExpr 0x5590ecf10780 <col:20, col:27> 'int'
| `-BinaryOperator 0x5590ecf10758 <col:21, col:26> 'int' '<<'
|   |-IntegerLiteral 0x5590ecf106f8 <col:21> 'int' 1
|   `-ParenExpr 0x5590ecf10738 <col:24, col:26> 'int'
|     `-IntegerLiteral 0x5590ecf10718 <line:54:19> 'int' 0
`-ParenExpr 0x5590ecf10828 <line:30:20, col:27> 'int'
  `-BinaryOperator 0x5590ecf10800 <col:21, col:26> 'int' '<<'
    |-IntegerLiteral 0x5590ecf107a0 <col:21> 'int' 1
    `-ParenExpr 0x5590ecf107e0 <col:24, col:26> 'int'
      `-IntegerLiteral 0x5590ecf107c0 <line:55:19> 'int' 1
([B234.12]) | ([B234.15])
  17: BinaryOperator 0x5590ecf10900 <./lgc.h:29:24, col:32> 'int' '&'
|-ImplicitCastExpr 0x5590ecf108e8 <col:24, col:26> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecf108d0 <col:24, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ParenExpr 0x5590ecf106d8 <col:24, col:26> 'lu_byte':'unsigned char' lvalue
|     `-MemberExpr 0x5590ecf106a0 <line:65:35, col:44> 'lu_byte':'unsigned char' lvalue .marked 0x5590ece768d8
|       `-MemberExpr 0x5590ecf10668 <col:35, col:40> 'GCheader':'struct GCheader' lvalue ->gch 0x5590ecea3700
|         `-ImplicitCastExpr 0x5590ecf10650 <col:35, col:37> 'GCObject *' <LValueToRValue>
|           `-ParenExpr 0x5590ecf10630 <col:35, col:37> 'GCObject *' lvalue
|             `-ParenExpr 0x5590ecf10610 <./llimits.h:63:25, col:27> 'GCObject *' lvalue
|               `-MemberExpr 0x5590ecf105d8 <./lobject.h:91:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
|                 `-MemberExpr 0x5590ecf105a0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
|                   `-ImplicitCastExpr 0x5590ecf10588 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
|                     `-ParenExpr 0x5590ecf10568 <col:48, col:50> 'StkId':'TValue *' lvalue
|                       `-DeclRefExpr 0x5590ecf10540 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf108b0 <./lgc.h:29:30, col:32> 'int'
  `-ParenExpr 0x5590ecf10890 <line:37:40, col:57> 'int'
    `-ParenExpr 0x5590ecf10870 <line:31:25, col:51> 'int'
      `-BinaryOperator 0x5590ecf10848 <line:30:20, col:27> 'int' '|'
        |-ParenExpr 0x5590ecf10780 <col:20, col:27> 'int'
        | `-BinaryOperator 0x5590ecf10758 <col:21, col:26> 'int' '<<'
        |   |-IntegerLiteral 0x5590ecf106f8 <col:21> 'int' 1
        |   `-ParenExpr 0x5590ecf10738 <col:24, col:26> 'int'
        |     `-IntegerLiteral 0x5590ecf10718 <line:54:19> 'int' 0
        `-ParenExpr 0x5590ecf10828 <line:30:20, col:27> 'int'
          `-BinaryOperator 0x5590ecf10800 <col:21, col:26> 'int' '<<'
            |-IntegerLiteral 0x5590ecf107a0 <col:21> 'int' 1
            `-ParenExpr 0x5590ecf107e0 <col:24, col:26> 'int'
              `-IntegerLiteral 0x5590ecf107c0 <line:55:19> 'int' 1
[B234.9] & ((([B234.16])))
   T: (([B235.60]) && ([B234.17])) && ...
   Preds (1): B235
   Succs (2): B233 B231

 [B235]
  case OP_SETUPVAL:
   1: DeclRefExpr 0x5590ecf0f928 <lvm.c:452:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
   2: ImplicitCastExpr 0x5590ecf0f950 <lvm.c:452:21> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0f928 <col:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B235.1] (ImplicitCastExpr, LValueToRValue, LClosure *)
   3: MemberExpr 0x5590ecf0f968 <lvm.c:452:21, col:25> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
`-ImplicitCastExpr 0x5590ecf0f950 <col:21> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0f928 <col:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B235.2]->upvals
   4: ImplicitCastExpr 0x5590ecf0fe40 <lvm.c:452:21, col:25> 'UpVal **' <ArrayToPointerDecay>
`-MemberExpr 0x5590ecf0f968 <col:21, col:25> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
  `-ImplicitCastExpr 0x5590ecf0f950 <col:21> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf0f928 <col:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B235.3] (ImplicitCastExpr, ArrayToPointerDecay, UpVal **)
   5: DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   6: ImplicitCastExpr 0x5590ecf0fb40 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B235.5]) (ImplicitCastExpr, LValueToRValue, Instruction)
   7: IntegerLiteral 0x5590ecf0f9e8 <./lopcodes.h:44:17> 'int' 0
0
   8: IntegerLiteral 0x5590ecf0fa08 <./lopcodes.h:42:18> 'int' 6
6
   9: BinaryOperator 0x5590ecf0fa28 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
[B235.7] + [B235.8]
  10: IntegerLiteral 0x5590ecf0fa70 <./lopcodes.h:40:17> 'int' 8
8
  11: BinaryOperator 0x5590ecf0fa90 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
([B235.9]) + [B235.10]
  12: IntegerLiteral 0x5590ecf0fad8 <./lopcodes.h:37:17> 'int' 9
9
  13: BinaryOperator 0x5590ecf0faf8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
([B235.11]) + [B235.12]
  14: BinaryOperator 0x5590ecf0fb58 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf0fb40 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf0fb20 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf0faf8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
[B235.6] >> ([B235.13])
  15: IntegerLiteral 0x5590ecf0fba0 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x5590ecf0fbd0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
(Instruction)[B235.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x5590ecf0fbf8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
~[B235.16]
  18: IntegerLiteral 0x5590ecf0fc38 <./lopcodes.h:38:17> 'int' 9
9
  19: BinaryOperator 0x5590ecf0fc58 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
([B235.17]) << [B235.18]
  20: UnaryOperator 0x5590ecf0fca0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
~([B235.19])
  21: IntegerLiteral 0x5590ecf0fce0 <./lopcodes.h:88:60> 'int' 0
0
  22: BinaryOperator 0x5590ecf0fd00 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0fcc0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0fca0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf0fce0 <line:88:60> 'int' 0
([B235.20]) << [B235.21]
  23: BinaryOperator 0x5590ecf0fd48 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf0fb80 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf0fb58 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf0fb40 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf0fb20 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf0faf8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf0fd28 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0fd00 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0fcc0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0fca0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0fce0 <line:88:60> 'int' 0
([B235.14]) & ([B235.22])
  24: CStyleCastExpr 0x5590ecf0fdd8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf0fdb8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf0fd48 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf0fb80 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf0fb58 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf0fb40 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf0fb20 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf0faf8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf0fd28 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf0fd00 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf0fcc0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf0fca0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0fce0 <line:88:60> 'int' 0
(int)([B235.23]) (CStyleCastExpr, IntegralCast, int)
  25: ArraySubscriptExpr 0x5590ecf0fe58 <lvm.c:452:21, col:43> 'UpVal *' lvalue
|-ImplicitCastExpr 0x5590ecf0fe40 <col:21, col:25> 'UpVal **' <ArrayToPointerDecay>
| `-MemberExpr 0x5590ecf0f968 <col:21, col:25> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
|   `-ImplicitCastExpr 0x5590ecf0f950 <col:21> 'LClosure *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf0f928 <col:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
`-ParenExpr 0x5590ecf0fe20 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf0fe00 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf0fdd8 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf0fdb8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf0fd48 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf0fb80 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf0fb58 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf0fb40 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf0fb20 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf0faf8 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf0fd28 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf0fd00 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf0fcc0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf0fca0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf0fce0 <line:88:60> 'int' 0
[B235.4][(([B235.24]))]
  26: ImplicitCastExpr 0x5590ecf0fe80 <lvm.c:452:21, col:43> 'UpVal *' <LValueToRValue>
`-ArraySubscriptExpr 0x5590ecf0fe58 <col:21, col:43> 'UpVal *' lvalue
  |-ImplicitCastExpr 0x5590ecf0fe40 <col:21, col:25> 'UpVal **' <ArrayToPointerDecay>
  | `-MemberExpr 0x5590ecf0f968 <col:21, col:25> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
  |   `-ImplicitCastExpr 0x5590ecf0f950 <col:21> 'LClosure *' <LValueToRValue>
  |     `-DeclRefExpr 0x5590ecf0f928 <col:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
  `-ParenExpr 0x5590ecf0fe20 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf0fe00 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf0fdd8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf0fdb8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf0fd48 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf0fb80 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf0fb58 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf0fb40 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf0fb20 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf0faf8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf0fd28 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf0fd00 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf0fcc0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf0fca0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf0fce0 <line:88:60> 'int' 0
[B235.25] (ImplicitCastExpr, LValueToRValue, UpVal *)
  27: DeclStmt 0x5590ecf0fe98 <lvm.c:452:9, col:44>col:16
`-VarDecl 0x5590ecf0f8c8 <col:9, col:43> col:16 used uv 'UpVal *' cinit
  `-ImplicitCastExpr 0x5590ecf0fe80 <col:21, col:43> 'UpVal *' <LValueToRValue>
    `-ArraySubscriptExpr 0x5590ecf0fe58 <col:21, col:43> 'UpVal *' lvalue
      |-ImplicitCastExpr 0x5590ecf0fe40 <col:21, col:25> 'UpVal **' <ArrayToPointerDecay>
      | `-MemberExpr 0x5590ecf0f968 <col:21, col:25> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
      |   `-ImplicitCastExpr 0x5590ecf0f950 <col:21> 'LClosure *' <LValueToRValue>
      |     `-DeclRefExpr 0x5590ecf0f928 <col:21> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
      `-ParenExpr 0x5590ecf0fe20 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf0fe00 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf0fdd8 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf0fdb8 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf0fd48 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf0fb80 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf0fb58 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf0fb40 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf0f9c8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf0f9a0 <lvm.c:452:41> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf0fb20 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf0faf8 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf0fab8 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf0fa90 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf0fa50 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf0fa28 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf0f9e8 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf0fa08 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf0fa70 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf0fad8 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf0fd28 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf0fd00 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf0fcc0 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf0fca0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf0fc80 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf0fc58 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf0fc18 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf0fbf8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf0fbd0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf0fba0 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf0fc38 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf0fce0 <line:88:60> 'int' 0
UpVal *uv = cl->upvals[(((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))];
  28: DeclRefExpr 0x5590ecf0ff20 <lvm.c:453:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  29: ImplicitCastExpr 0x5590ecf0ff68 <./lobject.h:162:22, col:27> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf0ff48 <col:22, col:27> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf0ff20 <lvm.c:453:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B235.28]) (ImplicitCastExpr, LValueToRValue, StkId)
  30: ImplicitCastExpr 0x5590ecf0ff80 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf0ff68 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf0ff48 <col:22, col:27> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf0ff20 <lvm.c:453:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B235.29] (ImplicitCastExpr, BitCast, const TValue *)
  31: DeclStmt 0x5590ecf0ff98 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf0fec0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf0ff80 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf0ff68 <col:22, col:27> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf0ff48 <col:22, col:27> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf0ff20 <lvm.c:453:26> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
const TValue *o2 = (ra);
  32: DeclRefExpr 0x5590ecf10020 <lvm.c:453:19> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
uv
  33: ImplicitCastExpr 0x5590ecf10048 <lvm.c:453:19> 'UpVal *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf10020 <col:19> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
[B235.32] (ImplicitCastExpr, LValueToRValue, UpVal *)
  34: MemberExpr 0x5590ecf10060 <lvm.c:453:19, col:23> 'TValue *' lvalue ->v 0x5590ece8d428
`-ImplicitCastExpr 0x5590ecf10048 <col:19> 'UpVal *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf10020 <col:19> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
[B235.33]->v
  35: ImplicitCastExpr 0x5590ecf100b8 <./lobject.h:162:41, col:46> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf10098 <col:41, col:46> 'TValue *' lvalue
  `-MemberExpr 0x5590ecf10060 <lvm.c:453:19, col:23> 'TValue *' lvalue ->v 0x5590ece8d428
    `-ImplicitCastExpr 0x5590ecf10048 <col:19> 'UpVal *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf10020 <col:19> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
([B235.34]) (ImplicitCastExpr, LValueToRValue, TValue *)
  36: DeclStmt 0x5590ecf100d0 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf0ffc0 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf100b8 <col:41, col:46> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf10098 <col:41, col:46> 'TValue *' lvalue
      `-MemberExpr 0x5590ecf10060 <lvm.c:453:19, col:23> 'TValue *' lvalue ->v 0x5590ece8d428
        `-ImplicitCastExpr 0x5590ecf10048 <col:19> 'UpVal *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf10020 <col:19> 'UpVal *' lvalue Var 0x5590ecf0f8c8 'uv' 'UpVal *'
TValue *o1 = (uv->v);
  37: DeclRefExpr 0x5590ecf10160 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
o2
  38: ImplicitCastExpr 0x5590ecf10188 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf10160 <col:17> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.37] (ImplicitCastExpr, LValueToRValue, const TValue *)
  39: MemberExpr 0x5590ecf101a0 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf10188 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf10160 <col:17> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.38]->value
  40: ImplicitCastExpr 0x5590ecf101d8 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf101a0 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf10188 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf10160 <col:17> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.39] (ImplicitCastExpr, LValueToRValue, Value)
  41: DeclRefExpr 0x5590ecf100e8 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
o1
  42: ImplicitCastExpr 0x5590ecf10110 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf100e8 <col:5> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
[B235.41] (ImplicitCastExpr, LValueToRValue, TValue *)
  43: MemberExpr 0x5590ecf10128 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf10110 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf100e8 <col:5> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
[B235.42]->value
  44: BinaryOperator 0x5590ecf101f0 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf10128 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf10110 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf100e8 <col:5> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf101d8 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf101a0 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf10188 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf10160 <col:17> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.43] = [B235.40]
  45: DeclRefExpr 0x5590ecf10290 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
o2
  46: ImplicitCastExpr 0x5590ecf102b8 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf10290 <col:35> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.45] (ImplicitCastExpr, LValueToRValue, const TValue *)
  47: MemberExpr 0x5590ecf102d0 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf102b8 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf10290 <col:35> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.46]->tt
  48: ImplicitCastExpr 0x5590ecf10308 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf102d0 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf102b8 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf10290 <col:35> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.47] (ImplicitCastExpr, LValueToRValue, int)
  49: DeclRefExpr 0x5590ecf10218 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
o1
  50: ImplicitCastExpr 0x5590ecf10240 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf10218 <col:28> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
[B235.49] (ImplicitCastExpr, LValueToRValue, TValue *)
  51: MemberExpr 0x5590ecf10258 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf10240 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf10218 <col:28> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
[B235.50]->tt
  52: BinaryOperator 0x5590ecf10320 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf10258 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf10240 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf10218 <col:28> 'TValue *' lvalue Var 0x5590ecf0ffc0 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf10308 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf102d0 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf102b8 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf10290 <col:35> 'const TValue *' lvalue Var 0x5590ecf0fec0 'o2' 'const TValue *'
[B235.51] = [B235.48]
  53: IntegerLiteral 0x5590ecf10348 <./llimits.h:62:31> 'int' 0
0
  54: CStyleCastExpr 0x5590ecf10378 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf10348 <col:31> 'int' 0
(void)[B235.53] (CStyleCastExpr, ToVoid, void)
  55: DeclRefExpr 0x5590ecf10408 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  56: ImplicitCastExpr 0x5590ecf10450 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf10430 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf10408 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B235.55]) (ImplicitCastExpr, LValueToRValue, StkId)
  57: MemberExpr 0x5590ecf10468 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf10450 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf10430 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-DeclRefExpr 0x5590ecf10408 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B235.56]->tt
  58: ImplicitCastExpr 0x5590ecf104e0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ecf104a0 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x5590ecf10468 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf10450 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf10430 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-DeclRefExpr 0x5590ecf10408 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B235.57]) (ImplicitCastExpr, LValueToRValue, int)
  59: IntegerLiteral 0x5590ecf104c0 <./lua.h:78:22> 'int' 4
4
  60: BinaryOperator 0x5590ecf104f8 <./lobject.h:90:18, ./lua.h:78:22> 'int' '>='
|-ImplicitCastExpr 0x5590ecf104e0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ecf104a0 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x5590ecf10468 <col:19, col:24> 'int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ecf10450 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ecf10430 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-DeclRefExpr 0x5590ecf10408 <lvm.c:454:29> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
`-IntegerLiteral 0x5590ecf104c0 <./lua.h:78:22> 'int' 4
[B235.58] >= [B235.59]
   T: ([B235.60]) && ...
   Preds (1): B2
   Succs (2): B234 B231

 [B236]
  case OP_SETGLOBAL:
   1: DeclStmt 0x5590ecf0da08 <lvm.c:445:9, col:17>col:16
`-VarDecl 0x5590ecf0d9a8 <col:9, col:16> col:16 used g 'TValue':'struct lua_TValue'
TValue g;
   2: DeclRefExpr 0x5590ecf0da90 <lvm.c:446:23> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
g
   3: UnaryOperator 0x5590ecf0dab8 <lvm.c:446:22, col:23> 'TValue *' prefix '&'
`-DeclRefExpr 0x5590ecf0da90 <col:23> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
&[B236.2]
   4: DeclStmt 0x5590ecf0daf8 <./lobject.h:149:5, col:22>col:13
`-VarDecl 0x5590ecf0da30 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ParenExpr 0x5590ecf0dad8 <col:17, col:21> 'TValue *'
    `-UnaryOperator 0x5590ecf0dab8 <lvm.c:446:22, col:23> 'TValue *' prefix '&'
      `-DeclRefExpr 0x5590ecf0da90 <col:23> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
TValue *i_o = (&g);
   5: DeclRefExpr 0x5590ecf0dbc0 <lvm.c:446:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
   6: ImplicitCastExpr 0x5590ecf0dbe8 <lvm.c:446:26> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0dbc0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B236.5] (ImplicitCastExpr, LValueToRValue, LClosure *)
   7: MemberExpr 0x5590ecf0dc00 <lvm.c:446:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
`-ImplicitCastExpr 0x5590ecf0dbe8 <col:26> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0dbc0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B236.6]->env
   8: ImplicitCastExpr 0x5590ecf0dcb8 <./llimits.h:75:26, col:30> 'struct Table *' <LValueToRValue>
`-ParenExpr 0x5590ecf0dc98 <col:26, col:30> 'struct Table *' lvalue
  `-ParenExpr 0x5590ecf0dc38 <./lobject.h:150:36, col:38> 'struct Table *' lvalue
    `-MemberExpr 0x5590ecf0dc00 <lvm.c:446:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
      `-ImplicitCastExpr 0x5590ecf0dbe8 <col:26> 'LClosure *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf0dbc0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
(([B236.7])) (ImplicitCastExpr, LValueToRValue, struct Table *)
   9: CStyleCastExpr 0x5590ecf0dcd0 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x5590ecf0dcb8 <col:26, col:30> 'struct Table *' <LValueToRValue>
  `-ParenExpr 0x5590ecf0dc98 <col:26, col:30> 'struct Table *' lvalue
    `-ParenExpr 0x5590ecf0dc38 <./lobject.h:150:36, col:38> 'struct Table *' lvalue
      `-MemberExpr 0x5590ecf0dc00 <lvm.c:446:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
        `-ImplicitCastExpr 0x5590ecf0dbe8 <col:26> 'LClosure *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf0dbc0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
(GCObject *)[B236.8] (CStyleCastExpr, BitCast, GCObject *)
  10: DeclRefExpr 0x5590ecf0db10 <./lobject.h:150:5> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
i_o
  11: ImplicitCastExpr 0x5590ecf0db38 <./lobject.h:150:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0db10 <col:5> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
[B236.10] (ImplicitCastExpr, LValueToRValue, TValue *)
  12: MemberExpr 0x5590ecf0db50 <./lobject.h:150:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf0db38 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0db10 <col:5> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
[B236.11]->value
  13: MemberExpr 0x5590ecf0db88 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf0db50 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf0db38 <col:5> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf0db10 <col:5> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
[B236.12].gc
  14: BinaryOperator 0x5590ecf0dd18 <./lobject.h:150:5, ./llimits.h:75:31> 'GCObject *' '='
|-MemberExpr 0x5590ecf0db88 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
| `-MemberExpr 0x5590ecf0db50 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf0db38 <col:5> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf0db10 <col:5> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf0dcf8 <./llimits.h:75:22, col:31> 'GCObject *'
  `-CStyleCastExpr 0x5590ecf0dcd0 <col:23, col:30> 'GCObject *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf0dcb8 <col:26, col:30> 'struct Table *' <LValueToRValue>
      `-ParenExpr 0x5590ecf0dc98 <col:26, col:30> 'struct Table *' lvalue
        `-ParenExpr 0x5590ecf0dc38 <./lobject.h:150:36, col:38> 'struct Table *' lvalue
          `-MemberExpr 0x5590ecf0dc00 <lvm.c:446:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
            `-ImplicitCastExpr 0x5590ecf0dbe8 <col:26> 'LClosure *' <LValueToRValue>
              `-DeclRefExpr 0x5590ecf0dbc0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B236.13] = ([B236.9])
  15: IntegerLiteral 0x5590ecf0ddb8 <./lua.h:79:21> 'int' 5
5
  16: DeclRefExpr 0x5590ecf0dd40 <./lobject.h:150:42> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
i_o
  17: ImplicitCastExpr 0x5590ecf0dd68 <./lobject.h:150:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0dd40 <col:42> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
[B236.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: MemberExpr 0x5590ecf0dd80 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf0dd68 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0dd40 <col:42> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
[B236.17]->tt
  19: BinaryOperator 0x5590ecf0ddd8 <./lobject.h:150:42, ./lua.h:79:21> 'int' '='
|-MemberExpr 0x5590ecf0dd80 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf0dd68 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf0dd40 <col:42> 'TValue *' lvalue Var 0x5590ecf0da30 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf0ddb8 <./lua.h:79:21> 'int' 5
[B236.18] = [B236.15]
  20: IntegerLiteral 0x5590ecf0de00 <./llimits.h:62:31> 'int' 0
0
  21: CStyleCastExpr 0x5590ecf0de30 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf0de00 <col:31> 'int' 0
(void)[B236.20] (CStyleCastExpr, ToVoid, void)
  22: IntegerLiteral 0x5590ecf0deb8 <./llimits.h:62:31> 'int' 0
0
  23: CStyleCastExpr 0x5590ecf0dee8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf0deb8 <col:31> 'int' 0
(void)[B236.22] (CStyleCastExpr, ToVoid, void)
  24: DeclRefExpr 0x5590ecf0dfa8 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  25: ImplicitCastExpr 0x5590ecf0dfd0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0dfa8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B236.24] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  26: DeclRefExpr 0x5590ecf0df30 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  27: ImplicitCastExpr 0x5590ecf0df58 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0df30 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.26] (ImplicitCastExpr, LValueToRValue, lua_State *)
  28: MemberExpr 0x5590ecf0df70 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf0df58 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0df30 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.27]->savedpc
  29: BinaryOperator 0x5590ecf0dfe8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf0df70 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf0df58 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf0df30 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf0dfd0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0dfa8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B236.28] = [B236.25]
  30: DeclRefExpr 0x5590ecf0e010 <lvm.c:448:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedfeb8 'luaV_settable' 'void (lua_State *, const TValue *, TValue *, StkId)'
luaV_settable
  31: ImplicitCastExpr 0x5590ecf0e5f8 <lvm.c:448:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf0e010 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedfeb8 'luaV_settable' 'void (lua_State *, const TValue *, TValue *, StkId)'
[B236.30] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, TValue *, StkId))
  32: DeclRefExpr 0x5590ecf0e038 <lvm.c:448:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  33: ImplicitCastExpr 0x5590ecf0f678 <lvm.c:448:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0e038 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.32] (ImplicitCastExpr, LValueToRValue, lua_State *)
  34: DeclRefExpr 0x5590ecf0e060 <lvm.c:448:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
g
  35: UnaryOperator 0x5590ecf0e088 <lvm.c:448:34, col:35> 'TValue *' prefix '&'
`-DeclRefExpr 0x5590ecf0e060 <col:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
&[B236.34]
  36: ImplicitCastExpr 0x5590ecf0f690 <lvm.c:448:34, col:35> 'const TValue *' <BitCast>
`-UnaryOperator 0x5590ecf0e088 <col:34, col:35> 'TValue *' prefix '&'
  `-DeclRefExpr 0x5590ecf0e060 <col:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
[B236.35] (ImplicitCastExpr, BitCast, const TValue *)
  37: DeclRefExpr 0x5590ecf0e0a8 <lvm.c:355:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
  38: ImplicitCastExpr 0x5590ecf0e570 <lvm.c:355:61> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0e0a8 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B236.37] (ImplicitCastExpr, LValueToRValue, TValue *)
  39: DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  40: ImplicitCastExpr 0x5590ecf0e208 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf0e0f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B236.39]) (ImplicitCastExpr, LValueToRValue, Instruction)
  41: IntegerLiteral 0x5590ecf0e118 <./lopcodes.h:44:17> 'int' 0
0
  42: IntegerLiteral 0x5590ecf0e138 <./lopcodes.h:42:18> 'int' 6
6
  43: BinaryOperator 0x5590ecf0e158 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
[B236.41] + [B236.42]
  44: IntegerLiteral 0x5590ecf0e1a0 <./lopcodes.h:40:17> 'int' 8
8
  45: BinaryOperator 0x5590ecf0e1c0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf0e180 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf0e158 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf0e1a0 <line:40:17> 'int' 8
([B236.43]) + [B236.44]
  46: BinaryOperator 0x5590ecf0e220 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf0e208 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf0e0f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf0e1e8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf0e1c0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf0e180 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf0e158 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf0e1a0 <line:40:17> 'int' 8
[B236.40] >> ([B236.45])
  47: IntegerLiteral 0x5590ecf0e268 <./lopcodes.h:71:39> 'int' 0
0
  48: CStyleCastExpr 0x5590ecf0e298 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
(Instruction)[B236.47] (CStyleCastExpr, IntegralCast, Instruction)
  49: UnaryOperator 0x5590ecf0e2c0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
~[B236.48]
  50: IntegerLiteral 0x5590ecf0e300 <./lopcodes.h:37:17> 'int' 9
9
  51: IntegerLiteral 0x5590ecf0e320 <./lopcodes.h:38:17> 'int' 9
9
  52: BinaryOperator 0x5590ecf0e340 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
[B236.50] + [B236.51]
  53: BinaryOperator 0x5590ecf0e388 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
`-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
([B236.49]) << ([B236.52])
  54: UnaryOperator 0x5590ecf0e3d0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf0e3b0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0e388 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
~([B236.53])
  55: IntegerLiteral 0x5590ecf0e410 <./lopcodes.h:96:63> 'int' 0
0
  56: BinaryOperator 0x5590ecf0e430 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0e3f0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0e3d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf0e3b0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf0e388 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf0e410 <line:96:63> 'int' 0
([B236.54]) << [B236.55]
  57: BinaryOperator 0x5590ecf0e478 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf0e248 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf0e220 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf0e208 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf0e0f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf0e1e8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf0e1c0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf0e180 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf0e158 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf0e1a0 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf0e458 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0e430 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0e3f0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0e3d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf0e3b0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf0e388 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0e410 <line:96:63> 'int' 0
([B236.46]) & ([B236.56])
  58: CStyleCastExpr 0x5590ecf0e508 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf0e4e8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf0e478 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf0e248 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf0e220 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf0e208 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf0e0f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf0e1e8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf0e1c0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf0e180 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf0e158 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf0e1a0 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf0e458 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf0e430 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf0e3f0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf0e3d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf0e3b0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf0e388 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0e410 <line:96:63> 'int' 0
(int)([B236.57]) (CStyleCastExpr, IntegralCast, int)
  59: BinaryOperator 0x5590ecf0e588 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf0e570 <lvm.c:355:61> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf0e0a8 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf0e550 <./lopcodes.h:96:22, col:66> 'int'
  `-ParenExpr 0x5590ecf0e530 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf0e508 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf0e4e8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf0e478 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf0e248 <line:96:33, col:45> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf0e220 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf0e208 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf0e0f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf0e1e8 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf0e1c0 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf0e180 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf0e158 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf0e1a0 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf0e458 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf0e430 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf0e3f0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf0e3d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf0e3b0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf0e388 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
              |       `-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
              |         `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
              |           |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
              |           `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf0e410 <line:96:63> 'int' 0
[B236.38] + (([B236.58]))
  60: DeclRefExpr 0x5590ecf0e5d0 <lvm.c:448:46> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  61: ImplicitCastExpr 0x5590ecf0f6a8 <lvm.c:448:46> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0e5d0 <col:46> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B236.60] (ImplicitCastExpr, LValueToRValue, StkId)
  62: CallExpr 0x5590ecf0f630 <lvm.c:448:17, col:48> 'void'
|-ImplicitCastExpr 0x5590ecf0e5f8 <col:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf0e010 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedfeb8 'luaV_settable' 'void (lua_State *, const TValue *, TValue *, StkId)'
|-ImplicitCastExpr 0x5590ecf0f678 <col:31> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf0e038 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf0f690 <col:34, col:35> 'const TValue *' <BitCast>
| `-UnaryOperator 0x5590ecf0e088 <col:34, col:35> 'TValue *' prefix '&'
|   `-DeclRefExpr 0x5590ecf0e060 <col:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf0d9a8 'g' 'TValue':'struct lua_TValue'
|-ParenExpr 0x5590ecf0e5b0 <./llimits.h:63:25, col:27> 'TValue *'
| `-BinaryOperator 0x5590ecf0e588 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
|   |-ImplicitCastExpr 0x5590ecf0e570 <lvm.c:355:61> 'TValue *' <LValueToRValue>
|   | `-DeclRefExpr 0x5590ecf0e0a8 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|   `-ParenExpr 0x5590ecf0e550 <./lopcodes.h:96:22, col:66> 'int'
|     `-ParenExpr 0x5590ecf0e530 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf0e508 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf0e4e8 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf0e478 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf0e248 <line:96:33, col:45> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf0e220 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf0e208 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf0e0f8 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf0e0d0 <lvm.c:448:42> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf0e1e8 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf0e1c0 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf0e180 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf0e158 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf0e118 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf0e138 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf0e1a0 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf0e458 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf0e430 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf0e3f0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf0e3d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf0e3b0 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf0e388 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf0e2e0 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf0e2c0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf0e298 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf0e268 <col:39> 'int' 0
|                 |       `-ParenExpr 0x5590ecf0e368 <line:39:18, col:34> 'int'
|                 |         `-BinaryOperator 0x5590ecf0e340 <line:37:17, line:38:17> 'int' '+'
|                 |           |-IntegerLiteral 0x5590ecf0e300 <line:37:17> 'int' 9
|                 |           `-IntegerLiteral 0x5590ecf0e320 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf0e410 <line:96:63> 'int' 0
`-ImplicitCastExpr 0x5590ecf0f6a8 <lvm.c:448:46> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0e5d0 <col:46> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B236.31]([B236.33], [B236.36], ([B236.59]), [B236.61])
  63: DeclRefExpr 0x5590ecf0f710 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  64: ImplicitCastExpr 0x5590ecf0f738 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0f710 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.63] (ImplicitCastExpr, LValueToRValue, lua_State *)
  65: MemberExpr 0x5590ecf0f750 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf0f738 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0f710 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.64]->base
  66: ImplicitCastExpr 0x5590ecf0f788 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf0f750 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf0f738 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf0f710 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.65] (ImplicitCastExpr, LValueToRValue, StkId)
  67: DeclRefExpr 0x5590ecf0f6e8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  68: BinaryOperator 0x5590ecf0f7a0 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf0f6e8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf0f788 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf0f750 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf0f738 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf0f710 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B236.67] = [B236.66]
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B237]
   1: ConditionalOperator 0x5590ecf0d6a0 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|-ParenExpr 0x5590ecf0ca90 <line:122:17, col:29> 'int'
| `-BinaryOperator 0x5590ecf0ca68 <col:18, line:119:34> 'int' '&'
|   |-ParenExpr 0x5590ecf0c958 <line:122:18, col:20> 'int'
|   | `-ParenExpr 0x5590ecf0c938 <line:92:21, col:63> 'int'
|   |   `-ParenExpr 0x5590ecf0c918 <./llimits.h:75:22, col:31> 'int'
|   |     `-CStyleCastExpr 0x5590ecf0c8f0 <col:23, col:30> 'int' <IntegralCast>
|   |       `-ParenExpr 0x5590ecf0c8d0 <col:26, col:30> 'unsigned int'
|   |         `-BinaryOperator 0x5590ecf0c860 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |           |-ParenExpr 0x5590ecf0c698 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |           | `-BinaryOperator 0x5590ecf0c670 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |           |   |-ImplicitCastExpr 0x5590ecf0c658 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |           |   | `-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |           |   |   `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |           |   `-ParenExpr 0x5590ecf0c638 <./lopcodes.h:46:16, col:31> 'int'
|   |           |     `-BinaryOperator 0x5590ecf0c610 <line:45:16, line:40:17> 'int' '+'
|   |           |       |-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
|   |           |       | `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
|   |           |       |   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
|   |           |       |   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
|   |           |       `-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
|   |           `-ParenExpr 0x5590ecf0c840 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |             `-BinaryOperator 0x5590ecf0c818 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |               |-ParenExpr 0x5590ecf0c7d8 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |               | `-UnaryOperator 0x5590ecf0c7b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |               |   `-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
|   |               |     `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |               |       |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |               |       | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |               |       |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |               |       |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
|   |               |       `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf0c7f8 <line:92:60> 'int' 0
|   `-ParenExpr 0x5590ecf0ca48 <line:119:16, col:34> 'int'
|     `-BinaryOperator 0x5590ecf0ca20 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x5590ecf0c978 <col:17> 'int' 1
|       `-ParenExpr 0x5590ecf0ca00 <col:22, col:33> 'int'
|         `-BinaryOperator 0x5590ecf0c9d8 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x5590ecf0c998 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf0c9b8 <line:119:32> 'int' 1
|-BinaryOperator 0x5590ecf0d110 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
| |-ImplicitCastExpr 0x5590ecf0d0f8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x5590ecf0cab0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
| `-ParenExpr 0x5590ecf0d0d8 <./lopcodes.h:125:19, col:37> 'int'
|   `-BinaryOperator 0x5590ecf0d0b0 <col:20, line:119:34> 'int' '&'
|     |-CStyleCastExpr 0x5590ecf0cf78 <line:125:20, col:27> 'int' <NoOp>
|     | `-ParenExpr 0x5590ecf0cf58 <col:25, col:27> 'int'
|     |   `-ParenExpr 0x5590ecf0cef0 <line:92:21, col:63> 'int'
|     |     `-ParenExpr 0x5590ecf0ced0 <./llimits.h:75:22, col:31> 'int'
|     |       `-CStyleCastExpr 0x5590ecf0cea8 <col:23, col:30> 'int' <IntegralCast>
|     |         `-ParenExpr 0x5590ecf0ce88 <col:26, col:30> 'unsigned int'
|     |           `-BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|     |             |-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
|     |             | `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|     |             |   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|     |             |   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|     |             |   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|     |             |   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
|     |             |     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
|     |             |       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
|     |             |       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
|     |             |       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
|     |             |       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
|     |             |       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
|     |             `-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
|     |               `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|     |                 |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
|     |                 | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|     |                 |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
|     |                 |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|     |                 |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
|     |                 |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|     |                 |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     |                 |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
|     |                 |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
|     |                 `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
|     `-UnaryOperator 0x5590ecf0d090 <line:125:31, line:119:34> 'int' prefix '~'
|       `-ParenExpr 0x5590ecf0d070 <col:16, col:34> 'int'
|         `-BinaryOperator 0x5590ecf0d048 <col:17, col:33> 'int' '<<'
|           |-IntegerLiteral 0x5590ecf0cfa0 <col:17> 'int' 1
|           `-ParenExpr 0x5590ecf0d028 <col:22, col:33> 'int'
|             `-BinaryOperator 0x5590ecf0d000 <line:38:17, line:119:32> 'int' '-'
|               |-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
`-BinaryOperator 0x5590ecf0d5b0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
  |-ImplicitCastExpr 0x5590ecf0d598 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecf0d138 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
  `-ParenExpr 0x5590ecf0d578 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf0d558 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf0d530 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf0d510 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf0d4a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf0d2d8 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf0d2b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf0d298 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf0d278 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf0d250 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf0d480 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf0d458 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf0d418 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf0d3f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf0d438 <line:92:60> 'int' 0
([B240.58]) ? [B238.29] : [B239.21]
   2: DeclRefExpr 0x5590ecf0d6f0 <lvm.c:441:49> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   3: ImplicitCastExpr 0x5590ecf0d7a8 <lvm.c:441:49> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0d6f0 <col:49> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B237.2] (ImplicitCastExpr, LValueToRValue, StkId)
   4: CallExpr 0x5590ecf0d730 <lvm.c:441:17, col:51> 'void'
|-ImplicitCastExpr 0x5590ecf0d718 <col:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf06508 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
|-ImplicitCastExpr 0x5590ecf0d778 <col:31> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf06530 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf0d790 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
| `-ParenExpr 0x5590ecf06a60 <col:25, col:27> 'StkId':'TValue *'
|   `-BinaryOperator 0x5590ecf06a38 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|     |-ImplicitCastExpr 0x5590ecf06a20 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf06558 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|     `-ParenExpr 0x5590ecf06a00 <./lopcodes.h:88:21, col:63> 'int'
|       `-ParenExpr 0x5590ecf069e0 <./llimits.h:75:22, col:31> 'int'
|         `-CStyleCastExpr 0x5590ecf069b8 <col:23, col:30> 'int' <IntegralCast>
|           `-ParenExpr 0x5590ecf06998 <col:26, col:30> 'unsigned int'
|             `-BinaryOperator 0x5590ecf06928 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|               |-ParenExpr 0x5590ecf06760 <line:88:32, col:43> 'Instruction':'unsigned int'
|               | `-BinaryOperator 0x5590ecf06738 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|               |   |-ImplicitCastExpr 0x5590ecf06720 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|               |   | `-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|               |   |   `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|               |   `-ParenExpr 0x5590ecf06700 <./lopcodes.h:47:16, col:31> 'int'
|               |     `-BinaryOperator 0x5590ecf066d8 <line:46:16, line:37:17> 'int' '+'
|               |       |-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
|               |       | `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
|               |       |   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
|               |       |   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
|               |       |   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
|               |       |   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
|               |       |   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
|               |       `-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
|               `-ParenExpr 0x5590ecf06908 <line:71:20, col:49> 'Instruction':'unsigned int'
|                 `-BinaryOperator 0x5590ecf068e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
|                   |-ParenExpr 0x5590ecf068a0 <line:71:21, col:45> 'Instruction':'unsigned int'
|                   | `-UnaryOperator 0x5590ecf06880 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                   |   `-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
|                   |     `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|                   |       |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|                   |       | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                   |       |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                   |       |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
|                   |       `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
|                   `-IntegerLiteral 0x5590ecf068c0 <line:88:60> 'int' 0
|-ParenExpr 0x5590ecf0d6d0 <./llimits.h:63:25, col:27> 'TValue *'
| `-ConditionalOperator 0x5590ecf0d6a0 <./lopcodes.h:122:17, line:92:63> 'TValue *'
|   |-ParenExpr 0x5590ecf0ca90 <line:122:17, col:29> 'int'
|   | `-BinaryOperator 0x5590ecf0ca68 <col:18, line:119:34> 'int' '&'
|   |   |-ParenExpr 0x5590ecf0c958 <line:122:18, col:20> 'int'
|   |   | `-ParenExpr 0x5590ecf0c938 <line:92:21, col:63> 'int'
|   |   |   `-ParenExpr 0x5590ecf0c918 <./llimits.h:75:22, col:31> 'int'
|   |   |     `-CStyleCastExpr 0x5590ecf0c8f0 <col:23, col:30> 'int' <IntegralCast>
|   |   |       `-ParenExpr 0x5590ecf0c8d0 <col:26, col:30> 'unsigned int'
|   |   |         `-BinaryOperator 0x5590ecf0c860 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |   |           |-ParenExpr 0x5590ecf0c698 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |   |           | `-BinaryOperator 0x5590ecf0c670 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |   |           |   |-ImplicitCastExpr 0x5590ecf0c658 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |   |           |   | `-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   |           |   |   `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |   |           |   `-ParenExpr 0x5590ecf0c638 <./lopcodes.h:46:16, col:31> 'int'
|   |   |           |     `-BinaryOperator 0x5590ecf0c610 <line:45:16, line:40:17> 'int' '+'
|   |   |           |       |-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
|   |   |           |       | `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
|   |   |           |       |   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
|   |   |           |       |   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
|   |   |           |       `-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
|   |   |           `-ParenExpr 0x5590ecf0c840 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |   |             `-BinaryOperator 0x5590ecf0c818 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |   |               |-ParenExpr 0x5590ecf0c7d8 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |   |               | `-UnaryOperator 0x5590ecf0c7b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |   |               |   `-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
|   |   |               |     `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |   |               |       |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |   |               |       | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |   |               |       |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |   |               |       |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
|   |   |               |       `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
|   |   |               `-IntegerLiteral 0x5590ecf0c7f8 <line:92:60> 'int' 0
|   |   `-ParenExpr 0x5590ecf0ca48 <line:119:16, col:34> 'int'
|   |     `-BinaryOperator 0x5590ecf0ca20 <col:17, col:33> 'int' '<<'
|   |       |-IntegerLiteral 0x5590ecf0c978 <col:17> 'int' 1
|   |       `-ParenExpr 0x5590ecf0ca00 <col:22, col:33> 'int'
|   |         `-BinaryOperator 0x5590ecf0c9d8 <line:38:17, line:119:32> 'int' '-'
|   |           |-IntegerLiteral 0x5590ecf0c998 <line:38:17> 'int' 9
|   |           `-IntegerLiteral 0x5590ecf0c9b8 <line:119:32> 'int' 1
|   |-BinaryOperator 0x5590ecf0d110 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|   | |-ImplicitCastExpr 0x5590ecf0d0f8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5590ecf0cab0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
|   | `-ParenExpr 0x5590ecf0d0d8 <./lopcodes.h:125:19, col:37> 'int'
|   |   `-BinaryOperator 0x5590ecf0d0b0 <col:20, line:119:34> 'int' '&'
|   |     |-CStyleCastExpr 0x5590ecf0cf78 <line:125:20, col:27> 'int' <NoOp>
|   |     | `-ParenExpr 0x5590ecf0cf58 <col:25, col:27> 'int'
|   |     |   `-ParenExpr 0x5590ecf0cef0 <line:92:21, col:63> 'int'
|   |     |     `-ParenExpr 0x5590ecf0ced0 <./llimits.h:75:22, col:31> 'int'
|   |     |       `-CStyleCastExpr 0x5590ecf0cea8 <col:23, col:30> 'int' <IntegralCast>
|   |     |         `-ParenExpr 0x5590ecf0ce88 <col:26, col:30> 'unsigned int'
|   |     |           `-BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|   |     |             |-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
|   |     |             | `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |     |             |   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   |     |             |   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |     |             |   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   |     |             |   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
|   |     |             |     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
|   |     |             |       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
|   |     |             |       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
|   |     |             |       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
|   |     |             |       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
|   |     |             |       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
|   |     |             `-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
|   |     |               `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|   |     |                 |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
|   |     |                 | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   |     |                 |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
|   |     |                 |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|   |     |                 |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
|   |     |                 |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   |     |                 |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|   |     |                 |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
|   |     |                 |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
|   |     |                 `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
|   |     `-UnaryOperator 0x5590ecf0d090 <line:125:31, line:119:34> 'int' prefix '~'
|   |       `-ParenExpr 0x5590ecf0d070 <col:16, col:34> 'int'
|   |         `-BinaryOperator 0x5590ecf0d048 <col:17, col:33> 'int' '<<'
|   |           |-IntegerLiteral 0x5590ecf0cfa0 <col:17> 'int' 1
|   |           `-ParenExpr 0x5590ecf0d028 <col:22, col:33> 'int'
|   |             `-BinaryOperator 0x5590ecf0d000 <line:38:17, line:119:32> 'int' '-'
|   |               |-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
|   |               `-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
|   `-BinaryOperator 0x5590ecf0d5b0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|     |-ImplicitCastExpr 0x5590ecf0d598 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
|     | `-DeclRefExpr 0x5590ecf0d138 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
|     `-ParenExpr 0x5590ecf0d578 <./lopcodes.h:92:21, col:63> 'int'
|       `-ParenExpr 0x5590ecf0d558 <./llimits.h:75:22, col:31> 'int'
|         `-CStyleCastExpr 0x5590ecf0d530 <col:23, col:30> 'int' <IntegralCast>
|           `-ParenExpr 0x5590ecf0d510 <col:26, col:30> 'unsigned int'
|             `-BinaryOperator 0x5590ecf0d4a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|               |-ParenExpr 0x5590ecf0d2d8 <line:92:32, col:43> 'Instruction':'unsigned int'
|               | `-BinaryOperator 0x5590ecf0d2b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|               |   |-ImplicitCastExpr 0x5590ecf0d298 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|               |   | `-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|               |   |   `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|               |   `-ParenExpr 0x5590ecf0d278 <./lopcodes.h:46:16, col:31> 'int'
|               |     `-BinaryOperator 0x5590ecf0d250 <line:45:16, line:40:17> 'int' '+'
|               |       |-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
|               |       | `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
|               |       |   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
|               |       |   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
|               |       `-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
|               `-ParenExpr 0x5590ecf0d480 <line:71:20, col:49> 'Instruction':'unsigned int'
|                 `-BinaryOperator 0x5590ecf0d458 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                   |-ParenExpr 0x5590ecf0d418 <line:71:21, col:45> 'Instruction':'unsigned int'
|                   | `-UnaryOperator 0x5590ecf0d3f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                   |   `-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
|                   |     `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                   |       |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
|                   |       | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                   |       |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                   |       |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
|                   |       `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
|                   `-IntegerLiteral 0x5590ecf0d438 <line:92:60> 'int' 0
`-ImplicitCastExpr 0x5590ecf0d7a8 <lvm.c:441:49> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0d6f0 <col:49> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B240.8]([B240.10], [B240.34], ([B237.1]), [B237.3])
   5: DeclRefExpr 0x5590ecf0d810 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x5590ecf0d838 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0d810 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B237.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: MemberExpr 0x5590ecf0d850 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf0d838 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf0d810 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B237.6]->base
   8: ImplicitCastExpr 0x5590ecf0d888 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf0d850 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf0d838 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf0d810 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B237.7] (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclRefExpr 0x5590ecf0d7e8 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  10: BinaryOperator 0x5590ecf0d8a0 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf0d7e8 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf0d888 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf0d850 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf0d838 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf0d810 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B237.9] = [B237.8]
   T: continue;
   Preds (2): B238 B239
   Succs (1): B1

 [B238]
   1: DeclRefExpr 0x5590ecf0cab0 <lvm.c:354:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf0d0f8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0cab0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B238.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf0cc10 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B238.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf0cb20 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf0cb40 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf0cb60 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
[B238.5] + [B238.6]
   8: IntegerLiteral 0x5590ecf0cba8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf0cbc8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
([B238.7]) + [B238.8]
  10: BinaryOperator 0x5590ecf0cc28 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
[B238.4] >> ([B238.9])
  11: IntegerLiteral 0x5590ecf0cc70 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf0cca0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
(Instruction)[B238.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf0ccc8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
~[B238.12]
  14: IntegerLiteral 0x5590ecf0cd08 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf0cd28 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
([B238.13]) << [B238.14]
  16: UnaryOperator 0x5590ecf0cd70 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
~([B238.15])
  17: IntegerLiteral 0x5590ecf0cdb0 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf0cdd0 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
([B238.16]) << [B238.17]
  19: BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
([B238.10]) & ([B238.18])
  20: CStyleCastExpr 0x5590ecf0cea8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf0ce88 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
(int)([B238.19]) (CStyleCastExpr, IntegralCast, int)
  21: CStyleCastExpr 0x5590ecf0cf78 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ParenExpr 0x5590ecf0cf58 <col:25, col:27> 'int'
  `-ParenExpr 0x5590ecf0cef0 <line:92:21, col:63> 'int'
    `-ParenExpr 0x5590ecf0ced0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf0cea8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf0ce88 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
            `-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
                `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
(int)((([B238.20]))) (CStyleCastExpr, NoOp, int)
  22: IntegerLiteral 0x5590ecf0cfa0 <./lopcodes.h:119:17> 'int' 1
1
  23: IntegerLiteral 0x5590ecf0cfc0 <./lopcodes.h:38:17> 'int' 9
9
  24: IntegerLiteral 0x5590ecf0cfe0 <./lopcodes.h:119:32> 'int' 1
1
  25: BinaryOperator 0x5590ecf0d000 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
[B238.23] - [B238.24]
  26: BinaryOperator 0x5590ecf0d048 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf0cfa0 <col:17> 'int' 1
`-ParenExpr 0x5590ecf0d028 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf0d000 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
[B238.22] << ([B238.25])
  27: UnaryOperator 0x5590ecf0d090 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x5590ecf0d070 <col:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf0d048 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf0cfa0 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf0d028 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf0d000 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
~([B238.26])
  28: BinaryOperator 0x5590ecf0d0b0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x5590ecf0cf78 <line:125:20, col:27> 'int' <NoOp>
| `-ParenExpr 0x5590ecf0cf58 <col:25, col:27> 'int'
|   `-ParenExpr 0x5590ecf0cef0 <line:92:21, col:63> 'int'
|     `-ParenExpr 0x5590ecf0ced0 <./llimits.h:75:22, col:31> 'int'
|       `-CStyleCastExpr 0x5590ecf0cea8 <col:23, col:30> 'int' <IntegralCast>
|         `-ParenExpr 0x5590ecf0ce88 <col:26, col:30> 'unsigned int'
|           `-BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|             |-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
|             | `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|             |   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|             |   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
|             |     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
|             |       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
|             |       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
|             |       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
|             |       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
|             |       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
|             `-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
|               `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|                 |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
|                 | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|                 |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
|                 |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|                 |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
|                 |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|                 |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|                 |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
|                 |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
|                 `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
`-UnaryOperator 0x5590ecf0d090 <line:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x5590ecf0d070 <col:16, col:34> 'int'
    `-BinaryOperator 0x5590ecf0d048 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x5590ecf0cfa0 <col:17> 'int' 1
      `-ParenExpr 0x5590ecf0d028 <col:22, col:33> 'int'
        `-BinaryOperator 0x5590ecf0d000 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
          `-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
[B238.21] & [B238.27]
  29: BinaryOperator 0x5590ecf0d110 <lvm.c:354:21, ./lopcodes.h:125:37> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf0d0f8 <lvm.c:354:21> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf0cab0 <col:21> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf0d0d8 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x5590ecf0d0b0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x5590ecf0cf78 <line:125:20, col:27> 'int' <NoOp>
    | `-ParenExpr 0x5590ecf0cf58 <col:25, col:27> 'int'
    |   `-ParenExpr 0x5590ecf0cef0 <line:92:21, col:63> 'int'
    |     `-ParenExpr 0x5590ecf0ced0 <./llimits.h:75:22, col:31> 'int'
    |       `-CStyleCastExpr 0x5590ecf0cea8 <col:23, col:30> 'int' <IntegralCast>
    |         `-ParenExpr 0x5590ecf0ce88 <col:26, col:30> 'unsigned int'
    |           `-BinaryOperator 0x5590ecf0ce18 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |             |-ParenExpr 0x5590ecf0cc50 <line:92:32, col:43> 'Instruction':'unsigned int'
    |             | `-BinaryOperator 0x5590ecf0cc28 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |             |   |-ImplicitCastExpr 0x5590ecf0cc10 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |             |   | `-ParenExpr 0x5590ecf0cb00 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |             |   |   `-DeclRefExpr 0x5590ecf0cad8 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |             |   `-ParenExpr 0x5590ecf0cbf0 <./lopcodes.h:46:16, col:31> 'int'
    |             |     `-BinaryOperator 0x5590ecf0cbc8 <line:45:16, line:40:17> 'int' '+'
    |             |       |-ParenExpr 0x5590ecf0cb88 <line:45:16, col:33> 'int'
    |             |       | `-BinaryOperator 0x5590ecf0cb60 <line:44:17, line:42:18> 'int' '+'
    |             |       |   |-IntegerLiteral 0x5590ecf0cb20 <line:44:17> 'int' 0
    |             |       |   `-IntegerLiteral 0x5590ecf0cb40 <line:42:18> 'int' 6
    |             |       `-IntegerLiteral 0x5590ecf0cba8 <line:40:17> 'int' 8
    |             `-ParenExpr 0x5590ecf0cdf8 <line:71:20, col:49> 'Instruction':'unsigned int'
    |               `-BinaryOperator 0x5590ecf0cdd0 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |                 |-ParenExpr 0x5590ecf0cd90 <line:71:21, col:45> 'Instruction':'unsigned int'
    |                 | `-UnaryOperator 0x5590ecf0cd70 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |                 |   `-ParenExpr 0x5590ecf0cd50 <col:23, col:44> 'Instruction':'unsigned int'
    |                 |     `-BinaryOperator 0x5590ecf0cd28 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |                 |       |-ParenExpr 0x5590ecf0cce8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |                 |       | `-UnaryOperator 0x5590ecf0ccc8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |                 |       |   `-CStyleCastExpr 0x5590ecf0cca0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |                 |       |     `-IntegerLiteral 0x5590ecf0cc70 <col:39> 'int' 0
    |                 |       `-IntegerLiteral 0x5590ecf0cd08 <line:37:17> 'int' 9
    |                 `-IntegerLiteral 0x5590ecf0cdb0 <line:92:60> 'int' 0
    `-UnaryOperator 0x5590ecf0d090 <line:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x5590ecf0d070 <col:16, col:34> 'int'
        `-BinaryOperator 0x5590ecf0d048 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x5590ecf0cfa0 <col:17> 'int' 1
          `-ParenExpr 0x5590ecf0d028 <col:22, col:33> 'int'
            `-BinaryOperator 0x5590ecf0d000 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x5590ecf0cfc0 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf0cfe0 <line:119:32> 'int' 1
[B238.2] + ([B238.28])
   Preds (1): B240
   Succs (1): B237

 [B239]
   1: DeclRefExpr 0x5590ecf0d138 <lvm.c:354:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf0d598 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf0d138 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B239.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf0d298 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B239.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf0d1a8 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf0d1c8 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf0d1e8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
[B239.5] + [B239.6]
   8: IntegerLiteral 0x5590ecf0d230 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf0d250 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
([B239.7]) + [B239.8]
  10: BinaryOperator 0x5590ecf0d2b0 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf0d298 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf0d278 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf0d250 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
[B239.4] >> ([B239.9])
  11: IntegerLiteral 0x5590ecf0d2f8 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf0d328 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
(Instruction)[B239.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf0d350 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
~[B239.12]
  14: IntegerLiteral 0x5590ecf0d390 <./lopcodes.h:37:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf0d3b0 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
([B239.13]) << [B239.14]
  16: UnaryOperator 0x5590ecf0d3f8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
~([B239.15])
  17: IntegerLiteral 0x5590ecf0d438 <./lopcodes.h:92:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf0d458 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0d418 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0d3f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf0d438 <line:92:60> 'int' 0
([B239.16]) << [B239.17]
  19: BinaryOperator 0x5590ecf0d4a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf0d2d8 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf0d2b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf0d298 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf0d278 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf0d250 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf0d480 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0d458 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0d418 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0d3f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0d438 <line:92:60> 'int' 0
([B239.10]) & ([B239.18])
  20: CStyleCastExpr 0x5590ecf0d530 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf0d510 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf0d4a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf0d2d8 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf0d2b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf0d298 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf0d278 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf0d250 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf0d480 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf0d458 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf0d418 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf0d3f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0d438 <line:92:60> 'int' 0
(int)([B239.19]) (CStyleCastExpr, IntegralCast, int)
  21: BinaryOperator 0x5590ecf0d5b0 <lvm.c:354:45, ./lopcodes.h:92:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf0d598 <lvm.c:354:45> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf0d138 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf0d578 <./lopcodes.h:92:21, col:63> 'int'
  `-ParenExpr 0x5590ecf0d558 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf0d530 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf0d510 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf0d4a0 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf0d2d8 <line:92:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf0d2b0 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf0d298 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf0d188 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf0d160 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf0d278 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf0d250 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf0d210 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf0d1e8 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf0d1a8 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf0d1c8 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf0d230 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf0d480 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf0d458 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf0d418 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf0d3f8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf0d3d8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf0d3b0 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf0d370 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf0d350 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf0d328 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf0d2f8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf0d390 <line:37:17> 'int' 9
              `-IntegerLiteral 0x5590ecf0d438 <line:92:60> 'int' 0
[B239.2] + (([B239.20]))
   Preds (1): B240
   Succs (1): B237

 [B240]
  case OP_GETTABLE:
   1: DeclRefExpr 0x5590ecf064a0 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecf064c8 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf064a0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B240.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x5590ecf06428 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecf06450 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf06428 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B240.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecf06468 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf06450 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf06428 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B240.4]->savedpc
   6: BinaryOperator 0x5590ecf064e0 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf06468 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf06450 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf06428 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf064c8 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf064a0 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B240.5] = [B240.2]
   7: DeclRefExpr 0x5590ecf06508 <lvm.c:441:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
luaV_gettable
   8: ImplicitCastExpr 0x5590ecf0d718 <lvm.c:441:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf06508 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
[B240.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, TValue *, StkId))
   9: DeclRefExpr 0x5590ecf06530 <lvm.c:441:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecf0d778 <lvm.c:441:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf06530 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B240.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: DeclRefExpr 0x5590ecf06558 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  12: ImplicitCastExpr 0x5590ecf06a20 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf06558 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B240.11] (ImplicitCastExpr, LValueToRValue, StkId)
  13: DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  14: ImplicitCastExpr 0x5590ecf06720 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B240.13]) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: IntegerLiteral 0x5590ecf065c8 <./lopcodes.h:44:17> 'int' 0
0
  16: IntegerLiteral 0x5590ecf065e8 <./lopcodes.h:42:18> 'int' 6
6
  17: BinaryOperator 0x5590ecf06608 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
[B240.15] + [B240.16]
  18: IntegerLiteral 0x5590ecf06650 <./lopcodes.h:40:17> 'int' 8
8
  19: BinaryOperator 0x5590ecf06670 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
([B240.17]) + [B240.18]
  20: IntegerLiteral 0x5590ecf066b8 <./lopcodes.h:37:17> 'int' 9
9
  21: BinaryOperator 0x5590ecf066d8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
([B240.19]) + [B240.20]
  22: BinaryOperator 0x5590ecf06738 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf06720 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf06700 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf066d8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
[B240.14] >> ([B240.21])
  23: IntegerLiteral 0x5590ecf06780 <./lopcodes.h:71:39> 'int' 0
0
  24: CStyleCastExpr 0x5590ecf067b0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
(Instruction)[B240.23] (CStyleCastExpr, IntegralCast, Instruction)
  25: UnaryOperator 0x5590ecf067d8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
~[B240.24]
  26: IntegerLiteral 0x5590ecf06818 <./lopcodes.h:38:17> 'int' 9
9
  27: BinaryOperator 0x5590ecf06838 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
([B240.25]) << [B240.26]
  28: UnaryOperator 0x5590ecf06880 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
~([B240.27])
  29: IntegerLiteral 0x5590ecf068c0 <./lopcodes.h:88:60> 'int' 0
0
  30: BinaryOperator 0x5590ecf068e0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf068a0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf06880 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf068c0 <line:88:60> 'int' 0
([B240.28]) << [B240.29]
  31: BinaryOperator 0x5590ecf06928 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf06760 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf06738 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf06720 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf06700 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf066d8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf06908 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf068e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf068a0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf06880 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf068c0 <line:88:60> 'int' 0
([B240.22]) & ([B240.30])
  32: CStyleCastExpr 0x5590ecf069b8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf06998 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf06928 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf06760 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf06738 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf06720 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf06700 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf066d8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf06908 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf068e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf068a0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf06880 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf068c0 <line:88:60> 'int' 0
(int)([B240.31]) (CStyleCastExpr, IntegralCast, int)
  33: BinaryOperator 0x5590ecf06a38 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf06a20 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf06558 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf06a00 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf069e0 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf069b8 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf06998 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf06928 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf06760 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf06738 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf06720 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf06700 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf066d8 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf06908 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf068e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf068a0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf06880 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf068c0 <line:88:60> 'int' 0
[B240.12] + (([B240.32]))
  34: ImplicitCastExpr 0x5590ecf0d790 <./llimits.h:63:25, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf06a60 <col:25, col:27> 'StkId':'TValue *'
  `-BinaryOperator 0x5590ecf06a38 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
    |-ImplicitCastExpr 0x5590ecf06a20 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
    | `-DeclRefExpr 0x5590ecf06558 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
    `-ParenExpr 0x5590ecf06a00 <./lopcodes.h:88:21, col:63> 'int'
      `-ParenExpr 0x5590ecf069e0 <./llimits.h:75:22, col:31> 'int'
        `-CStyleCastExpr 0x5590ecf069b8 <col:23, col:30> 'int' <IntegralCast>
          `-ParenExpr 0x5590ecf06998 <col:26, col:30> 'unsigned int'
            `-BinaryOperator 0x5590ecf06928 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
              |-ParenExpr 0x5590ecf06760 <line:88:32, col:43> 'Instruction':'unsigned int'
              | `-BinaryOperator 0x5590ecf06738 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
              |   |-ImplicitCastExpr 0x5590ecf06720 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
              |   | `-ParenExpr 0x5590ecf065a8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
              |   |   `-DeclRefExpr 0x5590ecf06580 <lvm.c:441:37> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
              |   `-ParenExpr 0x5590ecf06700 <./lopcodes.h:47:16, col:31> 'int'
              |     `-BinaryOperator 0x5590ecf066d8 <line:46:16, line:37:17> 'int' '+'
              |       |-ParenExpr 0x5590ecf06698 <line:46:16, col:31> 'int'
              |       | `-BinaryOperator 0x5590ecf06670 <line:45:16, line:40:17> 'int' '+'
              |       |   |-ParenExpr 0x5590ecf06630 <line:45:16, col:33> 'int'
              |       |   | `-BinaryOperator 0x5590ecf06608 <line:44:17, line:42:18> 'int' '+'
              |       |   |   |-IntegerLiteral 0x5590ecf065c8 <line:44:17> 'int' 0
              |       |   |   `-IntegerLiteral 0x5590ecf065e8 <line:42:18> 'int' 6
              |       |   `-IntegerLiteral 0x5590ecf06650 <line:40:17> 'int' 8
              |       `-IntegerLiteral 0x5590ecf066b8 <line:37:17> 'int' 9
              `-ParenExpr 0x5590ecf06908 <line:71:20, col:49> 'Instruction':'unsigned int'
                `-BinaryOperator 0x5590ecf068e0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                  |-ParenExpr 0x5590ecf068a0 <line:71:21, col:45> 'Instruction':'unsigned int'
                  | `-UnaryOperator 0x5590ecf06880 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                  |   `-ParenExpr 0x5590ecf06860 <col:23, col:44> 'Instruction':'unsigned int'
                  |     `-BinaryOperator 0x5590ecf06838 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                  |       |-ParenExpr 0x5590ecf067f8 <line:71:24, col:40> 'Instruction':'unsigned int'
                  |       | `-UnaryOperator 0x5590ecf067d8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                  |       |   `-CStyleCastExpr 0x5590ecf067b0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                  |       |     `-IntegerLiteral 0x5590ecf06780 <col:39> 'int' 0
                  |       `-IntegerLiteral 0x5590ecf06818 <line:38:17> 'int' 9
                  `-IntegerLiteral 0x5590ecf068c0 <line:88:60> 'int' 0
([B240.33]) (ImplicitCastExpr, BitCast, const TValue *)
  35: DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  36: ImplicitCastExpr 0x5590ecf0c658 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B240.35]) (ImplicitCastExpr, LValueToRValue, Instruction)
  37: IntegerLiteral 0x5590ecf06ac8 <./lopcodes.h:44:17> 'int' 0
0
  38: IntegerLiteral 0x5590ecf06ae8 <./lopcodes.h:42:18> 'int' 6
6
  39: BinaryOperator 0x5590ecf06b08 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
[B240.37] + [B240.38]
  40: IntegerLiteral 0x5590ecf06b50 <./lopcodes.h:40:17> 'int' 8
8
  41: BinaryOperator 0x5590ecf0c610 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
([B240.39]) + [B240.40]
  42: BinaryOperator 0x5590ecf0c670 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf0c658 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf0c638 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf0c610 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
[B240.36] >> ([B240.41])
  43: IntegerLiteral 0x5590ecf0c6b8 <./lopcodes.h:71:39> 'int' 0
0
  44: CStyleCastExpr 0x5590ecf0c6e8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
(Instruction)[B240.43] (CStyleCastExpr, IntegralCast, Instruction)
  45: UnaryOperator 0x5590ecf0c710 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
~[B240.44]
  46: IntegerLiteral 0x5590ecf0c750 <./lopcodes.h:37:17> 'int' 9
9
  47: BinaryOperator 0x5590ecf0c770 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
([B240.45]) << [B240.46]
  48: UnaryOperator 0x5590ecf0c7b8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
~([B240.47])
  49: IntegerLiteral 0x5590ecf0c7f8 <./lopcodes.h:92:60> 'int' 0
0
  50: BinaryOperator 0x5590ecf0c818 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf0c7d8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf0c7b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf0c7f8 <line:92:60> 'int' 0
([B240.48]) << [B240.49]
  51: BinaryOperator 0x5590ecf0c860 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf0c698 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf0c670 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf0c658 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf0c638 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf0c610 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf0c840 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf0c818 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf0c7d8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf0c7b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0c7f8 <line:92:60> 'int' 0
([B240.42]) & ([B240.50])
  52: CStyleCastExpr 0x5590ecf0c8f0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf0c8d0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf0c860 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf0c698 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf0c670 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf0c658 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf0c638 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf0c610 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf0c840 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf0c818 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf0c7d8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf0c7b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0c7f8 <line:92:60> 'int' 0
(int)([B240.51]) (CStyleCastExpr, IntegralCast, int)
  53: IntegerLiteral 0x5590ecf0c978 <./lopcodes.h:119:17> 'int' 1
1
  54: IntegerLiteral 0x5590ecf0c998 <./lopcodes.h:38:17> 'int' 9
9
  55: IntegerLiteral 0x5590ecf0c9b8 <./lopcodes.h:119:32> 'int' 1
1
  56: BinaryOperator 0x5590ecf0c9d8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5590ecf0c998 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf0c9b8 <line:119:32> 'int' 1
[B240.54] - [B240.55]
  57: BinaryOperator 0x5590ecf0ca20 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5590ecf0c978 <col:17> 'int' 1
`-ParenExpr 0x5590ecf0ca00 <col:22, col:33> 'int'
  `-BinaryOperator 0x5590ecf0c9d8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5590ecf0c998 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf0c9b8 <line:119:32> 'int' 1
[B240.53] << ([B240.56])
  58: BinaryOperator 0x5590ecf0ca68 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ParenExpr 0x5590ecf0c958 <line:122:18, col:20> 'int'
| `-ParenExpr 0x5590ecf0c938 <line:92:21, col:63> 'int'
|   `-ParenExpr 0x5590ecf0c918 <./llimits.h:75:22, col:31> 'int'
|     `-CStyleCastExpr 0x5590ecf0c8f0 <col:23, col:30> 'int' <IntegralCast>
|       `-ParenExpr 0x5590ecf0c8d0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5590ecf0c860 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5590ecf0c698 <line:92:32, col:43> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5590ecf0c670 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5590ecf0c658 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5590ecf06aa8 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5590ecf06a80 <lvm.c:441:45> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|           |   `-ParenExpr 0x5590ecf0c638 <./lopcodes.h:46:16, col:31> 'int'
|           |     `-BinaryOperator 0x5590ecf0c610 <line:45:16, line:40:17> 'int' '+'
|           |       |-ParenExpr 0x5590ecf06b30 <line:45:16, col:33> 'int'
|           |       | `-BinaryOperator 0x5590ecf06b08 <line:44:17, line:42:18> 'int' '+'
|           |       |   |-IntegerLiteral 0x5590ecf06ac8 <line:44:17> 'int' 0
|           |       |   `-IntegerLiteral 0x5590ecf06ae8 <line:42:18> 'int' 6
|           |       `-IntegerLiteral 0x5590ecf06b50 <line:40:17> 'int' 8
|           `-ParenExpr 0x5590ecf0c840 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5590ecf0c818 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5590ecf0c7d8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5590ecf0c7b8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5590ecf0c798 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5590ecf0c770 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5590ecf0c730 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5590ecf0c710 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5590ecf0c6e8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5590ecf0c6b8 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5590ecf0c750 <line:37:17> 'int' 9
|               `-IntegerLiteral 0x5590ecf0c7f8 <line:92:60> 'int' 0
`-ParenExpr 0x5590ecf0ca48 <line:119:16, col:34> 'int'
  `-BinaryOperator 0x5590ecf0ca20 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5590ecf0c978 <col:17> 'int' 1
    `-ParenExpr 0x5590ecf0ca00 <col:22, col:33> 'int'
      `-BinaryOperator 0x5590ecf0c9d8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5590ecf0c998 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf0c9b8 <line:119:32> 'int' 1
((([B240.52]))) & ([B240.57])
   T: ([B240.58]) ? ... : ...
   Preds (1): B2
   Succs (2): B238 B239

 [B241]
  case OP_GETGLOBAL:
   1: DeclStmt 0x5590ecf05468 <lvm.c:433:9, col:17>col:16
`-VarDecl 0x5590ecf05408 <col:9, col:16> col:16 used g 'TValue':'struct lua_TValue'
TValue g;
   2: DeclRefExpr 0x5590ecf054f0 <lvm.c:355:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   3: ImplicitCastExpr 0x5590ecf059b8 <lvm.c:355:61> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf054f0 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B241.2] (ImplicitCastExpr, LValueToRValue, TValue *)
   4: DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   5: ImplicitCastExpr 0x5590ecf05650 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf05540 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B241.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf05560 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf05580 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf055a0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
[B241.6] + [B241.7]
   9: IntegerLiteral 0x5590ecf055e8 <./lopcodes.h:40:17> 'int' 8
8
  10: BinaryOperator 0x5590ecf05608 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf055c8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf055a0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf055e8 <line:40:17> 'int' 8
([B241.8]) + [B241.9]
  11: BinaryOperator 0x5590ecf05668 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf05650 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf05540 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf05630 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf05608 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf055c8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf055a0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf055e8 <line:40:17> 'int' 8
[B241.5] >> ([B241.10])
  12: IntegerLiteral 0x5590ecf056b0 <./lopcodes.h:71:39> 'int' 0
0
  13: CStyleCastExpr 0x5590ecf056e0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
(Instruction)[B241.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: UnaryOperator 0x5590ecf05708 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
~[B241.13]
  15: IntegerLiteral 0x5590ecf05748 <./lopcodes.h:37:17> 'int' 9
9
  16: IntegerLiteral 0x5590ecf05768 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf05788 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
[B241.15] + [B241.16]
  18: BinaryOperator 0x5590ecf057d0 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
`-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
([B241.14]) << ([B241.17])
  19: UnaryOperator 0x5590ecf05818 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf057f8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf057d0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
    `-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
~([B241.18])
  20: IntegerLiteral 0x5590ecf05858 <./lopcodes.h:96:63> 'int' 0
0
  21: BinaryOperator 0x5590ecf05878 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf05838 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf05818 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf057f8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf057d0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
|       `-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf05858 <line:96:63> 'int' 0
([B241.19]) << [B241.20]
  22: BinaryOperator 0x5590ecf058c0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf05690 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf05668 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf05650 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf05540 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf05630 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf05608 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf055c8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf055a0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf055e8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf058a0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf05878 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf05838 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf05818 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf057f8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf057d0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
    |       `-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf05858 <line:96:63> 'int' 0
([B241.11]) & ([B241.21])
  23: CStyleCastExpr 0x5590ecf05950 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf05930 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf058c0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf05690 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf05668 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf05650 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf05540 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf05630 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf05608 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf055c8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf055a0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf055e8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf058a0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf05878 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf05838 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf05818 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf057f8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf057d0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
        |       `-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf05858 <line:96:63> 'int' 0
(int)([B241.22]) (CStyleCastExpr, IntegralCast, int)
  24: BinaryOperator 0x5590ecf059d0 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf059b8 <lvm.c:355:61> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf054f0 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf05998 <./lopcodes.h:96:22, col:66> 'int'
  `-ParenExpr 0x5590ecf05978 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf05950 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf05930 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf058c0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf05690 <line:96:33, col:45> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf05668 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf05650 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf05540 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf05630 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf05608 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf055c8 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590ecf055a0 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590ecf055e8 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf058a0 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf05878 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf05838 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf05818 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf057f8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf057d0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
              |       `-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
              |         `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
              |           |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
              |           `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf05858 <line:96:63> 'int' 0
[B241.3] + (([B241.23]))
  25: DeclStmt 0x5590ecf05a18 <lvm.c:434:9, col:28>col:17
`-VarDecl 0x5590ecf05490 <col:9, ./llimits.h:63:27> lvm.c:434:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf059f8 <./llimits.h:63:25, col:27> 'TValue *'
    `-BinaryOperator 0x5590ecf059d0 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf059b8 <lvm.c:355:61> 'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf054f0 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      `-ParenExpr 0x5590ecf05998 <./lopcodes.h:96:22, col:66> 'int'
        `-ParenExpr 0x5590ecf05978 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf05950 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf05930 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf058c0 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf05690 <line:96:33, col:45> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf05668 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf05650 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf05540 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf05518 <lvm.c:434:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf05630 <./lopcodes.h:46:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf05608 <line:45:16, line:40:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf055c8 <line:45:16, col:33> 'int'
                |       | `-BinaryOperator 0x5590ecf055a0 <line:44:17, line:42:18> 'int' '+'
                |       |   |-IntegerLiteral 0x5590ecf05560 <line:44:17> 'int' 0
                |       |   `-IntegerLiteral 0x5590ecf05580 <line:42:18> 'int' 6
                |       `-IntegerLiteral 0x5590ecf055e8 <line:40:17> 'int' 8
                `-ParenExpr 0x5590ecf058a0 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf05878 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf05838 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf05818 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf057f8 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf057d0 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf05728 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf05708 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf056e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf056b0 <col:39> 'int' 0
                    |       `-ParenExpr 0x5590ecf057b0 <line:39:18, col:34> 'int'
                    |         `-BinaryOperator 0x5590ecf05788 <line:37:17, line:38:17> 'int' '+'
                    |           |-IntegerLiteral 0x5590ecf05748 <line:37:17> 'int' 9
                    |           `-IntegerLiteral 0x5590ecf05768 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf05858 <line:96:63> 'int' 0
TValue *rb = (k + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << (9 + 9))) << 0)))));
  26: DeclRefExpr 0x5590ecf05aa0 <lvm.c:435:23> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
g
  27: UnaryOperator 0x5590ecf05ac8 <lvm.c:435:22, col:23> 'TValue *' prefix '&'
`-DeclRefExpr 0x5590ecf05aa0 <col:23> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
&[B241.26]
  28: DeclStmt 0x5590ecf05b08 <./lobject.h:149:5, col:22>col:13
`-VarDecl 0x5590ecf05a40 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ParenExpr 0x5590ecf05ae8 <col:17, col:21> 'TValue *'
    `-UnaryOperator 0x5590ecf05ac8 <lvm.c:435:22, col:23> 'TValue *' prefix '&'
      `-DeclRefExpr 0x5590ecf05aa0 <col:23> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
TValue *i_o = (&g);
  29: DeclRefExpr 0x5590ecf05bd0 <lvm.c:435:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
  30: ImplicitCastExpr 0x5590ecf05bf8 <lvm.c:435:26> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05bd0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B241.29] (ImplicitCastExpr, LValueToRValue, LClosure *)
  31: MemberExpr 0x5590ecf05c10 <lvm.c:435:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
`-ImplicitCastExpr 0x5590ecf05bf8 <col:26> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05bd0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B241.30]->env
  32: ImplicitCastExpr 0x5590ecf05cc8 <./llimits.h:75:26, col:30> 'struct Table *' <LValueToRValue>
`-ParenExpr 0x5590ecf05ca8 <col:26, col:30> 'struct Table *' lvalue
  `-ParenExpr 0x5590ecf05c48 <./lobject.h:150:36, col:38> 'struct Table *' lvalue
    `-MemberExpr 0x5590ecf05c10 <lvm.c:435:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
      `-ImplicitCastExpr 0x5590ecf05bf8 <col:26> 'LClosure *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecf05bd0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
(([B241.31])) (ImplicitCastExpr, LValueToRValue, struct Table *)
  33: CStyleCastExpr 0x5590ecf05ce0 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x5590ecf05cc8 <col:26, col:30> 'struct Table *' <LValueToRValue>
  `-ParenExpr 0x5590ecf05ca8 <col:26, col:30> 'struct Table *' lvalue
    `-ParenExpr 0x5590ecf05c48 <./lobject.h:150:36, col:38> 'struct Table *' lvalue
      `-MemberExpr 0x5590ecf05c10 <lvm.c:435:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
        `-ImplicitCastExpr 0x5590ecf05bf8 <col:26> 'LClosure *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf05bd0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
(GCObject *)[B241.32] (CStyleCastExpr, BitCast, GCObject *)
  34: DeclRefExpr 0x5590ecf05b20 <./lobject.h:150:5> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
i_o
  35: ImplicitCastExpr 0x5590ecf05b48 <./lobject.h:150:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05b20 <col:5> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
[B241.34] (ImplicitCastExpr, LValueToRValue, TValue *)
  36: MemberExpr 0x5590ecf05b60 <./lobject.h:150:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf05b48 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05b20 <col:5> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
[B241.35]->value
  37: MemberExpr 0x5590ecf05b98 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecf05b60 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf05b48 <col:5> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf05b20 <col:5> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
[B241.36].gc
  38: BinaryOperator 0x5590ecf05d28 <./lobject.h:150:5, ./llimits.h:75:31> 'GCObject *' '='
|-MemberExpr 0x5590ecf05b98 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x5590ece76aa0
| `-MemberExpr 0x5590ecf05b60 <col:5, col:10> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf05b48 <col:5> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf05b20 <col:5> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf05d08 <./llimits.h:75:22, col:31> 'GCObject *'
  `-CStyleCastExpr 0x5590ecf05ce0 <col:23, col:30> 'GCObject *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf05cc8 <col:26, col:30> 'struct Table *' <LValueToRValue>
      `-ParenExpr 0x5590ecf05ca8 <col:26, col:30> 'struct Table *' lvalue
        `-ParenExpr 0x5590ecf05c48 <./lobject.h:150:36, col:38> 'struct Table *' lvalue
          `-MemberExpr 0x5590ecf05c10 <lvm.c:435:26, col:30> 'struct Table *' lvalue ->env 0x5590ece8fe28
            `-ImplicitCastExpr 0x5590ecf05bf8 <col:26> 'LClosure *' <LValueToRValue>
              `-DeclRefExpr 0x5590ecf05bd0 <col:26> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B241.37] = ([B241.33])
  39: IntegerLiteral 0x5590ecf05dc8 <./lua.h:79:21> 'int' 5
5
  40: DeclRefExpr 0x5590ecf05d50 <./lobject.h:150:42> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
i_o
  41: ImplicitCastExpr 0x5590ecf05d78 <./lobject.h:150:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05d50 <col:42> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
[B241.40] (ImplicitCastExpr, LValueToRValue, TValue *)
  42: MemberExpr 0x5590ecf05d90 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf05d78 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05d50 <col:42> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
[B241.41]->tt
  43: BinaryOperator 0x5590ecf05de8 <./lobject.h:150:42, ./lua.h:79:21> 'int' '='
|-MemberExpr 0x5590ecf05d90 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf05d78 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf05d50 <col:42> 'TValue *' lvalue Var 0x5590ecf05a40 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf05dc8 <./lua.h:79:21> 'int' 5
[B241.42] = [B241.39]
  44: IntegerLiteral 0x5590ecf05e10 <./llimits.h:62:31> 'int' 0
0
  45: CStyleCastExpr 0x5590ecf05e40 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf05e10 <col:31> 'int' 0
(void)[B241.44] (CStyleCastExpr, ToVoid, void)
  46: IntegerLiteral 0x5590ecf05ec8 <./llimits.h:62:31> 'int' 0
0
  47: CStyleCastExpr 0x5590ecf05ef8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf05ec8 <col:31> 'int' 0
(void)[B241.46] (CStyleCastExpr, ToVoid, void)
  48: DeclRefExpr 0x5590ecf05fb8 <lvm.c:361:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
  49: ImplicitCastExpr 0x5590ecf05fe0 <lvm.c:361:35> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05fb8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B241.48] (ImplicitCastExpr, LValueToRValue, const Instruction *)
  50: DeclRefExpr 0x5590ecf05f40 <lvm.c:361:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  51: ImplicitCastExpr 0x5590ecf05f68 <lvm.c:361:22> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05f40 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.50] (ImplicitCastExpr, LValueToRValue, lua_State *)
  52: MemberExpr 0x5590ecf05f80 <lvm.c:361:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecf05f68 <col:22> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05f40 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.51]->savedpc
  53: BinaryOperator 0x5590ecf05ff8 <lvm.c:361:22, col:35> 'const Instruction *' '='
|-MemberExpr 0x5590ecf05f80 <col:22, col:25> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecf05f68 <col:22> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf05f40 <col:22> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecf05fe0 <col:35> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05fb8 <col:35> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B241.52] = [B241.49]
  54: DeclRefExpr 0x5590ecf06020 <lvm.c:437:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
luaV_gettable
  55: ImplicitCastExpr 0x5590ecf06168 <lvm.c:437:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecf06020 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
[B241.54] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, TValue *, StkId))
  56: DeclRefExpr 0x5590ecf06048 <lvm.c:437:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  57: ImplicitCastExpr 0x5590ecf061c8 <lvm.c:437:31> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf06048 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.56] (ImplicitCastExpr, LValueToRValue, lua_State *)
  58: DeclRefExpr 0x5590ecf06070 <lvm.c:437:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
g
  59: UnaryOperator 0x5590ecf06098 <lvm.c:437:34, col:35> 'TValue *' prefix '&'
`-DeclRefExpr 0x5590ecf06070 <col:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
&[B241.58]
  60: ImplicitCastExpr 0x5590ecf061e0 <lvm.c:437:34, col:35> 'const TValue *' <BitCast>
`-UnaryOperator 0x5590ecf06098 <col:34, col:35> 'TValue *' prefix '&'
  `-DeclRefExpr 0x5590ecf06070 <col:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
[B241.59] (ImplicitCastExpr, BitCast, const TValue *)
  61: DeclRefExpr 0x5590ecf060b8 <lvm.c:437:38> 'TValue *' lvalue Var 0x5590ecf05490 'rb' 'TValue *'
rb
  62: ImplicitCastExpr 0x5590ecf061f8 <lvm.c:437:38> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf060b8 <col:38> 'TValue *' lvalue Var 0x5590ecf05490 'rb' 'TValue *'
[B241.61] (ImplicitCastExpr, LValueToRValue, TValue *)
  63: DeclRefExpr 0x5590ecf060e0 <lvm.c:437:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  64: ImplicitCastExpr 0x5590ecf06210 <lvm.c:437:42> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf060e0 <col:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B241.63] (ImplicitCastExpr, LValueToRValue, StkId)
  65: CallExpr 0x5590ecf06180 <lvm.c:437:17, col:44> 'void'
|-ImplicitCastExpr 0x5590ecf06168 <col:17> 'void (*)(lua_State *, const TValue *, TValue *, StkId)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecf06020 <col:17> 'void (lua_State *, const TValue *, TValue *, StkId)' Function 0x5590ecedd3e0 'luaV_gettable' 'void (lua_State *, const TValue *, TValue *, StkId)'
|-ImplicitCastExpr 0x5590ecf061c8 <col:31> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf06048 <col:31> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
|-ImplicitCastExpr 0x5590ecf061e0 <col:34, col:35> 'const TValue *' <BitCast>
| `-UnaryOperator 0x5590ecf06098 <col:34, col:35> 'TValue *' prefix '&'
|   `-DeclRefExpr 0x5590ecf06070 <col:35> 'TValue':'struct lua_TValue' lvalue Var 0x5590ecf05408 'g' 'TValue':'struct lua_TValue'
|-ImplicitCastExpr 0x5590ecf061f8 <col:38> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf060b8 <col:38> 'TValue *' lvalue Var 0x5590ecf05490 'rb' 'TValue *'
`-ImplicitCastExpr 0x5590ecf06210 <col:42> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf060e0 <col:42> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B241.55]([B241.57], [B241.60], [B241.62], [B241.64])
  66: DeclRefExpr 0x5590ecf06278 <lvm.c:361:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  67: ImplicitCastExpr 0x5590ecf062a0 <lvm.c:361:52> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf06278 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.66] (ImplicitCastExpr, LValueToRValue, lua_State *)
  68: MemberExpr 0x5590ecf062b8 <lvm.c:361:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecf062a0 <col:52> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf06278 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.67]->base
  69: ImplicitCastExpr 0x5590ecf062f0 <lvm.c:361:52, col:55> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecf062b8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecf062a0 <col:52> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf06278 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.68] (ImplicitCastExpr, LValueToRValue, StkId)
  70: DeclRefExpr 0x5590ecf06250 <lvm.c:361:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  71: BinaryOperator 0x5590ecf06308 <lvm.c:361:45, col:55> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecf06250 <col:45> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecf062f0 <col:52, col:55> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecf062b8 <col:52, col:55> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecf062a0 <col:52> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf06278 <col:52> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B241.70] = [B241.69]
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B242]
  case OP_GETUPVAL:
   1: DeclRefExpr 0x5590ecf04808 <lvm.c:428:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   2: ImplicitCastExpr 0x5590ecf049a8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf04830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf04808 <lvm.c:428:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B242.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x5590ecf04850 <./lopcodes.h:44:17> 'int' 0
0
   4: IntegerLiteral 0x5590ecf04870 <./lopcodes.h:42:18> 'int' 6
6
   5: BinaryOperator 0x5590ecf04890 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
[B242.3] + [B242.4]
   6: IntegerLiteral 0x5590ecf048d8 <./lopcodes.h:40:17> 'int' 8
8
   7: BinaryOperator 0x5590ecf048f8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf048b8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf04890 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf048d8 <line:40:17> 'int' 8
([B242.5]) + [B242.6]
   8: IntegerLiteral 0x5590ecf04940 <./lopcodes.h:37:17> 'int' 9
9
   9: BinaryOperator 0x5590ecf04960 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf04920 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf048f8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf048b8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf04890 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf048d8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf04940 <line:37:17> 'int' 9
([B242.7]) + [B242.8]
  10: BinaryOperator 0x5590ecf049c0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf049a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf04830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf04808 <lvm.c:428:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf04988 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf04960 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf04920 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf048f8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf048b8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf04890 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf048d8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf04940 <line:37:17> 'int' 9
[B242.2] >> ([B242.9])
  11: IntegerLiteral 0x5590ecf04a08 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590ecf04a38 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
(Instruction)[B242.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590ecf04a60 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
~[B242.12]
  14: IntegerLiteral 0x5590ecf04aa0 <./lopcodes.h:38:17> 'int' 9
9
  15: BinaryOperator 0x5590ecf04ac0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf04a80 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf04a60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf04aa0 <line:38:17> 'int' 9
([B242.13]) << [B242.14]
  16: UnaryOperator 0x5590ecf04b08 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf04ae8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf04ac0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf04a80 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf04a60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf04aa0 <line:38:17> 'int' 9
~([B242.15])
  17: IntegerLiteral 0x5590ecf04b48 <./lopcodes.h:88:60> 'int' 0
0
  18: BinaryOperator 0x5590ecf04b80 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf04b28 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf04b08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf04ae8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf04ac0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf04a80 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf04a60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf04aa0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf04b48 <line:88:60> 'int' 0
([B242.16]) << [B242.17]
  19: BinaryOperator 0x5590ecf04bc8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf049e8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf049c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf049a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf04830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf04808 <lvm.c:428:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf04988 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf04960 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf04920 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf048f8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf048b8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf04890 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf048d8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf04940 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf04ba8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf04b80 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf04b28 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf04b08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf04ae8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf04ac0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf04a80 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf04a60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf04aa0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf04b48 <line:88:60> 'int' 0
([B242.10]) & ([B242.18])
  20: CStyleCastExpr 0x5590ecf04c58 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf04c38 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf04bc8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf049e8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf049c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf049a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf04830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf04808 <lvm.c:428:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf04988 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf04960 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf04920 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf048f8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf048b8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf04890 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf048d8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf04940 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf04ba8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf04b80 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf04b28 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf04b08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf04ae8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf04ac0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf04a80 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf04a60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf04aa0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf04b48 <line:88:60> 'int' 0
(int)([B242.19]) (CStyleCastExpr, IntegralCast, int)
  21: DeclStmt 0x5590ecf04cc0 <lvm.c:428:9, col:28>col:13
`-VarDecl 0x5590ecf047a8 <col:9, ./lopcodes.h:88:63> lvm.c:428:13 used b 'int' cinit
  `-ParenExpr 0x5590ecf04ca0 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf04c80 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf04c58 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf04c38 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf04bc8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf049e8 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf049c0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf049a8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf04830 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf04808 <lvm.c:428:26> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf04988 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf04960 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf04920 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf048f8 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf048b8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf04890 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf04850 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf04870 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf048d8 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf04940 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf04ba8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf04b80 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf04b28 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf04b08 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf04ae8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf04ac0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf04a80 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf04a60 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf04a38 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf04a08 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf04aa0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf04b48 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  22: DeclRefExpr 0x5590ecf04d48 <lvm.c:429:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
  23: ImplicitCastExpr 0x5590ecf04d70 <lvm.c:429:25> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B242.22] (ImplicitCastExpr, LValueToRValue, LClosure *)
  24: MemberExpr 0x5590ecf04d88 <lvm.c:429:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
`-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B242.23]->upvals
  25: ImplicitCastExpr 0x5590ecf04e48 <lvm.c:429:25, col:29> 'UpVal **' <ArrayToPointerDecay>
`-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
  `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B242.24] (ImplicitCastExpr, ArrayToPointerDecay, UpVal **)
  26: DeclRefExpr 0x5590ecf04dc0 <lvm.c:429:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
b
  27: ImplicitCastExpr 0x5590ecf04e60 <lvm.c:429:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
[B242.26] (ImplicitCastExpr, LValueToRValue, int)
  28: ArraySubscriptExpr 0x5590ecf04e78 <lvm.c:429:25, col:37> 'UpVal *' lvalue
|-ImplicitCastExpr 0x5590ecf04e48 <col:25, col:29> 'UpVal **' <ArrayToPointerDecay>
| `-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
|   `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
`-ImplicitCastExpr 0x5590ecf04e60 <col:36> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
[B242.25][[B242.27]]
  29: ImplicitCastExpr 0x5590ecf04ea0 <lvm.c:429:25, col:37> 'UpVal *' <LValueToRValue>
`-ArraySubscriptExpr 0x5590ecf04e78 <col:25, col:37> 'UpVal *' lvalue
  |-ImplicitCastExpr 0x5590ecf04e48 <col:25, col:29> 'UpVal **' <ArrayToPointerDecay>
  | `-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
  |   `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
  |     `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
  `-ImplicitCastExpr 0x5590ecf04e60 <col:36> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
[B242.28] (ImplicitCastExpr, LValueToRValue, UpVal *)
  30: MemberExpr 0x5590ecf04eb8 <lvm.c:429:25, col:40> 'TValue *' lvalue ->v 0x5590ece8d428
`-ImplicitCastExpr 0x5590ecf04ea0 <col:25, col:37> 'UpVal *' <LValueToRValue>
  `-ArraySubscriptExpr 0x5590ecf04e78 <col:25, col:37> 'UpVal *' lvalue
    |-ImplicitCastExpr 0x5590ecf04e48 <col:25, col:29> 'UpVal **' <ArrayToPointerDecay>
    | `-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
    |   `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
    |     `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
    `-ImplicitCastExpr 0x5590ecf04e60 <col:36> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
[B242.29]->v
  31: ImplicitCastExpr 0x5590ecf04f10 <./lobject.h:162:22, col:27> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf04ef0 <col:22, col:27> 'TValue *' lvalue
  `-MemberExpr 0x5590ecf04eb8 <lvm.c:429:25, col:40> 'TValue *' lvalue ->v 0x5590ece8d428
    `-ImplicitCastExpr 0x5590ecf04ea0 <col:25, col:37> 'UpVal *' <LValueToRValue>
      `-ArraySubscriptExpr 0x5590ecf04e78 <col:25, col:37> 'UpVal *' lvalue
        |-ImplicitCastExpr 0x5590ecf04e48 <col:25, col:29> 'UpVal **' <ArrayToPointerDecay>
        | `-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
        |   `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
        |     `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
        `-ImplicitCastExpr 0x5590ecf04e60 <col:36> 'int' <LValueToRValue>
          `-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
([B242.30]) (ImplicitCastExpr, LValueToRValue, TValue *)
  32: ImplicitCastExpr 0x5590ecf04f28 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590ecf04f10 <col:22, col:27> 'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecf04ef0 <col:22, col:27> 'TValue *' lvalue
    `-MemberExpr 0x5590ecf04eb8 <lvm.c:429:25, col:40> 'TValue *' lvalue ->v 0x5590ece8d428
      `-ImplicitCastExpr 0x5590ecf04ea0 <col:25, col:37> 'UpVal *' <LValueToRValue>
        `-ArraySubscriptExpr 0x5590ecf04e78 <col:25, col:37> 'UpVal *' lvalue
          |-ImplicitCastExpr 0x5590ecf04e48 <col:25, col:29> 'UpVal **' <ArrayToPointerDecay>
          | `-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
          |   `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
          |     `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
          `-ImplicitCastExpr 0x5590ecf04e60 <col:36> 'int' <LValueToRValue>
            `-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
[B242.31] (ImplicitCastExpr, BitCast, const TValue *)
  33: DeclStmt 0x5590ecf04f40 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecf04ce8 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf04f28 <col:22, col:27> 'const TValue *' <BitCast>
    `-ImplicitCastExpr 0x5590ecf04f10 <col:22, col:27> 'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecf04ef0 <col:22, col:27> 'TValue *' lvalue
        `-MemberExpr 0x5590ecf04eb8 <lvm.c:429:25, col:40> 'TValue *' lvalue ->v 0x5590ece8d428
          `-ImplicitCastExpr 0x5590ecf04ea0 <col:25, col:37> 'UpVal *' <LValueToRValue>
            `-ArraySubscriptExpr 0x5590ecf04e78 <col:25, col:37> 'UpVal *' lvalue
              |-ImplicitCastExpr 0x5590ecf04e48 <col:25, col:29> 'UpVal **' <ArrayToPointerDecay>
              | `-MemberExpr 0x5590ecf04d88 <col:25, col:29> 'UpVal *[1]' lvalue ->upvals 0x5590ece8ffe8
              |   `-ImplicitCastExpr 0x5590ecf04d70 <col:25> 'LClosure *' <LValueToRValue>
              |     `-DeclRefExpr 0x5590ecf04d48 <col:25> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
              `-ImplicitCastExpr 0x5590ecf04e60 <col:36> 'int' <LValueToRValue>
                `-DeclRefExpr 0x5590ecf04dc0 <col:36> 'int' lvalue Var 0x5590ecf047a8 'b' 'int'
const TValue *o2 = (cl->upvals[b]->v);
  34: DeclRefExpr 0x5590ecf04fc8 <lvm.c:429:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  35: ImplicitCastExpr 0x5590ecf05010 <./lobject.h:162:41, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf04ff0 <col:41, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf04fc8 <lvm.c:429:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B242.34]) (ImplicitCastExpr, LValueToRValue, StkId)
  36: DeclStmt 0x5590ecf05028 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf04f68 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf05010 <col:41, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf04ff0 <col:41, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf04fc8 <lvm.c:429:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *o1 = (ra);
  37: DeclRefExpr 0x5590ecf050b8 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
o2
  38: ImplicitCastExpr 0x5590ecf050e0 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf050b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.37] (ImplicitCastExpr, LValueToRValue, const TValue *)
  39: MemberExpr 0x5590ecf050f8 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf050e0 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf050b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.38]->value
  40: ImplicitCastExpr 0x5590ecf05130 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf050f8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf050e0 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf050b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.39] (ImplicitCastExpr, LValueToRValue, Value)
  41: DeclRefExpr 0x5590ecf05040 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
o1
  42: ImplicitCastExpr 0x5590ecf05068 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05040 <col:5> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
[B242.41] (ImplicitCastExpr, LValueToRValue, TValue *)
  43: MemberExpr 0x5590ecf05080 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf05068 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05040 <col:5> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
[B242.42]->value
  44: BinaryOperator 0x5590ecf05148 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf05080 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf05068 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf05040 <col:5> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf05130 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf050f8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf050e0 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf050b8 <col:17> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.43] = [B242.40]
  45: DeclRefExpr 0x5590ecf051e8 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
o2
  46: ImplicitCastExpr 0x5590ecf05210 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf051e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.45] (ImplicitCastExpr, LValueToRValue, const TValue *)
  47: MemberExpr 0x5590ecf05228 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf05210 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf051e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.46]->tt
  48: ImplicitCastExpr 0x5590ecf05260 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf05228 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf05210 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf051e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.47] (ImplicitCastExpr, LValueToRValue, int)
  49: DeclRefExpr 0x5590ecf05170 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
o1
  50: ImplicitCastExpr 0x5590ecf05198 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf05170 <col:28> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
[B242.49] (ImplicitCastExpr, LValueToRValue, TValue *)
  51: MemberExpr 0x5590ecf051b0 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf05198 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf05170 <col:28> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
[B242.50]->tt
  52: BinaryOperator 0x5590ecf05278 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf051b0 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf05198 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf05170 <col:28> 'TValue *' lvalue Var 0x5590ecf04f68 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf05260 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf05228 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf05210 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf051e8 <col:35> 'const TValue *' lvalue Var 0x5590ecf04ce8 'o2' 'const TValue *'
[B242.51] = [B242.48]
  53: IntegerLiteral 0x5590ecf052a0 <./llimits.h:62:31> 'int' 0
0
  54: CStyleCastExpr 0x5590ecf052d0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf052a0 <col:31> 'int' 0
(void)[B242.53] (CStyleCastExpr, ToVoid, void)
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B243]
   T: continue;
   Preds (1): B244
   Succs (1): B1

 [B244]
   1: DeclRefExpr 0x5590ecf04638 <lvm.c:424:18> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
rb
   2: ImplicitCastExpr 0x5590ecf04688 <lvm.c:424:18> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf04638 <col:18> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
[B244.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590ecf04660 <lvm.c:424:24> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   4: ImplicitCastExpr 0x5590ecf046a0 <lvm.c:424:24> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf04660 <col:24> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B244.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: BinaryOperator 0x5590ecf046b8 <lvm.c:424:18, col:24> 'int' '>='
|-ImplicitCastExpr 0x5590ecf04688 <col:18> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf04638 <col:18> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
`-ImplicitCastExpr 0x5590ecf046a0 <col:24> 'StkId':'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf04660 <col:24> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
[B244.2] >= [B244.4]
   T: do ... while [B244.5]
   Preds (1): B245
   Succs (2): B246 B243

 [B245]
   1: IntegerLiteral 0x5590ecf045b8 <./lua.h:74:19> 'int' 0
0
   2: DeclRefExpr 0x5590ecf04518 <lvm.c:423:23> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
rb
   3: UnaryOperator 0x5590ecf04540 <lvm.c:423:23, col:25> 'TValue *' postfix '--'
`-DeclRefExpr 0x5590ecf04518 <col:23> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
[B245.2]--
   4: MemberExpr 0x5590ecf04580 <./lobject.h:117:27, col:34> 'int' lvalue ->tt 0x5590ece76e00
`-ParenExpr 0x5590ecf04560 <col:27, col:31> 'TValue *'
  `-UnaryOperator 0x5590ecf04540 <lvm.c:423:23, col:25> 'TValue *' postfix '--'
    `-DeclRefExpr 0x5590ecf04518 <col:23> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
([B245.3])->tt
   5: BinaryOperator 0x5590ecf045d8 <./lobject.h:117:27, ./lua.h:74:19> 'int' '='
|-MemberExpr 0x5590ecf04580 <./lobject.h:117:27, col:34> 'int' lvalue ->tt 0x5590ece76e00
| `-ParenExpr 0x5590ecf04560 <col:27, col:31> 'TValue *'
|   `-UnaryOperator 0x5590ecf04540 <lvm.c:423:23, col:25> 'TValue *' postfix '--'
|     `-DeclRefExpr 0x5590ecf04518 <col:23> 'TValue *' lvalue Var 0x5590ecf03f78 'rb' 'TValue *'
`-IntegerLiteral 0x5590ecf045b8 <./lua.h:74:19> 'int' 0
[B245.4] = [B245.1]
   Preds (2): B246 B247
   Succs (1): B244

 [B246]
   Preds (1): B244
   Succs (1): B245

 [B247]
  case OP_LOADNIL:
   1: DeclRefExpr 0x5590ecf03fd8 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecf044a0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf03fd8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B247.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecf041a0 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf04028 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B247.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecf04048 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecf04068 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecf04088 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
[B247.5] + [B247.6]
   8: IntegerLiteral 0x5590ecf040d0 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecf040f0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
([B247.7]) + [B247.8]
  10: IntegerLiteral 0x5590ecf04138 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecf04158 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf04118 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf040f0 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf04138 <line:37:17> 'int' 9
([B247.9]) + [B247.10]
  12: BinaryOperator 0x5590ecf041b8 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf041a0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf04028 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf04180 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf04158 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf04118 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf040f0 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf04138 <line:37:17> 'int' 9
[B247.4] >> ([B247.11])
  13: IntegerLiteral 0x5590ecf04200 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecf04230 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
(Instruction)[B247.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecf04258 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
~[B247.14]
  16: IntegerLiteral 0x5590ecf04298 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecf042b8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
([B247.15]) << [B247.16]
  18: UnaryOperator 0x5590ecf04300 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf042e0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf042b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
~([B247.17])
  19: IntegerLiteral 0x5590ecf04340 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecf04360 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf04320 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf04300 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf042e0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf042b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf04340 <line:88:60> 'int' 0
([B247.18]) << [B247.19]
  21: BinaryOperator 0x5590ecf043a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf041e0 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf041b8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf041a0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf04028 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf04180 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf04158 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf04118 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf040f0 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf04138 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf04388 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf04360 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf04320 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf04300 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf042e0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf042b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf04340 <line:88:60> 'int' 0
([B247.12]) & ([B247.20])
  22: CStyleCastExpr 0x5590ecf04438 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf04418 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf043a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf041e0 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf041b8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf041a0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf04028 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf04180 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf04158 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf04118 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf040f0 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf04138 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf04388 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf04360 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf04320 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf04300 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf042e0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf042b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf04340 <line:88:60> 'int' 0
(int)([B247.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf044b8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf044a0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecf03fd8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecf04480 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecf04460 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf04438 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf04418 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf043a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecf041e0 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecf041b8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecf041a0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecf04028 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecf04180 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecf04158 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecf04118 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecf040f0 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecf04138 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecf04388 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf04360 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf04320 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf04300 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf042e0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf042b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf04340 <line:88:60> 'int' 0
[B247.2] + (([B247.22]))
  24: DeclStmt 0x5590ecf04500 <lvm.c:421:9, col:27>col:17
`-VarDecl 0x5590ecf03f78 <col:9, ./llimits.h:63:27> lvm.c:421:17 used rb 'TValue *' cinit
  `-ParenExpr 0x5590ecf044e0 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecf044b8 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf044a0 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecf03fd8 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecf04480 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecf04460 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf04438 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf04418 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf043a8 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecf041e0 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecf041b8 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecf041a0 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecf04028 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecf04000 <lvm.c:421:25> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecf04180 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecf04158 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecf04118 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecf040f0 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecf040b0 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecf04088 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecf04048 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecf04068 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecf040d0 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecf04138 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecf04388 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf04360 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf04320 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf04300 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf042e0 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf042b8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecf04278 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecf04258 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecf04230 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecf04200 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecf04298 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf04340 <line:88:60> 'int' 0
TValue *rb = (base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0)))));
   Preds (1): B2
   Succs (1): B245

 [B248]
   T: continue;
   Preds (2): B249 B250
   Succs (1): B1

 [B249]
   1: DeclRefExpr 0x5590ecf03e50 <lvm.c:417:26> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: UnaryOperator 0x5590ecf03e78 <lvm.c:417:26, col:28> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecf03e50 <col:26> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B249.1]++
   Preds (1): B250
   Succs (1): B248

 [B250]
  case OP_LOADBOOL:
   1: DeclRefExpr 0x5590ecf03310 <lvm.c:416:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
   2: ImplicitCastExpr 0x5590ecf03358 <./lobject.h:126:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf03338 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf03310 <lvm.c:416:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B250.1]) (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclStmt 0x5590ecf03370 <./lobject.h:126:5, col:22>col:13
`-VarDecl 0x5590ecf032b0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf03358 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf03338 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf03310 <lvm.c:416:19> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *i_o = (ra);
   4: DeclRefExpr 0x5590ecf03438 <lvm.c:416:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   5: ImplicitCastExpr 0x5590ecf035d8 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf03460 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf03438 <lvm.c:416:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B250.4]) (ImplicitCastExpr, LValueToRValue, Instruction)
   6: IntegerLiteral 0x5590ecf03480 <./lopcodes.h:44:17> 'int' 0
0
   7: IntegerLiteral 0x5590ecf034a0 <./lopcodes.h:42:18> 'int' 6
6
   8: BinaryOperator 0x5590ecf034c0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
[B250.6] + [B250.7]
   9: IntegerLiteral 0x5590ecf03508 <./lopcodes.h:40:17> 'int' 8
8
  10: BinaryOperator 0x5590ecf03528 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf034e8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf034c0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf03508 <line:40:17> 'int' 8
([B250.8]) + [B250.9]
  11: IntegerLiteral 0x5590ecf03570 <./lopcodes.h:37:17> 'int' 9
9
  12: BinaryOperator 0x5590ecf03590 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecf03550 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecf03528 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecf034e8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecf034c0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecf03508 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecf03570 <line:37:17> 'int' 9
([B250.10]) + [B250.11]
  13: BinaryOperator 0x5590ecf035f0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf035d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf03460 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf03438 <lvm.c:416:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf035b8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf03590 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecf03550 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecf03528 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecf034e8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecf034c0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecf03508 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecf03570 <line:37:17> 'int' 9
[B250.5] >> ([B250.12])
  14: IntegerLiteral 0x5590ecf03638 <./lopcodes.h:71:39> 'int' 0
0
  15: CStyleCastExpr 0x5590ecf03668 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
(Instruction)[B250.14] (CStyleCastExpr, IntegralCast, Instruction)
  16: UnaryOperator 0x5590ecf03690 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
~[B250.15]
  17: IntegerLiteral 0x5590ecf036d0 <./lopcodes.h:38:17> 'int' 9
9
  18: BinaryOperator 0x5590ecf036f0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf036b0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf03690 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf036d0 <line:38:17> 'int' 9
([B250.16]) << [B250.17]
  19: UnaryOperator 0x5590ecf03738 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf03718 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf036f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf036b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf03690 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf036d0 <line:38:17> 'int' 9
~([B250.18])
  20: IntegerLiteral 0x5590ecf03778 <./lopcodes.h:88:60> 'int' 0
0
  21: BinaryOperator 0x5590ecf03798 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf03758 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf03738 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf03718 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf036f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf036b0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf03690 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf036d0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf03778 <line:88:60> 'int' 0
([B250.19]) << [B250.20]
  22: BinaryOperator 0x5590ecf037e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf03618 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf035f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf035d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf03460 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf03438 <lvm.c:416:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf035b8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf03590 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecf03550 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecf03528 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecf034e8 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecf034c0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecf03508 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecf03570 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecf037c0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf03798 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf03758 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf03738 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf03718 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf036f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf036b0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf03690 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf036d0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf03778 <line:88:60> 'int' 0
([B250.13]) & ([B250.21])
  23: CStyleCastExpr 0x5590ecf03870 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf03850 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf037e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf03618 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf035f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf035d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf03460 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf03438 <lvm.c:416:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf035b8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf03590 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf03550 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecf03528 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecf034e8 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecf034c0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecf03508 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecf03570 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecf037c0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf03798 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf03758 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf03738 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf03718 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf036f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf036b0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf03690 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf036d0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf03778 <line:88:60> 'int' 0
(int)([B250.22]) (CStyleCastExpr, IntegralCast, int)
  24: DeclRefExpr 0x5590ecf03388 <./lobject.h:126:24> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
i_o
  25: ImplicitCastExpr 0x5590ecf033b0 <./lobject.h:126:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf03388 <col:24> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
[B250.24] (ImplicitCastExpr, LValueToRValue, TValue *)
  26: MemberExpr 0x5590ecf033c8 <./lobject.h:126:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf033b0 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf03388 <col:24> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
[B250.25]->value
  27: MemberExpr 0x5590ecf03400 <./lobject.h:126:24, col:35> 'int' lvalue .b 0x5590ece76bb8
`-MemberExpr 0x5590ecf033c8 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf033b0 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf03388 <col:24> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
[B250.26].b
  28: BinaryOperator 0x5590ecf038f8 <./lobject.h:126:24, col:39> 'int' '='
|-MemberExpr 0x5590ecf03400 <col:24, col:35> 'int' lvalue .b 0x5590ece76bb8
| `-MemberExpr 0x5590ecf033c8 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590ecf033b0 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecf03388 <col:24> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
`-ParenExpr 0x5590ecf038d8 <col:37, col:39> 'int'
  `-ParenExpr 0x5590ecf038b8 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x5590ecf03898 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x5590ecf03870 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x5590ecf03850 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x5590ecf037e0 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x5590ecf03618 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x5590ecf035f0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x5590ecf035d8 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x5590ecf03460 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
            |   |   `-DeclRefExpr 0x5590ecf03438 <lvm.c:416:32> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
            |   `-ParenExpr 0x5590ecf035b8 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x5590ecf03590 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x5590ecf03550 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x5590ecf03528 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x5590ecf034e8 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x5590ecf034c0 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x5590ecf03480 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x5590ecf034a0 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x5590ecf03508 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x5590ecf03570 <line:37:17> 'int' 9
            `-ParenExpr 0x5590ecf037c0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x5590ecf03798 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x5590ecf03758 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x5590ecf03738 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x5590ecf03718 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x5590ecf036f0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x5590ecf036b0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x5590ecf03690 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x5590ecf03668 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x5590ecf03638 <col:39> 'int' 0
                |       `-IntegerLiteral 0x5590ecf036d0 <line:38:17> 'int' 9
                `-IntegerLiteral 0x5590ecf03778 <line:88:60> 'int' 0
[B250.27] = ((([B250.23])))
  29: IntegerLiteral 0x5590ecf03998 <./lua.h:75:23> 'int' 1
1
  30: DeclRefExpr 0x5590ecf03920 <./lobject.h:126:42> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
i_o
  31: ImplicitCastExpr 0x5590ecf03948 <./lobject.h:126:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf03920 <col:42> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
[B250.30] (ImplicitCastExpr, LValueToRValue, TValue *)
  32: MemberExpr 0x5590ecf03960 <./lobject.h:126:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf03948 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf03920 <col:42> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
[B250.31]->tt
  33: BinaryOperator 0x5590ecf039b8 <./lobject.h:126:42, ./lua.h:75:23> 'int' '='
|-MemberExpr 0x5590ecf03960 <./lobject.h:126:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf03948 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf03920 <col:42> 'TValue *' lvalue Var 0x5590ecf032b0 'i_o' 'TValue *'
`-IntegerLiteral 0x5590ecf03998 <./lua.h:75:23> 'int' 1
[B250.32] = [B250.29]
  34: DeclRefExpr 0x5590ecf03a18 <lvm.c:417:22> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
  35: ImplicitCastExpr 0x5590ecf03b50 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecf03a40 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecf03a18 <lvm.c:417:22> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B250.34]) (ImplicitCastExpr, LValueToRValue, Instruction)
  36: IntegerLiteral 0x5590ecf03a60 <./lopcodes.h:44:17> 'int' 0
0
  37: IntegerLiteral 0x5590ecf03a80 <./lopcodes.h:42:18> 'int' 6
6
  38: BinaryOperator 0x5590ecf03aa0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecf03a60 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecf03a80 <line:42:18> 'int' 6
[B250.36] + [B250.37]
  39: IntegerLiteral 0x5590ecf03ae8 <./lopcodes.h:40:17> 'int' 8
8
  40: BinaryOperator 0x5590ecf03b08 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecf03ac8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecf03aa0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecf03a60 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecf03a80 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecf03ae8 <line:40:17> 'int' 8
([B250.38]) + [B250.39]
  41: BinaryOperator 0x5590ecf03b68 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecf03b50 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecf03a40 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecf03a18 <lvm.c:417:22> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecf03b30 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590ecf03b08 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590ecf03ac8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590ecf03aa0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590ecf03a60 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590ecf03a80 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590ecf03ae8 <line:40:17> 'int' 8
[B250.35] >> ([B250.40])
  42: IntegerLiteral 0x5590ecf03bb0 <./lopcodes.h:71:39> 'int' 0
0
  43: CStyleCastExpr 0x5590ecf03be0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
(Instruction)[B250.42] (CStyleCastExpr, IntegralCast, Instruction)
  44: UnaryOperator 0x5590ecf03c08 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecf03be0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
~[B250.43]
  45: IntegerLiteral 0x5590ecf03c48 <./lopcodes.h:37:17> 'int' 9
9
  46: BinaryOperator 0x5590ecf03c68 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf03c28 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf03c08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecf03be0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecf03c48 <line:37:17> 'int' 9
([B250.44]) << [B250.45]
  47: UnaryOperator 0x5590ecf03cb0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf03c90 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf03c68 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf03c28 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf03c08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecf03be0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecf03c48 <line:37:17> 'int' 9
~([B250.46])
  48: IntegerLiteral 0x5590ecf03cf0 <./lopcodes.h:92:60> 'int' 0
0
  49: BinaryOperator 0x5590ecf03d10 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf03cd0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf03cb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf03c90 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf03c68 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecf03c28 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecf03c08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecf03be0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecf03c48 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590ecf03cf0 <line:92:60> 'int' 0
([B250.47]) << [B250.48]
  50: BinaryOperator 0x5590ecf03d58 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecf03b90 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecf03b68 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecf03b50 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecf03a40 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecf03a18 <lvm.c:417:22> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecf03b30 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecf03b08 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590ecf03ac8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590ecf03aa0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590ecf03a60 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590ecf03a80 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590ecf03ae8 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf03d38 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf03d10 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf03cd0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf03cb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf03c90 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf03c68 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecf03c28 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecf03c08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecf03be0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecf03c48 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590ecf03cf0 <line:92:60> 'int' 0
([B250.41]) & ([B250.49])
  51: CStyleCastExpr 0x5590ecf03de8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf03dc8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf03d58 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecf03b90 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecf03b68 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecf03b50 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecf03a40 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecf03a18 <lvm.c:417:22> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecf03b30 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecf03b08 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590ecf03ac8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590ecf03aa0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590ecf03a60 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590ecf03a80 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590ecf03ae8 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf03d38 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf03d10 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf03cd0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf03cb0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf03c90 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf03c68 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecf03c28 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecf03c08 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecf03be0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecf03bb0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecf03c48 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590ecf03cf0 <line:92:60> 'int' 0
(int)([B250.50]) (CStyleCastExpr, IntegralCast, int)
   T: if (([B250.51]))
   Preds (1): B2
   Succs (2): B249 B248

 [B251]
  case OP_LOADK:
   1: DeclRefExpr 0x5590eceff240 <lvm.c:355:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
   2: ImplicitCastExpr 0x5590ecf02d58 <lvm.c:355:61> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590eceff240 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
[B251.1] (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590eceff3a0 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B251.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590eceff2b0 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590eceff2d0 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590eceff2f0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
[B251.5] + [B251.6]
   8: IntegerLiteral 0x5590eceff338 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590eceff358 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
([B251.7]) + [B251.8]
  10: BinaryOperator 0x5590eceff3b8 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590eceff3a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590eceff380 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5590eceff358 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
[B251.4] >> ([B251.9])
  11: IntegerLiteral 0x5590eceff400 <./lopcodes.h:71:39> 'int' 0
0
  12: CStyleCastExpr 0x5590eceff430 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
(Instruction)[B251.11] (CStyleCastExpr, IntegralCast, Instruction)
  13: UnaryOperator 0x5590eceff458 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
~[B251.12]
  14: IntegerLiteral 0x5590eceff498 <./lopcodes.h:37:17> 'int' 9
9
  15: IntegerLiteral 0x5590eceff4b8 <./lopcodes.h:38:17> 'int' 9
9
  16: BinaryOperator 0x5590eceff4d8 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
`-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
[B251.14] + [B251.15]
  17: BinaryOperator 0x5590ecf02b70 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
`-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
([B251.13]) << ([B251.16])
  18: UnaryOperator 0x5590ecf02bb8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
    `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
~([B251.17])
  19: IntegerLiteral 0x5590ecf02bf8 <./lopcodes.h:96:63> 'int' 0
0
  20: BinaryOperator 0x5590ecf02c18 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecf02bd8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecf02bb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
|       `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecf02bf8 <line:96:63> 'int' 0
([B251.18]) << [B251.19]
  21: BinaryOperator 0x5590ecf02c60 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590eceff3e0 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590eceff3b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590eceff3a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590eceff380 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5590eceff358 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
`-ParenExpr 0x5590ecf02c40 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecf02c18 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecf02bd8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecf02bb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
    |       `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecf02bf8 <line:96:63> 'int' 0
([B251.10]) & ([B251.20])
  22: CStyleCastExpr 0x5590ecf02cf0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecf02cd0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecf02c60 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590eceff3e0 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590eceff3b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590eceff3a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590eceff380 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5590eceff358 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
    `-ParenExpr 0x5590ecf02c40 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecf02c18 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecf02bd8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecf02bb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
        |       `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecf02bf8 <line:96:63> 'int' 0
(int)([B251.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecf02d70 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
|-ImplicitCastExpr 0x5590ecf02d58 <lvm.c:355:61> 'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590eceff240 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ParenExpr 0x5590ecf02d38 <./lopcodes.h:96:22, col:66> 'int'
  `-ParenExpr 0x5590ecf02d18 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecf02cf0 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecf02cd0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecf02c60 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590eceff3e0 <line:96:33, col:45> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590eceff3b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590eceff3a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590eceff380 <./lopcodes.h:46:16, col:31> 'int'
          |     `-BinaryOperator 0x5590eceff358 <line:45:16, line:40:17> 'int' '+'
          |       |-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
          |       | `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
          |       |   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
          |       |   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
          |       `-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
          `-ParenExpr 0x5590ecf02c40 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecf02c18 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecf02bd8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecf02bb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
              |       `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
              |         `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
              |           |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
              |           `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecf02bf8 <line:96:63> 'int' 0
[B251.2] + (([B251.22]))
  24: ImplicitCastExpr 0x5590ecf02dd8 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecf02db8 <col:22, col:27> 'TValue *'
  `-ParenExpr 0x5590ecf02d98 <./llimits.h:63:25, col:27> 'TValue *'
    `-BinaryOperator 0x5590ecf02d70 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecf02d58 <lvm.c:355:61> 'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590eceff240 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
      `-ParenExpr 0x5590ecf02d38 <./lopcodes.h:96:22, col:66> 'int'
        `-ParenExpr 0x5590ecf02d18 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecf02cf0 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecf02cd0 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecf02c60 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590eceff3e0 <line:96:33, col:45> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590eceff3b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590eceff3a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590eceff380 <./lopcodes.h:46:16, col:31> 'int'
                |     `-BinaryOperator 0x5590eceff358 <line:45:16, line:40:17> 'int' '+'
                |       |-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
                |       | `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
                |       |   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
                |       |   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
                |       `-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
                `-ParenExpr 0x5590ecf02c40 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecf02c18 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecf02bd8 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecf02bb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
                    |       `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
                    |         `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
                    |           |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
                    |           `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecf02bf8 <line:96:63> 'int' 0
(([B251.23])) (ImplicitCastExpr, BitCast, const TValue *)
  25: DeclStmt 0x5590ecf02df0 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590eceff1e0 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf02dd8 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecf02db8 <col:22, col:27> 'TValue *'
      `-ParenExpr 0x5590ecf02d98 <./llimits.h:63:25, col:27> 'TValue *'
        `-BinaryOperator 0x5590ecf02d70 <lvm.c:355:61, ./lopcodes.h:96:66> 'TValue *' '+'
          |-ImplicitCastExpr 0x5590ecf02d58 <lvm.c:355:61> 'TValue *' <LValueToRValue>
          | `-DeclRefExpr 0x5590eceff240 <col:61> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
          `-ParenExpr 0x5590ecf02d38 <./lopcodes.h:96:22, col:66> 'int'
            `-ParenExpr 0x5590ecf02d18 <./llimits.h:75:22, col:31> 'int'
              `-CStyleCastExpr 0x5590ecf02cf0 <col:23, col:30> 'int' <IntegralCast>
                `-ParenExpr 0x5590ecf02cd0 <col:26, col:30> 'unsigned int'
                  `-BinaryOperator 0x5590ecf02c60 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
                    |-ParenExpr 0x5590eceff3e0 <line:96:33, col:45> 'Instruction':'unsigned int'
                    | `-BinaryOperator 0x5590eceff3b8 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
                    |   |-ImplicitCastExpr 0x5590eceff3a0 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
                    |   | `-ParenExpr 0x5590eceff290 <col:34, col:36> 'const Instruction':'const unsigned int' lvalue
                    |   |   `-DeclRefExpr 0x5590eceff268 <lvm.c:412:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                    |   `-ParenExpr 0x5590eceff380 <./lopcodes.h:46:16, col:31> 'int'
                    |     `-BinaryOperator 0x5590eceff358 <line:45:16, line:40:17> 'int' '+'
                    |       |-ParenExpr 0x5590eceff318 <line:45:16, col:33> 'int'
                    |       | `-BinaryOperator 0x5590eceff2f0 <line:44:17, line:42:18> 'int' '+'
                    |       |   |-IntegerLiteral 0x5590eceff2b0 <line:44:17> 'int' 0
                    |       |   `-IntegerLiteral 0x5590eceff2d0 <line:42:18> 'int' 6
                    |       `-IntegerLiteral 0x5590eceff338 <line:40:17> 'int' 8
                    `-ParenExpr 0x5590ecf02c40 <line:71:20, col:49> 'Instruction':'unsigned int'
                      `-BinaryOperator 0x5590ecf02c18 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                        |-ParenExpr 0x5590ecf02bd8 <line:71:21, col:45> 'Instruction':'unsigned int'
                        | `-UnaryOperator 0x5590ecf02bb8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                        |   `-ParenExpr 0x5590ecf02b98 <col:23, col:44> 'Instruction':'unsigned int'
                        |     `-BinaryOperator 0x5590ecf02b70 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                        |       |-ParenExpr 0x5590eceff478 <line:71:24, col:40> 'Instruction':'unsigned int'
                        |       | `-UnaryOperator 0x5590eceff458 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                        |       |   `-CStyleCastExpr 0x5590eceff430 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                        |       |     `-IntegerLiteral 0x5590eceff400 <col:39> 'int' 0
                        |       `-ParenExpr 0x5590eceff500 <line:39:18, col:34> 'int'
                        |         `-BinaryOperator 0x5590eceff4d8 <line:37:17, line:38:17> 'int' '+'
                        |           |-IntegerLiteral 0x5590eceff498 <line:37:17> 'int' 9
                        |           `-IntegerLiteral 0x5590eceff4b8 <line:38:17> 'int' 9
                        `-IntegerLiteral 0x5590ecf02bf8 <line:96:63> 'int' 0
const TValue *o2 = ((k + (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << (9 + 9))) << 0))))));
  26: DeclRefExpr 0x5590ecf02e78 <lvm.c:412:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  27: ImplicitCastExpr 0x5590ecf02ec0 <./lobject.h:162:41, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecf02ea0 <col:41, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecf02e78 <lvm.c:412:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B251.26]) (ImplicitCastExpr, LValueToRValue, StkId)
  28: DeclStmt 0x5590ecf02ed8 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecf02e18 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecf02ec0 <col:41, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecf02ea0 <col:41, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecf02e78 <lvm.c:412:21> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *o1 = (ra);
  29: DeclRefExpr 0x5590ecf02f68 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
o2
  30: ImplicitCastExpr 0x5590ecf02f90 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf02f68 <col:17> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.29] (ImplicitCastExpr, LValueToRValue, const TValue *)
  31: MemberExpr 0x5590ecf02fa8 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf02f90 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf02f68 <col:17> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.30]->value
  32: ImplicitCastExpr 0x5590ecf02fe0 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecf02fa8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecf02f90 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf02f68 <col:17> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.31] (ImplicitCastExpr, LValueToRValue, Value)
  33: DeclRefExpr 0x5590ecf02ef0 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
o1
  34: ImplicitCastExpr 0x5590ecf02f18 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf02ef0 <col:5> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
[B251.33] (ImplicitCastExpr, LValueToRValue, TValue *)
  35: MemberExpr 0x5590ecf02f30 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecf02f18 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf02ef0 <col:5> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
[B251.34]->value
  36: BinaryOperator 0x5590ecf02ff8 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecf02f30 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecf02f18 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf02ef0 <col:5> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf02fe0 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecf02fa8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecf02f90 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf02f68 <col:17> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.35] = [B251.32]
  37: DeclRefExpr 0x5590ecf03098 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
o2
  38: ImplicitCastExpr 0x5590ecf030c0 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf03098 <col:35> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.37] (ImplicitCastExpr, LValueToRValue, const TValue *)
  39: MemberExpr 0x5590ecf030d8 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf030c0 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf03098 <col:35> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.38]->tt
  40: ImplicitCastExpr 0x5590ecf03110 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590ecf030d8 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecf030c0 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecf03098 <col:35> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.39] (ImplicitCastExpr, LValueToRValue, int)
  41: DeclRefExpr 0x5590ecf03020 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
o1
  42: ImplicitCastExpr 0x5590ecf03048 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecf03020 <col:28> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
[B251.41] (ImplicitCastExpr, LValueToRValue, TValue *)
  43: MemberExpr 0x5590ecf03060 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecf03048 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecf03020 <col:28> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
[B251.42]->tt
  44: BinaryOperator 0x5590ecf03128 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecf03060 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecf03048 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecf03020 <col:28> 'TValue *' lvalue Var 0x5590ecf02e18 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecf03110 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590ecf030d8 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecf030c0 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecf03098 <col:35> 'const TValue *' lvalue Var 0x5590eceff1e0 'o2' 'const TValue *'
[B251.43] = [B251.40]
  45: IntegerLiteral 0x5590ecf03150 <./llimits.h:62:31> 'int' 0
0
  46: CStyleCastExpr 0x5590ecf03180 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecf03150 <col:31> 'int' 0
(void)[B251.45] (CStyleCastExpr, ToVoid, void)
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B252]
  case OP_MOVE:
   1: DeclRefExpr 0x5590ecefe7c0 <lvm.c:349:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   2: ImplicitCastExpr 0x5590ecefec88 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefe7c0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
[B252.1] (ImplicitCastExpr, LValueToRValue, StkId)
   3: DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
i
   4: ImplicitCastExpr 0x5590ecefe988 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
  `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
([B252.3]) (ImplicitCastExpr, LValueToRValue, Instruction)
   5: IntegerLiteral 0x5590ecefe830 <./lopcodes.h:44:17> 'int' 0
0
   6: IntegerLiteral 0x5590ecefe850 <./lopcodes.h:42:18> 'int' 6
6
   7: BinaryOperator 0x5590ecefe870 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
`-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
[B252.5] + [B252.6]
   8: IntegerLiteral 0x5590ecefe8b8 <./lopcodes.h:40:17> 'int' 8
8
   9: BinaryOperator 0x5590ecefe8d8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
`-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
([B252.7]) + [B252.8]
  10: IntegerLiteral 0x5590ecefe920 <./lopcodes.h:37:17> 'int' 9
9
  11: BinaryOperator 0x5590ecefe940 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
([B252.9]) + [B252.10]
  12: BinaryOperator 0x5590ecefe9a0 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5590ecefe988 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
`-ParenExpr 0x5590ecefe968 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5590ecefe940 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
[B252.4] >> ([B252.11])
  13: IntegerLiteral 0x5590ecefe9e8 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x5590ecefea18 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
(Instruction)[B252.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x5590ecefea40 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
~[B252.14]
  16: IntegerLiteral 0x5590ecefea80 <./lopcodes.h:38:17> 'int' 9
9
  17: BinaryOperator 0x5590ecefeaa0 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
`-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
([B252.15]) << [B252.16]
  18: UnaryOperator 0x5590ecefeae8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
    `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
~([B252.17])
  19: IntegerLiteral 0x5590ecefeb28 <./lopcodes.h:88:60> 'int' 0
0
  20: BinaryOperator 0x5590ecefeb48 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5590ecefeb08 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5590ecefeae8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
`-IntegerLiteral 0x5590ecefeb28 <line:88:60> 'int' 0
([B252.18]) << [B252.19]
  21: BinaryOperator 0x5590ecefeb90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5590ecefe9c8 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5590ecefe9a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5590ecefe988 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
|   |   `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
|   `-ParenExpr 0x5590ecefe968 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5590ecefe940 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
`-ParenExpr 0x5590ecefeb70 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5590ecefeb48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5590ecefeb08 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5590ecefeae8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5590ecefeb28 <line:88:60> 'int' 0
([B252.12]) & ([B252.20])
  22: CStyleCastExpr 0x5590ecefec20 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5590ecefec00 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5590ecefeb90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5590ecefe9c8 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5590ecefe9a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5590ecefe988 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
    |   `-ParenExpr 0x5590ecefe968 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5590ecefe940 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
    `-ParenExpr 0x5590ecefeb70 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5590ecefeb48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5590ecefeb08 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5590ecefeae8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5590ecefeb28 <line:88:60> 'int' 0
(int)([B252.21]) (CStyleCastExpr, IntegralCast, int)
  23: BinaryOperator 0x5590ecefeca0 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
|-ImplicitCastExpr 0x5590ecefec88 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecefe7c0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ParenExpr 0x5590ecefec68 <./lopcodes.h:88:21, col:63> 'int'
  `-ParenExpr 0x5590ecefec48 <./llimits.h:75:22, col:31> 'int'
    `-CStyleCastExpr 0x5590ecefec20 <col:23, col:30> 'int' <IntegralCast>
      `-ParenExpr 0x5590ecefec00 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5590ecefeb90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5590ecefe9c8 <line:88:32, col:43> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5590ecefe9a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5590ecefe988 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
          |   `-ParenExpr 0x5590ecefe968 <./lopcodes.h:47:16, col:31> 'int'
          |     `-BinaryOperator 0x5590ecefe940 <line:46:16, line:37:17> 'int' '+'
          |       |-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
          |       | `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
          |       |   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
          |       |   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
          |       |   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
          |       |   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
          |       |   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
          |       `-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
          `-ParenExpr 0x5590ecefeb70 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5590ecefeb48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5590ecefeb08 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5590ecefeae8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
              `-IntegerLiteral 0x5590ecefeb28 <line:88:60> 'int' 0
[B252.2] + (([B252.22]))
  24: ImplicitCastExpr 0x5590ecefed08 <./lobject.h:162:22, col:27> 'const TValue *' <BitCast>
`-ParenExpr 0x5590ecefece8 <col:22, col:27> 'StkId':'TValue *'
  `-ParenExpr 0x5590ecefecc8 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
    `-BinaryOperator 0x5590ecefeca0 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
      |-ImplicitCastExpr 0x5590ecefec88 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
      | `-DeclRefExpr 0x5590ecefe7c0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
      `-ParenExpr 0x5590ecefec68 <./lopcodes.h:88:21, col:63> 'int'
        `-ParenExpr 0x5590ecefec48 <./llimits.h:75:22, col:31> 'int'
          `-CStyleCastExpr 0x5590ecefec20 <col:23, col:30> 'int' <IntegralCast>
            `-ParenExpr 0x5590ecefec00 <col:26, col:30> 'unsigned int'
              `-BinaryOperator 0x5590ecefeb90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                |-ParenExpr 0x5590ecefe9c8 <line:88:32, col:43> 'Instruction':'unsigned int'
                | `-BinaryOperator 0x5590ecefe9a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                |   |-ImplicitCastExpr 0x5590ecefe988 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                |   | `-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                |   |   `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                |   `-ParenExpr 0x5590ecefe968 <./lopcodes.h:47:16, col:31> 'int'
                |     `-BinaryOperator 0x5590ecefe940 <line:46:16, line:37:17> 'int' '+'
                |       |-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
                |       | `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
                |       |   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
                |       |   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
                |       |   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
                |       |   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
                |       |   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
                |       `-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
                `-ParenExpr 0x5590ecefeb70 <line:71:20, col:49> 'Instruction':'unsigned int'
                  `-BinaryOperator 0x5590ecefeb48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                    |-ParenExpr 0x5590ecefeb08 <line:71:21, col:45> 'Instruction':'unsigned int'
                    | `-UnaryOperator 0x5590ecefeae8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                    |   `-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
                    |     `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                    |       |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
                    |       | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                    |       |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                    |       |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
                    |       `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
                    `-IntegerLiteral 0x5590ecefeb28 <line:88:60> 'int' 0
(([B252.23])) (ImplicitCastExpr, BitCast, const TValue *)
  25: DeclStmt 0x5590ecefed20 <./lobject.h:162:5, col:28>col:19
`-VarDecl 0x5590ecefe760 <col:5, col:27> col:19 used o2 'const TValue *' cinit
  `-ImplicitCastExpr 0x5590ecefed08 <col:22, col:27> 'const TValue *' <BitCast>
    `-ParenExpr 0x5590ecefece8 <col:22, col:27> 'StkId':'TValue *'
      `-ParenExpr 0x5590ecefecc8 <./llimits.h:63:25, col:27> 'StkId':'TValue *'
        `-BinaryOperator 0x5590ecefeca0 <lvm.c:349:60, ./lopcodes.h:88:63> 'StkId':'TValue *' '+'
          |-ImplicitCastExpr 0x5590ecefec88 <lvm.c:349:60> 'StkId':'TValue *' <LValueToRValue>
          | `-DeclRefExpr 0x5590ecefe7c0 <col:60> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
          `-ParenExpr 0x5590ecefec68 <./lopcodes.h:88:21, col:63> 'int'
            `-ParenExpr 0x5590ecefec48 <./llimits.h:75:22, col:31> 'int'
              `-CStyleCastExpr 0x5590ecefec20 <col:23, col:30> 'int' <IntegralCast>
                `-ParenExpr 0x5590ecefec00 <col:26, col:30> 'unsigned int'
                  `-BinaryOperator 0x5590ecefeb90 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
                    |-ParenExpr 0x5590ecefe9c8 <line:88:32, col:43> 'Instruction':'unsigned int'
                    | `-BinaryOperator 0x5590ecefe9a0 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
                    |   |-ImplicitCastExpr 0x5590ecefe988 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
                    |   | `-ParenExpr 0x5590ecefe810 <col:33, col:35> 'const Instruction':'const unsigned int' lvalue
                    |   |   `-DeclRefExpr 0x5590ecefe7e8 <lvm.c:408:29> 'const Instruction':'const unsigned int' lvalue Var 0x5590ecefa338 'i' 'const Instruction':'const unsigned int'
                    |   `-ParenExpr 0x5590ecefe968 <./lopcodes.h:47:16, col:31> 'int'
                    |     `-BinaryOperator 0x5590ecefe940 <line:46:16, line:37:17> 'int' '+'
                    |       |-ParenExpr 0x5590ecefe900 <line:46:16, col:31> 'int'
                    |       | `-BinaryOperator 0x5590ecefe8d8 <line:45:16, line:40:17> 'int' '+'
                    |       |   |-ParenExpr 0x5590ecefe898 <line:45:16, col:33> 'int'
                    |       |   | `-BinaryOperator 0x5590ecefe870 <line:44:17, line:42:18> 'int' '+'
                    |       |   |   |-IntegerLiteral 0x5590ecefe830 <line:44:17> 'int' 0
                    |       |   |   `-IntegerLiteral 0x5590ecefe850 <line:42:18> 'int' 6
                    |       |   `-IntegerLiteral 0x5590ecefe8b8 <line:40:17> 'int' 8
                    |       `-IntegerLiteral 0x5590ecefe920 <line:37:17> 'int' 9
                    `-ParenExpr 0x5590ecefeb70 <line:71:20, col:49> 'Instruction':'unsigned int'
                      `-BinaryOperator 0x5590ecefeb48 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                        |-ParenExpr 0x5590ecefeb08 <line:71:21, col:45> 'Instruction':'unsigned int'
                        | `-UnaryOperator 0x5590ecefeae8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                        |   `-ParenExpr 0x5590ecefeac8 <col:23, col:44> 'Instruction':'unsigned int'
                        |     `-BinaryOperator 0x5590ecefeaa0 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                        |       |-ParenExpr 0x5590ecefea60 <line:71:24, col:40> 'Instruction':'unsigned int'
                        |       | `-UnaryOperator 0x5590ecefea40 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                        |       |   `-CStyleCastExpr 0x5590ecefea18 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                        |       |     `-IntegerLiteral 0x5590ecefe9e8 <col:39> 'int' 0
                        |       `-IntegerLiteral 0x5590ecefea80 <line:38:17> 'int' 9
                        `-IntegerLiteral 0x5590ecefeb28 <line:88:60> 'int' 0
const TValue *o2 = ((base + (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))))));
  26: DeclRefExpr 0x5590ecefeda8 <lvm.c:408:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
ra
  27: ImplicitCastExpr 0x5590ecefedf0 <./lobject.h:162:41, col:46> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecefedd0 <col:41, col:46> 'StkId':'TValue *' lvalue
  `-DeclRefExpr 0x5590ecefeda8 <lvm.c:408:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
([B252.26]) (ImplicitCastExpr, LValueToRValue, StkId)
  28: DeclStmt 0x5590ecefee08 <./lobject.h:162:30, col:47>col:38
`-VarDecl 0x5590ecefed48 <col:30, col:46> col:38 used o1 'TValue *' cinit
  `-ImplicitCastExpr 0x5590ecefedf0 <col:41, col:46> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecefedd0 <col:41, col:46> 'StkId':'TValue *' lvalue
      `-DeclRefExpr 0x5590ecefeda8 <lvm.c:408:22> 'StkId':'TValue *' lvalue Var 0x5590ecefa440 'ra' 'StkId':'TValue *'
TValue *o1 = (ra);
  29: DeclRefExpr 0x5590ecefee98 <./lobject.h:163:17> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
o2
  30: ImplicitCastExpr 0x5590ecefeec0 <./lobject.h:163:17> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefee98 <col:17> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.29] (ImplicitCastExpr, LValueToRValue, const TValue *)
  31: MemberExpr 0x5590ecefeed8 <./lobject.h:163:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecefeec0 <col:17> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefee98 <col:17> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.30]->value
  32: ImplicitCastExpr 0x5590ecefef10 <./lobject.h:163:17, col:21> 'Value':'Value' <LValueToRValue>
`-MemberExpr 0x5590ecefeed8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecefeec0 <col:17> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefee98 <col:17> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.31] (ImplicitCastExpr, LValueToRValue, Value)
  33: DeclRefExpr 0x5590ecefee20 <./lobject.h:163:5> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
o1
  34: ImplicitCastExpr 0x5590ecefee48 <./lobject.h:163:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefee20 <col:5> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
[B252.33] (ImplicitCastExpr, LValueToRValue, TValue *)
  35: MemberExpr 0x5590ecefee60 <./lobject.h:163:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecefee48 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefee20 <col:5> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
[B252.34]->value
  36: BinaryOperator 0x5590ecefef28 <./lobject.h:163:5, col:21> 'Value':'Value' '='
|-MemberExpr 0x5590ecefee60 <col:5, col:9> 'Value':'Value' lvalue ->value 0x5590ece76da0
| `-ImplicitCastExpr 0x5590ecefee48 <col:5> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecefee20 <col:5> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590ecefef10 <col:17, col:21> 'Value':'Value' <LValueToRValue>
  `-MemberExpr 0x5590ecefeed8 <col:17, col:21> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecefeec0 <col:17> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefee98 <col:17> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.35] = [B252.32]
  37: DeclRefExpr 0x5590ecefefc8 <./lobject.h:163:35> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
o2
  38: ImplicitCastExpr 0x5590ecefeff0 <./lobject.h:163:35> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefefc8 <col:35> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.37] (ImplicitCastExpr, LValueToRValue, const TValue *)
  39: MemberExpr 0x5590eceff008 <./lobject.h:163:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecefeff0 <col:35> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefefc8 <col:35> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.38]->tt
  40: ImplicitCastExpr 0x5590eceff040 <./lobject.h:163:35, col:39> 'int' <LValueToRValue>
`-MemberExpr 0x5590eceff008 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
  `-ImplicitCastExpr 0x5590ecefeff0 <col:35> 'const TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefefc8 <col:35> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.39] (ImplicitCastExpr, LValueToRValue, int)
  41: DeclRefExpr 0x5590ecefef50 <./lobject.h:163:28> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
o1
  42: ImplicitCastExpr 0x5590ecefef78 <./lobject.h:163:28> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefef50 <col:28> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
[B252.41] (ImplicitCastExpr, LValueToRValue, TValue *)
  43: MemberExpr 0x5590ecefef90 <./lobject.h:163:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ecefef78 <col:28> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefef50 <col:28> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
[B252.42]->tt
  44: BinaryOperator 0x5590eceff058 <./lobject.h:163:28, col:39> 'int' '='
|-MemberExpr 0x5590ecefef90 <col:28, col:32> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590ecefef78 <col:28> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecefef50 <col:28> 'TValue *' lvalue Var 0x5590ecefed48 'o1' 'TValue *'
`-ImplicitCastExpr 0x5590eceff040 <col:35, col:39> 'int' <LValueToRValue>
  `-MemberExpr 0x5590eceff008 <col:35, col:39> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ecefeff0 <col:35> 'const TValue *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefefc8 <col:35> 'const TValue *' lvalue Var 0x5590ecefe760 'o2' 'const TValue *'
[B252.43] = [B252.40]
  45: IntegerLiteral 0x5590eceff080 <./llimits.h:62:31> 'int' 0
0
  46: CStyleCastExpr 0x5590eceff0b0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590eceff080 <col:31> 'int' 0
(void)[B252.45] (CStyleCastExpr, ToVoid, void)
   T: continue;
   Preds (1): B2
   Succs (1): B1

 [B253]
   1: DeclRefExpr 0x5590ecefdba8 <lvm.c:399:14> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecefdbd0 <lvm.c:399:14> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefdba8 <col:14> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B253.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecefdbe8 <lvm.c:399:14, col:17> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecefdbd0 <col:14> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefdba8 <col:14> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B253.2]->base
   4: ImplicitCastExpr 0x5590ecefdc20 <lvm.c:399:14, col:17> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecefdbe8 <col:14, col:17> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecefdbd0 <col:14> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefdba8 <col:14> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B253.3] (ImplicitCastExpr, LValueToRValue, StkId)
   5: DeclRefExpr 0x5590ecefdb80 <lvm.c:399:7> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
   6: BinaryOperator 0x5590ecefdc38 <lvm.c:399:7, col:17> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecefdb80 <col:7> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecefdc20 <col:14, col:17> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecefdbe8 <col:14, col:17> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecefdbd0 <col:14> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefdba8 <col:14> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B253.5] = [B253.4]
   Preds (1): B255
   Succs (1): B2

 [B254]
   1: DeclRefExpr 0x5590ecefda60 <lvm.c:396:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: ImplicitCastExpr 0x5590ecefdaa8 <lvm.c:396:22> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefda60 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B254.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: IntegerLiteral 0x5590ecefda88 <lvm.c:396:27> 'int' 1
1
   4: BinaryOperator 0x5590ecefdac0 <lvm.c:396:22, col:27> 'const Instruction *' '-'
|-ImplicitCastExpr 0x5590ecefdaa8 <col:22> 'const Instruction *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecefda60 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-IntegerLiteral 0x5590ecefda88 <col:27> 'int' 1
[B254.2] - [B254.3]
   5: DeclRefExpr 0x5590ecefd9e8 <lvm.c:396:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x5590ecefda10 <lvm.c:396:9> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefd9e8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B254.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: MemberExpr 0x5590ecefda28 <lvm.c:396:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecefda10 <col:9> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefd9e8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B254.6]->savedpc
   8: BinaryOperator 0x5590ecefdae8 <lvm.c:396:9, col:27> 'const Instruction *' '='
|-MemberExpr 0x5590ecefda28 <col:9, col:12> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
| `-ImplicitCastExpr 0x5590ecefda10 <col:9> 'lua_State *' <LValueToRValue>
|   `-DeclRefExpr 0x5590ecefd9e8 <col:9> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-BinaryOperator 0x5590ecefdac0 <col:22, col:27> 'const Instruction *' '-'
  |-ImplicitCastExpr 0x5590ecefdaa8 <col:22> 'const Instruction *' <LValueToRValue>
  | `-DeclRefExpr 0x5590ecefda60 <col:22> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
  `-IntegerLiteral 0x5590ecefda88 <col:27> 'int' 1
[B254.7] = [B254.4]
   9: ReturnStmt 0x5590ecefdb10 <lvm.c:397:9>
return;
   Preds (1): B255
   Succs (1): B0

 [B255]
   1: DeclRefExpr 0x5590ecefd7a8 <lvm.c:394:7> 'void (lua_State *, const Instruction *)' Function 0x5590eced2d20 'traceexec' 'void (lua_State *, const Instruction *)'
traceexec
   2: ImplicitCastExpr 0x5590ecefd878 <lvm.c:394:7> 'void (*)(lua_State *, const Instruction *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590ecefd7a8 <col:7> 'void (lua_State *, const Instruction *)' Function 0x5590eced2d20 'traceexec' 'void (lua_State *, const Instruction *)'
[B255.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const Instruction *))
   3: DeclRefExpr 0x5590ecefd7d0 <lvm.c:394:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecefd8c8 <lvm.c:394:17> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefd7d0 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B255.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x5590ecefd7f8 <lvm.c:394:20> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   6: ImplicitCastExpr 0x5590ecefd8e0 <lvm.c:394:20> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefd7f8 <col:20> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B255.5] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   7: CallExpr 0x5590ecefd890 <lvm.c:394:7, col:22> 'void'
|-ImplicitCastExpr 0x5590ecefd878 <col:7> 'void (*)(lua_State *, const Instruction *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590ecefd7a8 <col:7> 'void (lua_State *, const Instruction *)' Function 0x5590eced2d20 'traceexec' 'void (lua_State *, const Instruction *)'
|-ImplicitCastExpr 0x5590ecefd8c8 <col:17> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5590ecefd7d0 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ImplicitCastExpr 0x5590ecefd8e0 <col:20> 'const Instruction *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefd7f8 <col:20> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B255.2]([B255.4], [B255.6])
   8: DeclRefExpr 0x5590ecefd8f8 <lvm.c:395:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   9: ImplicitCastExpr 0x5590ecefd920 <lvm.c:395:11> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefd8f8 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B255.8] (ImplicitCastExpr, LValueToRValue, lua_State *)
  10: MemberExpr 0x5590ecefd938 <lvm.c:395:11, col:14> 'lu_byte':'unsigned char' lvalue ->status 0x5590ece9ff90
`-ImplicitCastExpr 0x5590ecefd920 <col:11> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefd8f8 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B255.9]->status
  11: ImplicitCastExpr 0x5590ecefd990 <lvm.c:395:11, col:14> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5590ecefd938 <col:11, col:14> 'lu_byte':'unsigned char' lvalue ->status 0x5590ece9ff90
  `-ImplicitCastExpr 0x5590ecefd920 <col:11> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefd8f8 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B255.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x5590ecefd9a8 <lvm.c:395:11, col:14> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecefd990 <col:11, col:14> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5590ecefd938 <col:11, col:14> 'lu_byte':'unsigned char' lvalue ->status 0x5590ece9ff90
    `-ImplicitCastExpr 0x5590ecefd920 <col:11> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefd8f8 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B255.11] (ImplicitCastExpr, IntegralCast, int)
  13: IntegerLiteral 0x5590ecefd970 <./lua.h:43:19> 'int' 1
1
  14: BinaryOperator 0x5590ecefd9c0 <lvm.c:395:11, ./lua.h:43:19> 'int' '=='
|-ImplicitCastExpr 0x5590ecefd9a8 <lvm.c:395:11, col:14> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecefd990 <col:11, col:14> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x5590ecefd938 <col:11, col:14> 'lu_byte':'unsigned char' lvalue ->status 0x5590ece9ff90
|     `-ImplicitCastExpr 0x5590ecefd920 <col:11> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecefd8f8 <col:11> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-IntegerLiteral 0x5590ecefd970 <./lua.h:43:19> 'int' 1
[B255.12] == [B255.13]
   T: if [B255.14]
   Preds (2): B256 B257
   Succs (2): B254 B253

 [B256]
   1: DeclRefExpr 0x5590ecefd5e0 <lvm.c:393:33> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecefd608 <lvm.c:393:33> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefd5e0 <col:33> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B256.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecefd620 <lvm.c:393:33, col:36> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
`-ImplicitCastExpr 0x5590ecefd608 <col:33> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefd5e0 <col:33> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B256.2]->hookmask
   4: ImplicitCastExpr 0x5590ecefd6e0 <lvm.c:393:33, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5590ecefd620 <col:33, col:36> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
  `-ImplicitCastExpr 0x5590ecefd608 <col:33> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefd5e0 <col:33> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B256.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x5590ecefd6f8 <lvm.c:393:33, col:36> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecefd6e0 <col:33, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5590ecefd620 <col:33, col:36> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
    `-ImplicitCastExpr 0x5590ecefd608 <col:33> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefd5e0 <col:33> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B256.4] (ImplicitCastExpr, IntegralCast, int)
   6: IntegerLiteral 0x5590ecefd658 <./lua.h:323:23> 'int' 1
1
   7: IntegerLiteral 0x5590ecefd678 <./lua.h:313:22> 'int' 2
2
   8: BinaryOperator 0x5590ecefd698 <./lua.h:323:23, line:313:22> 'int' '<<'
|-IntegerLiteral 0x5590ecefd658 <line:323:23> 'int' 1
`-IntegerLiteral 0x5590ecefd678 <line:313:22> 'int' 2
[B256.6] << [B256.7]
   9: BinaryOperator 0x5590ecefd710 <lvm.c:393:33, ./lua.h:323:40> 'int' '&'
|-ImplicitCastExpr 0x5590ecefd6f8 <lvm.c:393:33, col:36> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecefd6e0 <col:33, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x5590ecefd620 <col:33, col:36> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
|     `-ImplicitCastExpr 0x5590ecefd608 <col:33> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecefd5e0 <col:33> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ParenExpr 0x5590ecefd6c0 <./lua.h:323:22, col:40> 'int'
  `-BinaryOperator 0x5590ecefd698 <col:23, line:313:22> 'int' '<<'
    |-IntegerLiteral 0x5590ecefd658 <line:323:23> 'int' 1
    `-IntegerLiteral 0x5590ecefd678 <line:313:22> 'int' 2
[B256.5] & ([B256.8])
   T: if ([B258.19]) && ([B257.6] || [B256.9])
   Preds (1): B257
   Succs (2): B255 B2

 [B257]
   1: DeclRefExpr 0x5590ecefa700 <lvm.c:393:12> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x5590ecefa728 <lvm.c:393:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefa700 <col:12> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B257.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x5590ecefd540 <lvm.c:393:12, col:15> 'int' lvalue ->hookcount 0x5590ecea32f0
`-ImplicitCastExpr 0x5590ecefa728 <col:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefa700 <col:12> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B257.2]->hookcount
   4: UnaryOperator 0x5590ecefd578 <lvm.c:393:10, col:15> 'int' prefix '--'
`-MemberExpr 0x5590ecefd540 <col:12, col:15> 'int' lvalue ->hookcount 0x5590ecea32f0
  `-ImplicitCastExpr 0x5590ecefa728 <col:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefa700 <col:12> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
--[B257.3]
   5: IntegerLiteral 0x5590ecefd598 <lvm.c:393:28> 'int' 0
0
   6: BinaryOperator 0x5590ecefd5b8 <lvm.c:393:10, col:28> 'int' '=='
|-UnaryOperator 0x5590ecefd578 <col:10, col:15> 'int' prefix '--'
| `-MemberExpr 0x5590ecefd540 <col:12, col:15> 'int' lvalue ->hookcount 0x5590ecea32f0
|   `-ImplicitCastExpr 0x5590ecefa728 <col:12> 'lua_State *' <LValueToRValue>
|     `-DeclRefExpr 0x5590ecefa700 <col:12> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-IntegerLiteral 0x5590ecefd598 <col:28> 'int' 0
[B257.4] == [B257.5]
   T: [B257.6] || ...
   Preds (1): B258
   Succs (2): B255 B256

 [B258]
   1: DeclRefExpr 0x5590ecefa398 <lvm.c:390:28> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   2: UnaryOperator 0x5590ecefa3c0 <lvm.c:390:28, col:30> 'const Instruction *' postfix '++'
`-DeclRefExpr 0x5590ecefa398 <col:28> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B258.1]++
   3: UnaryOperator 0x5590ecefa3e0 <lvm.c:390:27, col:30> 'const Instruction':'const unsigned int' lvalue prefix '*'
`-UnaryOperator 0x5590ecefa3c0 <col:28, col:30> 'const Instruction *' postfix '++'
  `-DeclRefExpr 0x5590ecefa398 <col:28> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
*[B258.2]
   4: ImplicitCastExpr 0x5590ecefa400 <lvm.c:390:27, col:30> 'Instruction':'unsigned int' <LValueToRValue>
`-UnaryOperator 0x5590ecefa3e0 <col:27, col:30> 'const Instruction':'const unsigned int' lvalue prefix '*'
  `-UnaryOperator 0x5590ecefa3c0 <col:28, col:30> 'const Instruction *' postfix '++'
    `-DeclRefExpr 0x5590ecefa398 <col:28> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
[B258.3] (ImplicitCastExpr, LValueToRValue, Instruction)
   5: DeclStmt 0x5590ecefa418 <lvm.c:390:5, col:32>col:23
`-VarDecl 0x5590ecefa338 <col:5, col:30> col:23 used i 'const Instruction':'const unsigned int' cinit
  `-ImplicitCastExpr 0x5590ecefa400 <col:27, col:30> 'Instruction':'unsigned int' <LValueToRValue>
    `-UnaryOperator 0x5590ecefa3e0 <col:27, col:30> 'const Instruction':'const unsigned int' lvalue prefix '*'
      `-UnaryOperator 0x5590ecefa3c0 <col:28, col:30> 'const Instruction *' postfix '++'
        `-DeclRefExpr 0x5590ecefa398 <col:28> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
const Instruction i = *pc++;
   6: DeclStmt 0x5590ecefa4a0 <lvm.c:391:5, col:13>col:11
`-VarDecl 0x5590ecefa440 <col:5, col:11> col:11 used ra 'StkId':'TValue *'
StkId ra;
   7: DeclRefExpr 0x5590ecefa4b8 <lvm.c:392:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   8: ImplicitCastExpr 0x5590ecefa4e0 <lvm.c:392:10> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefa4b8 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B258.7] (ImplicitCastExpr, LValueToRValue, lua_State *)
   9: MemberExpr 0x5590ecefa4f8 <lvm.c:392:10, col:13> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
`-ImplicitCastExpr 0x5590ecefa4e0 <col:10> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefa4b8 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B258.8]->hookmask
  10: ImplicitCastExpr 0x5590ecefa688 <lvm.c:392:10, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5590ecefa4f8 <col:10, col:13> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
  `-ImplicitCastExpr 0x5590ecefa4e0 <col:10> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefa4b8 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B258.9] (ImplicitCastExpr, LValueToRValue, lu_byte)
  11: ImplicitCastExpr 0x5590ecefa6a0 <lvm.c:392:10, col:13> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5590ecefa688 <col:10, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5590ecefa4f8 <col:10, col:13> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
    `-ImplicitCastExpr 0x5590ecefa4e0 <col:10> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefa4b8 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B258.10] (ImplicitCastExpr, IntegralCast, int)
  12: IntegerLiteral 0x5590ecefa530 <./lua.h:323:23> 'int' 1
1
  13: IntegerLiteral 0x5590ecefa550 <./lua.h:313:22> 'int' 2
2
  14: BinaryOperator 0x5590ecefa570 <./lua.h:323:23, line:313:22> 'int' '<<'
|-IntegerLiteral 0x5590ecefa530 <line:323:23> 'int' 1
`-IntegerLiteral 0x5590ecefa550 <line:313:22> 'int' 2
[B258.12] << [B258.13]
  15: IntegerLiteral 0x5590ecefa5b8 <./lua.h:324:24> 'int' 1
1
  16: IntegerLiteral 0x5590ecefa5d8 <./lua.h:314:23> 'int' 3
3
  17: BinaryOperator 0x5590ecefa5f8 <./lua.h:324:24, line:314:23> 'int' '<<'
|-IntegerLiteral 0x5590ecefa5b8 <line:324:24> 'int' 1
`-IntegerLiteral 0x5590ecefa5d8 <line:314:23> 'int' 3
[B258.15] << [B258.16]
  18: BinaryOperator 0x5590ecefa640 <./lua.h:323:22, line:324:42> 'int' '|'
|-ParenExpr 0x5590ecefa598 <line:323:22, col:40> 'int'
| `-BinaryOperator 0x5590ecefa570 <col:23, line:313:22> 'int' '<<'
|   |-IntegerLiteral 0x5590ecefa530 <line:323:23> 'int' 1
|   `-IntegerLiteral 0x5590ecefa550 <line:313:22> 'int' 2
`-ParenExpr 0x5590ecefa620 <line:324:23, col:42> 'int'
  `-BinaryOperator 0x5590ecefa5f8 <col:24, line:314:23> 'int' '<<'
    |-IntegerLiteral 0x5590ecefa5b8 <line:324:24> 'int' 1
    `-IntegerLiteral 0x5590ecefa5d8 <line:314:23> 'int' 3
([B258.14]) | ([B258.17])
  19: BinaryOperator 0x5590ecefa6b8 <lvm.c:392:10, col:53> 'int' '&'
|-ImplicitCastExpr 0x5590ecefa6a0 <col:10, col:13> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x5590ecefa688 <col:10, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x5590ecefa4f8 <col:10, col:13> 'lu_byte':'unsigned char' lvalue ->hookmask 0x5590ecea0578
|     `-ImplicitCastExpr 0x5590ecefa4e0 <col:10> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x5590ecefa4b8 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
`-ParenExpr 0x5590ecefa668 <col:24, col:53> 'int'
  `-BinaryOperator 0x5590ecefa640 <./lua.h:323:22, line:324:42> 'int' '|'
    |-ParenExpr 0x5590ecefa598 <line:323:22, col:40> 'int'
    | `-BinaryOperator 0x5590ecefa570 <col:23, line:313:22> 'int' '<<'
    |   |-IntegerLiteral 0x5590ecefa530 <line:323:23> 'int' 1
    |   `-IntegerLiteral 0x5590ecefa550 <line:313:22> 'int' 2
    `-ParenExpr 0x5590ecefa620 <line:324:23, col:42> 'int'
      `-BinaryOperator 0x5590ecefa5f8 <col:24, line:314:23> 'int' '<<'
        |-IntegerLiteral 0x5590ecefa5b8 <line:324:24> 'int' 1
        `-IntegerLiteral 0x5590ecefa5d8 <line:314:23> 'int' 3
[B258.11] & ([B258.18])
   T: ([B258.19]) && ...
   Preds (1): B259
   Succs (2): B257 B2

 [B259]
   T: for (; ; )
   Preds (2): B1 B260
   Succs (2): B258 NULL

 [B260]
  reentry:
   1: IntegerLiteral 0x5590ecef9cb8 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5590ecef9ce8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5590ecef9cb8 <col:31> 'int' 0
(void)[B260.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5590ecef9db8 <lvm.c:384:8> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5590ecef9de0 <lvm.c:384:8> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecef9db8 <col:8> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: MemberExpr 0x5590ecef9df8 <lvm.c:384:8, col:11> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
`-ImplicitCastExpr 0x5590ecef9de0 <col:8> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecef9db8 <col:8> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.4]->savedpc
   6: ImplicitCastExpr 0x5590ecef9e30 <lvm.c:384:8, col:11> 'const Instruction *' <LValueToRValue>
`-MemberExpr 0x5590ecef9df8 <col:8, col:11> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
  `-ImplicitCastExpr 0x5590ecef9de0 <col:8> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecef9db8 <col:8> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.5] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   7: DeclRefExpr 0x5590ecef9d90 <lvm.c:384:3> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
pc
   8: BinaryOperator 0x5590ecef9e48 <lvm.c:384:3, col:11> 'const Instruction *' '='
|-DeclRefExpr 0x5590ecef9d90 <col:3> 'const Instruction *' lvalue Var 0x5590ecef9c40 'pc' 'const Instruction *'
`-ImplicitCastExpr 0x5590ecef9e30 <col:8, col:11> 'const Instruction *' <LValueToRValue>
  `-MemberExpr 0x5590ecef9df8 <col:8, col:11> 'const Instruction *' lvalue ->savedpc 0x5590ecea0240
    `-ImplicitCastExpr 0x5590ecef9de0 <col:8> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecef9db8 <col:8> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.7] = [B260.6]
   9: DeclRefExpr 0x5590ecef9e98 <lvm.c:385:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x5590ecef9ec0 <lvm.c:385:17> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: MemberExpr 0x5590ecef9ed8 <lvm.c:385:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
`-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.10]->ci
  12: ImplicitCastExpr 0x5590ecef9f10 <lvm.c:385:17, col:20> 'CallInfo *' <LValueToRValue>
`-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
  `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.11] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  13: MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
`-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
  `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
    `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.12]->func
  14: ImplicitCastExpr 0x5590ecef9f80 <./lobject.h:98:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
    `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
      `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
        `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B260.13]) (ImplicitCastExpr, LValueToRValue, StkId)
  15: MemberExpr 0x5590ecef9f98 <./lobject.h:98:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
      `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
        `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
          `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
            `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.14]->value
  16: MemberExpr 0x5590ecef9fd0 <./lobject.h:98:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
        `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
          `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
            `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
              `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.15].gc
  17: ImplicitCastExpr 0x5590ecefa008 <./lobject.h:98:48, col:59> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590ecef9fd0 <col:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
  `-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
          `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
            `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
              `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
                `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.16] (ImplicitCastExpr, LValueToRValue, GCObject *)
  18: MemberExpr 0x5590ecefa020 <./lobject.h:98:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x5590ecea3838
`-ImplicitCastExpr 0x5590ecefa008 <col:48, col:59> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x5590ecef9fd0 <col:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
    `-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
            `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
              `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
                `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
                  `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.17]->cl
  19: UnaryOperator 0x5590ecefa058 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
`-MemberExpr 0x5590ecefa020 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x5590ecea3838
  `-ImplicitCastExpr 0x5590ecefa008 <col:48, col:59> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x5590ecef9fd0 <col:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
              `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
                `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
                  `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
                    `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
&[B260.18]
  20: MemberExpr 0x5590ecefa098 <./llimits.h:63:25, lvm.c:385:31> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
`-ParenExpr 0x5590ecefa078 <./llimits.h:63:25, col:27> 'union Closure *'
  `-UnaryOperator 0x5590ecefa058 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
    `-MemberExpr 0x5590ecefa020 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x5590ecea3838
      `-ImplicitCastExpr 0x5590ecefa008 <col:48, col:59> 'GCObject *' <LValueToRValue>
        `-MemberExpr 0x5590ecef9fd0 <col:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
          `-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
            `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
              `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
                `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
                  `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
                    `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
                      `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
                        `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
([B260.19])->l
  21: UnaryOperator 0x5590ecefa0d0 <lvm.c:385:8, col:31> 'LClosure *' prefix '&'
`-MemberExpr 0x5590ecefa098 <./llimits.h:63:25, lvm.c:385:31> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
  `-ParenExpr 0x5590ecefa078 <./llimits.h:63:25, col:27> 'union Closure *'
    `-UnaryOperator 0x5590ecefa058 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
      `-MemberExpr 0x5590ecefa020 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x5590ecea3838
        `-ImplicitCastExpr 0x5590ecefa008 <col:48, col:59> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x5590ecef9fd0 <col:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
            `-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
              `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
                  `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
                    `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
                      `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
                        `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
                          `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
&[B260.20]
  22: DeclRefExpr 0x5590ecef9e70 <lvm.c:385:3> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
  23: BinaryOperator 0x5590ecefa0f0 <lvm.c:385:3, col:31> 'LClosure *' '='
|-DeclRefExpr 0x5590ecef9e70 <col:3> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
`-UnaryOperator 0x5590ecefa0d0 <col:8, col:31> 'LClosure *' prefix '&'
  `-MemberExpr 0x5590ecefa098 <./llimits.h:63:25, lvm.c:385:31> 'LClosure':'struct LClosure' lvalue ->l 0x5590ece90250
    `-ParenExpr 0x5590ecefa078 <./llimits.h:63:25, col:27> 'union Closure *'
      `-UnaryOperator 0x5590ecefa058 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
        `-MemberExpr 0x5590ecefa020 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x5590ecea3838
          `-ImplicitCastExpr 0x5590ecefa008 <col:48, col:59> 'GCObject *' <LValueToRValue>
            `-MemberExpr 0x5590ecef9fd0 <col:48, col:59> 'GCObject *' lvalue .gc 0x5590ece76aa0
              `-MemberExpr 0x5590ecef9f98 <col:48, col:53> 'Value':'Value' lvalue ->value 0x5590ece76da0
                `-ImplicitCastExpr 0x5590ecef9f80 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x5590ecef9f60 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-MemberExpr 0x5590ecef9f28 <lvm.c:385:17, col:24> 'StkId':'TValue *' lvalue ->func 0x5590ece9ee28
                      `-ImplicitCastExpr 0x5590ecef9f10 <col:17, col:20> 'CallInfo *' <LValueToRValue>
                        `-MemberExpr 0x5590ecef9ed8 <col:17, col:20> 'CallInfo *' lvalue ->ci 0x5590ecea01e8
                          `-ImplicitCastExpr 0x5590ecef9ec0 <col:17> 'lua_State *' <LValueToRValue>
                            `-DeclRefExpr 0x5590ecef9e98 <col:17> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.22] = [B260.21]
  24: DeclRefExpr 0x5590ecefa140 <lvm.c:386:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
L
  25: ImplicitCastExpr 0x5590ecefa168 <lvm.c:386:10> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefa140 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.24] (ImplicitCastExpr, LValueToRValue, lua_State *)
  26: MemberExpr 0x5590ecefa180 <lvm.c:386:10, col:13> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
`-ImplicitCastExpr 0x5590ecefa168 <col:10> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefa140 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.25]->base
  27: ImplicitCastExpr 0x5590ecefa1b8 <lvm.c:386:10, col:13> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecefa180 <col:10, col:13> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
  `-ImplicitCastExpr 0x5590ecefa168 <col:10> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefa140 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.26] (ImplicitCastExpr, LValueToRValue, StkId)
  28: DeclRefExpr 0x5590ecefa118 <lvm.c:386:3> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
base
  29: BinaryOperator 0x5590ecefa1d0 <lvm.c:386:3, col:13> 'StkId':'TValue *' '='
|-DeclRefExpr 0x5590ecefa118 <col:3> 'StkId':'TValue *' lvalue Var 0x5590ecef9b30 'base' 'StkId':'TValue *'
`-ImplicitCastExpr 0x5590ecefa1b8 <col:10, col:13> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecefa180 <col:10, col:13> 'StkId':'TValue *' lvalue ->base 0x5590ecea0040
    `-ImplicitCastExpr 0x5590ecefa168 <col:10> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefa140 <col:10> 'lua_State *' lvalue ParmVar 0x5590ecef9840 'L' 'lua_State *'
[B260.28] = [B260.27]
  30: DeclRefExpr 0x5590ecefa220 <lvm.c:387:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
cl
  31: ImplicitCastExpr 0x5590ecefa248 <lvm.c:387:7> 'LClosure *' <LValueToRValue>
`-DeclRefExpr 0x5590ecefa220 <col:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B260.30] (ImplicitCastExpr, LValueToRValue, LClosure *)
  32: MemberExpr 0x5590ecefa260 <lvm.c:387:7, col:11> 'struct Proto *' lvalue ->p 0x5590ece8fe98
`-ImplicitCastExpr 0x5590ecefa248 <col:7> 'LClosure *' <LValueToRValue>
  `-DeclRefExpr 0x5590ecefa220 <col:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B260.31]->p
  33: ImplicitCastExpr 0x5590ecefa298 <lvm.c:387:7, col:11> 'struct Proto *' <LValueToRValue>
`-MemberExpr 0x5590ecefa260 <col:7, col:11> 'struct Proto *' lvalue ->p 0x5590ece8fe98
  `-ImplicitCastExpr 0x5590ecefa248 <col:7> 'LClosure *' <LValueToRValue>
    `-DeclRefExpr 0x5590ecefa220 <col:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B260.32] (ImplicitCastExpr, LValueToRValue, struct Proto *)
  34: MemberExpr 0x5590ecefa2b0 <lvm.c:387:7, col:14> 'TValue *' lvalue ->k 0x5590ece8c508
`-ImplicitCastExpr 0x5590ecefa298 <col:7, col:11> 'struct Proto *' <LValueToRValue>
  `-MemberExpr 0x5590ecefa260 <col:7, col:11> 'struct Proto *' lvalue ->p 0x5590ece8fe98
    `-ImplicitCastExpr 0x5590ecefa248 <col:7> 'LClosure *' <LValueToRValue>
      `-DeclRefExpr 0x5590ecefa220 <col:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B260.33]->k
  35: ImplicitCastExpr 0x5590ecefa2e8 <lvm.c:387:7, col:14> 'TValue *' <LValueToRValue>
`-MemberExpr 0x5590ecefa2b0 <col:7, col:14> 'TValue *' lvalue ->k 0x5590ece8c508
  `-ImplicitCastExpr 0x5590ecefa298 <col:7, col:11> 'struct Proto *' <LValueToRValue>
    `-MemberExpr 0x5590ecefa260 <col:7, col:11> 'struct Proto *' lvalue ->p 0x5590ece8fe98
      `-ImplicitCastExpr 0x5590ecefa248 <col:7> 'LClosure *' <LValueToRValue>
        `-DeclRefExpr 0x5590ecefa220 <col:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B260.34] (ImplicitCastExpr, LValueToRValue, TValue *)
  36: DeclRefExpr 0x5590ecefa1f8 <lvm.c:387:3> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
k
  37: BinaryOperator 0x5590ecefa300 <lvm.c:387:3, col:14> 'TValue *' '='
|-DeclRefExpr 0x5590ecefa1f8 <col:3> 'TValue *' lvalue Var 0x5590ecef9bb8 'k' 'TValue *'
`-ImplicitCastExpr 0x5590ecefa2e8 <col:7, col:14> 'TValue *' <LValueToRValue>
  `-MemberExpr 0x5590ecefa2b0 <col:7, col:14> 'TValue *' lvalue ->k 0x5590ece8c508
    `-ImplicitCastExpr 0x5590ecefa298 <col:7, col:11> 'struct Proto *' <LValueToRValue>
      `-MemberExpr 0x5590ecefa260 <col:7, col:11> 'struct Proto *' lvalue ->p 0x5590ece8fe98
        `-ImplicitCastExpr 0x5590ecefa248 <col:7> 'LClosure *' <LValueToRValue>
          `-DeclRefExpr 0x5590ecefa220 <col:7> 'LClosure *' lvalue Var 0x5590ecef9aa8 'cl' 'LClosure *'
[B260.36] = [B260.35]
   Preds (4): B261 B62 B74 B88
   Succs (1): B259

 [B261]
   1: DeclStmt 0x5590ecef9b08 <lvm.c:378:3, col:15>col:13
`-VarDecl 0x5590ecef9aa8 <col:3, col:13> col:13 used cl 'LClosure *'
LClosure *cl;
   2: DeclStmt 0x5590ecef9b90 <lvm.c:379:3, col:13>col:9
`-VarDecl 0x5590ecef9b30 <col:3, col:9> col:9 used base 'StkId':'TValue *'
StkId base;
   3: DeclStmt 0x5590ecef9c18 <lvm.c:380:3, col:12>col:11
`-VarDecl 0x5590ecef9bb8 <col:3, col:11> col:11 used k 'TValue *'
TValue *k;
   4: DeclStmt 0x5590ecef9ca0 <lvm.c:381:3, col:24>col:22
`-VarDecl 0x5590ecef9c40 <col:3, col:22> col:22 used pc 'const Instruction *'
const Instruction *pc;
   Preds (1): B262
   Succs (1): B260

 [B0 (EXIT)]
   Preds (4): B65 B72 B84 B254
