static void localfunc(LexState *ls)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclStmt 0x558fa8f497d8 <lparser.c:1166:11>col:11
`-VarDecl 0x558fa8f3bb80 <col:3, col:11> col:11 used v 'expdesc':'struct expdesc'
expdesc v;
   2: DeclStmt 0x558fa8f497c0 <lparser.c:1166:14>col:14
`-VarDecl 0x558fa8f3bbf0 <col:3, col:14> col:14 used b 'expdesc':'struct expdesc'
expdesc b;
   3: DeclRefExpr 0x558fa8f3bcf0 <lparser.c:1167:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f3bd18 <lparser.c:1167:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3bcf0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f3bd30 <lparser.c:1167:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f3bd18 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3bcf0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.4]->fs
   6: ImplicitCastExpr 0x558fa8f3bd68 <lparser.c:1167:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f3bd30 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f3bd18 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3bcf0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   7: DeclStmt 0x558fa8f3bd80 <lparser.c:1167:3, col:25>col:14
`-VarDecl 0x558fa8f3bc90 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f3bd68 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f3bd30 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f3bd18 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f3bcf0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
FuncState *fs = ls->fs;
   8: DeclRefExpr 0x558fa8f3bd98 <lparser.c:1168:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
   9: ImplicitCastExpr 0x558fa8f3beb8 <lparser.c:1168:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3bd98 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  10: DeclRefExpr 0x558fa8f3bdc0 <lparser.c:1168:16> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8f3bf10 <lparser.c:1168:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3bdc0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: DeclRefExpr 0x558fa8f3bde8 <lparser.c:1168:20> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
str_checkname
  13: ImplicitCastExpr 0x558fa8f3be38 <lparser.c:1168:20> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3bde8 <col:20> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
[B1.12] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *))
  14: DeclRefExpr 0x558fa8f3be10 <lparser.c:1168:34> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x558fa8f3be80 <lparser.c:1168:34> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3be10 <col:34> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: CallExpr 0x558fa8f3be50 <lparser.c:1168:20, col:36> 'TString *'
|-ImplicitCastExpr 0x558fa8f3be38 <col:20> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3bde8 <col:20> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
`-ImplicitCastExpr 0x558fa8f3be80 <col:34> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3be10 <col:34> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.13]([B1.15])
  17: IntegerLiteral 0x558fa8f3be98 <lparser.c:1168:39> 'int' 0
0
  18: CallExpr 0x558fa8f3bed0 <lparser.c:1168:3, col:40> 'void'
|-ImplicitCastExpr 0x558fa8f3beb8 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3bd98 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f3bf10 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3bdc0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
|-CallExpr 0x558fa8f3be50 <col:20, col:36> 'TString *'
| |-ImplicitCastExpr 0x558fa8f3be38 <col:20> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f3bde8 <col:20> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
| `-ImplicitCastExpr 0x558fa8f3be80 <col:34> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f3be10 <col:34> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
`-IntegerLiteral 0x558fa8f3be98 <col:39> 'int' 0
[B1.9]([B1.11], [B1.16], [B1.17])
  19: DeclRefExpr 0x558fa8f3bf28 <lparser.c:1169:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
  20: ImplicitCastExpr 0x558fa8f3c038 <lparser.c:1169:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3bf28 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B1.19] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
  21: DeclRefExpr 0x558fa8f3bf50 <lparser.c:1169:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bb80 'v' 'expdesc':'struct expdesc'
v
  22: UnaryOperator 0x558fa8f3bf78 <lparser.c:1169:12, col:13> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3bf50 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bb80 'v' 'expdesc':'struct expdesc'
&[B1.21]
  23: DeclRefExpr 0x558fa8f3bf98 <lparser.c:1169:16> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
VLOCAL
  24: ImplicitCastExpr 0x558fa8f3c090 <lparser.c:1169:16> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f3bf98 <col:16> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
[B1.23] (ImplicitCastExpr, IntegralCast, expkind)
  25: DeclRefExpr 0x558fa8f3bfc0 <lparser.c:1169:24> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  26: ImplicitCastExpr 0x558fa8f3bfe8 <lparser.c:1169:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3bfc0 <col:24> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.25] (ImplicitCastExpr, LValueToRValue, FuncState *)
  27: MemberExpr 0x558fa8f3c000 <lparser.c:1169:24, col:28> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f3bfe8 <col:24> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3bfc0 <col:24> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.26]->freereg
  28: ImplicitCastExpr 0x558fa8f3c0a8 <lparser.c:1169:24, col:28> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3c000 <col:24, col:28> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f3bfe8 <col:24> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3bfc0 <col:24> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.27] (ImplicitCastExpr, LValueToRValue, int)
  29: CallExpr 0x558fa8f3c050 <lparser.c:1169:3, col:35> 'void'
|-ImplicitCastExpr 0x558fa8f3c038 <col:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3bf28 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-UnaryOperator 0x558fa8f3bf78 <col:12, col:13> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f3bf50 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bb80 'v' 'expdesc':'struct expdesc'
|-ImplicitCastExpr 0x558fa8f3c090 <col:16> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8f3bf98 <col:16> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
`-ImplicitCastExpr 0x558fa8f3c0a8 <col:24, col:28> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f3c000 <col:24, col:28> 'int' lvalue ->freereg 0x558fa8eb42f0
    `-ImplicitCastExpr 0x558fa8f3bfe8 <col:24> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f3bfc0 <col:24> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.20]([B1.22], [B1.24], [B1.28])
  30: DeclRefExpr 0x558fa8f3c0c0 <lparser.c:1170:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
  31: ImplicitCastExpr 0x558fa8f3c130 <lparser.c:1170:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3c0c0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
[B1.30] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  32: DeclRefExpr 0x558fa8f3c0e8 <lparser.c:1170:20> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  33: ImplicitCastExpr 0x558fa8f3c180 <lparser.c:1170:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c0e8 <col:20> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.32] (ImplicitCastExpr, LValueToRValue, FuncState *)
  34: IntegerLiteral 0x558fa8f3c110 <lparser.c:1170:24> 'int' 1
1
  35: CallExpr 0x558fa8f3c148 <lparser.c:1170:3, col:25> 'void'
|-ImplicitCastExpr 0x558fa8f3c130 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3c0c0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f3c180 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3c0e8 <col:20> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f3c110 <col:24> 'int' 1
[B1.31]([B1.33], [B1.34])
  36: DeclRefExpr 0x558fa8f3c198 <lparser.c:1171:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
adjustlocalvars
  37: ImplicitCastExpr 0x558fa8f3c208 <lparser.c:1171:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3c198 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
[B1.36] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  38: DeclRefExpr 0x558fa8f3c1c0 <lparser.c:1171:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
ls
  39: ImplicitCastExpr 0x558fa8f3c258 <lparser.c:1171:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c1c0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.38] (ImplicitCastExpr, LValueToRValue, LexState *)
  40: IntegerLiteral 0x558fa8f3c1e8 <lparser.c:1171:23> 'int' 1
1
  41: CallExpr 0x558fa8f3c220 <lparser.c:1171:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f3c208 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3c198 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f3c258 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3c1c0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
`-IntegerLiteral 0x558fa8f3c1e8 <col:23> 'int' 1
[B1.37]([B1.39], [B1.40])
  42: DeclRefExpr 0x558fa8f3c270 <lparser.c:1172:3> 'void (LexState *, expdesc *, int, int)' Function 0x558fa8f1d710 'body' 'void (LexState *, expdesc *, int, int)'
body
  43: ImplicitCastExpr 0x558fa8f3c3a0 <lparser.c:1172:3> 'void (*)(LexState *, expdesc *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3c270 <col:3> 'void (LexState *, expdesc *, int, int)' Function 0x558fa8f1d710 'body' 'void (LexState *, expdesc *, int, int)'
[B1.42] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *, int, int))
  44: DeclRefExpr 0x558fa8f3c298 <lparser.c:1172:8> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
ls
  45: ImplicitCastExpr 0x558fa8f3c400 <lparser.c:1172:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c298 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.44] (ImplicitCastExpr, LValueToRValue, LexState *)
  46: DeclRefExpr 0x558fa8f3c2c0 <lparser.c:1172:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bbf0 'b' 'expdesc':'struct expdesc'
b
  47: UnaryOperator 0x558fa8f3c2e8 <lparser.c:1172:12, col:13> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3c2c0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bbf0 'b' 'expdesc':'struct expdesc'
&[B1.46]
  48: IntegerLiteral 0x558fa8f3c308 <lparser.c:1172:16> 'int' 0
0
  49: DeclRefExpr 0x558fa8f3c328 <lparser.c:1172:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
ls
  50: ImplicitCastExpr 0x558fa8f3c350 <lparser.c:1172:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c328 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.49] (ImplicitCastExpr, LValueToRValue, LexState *)
  51: MemberExpr 0x558fa8f3c368 <lparser.c:1172:19, col:23> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8f3c350 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3c328 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.50]->linenumber
  52: ImplicitCastExpr 0x558fa8f3c418 <lparser.c:1172:19, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3c368 <col:19, col:23> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8f3c350 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3c328 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.51] (ImplicitCastExpr, LValueToRValue, int)
  53: CallExpr 0x558fa8f3c3b8 <lparser.c:1172:3, col:33> 'void'
|-ImplicitCastExpr 0x558fa8f3c3a0 <col:3> 'void (*)(LexState *, expdesc *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3c270 <col:3> 'void (LexState *, expdesc *, int, int)' Function 0x558fa8f1d710 'body' 'void (LexState *, expdesc *, int, int)'
|-ImplicitCastExpr 0x558fa8f3c400 <col:8> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3c298 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f3c2e8 <col:12, col:13> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f3c2c0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bbf0 'b' 'expdesc':'struct expdesc'
|-IntegerLiteral 0x558fa8f3c308 <col:16> 'int' 0
`-ImplicitCastExpr 0x558fa8f3c418 <col:19, col:23> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f3c368 <col:19, col:23> 'int' lvalue ->linenumber 0x558fa8ea0308
    `-ImplicitCastExpr 0x558fa8f3c350 <col:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f3c328 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ba40 'ls' 'LexState *'
[B1.43]([B1.45], [B1.47], [B1.48], [B1.52])
  54: DeclRefExpr 0x558fa8f3c430 <lparser.c:1173:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
luaK_storevar
  55: ImplicitCastExpr 0x558fa8f3c510 <lparser.c:1173:3> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3c430 <col:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
[B1.54] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, expdesc *))
  56: DeclRefExpr 0x558fa8f3c458 <lparser.c:1173:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  57: ImplicitCastExpr 0x558fa8f3c568 <lparser.c:1173:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c458 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.56] (ImplicitCastExpr, LValueToRValue, FuncState *)
  58: DeclRefExpr 0x558fa8f3c480 <lparser.c:1173:22> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bb80 'v' 'expdesc':'struct expdesc'
v
  59: UnaryOperator 0x558fa8f3c4a8 <lparser.c:1173:21, col:22> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3c480 <col:22> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bb80 'v' 'expdesc':'struct expdesc'
&[B1.58]
  60: DeclRefExpr 0x558fa8f3c4c8 <lparser.c:1173:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bbf0 'b' 'expdesc':'struct expdesc'
b
  61: UnaryOperator 0x558fa8f3c4f0 <lparser.c:1173:25, col:26> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f3c4c8 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bbf0 'b' 'expdesc':'struct expdesc'
&[B1.60]
  62: CallExpr 0x558fa8f3c528 <lparser.c:1173:3, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f3c510 <col:3> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3c430 <col:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f3c568 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3c458 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f3c4a8 <col:21, col:22> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f3c480 <col:22> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bb80 'v' 'expdesc':'struct expdesc'
`-UnaryOperator 0x558fa8f3c4f0 <col:25, col:26> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f3c4c8 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f3bbf0 'b' 'expdesc':'struct expdesc'
[B1.55]([B1.57], [B1.59], [B1.61])
  63: DeclRefExpr 0x558fa8f3c8e0 <lparser.c:1175:44> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  64: ImplicitCastExpr 0x558fa8f3c920 <lparser.c:1175:44> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c8e0 <col:44> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.63] (ImplicitCastExpr, LValueToRValue, FuncState *)
  65: MemberExpr 0x558fa8f3c938 <lparser.c:1175:44, col:48> 'int' lvalue ->pc 0x558fa8eb41d0
`-ImplicitCastExpr 0x558fa8f3c920 <col:44> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3c8e0 <col:44> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.64]->pc
  66: ImplicitCastExpr 0x558fa8f3c970 <lparser.c:1175:44, col:48> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3c938 <col:44, col:48> 'int' lvalue ->pc 0x558fa8eb41d0
  `-ImplicitCastExpr 0x558fa8f3c920 <col:44> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3c8e0 <col:44> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.65] (ImplicitCastExpr, LValueToRValue, int)
  67: DeclRefExpr 0x558fa8f3c580 <lparser.c:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  68: ImplicitCastExpr 0x558fa8f3c5c8 <lparser.c:32:27, col:30> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
  `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
([B1.67]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  69: MemberExpr 0x558fa8f3c5e0 <lparser.c:32:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
    `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.68]->f
  70: ImplicitCastExpr 0x558fa8f3c618 <lparser.c:32:27, col:33> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f3c5e0 <col:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
      `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.69] (ImplicitCastExpr, LValueToRValue, Proto *)
  71: MemberExpr 0x558fa8f3c630 <lparser.c:32:27, col:36> 'struct LocVar *' lvalue ->locvars 0x558fa8e8f090
`-ImplicitCastExpr 0x558fa8f3c618 <col:27, col:33> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f3c5e0 <col:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
        `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.70]->locvars
  72: ImplicitCastExpr 0x558fa8f3c830 <lparser.c:32:27, col:36> 'struct LocVar *' <LValueToRValue>
`-MemberExpr 0x558fa8f3c630 <col:27, col:36> 'struct LocVar *' lvalue ->locvars 0x558fa8e8f090
  `-ImplicitCastExpr 0x558fa8f3c618 <col:27, col:33> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f3c5e0 <col:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
          `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.71] (ImplicitCastExpr, LValueToRValue, struct LocVar *)
  73: DeclRefExpr 0x558fa8f3c668 <lparser.c:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  74: ImplicitCastExpr 0x558fa8f3c6b0 <lparser.c:32:44, col:47> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
  `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
([B1.73]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  75: MemberExpr 0x558fa8f3c6c8 <lparser.c:32:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
`-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
    `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.74]->actvar
  76: ImplicitCastExpr 0x558fa8f3c7f0 <lparser.c:32:44, col:50> 'unsigned short *' <ArrayToPointerDecay>
`-MemberExpr 0x558fa8f3c6c8 <col:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
  `-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
      `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.75] (ImplicitCastExpr, ArrayToPointerDecay, unsigned short *)
  77: DeclRefExpr 0x558fa8f3c700 <lparser.c:1175:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
fs
  78: ImplicitCastExpr 0x558fa8f3c728 <lparser.c:1175:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.77] (ImplicitCastExpr, LValueToRValue, FuncState *)
  79: MemberExpr 0x558fa8f3c740 <lparser.c:1175:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.78]->nactvar
  80: ImplicitCastExpr 0x558fa8f3c798 <lparser.c:1175:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.79] (ImplicitCastExpr, LValueToRValue, lu_byte)
  81: ImplicitCastExpr 0x558fa8f3c7b0 <lparser.c:1175:17, col:21> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.80] (ImplicitCastExpr, IntegralCast, int)
  82: IntegerLiteral 0x558fa8f3c778 <lparser.c:1175:31> 'int' 1
1
  83: BinaryOperator 0x558fa8f3c7c8 <lparser.c:1175:17, col:31> 'int' '-'
|-ImplicitCastExpr 0x558fa8f3c7b0 <col:17, col:21> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|     `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f3c778 <col:31> 'int' 1
[B1.81] - [B1.82]
  84: ArraySubscriptExpr 0x558fa8f3c808 <lparser.c:32:44, col:58> 'unsigned short' lvalue
|-ImplicitCastExpr 0x558fa8f3c7f0 <col:44, col:50> 'unsigned short *' <ArrayToPointerDecay>
| `-MemberExpr 0x558fa8f3c6c8 <col:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
|   `-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
|     `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
|       `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
`-BinaryOperator 0x558fa8f3c7c8 <col:17, col:31> 'int' '-'
  |-ImplicitCastExpr 0x558fa8f3c7b0 <col:17, col:21> 'int' <IntegralCast>
  | `-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  |   `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  |     `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
  |       `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
  `-IntegerLiteral 0x558fa8f3c778 <col:31> 'int' 1
[B1.76][[B1.83]]
  85: ImplicitCastExpr 0x558fa8f3c848 <lparser.c:32:44, col:58> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x558fa8f3c808 <col:44, col:58> 'unsigned short' lvalue
  |-ImplicitCastExpr 0x558fa8f3c7f0 <col:44, col:50> 'unsigned short *' <ArrayToPointerDecay>
  | `-MemberExpr 0x558fa8f3c6c8 <col:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
  |   `-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
  |     `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
  |       `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
  `-BinaryOperator 0x558fa8f3c7c8 <col:17, col:31> 'int' '-'
    |-ImplicitCastExpr 0x558fa8f3c7b0 <col:17, col:21> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    |     `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
    |       `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
    `-IntegerLiteral 0x558fa8f3c778 <col:31> 'int' 1
[B1.84] (ImplicitCastExpr, LValueToRValue, unsigned short)
  86: ArraySubscriptExpr 0x558fa8f3c860 <lparser.c:32:27, col:59> 'struct LocVar':'struct LocVar' lvalue
|-ImplicitCastExpr 0x558fa8f3c830 <col:27, col:36> 'struct LocVar *' <LValueToRValue>
| `-MemberExpr 0x558fa8f3c630 <col:27, col:36> 'struct LocVar *' lvalue ->locvars 0x558fa8e8f090
|   `-ImplicitCastExpr 0x558fa8f3c618 <col:27, col:33> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f3c5e0 <col:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
|           `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f3c848 <line:32:44, col:58> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x558fa8f3c808 <col:44, col:58> 'unsigned short' lvalue
    |-ImplicitCastExpr 0x558fa8f3c7f0 <col:44, col:50> 'unsigned short *' <ArrayToPointerDecay>
    | `-MemberExpr 0x558fa8f3c6c8 <col:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
    |   `-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
    |     `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
    |       `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
    `-BinaryOperator 0x558fa8f3c7c8 <col:17, col:31> 'int' '-'
      |-ImplicitCastExpr 0x558fa8f3c7b0 <col:17, col:21> 'int' <IntegralCast>
      | `-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
      |   `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      |     `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
      |       `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
      `-IntegerLiteral 0x558fa8f3c778 <col:31> 'int' 1
[B1.72][[B1.85]]
  87: MemberExpr 0x558fa8f3c8a8 <lparser.c:32:26, line:1175:34> 'int' lvalue .startpc 0x558fa8e8fa70
`-ParenExpr 0x558fa8f3c888 <line:32:26, col:60> 'struct LocVar':'struct LocVar' lvalue
  `-ArraySubscriptExpr 0x558fa8f3c860 <col:27, col:59> 'struct LocVar':'struct LocVar' lvalue
    |-ImplicitCastExpr 0x558fa8f3c830 <col:27, col:36> 'struct LocVar *' <LValueToRValue>
    | `-MemberExpr 0x558fa8f3c630 <col:27, col:36> 'struct LocVar *' lvalue ->locvars 0x558fa8e8f090
    |   `-ImplicitCastExpr 0x558fa8f3c618 <col:27, col:33> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x558fa8f3c5e0 <col:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |       `-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
    |         `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
    |           `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x558fa8f3c848 <line:32:44, col:58> 'unsigned short' <LValueToRValue>
      `-ArraySubscriptExpr 0x558fa8f3c808 <col:44, col:58> 'unsigned short' lvalue
        |-ImplicitCastExpr 0x558fa8f3c7f0 <col:44, col:50> 'unsigned short *' <ArrayToPointerDecay>
        | `-MemberExpr 0x558fa8f3c6c8 <col:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
        |   `-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
        |     `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
        |       `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
        `-BinaryOperator 0x558fa8f3c7c8 <col:17, col:31> 'int' '-'
          |-ImplicitCastExpr 0x558fa8f3c7b0 <col:17, col:21> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
          |   `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
          |     `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
          |       `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
          `-IntegerLiteral 0x558fa8f3c778 <col:31> 'int' 1
([B1.86]).startpc
  88: BinaryOperator 0x558fa8f3c988 <lparser.c:32:26, line:1175:48> 'int' '='
|-MemberExpr 0x558fa8f3c8a8 <line:32:26, line:1175:34> 'int' lvalue .startpc 0x558fa8e8fa70
| `-ParenExpr 0x558fa8f3c888 <line:32:26, col:60> 'struct LocVar':'struct LocVar' lvalue
|   `-ArraySubscriptExpr 0x558fa8f3c860 <col:27, col:59> 'struct LocVar':'struct LocVar' lvalue
|     |-ImplicitCastExpr 0x558fa8f3c830 <col:27, col:36> 'struct LocVar *' <LValueToRValue>
|     | `-MemberExpr 0x558fa8f3c630 <col:27, col:36> 'struct LocVar *' lvalue ->locvars 0x558fa8e8f090
|     |   `-ImplicitCastExpr 0x558fa8f3c618 <col:27, col:33> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x558fa8f3c5e0 <col:27, col:33> 'Proto *' lvalue ->f 0x558fa8eb3e58
|     |       `-ImplicitCastExpr 0x558fa8f3c5c8 <col:27, col:30> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x558fa8f3c5a8 <col:27, col:30> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x558fa8f3c580 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x558fa8f3c848 <line:32:44, col:58> 'unsigned short' <LValueToRValue>
|       `-ArraySubscriptExpr 0x558fa8f3c808 <col:44, col:58> 'unsigned short' lvalue
|         |-ImplicitCastExpr 0x558fa8f3c7f0 <col:44, col:50> 'unsigned short *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558fa8f3c6c8 <col:44, col:50> 'unsigned short [200]' lvalue ->actvar 0x558fa8eb46a0
|         |   `-ImplicitCastExpr 0x558fa8f3c6b0 <col:44, col:47> 'FuncState *' <LValueToRValue>
|         |     `-ParenExpr 0x558fa8f3c690 <col:44, col:47> 'FuncState *' lvalue
|         |       `-DeclRefExpr 0x558fa8f3c668 <line:1175:13> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
|         `-BinaryOperator 0x558fa8f3c7c8 <col:17, col:31> 'int' '-'
|           |-ImplicitCastExpr 0x558fa8f3c7b0 <col:17, col:21> 'int' <IntegralCast>
|           | `-ImplicitCastExpr 0x558fa8f3c798 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
|           |   `-MemberExpr 0x558fa8f3c740 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
|           |     `-ImplicitCastExpr 0x558fa8f3c728 <col:17> 'FuncState *' <LValueToRValue>
|           |       `-DeclRefExpr 0x558fa8f3c700 <col:17> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
|           `-IntegerLiteral 0x558fa8f3c778 <col:31> 'int' 1
`-ImplicitCastExpr 0x558fa8f3c970 <col:44, col:48> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f3c938 <col:44, col:48> 'int' lvalue ->pc 0x558fa8eb41d0
    `-ImplicitCastExpr 0x558fa8f3c920 <col:44> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f3c8e0 <col:44> 'FuncState *' lvalue Var 0x558fa8f3bc90 'fs' 'FuncState *'
[B1.87] = [B1.66]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
