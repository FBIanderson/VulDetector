void luaK_self(FuncState *fs, expdesc *e, expdesc *key)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclStmt 0x5637768d7538 <lcode.c:504:3, col:11>col:7
`-VarDecl 0x5637768d74d8 <col:3, col:7> col:7 used func 'int'
int func;
   2: DeclRefExpr 0x5637768d7550 <lcode.c:505:3> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   3: ImplicitCastExpr 0x5637768d75c8 <lcode.c:505:3> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d7550 <col:3> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   4: DeclRefExpr 0x5637768d7578 <lcode.c:505:19> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
   5: ImplicitCastExpr 0x5637768d7618 <lcode.c:505:19> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7578 <col:19> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.4] (ImplicitCastExpr, LValueToRValue, FuncState *)
   6: DeclRefExpr 0x5637768d75a0 <lcode.c:505:23> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
e
   7: ImplicitCastExpr 0x5637768d7630 <lcode.c:505:23> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d75a0 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.6] (ImplicitCastExpr, LValueToRValue, expdesc *)
   8: CallExpr 0x5637768d75e0 <lcode.c:505:3, col:24> 'int'
|-ImplicitCastExpr 0x5637768d75c8 <col:3> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d7550 <col:3> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d7618 <col:19> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7578 <col:19> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d7630 <col:23> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d75a0 <col:23> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.3]([B1.5], [B1.7])
   9: DeclRefExpr 0x5637768d7648 <lcode.c:506:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
  10: ImplicitCastExpr 0x5637768d76c0 <lcode.c:506:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d7648 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B1.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  11: DeclRefExpr 0x5637768d7670 <lcode.c:506:11> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768d7710 <lcode.c:506:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7670 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: DeclRefExpr 0x5637768d7698 <lcode.c:506:15> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
e
  14: ImplicitCastExpr 0x5637768d7728 <lcode.c:506:15> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7698 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.13] (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: CallExpr 0x5637768d76d8 <lcode.c:506:3, col:16> 'void'
|-ImplicitCastExpr 0x5637768d76c0 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d7648 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d7710 <col:11> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7670 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d7728 <col:15> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7698 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.10]([B1.12], [B1.14])
  16: DeclRefExpr 0x5637768d7768 <lcode.c:507:10> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
  17: ImplicitCastExpr 0x5637768d7790 <lcode.c:507:10> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7768 <col:10> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.16] (ImplicitCastExpr, LValueToRValue, FuncState *)
  18: MemberExpr 0x5637768d77a8 <lcode.c:507:10, col:14> 'int' lvalue ->freereg 0x56377687e268
`-ImplicitCastExpr 0x5637768d7790 <col:10> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7768 <col:10> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.17]->freereg
  19: ImplicitCastExpr 0x5637768d77e0 <lcode.c:507:10, col:14> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d77a8 <col:10, col:14> 'int' lvalue ->freereg 0x56377687e268
  `-ImplicitCastExpr 0x5637768d7790 <col:10> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d7768 <col:10> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: DeclRefExpr 0x5637768d7740 <lcode.c:507:3> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
func
  21: BinaryOperator 0x5637768d77f8 <lcode.c:507:3, col:14> 'int' '='
|-DeclRefExpr 0x5637768d7740 <col:3> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
`-ImplicitCastExpr 0x5637768d77e0 <col:10, col:14> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d77a8 <col:10, col:14> 'int' lvalue ->freereg 0x56377687e268
    `-ImplicitCastExpr 0x5637768d7790 <col:10> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d7768 <col:10> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.20] = [B1.19]
  22: DeclRefExpr 0x5637768d7820 <lcode.c:508:3> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
  23: ImplicitCastExpr 0x5637768d7890 <lcode.c:508:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d7820 <col:3> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
[B1.22] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  24: DeclRefExpr 0x5637768d7848 <lcode.c:508:20> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
  25: ImplicitCastExpr 0x5637768d78e0 <lcode.c:508:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7848 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.24] (ImplicitCastExpr, LValueToRValue, FuncState *)
  26: IntegerLiteral 0x5637768d7870 <lcode.c:508:24> 'int' 2
2
  27: CallExpr 0x5637768d78a8 <lcode.c:508:3, col:25> 'void'
|-ImplicitCastExpr 0x5637768d7890 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d7820 <col:3> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768d78e0 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7848 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
`-IntegerLiteral 0x5637768d7870 <col:24> 'int' 2
[B1.23]([B1.25], [B1.26])
  28: DeclRefExpr 0x5637768d78f8 <lcode.c:509:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
  29: ImplicitCastExpr 0x5637768d7b78 <lcode.c:509:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d78f8 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B1.28] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  30: DeclRefExpr 0x5637768d7920 <lcode.c:509:16> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
  31: ImplicitCastExpr 0x5637768d7c00 <lcode.c:509:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7920 <col:16> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.30] (ImplicitCastExpr, LValueToRValue, FuncState *)
  32: DeclRefExpr 0x5637768d7948 <lcode.c:509:20> 'int' EnumConstant 0x56377686b7f8 'OP_SELF' 'int'
OP_SELF
  33: ImplicitCastExpr 0x5637768d7c18 <lcode.c:509:20> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x5637768d7948 <col:20> 'int' EnumConstant 0x56377686b7f8 'OP_SELF' 'int'
[B1.32] (ImplicitCastExpr, IntegralCast, OpCode)
  34: DeclRefExpr 0x5637768d7970 <lcode.c:509:29> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
func
  35: ImplicitCastExpr 0x5637768d7c30 <lcode.c:509:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d7970 <col:29> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
[B1.34] (ImplicitCastExpr, LValueToRValue, int)
  36: DeclRefExpr 0x5637768d7998 <lcode.c:509:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
e
  37: ImplicitCastExpr 0x5637768d79c0 <lcode.c:509:35> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7998 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.36] (ImplicitCastExpr, LValueToRValue, expdesc *)
  38: MemberExpr 0x5637768d79d8 <lcode.c:509:35, col:38> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d79c0 <col:35> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7998 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.37]->u
  39: MemberExpr 0x5637768d7a10 <lcode.c:509:35, col:40> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d79d8 <col:35, col:38> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d79c0 <col:35> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d7998 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.38].s
  40: MemberExpr 0x5637768d7a48 <lcode.c:509:35, col:42> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d7a10 <col:35, col:40> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d79d8 <col:35, col:38> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d79c0 <col:35> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d7998 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.39].info
  41: ImplicitCastExpr 0x5637768d7c48 <lcode.c:509:35, col:42> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d7a48 <col:35, col:42> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d7a10 <col:35, col:40> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d79d8 <col:35, col:38> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d79c0 <col:35> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d7998 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.40] (ImplicitCastExpr, LValueToRValue, int)
  42: DeclRefExpr 0x5637768d7a80 <lcode.c:509:48> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
  43: ImplicitCastExpr 0x5637768d7af8 <lcode.c:509:48> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d7a80 <col:48> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B1.42] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
  44: DeclRefExpr 0x5637768d7aa8 <lcode.c:509:60> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
  45: ImplicitCastExpr 0x5637768d7b48 <lcode.c:509:60> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7aa8 <col:60> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.44] (ImplicitCastExpr, LValueToRValue, FuncState *)
  46: DeclRefExpr 0x5637768d7ad0 <lcode.c:509:64> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
key
  47: ImplicitCastExpr 0x5637768d7b60 <lcode.c:509:64> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7ad0 <col:64> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
[B1.46] (ImplicitCastExpr, LValueToRValue, expdesc *)
  48: CallExpr 0x5637768d7b10 <lcode.c:509:48, col:67> 'int'
|-ImplicitCastExpr 0x5637768d7af8 <col:48> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d7a80 <col:48> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d7b48 <col:60> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7aa8 <col:60> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d7b60 <col:64> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7ad0 <col:64> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
[B1.43]([B1.45], [B1.47])
  49: CallExpr 0x5637768d7b90 <lcode.c:509:3, col:68> 'int'
|-ImplicitCastExpr 0x5637768d7b78 <col:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d78f8 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768d7c00 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7920 <col:16> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d7c18 <col:20> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x5637768d7948 <col:20> 'int' EnumConstant 0x56377686b7f8 'OP_SELF' 'int'
|-ImplicitCastExpr 0x5637768d7c30 <col:29> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7970 <col:29> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
|-ImplicitCastExpr 0x5637768d7c48 <col:35, col:42> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d7a48 <col:35, col:42> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768d7a10 <col:35, col:40> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768d79d8 <col:35, col:38> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768d79c0 <col:35> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768d7998 <col:35> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
`-CallExpr 0x5637768d7b10 <col:48, col:67> 'int'
  |-ImplicitCastExpr 0x5637768d7af8 <col:48> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d7a80 <col:48> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
  |-ImplicitCastExpr 0x5637768d7b48 <col:60> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d7aa8 <col:60> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768d7b60 <col:64> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d7ad0 <col:64> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
[B1.29]([B1.31], [B1.33], [B1.35], [B1.41], [B1.48])
  50: DeclRefExpr 0x5637768d7c60 <lcode.c:510:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
  51: ImplicitCastExpr 0x5637768d7cd8 <lcode.c:510:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d7c60 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B1.50] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  52: DeclRefExpr 0x5637768d7c88 <lcode.c:510:11> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
fs
  53: ImplicitCastExpr 0x5637768d7d28 <lcode.c:510:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7c88 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
[B1.52] (ImplicitCastExpr, LValueToRValue, FuncState *)
  54: DeclRefExpr 0x5637768d7cb0 <lcode.c:510:15> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
key
  55: ImplicitCastExpr 0x5637768d7d40 <lcode.c:510:15> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7cb0 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
[B1.54] (ImplicitCastExpr, LValueToRValue, expdesc *)
  56: CallExpr 0x5637768d7cf0 <lcode.c:510:3, col:18> 'void'
|-ImplicitCastExpr 0x5637768d7cd8 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d7c60 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d7d28 <col:11> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d7c88 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d7248 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d7d40 <col:15> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7cb0 <col:15> 'expdesc *' lvalue ParmVar 0x5637768d7328 'key' 'expdesc *'
[B1.51]([B1.53], [B1.55])
  57: DeclRefExpr 0x5637768d7e40 <lcode.c:511:17> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
func
  58: ImplicitCastExpr 0x5637768d7e68 <lcode.c:511:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d7e40 <col:17> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
[B1.57] (ImplicitCastExpr, LValueToRValue, int)
  59: DeclRefExpr 0x5637768d7d58 <lcode.c:511:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
e
  60: ImplicitCastExpr 0x5637768d7d80 <lcode.c:511:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7d58 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.59] (ImplicitCastExpr, LValueToRValue, expdesc *)
  61: MemberExpr 0x5637768d7d98 <lcode.c:511:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d7d80 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7d58 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.60]->u
  62: MemberExpr 0x5637768d7dd0 <lcode.c:511:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d7d98 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d7d80 <col:3> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d7d58 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.61].s
  63: MemberExpr 0x5637768d7e08 <lcode.c:511:3, col:10> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d7dd0 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d7d98 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d7d80 <col:3> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d7d58 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.62].info
  64: BinaryOperator 0x5637768d7e80 <lcode.c:511:3, col:17> 'int' '='
|-MemberExpr 0x5637768d7e08 <col:3, col:10> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768d7dd0 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768d7d98 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768d7d80 <col:3> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d7d58 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d7e68 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7e40 <col:17> 'int' lvalue Var 0x5637768d74d8 'func' 'int'
[B1.63] = [B1.58]
  65: DeclRefExpr 0x5637768d7f20 <lcode.c:512:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
VNONRELOC
  66: ImplicitCastExpr 0x5637768d7f48 <lcode.c:512:10> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768d7f20 <col:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B1.65] (ImplicitCastExpr, IntegralCast, expkind)
  67: DeclRefExpr 0x5637768d7ea8 <lcode.c:512:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
e
  68: ImplicitCastExpr 0x5637768d7ed0 <lcode.c:512:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d7ea8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.67] (ImplicitCastExpr, LValueToRValue, expdesc *)
  69: MemberExpr 0x5637768d7ee8 <lcode.c:512:3, col:6> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d7ed0 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d7ea8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
[B1.68]->k
  70: BinaryOperator 0x5637768d7f60 <lcode.c:512:3, col:10> 'expkind':'expkind' '='
|-MemberExpr 0x5637768d7ee8 <col:3, col:6> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768d7ed0 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768d7ea8 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d72b8 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d7f48 <col:10> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768d7f20 <col:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B1.69] = [B1.66]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
