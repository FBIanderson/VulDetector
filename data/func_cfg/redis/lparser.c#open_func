static void open_func(LexState *ls, FuncState *fs)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: DeclRefExpr 0x558fa8f09050 <lparser.c:352:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x558fa8f09078 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f09050 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B1.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x558fa8f09090 <lparser.c:352:12, ./ldo.h:22:47> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
`-ImplicitCastExpr 0x558fa8f09078 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f09050 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B1.2]->top
   4: UnaryOperator 0x558fa8f090c8 <lparser.c:352:12, ./ldo.h:22:50> 'StkId':'TValue *' postfix '++'
`-MemberExpr 0x558fa8f09090 <lparser.c:352:12, ./ldo.h:22:47> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
  `-ImplicitCastExpr 0x558fa8f09078 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f09050 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B1.3]++
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x558fa8f08f90 <./llimits.h:123:38> 'int' 0
0
   2: CStyleCastExpr 0x558fa8f08fc0 <./llimits.h:123:32, col:38> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f08f90 <col:38> 'int' 0
(void)[B2.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f08eb8 <./ldo.h:18:5> 'void (lua_State *, int)' Function 0x558fa8ed2958 'luaD_growstack' 'void (lua_State *, int)'
luaD_growstack
   2: ImplicitCastExpr 0x558fa8f08f28 <./ldo.h:18:5> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f08eb8 <col:5> 'void (lua_State *, int)' Function 0x558fa8ed2958 'luaD_growstack' 'void (lua_State *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int))
   3: DeclRefExpr 0x558fa8f08ee0 <lparser.c:352:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x558fa8f08f78 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08ee0 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B3.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: IntegerLiteral 0x558fa8f08f08 <./ldo.h:22:40> 'int' 1
1
   6: CallExpr 0x558fa8f08f40 <./ldo.h:18:5, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f08f28 <col:5> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f08eb8 <col:5> 'void (lua_State *, int)' Function 0x558fa8ed2958 'luaD_growstack' 'void (lua_State *, int)'
|-ImplicitCastExpr 0x558fa8f08f78 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f08ee0 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
`-IntegerLiteral 0x558fa8f08f08 <./ldo.h:22:40> 'int' 1
[B3.2]([B3.4], [B3.5])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x558fa8f08610 <lparser.c:350:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
   2: ImplicitCastExpr 0x558fa8f08638 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08610 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.1] (ImplicitCastExpr, LValueToRValue, lua_State *)
   3: MemberExpr 0x558fa8f08650 <lparser.c:350:12, ./ldo.h:22:47> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
`-ImplicitCastExpr 0x558fa8f08638 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08610 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.2]->top
   4: UnaryOperator 0x558fa8f08688 <lparser.c:350:12, ./ldo.h:22:50> 'StkId':'TValue *' postfix '++'
`-MemberExpr 0x558fa8f08650 <lparser.c:350:12, ./ldo.h:22:47> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
  `-ImplicitCastExpr 0x558fa8f08638 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f08610 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.3]++
   5: DeclRefExpr 0x558fa8f08750 <lparser.c:351:19> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
   6: ImplicitCastExpr 0x558fa8f08778 <lparser.c:351:19> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08750 <col:19> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: MemberExpr 0x558fa8f08790 <lparser.c:351:19, col:22> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
`-ImplicitCastExpr 0x558fa8f08778 <col:19> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08750 <col:19> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.6]->top
   8: ImplicitCastExpr 0x558fa8f087e8 <./lobject.h:154:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x558fa8f087c8 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x558fa8f08790 <lparser.c:351:19, col:22> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
    `-ImplicitCastExpr 0x558fa8f08778 <col:19> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f08750 <col:19> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
([B4.7]) (ImplicitCastExpr, LValueToRValue, StkId)
   9: DeclStmt 0x558fa8f08800 <./lobject.h:154:5, col:22>col:13
`-VarDecl 0x558fa8f086f0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x558fa8f087e8 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x558fa8f087c8 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x558fa8f08790 <lparser.c:351:19, col:22> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
        `-ImplicitCastExpr 0x558fa8f08778 <col:19> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f08750 <col:19> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
TValue *i_o = (L->top);
  10: DeclRefExpr 0x558fa8f088c8 <lparser.c:351:27> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
f
  11: ImplicitCastExpr 0x558fa8f08970 <./llimits.h:75:26, col:30> 'Proto *' <LValueToRValue>
`-ParenExpr 0x558fa8f08950 <col:26, col:30> 'Proto *' lvalue
  `-ParenExpr 0x558fa8f088f0 <./lobject.h:155:36, col:38> 'Proto *' lvalue
    `-DeclRefExpr 0x558fa8f088c8 <lparser.c:351:27> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
(([B4.10])) (ImplicitCastExpr, LValueToRValue, Proto *)
  12: CStyleCastExpr 0x558fa8f08988 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x558fa8f08970 <col:26, col:30> 'Proto *' <LValueToRValue>
  `-ParenExpr 0x558fa8f08950 <col:26, col:30> 'Proto *' lvalue
    `-ParenExpr 0x558fa8f088f0 <./lobject.h:155:36, col:38> 'Proto *' lvalue
      `-DeclRefExpr 0x558fa8f088c8 <lparser.c:351:27> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
(GCObject *)[B4.11] (CStyleCastExpr, BitCast, GCObject *)
  13: DeclRefExpr 0x558fa8f08818 <./lobject.h:155:5> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
i_o
  14: ImplicitCastExpr 0x558fa8f08840 <./lobject.h:155:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08818 <col:5> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
[B4.13] (ImplicitCastExpr, LValueToRValue, TValue *)
  15: MemberExpr 0x558fa8f08858 <./lobject.h:155:5, col:10> 'Value':'Value' lvalue ->value 0x558fa8e81d70
`-ImplicitCastExpr 0x558fa8f08840 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08818 <col:5> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
[B4.14]->value
  16: MemberExpr 0x558fa8f08890 <./lobject.h:155:5, col:16> 'GCObject *' lvalue .gc 0x558fa8e81a70
`-MemberExpr 0x558fa8f08858 <col:5, col:10> 'Value':'Value' lvalue ->value 0x558fa8e81d70
  `-ImplicitCastExpr 0x558fa8f08840 <col:5> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f08818 <col:5> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
[B4.15].gc
  17: BinaryOperator 0x558fa8f089d0 <./lobject.h:155:5, ./llimits.h:75:31> 'GCObject *' '='
|-MemberExpr 0x558fa8f08890 <./lobject.h:155:5, col:16> 'GCObject *' lvalue .gc 0x558fa8e81a70
| `-MemberExpr 0x558fa8f08858 <col:5, col:10> 'Value':'Value' lvalue ->value 0x558fa8e81d70
|   `-ImplicitCastExpr 0x558fa8f08840 <col:5> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f08818 <col:5> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
`-ParenExpr 0x558fa8f089b0 <./llimits.h:75:22, col:31> 'GCObject *'
  `-CStyleCastExpr 0x558fa8f08988 <col:23, col:30> 'GCObject *' <BitCast>
    `-ImplicitCastExpr 0x558fa8f08970 <col:26, col:30> 'Proto *' <LValueToRValue>
      `-ParenExpr 0x558fa8f08950 <col:26, col:30> 'Proto *' lvalue
        `-ParenExpr 0x558fa8f088f0 <./lobject.h:155:36, col:38> 'Proto *' lvalue
          `-DeclRefExpr 0x558fa8f088c8 <lparser.c:351:27> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B4.16] = ([B4.12])
  18: IntegerLiteral 0x558fa8f08a70 <./lua.h:82:22> 'int' 8
8
  19: IntegerLiteral 0x558fa8f08a90 <./lobject.h:28:30> 'int' 1
1
  20: BinaryOperator 0x558fa8f08ab0 <./lua.h:82:22, ./lobject.h:28:30> 'int' '+'
|-IntegerLiteral 0x558fa8f08a70 <./lua.h:82:22> 'int' 8
`-IntegerLiteral 0x558fa8f08a90 <./lobject.h:28:30> 'int' 1
[B4.18] + [B4.19]
  21: DeclRefExpr 0x558fa8f089f8 <./lobject.h:155:42> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
i_o
  22: ImplicitCastExpr 0x558fa8f08a20 <./lobject.h:155:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f089f8 <col:42> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
[B4.21] (ImplicitCastExpr, LValueToRValue, TValue *)
  23: MemberExpr 0x558fa8f08a38 <./lobject.h:155:42, col:47> 'int' lvalue ->tt 0x558fa8e81dd0
`-ImplicitCastExpr 0x558fa8f08a20 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f089f8 <col:42> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
[B4.22]->tt
  24: BinaryOperator 0x558fa8f08af8 <./lobject.h:155:42, line:28:31> 'int' '='
|-MemberExpr 0x558fa8f08a38 <line:155:42, col:47> 'int' lvalue ->tt 0x558fa8e81dd0
| `-ImplicitCastExpr 0x558fa8f08a20 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f089f8 <col:42> 'TValue *' lvalue Var 0x558fa8f086f0 'i_o' 'TValue *'
`-ParenExpr 0x558fa8f08ad8 <line:28:20, col:31> 'int'
  `-BinaryOperator 0x558fa8f08ab0 <./lua.h:82:22, ./lobject.h:28:30> 'int' '+'
    |-IntegerLiteral 0x558fa8f08a70 <./lua.h:82:22> 'int' 8
    `-IntegerLiteral 0x558fa8f08a90 <./lobject.h:28:30> 'int' 1
[B4.23] = ([B4.20])
  25: IntegerLiteral 0x558fa8f08b20 <./llimits.h:62:31> 'int' 0
0
  26: CStyleCastExpr 0x558fa8f08b50 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f08b20 <col:31> 'int' 0
(void)[B4.25] (CStyleCastExpr, ToVoid, void)
  27: DeclRefExpr 0x558fa8f08bd8 <lparser.c:352:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
  28: ImplicitCastExpr 0x558fa8f08c00 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08bd8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.27] (ImplicitCastExpr, LValueToRValue, lua_State *)
  29: MemberExpr 0x558fa8f08c18 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
`-ImplicitCastExpr 0x558fa8f08c00 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08bd8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.28]->stack_last
  30: ImplicitCastExpr 0x558fa8f08c68 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x558fa8f08c18 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
  `-ImplicitCastExpr 0x558fa8f08c00 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f08bd8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.29] (ImplicitCastExpr, LValueToRValue, StkId)
  31: CStyleCastExpr 0x558fa8f08c80 <./ldo.h:17:7, col:18> 'char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f08c68 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x558fa8f08c18 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
    `-ImplicitCastExpr 0x558fa8f08c00 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f08bd8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
(char *)[B4.30] (CStyleCastExpr, BitCast, char *)
  32: DeclRefExpr 0x558fa8f08ca8 <lparser.c:352:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
  33: ImplicitCastExpr 0x558fa8f08cd0 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08ca8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.32] (ImplicitCastExpr, LValueToRValue, lua_State *)
  34: MemberExpr 0x558fa8f08ce8 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
`-ImplicitCastExpr 0x558fa8f08cd0 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08ca8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.33]->top
  35: ImplicitCastExpr 0x558fa8f08d38 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x558fa8f08ce8 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
  `-ImplicitCastExpr 0x558fa8f08cd0 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f08ca8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.34] (ImplicitCastExpr, LValueToRValue, StkId)
  36: CStyleCastExpr 0x558fa8f08d50 <./ldo.h:17:31, col:42> 'char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f08d38 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x558fa8f08ce8 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
    `-ImplicitCastExpr 0x558fa8f08cd0 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f08ca8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
(char *)[B4.35] (CStyleCastExpr, BitCast, char *)
  37: BinaryOperator 0x558fa8f08d78 <./ldo.h:17:7, col:42> 'long' '-'
|-CStyleCastExpr 0x558fa8f08c80 <col:7, col:18> 'char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f08c68 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
|   `-MemberExpr 0x558fa8f08c18 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
|     `-ImplicitCastExpr 0x558fa8f08c00 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f08bd8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
`-CStyleCastExpr 0x558fa8f08d50 <./ldo.h:17:31, col:42> 'char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f08d38 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x558fa8f08ce8 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
      `-ImplicitCastExpr 0x558fa8f08cd0 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f08ca8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B4.31] - [B4.36]
  38: IntegerLiteral 0x558fa8f08da0 <./ldo.h:22:40> 'int' 1
1
  39: UnaryExprOrTypeTraitExpr 0x558fa8f08df0 <./ldo.h:17:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
sizeof(TValue)
  40: CStyleCastExpr 0x558fa8f08e28 <./ldo.h:17:53, col:71> 'int' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x558fa8f08df0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
(int)[B4.39] (CStyleCastExpr, IntegralCast, int)
  41: BinaryOperator 0x558fa8f08e50 <./ldo.h:17:49, col:71> 'int' '*'
|-ParenExpr 0x558fa8f08dc0 <col:49, col:51> 'int'
| `-IntegerLiteral 0x558fa8f08da0 <line:22:40> 'int' 1
`-CStyleCastExpr 0x558fa8f08e28 <line:17:53, col:71> 'int' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x558fa8f08df0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
([B4.38]) * [B4.40]
  42: ImplicitCastExpr 0x558fa8f08e78 <./ldo.h:17:49, col:71> 'long' <IntegralCast>
`-BinaryOperator 0x558fa8f08e50 <col:49, col:71> 'int' '*'
  |-ParenExpr 0x558fa8f08dc0 <col:49, col:51> 'int'
  | `-IntegerLiteral 0x558fa8f08da0 <line:22:40> 'int' 1
  `-CStyleCastExpr 0x558fa8f08e28 <line:17:53, col:71> 'int' <IntegralCast>
    `-UnaryExprOrTypeTraitExpr 0x558fa8f08df0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B4.41] (ImplicitCastExpr, IntegralCast, long)
  43: BinaryOperator 0x558fa8f08e90 <./ldo.h:17:7, col:71> 'int' '<='
|-BinaryOperator 0x558fa8f08d78 <col:7, col:42> 'long' '-'
| |-CStyleCastExpr 0x558fa8f08c80 <col:7, col:18> 'char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f08c68 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
| |   `-MemberExpr 0x558fa8f08c18 <lparser.c:352:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
| |     `-ImplicitCastExpr 0x558fa8f08c00 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
| |       `-DeclRefExpr 0x558fa8f08bd8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
| `-CStyleCastExpr 0x558fa8f08d50 <./ldo.h:17:31, col:42> 'char *' <BitCast>
|   `-ImplicitCastExpr 0x558fa8f08d38 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f08ce8 <lparser.c:352:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
|       `-ImplicitCastExpr 0x558fa8f08cd0 <lparser.c:352:12> 'lua_State *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f08ca8 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
`-ImplicitCastExpr 0x558fa8f08e78 <./ldo.h:17:49, col:71> 'long' <IntegralCast>
  `-BinaryOperator 0x558fa8f08e50 <col:49, col:71> 'int' '*'
    |-ParenExpr 0x558fa8f08dc0 <col:49, col:51> 'int'
    | `-IntegerLiteral 0x558fa8f08da0 <line:22:40> 'int' 1
    `-CStyleCastExpr 0x558fa8f08e28 <line:17:53, col:71> 'int' <IntegralCast>
      `-UnaryExprOrTypeTraitExpr 0x558fa8f08df0 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B4.37] <= [B4.42]
   T: if [B4.43]
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   1: IntegerLiteral 0x558fa8f08550 <./llimits.h:123:38> 'int' 0
0
   2: CStyleCastExpr 0x558fa8f08580 <./llimits.h:123:32, col:38> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f08550 <col:38> 'int' 0
(void)[B5.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x558fa8f08420 <./ldo.h:18:5> 'void (lua_State *, int)' Function 0x558fa8ed2958 'luaD_growstack' 'void (lua_State *, int)'
luaD_growstack
   2: ImplicitCastExpr 0x558fa8f084e8 <./ldo.h:18:5> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f08420 <col:5> 'void (lua_State *, int)' Function 0x558fa8ed2958 'luaD_growstack' 'void (lua_State *, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int))
   3: DeclRefExpr 0x558fa8f08448 <lparser.c:350:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x558fa8f08538 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08448 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B6.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: IntegerLiteral 0x558fa8f08470 <./ldo.h:22:40> 'int' 1
1
   6: CallExpr 0x558fa8f08500 <./ldo.h:18:5, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f084e8 <col:5> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f08420 <col:5> 'void (lua_State *, int)' Function 0x558fa8ed2958 'luaD_growstack' 'void (lua_State *, int)'
|-ImplicitCastExpr 0x558fa8f08538 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f08448 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
`-IntegerLiteral 0x558fa8f08470 <./ldo.h:22:40> 'int' 1
[B6.2]([B6.4], [B6.5])
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: DeclRefExpr 0x558fa8f06990 <lparser.c:329:18> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f069b8 <lparser.c:329:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06990 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f069d0 <lparser.c:329:18, col:22> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8f069b8 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06990 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.2]->L
   4: ImplicitCastExpr 0x558fa8f06a08 <lparser.c:329:18, col:22> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8f069d0 <col:18, col:22> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8f069b8 <col:18> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f06990 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   5: DeclStmt 0x558fa8f06a20 <lparser.c:329:3, col:23>col:14
`-VarDecl 0x558fa8f06930 <col:3, col:22> col:14 used L 'lua_State *' cinit
  `-ImplicitCastExpr 0x558fa8f06a08 <col:18, col:22> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x558fa8f069d0 <col:18, col:22> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
      `-ImplicitCastExpr 0x558fa8f069b8 <col:18> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f06990 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
lua_State *L = ls->L;
   6: DeclRefExpr 0x558fa8f06aa8 <lparser.c:330:14> 'Proto *(lua_State *)' Function 0x558fa8ed34c0 'luaF_newproto' 'Proto *(lua_State *)'
luaF_newproto
   7: ImplicitCastExpr 0x558fa8f06b58 <lparser.c:330:14> 'Proto *(*)(lua_State *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f06aa8 <col:14> 'Proto *(lua_State *)' Function 0x558fa8ed34c0 'luaF_newproto' 'Proto *(lua_State *)'
[B7.6] (ImplicitCastExpr, FunctionToPointerDecay, Proto *(*)(lua_State *))
   8: DeclRefExpr 0x558fa8f06ad0 <lparser.c:330:28> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
   9: ImplicitCastExpr 0x558fa8f06ba0 <lparser.c:330:28> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06ad0 <col:28> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.8] (ImplicitCastExpr, LValueToRValue, lua_State *)
  10: CallExpr 0x558fa8f06b70 <lparser.c:330:14, col:29> 'Proto *'
|-ImplicitCastExpr 0x558fa8f06b58 <col:14> 'Proto *(*)(lua_State *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f06aa8 <col:14> 'Proto *(lua_State *)' Function 0x558fa8ed34c0 'luaF_newproto' 'Proto *(lua_State *)'
`-ImplicitCastExpr 0x558fa8f06ba0 <col:28> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06ad0 <col:28> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.7]([B7.9])
  11: DeclStmt 0x558fa8f06bb8 <lparser.c:330:3, col:30>col:10
`-VarDecl 0x558fa8f06a48 <col:3, col:29> col:10 used f 'Proto *' cinit
  `-CallExpr 0x558fa8f06b70 <col:14, col:29> 'Proto *'
    |-ImplicitCastExpr 0x558fa8f06b58 <col:14> 'Proto *(*)(lua_State *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f06aa8 <col:14> 'Proto *(lua_State *)' Function 0x558fa8ed34c0 'luaF_newproto' 'Proto *(lua_State *)'
    `-ImplicitCastExpr 0x558fa8f06ba0 <col:28> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f06ad0 <col:28> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
Proto *f = luaF_newproto(L);
  12: DeclRefExpr 0x558fa8f06c48 <lparser.c:331:11> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
f
  13: ImplicitCastExpr 0x558fa8f06c70 <lparser.c:331:11> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06c48 <col:11> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B7.12] (ImplicitCastExpr, LValueToRValue, Proto *)
  14: DeclRefExpr 0x558fa8f06bd0 <lparser.c:331:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  15: ImplicitCastExpr 0x558fa8f06bf8 <lparser.c:331:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06bd0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.14] (ImplicitCastExpr, LValueToRValue, FuncState *)
  16: MemberExpr 0x558fa8f06c10 <lparser.c:331:3, col:7> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f06bf8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06bd0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.15]->f
  17: BinaryOperator 0x558fa8f06c88 <lparser.c:331:3, col:11> 'Proto *' '='
|-MemberExpr 0x558fa8f06c10 <col:3, col:7> 'Proto *' lvalue ->f 0x558fa8eb3e58
| `-ImplicitCastExpr 0x558fa8f06bf8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f06bd0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f06c70 <col:11> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06c48 <col:11> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B7.16] = [B7.13]
  18: DeclRefExpr 0x558fa8f06d28 <lparser.c:332:14> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
ls
  19: ImplicitCastExpr 0x558fa8f06d50 <lparser.c:332:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06d28 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.18] (ImplicitCastExpr, LValueToRValue, LexState *)
  20: MemberExpr 0x558fa8f06d68 <lparser.c:332:14, col:18> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f06d50 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06d28 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.19]->fs
  21: ImplicitCastExpr 0x558fa8f06da0 <lparser.c:332:14, col:18> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f06d68 <col:14, col:18> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f06d50 <col:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f06d28 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.20] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  22: DeclRefExpr 0x558fa8f06cb0 <lparser.c:332:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  23: ImplicitCastExpr 0x558fa8f06cd8 <lparser.c:332:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06cb0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.22] (ImplicitCastExpr, LValueToRValue, FuncState *)
  24: MemberExpr 0x558fa8f06cf0 <lparser.c:332:3, col:7> 'struct FuncState *' lvalue ->prev 0x558fa8eb3f68
`-ImplicitCastExpr 0x558fa8f06cd8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06cb0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.23]->prev
  25: BinaryOperator 0x558fa8f06db8 <lparser.c:332:3, col:18> 'struct FuncState *' '='
|-MemberExpr 0x558fa8f06cf0 <col:3, col:7> 'struct FuncState *' lvalue ->prev 0x558fa8eb3f68
| `-ImplicitCastExpr 0x558fa8f06cd8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f06cb0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f06da0 <col:14, col:18> 'struct FuncState *' <LValueToRValue>
  `-MemberExpr 0x558fa8f06d68 <col:14, col:18> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
    `-ImplicitCastExpr 0x558fa8f06d50 <col:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f06d28 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.24] = [B7.21]
  26: DeclRefExpr 0x558fa8f06e58 <lparser.c:333:12> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
ls
  27: ImplicitCastExpr 0x558fa8f06e80 <lparser.c:333:12> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06e58 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.26] (ImplicitCastExpr, LValueToRValue, LexState *)
  28: DeclRefExpr 0x558fa8f06de0 <lparser.c:333:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  29: ImplicitCastExpr 0x558fa8f06e08 <lparser.c:333:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06de0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.28] (ImplicitCastExpr, LValueToRValue, FuncState *)
  30: MemberExpr 0x558fa8f06e20 <lparser.c:333:3, col:7> 'struct LexState *' lvalue ->ls 0x558fa8eb4000
`-ImplicitCastExpr 0x558fa8f06e08 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06de0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.29]->ls
  31: BinaryOperator 0x558fa8f06e98 <lparser.c:333:3, col:12> 'struct LexState *' '='
|-MemberExpr 0x558fa8f06e20 <col:3, col:7> 'struct LexState *' lvalue ->ls 0x558fa8eb4000
| `-ImplicitCastExpr 0x558fa8f06e08 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f06de0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f06e80 <col:12> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06e58 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.30] = [B7.27]
  32: DeclRefExpr 0x558fa8f06f38 <lparser.c:334:11> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
  33: ImplicitCastExpr 0x558fa8f06f60 <lparser.c:334:11> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06f38 <col:11> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.32] (ImplicitCastExpr, LValueToRValue, lua_State *)
  34: DeclRefExpr 0x558fa8f06ec0 <lparser.c:334:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  35: ImplicitCastExpr 0x558fa8f06ee8 <lparser.c:334:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06ec0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.34] (ImplicitCastExpr, LValueToRValue, FuncState *)
  36: MemberExpr 0x558fa8f06f00 <lparser.c:334:3, col:7> 'struct lua_State *' lvalue ->L 0x558fa8eb4070
`-ImplicitCastExpr 0x558fa8f06ee8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06ec0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.35]->L
  37: BinaryOperator 0x558fa8f06f78 <lparser.c:334:3, col:11> 'struct lua_State *' '='
|-MemberExpr 0x558fa8f06f00 <col:3, col:7> 'struct lua_State *' lvalue ->L 0x558fa8eb4070
| `-ImplicitCastExpr 0x558fa8f06ee8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f06ec0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f06f60 <col:11> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06f38 <col:11> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.36] = [B7.33]
  38: DeclRefExpr 0x558fa8f07018 <lparser.c:335:12> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  39: ImplicitCastExpr 0x558fa8f07040 <lparser.c:335:12> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07018 <col:12> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.38] (ImplicitCastExpr, LValueToRValue, FuncState *)
  40: DeclRefExpr 0x558fa8f06fa0 <lparser.c:335:3> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
ls
  41: ImplicitCastExpr 0x558fa8f06fc8 <lparser.c:335:3> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f06fa0 <col:3> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.40] (ImplicitCastExpr, LValueToRValue, LexState *)
  42: MemberExpr 0x558fa8f06fe0 <lparser.c:335:3, col:7> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f06fc8 <col:3> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f06fa0 <col:3> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.41]->fs
  43: BinaryOperator 0x558fa8f07058 <lparser.c:335:3, col:12> 'struct FuncState *' '='
|-MemberExpr 0x558fa8f06fe0 <col:3, col:7> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
| `-ImplicitCastExpr 0x558fa8f06fc8 <col:3> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f06fa0 <col:3> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f07040 <col:12> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07018 <col:12> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.42] = [B7.39]
  44: IntegerLiteral 0x558fa8f070f8 <lparser.c:336:12> 'int' 0
0
  45: DeclRefExpr 0x558fa8f07080 <lparser.c:336:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  46: ImplicitCastExpr 0x558fa8f070a8 <lparser.c:336:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07080 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.45] (ImplicitCastExpr, LValueToRValue, FuncState *)
  47: MemberExpr 0x558fa8f070c0 <lparser.c:336:3, col:7> 'int' lvalue ->pc 0x558fa8eb41d0
`-ImplicitCastExpr 0x558fa8f070a8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07080 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.46]->pc
  48: BinaryOperator 0x558fa8f07118 <lparser.c:336:3, col:12> 'int' '='
|-MemberExpr 0x558fa8f070c0 <col:3, col:7> 'int' lvalue ->pc 0x558fa8eb41d0
| `-ImplicitCastExpr 0x558fa8f070a8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07080 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f070f8 <col:12> 'int' 0
[B7.47] = [B7.44]
  49: IntegerLiteral 0x558fa8f071b8 <lparser.c:337:21> 'int' 1
1
  50: UnaryOperator 0x558fa8f071d8 <lparser.c:337:20, col:21> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f071b8 <col:21> 'int' 1
-[B7.49]
  51: DeclRefExpr 0x558fa8f07140 <lparser.c:337:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  52: ImplicitCastExpr 0x558fa8f07168 <lparser.c:337:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07140 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.51] (ImplicitCastExpr, LValueToRValue, FuncState *)
  53: MemberExpr 0x558fa8f07180 <lparser.c:337:3, col:7> 'int' lvalue ->lasttarget 0x558fa8eb4230
`-ImplicitCastExpr 0x558fa8f07168 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07140 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.52]->lasttarget
  54: BinaryOperator 0x558fa8f071f8 <lparser.c:337:3, col:21> 'int' '='
|-MemberExpr 0x558fa8f07180 <col:3, col:7> 'int' lvalue ->lasttarget 0x558fa8eb4230
| `-ImplicitCastExpr 0x558fa8f07168 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07140 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f071d8 <col:20, col:21> 'int' prefix '-'
  `-IntegerLiteral 0x558fa8f071b8 <col:21> 'int' 1
[B7.53] = [B7.50]
  55: IntegerLiteral 0x558fa8f07298 <./lcode.h:20:19> 'int' 1
1
  56: UnaryOperator 0x558fa8f072b8 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f07298 <col:19> 'int' 1
-[B7.55]
  57: DeclRefExpr 0x558fa8f07220 <lparser.c:338:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  58: ImplicitCastExpr 0x558fa8f07248 <lparser.c:338:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07220 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.57] (ImplicitCastExpr, LValueToRValue, FuncState *)
  59: MemberExpr 0x558fa8f07260 <lparser.c:338:3, col:7> 'int' lvalue ->jpc 0x558fa8eb4290
`-ImplicitCastExpr 0x558fa8f07248 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07220 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.58]->jpc
  60: BinaryOperator 0x558fa8f072f8 <lparser.c:338:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x558fa8f07260 <lparser.c:338:3, col:7> 'int' lvalue ->jpc 0x558fa8eb4290
| `-ImplicitCastExpr 0x558fa8f07248 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07220 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ParenExpr 0x558fa8f072d8 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x558fa8f072b8 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8f07298 <col:19> 'int' 1
[B7.59] = ([B7.56])
  61: IntegerLiteral 0x558fa8f07398 <lparser.c:339:17> 'int' 0
0
  62: DeclRefExpr 0x558fa8f07320 <lparser.c:339:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  63: ImplicitCastExpr 0x558fa8f07348 <lparser.c:339:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07320 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.62] (ImplicitCastExpr, LValueToRValue, FuncState *)
  64: MemberExpr 0x558fa8f07360 <lparser.c:339:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f07348 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07320 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.63]->freereg
  65: BinaryOperator 0x558fa8f073b8 <lparser.c:339:3, col:17> 'int' '='
|-MemberExpr 0x558fa8f07360 <col:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
| `-ImplicitCastExpr 0x558fa8f07348 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07320 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f07398 <col:17> 'int' 0
[B7.64] = [B7.61]
  66: IntegerLiteral 0x558fa8f07458 <lparser.c:340:12> 'int' 0
0
  67: DeclRefExpr 0x558fa8f073e0 <lparser.c:340:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  68: ImplicitCastExpr 0x558fa8f07408 <lparser.c:340:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f073e0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.67] (ImplicitCastExpr, LValueToRValue, FuncState *)
  69: MemberExpr 0x558fa8f07420 <lparser.c:340:3, col:7> 'int' lvalue ->nk 0x558fa8eb4350
`-ImplicitCastExpr 0x558fa8f07408 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f073e0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.68]->nk
  70: BinaryOperator 0x558fa8f07478 <lparser.c:340:3, col:12> 'int' '='
|-MemberExpr 0x558fa8f07420 <col:3, col:7> 'int' lvalue ->nk 0x558fa8eb4350
| `-ImplicitCastExpr 0x558fa8f07408 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f073e0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f07458 <col:12> 'int' 0
[B7.69] = [B7.66]
  71: IntegerLiteral 0x558fa8f07518 <lparser.c:341:12> 'int' 0
0
  72: DeclRefExpr 0x558fa8f074a0 <lparser.c:341:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  73: ImplicitCastExpr 0x558fa8f074c8 <lparser.c:341:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f074a0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.72] (ImplicitCastExpr, LValueToRValue, FuncState *)
  74: MemberExpr 0x558fa8f074e0 <lparser.c:341:3, col:7> 'int' lvalue ->np 0x558fa8eb43b0
`-ImplicitCastExpr 0x558fa8f074c8 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f074a0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.73]->np
  75: BinaryOperator 0x558fa8f07538 <lparser.c:341:3, col:12> 'int' '='
|-MemberExpr 0x558fa8f074e0 <col:3, col:7> 'int' lvalue ->np 0x558fa8eb43b0
| `-ImplicitCastExpr 0x558fa8f074c8 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f074a0 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f07518 <col:12> 'int' 0
[B7.74] = [B7.71]
  76: IntegerLiteral 0x558fa8f075d8 <lparser.c:342:18> 'int' 0
0
  77: ImplicitCastExpr 0x558fa8f075f8 <lparser.c:342:18> 'short' <IntegralCast>
`-IntegerLiteral 0x558fa8f075d8 <col:18> 'int' 0
[B7.76] (ImplicitCastExpr, IntegralCast, short)
  78: DeclRefExpr 0x558fa8f07560 <lparser.c:342:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  79: ImplicitCastExpr 0x558fa8f07588 <lparser.c:342:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07560 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.78] (ImplicitCastExpr, LValueToRValue, FuncState *)
  80: MemberExpr 0x558fa8f075a0 <lparser.c:342:3, col:7> 'short' lvalue ->nlocvars 0x558fa8eb4410
`-ImplicitCastExpr 0x558fa8f07588 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07560 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.79]->nlocvars
  81: BinaryOperator 0x558fa8f07610 <lparser.c:342:3, col:18> 'short' '='
|-MemberExpr 0x558fa8f075a0 <col:3, col:7> 'short' lvalue ->nlocvars 0x558fa8eb4410
| `-ImplicitCastExpr 0x558fa8f07588 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07560 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f075f8 <col:18> 'short' <IntegralCast>
  `-IntegerLiteral 0x558fa8f075d8 <col:18> 'int' 0
[B7.80] = [B7.77]
  82: IntegerLiteral 0x558fa8f076b0 <lparser.c:343:17> 'int' 0
0
  83: ImplicitCastExpr 0x558fa8f076d0 <lparser.c:343:17> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f076b0 <col:17> 'int' 0
[B7.82] (ImplicitCastExpr, IntegralCast, lu_byte)
  84: DeclRefExpr 0x558fa8f07638 <lparser.c:343:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  85: ImplicitCastExpr 0x558fa8f07660 <lparser.c:343:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07638 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.84] (ImplicitCastExpr, LValueToRValue, FuncState *)
  86: MemberExpr 0x558fa8f07678 <lparser.c:343:3, col:7> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f07660 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07638 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.85]->nactvar
  87: BinaryOperator 0x558fa8f076e8 <lparser.c:343:3, col:17> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f07678 <col:3, col:7> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
| `-ImplicitCastExpr 0x558fa8f07660 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07638 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f076d0 <col:17> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f076b0 <col:17> 'int' 0
[B7.86] = [B7.83]
  88: IntegerLiteral 0x558fa8f07788 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  89: CStyleCastExpr 0x558fa8f077c0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x558fa8f07788 <col:24> 'int' 0
(void *)[B7.88] (CStyleCastExpr, NullToPointer, void *)
  90: ImplicitCastExpr 0x558fa8f07808 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'struct BlockCnt *' <NullToPointer>
`-ParenExpr 0x558fa8f077e8 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x558fa8f077c0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x558fa8f07788 <col:24> 'int' 0
([B7.89]) (ImplicitCastExpr, NullToPointer, struct BlockCnt *)
  91: DeclRefExpr 0x558fa8f07710 <lparser.c:344:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
  92: ImplicitCastExpr 0x558fa8f07738 <lparser.c:344:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07710 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.91] (ImplicitCastExpr, LValueToRValue, FuncState *)
  93: MemberExpr 0x558fa8f07750 <lparser.c:344:3, col:7> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8f07738 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07710 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.92]->bl
  94: BinaryOperator 0x558fa8f07820 <lparser.c:344:3, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'struct BlockCnt *' '='
|-MemberExpr 0x558fa8f07750 <lparser.c:344:3, col:7> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
| `-ImplicitCastExpr 0x558fa8f07738 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07710 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f07808 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'struct BlockCnt *' <NullToPointer>
  `-ParenExpr 0x558fa8f077e8 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x558fa8f077c0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x558fa8f07788 <col:24> 'int' 0
[B7.93] = [B7.90]
  95: DeclRefExpr 0x558fa8f078c0 <lparser.c:345:15> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
ls
  96: ImplicitCastExpr 0x558fa8f078e8 <lparser.c:345:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f078c0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.95] (ImplicitCastExpr, LValueToRValue, LexState *)
  97: MemberExpr 0x558fa8f07900 <lparser.c:345:15, col:19> 'TString *' lvalue ->source 0x558fa8ea0798
`-ImplicitCastExpr 0x558fa8f078e8 <col:15> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f078c0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.96]->source
  98: ImplicitCastExpr 0x558fa8f07950 <lparser.c:345:15, col:19> 'TString *' <LValueToRValue>
`-MemberExpr 0x558fa8f07900 <col:15, col:19> 'TString *' lvalue ->source 0x558fa8ea0798
  `-ImplicitCastExpr 0x558fa8f078e8 <col:15> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f078c0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.97] (ImplicitCastExpr, LValueToRValue, TString *)
  99: DeclRefExpr 0x558fa8f07848 <lparser.c:345:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
f
 100: ImplicitCastExpr 0x558fa8f07870 <lparser.c:345:3> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07848 <col:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B7.99] (ImplicitCastExpr, LValueToRValue, Proto *)
 101: MemberExpr 0x558fa8f07888 <lparser.c:345:3, col:6> 'TString *' lvalue ->source 0x558fa8e8f228
`-ImplicitCastExpr 0x558fa8f07870 <col:3> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07848 <col:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B7.100]->source
 102: BinaryOperator 0x558fa8f07968 <lparser.c:345:3, col:19> 'TString *' '='
|-MemberExpr 0x558fa8f07888 <col:3, col:6> 'TString *' lvalue ->source 0x558fa8e8f228
| `-ImplicitCastExpr 0x558fa8f07870 <col:3> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07848 <col:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
`-ImplicitCastExpr 0x558fa8f07950 <col:15, col:19> 'TString *' <LValueToRValue>
  `-MemberExpr 0x558fa8f07900 <col:15, col:19> 'TString *' lvalue ->source 0x558fa8ea0798
    `-ImplicitCastExpr 0x558fa8f078e8 <col:15> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f078c0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f066f0 'ls' 'LexState *'
[B7.101] = [B7.98]
 103: IntegerLiteral 0x558fa8f07a08 <lparser.c:346:21> 'int' 2
2
 104: ImplicitCastExpr 0x558fa8f07a28 <lparser.c:346:21> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f07a08 <col:21> 'int' 2
[B7.103] (ImplicitCastExpr, IntegralCast, lu_byte)
 105: DeclRefExpr 0x558fa8f07990 <lparser.c:346:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
f
 106: ImplicitCastExpr 0x558fa8f079b8 <lparser.c:346:3> 'Proto *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07990 <col:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B7.105] (ImplicitCastExpr, LValueToRValue, Proto *)
 107: MemberExpr 0x558fa8f079d0 <lparser.c:346:3, col:6> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x558fa8e8f8a0
`-ImplicitCastExpr 0x558fa8f079b8 <col:3> 'Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07990 <col:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
[B7.106]->maxstacksize
 108: BinaryOperator 0x558fa8f07a40 <lparser.c:346:3, col:21> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8f079d0 <col:3, col:6> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x558fa8e8f8a0
| `-ImplicitCastExpr 0x558fa8f079b8 <col:3> 'Proto *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07990 <col:3> 'Proto *' lvalue Var 0x558fa8f06a48 'f' 'Proto *'
`-ImplicitCastExpr 0x558fa8f07a28 <col:21> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f07a08 <col:21> 'int' 2
[B7.107] = [B7.104]
 109: DeclRefExpr 0x558fa8f07ae0 <lparser.c:347:11> 'Table *(lua_State *, int, int)' Function 0x558fa8e27740 'luaH_new' 'Table *(lua_State *, int, int)'
luaH_new
 110: ImplicitCastExpr 0x558fa8f07bc8 <lparser.c:347:11> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f07ae0 <col:11> 'Table *(lua_State *, int, int)' Function 0x558fa8e27740 'luaH_new' 'Table *(lua_State *, int, int)'
[B7.109] (ImplicitCastExpr, FunctionToPointerDecay, Table *(*)(lua_State *, int, int))
 111: DeclRefExpr 0x558fa8f07b08 <lparser.c:347:20> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
 112: ImplicitCastExpr 0x558fa8f07c20 <lparser.c:347:20> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07b08 <col:20> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.111] (ImplicitCastExpr, LValueToRValue, lua_State *)
 113: IntegerLiteral 0x558fa8f07b30 <lparser.c:347:23> 'int' 0
0
 114: IntegerLiteral 0x558fa8f07b50 <lparser.c:347:26> 'int' 0
0
 115: CallExpr 0x558fa8f07be0 <lparser.c:347:11, col:27> 'Table *'
|-ImplicitCastExpr 0x558fa8f07bc8 <col:11> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f07ae0 <col:11> 'Table *(lua_State *, int, int)' Function 0x558fa8e27740 'luaH_new' 'Table *(lua_State *, int, int)'
|-ImplicitCastExpr 0x558fa8f07c20 <col:20> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f07b08 <col:20> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
|-IntegerLiteral 0x558fa8f07b30 <col:23> 'int' 0
`-IntegerLiteral 0x558fa8f07b50 <col:26> 'int' 0
[B7.110]([B7.112], [B7.113], [B7.114])
 116: DeclRefExpr 0x558fa8f07a68 <lparser.c:347:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
 117: ImplicitCastExpr 0x558fa8f07a90 <lparser.c:347:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07a68 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.116] (ImplicitCastExpr, LValueToRValue, FuncState *)
 118: MemberExpr 0x558fa8f07aa8 <lparser.c:347:3, col:7> 'Table *' lvalue ->h 0x558fa8eb3ef8
`-ImplicitCastExpr 0x558fa8f07a90 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07a68 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.117]->h
 119: BinaryOperator 0x558fa8f07c38 <lparser.c:347:3, col:27> 'Table *' '='
|-MemberExpr 0x558fa8f07aa8 <col:3, col:7> 'Table *' lvalue ->h 0x558fa8eb3ef8
| `-ImplicitCastExpr 0x558fa8f07a90 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07a68 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
`-CallExpr 0x558fa8f07be0 <col:11, col:27> 'Table *'
  |-ImplicitCastExpr 0x558fa8f07bc8 <col:11> 'Table *(*)(lua_State *, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f07ae0 <col:11> 'Table *(lua_State *, int, int)' Function 0x558fa8e27740 'luaH_new' 'Table *(lua_State *, int, int)'
  |-ImplicitCastExpr 0x558fa8f07c20 <col:20> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f07b08 <col:20> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
  |-IntegerLiteral 0x558fa8f07b30 <col:23> 'int' 0
  `-IntegerLiteral 0x558fa8f07b50 <col:26> 'int' 0
[B7.118] = [B7.115]
 120: DeclRefExpr 0x558fa8f07cd0 <lparser.c:349:18> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
 121: ImplicitCastExpr 0x558fa8f07cf8 <lparser.c:349:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07cd0 <col:18> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.120] (ImplicitCastExpr, LValueToRValue, lua_State *)
 122: MemberExpr 0x558fa8f07d10 <lparser.c:349:18, col:21> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
`-ImplicitCastExpr 0x558fa8f07cf8 <col:18> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07cd0 <col:18> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.121]->top
 123: ImplicitCastExpr 0x558fa8f07d68 <./lobject.h:149:17, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x558fa8f07d48 <col:17, col:21> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x558fa8f07d10 <lparser.c:349:18, col:21> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
    `-ImplicitCastExpr 0x558fa8f07cf8 <col:18> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f07cd0 <col:18> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
([B7.122]) (ImplicitCastExpr, LValueToRValue, StkId)
 124: DeclStmt 0x558fa8f07d80 <./lobject.h:149:5, col:22>col:13
`-VarDecl 0x558fa8f07c70 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x558fa8f07d68 <col:17, col:21> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x558fa8f07d48 <col:17, col:21> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x558fa8f07d10 <lparser.c:349:18, col:21> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
        `-ImplicitCastExpr 0x558fa8f07cf8 <col:18> 'lua_State *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f07cd0 <col:18> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
TValue *i_o = (L->top);
 125: DeclRefExpr 0x558fa8f07e48 <lparser.c:349:26> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
fs
 126: ImplicitCastExpr 0x558fa8f07e70 <lparser.c:349:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07e48 <col:26> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.125] (ImplicitCastExpr, LValueToRValue, FuncState *)
 127: MemberExpr 0x558fa8f07e88 <lparser.c:349:26, col:30> 'Table *' lvalue ->h 0x558fa8eb3ef8
`-ImplicitCastExpr 0x558fa8f07e70 <col:26> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07e48 <col:26> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.126]->h
 128: ImplicitCastExpr 0x558fa8f07f40 <./llimits.h:75:26, col:30> 'Table *' <LValueToRValue>
`-ParenExpr 0x558fa8f07f20 <col:26, col:30> 'Table *' lvalue
  `-ParenExpr 0x558fa8f07ec0 <./lobject.h:150:36, col:38> 'Table *' lvalue
    `-MemberExpr 0x558fa8f07e88 <lparser.c:349:26, col:30> 'Table *' lvalue ->h 0x558fa8eb3ef8
      `-ImplicitCastExpr 0x558fa8f07e70 <col:26> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f07e48 <col:26> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
(([B7.127])) (ImplicitCastExpr, LValueToRValue, Table *)
 129: CStyleCastExpr 0x558fa8f07f58 <./llimits.h:75:23, col:30> 'GCObject *' <BitCast>
`-ImplicitCastExpr 0x558fa8f07f40 <col:26, col:30> 'Table *' <LValueToRValue>
  `-ParenExpr 0x558fa8f07f20 <col:26, col:30> 'Table *' lvalue
    `-ParenExpr 0x558fa8f07ec0 <./lobject.h:150:36, col:38> 'Table *' lvalue
      `-MemberExpr 0x558fa8f07e88 <lparser.c:349:26, col:30> 'Table *' lvalue ->h 0x558fa8eb3ef8
        `-ImplicitCastExpr 0x558fa8f07e70 <col:26> 'FuncState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f07e48 <col:26> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
(GCObject *)[B7.128] (CStyleCastExpr, BitCast, GCObject *)
 130: DeclRefExpr 0x558fa8f07d98 <./lobject.h:150:5> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
i_o
 131: ImplicitCastExpr 0x558fa8f07dc0 <./lobject.h:150:5> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07d98 <col:5> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
[B7.130] (ImplicitCastExpr, LValueToRValue, TValue *)
 132: MemberExpr 0x558fa8f07dd8 <./lobject.h:150:5, col:10> 'Value':'Value' lvalue ->value 0x558fa8e81d70
`-ImplicitCastExpr 0x558fa8f07dc0 <col:5> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07d98 <col:5> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
[B7.131]->value
 133: MemberExpr 0x558fa8f07e10 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x558fa8e81a70
`-MemberExpr 0x558fa8f07dd8 <col:5, col:10> 'Value':'Value' lvalue ->value 0x558fa8e81d70
  `-ImplicitCastExpr 0x558fa8f07dc0 <col:5> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f07d98 <col:5> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
[B7.132].gc
 134: BinaryOperator 0x558fa8f07fa0 <./lobject.h:150:5, ./llimits.h:75:31> 'GCObject *' '='
|-MemberExpr 0x558fa8f07e10 <./lobject.h:150:5, col:16> 'GCObject *' lvalue .gc 0x558fa8e81a70
| `-MemberExpr 0x558fa8f07dd8 <col:5, col:10> 'Value':'Value' lvalue ->value 0x558fa8e81d70
|   `-ImplicitCastExpr 0x558fa8f07dc0 <col:5> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f07d98 <col:5> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
`-ParenExpr 0x558fa8f07f80 <./llimits.h:75:22, col:31> 'GCObject *'
  `-CStyleCastExpr 0x558fa8f07f58 <col:23, col:30> 'GCObject *' <BitCast>
    `-ImplicitCastExpr 0x558fa8f07f40 <col:26, col:30> 'Table *' <LValueToRValue>
      `-ParenExpr 0x558fa8f07f20 <col:26, col:30> 'Table *' lvalue
        `-ParenExpr 0x558fa8f07ec0 <./lobject.h:150:36, col:38> 'Table *' lvalue
          `-MemberExpr 0x558fa8f07e88 <lparser.c:349:26, col:30> 'Table *' lvalue ->h 0x558fa8eb3ef8
            `-ImplicitCastExpr 0x558fa8f07e70 <col:26> 'FuncState *' <LValueToRValue>
              `-DeclRefExpr 0x558fa8f07e48 <col:26> 'FuncState *' lvalue ParmVar 0x558fa8f06760 'fs' 'FuncState *'
[B7.133] = ([B7.129])
 135: IntegerLiteral 0x558fa8f08040 <./lua.h:79:21> 'int' 5
5
 136: DeclRefExpr 0x558fa8f07fc8 <./lobject.h:150:42> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
i_o
 137: ImplicitCastExpr 0x558fa8f07ff0 <./lobject.h:150:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f07fc8 <col:42> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
[B7.136] (ImplicitCastExpr, LValueToRValue, TValue *)
 138: MemberExpr 0x558fa8f08008 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x558fa8e81dd0
`-ImplicitCastExpr 0x558fa8f07ff0 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f07fc8 <col:42> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
[B7.137]->tt
 139: BinaryOperator 0x558fa8f08060 <./lobject.h:150:42, ./lua.h:79:21> 'int' '='
|-MemberExpr 0x558fa8f08008 <./lobject.h:150:42, col:47> 'int' lvalue ->tt 0x558fa8e81dd0
| `-ImplicitCastExpr 0x558fa8f07ff0 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f07fc8 <col:42> 'TValue *' lvalue Var 0x558fa8f07c70 'i_o' 'TValue *'
`-IntegerLiteral 0x558fa8f08040 <./lua.h:79:21> 'int' 5
[B7.138] = [B7.135]
 140: IntegerLiteral 0x558fa8f08088 <./llimits.h:62:31> 'int' 0
0
 141: CStyleCastExpr 0x558fa8f080b8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f08088 <col:31> 'int' 0
(void)[B7.140] (CStyleCastExpr, ToVoid, void)
 142: DeclRefExpr 0x558fa8f08140 <lparser.c:350:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
 143: ImplicitCastExpr 0x558fa8f08168 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08140 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.142] (ImplicitCastExpr, LValueToRValue, lua_State *)
 144: MemberExpr 0x558fa8f08180 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
`-ImplicitCastExpr 0x558fa8f08168 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08140 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.143]->stack_last
 145: ImplicitCastExpr 0x558fa8f081d0 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x558fa8f08180 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
  `-ImplicitCastExpr 0x558fa8f08168 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f08140 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.144] (ImplicitCastExpr, LValueToRValue, StkId)
 146: CStyleCastExpr 0x558fa8f081e8 <./ldo.h:17:7, col:18> 'char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f081d0 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x558fa8f08180 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
    `-ImplicitCastExpr 0x558fa8f08168 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f08140 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
(char *)[B7.145] (CStyleCastExpr, BitCast, char *)
 147: DeclRefExpr 0x558fa8f08210 <lparser.c:350:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
L
 148: ImplicitCastExpr 0x558fa8f08238 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f08210 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.147] (ImplicitCastExpr, LValueToRValue, lua_State *)
 149: MemberExpr 0x558fa8f08250 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
`-ImplicitCastExpr 0x558fa8f08238 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f08210 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.148]->top
 150: ImplicitCastExpr 0x558fa8f082a0 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
`-MemberExpr 0x558fa8f08250 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
  `-ImplicitCastExpr 0x558fa8f08238 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f08210 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.149] (ImplicitCastExpr, LValueToRValue, StkId)
 151: CStyleCastExpr 0x558fa8f082b8 <./ldo.h:17:31, col:42> 'char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f082a0 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
  `-MemberExpr 0x558fa8f08250 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
    `-ImplicitCastExpr 0x558fa8f08238 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f08210 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
(char *)[B7.150] (CStyleCastExpr, BitCast, char *)
 152: BinaryOperator 0x558fa8f082e0 <./ldo.h:17:7, col:42> 'long' '-'
|-CStyleCastExpr 0x558fa8f081e8 <col:7, col:18> 'char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f081d0 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
|   `-MemberExpr 0x558fa8f08180 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
|     `-ImplicitCastExpr 0x558fa8f08168 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f08140 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
`-CStyleCastExpr 0x558fa8f082b8 <./ldo.h:17:31, col:42> 'char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f082a0 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
    `-MemberExpr 0x558fa8f08250 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
      `-ImplicitCastExpr 0x558fa8f08238 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f08210 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
[B7.146] - [B7.151]
 153: IntegerLiteral 0x558fa8f08308 <./ldo.h:22:40> 'int' 1
1
 154: UnaryExprOrTypeTraitExpr 0x558fa8f08358 <./ldo.h:17:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
sizeof(TValue)
 155: CStyleCastExpr 0x558fa8f08390 <./ldo.h:17:53, col:71> 'int' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x558fa8f08358 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
(int)[B7.154] (CStyleCastExpr, IntegralCast, int)
 156: BinaryOperator 0x558fa8f083b8 <./ldo.h:17:49, col:71> 'int' '*'
|-ParenExpr 0x558fa8f08328 <col:49, col:51> 'int'
| `-IntegerLiteral 0x558fa8f08308 <line:22:40> 'int' 1
`-CStyleCastExpr 0x558fa8f08390 <line:17:53, col:71> 'int' <IntegralCast>
  `-UnaryExprOrTypeTraitExpr 0x558fa8f08358 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
([B7.153]) * [B7.155]
 157: ImplicitCastExpr 0x558fa8f083e0 <./ldo.h:17:49, col:71> 'long' <IntegralCast>
`-BinaryOperator 0x558fa8f083b8 <col:49, col:71> 'int' '*'
  |-ParenExpr 0x558fa8f08328 <col:49, col:51> 'int'
  | `-IntegerLiteral 0x558fa8f08308 <line:22:40> 'int' 1
  `-CStyleCastExpr 0x558fa8f08390 <line:17:53, col:71> 'int' <IntegralCast>
    `-UnaryExprOrTypeTraitExpr 0x558fa8f08358 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B7.156] (ImplicitCastExpr, IntegralCast, long)
 158: BinaryOperator 0x558fa8f083f8 <./ldo.h:17:7, col:71> 'int' '<='
|-BinaryOperator 0x558fa8f082e0 <col:7, col:42> 'long' '-'
| |-CStyleCastExpr 0x558fa8f081e8 <col:7, col:18> 'char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f081d0 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' <LValueToRValue>
| |   `-MemberExpr 0x558fa8f08180 <lparser.c:350:12, ./ldo.h:17:18> 'StkId':'TValue *' lvalue ->stack_last 0x558fa8ec7488
| |     `-ImplicitCastExpr 0x558fa8f08168 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
| |       `-DeclRefExpr 0x558fa8f08140 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
| `-CStyleCastExpr 0x558fa8f082b8 <./ldo.h:17:31, col:42> 'char *' <BitCast>
|   `-ImplicitCastExpr 0x558fa8f082a0 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f08250 <lparser.c:350:12, ./ldo.h:17:42> 'StkId':'TValue *' lvalue ->top 0x558fa8ec71d8
|       `-ImplicitCastExpr 0x558fa8f08238 <lparser.c:350:12> 'lua_State *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f08210 <col:12> 'lua_State *' lvalue Var 0x558fa8f06930 'L' 'lua_State *'
`-ImplicitCastExpr 0x558fa8f083e0 <./ldo.h:17:49, col:71> 'long' <IntegralCast>
  `-BinaryOperator 0x558fa8f083b8 <col:49, col:71> 'int' '*'
    |-ParenExpr 0x558fa8f08328 <col:49, col:51> 'int'
    | `-IntegerLiteral 0x558fa8f08308 <line:22:40> 'int' 1
    `-CStyleCastExpr 0x558fa8f08390 <line:17:53, col:71> 'int' <IntegralCast>
      `-UnaryExprOrTypeTraitExpr 0x558fa8f08358 <col:58, col:71> 'unsigned long' sizeof 'TValue':'struct lua_TValue'
[B7.152] <= [B7.157]
   T: if [B7.158]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (1): B1
