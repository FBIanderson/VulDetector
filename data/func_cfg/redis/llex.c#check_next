static int check_next(LexState *ls, const char *set)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: ConditionalOperator 0x561ce7450da0 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce74509b8 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7450960 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7450940 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7450908 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce74508f0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce74509a0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7450980 <col:31> 'int' 0
|-ParenExpr 0x561ce7450c80 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7450c58 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7450c38 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7450bd0 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7450ba8 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7450b90 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7450b70 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7450b08 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7450ae8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
`-CallExpr 0x561ce7450d58 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7450d40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7450ca0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7450d88 <llex.c:166:17, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7450d08 <line:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7450cf0 <line:166:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.18] ? ([B2.10]) : [B3.7]
   2: DeclRefExpr 0x561ce74507e0 <llex.c:166:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7450808 <llex.c:166:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74507e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B1.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7450820 <llex.c:166:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7450808 <line:166:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74507e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B1.3]->current
   5: BinaryOperator 0x561ce7450df0 <llex.c:166:17, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7450820 <llex.c:166:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7450808 <line:166:17> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce74507e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
`-ParenExpr 0x561ce7450dd0 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7450da0 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce74509b8 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7450960 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7450940 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7450908 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce74508f0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce74509a0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7450980 <col:31> 'int' 0
    |-ParenExpr 0x561ce7450c80 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7450c58 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7450c38 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7450bd0 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7450ba8 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7450b90 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7450b70 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7450b08 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7450ae8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
    `-CallExpr 0x561ce7450d58 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7450d40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7450ca0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7450d88 <llex.c:166:17, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7450d08 <line:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7450cf0 <line:166:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B1.4] = ([B1.1])
   6: BinaryOperator 0x561ce7450e38 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7450778 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7450760 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7450698 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce74507b0 <line:166:17> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce74506c0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce74507c8 <col:17, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7450728 <line:166:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7450710 <line:166:17> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce74506e8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
`-ParenExpr 0x561ce7450e18 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7450df0 <line:166:17, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7450820 <llex.c:166:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7450808 <line:166:17> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce74507e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
    `-ParenExpr 0x561ce7450dd0 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7450da0 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce74509b8 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7450960 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7450940 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7450908 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce74508f0 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce74509a0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7450980 <col:31> 'int' 0
        |-ParenExpr 0x561ce7450c80 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7450c58 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce7450c38 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7450bd0 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7450ba8 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7450b90 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7450b70 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce7450b08 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7450ae8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
        `-CallExpr 0x561ce7450d58 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7450d40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7450ca0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7450d88 <llex.c:166:17, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce7450d08 <line:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce7450cf0 <line:166:17> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
... , 
   7: IntegerLiteral 0x561ce7450e80 <llex.c:167:10> 'int' 1
1
   8: ReturnStmt 0x561ce7450ea0 <llex.c:167:3, col:10>
`-IntegerLiteral 0x561ce7450e80 <col:10> 'int' 1
return [B1.7];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce74509e0 <llex.c:166:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7450a08 <llex.c:166:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B2.2]->z
   4: ImplicitCastExpr 0x561ce7450a78 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
([B2.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7450a90 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B2.4]->p
   6: UnaryOperator 0x561ce7450ac8 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B2.5]++
   7: UnaryOperator 0x561ce7450ae8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
*[B2.6]
   8: ImplicitCastExpr 0x561ce7450b90 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7450b70 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7450b08 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7450ae8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
(([B2.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7450ba8 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7450b90 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7450b70 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7450b08 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7450ae8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
(unsigned char)[B2.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7450c58 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7450c38 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7450bd0 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7450ba8 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7450b90 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7450b70 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7450b08 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7450ae8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7450ac8 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7450a90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7450a78 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7450a58 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7450a20 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7450a08 <line:166:17> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce74509e0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
(int)(([B2.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x561ce7450ca0 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7450d40 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7450ca0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7450cc8 <llex.c:166:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7450cf0 <llex.c:166:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7450d08 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7450cf0 <line:166:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B3.4]->z
   6: ImplicitCastExpr 0x561ce7450d88 <llex.c:166:17, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7450d08 <line:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7450cf0 <line:166:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7450d58 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7450d40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7450ca0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7450d88 <llex.c:166:17, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7450d08 <line:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7450cf0 <line:166:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7450cc8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B3.2]([B3.6])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x561ce7450698 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7450760 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7450698 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce74506c0 <llex.c:166:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74507b0 <llex.c:166:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74506c0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce74506e8 <llex.c:166:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7450710 <llex.c:166:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74506e8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7450728 <llex.c:166:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7450710 <line:166:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74506e8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.6]->current
   8: ImplicitCastExpr 0x561ce74507c8 <llex.c:166:17, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7450728 <line:166:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7450710 <line:166:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74506e8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7450778 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7450760 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7450698 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce74507b0 <line:166:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74506c0 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74507c8 <col:17, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7450728 <line:166:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7450710 <line:166:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74506e8 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.2]([B4.4], [B4.8])
  10: DeclRefExpr 0x561ce7450858 <llex.c:166:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7450880 <llex.c:166:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.11]->z
  13: ImplicitCastExpr 0x561ce74508f0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
([B4.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7450908 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce74508f0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.13]->n
  15: UnaryOperator 0x561ce7450940 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7450908 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce74508f0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B4.14]--
  16: IntegerLiteral 0x561ce7450980 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce74509a0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7450980 <col:31> 'int' 0
[B4.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce74509b8 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7450960 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7450940 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7450908 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce74508f0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce74508d0 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7450898 <llex.c:166:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7450880 <line:166:17> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7450858 <col:17> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74509a0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7450980 <col:31> 'int' 0
([B4.15]) > [B4.17]
   T: [B4.18] ? ... : ...
   Preds (1): B6
   Succs (2): B2 B3

 [B5]
   1: IntegerLiteral 0x561ce7450628 <llex.c:165:12> 'int' 0
0
   2: ReturnStmt 0x561ce7450648 <llex.c:165:5, col:12>
`-IntegerLiteral 0x561ce7450628 <col:12> 'int' 0
return [B5.1];
   Preds (1): B6
   Succs (1): B0

 [B6]
   1: DeclRefExpr 0x561ce7450468 <llex.c:164:8> 'char *(const char *, int)' Function 0x561ce7331378 'strchr' 'char *(const char *, int)'
strchr
   2: ImplicitCastExpr 0x561ce7450588 <llex.c:164:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7450468 <col:8> 'char *(const char *, int)' Function 0x561ce7331378 'strchr' 'char *(const char *, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, char *(*)(const char *, int))
   3: DeclRefExpr 0x561ce7450490 <llex.c:164:15> 'const char *' lvalue ParmVar 0x561ce74502a0 'set' 'const char *'
set
   4: ImplicitCastExpr 0x561ce74505d8 <llex.c:164:15> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x561ce7450490 <col:15> 'const char *' lvalue ParmVar 0x561ce74502a0 'set' 'const char *'
[B6.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: DeclRefExpr 0x561ce74504b8 <llex.c:164:20> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce74504e0 <llex.c:164:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74504b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B6.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce74504f8 <llex.c:164:20, col:24> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74504e0 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74504b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B6.6]->current
   8: ImplicitCastExpr 0x561ce74505f0 <llex.c:164:20, col:24> 'int' <LValueToRValue>
`-MemberExpr 0x561ce74504f8 <col:20, col:24> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce74504e0 <col:20> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74504b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce74505a0 <llex.c:164:8, col:31> 'char *'
|-ImplicitCastExpr 0x561ce7450588 <col:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7450468 <col:8> 'char *(const char *, int)' Function 0x561ce7331378 'strchr' 'char *(const char *, int)'
|-ImplicitCastExpr 0x561ce74505d8 <col:15> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7450490 <col:15> 'const char *' lvalue ParmVar 0x561ce74502a0 'set' 'const char *'
`-ImplicitCastExpr 0x561ce74505f0 <col:20, col:24> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce74504f8 <col:20, col:24> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce74504e0 <col:20> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74504b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
[B6.2]([B6.4], [B6.8])
  10: UnaryOperator 0x561ce7450608 <llex.c:164:7, col:31> 'int' prefix '!'
`-CallExpr 0x561ce74505a0 <col:8, col:31> 'char *'
  |-ImplicitCastExpr 0x561ce7450588 <col:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7450468 <col:8> 'char *(const char *, int)' Function 0x561ce7331378 'strchr' 'char *(const char *, int)'
  |-ImplicitCastExpr 0x561ce74505d8 <col:15> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x561ce7450490 <col:15> 'const char *' lvalue ParmVar 0x561ce74502a0 'set' 'const char *'
  `-ImplicitCastExpr 0x561ce74505f0 <col:20, col:24> 'int' <LValueToRValue>
    `-MemberExpr 0x561ce74504f8 <col:20, col:24> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce74504e0 <col:20> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74504b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7450228 'ls' 'LexState *'
![B6.9]
   T: if [B6.10]
   Preds (1): B7
   Succs (2): B5 B4

 [B0 (EXIT)]
   Preds (2): B1 B5
