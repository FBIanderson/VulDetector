int luaO_rawequalObj(const TValue *t1, const TValue *t2)
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: DeclRefExpr 0x5569011ecfc8 <lobject.c:74:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
t1
   2: ImplicitCastExpr 0x5569011ed010 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ecff0 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ecfc8 <lobject.c:74:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B1.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5569011ed028 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
`-ImplicitCastExpr 0x5569011ed010 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ecff0 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ecfc8 <lobject.c:74:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B1.2]->tt
   4: ImplicitCastExpr 0x5569011ed080 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5569011ed060 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5569011ed028 <col:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
    `-ImplicitCastExpr 0x5569011ed010 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5569011ecff0 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5569011ecfc8 <lobject.c:74:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B1.3]) (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B1.4]
   Preds (1): B8
   Succs (5): B3 B4 B5 B6 B2

 [B2]
  default:
   1: IntegerLiteral 0x5569011ed9b0 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5569011ed9e0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5569011ed9b0 <col:31> 'int' 0
(void)[B2.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
t1
   4: ImplicitCastExpr 0x5569011eda90 <./lobject.h:91:48, col:50> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011eda70 <col:48, col:50> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B2.3]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   5: MemberExpr 0x5569011edaa8 <./lobject.h:91:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011eda90 <col:48, col:50> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011eda70 <col:48, col:50> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B2.4]->value
   6: MemberExpr 0x5569011edb00 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
`-MemberExpr 0x5569011edaa8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011eda90 <col:48, col:50> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011eda70 <col:48, col:50> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B2.5].gc
   7: ImplicitCastExpr 0x5569011edc48 <./llimits.h:63:25, col:27> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x5569011edb38 <col:25, col:27> 'GCObject *const' lvalue
  `-MemberExpr 0x5569011edb00 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
    `-MemberExpr 0x5569011edaa8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
      `-ImplicitCastExpr 0x5569011eda90 <col:48, col:50> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011eda70 <col:48, col:50> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B2.6]) (ImplicitCastExpr, LValueToRValue, GCObject *)
   8: DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
t2
   9: ImplicitCastExpr 0x5569011edba0 <./lobject.h:91:48, col:50> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011edb80 <col:48, col:50> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B2.8]) (ImplicitCastExpr, LValueToRValue, const TValue *)
  10: MemberExpr 0x5569011edbb8 <./lobject.h:91:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011edba0 <col:48, col:50> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011edb80 <col:48, col:50> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B2.9]->value
  11: MemberExpr 0x5569011edbf0 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
`-MemberExpr 0x5569011edbb8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011edba0 <col:48, col:50> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011edb80 <col:48, col:50> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B2.10].gc
  12: ImplicitCastExpr 0x5569011edc60 <./llimits.h:63:25, col:27> 'GCObject *' <LValueToRValue>
`-ParenExpr 0x5569011edc28 <col:25, col:27> 'GCObject *const' lvalue
  `-MemberExpr 0x5569011edbf0 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
    `-MemberExpr 0x5569011edbb8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
      `-ImplicitCastExpr 0x5569011edba0 <col:48, col:50> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011edb80 <col:48, col:50> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B2.11]) (ImplicitCastExpr, LValueToRValue, GCObject *)
  13: BinaryOperator 0x5569011edc78 <./llimits.h:63:25, col:27> 'int' '=='
|-ImplicitCastExpr 0x5569011edc48 <col:25, col:27> 'GCObject *' <LValueToRValue>
| `-ParenExpr 0x5569011edb38 <col:25, col:27> 'GCObject *const' lvalue
|   `-MemberExpr 0x5569011edb00 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
|     `-MemberExpr 0x5569011edaa8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
|       `-ImplicitCastExpr 0x5569011eda90 <col:48, col:50> 'const TValue *' <LValueToRValue>
|         `-ParenExpr 0x5569011eda70 <col:48, col:50> 'const TValue *' lvalue
|           `-DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
`-ImplicitCastExpr 0x5569011edc60 <./llimits.h:63:25, col:27> 'GCObject *' <LValueToRValue>
  `-ParenExpr 0x5569011edc28 <col:25, col:27> 'GCObject *const' lvalue
    `-MemberExpr 0x5569011edbf0 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
      `-MemberExpr 0x5569011edbb8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
        `-ImplicitCastExpr 0x5569011edba0 <col:48, col:50> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5569011edb80 <col:48, col:50> 'const TValue *' lvalue
            `-DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B2.7] == [B2.12]
  14: ReturnStmt 0x5569011edca0 <lobject.c:85:7, ./llimits.h:63:27>
`-BinaryOperator 0x5569011edc78 <col:25, col:27> 'int' '=='
  |-ImplicitCastExpr 0x5569011edc48 <col:25, col:27> 'GCObject *' <LValueToRValue>
  | `-ParenExpr 0x5569011edb38 <col:25, col:27> 'GCObject *const' lvalue
  |   `-MemberExpr 0x5569011edb00 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
  |     `-MemberExpr 0x5569011edaa8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  |       `-ImplicitCastExpr 0x5569011eda90 <col:48, col:50> 'const TValue *' <LValueToRValue>
  |         `-ParenExpr 0x5569011eda70 <col:48, col:50> 'const TValue *' lvalue
  |           `-DeclRefExpr 0x5569011eda48 <lobject.c:85:22> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
  `-ImplicitCastExpr 0x5569011edc60 <./llimits.h:63:25, col:27> 'GCObject *' <LValueToRValue>
    `-ParenExpr 0x5569011edc28 <col:25, col:27> 'GCObject *const' lvalue
      `-MemberExpr 0x5569011edbf0 <./lobject.h:91:48, col:59> 'GCObject *const' lvalue .gc 0x5569011a38f0
        `-MemberExpr 0x5569011edbb8 <col:48, col:53> 'const Value':'const Value' lvalue ->value 0x5569011abc30
          `-ImplicitCastExpr 0x5569011edba0 <col:48, col:50> 'const TValue *' <LValueToRValue>
            `-ParenExpr 0x5569011edb80 <col:48, col:50> 'const TValue *' lvalue
              `-DeclRefExpr 0x5569011edb58 <lobject.c:85:37> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
return [B2.13];
   Preds (1): B1
   Succs (1): B0

 [B3]
  case 2:
   1: DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
t1
   2: ImplicitCastExpr 0x5569011ed7a8 <./lobject.h:92:51, col:53> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ed788 <col:51, col:53> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B3.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5569011ed7c0 <./lobject.h:92:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011ed7a8 <col:51, col:53> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ed788 <col:51, col:53> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B3.2]->value
   4: MemberExpr 0x5569011ed7f8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
`-MemberExpr 0x5569011ed7c0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011ed7a8 <col:51, col:53> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011ed788 <col:51, col:53> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B3.3].p
   5: ImplicitCastExpr 0x5569011ed940 <./llimits.h:63:25, col:27> 'void *' <LValueToRValue>
`-ParenExpr 0x5569011ed830 <col:25, col:27> 'void *const' lvalue
  `-MemberExpr 0x5569011ed7f8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
    `-MemberExpr 0x5569011ed7c0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
      `-ImplicitCastExpr 0x5569011ed7a8 <col:51, col:53> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011ed788 <col:51, col:53> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B3.4]) (ImplicitCastExpr, LValueToRValue, void *)
   6: DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
t2
   7: ImplicitCastExpr 0x5569011ed898 <./lobject.h:92:51, col:53> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ed878 <col:51, col:53> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B3.6]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   8: MemberExpr 0x5569011ed8b0 <./lobject.h:92:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011ed898 <col:51, col:53> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ed878 <col:51, col:53> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B3.7]->value
   9: MemberExpr 0x5569011ed8e8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
`-MemberExpr 0x5569011ed8b0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011ed898 <col:51, col:53> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011ed878 <col:51, col:53> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B3.8].p
  10: ImplicitCastExpr 0x5569011ed958 <./llimits.h:63:25, col:27> 'void *' <LValueToRValue>
`-ParenExpr 0x5569011ed920 <col:25, col:27> 'void *const' lvalue
  `-MemberExpr 0x5569011ed8e8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
    `-MemberExpr 0x5569011ed8b0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
      `-ImplicitCastExpr 0x5569011ed898 <col:51, col:53> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011ed878 <col:51, col:53> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B3.9]) (ImplicitCastExpr, LValueToRValue, void *)
  11: BinaryOperator 0x5569011ed970 <./llimits.h:63:25, col:27> 'int' '=='
|-ImplicitCastExpr 0x5569011ed940 <col:25, col:27> 'void *' <LValueToRValue>
| `-ParenExpr 0x5569011ed830 <col:25, col:27> 'void *const' lvalue
|   `-MemberExpr 0x5569011ed7f8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
|     `-MemberExpr 0x5569011ed7c0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
|       `-ImplicitCastExpr 0x5569011ed7a8 <col:51, col:53> 'const TValue *' <LValueToRValue>
|         `-ParenExpr 0x5569011ed788 <col:51, col:53> 'const TValue *' lvalue
|           `-DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
`-ImplicitCastExpr 0x5569011ed958 <./llimits.h:63:25, col:27> 'void *' <LValueToRValue>
  `-ParenExpr 0x5569011ed920 <col:25, col:27> 'void *const' lvalue
    `-MemberExpr 0x5569011ed8e8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
      `-MemberExpr 0x5569011ed8b0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
        `-ImplicitCastExpr 0x5569011ed898 <col:51, col:53> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5569011ed878 <col:51, col:53> 'const TValue *' lvalue
            `-DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B3.5] == [B3.10]
  12: ReturnStmt 0x5569011ed998 <lobject.c:82:7, ./llimits.h:63:27>
`-BinaryOperator 0x5569011ed970 <col:25, col:27> 'int' '=='
  |-ImplicitCastExpr 0x5569011ed940 <col:25, col:27> 'void *' <LValueToRValue>
  | `-ParenExpr 0x5569011ed830 <col:25, col:27> 'void *const' lvalue
  |   `-MemberExpr 0x5569011ed7f8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
  |     `-MemberExpr 0x5569011ed7c0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  |       `-ImplicitCastExpr 0x5569011ed7a8 <col:51, col:53> 'const TValue *' <LValueToRValue>
  |         `-ParenExpr 0x5569011ed788 <col:51, col:53> 'const TValue *' lvalue
  |           `-DeclRefExpr 0x5569011ed760 <lobject.c:82:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
  `-ImplicitCastExpr 0x5569011ed958 <./llimits.h:63:25, col:27> 'void *' <LValueToRValue>
    `-ParenExpr 0x5569011ed920 <col:25, col:27> 'void *const' lvalue
      `-MemberExpr 0x5569011ed8e8 <./lobject.h:92:51, col:62> 'void *const' lvalue .p 0x5569011a3950
        `-MemberExpr 0x5569011ed8b0 <col:51, col:56> 'const Value':'const Value' lvalue ->value 0x5569011abc30
          `-ImplicitCastExpr 0x5569011ed898 <col:51, col:53> 'const TValue *' <LValueToRValue>
            `-ParenExpr 0x5569011ed878 <col:51, col:53> 'const TValue *' lvalue
              `-DeclRefExpr 0x5569011ed850 <lobject.c:82:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
return [B3.11];
   Preds (1): B1
   Succs (1): B0

 [B4]
  case 1:
   1: DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
t1
   2: ImplicitCastExpr 0x5569011ed500 <./lobject.h:100:45, col:47> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ed4e0 <col:45, col:47> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B4.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5569011ed518 <./lobject.h:100:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011ed500 <col:45, col:47> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ed4e0 <col:45, col:47> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B4.2]->value
   4: MemberExpr 0x5569011ed550 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
`-MemberExpr 0x5569011ed518 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011ed500 <col:45, col:47> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011ed4e0 <col:45, col:47> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B4.3].b
   5: ImplicitCastExpr 0x5569011ed698 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x5569011ed588 <col:25, col:27> 'const int' lvalue
  `-MemberExpr 0x5569011ed550 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
    `-MemberExpr 0x5569011ed518 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
      `-ImplicitCastExpr 0x5569011ed500 <col:45, col:47> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011ed4e0 <col:45, col:47> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B4.4]) (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
t2
   7: ImplicitCastExpr 0x5569011ed5f0 <./lobject.h:100:45, col:47> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ed5d0 <col:45, col:47> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B4.6]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   8: MemberExpr 0x5569011ed608 <./lobject.h:100:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011ed5f0 <col:45, col:47> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ed5d0 <col:45, col:47> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B4.7]->value
   9: MemberExpr 0x5569011ed640 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
`-MemberExpr 0x5569011ed608 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011ed5f0 <col:45, col:47> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011ed5d0 <col:45, col:47> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B4.8].b
  10: ImplicitCastExpr 0x5569011ed6b0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x5569011ed678 <col:25, col:27> 'const int' lvalue
  `-MemberExpr 0x5569011ed640 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
    `-MemberExpr 0x5569011ed608 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
      `-ImplicitCastExpr 0x5569011ed5f0 <col:45, col:47> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011ed5d0 <col:45, col:47> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B4.9]) (ImplicitCastExpr, LValueToRValue, int)
  11: BinaryOperator 0x5569011ed6c8 <./llimits.h:63:25, col:27> 'int' '=='
|-ImplicitCastExpr 0x5569011ed698 <col:25, col:27> 'int' <LValueToRValue>
| `-ParenExpr 0x5569011ed588 <col:25, col:27> 'const int' lvalue
|   `-MemberExpr 0x5569011ed550 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
|     `-MemberExpr 0x5569011ed518 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
|       `-ImplicitCastExpr 0x5569011ed500 <col:45, col:47> 'const TValue *' <LValueToRValue>
|         `-ParenExpr 0x5569011ed4e0 <col:45, col:47> 'const TValue *' lvalue
|           `-DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
`-ImplicitCastExpr 0x5569011ed6b0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
  `-ParenExpr 0x5569011ed678 <col:25, col:27> 'const int' lvalue
    `-MemberExpr 0x5569011ed640 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
      `-MemberExpr 0x5569011ed608 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
        `-ImplicitCastExpr 0x5569011ed5f0 <col:45, col:47> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5569011ed5d0 <col:45, col:47> 'const TValue *' lvalue
            `-DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B4.5] == [B4.10]
  12: ReturnStmt 0x5569011ed6f0 <lobject.c:80:7, ./llimits.h:63:27>
`-BinaryOperator 0x5569011ed6c8 <col:25, col:27> 'int' '=='
  |-ImplicitCastExpr 0x5569011ed698 <col:25, col:27> 'int' <LValueToRValue>
  | `-ParenExpr 0x5569011ed588 <col:25, col:27> 'const int' lvalue
  |   `-MemberExpr 0x5569011ed550 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
  |     `-MemberExpr 0x5569011ed518 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  |       `-ImplicitCastExpr 0x5569011ed500 <col:45, col:47> 'const TValue *' <LValueToRValue>
  |         `-ParenExpr 0x5569011ed4e0 <col:45, col:47> 'const TValue *' lvalue
  |           `-DeclRefExpr 0x5569011ed4b8 <lobject.c:80:21> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
  `-ImplicitCastExpr 0x5569011ed6b0 <./llimits.h:63:25, col:27> 'int' <LValueToRValue>
    `-ParenExpr 0x5569011ed678 <col:25, col:27> 'const int' lvalue
      `-MemberExpr 0x5569011ed640 <./lobject.h:100:45, col:56> 'const int' lvalue .b 0x5569011aba40
        `-MemberExpr 0x5569011ed608 <col:45, col:50> 'const Value':'const Value' lvalue ->value 0x5569011abc30
          `-ImplicitCastExpr 0x5569011ed5f0 <col:45, col:47> 'const TValue *' <LValueToRValue>
            `-ParenExpr 0x5569011ed5d0 <col:45, col:47> 'const TValue *' lvalue
              `-DeclRefExpr 0x5569011ed5a8 <lobject.c:80:35> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
return [B4.11];
   Preds (1): B1
   Succs (1): B0

 [B5]
  case 3:
   1: DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
t1
   2: ImplicitCastExpr 0x5569011ed1f8 <./lobject.h:93:44, col:46> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ed1d8 <col:44, col:46> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B5.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5569011ed210 <./lobject.h:93:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011ed1f8 <col:44, col:46> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ed1d8 <col:44, col:46> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B5.2]->value
   4: MemberExpr 0x5569011ed248 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
`-MemberExpr 0x5569011ed210 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011ed1f8 <col:44, col:46> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011ed1d8 <col:44, col:46> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B5.3].n
   5: ImplicitCastExpr 0x5569011ed3d0 <./luaconf.h:540:27, col:29> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5569011ed2a0 <col:27, col:29> 'const lua_Number':'const double' lvalue
  `-ParenExpr 0x5569011ed280 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
    `-MemberExpr 0x5569011ed248 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
      `-MemberExpr 0x5569011ed210 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
        `-ImplicitCastExpr 0x5569011ed1f8 <col:44, col:46> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5569011ed1d8 <col:44, col:46> 'const TValue *' lvalue
            `-DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
(([B5.4])) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
t2
   7: ImplicitCastExpr 0x5569011ed308 <./lobject.h:93:44, col:46> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ed2e8 <col:44, col:46> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B5.6]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   8: MemberExpr 0x5569011ed320 <./lobject.h:93:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
`-ImplicitCastExpr 0x5569011ed308 <col:44, col:46> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ed2e8 <col:44, col:46> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B5.7]->value
   9: MemberExpr 0x5569011ed358 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
`-MemberExpr 0x5569011ed320 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
  `-ImplicitCastExpr 0x5569011ed308 <col:44, col:46> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5569011ed2e8 <col:44, col:46> 'const TValue *' lvalue
      `-DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B5.8].n
  10: ImplicitCastExpr 0x5569011ed3e8 <./luaconf.h:540:32, col:34> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5569011ed3b0 <col:32, col:34> 'const lua_Number':'const double' lvalue
  `-ParenExpr 0x5569011ed390 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
    `-MemberExpr 0x5569011ed358 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
      `-MemberExpr 0x5569011ed320 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
        `-ImplicitCastExpr 0x5569011ed308 <col:44, col:46> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5569011ed2e8 <col:44, col:46> 'const TValue *' lvalue
            `-DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
(([B5.9])) (ImplicitCastExpr, LValueToRValue, lua_Number)
  11: BinaryOperator 0x5569011ed400 <./luaconf.h:540:27, col:34> 'int' '=='
|-ImplicitCastExpr 0x5569011ed3d0 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
| `-ParenExpr 0x5569011ed2a0 <col:27, col:29> 'const lua_Number':'const double' lvalue
|   `-ParenExpr 0x5569011ed280 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
|     `-MemberExpr 0x5569011ed248 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
|       `-MemberExpr 0x5569011ed210 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
|         `-ImplicitCastExpr 0x5569011ed1f8 <col:44, col:46> 'const TValue *' <LValueToRValue>
|           `-ParenExpr 0x5569011ed1d8 <col:44, col:46> 'const TValue *' lvalue
|             `-DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
`-ImplicitCastExpr 0x5569011ed3e8 <./luaconf.h:540:32, col:34> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5569011ed3b0 <col:32, col:34> 'const lua_Number':'const double' lvalue
    `-ParenExpr 0x5569011ed390 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
      `-MemberExpr 0x5569011ed358 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
        `-MemberExpr 0x5569011ed320 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
          `-ImplicitCastExpr 0x5569011ed308 <col:44, col:46> 'const TValue *' <LValueToRValue>
            `-ParenExpr 0x5569011ed2e8 <col:44, col:46> 'const TValue *' lvalue
              `-DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B5.5] == [B5.10]
  12: ReturnStmt 0x5569011ed448 <lobject.c:78:7, ./luaconf.h:540:35>
`-ParenExpr 0x5569011ed428 <col:26, col:35> 'int'
  `-BinaryOperator 0x5569011ed400 <col:27, col:34> 'int' '=='
    |-ImplicitCastExpr 0x5569011ed3d0 <col:27, col:29> 'lua_Number':'double' <LValueToRValue>
    | `-ParenExpr 0x5569011ed2a0 <col:27, col:29> 'const lua_Number':'const double' lvalue
    |   `-ParenExpr 0x5569011ed280 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
    |     `-MemberExpr 0x5569011ed248 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
    |       `-MemberExpr 0x5569011ed210 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
    |         `-ImplicitCastExpr 0x5569011ed1f8 <col:44, col:46> 'const TValue *' <LValueToRValue>
    |           `-ParenExpr 0x5569011ed1d8 <col:44, col:46> 'const TValue *' lvalue
    |             `-DeclRefExpr 0x5569011ed1b0 <lobject.c:78:32> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
    `-ImplicitCastExpr 0x5569011ed3e8 <./luaconf.h:540:32, col:34> 'lua_Number':'double' <LValueToRValue>
      `-ParenExpr 0x5569011ed3b0 <col:32, col:34> 'const lua_Number':'const double' lvalue
        `-ParenExpr 0x5569011ed390 <./llimits.h:63:25, col:27> 'const lua_Number':'const double' lvalue
          `-MemberExpr 0x5569011ed358 <./lobject.h:93:44, col:55> 'const lua_Number':'const double' lvalue .n 0x5569011ab9e0
            `-MemberExpr 0x5569011ed320 <col:44, col:49> 'const Value':'const Value' lvalue ->value 0x5569011abc30
              `-ImplicitCastExpr 0x5569011ed308 <col:44, col:46> 'const TValue *' <LValueToRValue>
                `-ParenExpr 0x5569011ed2e8 <col:44, col:46> 'const TValue *' lvalue
                  `-DeclRefExpr 0x5569011ed2c0 <lobject.c:78:44> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
return ([B5.11]);
   Preds (1): B1
   Succs (1): B0

 [B6]
  case 0:
   1: IntegerLiteral 0x5569011ed120 <lobject.c:76:14> 'int' 1
1
   2: ReturnStmt 0x5569011ed140 <lobject.c:76:7, col:14>
`-IntegerLiteral 0x5569011ed120 <col:14> 'int' 1
return [B6.1];
   Preds (1): B1
   Succs (1): B0

 [B7]
   1: IntegerLiteral 0x5569011ecf90 <lobject.c:73:38> 'int' 0
0
   2: ReturnStmt 0x5569011ecfb0 <lobject.c:73:31, col:38>
`-IntegerLiteral 0x5569011ecf90 <col:38> 'int' 0
return [B7.1];
   Preds (1): B8
   Succs (1): B0

 [B8]
   1: DeclRefExpr 0x5569011ecdc8 <lobject.c:73:13> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
t1
   2: ImplicitCastExpr 0x5569011ece10 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ecdf0 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ecdc8 <lobject.c:73:13> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B8.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5569011ece28 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
`-ImplicitCastExpr 0x5569011ece10 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ecdf0 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ecdc8 <lobject.c:73:13> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
[B8.2]->tt
   4: ImplicitCastExpr 0x5569011ecf38 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5569011ece60 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5569011ece28 <col:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
    `-ImplicitCastExpr 0x5569011ece10 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5569011ecdf0 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5569011ecdc8 <lobject.c:73:13> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
([B8.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x5569011ece80 <lobject.c:73:26> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
t2
   6: ImplicitCastExpr 0x5569011ecec8 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5569011ecea8 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5569011ece80 <lobject.c:73:26> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B8.5]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   7: MemberExpr 0x5569011ecee0 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
`-ImplicitCastExpr 0x5569011ecec8 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5569011ecea8 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5569011ece80 <lobject.c:73:26> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B8.6]->tt
   8: ImplicitCastExpr 0x5569011ecf50 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5569011ecf18 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5569011ecee0 <col:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
    `-ImplicitCastExpr 0x5569011ecec8 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5569011ecea8 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5569011ece80 <lobject.c:73:26> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
([B8.7]) (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x5569011ecf68 <./lobject.h:90:18, col:26> 'int' '!='
|-ImplicitCastExpr 0x5569011ecf38 <col:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5569011ece60 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5569011ece28 <col:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
|     `-ImplicitCastExpr 0x5569011ece10 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5569011ecdf0 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5569011ecdc8 <lobject.c:73:13> 'const TValue *' lvalue ParmVar 0x5569011ecbc8 't1' 'const TValue *'
`-ImplicitCastExpr 0x5569011ecf50 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
  `-ParenExpr 0x5569011ecf18 <col:18, col:26> 'const int' lvalue
    `-MemberExpr 0x5569011ecee0 <col:19, col:24> 'const int' lvalue ->tt 0x5569011abc90
      `-ImplicitCastExpr 0x5569011ecec8 <col:19, col:21> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5569011ecea8 <col:19, col:21> 'const TValue *' lvalue
          `-DeclRefExpr 0x5569011ece80 <lobject.c:73:26> 'const TValue *' lvalue ParmVar 0x5569011ecc38 't2' 'const TValue *'
[B8.4] != [B8.8]
   T: if [B8.9]
   Preds (1): B9
   Succs (2): B7 B1

 [B0 (EXIT)]
   Preds (6): B2 B3 B4 B5 B6 B7
