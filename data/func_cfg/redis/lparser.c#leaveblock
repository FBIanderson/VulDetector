static void leaveblock(FuncState *fs)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: IntegerLiteral 0x558fa8f01438 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x558fa8f01468 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f01438 <col:31> 'int' 0
(void)[B1.1] (CStyleCastExpr, ToVoid, void)
   3: IntegerLiteral 0x558fa8f014b0 <./llimits.h:62:31> 'int' 0
0
   4: CStyleCastExpr 0x558fa8f014e0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f014b0 <col:31> 'int' 0
(void)[B1.3] (CStyleCastExpr, ToVoid, void)
   5: DeclRefExpr 0x558fa8f015a0 <lparser.c:305:17> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x558fa8f015c8 <lparser.c:305:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f015a0 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: MemberExpr 0x558fa8f015e0 <lparser.c:305:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f015c8 <col:17> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f015a0 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.6]->nactvar
   8: ImplicitCastExpr 0x558fa8f01618 <lparser.c:305:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f015e0 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f015c8 <col:17> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f015a0 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x558fa8f01630 <lparser.c:305:17, col:21> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f01618 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f015e0 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f015c8 <col:17> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f015a0 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.8] (ImplicitCastExpr, IntegralCast, int)
  10: DeclRefExpr 0x558fa8f01528 <lparser.c:305:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x558fa8f01550 <lparser.c:305:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f01528 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: MemberExpr 0x558fa8f01568 <lparser.c:305:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f01550 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f01528 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.11]->freereg
  13: BinaryOperator 0x558fa8f02e10 <lparser.c:305:3, col:21> 'int' '='
|-MemberExpr 0x558fa8f01568 <col:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
| `-ImplicitCastExpr 0x558fa8f01550 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f01528 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f01630 <col:17, col:21> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f01618 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f015e0 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      `-ImplicitCastExpr 0x558fa8f015c8 <col:17> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f015a0 <col:17> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.12] = [B1.9]
  14: DeclRefExpr 0x558fa8f02e38 <lparser.c:306:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  15: ImplicitCastExpr 0x558fa8f02f00 <lparser.c:306:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f02e38 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B1.14] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  16: DeclRefExpr 0x558fa8f02e60 <lparser.c:306:20> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
  17: ImplicitCastExpr 0x558fa8f02f50 <lparser.c:306:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f02e60 <col:20> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B1.16] (ImplicitCastExpr, LValueToRValue, FuncState *)
  18: DeclRefExpr 0x558fa8f02e88 <lparser.c:306:24> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
bl
  19: ImplicitCastExpr 0x558fa8f02eb0 <lparser.c:306:24> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f02e88 <col:24> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B1.18] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  20: MemberExpr 0x558fa8f02ec8 <lparser.c:306:24, col:28> 'int' lvalue ->breaklist 0x558fa8ee9d68
`-ImplicitCastExpr 0x558fa8f02eb0 <col:24> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f02e88 <col:24> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B1.19]->breaklist
  21: ImplicitCastExpr 0x558fa8f02f68 <lparser.c:306:24, col:28> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f02ec8 <col:24, col:28> 'int' lvalue ->breaklist 0x558fa8ee9d68
  `-ImplicitCastExpr 0x558fa8f02eb0 <col:24> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f02e88 <col:24> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: CallExpr 0x558fa8f02f18 <lparser.c:306:3, col:37> 'void'
|-ImplicitCastExpr 0x558fa8f02f00 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f02e38 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f02f50 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f02e60 <col:20> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f02f68 <col:24, col:28> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f02ec8 <col:24, col:28> 'int' lvalue ->breaklist 0x558fa8ee9d68
    `-ImplicitCastExpr 0x558fa8f02eb0 <col:24> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f02e88 <col:24> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B1.15]([B1.17], [B1.21])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f011b0 <lparser.c:301:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x558fa8f01338 <lparser.c:301:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f011b0 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x558fa8f011d8 <lparser.c:301:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f013a0 <lparser.c:301:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f011d8 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f01200 <lparser.c:301:22> 'int' EnumConstant 0x558fa8eafcf8 'OP_CLOSE' 'int'
OP_CLOSE
   6: ImplicitCastExpr 0x558fa8f013b8 <lparser.c:301:22> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f01200 <col:22> 'int' EnumConstant 0x558fa8eafcf8 'OP_CLOSE' 'int'
[B2.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x558fa8f01228 <lparser.c:301:32> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
bl
   8: ImplicitCastExpr 0x558fa8f01250 <lparser.c:301:32> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f01228 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B2.7] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   9: MemberExpr 0x558fa8f01268 <lparser.c:301:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
`-ImplicitCastExpr 0x558fa8f01250 <col:32> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f01228 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B2.8]->nactvar
  10: ImplicitCastExpr 0x558fa8f013d0 <lparser.c:301:32, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f01268 <col:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
  `-ImplicitCastExpr 0x558fa8f01250 <col:32> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f01228 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B2.9] (ImplicitCastExpr, LValueToRValue, lu_byte)
  11: ImplicitCastExpr 0x558fa8f013e8 <lparser.c:301:32, col:36> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f013d0 <col:32, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f01268 <col:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
    `-ImplicitCastExpr 0x558fa8f01250 <col:32> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f01228 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B2.10] (ImplicitCastExpr, IntegralCast, int)
  12: IntegerLiteral 0x558fa8f012a0 <lparser.c:301:45> 'int' 0
0
  13: IntegerLiteral 0x558fa8f012c0 <lparser.c:301:48> 'int' 0
0
  14: CallExpr 0x558fa8f01350 <lparser.c:301:5, col:49> 'int'
|-ImplicitCastExpr 0x558fa8f01338 <col:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f011b0 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x558fa8f013a0 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f011d8 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f013b8 <col:22> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f01200 <col:22> 'int' EnumConstant 0x558fa8eafcf8 'OP_CLOSE' 'int'
|-ImplicitCastExpr 0x558fa8f013e8 <col:32, col:36> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f013d0 <col:32, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f01268 <col:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
|     `-ImplicitCastExpr 0x558fa8f01250 <col:32> 'BlockCnt *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f01228 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
|-IntegerLiteral 0x558fa8f012a0 <col:45> 'int' 0
`-IntegerLiteral 0x558fa8f012c0 <col:48> 'int' 0
[B2.2]([B2.4], [B2.6], [B2.11], [B2.12], [B2.13])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f00d98 <lparser.c:297:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8f00dc0 <lparser.c:297:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00d98 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x558fa8f00dd8 <lparser.c:297:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8f00dc0 <col:18> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00d98 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.2]->bl
   4: ImplicitCastExpr 0x558fa8f00e10 <lparser.c:297:18, col:22> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8f00dd8 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
  `-ImplicitCastExpr 0x558fa8f00dc0 <col:18> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f00d98 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
   5: DeclStmt 0x558fa8f00e28 <lparser.c:297:3, col:24>col:13
`-VarDecl 0x558fa8f00d38 <col:3, col:22> col:13 used bl 'BlockCnt *' cinit
  `-ImplicitCastExpr 0x558fa8f00e10 <col:18, col:22> 'struct BlockCnt *' <LValueToRValue>
    `-MemberExpr 0x558fa8f00dd8 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
      `-ImplicitCastExpr 0x558fa8f00dc0 <col:18> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f00d98 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
BlockCnt *bl = fs->bl;
   6: DeclRefExpr 0x558fa8f00eb8 <lparser.c:298:12> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
bl
   7: ImplicitCastExpr 0x558fa8f00ee0 <lparser.c:298:12> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00eb8 <col:12> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.6] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   8: MemberExpr 0x558fa8f00ef8 <lparser.c:298:12, col:16> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
`-ImplicitCastExpr 0x558fa8f00ee0 <col:12> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00eb8 <col:12> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.7]->previous
   9: ImplicitCastExpr 0x558fa8f00f30 <lparser.c:298:12, col:16> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8f00ef8 <col:12, col:16> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
  `-ImplicitCastExpr 0x558fa8f00ee0 <col:12> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f00eb8 <col:12> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.8] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
  10: DeclRefExpr 0x558fa8f00e40 <lparser.c:298:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x558fa8f00e68 <lparser.c:298:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00e40 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: MemberExpr 0x558fa8f00e80 <lparser.c:298:3, col:7> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8f00e68 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00e40 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.11]->bl
  13: BinaryOperator 0x558fa8f00f48 <lparser.c:298:3, col:16> 'struct BlockCnt *' '='
|-MemberExpr 0x558fa8f00e80 <col:3, col:7> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
| `-ImplicitCastExpr 0x558fa8f00e68 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f00e40 <col:3> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f00f30 <col:12, col:16> 'struct BlockCnt *' <LValueToRValue>
  `-MemberExpr 0x558fa8f00ef8 <col:12, col:16> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
    `-ImplicitCastExpr 0x558fa8f00ee0 <col:12> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f00eb8 <col:12> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.12] = [B3.9]
  14: DeclRefExpr 0x558fa8f00f70 <lparser.c:299:3> 'void (LexState *, int)' Function 0x558fa8ef71d0 'removevars' 'void (LexState *, int)'
removevars
  15: ImplicitCastExpr 0x558fa8f01088 <lparser.c:299:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f00f70 <col:3> 'void (LexState *, int)' Function 0x558fa8ef71d0 'removevars' 'void (LexState *, int)'
[B3.14] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  16: DeclRefExpr 0x558fa8f00f98 <lparser.c:299:14> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
fs
  17: ImplicitCastExpr 0x558fa8f00fc0 <lparser.c:299:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f00f98 <col:14> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.16] (ImplicitCastExpr, LValueToRValue, FuncState *)
  18: MemberExpr 0x558fa8f00fd8 <lparser.c:299:14, col:18> 'struct LexState *' lvalue ->ls 0x558fa8eb4000
`-ImplicitCastExpr 0x558fa8f00fc0 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f00f98 <col:14> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.17]->ls
  19: ImplicitCastExpr 0x558fa8f010d8 <lparser.c:299:14, col:18> 'struct LexState *' <LValueToRValue>
`-MemberExpr 0x558fa8f00fd8 <col:14, col:18> 'struct LexState *' lvalue ->ls 0x558fa8eb4000
  `-ImplicitCastExpr 0x558fa8f00fc0 <col:14> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f00f98 <col:14> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
[B3.18] (ImplicitCastExpr, LValueToRValue, struct LexState *)
  20: DeclRefExpr 0x558fa8f01010 <lparser.c:299:22> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
bl
  21: ImplicitCastExpr 0x558fa8f01038 <lparser.c:299:22> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f01010 <col:22> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.20] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  22: MemberExpr 0x558fa8f01050 <lparser.c:299:22, col:26> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
`-ImplicitCastExpr 0x558fa8f01038 <col:22> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f01010 <col:22> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.21]->nactvar
  23: ImplicitCastExpr 0x558fa8f010f0 <lparser.c:299:22, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f01050 <col:22, col:26> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
  `-ImplicitCastExpr 0x558fa8f01038 <col:22> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f01010 <col:22> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.22] (ImplicitCastExpr, LValueToRValue, lu_byte)
  24: ImplicitCastExpr 0x558fa8f01108 <lparser.c:299:22, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f010f0 <col:22, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f01050 <col:22, col:26> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
    `-ImplicitCastExpr 0x558fa8f01038 <col:22> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f01010 <col:22> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.23] (ImplicitCastExpr, IntegralCast, int)
  25: CallExpr 0x558fa8f010a0 <lparser.c:299:3, col:33> 'void'
|-ImplicitCastExpr 0x558fa8f01088 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f00f70 <col:3> 'void (LexState *, int)' Function 0x558fa8ef71d0 'removevars' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f010d8 <col:14, col:18> 'struct LexState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f00fd8 <col:14, col:18> 'struct LexState *' lvalue ->ls 0x558fa8eb4000
|   `-ImplicitCastExpr 0x558fa8f00fc0 <col:14> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f00f98 <col:14> 'FuncState *' lvalue ParmVar 0x558fa8f00b80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f01108 <col:22, col:26> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f010f0 <col:22, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f01050 <col:22, col:26> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
      `-ImplicitCastExpr 0x558fa8f01038 <col:22> 'BlockCnt *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f01010 <col:22> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.15]([B3.19], [B3.24])
  26: DeclRefExpr 0x558fa8f01120 <lparser.c:300:7> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
bl
  27: ImplicitCastExpr 0x558fa8f01148 <lparser.c:300:7> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f01120 <col:7> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.26] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  28: MemberExpr 0x558fa8f01160 <lparser.c:300:7, col:11> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
`-ImplicitCastExpr 0x558fa8f01148 <col:7> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f01120 <col:7> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.27]->upval
  29: ImplicitCastExpr 0x558fa8f01198 <lparser.c:300:7, col:11> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f01160 <col:7, col:11> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
  `-ImplicitCastExpr 0x558fa8f01148 <col:7> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f01120 <col:7> 'BlockCnt *' lvalue Var 0x558fa8f00d38 'bl' 'BlockCnt *'
[B3.28] (ImplicitCastExpr, LValueToRValue, lu_byte)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
