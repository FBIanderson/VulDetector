static void markupval(FuncState *fs, int level)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: IntegerLiteral 0x558fa8efc310 <lparser.c:220:23> 'int' 1
1
   2: ImplicitCastExpr 0x558fa8efc330 <lparser.c:220:23> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8efc310 <col:23> 'int' 1
[B1.1] (ImplicitCastExpr, IntegralCast, lu_byte)
   3: DeclRefExpr 0x558fa8efc298 <lparser.c:220:11> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
bl
   4: ImplicitCastExpr 0x558fa8efc2c0 <lparser.c:220:11> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc298 <col:11> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B1.3] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   5: MemberExpr 0x558fa8efc2d8 <lparser.c:220:11, col:15> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
`-ImplicitCastExpr 0x558fa8efc2c0 <col:11> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efc298 <col:11> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B1.4]->upval
   6: BinaryOperator 0x558fa8efc348 <lparser.c:220:11, col:23> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x558fa8efc2d8 <col:11, col:15> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
| `-ImplicitCastExpr 0x558fa8efc2c0 <col:11> 'BlockCnt *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8efc298 <col:11> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8efc330 <col:23> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8efc310 <col:23> 'int' 1
[B1.5] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8efc258 <lparser.c:220:7> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8efc280 <lparser.c:220:7> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc258 <col:7> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B2.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   T: if [B2.2]
   Preds (2): B5 B6
   Succs (2): B1 B0

 [B3]
   Preds (1): B4
   Succs (1): B6

 [B4]
   1: DeclRefExpr 0x558fa8efc180 <lparser.c:219:42> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8efc1a8 <lparser.c:219:42> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc180 <col:42> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B4.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   3: MemberExpr 0x558fa8efc1c0 <lparser.c:219:42, col:46> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
`-ImplicitCastExpr 0x558fa8efc1a8 <col:42> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efc180 <col:42> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B4.2]->previous
   4: ImplicitCastExpr 0x558fa8efc1f8 <lparser.c:219:42, col:46> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8efc1c0 <col:42, col:46> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
  `-ImplicitCastExpr 0x558fa8efc1a8 <col:42> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8efc180 <col:42> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B4.3] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
   5: DeclRefExpr 0x558fa8efc158 <lparser.c:219:37> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
bl
   6: BinaryOperator 0x558fa8efc210 <lparser.c:219:37, col:46> 'BlockCnt *' '='
|-DeclRefExpr 0x558fa8efc158 <col:37> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8efc1f8 <col:42, col:46> 'struct BlockCnt *' <LValueToRValue>
  `-MemberExpr 0x558fa8efc1c0 <col:42, col:46> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
    `-ImplicitCastExpr 0x558fa8efc1a8 <col:42> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8efc180 <col:42> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B4.5] = [B4.4]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x558fa8efc008 <lparser.c:219:16> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8efc030 <lparser.c:219:16> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc008 <col:16> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B5.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   3: MemberExpr 0x558fa8efc048 <lparser.c:219:16, col:20> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
`-ImplicitCastExpr 0x558fa8efc030 <col:16> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efc008 <col:16> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B5.2]->nactvar
   4: ImplicitCastExpr 0x558fa8efc0a8 <lparser.c:219:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8efc048 <col:16, col:20> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
  `-ImplicitCastExpr 0x558fa8efc030 <col:16> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8efc008 <col:16> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B5.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x558fa8efc0c0 <lparser.c:219:16, col:20> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8efc0a8 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8efc048 <col:16, col:20> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
    `-ImplicitCastExpr 0x558fa8efc030 <col:16> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8efc008 <col:16> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B5.4] (ImplicitCastExpr, IntegralCast, int)
   6: DeclRefExpr 0x558fa8efc080 <lparser.c:219:30> 'int' lvalue ParmVar 0x558fa8efbd40 'level' 'int'
level
   7: ImplicitCastExpr 0x558fa8efc0d8 <lparser.c:219:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8efc080 <col:30> 'int' lvalue ParmVar 0x558fa8efbd40 'level' 'int'
[B5.6] (ImplicitCastExpr, LValueToRValue, int)
   8: BinaryOperator 0x558fa8efc0f0 <lparser.c:219:16, col:30> 'int' '>'
|-ImplicitCastExpr 0x558fa8efc0c0 <col:16, col:20> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8efc0a8 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8efc048 <col:16, col:20> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
|     `-ImplicitCastExpr 0x558fa8efc030 <col:16> 'BlockCnt *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8efc008 <col:16> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8efc0d8 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efc080 <col:30> 'int' lvalue ParmVar 0x558fa8efbd40 'level' 'int'
[B5.5] > [B5.7]
   T: while [B6.2] && [B5.8]
   Preds (1): B6
   Succs (2): B4 B2

 [B6]
   1: DeclRefExpr 0x558fa8efbfe0 <lparser.c:219:10> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8efc118 <lparser.c:219:10> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efbfe0 <col:10> 'BlockCnt *' lvalue Var 0x558fa8efbed8 'bl' 'BlockCnt *'
[B6.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   T: [B6.2] && ...
   Preds (2): B3 B7
   Succs (2): B5 B2

 [B7]
   1: DeclRefExpr 0x558fa8efbf38 <lparser.c:218:18> 'FuncState *' lvalue ParmVar 0x558fa8efbcc8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8efbf60 <lparser.c:218:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8efbf38 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8efbcc8 'fs' 'FuncState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x558fa8efbf78 <lparser.c:218:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8efbf60 <col:18> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8efbf38 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8efbcc8 'fs' 'FuncState *'
[B7.2]->bl
   4: ImplicitCastExpr 0x558fa8efbfb0 <lparser.c:218:18, col:22> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8efbf78 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
  `-ImplicitCastExpr 0x558fa8efbf60 <col:18> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8efbf38 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8efbcc8 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
   5: DeclStmt 0x558fa8efbfc8 <lparser.c:218:3, col:24>col:13
`-VarDecl 0x558fa8efbed8 <col:3, col:22> col:13 used bl 'BlockCnt *' cinit
  `-ImplicitCastExpr 0x558fa8efbfb0 <col:18, col:22> 'struct BlockCnt *' <LValueToRValue>
    `-MemberExpr 0x558fa8efbf78 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
      `-ImplicitCastExpr 0x558fa8efbf60 <col:18> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8efbf38 <col:18> 'FuncState *' lvalue ParmVar 0x558fa8efbcc8 'fs' 'FuncState *'
BlockCnt *bl = fs->bl;
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (2): B1 B2
