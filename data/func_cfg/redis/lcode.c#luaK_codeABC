int luaK_codeABC(FuncState *fs, OpCode o, int a, int b, int c)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: IntegerLiteral 0x5637768eca18 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x5637768eca48 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768eca18 <col:31> 'int' 0
(void)[B1.1] (CStyleCastExpr, ToVoid, void)
   3: IntegerLiteral 0x5637768eca90 <./llimits.h:62:31> 'int' 0
0
   4: CStyleCastExpr 0x5637768ecac0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768eca90 <col:31> 'int' 0
(void)[B1.3] (CStyleCastExpr, ToVoid, void)
   5: IntegerLiteral 0x5637768ecb08 <./llimits.h:62:31> 'int' 0
0
   6: CStyleCastExpr 0x5637768ecb38 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768ecb08 <col:31> 'int' 0
(void)[B1.5] (CStyleCastExpr, ToVoid, void)
   7: DeclRefExpr 0x5637768ecb80 <lcode.c:808:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
luaK_code
   8: ImplicitCastExpr 0x5637768ed628 <lcode.c:808:10> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768ecb80 <col:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, Instruction, int))
   9: DeclRefExpr 0x5637768ecba8 <lcode.c:808:20> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x5637768ed680 <lcode.c:808:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ecba8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
o
  12: ImplicitCastExpr 0x5637768ecc58 <./llimits.h:75:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
`-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
  `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
([B1.11]) (ImplicitCastExpr, LValueToRValue, OpCode)
  13: CStyleCastExpr 0x5637768ecc70 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
  `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
    `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
(Instruction)[B1.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
0
  15: BinaryOperator 0x5637768eccd8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ecc98 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768ecc70 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
|     `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
|       `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
`-IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
([B1.13]) << [B1.14]
  16: DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
a
  17: ImplicitCastExpr 0x5637768ecda8 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
  `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
([B1.16]) (ImplicitCastExpr, LValueToRValue, int)
  18: CStyleCastExpr 0x5637768ecdc0 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
    `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
(Instruction)[B1.17] (CStyleCastExpr, IntegralCast, Instruction)
  19: IntegerLiteral 0x5637768ece08 <./lopcodes.h:44:17> 'int' 0
0
  20: IntegerLiteral 0x5637768ece28 <./lopcodes.h:42:18> 'int' 6
6
  21: BinaryOperator 0x5637768ece48 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
[B1.19] + [B1.20]
  22: BinaryOperator 0x5637768ece90 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ecde8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768ecdc0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
|       `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
`-ParenExpr 0x5637768ece70 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768ece48 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
([B1.18]) << ([B1.21])
  23: BinaryOperator 0x5637768eced8 <./lopcodes.h:104:30, line:105:34> 'unsigned int' '|'
|-ParenExpr 0x5637768ecd00 <line:104:30, col:59> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768eccd8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768ecc98 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768ecc70 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
|   |     `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
|   |       `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768eceb8 <line:105:6, col:34> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ece90 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ecde8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    | `-CStyleCastExpr 0x5637768ecdc0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
    |     `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
    |       `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
    `-ParenExpr 0x5637768ece70 <./lopcodes.h:45:16, col:33> 'int'
      `-BinaryOperator 0x5637768ece48 <line:44:17, line:42:18> 'int' '+'
        |-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
        `-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
([B1.15]) | ([B1.22])
  24: DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
b
  25: ImplicitCastExpr 0x5637768ecf88 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
  `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
([B1.24]) (ImplicitCastExpr, LValueToRValue, int)
  26: CStyleCastExpr 0x5637768ecfa0 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768ecf88 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
    `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
(Instruction)[B1.25] (CStyleCastExpr, IntegralCast, Instruction)
  27: IntegerLiteral 0x5637768ecfe8 <./lopcodes.h:44:17> 'int' 0
0
  28: IntegerLiteral 0x5637768ed008 <./lopcodes.h:42:18> 'int' 6
6
  29: BinaryOperator 0x5637768ed028 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
[B1.27] + [B1.28]
  30: IntegerLiteral 0x5637768ed070 <./lopcodes.h:40:17> 'int' 8
8
  31: BinaryOperator 0x5637768ed090 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
([B1.29]) + [B1.30]
  32: IntegerLiteral 0x5637768ed0d8 <./lopcodes.h:37:17> 'int' 9
9
  33: BinaryOperator 0x5637768ed0f8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768ed0b8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768ed090 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768ed0d8 <line:37:17> 'int' 9
([B1.31]) + [B1.32]
  34: BinaryOperator 0x5637768ed140 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ecfc8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768ecfa0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768ecf88 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
|       `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
`-ParenExpr 0x5637768ed120 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768ed0f8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768ed0b8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768ed090 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768ed0d8 <line:37:17> 'int' 9
([B1.26]) << ([B1.33])
  35: BinaryOperator 0x5637768ed188 <./lopcodes.h:104:30, line:106:34> 'unsigned int' '|'
|-BinaryOperator 0x5637768eced8 <line:104:30, line:105:34> 'unsigned int' '|'
| |-ParenExpr 0x5637768ecd00 <line:104:30, col:59> 'Instruction':'unsigned int'
| | `-BinaryOperator 0x5637768eccd8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
| |   |-ParenExpr 0x5637768ecc98 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| |   | `-CStyleCastExpr 0x5637768ecc70 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
| |   |   `-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
| |   |     `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
| |   |       `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
| |   `-IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
| `-ParenExpr 0x5637768eceb8 <line:105:6, col:34> 'Instruction':'unsigned int'
|   `-BinaryOperator 0x5637768ece90 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|     |-ParenExpr 0x5637768ecde8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|     | `-CStyleCastExpr 0x5637768ecdc0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
|     |     `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
|     |       `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
|     `-ParenExpr 0x5637768ece70 <./lopcodes.h:45:16, col:33> 'int'
|       `-BinaryOperator 0x5637768ece48 <line:44:17, line:42:18> 'int' '+'
|         |-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
|         `-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
`-ParenExpr 0x5637768ed168 <line:106:6, col:34> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ed140 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ecfc8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    | `-CStyleCastExpr 0x5637768ecfa0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5637768ecf88 <col:26, col:30> 'int' <LValueToRValue>
    |     `-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
    |       `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
    `-ParenExpr 0x5637768ed120 <./lopcodes.h:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768ed0f8 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768ed0b8 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768ed090 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768ed0d8 <line:37:17> 'int' 9
[B1.23] | ([B1.34])
  36: DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
c
  37: ImplicitCastExpr 0x5637768ed238 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768ed218 <col:26, col:30> 'int' lvalue
  `-DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
([B1.36]) (ImplicitCastExpr, LValueToRValue, int)
  38: CStyleCastExpr 0x5637768ed250 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768ed238 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768ed218 <col:26, col:30> 'int' lvalue
    `-DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
(Instruction)[B1.37] (CStyleCastExpr, IntegralCast, Instruction)
  39: IntegerLiteral 0x5637768ed298 <./lopcodes.h:44:17> 'int' 0
0
  40: IntegerLiteral 0x5637768ed3a0 <./lopcodes.h:42:18> 'int' 6
6
  41: BinaryOperator 0x5637768ed3c0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768ed298 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768ed3a0 <line:42:18> 'int' 6
[B1.39] + [B1.40]
  42: IntegerLiteral 0x5637768ed408 <./lopcodes.h:40:17> 'int' 8
8
  43: BinaryOperator 0x5637768ed428 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768ed3e8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768ed3c0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768ed298 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768ed3a0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768ed408 <line:40:17> 'int' 8
([B1.41]) + [B1.42]
  44: BinaryOperator 0x5637768ed470 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768ed278 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768ed250 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768ed238 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768ed218 <col:26, col:30> 'int' lvalue
|       `-DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
`-ParenExpr 0x5637768ed450 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5637768ed428 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5637768ed3e8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5637768ed3c0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5637768ed298 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5637768ed3a0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768ed408 <line:40:17> 'int' 8
([B1.38]) << ([B1.43])
  45: BinaryOperator 0x5637768ed4b8 <./lopcodes.h:104:30, line:107:34> 'unsigned int' '|'
|-BinaryOperator 0x5637768ed188 <line:104:30, line:106:34> 'unsigned int' '|'
| |-BinaryOperator 0x5637768eced8 <line:104:30, line:105:34> 'unsigned int' '|'
| | |-ParenExpr 0x5637768ecd00 <line:104:30, col:59> 'Instruction':'unsigned int'
| | | `-BinaryOperator 0x5637768eccd8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
| | |   |-ParenExpr 0x5637768ecc98 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| | |   | `-CStyleCastExpr 0x5637768ecc70 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
| | |   |   `-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
| | |   |     `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
| | |   |       `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
| | |   `-IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
| | `-ParenExpr 0x5637768eceb8 <line:105:6, col:34> 'Instruction':'unsigned int'
| |   `-BinaryOperator 0x5637768ece90 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
| |     |-ParenExpr 0x5637768ecde8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| |     | `-CStyleCastExpr 0x5637768ecdc0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
| |     |   `-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
| |     |     `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
| |     |       `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
| |     `-ParenExpr 0x5637768ece70 <./lopcodes.h:45:16, col:33> 'int'
| |       `-BinaryOperator 0x5637768ece48 <line:44:17, line:42:18> 'int' '+'
| |         |-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
| |         `-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
| `-ParenExpr 0x5637768ed168 <line:106:6, col:34> 'Instruction':'unsigned int'
|   `-BinaryOperator 0x5637768ed140 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|     |-ParenExpr 0x5637768ecfc8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|     | `-CStyleCastExpr 0x5637768ecfa0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x5637768ecf88 <col:26, col:30> 'int' <LValueToRValue>
|     |     `-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
|     |       `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
|     `-ParenExpr 0x5637768ed120 <./lopcodes.h:47:16, col:31> 'int'
|       `-BinaryOperator 0x5637768ed0f8 <line:46:16, line:37:17> 'int' '+'
|         |-ParenExpr 0x5637768ed0b8 <line:46:16, col:31> 'int'
|         | `-BinaryOperator 0x5637768ed090 <line:45:16, line:40:17> 'int' '+'
|         |   |-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
|         |   | `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
|         |   |   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
|         |   |   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
|         |   `-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
|         `-IntegerLiteral 0x5637768ed0d8 <line:37:17> 'int' 9
`-ParenExpr 0x5637768ed498 <line:107:6, col:34> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768ed470 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768ed278 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    | `-CStyleCastExpr 0x5637768ed250 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5637768ed238 <col:26, col:30> 'int' <LValueToRValue>
    |     `-ParenExpr 0x5637768ed218 <col:26, col:30> 'int' lvalue
    |       `-DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
    `-ParenExpr 0x5637768ed450 <./lopcodes.h:46:16, col:31> 'int'
      `-BinaryOperator 0x5637768ed428 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x5637768ed3e8 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x5637768ed3c0 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x5637768ed298 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x5637768ed3a0 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768ed408 <line:40:17> 'int' 8
[B1.35] | ([B1.44])
  46: DeclRefExpr 0x5637768ed500 <lcode.c:808:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
fs
  47: ImplicitCastExpr 0x5637768ed528 <lcode.c:808:48> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.46] (ImplicitCastExpr, LValueToRValue, FuncState *)
  48: MemberExpr 0x5637768ed540 <lcode.c:808:48, col:52> 'struct LexState *' lvalue ->ls 0x56377687df60
`-ImplicitCastExpr 0x5637768ed528 <col:48> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.47]->ls
  49: ImplicitCastExpr 0x5637768ed578 <lcode.c:808:48, col:52> 'struct LexState *' <LValueToRValue>
`-MemberExpr 0x5637768ed540 <col:48, col:52> 'struct LexState *' lvalue ->ls 0x56377687df60
  `-ImplicitCastExpr 0x5637768ed528 <col:48> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.48] (ImplicitCastExpr, LValueToRValue, struct LexState *)
  50: MemberExpr 0x5637768ed590 <lcode.c:808:48, col:56> 'int' lvalue ->lastline 0x5637768694a8
`-ImplicitCastExpr 0x5637768ed578 <col:48, col:52> 'struct LexState *' <LValueToRValue>
  `-MemberExpr 0x5637768ed540 <col:48, col:52> 'struct LexState *' lvalue ->ls 0x56377687df60
    `-ImplicitCastExpr 0x5637768ed528 <col:48> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.49]->lastline
  51: ImplicitCastExpr 0x5637768ed698 <lcode.c:808:48, col:56> 'int' <LValueToRValue>
`-MemberExpr 0x5637768ed590 <col:48, col:56> 'int' lvalue ->lastline 0x5637768694a8
  `-ImplicitCastExpr 0x5637768ed578 <col:48, col:52> 'struct LexState *' <LValueToRValue>
    `-MemberExpr 0x5637768ed540 <col:48, col:52> 'struct LexState *' lvalue ->ls 0x56377687df60
      `-ImplicitCastExpr 0x5637768ed528 <col:48> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.50] (ImplicitCastExpr, LValueToRValue, int)
  52: CallExpr 0x5637768ed640 <lcode.c:808:10, col:64> 'int'
|-ImplicitCastExpr 0x5637768ed628 <col:10> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768ecb80 <col:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
|-ImplicitCastExpr 0x5637768ed680 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768ecba8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
|-ParenExpr 0x5637768ed4e0 <./lopcodes.h:104:29, line:107:35> 'unsigned int'
| `-BinaryOperator 0x5637768ed4b8 <line:104:30, line:107:34> 'unsigned int' '|'
|   |-BinaryOperator 0x5637768ed188 <line:104:30, line:106:34> 'unsigned int' '|'
|   | |-BinaryOperator 0x5637768eced8 <line:104:30, line:105:34> 'unsigned int' '|'
|   | | |-ParenExpr 0x5637768ecd00 <line:104:30, col:59> 'Instruction':'unsigned int'
|   | | | `-BinaryOperator 0x5637768eccd8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|   | | |   |-ParenExpr 0x5637768ecc98 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | | |   | `-CStyleCastExpr 0x5637768ecc70 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   | | |   |   `-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
|   | | |   |     `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
|   | | |   |       `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
|   | | |   `-IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
|   | | `-ParenExpr 0x5637768eceb8 <line:105:6, col:34> 'Instruction':'unsigned int'
|   | |   `-BinaryOperator 0x5637768ece90 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|   | |     |-ParenExpr 0x5637768ecde8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | |     | `-CStyleCastExpr 0x5637768ecdc0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   | |     |   `-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
|   | |     |     `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
|   | |     |       `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
|   | |     `-ParenExpr 0x5637768ece70 <./lopcodes.h:45:16, col:33> 'int'
|   | |       `-BinaryOperator 0x5637768ece48 <line:44:17, line:42:18> 'int' '+'
|   | |         |-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
|   | |         `-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
|   | `-ParenExpr 0x5637768ed168 <line:106:6, col:34> 'Instruction':'unsigned int'
|   |   `-BinaryOperator 0x5637768ed140 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|   |     |-ParenExpr 0x5637768ecfc8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   |     | `-CStyleCastExpr 0x5637768ecfa0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5637768ecf88 <col:26, col:30> 'int' <LValueToRValue>
|   |     |     `-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
|   |     |       `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
|   |     `-ParenExpr 0x5637768ed120 <./lopcodes.h:47:16, col:31> 'int'
|   |       `-BinaryOperator 0x5637768ed0f8 <line:46:16, line:37:17> 'int' '+'
|   |         |-ParenExpr 0x5637768ed0b8 <line:46:16, col:31> 'int'
|   |         | `-BinaryOperator 0x5637768ed090 <line:45:16, line:40:17> 'int' '+'
|   |         |   |-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
|   |         |   | `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
|   |         |   |   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
|   |         |   |   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
|   |         |   `-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
|   |         `-IntegerLiteral 0x5637768ed0d8 <line:37:17> 'int' 9
|   `-ParenExpr 0x5637768ed498 <line:107:6, col:34> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768ed470 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768ed278 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|       | `-CStyleCastExpr 0x5637768ed250 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5637768ed238 <col:26, col:30> 'int' <LValueToRValue>
|       |     `-ParenExpr 0x5637768ed218 <col:26, col:30> 'int' lvalue
|       |       `-DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
|       `-ParenExpr 0x5637768ed450 <./lopcodes.h:46:16, col:31> 'int'
|         `-BinaryOperator 0x5637768ed428 <line:45:16, line:40:17> 'int' '+'
|           |-ParenExpr 0x5637768ed3e8 <line:45:16, col:33> 'int'
|           | `-BinaryOperator 0x5637768ed3c0 <line:44:17, line:42:18> 'int' '+'
|           |   |-IntegerLiteral 0x5637768ed298 <line:44:17> 'int' 0
|           |   `-IntegerLiteral 0x5637768ed3a0 <line:42:18> 'int' 6
|           `-IntegerLiteral 0x5637768ed408 <line:40:17> 'int' 8
`-ImplicitCastExpr 0x5637768ed698 <lcode.c:808:48, col:56> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768ed590 <col:48, col:56> 'int' lvalue ->lastline 0x5637768694a8
    `-ImplicitCastExpr 0x5637768ed578 <col:48, col:52> 'struct LexState *' <LValueToRValue>
      `-MemberExpr 0x5637768ed540 <col:48, col:52> 'struct LexState *' lvalue ->ls 0x56377687df60
        `-ImplicitCastExpr 0x5637768ed528 <col:48> 'FuncState *' <LValueToRValue>
          `-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
[B1.8]([B1.10], ([B1.45]), [B1.51])
  53: ReturnStmt 0x5637768ed6b0 <lcode.c:808:3, col:64>
`-CallExpr 0x5637768ed640 <col:10, col:64> 'int'
  |-ImplicitCastExpr 0x5637768ed628 <col:10> 'int (*)(FuncState *, Instruction, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768ecb80 <col:10> 'int (FuncState *, Instruction, int)' Function 0x5637768eb058 'luaK_code' 'int (FuncState *, Instruction, int)'
  |-ImplicitCastExpr 0x5637768ed680 <col:20> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768ecba8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
  |-ParenExpr 0x5637768ed4e0 <./lopcodes.h:104:29, line:107:35> 'unsigned int'
  | `-BinaryOperator 0x5637768ed4b8 <line:104:30, line:107:34> 'unsigned int' '|'
  |   |-BinaryOperator 0x5637768ed188 <line:104:30, line:106:34> 'unsigned int' '|'
  |   | |-BinaryOperator 0x5637768eced8 <line:104:30, line:105:34> 'unsigned int' '|'
  |   | | |-ParenExpr 0x5637768ecd00 <line:104:30, col:59> 'Instruction':'unsigned int'
  |   | | | `-BinaryOperator 0x5637768eccd8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
  |   | | |   |-ParenExpr 0x5637768ecc98 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |   | | |   | `-CStyleCastExpr 0x5637768ecc70 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
  |   | | |   |   `-ImplicitCastExpr 0x5637768ecc58 <col:26, col:30> 'OpCode':'OpCode' <LValueToRValue>
  |   | | |   |     `-ParenExpr 0x5637768ecc38 <col:26, col:30> 'OpCode':'OpCode' lvalue
  |   | | |   |       `-DeclRefExpr 0x5637768ecbd0 <lcode.c:808:35> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ec6f0 'o' 'OpCode':'OpCode'
  |   | | |   `-IntegerLiteral 0x5637768eccb8 <./lopcodes.h:44:17> 'int' 0
  |   | | `-ParenExpr 0x5637768eceb8 <line:105:6, col:34> 'Instruction':'unsigned int'
  |   | |   `-BinaryOperator 0x5637768ece90 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
  |   | |     |-ParenExpr 0x5637768ecde8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |   | |     | `-CStyleCastExpr 0x5637768ecdc0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
  |   | |     |   `-ImplicitCastExpr 0x5637768ecda8 <col:26, col:30> 'int' <LValueToRValue>
  |   | |     |     `-ParenExpr 0x5637768ecd88 <col:26, col:30> 'int' lvalue
  |   | |     |       `-DeclRefExpr 0x5637768ecd20 <lcode.c:808:38> 'int' lvalue ParmVar 0x5637768ec768 'a' 'int'
  |   | |     `-ParenExpr 0x5637768ece70 <./lopcodes.h:45:16, col:33> 'int'
  |   | |       `-BinaryOperator 0x5637768ece48 <line:44:17, line:42:18> 'int' '+'
  |   | |         |-IntegerLiteral 0x5637768ece08 <line:44:17> 'int' 0
  |   | |         `-IntegerLiteral 0x5637768ece28 <line:42:18> 'int' 6
  |   | `-ParenExpr 0x5637768ed168 <line:106:6, col:34> 'Instruction':'unsigned int'
  |   |   `-BinaryOperator 0x5637768ed140 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
  |   |     |-ParenExpr 0x5637768ecfc8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |   |     | `-CStyleCastExpr 0x5637768ecfa0 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
  |   |     |   `-ImplicitCastExpr 0x5637768ecf88 <col:26, col:30> 'int' <LValueToRValue>
  |   |     |     `-ParenExpr 0x5637768ecf68 <col:26, col:30> 'int' lvalue
  |   |     |       `-DeclRefExpr 0x5637768ecf00 <lcode.c:808:41> 'int' lvalue ParmVar 0x5637768ec7e0 'b' 'int'
  |   |     `-ParenExpr 0x5637768ed120 <./lopcodes.h:47:16, col:31> 'int'
  |   |       `-BinaryOperator 0x5637768ed0f8 <line:46:16, line:37:17> 'int' '+'
  |   |         |-ParenExpr 0x5637768ed0b8 <line:46:16, col:31> 'int'
  |   |         | `-BinaryOperator 0x5637768ed090 <line:45:16, line:40:17> 'int' '+'
  |   |         |   |-ParenExpr 0x5637768ed050 <line:45:16, col:33> 'int'
  |   |         |   | `-BinaryOperator 0x5637768ed028 <line:44:17, line:42:18> 'int' '+'
  |   |         |   |   |-IntegerLiteral 0x5637768ecfe8 <line:44:17> 'int' 0
  |   |         |   |   `-IntegerLiteral 0x5637768ed008 <line:42:18> 'int' 6
  |   |         |   `-IntegerLiteral 0x5637768ed070 <line:40:17> 'int' 8
  |   |         `-IntegerLiteral 0x5637768ed0d8 <line:37:17> 'int' 9
  |   `-ParenExpr 0x5637768ed498 <line:107:6, col:34> 'Instruction':'unsigned int'
  |     `-BinaryOperator 0x5637768ed470 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
  |       |-ParenExpr 0x5637768ed278 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
  |       | `-CStyleCastExpr 0x5637768ed250 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
  |       |   `-ImplicitCastExpr 0x5637768ed238 <col:26, col:30> 'int' <LValueToRValue>
  |       |     `-ParenExpr 0x5637768ed218 <col:26, col:30> 'int' lvalue
  |       |       `-DeclRefExpr 0x5637768ed1b0 <lcode.c:808:44> 'int' lvalue ParmVar 0x5637768ec858 'c' 'int'
  |       `-ParenExpr 0x5637768ed450 <./lopcodes.h:46:16, col:31> 'int'
  |         `-BinaryOperator 0x5637768ed428 <line:45:16, line:40:17> 'int' '+'
  |           |-ParenExpr 0x5637768ed3e8 <line:45:16, col:33> 'int'
  |           | `-BinaryOperator 0x5637768ed3c0 <line:44:17, line:42:18> 'int' '+'
  |           |   |-IntegerLiteral 0x5637768ed298 <line:44:17> 'int' 0
  |           |   `-IntegerLiteral 0x5637768ed3a0 <line:42:18> 'int' 6
  |           `-IntegerLiteral 0x5637768ed408 <line:40:17> 'int' 8
  `-ImplicitCastExpr 0x5637768ed698 <lcode.c:808:48, col:56> 'int' <LValueToRValue>
    `-MemberExpr 0x5637768ed590 <col:48, col:56> 'int' lvalue ->lastline 0x5637768694a8
      `-ImplicitCastExpr 0x5637768ed578 <col:48, col:52> 'struct LexState *' <LValueToRValue>
        `-MemberExpr 0x5637768ed540 <col:48, col:52> 'struct LexState *' lvalue ->ls 0x56377687df60
          `-ImplicitCastExpr 0x5637768ed528 <col:48> 'FuncState *' <LValueToRValue>
            `-DeclRefExpr 0x5637768ed500 <col:48> 'FuncState *' lvalue ParmVar 0x5637768ec680 'fs' 'FuncState *'
return [B1.52];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
