static int computesizes(int nums[], int *narray)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x5654000da648 <ltable.c:205:13> 'int' lvalue Var 0x5654000d9b60 'n' 'int'
n
   2: ImplicitCastExpr 0x5654000da670 <ltable.c:205:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da648 <col:13> 'int' lvalue Var 0x5654000d9b60 'n' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5654000da5e8 <ltable.c:205:4> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
narray
   4: ImplicitCastExpr 0x5654000da610 <ltable.c:205:4> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000da5e8 <col:4> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B1.3] (ImplicitCastExpr, LValueToRValue, int *)
   5: UnaryOperator 0x5654000da628 <ltable.c:205:3, col:4> 'int' lvalue prefix '*'
`-ImplicitCastExpr 0x5654000da610 <col:4> 'int *' <LValueToRValue>
  `-DeclRefExpr 0x5654000da5e8 <col:4> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
*[B1.4]
   6: BinaryOperator 0x5654000da688 <ltable.c:205:3, col:13> 'int' '='
|-UnaryOperator 0x5654000da628 <col:3, col:4> 'int' lvalue prefix '*'
| `-ImplicitCastExpr 0x5654000da610 <col:4> 'int *' <LValueToRValue>
|   `-DeclRefExpr 0x5654000da5e8 <col:4> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
`-ImplicitCastExpr 0x5654000da670 <col:13> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000da648 <col:13> 'int' lvalue Var 0x5654000d9b60 'n' 'int'
[B1.5] = [B1.2]
   7: IntegerLiteral 0x5654000da6b0 <./llimits.h:62:31> 'int' 0
0
   8: CStyleCastExpr 0x5654000da6e0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5654000da6b0 <col:31> 'int' 0
(void)[B1.7] (CStyleCastExpr, ToVoid, void)
   9: DeclRefExpr 0x5654000da728 <ltable.c:207:10> 'int' lvalue Var 0x5654000d9ab0 'na' 'int'
na
  10: ImplicitCastExpr 0x5654000da750 <ltable.c:207:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da728 <col:10> 'int' lvalue Var 0x5654000d9ab0 'na' 'int'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: ReturnStmt 0x5654000da768 <ltable.c:207:3, col:10>
`-ImplicitCastExpr 0x5654000da750 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000da728 <col:10> 'int' lvalue Var 0x5654000d9ab0 'na' 'int'
return [B1.10];
   Preds (2): B3 B8
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5654000d9e28 <ltable.c:195:47> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
i
   2: UnaryOperator 0x5654000d9e50 <ltable.c:195:47, col:48> 'int' postfix '++'
`-DeclRefExpr 0x5654000d9e28 <col:47> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B2.1]++
   3: DeclRefExpr 0x5654000d9e70 <ltable.c:195:52> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
twotoi
   4: IntegerLiteral 0x5654000d9e98 <ltable.c:195:62> 'int' 2
2
   5: CompoundAssignOperator 0x5654000d9eb8 <ltable.c:195:52, col:62> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x5654000d9e70 <col:52> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
`-IntegerLiteral 0x5654000d9e98 <col:62> 'int' 2
[B2.3] *= [B2.4]
   6: BinaryOperator 0x5654000d9ef0 <ltable.c:195:47, col:62> 'int' ','
|-UnaryOperator 0x5654000d9e50 <col:47, col:48> 'int' postfix '++'
| `-DeclRefExpr 0x5654000d9e28 <col:47> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
`-CompoundAssignOperator 0x5654000d9eb8 <col:52, col:62> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |-DeclRefExpr 0x5654000d9e70 <col:52> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
  `-IntegerLiteral 0x5654000d9e98 <col:62> 'int' 2
... , [B2.5]
   Preds (1): B4
   Succs (1): B8

 [B3]
   T: break;
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x5654000da470 <ltable.c:203:9> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
a
   2: ImplicitCastExpr 0x5654000da4f8 <ltable.c:203:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da470 <col:9> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
[B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5654000da498 <ltable.c:203:15> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
narray
   4: ImplicitCastExpr 0x5654000da4c0 <ltable.c:203:15> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000da498 <col:15> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B4.3] (ImplicitCastExpr, LValueToRValue, int *)
   5: UnaryOperator 0x5654000da4d8 <ltable.c:203:14, col:15> 'int' lvalue prefix '*'
`-ImplicitCastExpr 0x5654000da4c0 <col:15> 'int *' <LValueToRValue>
  `-DeclRefExpr 0x5654000da498 <col:15> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
*[B4.4]
   6: ImplicitCastExpr 0x5654000da510 <ltable.c:203:14, col:15> 'int' <LValueToRValue>
`-UnaryOperator 0x5654000da4d8 <col:14, col:15> 'int' lvalue prefix '*'
  `-ImplicitCastExpr 0x5654000da4c0 <col:15> 'int *' <LValueToRValue>
    `-DeclRefExpr 0x5654000da498 <col:15> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x5654000da528 <ltable.c:203:9, col:15> 'int' '=='
|-ImplicitCastExpr 0x5654000da4f8 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000da470 <col:9> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
`-ImplicitCastExpr 0x5654000da510 <col:14, col:15> 'int' <LValueToRValue>
  `-UnaryOperator 0x5654000da4d8 <col:14, col:15> 'int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5654000da4c0 <col:15> 'int *' <LValueToRValue>
      `-DeclRefExpr 0x5654000da498 <col:15> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B4.2] == [B4.6]
   T: if [B4.7]
   Preds (3): B5 B6 B7
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x5654000da2c8 <ltable.c:199:13> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
twotoi
   2: ImplicitCastExpr 0x5654000da2f0 <ltable.c:199:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da2c8 <col:13> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5654000da2a0 <ltable.c:199:9> 'int' lvalue Var 0x5654000d9b60 'n' 'int'
n
   4: BinaryOperator 0x5654000da308 <ltable.c:199:9, col:13> 'int' '='
|-DeclRefExpr 0x5654000da2a0 <col:9> 'int' lvalue Var 0x5654000d9b60 'n' 'int'
`-ImplicitCastExpr 0x5654000da2f0 <col:13> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000da2c8 <col:13> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
[B5.3] = [B5.2]
   5: DeclRefExpr 0x5654000da358 <ltable.c:200:14> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
a
   6: ImplicitCastExpr 0x5654000da380 <ltable.c:200:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da358 <col:14> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
[B5.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x5654000da330 <ltable.c:200:9> 'int' lvalue Var 0x5654000d9ab0 'na' 'int'
na
   8: BinaryOperator 0x5654000da398 <ltable.c:200:9, col:14> 'int' '='
|-DeclRefExpr 0x5654000da330 <col:9> 'int' lvalue Var 0x5654000d9ab0 'na' 'int'
`-ImplicitCastExpr 0x5654000da380 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000da358 <col:14> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
[B5.7] = [B5.6]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x5654000da090 <ltable.c:197:7> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
a
   2: DeclRefExpr 0x5654000da0b8 <ltable.c:197:12> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
nums
   3: ImplicitCastExpr 0x5654000da108 <ltable.c:197:12> 'int *':'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000da0b8 <col:12> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
[B6.2] (ImplicitCastExpr, LValueToRValue, int *)
   4: DeclRefExpr 0x5654000da0e0 <ltable.c:197:17> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
i
   5: ImplicitCastExpr 0x5654000da120 <ltable.c:197:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da0e0 <col:17> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B6.4] (ImplicitCastExpr, LValueToRValue, int)
   6: ArraySubscriptExpr 0x5654000da138 <ltable.c:197:12, col:18> 'int' lvalue
|-ImplicitCastExpr 0x5654000da108 <col:12> 'int *':'int *' <LValueToRValue>
| `-DeclRefExpr 0x5654000da0b8 <col:12> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
`-ImplicitCastExpr 0x5654000da120 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000da0e0 <col:17> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B6.3][[B6.5]]
   7: ImplicitCastExpr 0x5654000da160 <ltable.c:197:12, col:18> 'int' <LValueToRValue>
`-ArraySubscriptExpr 0x5654000da138 <col:12, col:18> 'int' lvalue
  |-ImplicitCastExpr 0x5654000da108 <col:12> 'int *':'int *' <LValueToRValue>
  | `-DeclRefExpr 0x5654000da0b8 <col:12> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
  `-ImplicitCastExpr 0x5654000da120 <col:17> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5654000da0e0 <col:17> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B6.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CompoundAssignOperator 0x5654000da178 <ltable.c:197:7, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x5654000da090 <col:7> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
`-ImplicitCastExpr 0x5654000da160 <col:12, col:18> 'int' <LValueToRValue>
  `-ArraySubscriptExpr 0x5654000da138 <col:12, col:18> 'int' lvalue
    |-ImplicitCastExpr 0x5654000da108 <col:12> 'int *':'int *' <LValueToRValue>
    | `-DeclRefExpr 0x5654000da0b8 <col:12> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
    `-ImplicitCastExpr 0x5654000da120 <col:17> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5654000da0e0 <col:17> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B6.1] += [B6.7]
   9: DeclRefExpr 0x5654000da1b0 <ltable.c:198:11> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
a
  10: ImplicitCastExpr 0x5654000da260 <ltable.c:198:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da1b0 <col:11> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
[B6.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x5654000da1d8 <ltable.c:198:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
twotoi
  12: ImplicitCastExpr 0x5654000da220 <ltable.c:198:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000da1d8 <col:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
[B6.11] (ImplicitCastExpr, LValueToRValue, int)
  13: IntegerLiteral 0x5654000da200 <ltable.c:198:22> 'int' 2
2
  14: BinaryOperator 0x5654000da238 <ltable.c:198:15, col:22> 'int' '/'
|-ImplicitCastExpr 0x5654000da220 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000da1d8 <col:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
`-IntegerLiteral 0x5654000da200 <col:22> 'int' 2
[B6.12] / [B6.13]
  15: BinaryOperator 0x5654000da278 <ltable.c:198:11, col:22> 'int' '>'
|-ImplicitCastExpr 0x5654000da260 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000da1b0 <col:11> 'int' lvalue Var 0x5654000d9a00 'a' 'int'
`-BinaryOperator 0x5654000da238 <col:15, col:22> 'int' '/'
  |-ImplicitCastExpr 0x5654000da220 <col:15> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5654000da1d8 <col:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
  `-IntegerLiteral 0x5654000da200 <col:22> 'int' 2
[B6.10] > [B6.14]
   T: if [B6.15]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclRefExpr 0x5654000d9f18 <ltable.c:196:9> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
nums
   2: ImplicitCastExpr 0x5654000d9fd8 <ltable.c:196:9> 'int *':'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000d9f18 <col:9> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
[B7.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: DeclRefExpr 0x5654000d9fb0 <ltable.c:196:14> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
i
   4: ImplicitCastExpr 0x5654000d9ff0 <ltable.c:196:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000d9fb0 <col:14> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x5654000da008 <ltable.c:196:9, col:15> 'int' lvalue
|-ImplicitCastExpr 0x5654000d9fd8 <col:9> 'int *':'int *' <LValueToRValue>
| `-DeclRefExpr 0x5654000d9f18 <col:9> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
`-ImplicitCastExpr 0x5654000d9ff0 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5654000d9fb0 <col:14> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B7.2][[B7.4]]
   6: ImplicitCastExpr 0x5654000da050 <ltable.c:196:9, col:15> 'int' <LValueToRValue>
`-ArraySubscriptExpr 0x5654000da008 <col:9, col:15> 'int' lvalue
  |-ImplicitCastExpr 0x5654000d9fd8 <col:9> 'int *':'int *' <LValueToRValue>
  | `-DeclRefExpr 0x5654000d9f18 <col:9> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
  `-ImplicitCastExpr 0x5654000d9ff0 <col:14> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5654000d9fb0 <col:14> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
[B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5654000da030 <ltable.c:196:19> 'int' 0
0
   8: BinaryOperator 0x5654000da068 <ltable.c:196:9, col:19> 'int' '>'
|-ImplicitCastExpr 0x5654000da050 <col:9, col:15> 'int' <LValueToRValue>
| `-ArraySubscriptExpr 0x5654000da008 <col:9, col:15> 'int' lvalue
|   |-ImplicitCastExpr 0x5654000d9fd8 <col:9> 'int *':'int *' <LValueToRValue>
|   | `-DeclRefExpr 0x5654000d9f18 <col:9> 'int *':'int *' lvalue ParmVar 0x5654000d9680 'nums' 'int *':'int *'
|   `-ImplicitCastExpr 0x5654000d9ff0 <col:14> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x5654000d9fb0 <col:14> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
`-IntegerLiteral 0x5654000da030 <col:19> 'int' 0
[B7.6] > [B7.7]
   T: if [B7.8]
   Preds (1): B8
   Succs (2): B6 B4

 [B8]
   1: DeclRefExpr 0x5654000d9d00 <ltable.c:195:27> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
twotoi
   2: ImplicitCastExpr 0x5654000d9d48 <ltable.c:195:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x5654000d9d00 <col:27> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
[B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5654000d9d28 <ltable.c:195:34> 'int' 2
2
   4: BinaryOperator 0x5654000d9d60 <ltable.c:195:27, col:34> 'int' '/'
|-ImplicitCastExpr 0x5654000d9d48 <col:27> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5654000d9d00 <col:27> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
`-IntegerLiteral 0x5654000d9d28 <col:34> 'int' 2
[B8.2] / [B8.3]
   5: DeclRefExpr 0x5654000d9d88 <ltable.c:195:39> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
narray
   6: ImplicitCastExpr 0x5654000d9db0 <ltable.c:195:39> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5654000d9d88 <col:39> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B8.5] (ImplicitCastExpr, LValueToRValue, int *)
   7: UnaryOperator 0x5654000d9dc8 <ltable.c:195:38, col:39> 'int' lvalue prefix '*'
`-ImplicitCastExpr 0x5654000d9db0 <col:39> 'int *' <LValueToRValue>
  `-DeclRefExpr 0x5654000d9d88 <col:39> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
*[B8.6]
   8: ImplicitCastExpr 0x5654000d9de8 <ltable.c:195:38, col:39> 'int' <LValueToRValue>
`-UnaryOperator 0x5654000d9dc8 <col:38, col:39> 'int' lvalue prefix '*'
  `-ImplicitCastExpr 0x5654000d9db0 <col:39> 'int *' <LValueToRValue>
    `-DeclRefExpr 0x5654000d9d88 <col:39> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B8.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x5654000d9e00 <ltable.c:195:27, col:39> 'int' '<'
|-BinaryOperator 0x5654000d9d60 <col:27, col:34> 'int' '/'
| |-ImplicitCastExpr 0x5654000d9d48 <col:27> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x5654000d9d00 <col:27> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
| `-IntegerLiteral 0x5654000d9d28 <col:34> 'int' 2
`-ImplicitCastExpr 0x5654000d9de8 <col:38, col:39> 'int' <LValueToRValue>
  `-UnaryOperator 0x5654000d9dc8 <col:38, col:39> 'int' lvalue prefix '*'
    `-ImplicitCastExpr 0x5654000d9db0 <col:39> 'int *' <LValueToRValue>
      `-DeclRefExpr 0x5654000d9d88 <col:39> 'int *' lvalue ParmVar 0x5654000d96f8 'narray' 'int *'
[B8.4] < [B8.8]
   T: for (...; [B8.9]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B1

 [B9]
   1: DeclStmt 0x5654000d9940 <ltable.c:190:3, col:8>col:7
`-VarDecl 0x5654000d98e0 <col:3, col:7> col:7 used i 'int'
int i;
   2: DeclStmt 0x5654000d99d0 <ltable.c:191:3, col:13>col:7
`-VarDecl 0x5654000d9970 <col:3, col:7> col:7 used twotoi 'int'
int twotoi;
   3: IntegerLiteral 0x5654000d9a60 <ltable.c:192:11> 'int' 0
0
   4: DeclStmt 0x5654000d9a80 <ltable.c:192:3, col:12>col:7
`-VarDecl 0x5654000d9a00 <col:3, col:11> col:7 used a 'int' cinit
  `-IntegerLiteral 0x5654000d9a60 <col:11> 'int' 0
int a = 0;
   5: IntegerLiteral 0x5654000d9b10 <ltable.c:193:12> 'int' 0
0
   6: DeclStmt 0x5654000d9b30 <ltable.c:193:3, col:13>col:7
`-VarDecl 0x5654000d9ab0 <col:3, col:12> col:7 used na 'int' cinit
  `-IntegerLiteral 0x5654000d9b10 <col:12> 'int' 0
int na = 0;
   7: IntegerLiteral 0x5654000d9bc0 <ltable.c:194:11> 'int' 0
0
   8: DeclStmt 0x5654000d9be0 <ltable.c:194:3, col:12>col:7
`-VarDecl 0x5654000d9b60 <col:3, col:11> col:7 used n 'int' cinit
  `-IntegerLiteral 0x5654000d9bc0 <col:11> 'int' 0
int n = 0;
   9: IntegerLiteral 0x5654000d9c20 <ltable.c:195:12> 'int' 0
0
  10: DeclRefExpr 0x5654000d9bf8 <ltable.c:195:8> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
i
  11: BinaryOperator 0x5654000d9c40 <ltable.c:195:8, col:12> 'int' '='
|-DeclRefExpr 0x5654000d9bf8 <col:8> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
`-IntegerLiteral 0x5654000d9c20 <col:12> 'int' 0
[B9.10] = [B9.9]
  12: IntegerLiteral 0x5654000d9c90 <ltable.c:195:24> 'int' 1
1
  13: DeclRefExpr 0x5654000d9c68 <ltable.c:195:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
twotoi
  14: BinaryOperator 0x5654000d9cb0 <ltable.c:195:15, col:24> 'int' '='
|-DeclRefExpr 0x5654000d9c68 <col:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
`-IntegerLiteral 0x5654000d9c90 <col:24> 'int' 1
[B9.13] = [B9.12]
  15: BinaryOperator 0x5654000d9cd8 <ltable.c:195:8, col:24> 'int' ','
|-BinaryOperator 0x5654000d9c40 <col:8, col:12> 'int' '='
| |-DeclRefExpr 0x5654000d9bf8 <col:8> 'int' lvalue Var 0x5654000d98e0 'i' 'int'
| `-IntegerLiteral 0x5654000d9c20 <col:12> 'int' 0
`-BinaryOperator 0x5654000d9cb0 <col:15, col:24> 'int' '='
  |-DeclRefExpr 0x5654000d9c68 <col:15> 'int' lvalue Var 0x5654000d9970 'twotoi' 'int'
  `-IntegerLiteral 0x5654000d9c90 <col:24> 'int' 1
... , [B9.14]
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (1): B1
