static void funcargs(LexState *ls, expdesc *f)
 [B18 (ENTRY)]
   Succs (1): B8

 [B1]
   1: DeclRefExpr 0x558fa8f210e8 <lparser.c:651:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
   2: ImplicitCastExpr 0x558fa8f21358 <lparser.c:651:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f210e8 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
   3: DeclRefExpr 0x558fa8f21110 <lparser.c:651:12> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
f
   4: ImplicitCastExpr 0x558fa8f213b0 <lparser.c:651:12> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21110 <col:12> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B1.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: DeclRefExpr 0x558fa8f21138 <lparser.c:651:15> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
VCALL
   6: ImplicitCastExpr 0x558fa8f213c8 <lparser.c:651:15> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f21138 <col:15> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B1.5] (ImplicitCastExpr, IntegralCast, expkind)
   7: DeclRefExpr 0x558fa8f21160 <lparser.c:651:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   8: ImplicitCastExpr 0x558fa8f212a8 <lparser.c:651:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f21160 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   9: DeclRefExpr 0x558fa8f21188 <lparser.c:651:35> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x558fa8f21310 <lparser.c:651:35> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21188 <col:35> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: DeclRefExpr 0x558fa8f211b0 <lparser.c:651:39> 'int' EnumConstant 0x558fa8eafb00 'OP_CALL' 'int'
OP_CALL
  12: ImplicitCastExpr 0x558fa8f21328 <lparser.c:651:39> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f211b0 <col:39> 'int' EnumConstant 0x558fa8eafb00 'OP_CALL' 'int'
[B1.11] (ImplicitCastExpr, IntegralCast, OpCode)
  13: DeclRefExpr 0x558fa8f211d8 <lparser.c:651:48> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
base
  14: ImplicitCastExpr 0x558fa8f21340 <lparser.c:651:48> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f211d8 <col:48> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
[B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: DeclRefExpr 0x558fa8f21200 <lparser.c:651:54> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
nparams
  16: ImplicitCastExpr 0x558fa8f21248 <lparser.c:651:54> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21200 <col:54> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
[B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: IntegerLiteral 0x558fa8f21228 <lparser.c:651:62> 'int' 1
1
  18: BinaryOperator 0x558fa8f21260 <lparser.c:651:54, col:62> 'int' '+'
|-ImplicitCastExpr 0x558fa8f21248 <col:54> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21200 <col:54> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
`-IntegerLiteral 0x558fa8f21228 <col:62> 'int' 1
[B1.16] + [B1.17]
  19: IntegerLiteral 0x558fa8f21288 <lparser.c:651:65> 'int' 2
2
  20: CallExpr 0x558fa8f212c0 <lparser.c:651:22, col:66> 'int'
|-ImplicitCastExpr 0x558fa8f212a8 <col:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f21160 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x558fa8f21310 <col:35> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21188 <col:35> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f21328 <col:39> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f211b0 <col:39> 'int' EnumConstant 0x558fa8eafb00 'OP_CALL' 'int'
|-ImplicitCastExpr 0x558fa8f21340 <col:48> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f211d8 <col:48> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
|-BinaryOperator 0x558fa8f21260 <col:54, col:62> 'int' '+'
| |-ImplicitCastExpr 0x558fa8f21248 <col:54> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f21200 <col:54> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
| `-IntegerLiteral 0x558fa8f21228 <col:62> 'int' 1
`-IntegerLiteral 0x558fa8f21288 <col:65> 'int' 2
[B1.8]([B1.10], [B1.12], [B1.14], [B1.18], [B1.19])
  21: CallExpr 0x558fa8f21370 <lparser.c:651:3, col:67> 'void'
|-ImplicitCastExpr 0x558fa8f21358 <col:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f210e8 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-ImplicitCastExpr 0x558fa8f213b0 <col:12> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21110 <col:12> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
|-ImplicitCastExpr 0x558fa8f213c8 <col:15> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8f21138 <col:15> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
`-CallExpr 0x558fa8f212c0 <col:22, col:66> 'int'
  |-ImplicitCastExpr 0x558fa8f212a8 <col:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f21160 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x558fa8f21310 <col:35> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f21188 <col:35> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x558fa8f21328 <col:39> 'OpCode':'OpCode' <IntegralCast>
  | `-DeclRefExpr 0x558fa8f211b0 <col:39> 'int' EnumConstant 0x558fa8eafb00 'OP_CALL' 'int'
  |-ImplicitCastExpr 0x558fa8f21340 <col:48> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f211d8 <col:48> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
  |-BinaryOperator 0x558fa8f21260 <col:54, col:62> 'int' '+'
  | |-ImplicitCastExpr 0x558fa8f21248 <col:54> 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8f21200 <col:54> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
  | `-IntegerLiteral 0x558fa8f21228 <col:62> 'int' 1
  `-IntegerLiteral 0x558fa8f21288 <col:65> 'int' 2
[B1.2]([B1.4], [B1.6], [B1.20])
  22: DeclRefExpr 0x558fa8f213e0 <lparser.c:652:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
luaK_fixline
  23: ImplicitCastExpr 0x558fa8f21458 <lparser.c:652:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f213e0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
[B1.22] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  24: DeclRefExpr 0x558fa8f21408 <lparser.c:652:16> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
fs
  25: ImplicitCastExpr 0x558fa8f214a8 <lparser.c:652:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21408 <col:16> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B1.24] (ImplicitCastExpr, LValueToRValue, FuncState *)
  26: DeclRefExpr 0x558fa8f21430 <lparser.c:652:20> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
line
  27: ImplicitCastExpr 0x558fa8f214c0 <lparser.c:652:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21430 <col:20> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
[B1.26] (ImplicitCastExpr, LValueToRValue, int)
  28: CallExpr 0x558fa8f21470 <lparser.c:652:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f21458 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f213e0 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f214a8 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21408 <col:16> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f214c0 <col:20> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21430 <col:20> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
[B1.23]([B1.25], [B1.27])
  29: DeclRefExpr 0x558fa8f21578 <lparser.c:653:17> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
base
  30: ImplicitCastExpr 0x558fa8f215c0 <lparser.c:653:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21578 <col:17> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
[B1.29] (ImplicitCastExpr, LValueToRValue, int)
  31: IntegerLiteral 0x558fa8f215a0 <lparser.c:653:22> 'int' 1
1
  32: BinaryOperator 0x558fa8f215d8 <lparser.c:653:17, col:22> 'int' '+'
|-ImplicitCastExpr 0x558fa8f215c0 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f21578 <col:17> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
`-IntegerLiteral 0x558fa8f215a0 <col:22> 'int' 1
[B1.30] + [B1.31]
  33: DeclRefExpr 0x558fa8f21500 <lparser.c:653:3> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
fs
  34: ImplicitCastExpr 0x558fa8f21528 <lparser.c:653:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f21500 <col:3> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B1.33] (ImplicitCastExpr, LValueToRValue, FuncState *)
  35: MemberExpr 0x558fa8f21540 <lparser.c:653:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f21528 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f21500 <col:3> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B1.34]->freereg
  36: BinaryOperator 0x558fa8f21600 <lparser.c:653:3, col:22> 'int' '='
|-MemberExpr 0x558fa8f21540 <col:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
| `-ImplicitCastExpr 0x558fa8f21528 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f21500 <col:3> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
`-BinaryOperator 0x558fa8f215d8 <col:17, col:22> 'int' '+'
  |-ImplicitCastExpr 0x558fa8f215c0 <col:17> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f21578 <col:17> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
  `-IntegerLiteral 0x558fa8f215a0 <col:22> 'int' 1
[B1.35] = [B1.32]
   Preds (2): B2 B5
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f20f08 <lparser.c:649:15> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8f20f30 <lparser.c:649:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20f08 <col:15> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x558fa8f20f48 <lparser.c:649:15, col:19> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f20f30 <col:15> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f20f08 <col:15> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B2.2]->freereg
   4: ImplicitCastExpr 0x558fa8f21028 <lparser.c:649:15, col:19> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f20f48 <col:15, col:19> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f20f30 <col:15> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f20f08 <col:15> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x558fa8f20f80 <lparser.c:649:30> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
base
   6: ImplicitCastExpr 0x558fa8f20fc8 <lparser.c:649:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20f80 <col:30> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
[B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x558fa8f20fa8 <lparser.c:649:35> 'int' 1
1
   8: BinaryOperator 0x558fa8f20fe0 <lparser.c:649:30, col:35> 'int' '+'
|-ImplicitCastExpr 0x558fa8f20fc8 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f20f80 <col:30> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
`-IntegerLiteral 0x558fa8f20fa8 <col:35> 'int' 1
[B2.6] + [B2.7]
   9: BinaryOperator 0x558fa8f21040 <lparser.c:649:15, col:36> 'int' '-'
|-ImplicitCastExpr 0x558fa8f21028 <col:15, col:19> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f20f48 <col:15, col:19> 'int' lvalue ->freereg 0x558fa8eb42f0
|   `-ImplicitCastExpr 0x558fa8f20f30 <col:15> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f20f08 <col:15> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
`-ParenExpr 0x558fa8f21008 <col:29, col:36> 'int'
  `-BinaryOperator 0x558fa8f20fe0 <col:30, col:35> 'int' '+'
    |-ImplicitCastExpr 0x558fa8f20fc8 <col:30> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8f20f80 <col:30> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
    `-IntegerLiteral 0x558fa8f20fa8 <col:35> 'int' 1
[B2.4] - ([B2.8])
  10: DeclRefExpr 0x558fa8f20ee0 <lparser.c:649:5> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
nparams
  11: BinaryOperator 0x558fa8f21068 <lparser.c:649:5, col:36> 'int' '='
|-DeclRefExpr 0x558fa8f20ee0 <col:5> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
`-BinaryOperator 0x558fa8f21040 <col:15, col:36> 'int' '-'
  |-ImplicitCastExpr 0x558fa8f21028 <col:15, col:19> 'int' <LValueToRValue>
  | `-MemberExpr 0x558fa8f20f48 <col:15, col:19> 'int' lvalue ->freereg 0x558fa8eb42f0
  |   `-ImplicitCastExpr 0x558fa8f20f30 <col:15> 'FuncState *' <LValueToRValue>
  |     `-DeclRefExpr 0x558fa8f20f08 <col:15> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
  `-ParenExpr 0x558fa8f21008 <col:29, col:36> 'int'
    `-BinaryOperator 0x558fa8f20fe0 <col:30, col:35> 'int' '+'
      |-ImplicitCastExpr 0x558fa8f20fc8 <col:30> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x558fa8f20f80 <col:30> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
      `-IntegerLiteral 0x558fa8f20fa8 <col:35> 'int' 1
[B2.10] = [B2.9]
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f20da8 <lparser.c:648:7> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
luaK_exp2nextreg
   2: ImplicitCastExpr 0x558fa8f20e40 <lparser.c:648:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f20da8 <col:7> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x558fa8f20dd0 <lparser.c:648:24> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f20e90 <lparser.c:648:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20dd0 <col:24> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f20df8 <lparser.c:648:29> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   6: UnaryOperator 0x558fa8f20e20 <lparser.c:648:28, col:29> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f20df8 <col:29> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
&[B3.5]
   7: CallExpr 0x558fa8f20e58 <lparser.c:648:7, col:33> 'void'
|-ImplicitCastExpr 0x558fa8f20e40 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f20da8 <col:7> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f20e90 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f20dd0 <col:24> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f20e20 <col:28, col:29> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f20df8 <col:29> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B3.2]([B3.4], [B3.6])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x558fa8f20cb0 <lparser.c:647:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   2: MemberExpr 0x558fa8f20cd8 <lparser.c:647:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f20cb0 <col:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B4.1].k
   3: ImplicitCastExpr 0x558fa8f20d38 <lparser.c:647:9, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f20cd8 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-DeclRefExpr 0x558fa8f20cb0 <col:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B4.2] (ImplicitCastExpr, LValueToRValue, expkind)
   4: ImplicitCastExpr 0x558fa8f20d50 <lparser.c:647:9, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f20d38 <col:9, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f20cd8 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f20cb0 <col:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B4.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: DeclRefExpr 0x558fa8f20d10 <lparser.c:647:19> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
VVOID
   6: ImplicitCastExpr 0x558fa8f20d68 <lparser.c:647:19> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f20d10 <col:19> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
[B4.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: BinaryOperator 0x558fa8f20d80 <lparser.c:647:9, col:19> 'int' '!='
|-ImplicitCastExpr 0x558fa8f20d50 <col:9, col:14> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f20d38 <col:9, col:14> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x558fa8f20cd8 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|     `-DeclRefExpr 0x558fa8f20cb0 <col:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f20d68 <col:19> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f20d10 <col:19> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
[B4.4] != [B4.6]
   T: if [B4.7]
   Preds (1): B6
   Succs (2): B3 B2

 [B5]
   1: IntegerLiteral 0x558fa8f20c28 <./lua.h:30:23> 'int' 1
1
   2: UnaryOperator 0x558fa8f20c48 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f20c28 <col:23> 'int' 1
-[B5.1]
   3: DeclRefExpr 0x558fa8f20c00 <lparser.c:645:5> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
nparams
   4: BinaryOperator 0x558fa8f20c88 <lparser.c:645:5, ./lua.h:30:24> 'int' '='
|-DeclRefExpr 0x558fa8f20c00 <lparser.c:645:5> 'int' lvalue Var 0x558fa8f1f3f8 'nparams' 'int'
`-ParenExpr 0x558fa8f20c68 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x558fa8f20c48 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8f20c28 <col:23> 'int' 1
[B5.3] = ([B5.2])
   Preds (2): B6 B7
   Succs (1): B1

 [B6]
   1: DeclRefExpr 0x558fa8f20aa0 <lparser.c:644:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   2: MemberExpr 0x558fa8f20ac8 <lparser.c:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f20aa0 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B6.1].k
   3: ImplicitCastExpr 0x558fa8f20b48 <lparser.c:30:41, col:43> 'expkind':'expkind' <LValueToRValue>
`-ParenExpr 0x558fa8f20b00 <col:41, col:43> 'expkind':'expkind' lvalue
  `-MemberExpr 0x558fa8f20ac8 <line:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f20aa0 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
([B6.2]) (ImplicitCastExpr, LValueToRValue, expkind)
   4: ImplicitCastExpr 0x558fa8f20b60 <lparser.c:30:41, col:43> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f20b48 <col:41, col:43> 'expkind':'expkind' <LValueToRValue>
  `-ParenExpr 0x558fa8f20b00 <col:41, col:43> 'expkind':'expkind' lvalue
    `-MemberExpr 0x558fa8f20ac8 <line:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
      `-DeclRefExpr 0x558fa8f20aa0 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B6.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: DeclRefExpr 0x558fa8f20b20 <lparser.c:30:48> 'int' EnumConstant 0x558fa8eb0c80 'VVARARG' 'int'
VVARARG
   6: ImplicitCastExpr 0x558fa8f20b78 <lparser.c:30:48> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f20b20 <col:48> 'int' EnumConstant 0x558fa8eb0c80 'VVARARG' 'int'
[B6.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: BinaryOperator 0x558fa8f20b90 <lparser.c:30:41, col:48> 'int' '=='
|-ImplicitCastExpr 0x558fa8f20b60 <col:41, col:43> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f20b48 <col:41, col:43> 'expkind':'expkind' <LValueToRValue>
|   `-ParenExpr 0x558fa8f20b00 <col:41, col:43> 'expkind':'expkind' lvalue
|     `-MemberExpr 0x558fa8f20ac8 <line:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|       `-DeclRefExpr 0x558fa8f20aa0 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f20b78 <line:30:48> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f20b20 <col:48> 'int' EnumConstant 0x558fa8eb0c80 'VVARARG' 'int'
[B6.4] == [B6.6]
   T: if ([B7.17] || [B6.7])
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: IntegerLiteral 0x558fa8f207c0 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x558fa8f207f0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f207c0 <col:31> 'int' 0
(void)[B7.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x558fa8f20860 <lparser.c:643:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
f
   4: ImplicitCastExpr 0x558fa8f20888 <lparser.c:643:10> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20860 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B7.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x558fa8f208a0 <lparser.c:643:10, col:13> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ImplicitCastExpr 0x558fa8f20888 <col:10> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f20860 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B7.4]->u
   6: MemberExpr 0x558fa8f208d8 <lparser.c:643:10, col:15> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8f208a0 <col:10, col:13> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ImplicitCastExpr 0x558fa8f20888 <col:10> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f20860 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B7.5].s
   7: MemberExpr 0x558fa8f20910 <lparser.c:643:10, col:17> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8f208d8 <col:10, col:15> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8f208a0 <col:10, col:13> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ImplicitCastExpr 0x558fa8f20888 <col:10> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f20860 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B7.6].info
   8: ImplicitCastExpr 0x558fa8f20948 <lparser.c:643:10, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f20910 <col:10, col:17> 'int' lvalue .info 0x558fa8eb1028
  `-MemberExpr 0x558fa8f208d8 <col:10, col:15> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    `-MemberExpr 0x558fa8f208a0 <col:10, col:13> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
      `-ImplicitCastExpr 0x558fa8f20888 <col:10> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f20860 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B7.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x558fa8f20838 <lparser.c:643:3> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
base
  10: BinaryOperator 0x558fa8f20960 <lparser.c:643:3, col:17> 'int' '='
|-DeclRefExpr 0x558fa8f20838 <col:3> 'int' lvalue Var 0x558fa8f1f380 'base' 'int'
`-ImplicitCastExpr 0x558fa8f20948 <col:10, col:17> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f20910 <col:10, col:17> 'int' lvalue .info 0x558fa8eb1028
    `-MemberExpr 0x558fa8f208d8 <col:10, col:15> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
      `-MemberExpr 0x558fa8f208a0 <col:10, col:13> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
        `-ImplicitCastExpr 0x558fa8f20888 <col:10> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f20860 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f1f088 'f' 'expdesc *'
[B7.9] = [B7.8]
  11: DeclRefExpr 0x558fa8f20988 <lparser.c:644:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
  12: MemberExpr 0x558fa8f209b0 <lparser.c:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f20988 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B7.11].k
  13: ImplicitCastExpr 0x558fa8f20a30 <lparser.c:30:25, col:27> 'expkind':'expkind' <LValueToRValue>
`-ParenExpr 0x558fa8f209e8 <col:25, col:27> 'expkind':'expkind' lvalue
  `-MemberExpr 0x558fa8f209b0 <line:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f20988 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
([B7.12]) (ImplicitCastExpr, LValueToRValue, expkind)
  14: ImplicitCastExpr 0x558fa8f20a48 <lparser.c:30:25, col:27> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f20a30 <col:25, col:27> 'expkind':'expkind' <LValueToRValue>
  `-ParenExpr 0x558fa8f209e8 <col:25, col:27> 'expkind':'expkind' lvalue
    `-MemberExpr 0x558fa8f209b0 <line:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
      `-DeclRefExpr 0x558fa8f20988 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B7.13] (ImplicitCastExpr, IntegralCast, unsigned int)
  15: DeclRefExpr 0x558fa8f20a08 <lparser.c:30:32> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
VCALL
  16: ImplicitCastExpr 0x558fa8f20a60 <lparser.c:30:32> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f20a08 <col:32> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B7.15] (ImplicitCastExpr, IntegralCast, unsigned int)
  17: BinaryOperator 0x558fa8f20a78 <lparser.c:30:25, col:32> 'int' '=='
|-ImplicitCastExpr 0x558fa8f20a48 <col:25, col:27> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f20a30 <col:25, col:27> 'expkind':'expkind' <LValueToRValue>
|   `-ParenExpr 0x558fa8f209e8 <col:25, col:27> 'expkind':'expkind' lvalue
|     `-MemberExpr 0x558fa8f209b0 <line:644:18, col:23> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|       `-DeclRefExpr 0x558fa8f20988 <col:18> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f20a60 <line:30:32> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f20a08 <col:32> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B7.14] == [B7.16]
   T: [B7.17] || ...
   Preds (3): B10 B11 B12
   Succs (2): B5 B6

 [B8]
   1: DeclRefExpr 0x558fa8f1f238 <lparser.c:610:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f1f260 <lparser.c:610:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1f238 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f1f278 <lparser.c:610:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f1f260 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1f238 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.2]->fs
   4: ImplicitCastExpr 0x558fa8f1f2b0 <lparser.c:610:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f1f278 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f1f260 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1f238 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f1f2c8 <lparser.c:610:3, col:25>col:14
`-VarDecl 0x558fa8f1f1d8 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f1f2b0 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f1f278 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f1f260 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1f238 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f1f350 <lparser.c:611:3, col:15>col:11
`-VarDecl 0x558fa8f1f2f0 <col:3, col:11> col:11 used args 'expdesc':'struct expdesc'
expdesc args;
   7: DeclStmt 0x558fa8f49d68 <lparser.c:612:7>col:7
`-VarDecl 0x558fa8f1f380 <col:3, col:7> col:7 used base 'int'
int base;
   8: DeclStmt 0x558fa8f49d50 <lparser.c:612:13>col:13
`-VarDecl 0x558fa8f1f3f8 <col:3, col:13> col:13 used nparams 'int'
int nparams;
   9: DeclRefExpr 0x558fa8f1f550 <lparser.c:613:14> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x558fa8f1f578 <lparser.c:613:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1f550 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: MemberExpr 0x558fa8f1f590 <lparser.c:613:14, col:18> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8f1f578 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1f550 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.10]->linenumber
  12: ImplicitCastExpr 0x558fa8f1f5c8 <lparser.c:613:14, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1f590 <col:14, col:18> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8f1f578 <col:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1f550 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.11] (ImplicitCastExpr, LValueToRValue, int)
  13: DeclStmt 0x558fa8f1f5e0 <lparser.c:613:3, col:28>col:7
`-VarDecl 0x558fa8f1f4f0 <col:3, col:18> col:7 used line 'int' cinit
  `-ImplicitCastExpr 0x558fa8f1f5c8 <col:14, col:18> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f1f590 <col:14, col:18> 'int' lvalue ->linenumber 0x558fa8ea0308
      `-ImplicitCastExpr 0x558fa8f1f578 <col:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1f550 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
int line = ls->linenumber;
  14: DeclRefExpr 0x558fa8f1f5f8 <lparser.c:614:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x558fa8f1f620 <lparser.c:614:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1f5f8 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: MemberExpr 0x558fa8f1f638 <lparser.c:614:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f1f620 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1f5f8 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.15]->t
  17: MemberExpr 0x558fa8f1f670 <lparser.c:614:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f1f638 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f1f620 <col:11> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1f5f8 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.16].token
  18: ImplicitCastExpr 0x558fa8f1f6a8 <lparser.c:614:11, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1f670 <col:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f1f638 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f1f620 <col:11> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1f5f8 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B8.17] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B8.18]
   Preds (1): B18
   Succs (4): B10 B11 B17 B9

 [B9]
  default:
   1: DeclRefExpr 0x558fa8f205c8 <lparser.c:638:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f206a0 <lparser.c:638:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f205c8 <col:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f205f0 <lparser.c:638:24> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f206f0 <lparser.c:638:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f205f0 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f20658 <lparser.c:638:28> 'char [28]' lvalue "function arguments expected"
"function arguments expected"
   6: ImplicitCastExpr 0x558fa8f20708 <lparser.c:638:28> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f20658 <col:28> 'char [28]' lvalue "function arguments expected"
[B9.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f20720 <lparser.c:638:28> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f20708 <col:28> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f20658 <col:28> 'char [28]' lvalue "function arguments expected"
[B9.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f206b8 <lparser.c:638:7, col:57> 'void'
|-ImplicitCastExpr 0x558fa8f206a0 <col:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f205c8 <col:7> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f206f0 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f205f0 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f20720 <col:28> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f20708 <col:28> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f20658 <col:28> 'char [28]' lvalue "function arguments expected"
[B9.2]([B9.4], [B9.7])
   9: ReturnStmt 0x558fa8f20738 <lparser.c:639:7>
return;
   Preds (1): B8
   Succs (1): B0

 [B10]
  case TK_STRING:
   1: DeclRefExpr 0x558fa8f202e0 <lparser.c:633:7> 'void (LexState *, expdesc *, TString *)' Function 0x558fa8ef0020 'codestring' 'void (LexState *, expdesc *, TString *)'
codestring
   2: ImplicitCastExpr 0x558fa8f20460 <lparser.c:633:7> 'void (*)(LexState *, expdesc *, TString *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f202e0 <col:7> 'void (LexState *, expdesc *, TString *)' Function 0x558fa8ef0020 'codestring' 'void (LexState *, expdesc *, TString *)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *, TString *))
   3: DeclRefExpr 0x558fa8f20308 <lparser.c:633:18> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f204b8 <lparser.c:633:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20308 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f20330 <lparser.c:633:23> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   6: UnaryOperator 0x558fa8f20358 <lparser.c:633:22, col:23> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f20330 <col:23> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
&[B10.5]
   7: DeclRefExpr 0x558fa8f20378 <lparser.c:633:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f203a0 <lparser.c:633:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20378 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: MemberExpr 0x558fa8f203b8 <lparser.c:633:29, col:33> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f203a0 <col:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f20378 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.8]->t
  10: MemberExpr 0x558fa8f203f0 <lparser.c:633:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
`-MemberExpr 0x558fa8f203b8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f203a0 <col:29> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f20378 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.9].seminfo
  11: MemberExpr 0x558fa8f20428 <lparser.c:633:29, col:43> 'TString *' lvalue .ts 0x558fa8e9eab8
`-MemberExpr 0x558fa8f203f0 <col:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
  `-MemberExpr 0x558fa8f203b8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f203a0 <col:29> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f20378 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.10].ts
  12: ImplicitCastExpr 0x558fa8f204d0 <lparser.c:633:29, col:43> 'TString *' <LValueToRValue>
`-MemberExpr 0x558fa8f20428 <col:29, col:43> 'TString *' lvalue .ts 0x558fa8e9eab8
  `-MemberExpr 0x558fa8f203f0 <col:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
    `-MemberExpr 0x558fa8f203b8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
      `-ImplicitCastExpr 0x558fa8f203a0 <col:29> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f20378 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.11] (ImplicitCastExpr, LValueToRValue, TString *)
  13: CallExpr 0x558fa8f20478 <lparser.c:633:7, col:45> 'void'
|-ImplicitCastExpr 0x558fa8f20460 <col:7> 'void (*)(LexState *, expdesc *, TString *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f202e0 <col:7> 'void (LexState *, expdesc *, TString *)' Function 0x558fa8ef0020 'codestring' 'void (LexState *, expdesc *, TString *)'
|-ImplicitCastExpr 0x558fa8f204b8 <col:18> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f20308 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f20358 <col:22, col:23> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f20330 <col:23> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f204d0 <col:29, col:43> 'TString *' <LValueToRValue>
  `-MemberExpr 0x558fa8f20428 <col:29, col:43> 'TString *' lvalue .ts 0x558fa8e9eab8
    `-MemberExpr 0x558fa8f203f0 <col:29, col:35> 'SemInfo':'SemInfo' lvalue .seminfo 0x558fa8e9ed00
      `-MemberExpr 0x558fa8f203b8 <col:29, col:33> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
        `-ImplicitCastExpr 0x558fa8f203a0 <col:29> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f20378 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.2]([B10.4], [B10.6], [B10.12])
  14: DeclRefExpr 0x558fa8f204e8 <lparser.c:634:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
  15: ImplicitCastExpr 0x558fa8f20538 <lparser.c:634:7> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f204e8 <col:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B10.14] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  16: DeclRefExpr 0x558fa8f20510 <lparser.c:634:17> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
  17: ImplicitCastExpr 0x558fa8f20580 <lparser.c:634:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20510 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.16] (ImplicitCastExpr, LValueToRValue, LexState *)
  18: CallExpr 0x558fa8f20550 <lparser.c:634:7, col:19> 'void'
|-ImplicitCastExpr 0x558fa8f20538 <col:7> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f204e8 <col:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f20580 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f20510 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B10.15]([B10.17])
   T: break;
   Preds (1): B8
   Succs (1): B7

 [B11]
  case '{':
   1: DeclRefExpr 0x558fa8f20158 <lparser.c:629:7> 'void (LexState *, expdesc *)' Function 0x558fa8f17ed0 'constructor' 'void (LexState *, expdesc *)'
constructor
   2: ImplicitCastExpr 0x558fa8f201f0 <lparser.c:629:7> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f20158 <col:7> 'void (LexState *, expdesc *)' Function 0x558fa8f17ed0 'constructor' 'void (LexState *, expdesc *)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f20180 <lparser.c:629:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f20240 <lparser.c:629:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20180 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f201a8 <lparser.c:629:24> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   6: UnaryOperator 0x558fa8f201d0 <lparser.c:629:23, col:24> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f201a8 <col:24> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
&[B11.5]
   7: CallExpr 0x558fa8f20208 <lparser.c:629:7, col:28> 'void'
|-ImplicitCastExpr 0x558fa8f201f0 <col:7> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f20158 <col:7> 'void (LexState *, expdesc *)' Function 0x558fa8f17ed0 'constructor' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f20240 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f20180 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f201d0 <col:23, col:24> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f201a8 <col:24> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B11.2]([B11.4], [B11.6])
   T: break;
   Preds (1): B8
   Succs (1): B7

 [B12]
   1: DeclRefExpr 0x558fa8f1ff90 <lparser.c:625:7> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
   2: ImplicitCastExpr 0x558fa8f20038 <lparser.c:625:7> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1ff90 <col:7> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
   3: DeclRefExpr 0x558fa8f1ffb8 <lparser.c:625:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f20098 <lparser.c:625:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ffb8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f1ffe0 <lparser.c:625:23> 'int' 41
')'
   6: CharacterLiteral 0x558fa8f1fff8 <lparser.c:625:28> 'int' 40
'('
   7: DeclRefExpr 0x558fa8f20010 <lparser.c:625:33> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
line
   8: ImplicitCastExpr 0x558fa8f200b0 <lparser.c:625:33> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f20010 <col:33> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
[B12.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8f20050 <lparser.c:625:7, col:37> 'void'
|-ImplicitCastExpr 0x558fa8f20038 <col:7> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1ff90 <col:7> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f20098 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1ffb8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
|-CharacterLiteral 0x558fa8f1ffe0 <col:23> 'int' 41
|-CharacterLiteral 0x558fa8f1fff8 <col:28> 'int' 40
`-ImplicitCastExpr 0x558fa8f200b0 <col:33> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f20010 <col:33> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
[B12.2]([B12.4], [B12.5], [B12.6], [B12.8])
   T: break;
   Preds (2): B13 B14
   Succs (1): B7

 [B13]
   1: DeclRefExpr 0x558fa8f1fc70 <lparser.c:622:9> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
explist1
   2: ImplicitCastExpr 0x558fa8f1fd68 <lparser.c:622:9> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1fc70 <col:9> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
[B13.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f1fc98 <lparser.c:622:18> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1fdb8 <lparser.c:622:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1fc98 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f1fcc0 <lparser.c:622:23> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   6: UnaryOperator 0x558fa8f1fce8 <lparser.c:622:22, col:23> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f1fcc0 <col:23> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
&[B13.5]
   7: CallExpr 0x558fa8f1fd80 <lparser.c:622:9, col:27> 'int'
|-ImplicitCastExpr 0x558fa8f1fd68 <col:9> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1fc70 <col:9> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f1fdb8 <col:18> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1fc98 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f1fce8 <col:22, col:23> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f1fcc0 <col:23> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B13.2]([B13.4], [B13.6])
   8: DeclRefExpr 0x558fa8f1fdd0 <./lcode.h:43:31> 'void (FuncState *, expdesc *, int)' Function 0x558fa8ebc120 'luaK_setreturns' 'void (FuncState *, expdesc *, int)'
luaK_setreturns
   9: ImplicitCastExpr 0x558fa8f1fec8 <./lcode.h:43:31> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1fdd0 <col:31> 'void (FuncState *, expdesc *, int)' Function 0x558fa8ebc120 'luaK_setreturns' 'void (FuncState *, expdesc *, int)'
[B13.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, int))
  10: DeclRefExpr 0x558fa8f1fdf8 <lparser.c:623:25> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x558fa8f1ff20 <lparser.c:623:25> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1fdf8 <col:25> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
[B13.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x558fa8f1fe20 <lparser.c:623:30> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
  13: UnaryOperator 0x558fa8f1fe48 <lparser.c:623:29, col:30> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f1fe20 <col:30> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
&[B13.12]
  14: IntegerLiteral 0x558fa8f1fe68 <./lua.h:30:23> 'int' 1
1
  15: UnaryOperator 0x558fa8f1fe88 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f1fe68 <col:23> 'int' 1
-[B13.14]
  16: CallExpr 0x558fa8f1fee0 <./lcode.h:43:31, col:65> 'void'
|-ImplicitCastExpr 0x558fa8f1fec8 <col:31> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1fdd0 <col:31> 'void (FuncState *, expdesc *, int)' Function 0x558fa8ebc120 'luaK_setreturns' 'void (FuncState *, expdesc *, int)'
|-ImplicitCastExpr 0x558fa8f1ff20 <lparser.c:623:25> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1fdf8 <col:25> 'FuncState *' lvalue Var 0x558fa8f1f1d8 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f1fe48 <col:29, col:30> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f1fe20 <col:30> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
`-ParenExpr 0x558fa8f1fea8 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x558fa8f1fe88 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8f1fe68 <col:23> 'int' 1
[B13.9]([B13.11], [B13.13], ([B13.15]))
   Preds (1): B15
   Succs (1): B12

 [B14]
   1: DeclRefExpr 0x558fa8f1fc08 <lparser.c:620:18> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
VVOID
   2: ImplicitCastExpr 0x558fa8f1fc30 <lparser.c:620:18> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f1fc08 <col:18> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
[B14.1] (ImplicitCastExpr, IntegralCast, expkind)
   3: DeclRefExpr 0x558fa8f1fba8 <lparser.c:620:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
args
   4: MemberExpr 0x558fa8f1fbd0 <lparser.c:620:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f1fba8 <col:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
[B14.3].k
   5: BinaryOperator 0x558fa8f1fc48 <lparser.c:620:9, col:18> 'expkind':'expkind' '='
|-MemberExpr 0x558fa8f1fbd0 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
| `-DeclRefExpr 0x558fa8f1fba8 <col:9> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f1f2f0 'args' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f1fc30 <col:18> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x558fa8f1fc08 <col:18> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
[B14.4] = [B14.2]
   Preds (1): B15
   Succs (1): B12

 [B15]
   1: DeclRefExpr 0x558fa8f1f9f0 <lparser.c:618:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
   2: ImplicitCastExpr 0x558fa8f1fa40 <lparser.c:618:7> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1f9f0 <col:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B15.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x558fa8f1fa18 <lparser.c:618:17> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1fa88 <lparser.c:618:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1fa18 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B15.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f1fa58 <lparser.c:618:7, col:19> 'void'
|-ImplicitCastExpr 0x558fa8f1fa40 <col:7> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1f9f0 <col:7> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f1fa88 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1fa18 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B15.2]([B15.4])
   6: DeclRefExpr 0x558fa8f1faa0 <lparser.c:619:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x558fa8f1fac8 <lparser.c:619:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1faa0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B15.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x558fa8f1fae0 <lparser.c:619:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f1fac8 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1faa0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B15.7]->t
   9: MemberExpr 0x558fa8f1fb18 <lparser.c:619:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f1fae0 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f1fac8 <col:11> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1faa0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B15.8].token
  10: ImplicitCastExpr 0x558fa8f1fb68 <lparser.c:619:11, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1fb18 <col:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f1fae0 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f1fac8 <col:11> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1faa0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B15.9] (ImplicitCastExpr, LValueToRValue, int)
  11: CharacterLiteral 0x558fa8f1fb50 <lparser.c:619:26> 'int' 41
')'
  12: BinaryOperator 0x558fa8f1fb80 <lparser.c:619:11, col:26> 'int' '=='
|-ImplicitCastExpr 0x558fa8f1fb68 <col:11, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f1fb18 <col:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f1fae0 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f1fac8 <col:11> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f1faa0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f1fb50 <col:26> 'int' 41
[B15.10] == [B15.11]
   T: if [B15.12]
   Preds (2): B16 B17
   Succs (2): B14 B13

 [B16]
   1: DeclRefExpr 0x558fa8f1f838 <lparser.c:617:9> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f1f920 <lparser.c:617:9> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1f838 <col:9> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B16.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f1f860 <lparser.c:617:26> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1f970 <lparser.c:617:26> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1f860 <col:26> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B16.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f1f8c8 <lparser.c:617:29> 'char [49]' lvalue "ambiguous syntax (function call x new statement)"
"ambiguous syntax (function call x new statement)"
   6: ImplicitCastExpr 0x558fa8f1f988 <lparser.c:617:29> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f1f8c8 <col:29> 'char [49]' lvalue "ambiguous syntax (function call x new statement)"
[B16.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f1f9a0 <lparser.c:617:29> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f1f988 <col:29> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f1f8c8 <col:29> 'char [49]' lvalue "ambiguous syntax (function call x new statement)"
[B16.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f1f938 <lparser.c:617:9, col:79> 'void'
|-ImplicitCastExpr 0x558fa8f1f920 <col:9> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1f838 <col:9> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f1f970 <col:26> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1f860 <col:26> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f1f9a0 <col:29> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f1f988 <col:29> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f1f8c8 <col:29> 'char [49]' lvalue "ambiguous syntax (function call x new statement)"
[B16.2]([B16.4], [B16.7])
   Preds (1): B17
   Succs (1): B15

 [B17]
  case '(':
   1: DeclRefExpr 0x558fa8f1f740 <lparser.c:616:11> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
line
   2: ImplicitCastExpr 0x558fa8f1f7e0 <lparser.c:616:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1f740 <col:11> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
[B17.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x558fa8f1f768 <lparser.c:616:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1f790 <lparser.c:616:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1f768 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B17.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f1f7a8 <lparser.c:616:19, col:23> 'int' lvalue ->lastline 0x558fa8ea0368
`-ImplicitCastExpr 0x558fa8f1f790 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1f768 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B17.4]->lastline
   6: ImplicitCastExpr 0x558fa8f1f7f8 <lparser.c:616:19, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1f7a8 <col:19, col:23> 'int' lvalue ->lastline 0x558fa8ea0368
  `-ImplicitCastExpr 0x558fa8f1f790 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1f768 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B17.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x558fa8f1f810 <lparser.c:616:11, col:23> 'int' '!='
|-ImplicitCastExpr 0x558fa8f1f7e0 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1f740 <col:11> 'int' lvalue Var 0x558fa8f1f4f0 'line' 'int'
`-ImplicitCastExpr 0x558fa8f1f7f8 <col:19, col:23> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f1f7a8 <col:19, col:23> 'int' lvalue ->lastline 0x558fa8ea0368
    `-ImplicitCastExpr 0x558fa8f1f790 <col:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1f768 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f1f018 'ls' 'LexState *'
[B17.2] != [B17.6]
   T: if [B17.7]
   Preds (1): B8
   Succs (2): B16 B15

 [B0 (EXIT)]
   Preds (2): B1 B9
