static const char *getfuncname(lua_State *L, CallInfo *ci, const char **name)
 [B13 (ENTRY)]
   Succs (1): B12

 [B1]
   1: IntegerLiteral 0x555e9726d108 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x555e9726d140 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x555e9726d108 <col:24> 'int' 0
(void *)[B1.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x555e9726d188 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <NullToPointer>
`-ParenExpr 0x555e9726d168 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x555e9726d140 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x555e9726d108 <col:24> 'int' 0
([B1.2]) (ImplicitCastExpr, NullToPointer, const char *)
   4: ReturnStmt 0x555e9726d1a0 <ldebug.c:554:5, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x555e9726d188 <col:16, col:25> 'const char *' <NullToPointer>
  `-ParenExpr 0x555e9726d168 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x555e9726d140 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x555e9726d108 <col:24> 'int' 0
return [B1.3];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x555e9726cbd8 <ldebug.c:552:12> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
getobjname
   2: ImplicitCastExpr 0x555e9726d048 <ldebug.c:552:12> 'const char *(*)(lua_State *, CallInfo *, int, const char **)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e9726cbd8 <col:12> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(lua_State *, CallInfo *, int, const char **))
   3: DeclRefExpr 0x555e9726cc00 <ldebug.c:552:23> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x555e9726d0a8 <ldebug.c:552:23> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e9726cc00 <col:23> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
[B2.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x555e9726cc28 <ldebug.c:552:26> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   6: ImplicitCastExpr 0x555e9726d0c0 <ldebug.c:552:26> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e9726cc28 <col:26> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B2.5] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   7: DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
i
   8: ImplicitCastExpr 0x555e9726cd20 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9726cc78 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
([B2.7]) (ImplicitCastExpr, LValueToRValue, Instruction)
   9: IntegerLiteral 0x555e9726cc98 <./lopcodes.h:44:17> 'int' 0
0
  10: IntegerLiteral 0x555e9726ccb8 <./lopcodes.h:42:18> 'int' 6
6
  11: BinaryOperator 0x555e9726ccd8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x555e9726cc98 <line:44:17> 'int' 0
`-IntegerLiteral 0x555e9726ccb8 <line:42:18> 'int' 6
[B2.9] + [B2.10]
  12: BinaryOperator 0x555e9726cd38 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9726cd20 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9726cc78 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x555e9726cd00 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x555e9726ccd8 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x555e9726cc98 <line:44:17> 'int' 0
    `-IntegerLiteral 0x555e9726ccb8 <line:42:18> 'int' 6
[B2.8] >> ([B2.11])
  13: IntegerLiteral 0x555e9726cd80 <./lopcodes.h:71:39> 'int' 0
0
  14: CStyleCastExpr 0x555e9726cdb0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
(Instruction)[B2.13] (CStyleCastExpr, IntegralCast, Instruction)
  15: UnaryOperator 0x555e9726cdd8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
~[B2.14]
  16: IntegerLiteral 0x555e9726ce18 <./lopcodes.h:40:17> 'int' 8
8
  17: BinaryOperator 0x555e9726ce38 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
`-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
([B2.15]) << [B2.16]
  18: UnaryOperator 0x555e9726ce80 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9726ce60 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726ce38 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
~([B2.17])
  19: IntegerLiteral 0x555e9726cec0 <./lopcodes.h:84:60> 'int' 0
0
  20: BinaryOperator 0x555e9726cee0 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726cea0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726ce80 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9726ce60 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9726ce38 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
`-IntegerLiteral 0x555e9726cec0 <line:84:60> 'int' 0
([B2.18]) << [B2.19]
  21: BinaryOperator 0x555e9726cf28 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9726cd60 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9726cd38 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9726cd20 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9726cc78 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x555e9726cd00 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x555e9726ccd8 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x555e9726cc98 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x555e9726ccb8 <line:42:18> 'int' 6
`-ParenExpr 0x555e9726cf08 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726cee0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726cea0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726ce80 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9726ce60 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9726ce38 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
    `-IntegerLiteral 0x555e9726cec0 <line:84:60> 'int' 0
([B2.12]) & ([B2.20])
  22: CStyleCastExpr 0x555e9726cfb8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x555e9726cf98 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9726cf28 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9726cd60 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9726cd38 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9726cd20 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9726cc78 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x555e9726cd00 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x555e9726ccd8 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x555e9726cc98 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x555e9726ccb8 <line:42:18> 'int' 6
    `-ParenExpr 0x555e9726cf08 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9726cee0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9726cea0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9726ce80 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9726ce60 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9726ce38 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
        `-IntegerLiteral 0x555e9726cec0 <line:84:60> 'int' 0
(int)([B2.21]) (CStyleCastExpr, IntegralCast, int)
  23: DeclRefExpr 0x555e9726d020 <ldebug.c:552:43> 'const char **' lvalue ParmVar 0x555e9726ab80 'name' 'const char **'
name
  24: ImplicitCastExpr 0x555e9726d0d8 <ldebug.c:552:43> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x555e9726d020 <col:43> 'const char **' lvalue ParmVar 0x555e9726ab80 'name' 'const char **'
[B2.23] (ImplicitCastExpr, LValueToRValue, const char **)
  25: CallExpr 0x555e9726d060 <ldebug.c:552:12, col:47> 'const char *'
|-ImplicitCastExpr 0x555e9726d048 <col:12> 'const char *(*)(lua_State *, CallInfo *, int, const char **)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e9726cbd8 <col:12> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
|-ImplicitCastExpr 0x555e9726d0a8 <col:23> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726cc00 <col:23> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
|-ImplicitCastExpr 0x555e9726d0c0 <col:26> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726cc28 <col:26> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
|-ParenExpr 0x555e9726d000 <./lopcodes.h:84:21, col:63> 'int'
| `-ParenExpr 0x555e9726cfe0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x555e9726cfb8 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x555e9726cf98 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x555e9726cf28 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x555e9726cd60 <line:84:32, col:43> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x555e9726cd38 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x555e9726cd20 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x555e9726cc78 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|         |   `-ParenExpr 0x555e9726cd00 <./lopcodes.h:45:16, col:33> 'int'
|         |     `-BinaryOperator 0x555e9726ccd8 <line:44:17, line:42:18> 'int' '+'
|         |       |-IntegerLiteral 0x555e9726cc98 <line:44:17> 'int' 0
|         |       `-IntegerLiteral 0x555e9726ccb8 <line:42:18> 'int' 6
|         `-ParenExpr 0x555e9726cf08 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x555e9726cee0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x555e9726cea0 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x555e9726ce80 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x555e9726ce60 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x555e9726ce38 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
|             |       `-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
|             `-IntegerLiteral 0x555e9726cec0 <line:84:60> 'int' 0
`-ImplicitCastExpr 0x555e9726d0d8 <ldebug.c:552:43> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x555e9726d020 <col:43> 'const char **' lvalue ParmVar 0x555e9726ab80 'name' 'const char **'
[B2.2]([B2.4], [B2.6], (([B2.22])), [B2.24])
  26: ReturnStmt 0x555e9726d0f0 <ldebug.c:552:5, col:47>
`-CallExpr 0x555e9726d060 <col:12, col:47> 'const char *'
  |-ImplicitCastExpr 0x555e9726d048 <col:12> 'const char *(*)(lua_State *, CallInfo *, int, const char **)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e9726cbd8 <col:12> 'const char *(lua_State *, CallInfo *, int, const char **)' Function 0x555e972653a8 'getobjname' 'const char *(lua_State *, CallInfo *, int, const char **)'
  |-ImplicitCastExpr 0x555e9726d0a8 <col:23> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x555e9726cc00 <col:23> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
  |-ImplicitCastExpr 0x555e9726d0c0 <col:26> 'CallInfo *' <LValueToRValue>
  | `-DeclRefExpr 0x555e9726cc28 <col:26> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
  |-ParenExpr 0x555e9726d000 <./lopcodes.h:84:21, col:63> 'int'
  | `-ParenExpr 0x555e9726cfe0 <./llimits.h:75:22, col:31> 'int'
  |   `-CStyleCastExpr 0x555e9726cfb8 <col:23, col:30> 'int' <IntegralCast>
  |     `-ParenExpr 0x555e9726cf98 <col:26, col:30> 'unsigned int'
  |       `-BinaryOperator 0x555e9726cf28 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
  |         |-ParenExpr 0x555e9726cd60 <line:84:32, col:43> 'Instruction':'unsigned int'
  |         | `-BinaryOperator 0x555e9726cd38 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
  |         |   |-ImplicitCastExpr 0x555e9726cd20 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
  |         |   | `-ParenExpr 0x555e9726cc78 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  |         |   |   `-DeclRefExpr 0x555e9726cc50 <ldebug.c:552:39> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
  |         |   `-ParenExpr 0x555e9726cd00 <./lopcodes.h:45:16, col:33> 'int'
  |         |     `-BinaryOperator 0x555e9726ccd8 <line:44:17, line:42:18> 'int' '+'
  |         |       |-IntegerLiteral 0x555e9726cc98 <line:44:17> 'int' 0
  |         |       `-IntegerLiteral 0x555e9726ccb8 <line:42:18> 'int' 6
  |         `-ParenExpr 0x555e9726cf08 <line:71:20, col:49> 'Instruction':'unsigned int'
  |           `-BinaryOperator 0x555e9726cee0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
  |             |-ParenExpr 0x555e9726cea0 <line:71:21, col:45> 'Instruction':'unsigned int'
  |             | `-UnaryOperator 0x555e9726ce80 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
  |             |   `-ParenExpr 0x555e9726ce60 <col:23, col:44> 'Instruction':'unsigned int'
  |             |     `-BinaryOperator 0x555e9726ce38 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
  |             |       |-ParenExpr 0x555e9726cdf8 <line:71:24, col:40> 'Instruction':'unsigned int'
  |             |       | `-UnaryOperator 0x555e9726cdd8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
  |             |       |   `-CStyleCastExpr 0x555e9726cdb0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  |             |       |     `-IntegerLiteral 0x555e9726cd80 <col:39> 'int' 0
  |             |       `-IntegerLiteral 0x555e9726ce18 <line:40:17> 'int' 8
  |             `-IntegerLiteral 0x555e9726cec0 <line:84:60> 'int' 0
  `-ImplicitCastExpr 0x555e9726d0d8 <ldebug.c:552:43> 'const char **' <LValueToRValue>
    `-DeclRefExpr 0x555e9726d020 <col:43> 'const char **' lvalue ParmVar 0x555e9726ab80 'name' 'const char **'
return [B2.25];
   Preds (3): B3 B4 B5
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e9726c838 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9726c7f8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
([B3.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e9726c818 <./lopcodes.h:44:17> 'int' 0
0
   4: BinaryOperator 0x555e9726c850 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9726c838 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9726c7f8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x555e9726c818 <./lopcodes.h:44:17> 'int' 0
[B3.2] >> [B3.3]
   5: IntegerLiteral 0x555e9726c898 <./lopcodes.h:71:39> 'int' 0
0
   6: CStyleCastExpr 0x555e9726c8c8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
(Instruction)[B3.5] (CStyleCastExpr, IntegralCast, Instruction)
   7: UnaryOperator 0x555e9726c8f0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
~[B3.6]
   8: IntegerLiteral 0x555e9726c930 <./lopcodes.h:42:18> 'int' 6
6
   9: BinaryOperator 0x555e9726c950 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
`-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
([B3.7]) << [B3.8]
  10: UnaryOperator 0x555e9726c998 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9726c978 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726c950 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
~([B3.9])
  11: IntegerLiteral 0x555e9726c9d8 <./lopcodes.h:80:67> 'int' 0
0
  12: BinaryOperator 0x555e9726c9f8 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726c9b8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726c998 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9726c978 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9726c950 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9726c9d8 <line:80:67> 'int' 0
([B3.10]) << [B3.11]
  13: BinaryOperator 0x555e9726ca40 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9726c878 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9726c850 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9726c838 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9726c7f8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x555e9726c818 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e9726ca20 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726c9f8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726c9b8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726c998 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9726c978 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9726c950 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9726c9d8 <line:80:67> 'int' 0
([B3.4]) & ([B3.12])
  14: CStyleCastExpr 0x555e9726cac8 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e9726caa8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9726ca40 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9726c878 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9726c850 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9726c838 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9726c7f8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x555e9726c818 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e9726ca20 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9726c9f8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9726c9b8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9726c998 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9726c978 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9726c950 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e9726c9d8 <line:80:67> 'int' 0
(OpCode)([B3.13]) (CStyleCastExpr, IntegralCast, OpCode)
  15: ImplicitCastExpr 0x555e9726cb58 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e9726cb10 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e9726caf0 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e9726cac8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e9726caa8 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e9726ca40 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e9726c878 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e9726c850 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e9726c838 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e9726c7f8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x555e9726c818 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e9726ca20 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e9726c9f8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e9726c9b8 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e9726c998 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e9726c978 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e9726c950 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e9726c9d8 <line:80:67> 'int' 0
(([B3.14])) (ImplicitCastExpr, IntegralCast, unsigned int)
  16: DeclRefExpr 0x555e9726cb30 <ldebug.c:551:24> 'int' EnumConstant 0x555e971f1eb8 'OP_TFORLOOP' 'int'
OP_TFORLOOP
  17: ImplicitCastExpr 0x555e9726cb70 <ldebug.c:551:24> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e9726cb30 <col:24> 'int' EnumConstant 0x555e971f1eb8 'OP_TFORLOOP' 'int'
[B3.16] (ImplicitCastExpr, IntegralCast, unsigned int)
  18: BinaryOperator 0x555e9726cb88 <./lopcodes.h:80:23, ldebug.c:551:24> 'int' '=='
|-ImplicitCastExpr 0x555e9726cb58 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e9726cb10 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e9726caf0 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e9726cac8 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e9726caa8 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e9726ca40 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e9726c878 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e9726c850 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e9726c838 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e9726c7f8 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x555e9726c7d0 <ldebug.c:551:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|           |   `-IntegerLiteral 0x555e9726c818 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e9726ca20 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e9726c9f8 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e9726c9b8 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e9726c998 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e9726c978 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e9726c950 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e9726c910 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e9726c8f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e9726c8c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e9726c898 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e9726c930 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e9726c9d8 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e9726cb70 <ldebug.c:551:24> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e9726cb30 <col:24> 'int' EnumConstant 0x555e971f1eb8 'OP_TFORLOOP' 'int'
[B3.15] == [B3.17]
   T: if [B5.45] || [B4.18] || [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
i
   2: ImplicitCastExpr 0x555e9726c430 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9726c3f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
([B4.1]) (ImplicitCastExpr, LValueToRValue, Instruction)
   3: IntegerLiteral 0x555e9726c410 <./lopcodes.h:44:17> 'int' 0
0
   4: BinaryOperator 0x555e9726c448 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9726c430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9726c3f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x555e9726c410 <./lopcodes.h:44:17> 'int' 0
[B4.2] >> [B4.3]
   5: IntegerLiteral 0x555e9726c490 <./lopcodes.h:71:39> 'int' 0
0
   6: CStyleCastExpr 0x555e9726c4c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
(Instruction)[B4.5] (CStyleCastExpr, IntegralCast, Instruction)
   7: UnaryOperator 0x555e9726c4e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
~[B4.6]
   8: IntegerLiteral 0x555e9726c528 <./lopcodes.h:42:18> 'int' 6
6
   9: BinaryOperator 0x555e9726c548 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
`-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
([B4.7]) << [B4.8]
  10: UnaryOperator 0x555e9726c590 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9726c570 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726c548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
~([B4.9])
  11: IntegerLiteral 0x555e9726c5d0 <./lopcodes.h:80:67> 'int' 0
0
  12: BinaryOperator 0x555e9726c5f0 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726c5b0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726c590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9726c570 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9726c548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9726c5d0 <line:80:67> 'int' 0
([B4.10]) << [B4.11]
  13: BinaryOperator 0x555e9726c638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9726c470 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9726c448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9726c430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9726c3f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x555e9726c410 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e9726c618 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726c5f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726c5b0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726c590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9726c570 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9726c548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9726c5d0 <line:80:67> 'int' 0
([B4.4]) & ([B4.12])
  14: CStyleCastExpr 0x555e9726c6c0 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e9726c6a0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9726c638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9726c470 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9726c448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9726c430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9726c3f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x555e9726c410 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e9726c618 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9726c5f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9726c5b0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9726c590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9726c570 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9726c548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e9726c5d0 <line:80:67> 'int' 0
(OpCode)([B4.13]) (CStyleCastExpr, IntegralCast, OpCode)
  15: ImplicitCastExpr 0x555e9726c750 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e9726c708 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e9726c6e8 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e9726c6c0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e9726c6a0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e9726c638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e9726c470 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e9726c448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e9726c430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e9726c3f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x555e9726c410 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e9726c618 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e9726c5f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e9726c5b0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e9726c590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e9726c570 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e9726c548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e9726c5d0 <line:80:67> 'int' 0
(([B4.14])) (ImplicitCastExpr, IntegralCast, unsigned int)
  16: DeclRefExpr 0x555e9726c728 <ldebug.c:550:52> 'int' EnumConstant 0x555e971f1d98 'OP_TAILCALL' 'int'
OP_TAILCALL
  17: ImplicitCastExpr 0x555e9726c768 <ldebug.c:550:52> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e9726c728 <col:52> 'int' EnumConstant 0x555e971f1d98 'OP_TAILCALL' 'int'
[B4.16] (ImplicitCastExpr, IntegralCast, unsigned int)
  18: BinaryOperator 0x555e9726c780 <./lopcodes.h:80:23, ldebug.c:550:52> 'int' '=='
|-ImplicitCastExpr 0x555e9726c750 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e9726c708 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e9726c6e8 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e9726c6c0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e9726c6a0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e9726c638 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e9726c470 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e9726c448 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e9726c430 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e9726c3f0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x555e9726c3c8 <ldebug.c:550:46> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|           |   `-IntegerLiteral 0x555e9726c410 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e9726c618 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e9726c5f0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e9726c5b0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e9726c590 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e9726c570 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e9726c548 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e9726c508 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e9726c4e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e9726c4c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e9726c490 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e9726c528 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e9726c5d0 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e9726c768 <ldebug.c:550:52> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e9726c728 <col:52> 'int' EnumConstant 0x555e971f1d98 'OP_TAILCALL' 'int'
[B4.15] == [B4.17]
   T: [B5.45] || [B4.18] || ...
   Preds (1): B5
   Succs (2): B2 B3

 [B5]
   1: DeclRefExpr 0x555e9726b990 <ldebug.c:548:3> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   2: UnaryOperator 0x555e9726b9b8 <ldebug.c:548:3, col:5> 'CallInfo *' postfix '--'
`-DeclRefExpr 0x555e9726b990 <col:3> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.1]--
   3: DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   4: ImplicitCastExpr 0x555e9726ba48 <./lstate.h:60:30, col:33> 'CallInfo *' <LValueToRValue>
`-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
  `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B5.3]) (ImplicitCastExpr, LValueToRValue, CallInfo *)
   5: MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
  `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
    `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.4]->func
   6: ImplicitCastExpr 0x555e9726bab8 <./lobject.h:98:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
      `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
        `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B5.5]) (ImplicitCastExpr, LValueToRValue, StkId)
   7: MemberExpr 0x555e9726bad0 <./lobject.h:98:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
        `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
          `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.6]->value
   8: MemberExpr 0x555e9726bb08 <./lobject.h:98:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
`-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
  `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
        `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
          `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
            `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.7].gc
   9: ImplicitCastExpr 0x555e9726bb40 <./lobject.h:98:48, col:59> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
  `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
    `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
            `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
              `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.8] (ImplicitCastExpr, LValueToRValue, GCObject *)
  10: MemberExpr 0x555e9726bb58 <./lobject.h:98:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
`-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
    `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
      `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
            `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
              `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.9]->cl
  11: UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
`-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
  `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
      `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
        `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
              `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                  `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
&[B5.10]
  12: MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
`-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
  `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
    `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
      `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
        `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
            `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
              `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
                  `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                    `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                      `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                        `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
(([B5.11]))->l
  13: MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
`-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
  `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
    `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
      `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
        `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
          `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
            `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
              `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                      `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                        `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                          `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.12].p
  14: ImplicitCastExpr 0x555e9726be20 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' <LValueToRValue>
`-MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
  `-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
    `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
      `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
        `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
          `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
            `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                  `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                    `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
                      `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                        `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                          `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                            `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.13] (ImplicitCastExpr, LValueToRValue, struct Proto *)
  15: MemberExpr 0x555e9726be38 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e9726be20 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' <LValueToRValue>
  `-MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
    `-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
      `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
        `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
          `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
            `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
              `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
                `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                  `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                    `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                      `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
                        `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                          `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                            `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                              `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.14]->code
  16: ImplicitCastExpr 0x555e9726bf68 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e9726be38 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e9726be20 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' <LValueToRValue>
    `-MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
      `-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
        `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
          `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
            `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
              `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
                `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
                  `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                    `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                      `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                        `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
                          `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                            `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                              `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
                                `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.15] (ImplicitCastExpr, LValueToRValue, Instruction *)
  17: DeclRefExpr 0x555e9726be70 <ldebug.c:549:30> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
currentpc
  18: ImplicitCastExpr 0x555e9726bee8 <ldebug.c:549:30> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e9726be70 <col:30> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
[B5.17] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, CallInfo *))
  19: DeclRefExpr 0x555e9726be98 <ldebug.c:549:40> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
L
  20: ImplicitCastExpr 0x555e9726bf38 <ldebug.c:549:40> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e9726be98 <col:40> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
[B5.19] (ImplicitCastExpr, LValueToRValue, lua_State *)
  21: DeclRefExpr 0x555e9726bec0 <ldebug.c:549:43> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
  22: ImplicitCastExpr 0x555e9726bf50 <ldebug.c:549:43> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e9726bec0 <col:43> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.21] (ImplicitCastExpr, LValueToRValue, CallInfo *)
  23: CallExpr 0x555e9726bf00 <ldebug.c:549:30, col:45> 'int'
|-ImplicitCastExpr 0x555e9726bee8 <col:30> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e9726be70 <col:30> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
|-ImplicitCastExpr 0x555e9726bf38 <col:40> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726be98 <col:40> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
`-ImplicitCastExpr 0x555e9726bf50 <col:43> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x555e9726bec0 <col:43> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.18]([B5.20], [B5.22])
  24: ArraySubscriptExpr 0x555e9726bf80 <./lstate.h:60:21, ldebug.c:549:46> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e9726bf68 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e9726be38 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e9726be20 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' <LValueToRValue>
|     `-MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
|       `-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
|         `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
|           `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
|             `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
|               `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
|                 `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
|                   `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
|                     `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
|                       `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
|                         `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
|                           `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
|                             `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
|                               `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
|                                 `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
`-CallExpr 0x555e9726bf00 <col:30, col:45> 'int'
  |-ImplicitCastExpr 0x555e9726bee8 <col:30> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x555e9726be70 <col:30> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
  |-ImplicitCastExpr 0x555e9726bf38 <col:40> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x555e9726be98 <col:40> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
  `-ImplicitCastExpr 0x555e9726bf50 <col:43> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x555e9726bec0 <col:43> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.16][[B5.23]]
  25: ImplicitCastExpr 0x555e9726bfa8 <./lstate.h:60:21, ldebug.c:549:46> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x555e9726bf80 <./lstate.h:60:21, ldebug.c:549:46> 'Instruction':'unsigned int' lvalue
  |-ImplicitCastExpr 0x555e9726bf68 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' <LValueToRValue>
  | `-MemberExpr 0x555e9726be38 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' lvalue ->code 0x555e971d9508
  |   `-ImplicitCastExpr 0x555e9726be20 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' <LValueToRValue>
  |     `-MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
  |       `-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
  |         `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
  |           `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
  |             `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
  |               `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
  |                 `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
  |                   `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
  |                     `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
  |                       `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  |                         `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
  |                           `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
  |                             `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
  |                               `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
  |                                 `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
  `-CallExpr 0x555e9726bf00 <col:30, col:45> 'int'
    |-ImplicitCastExpr 0x555e9726bee8 <col:30> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x555e9726be70 <col:30> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
    |-ImplicitCastExpr 0x555e9726bf38 <col:40> 'lua_State *' <LValueToRValue>
    | `-DeclRefExpr 0x555e9726be98 <col:40> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
    `-ImplicitCastExpr 0x555e9726bf50 <col:43> 'CallInfo *' <LValueToRValue>
      `-DeclRefExpr 0x555e9726bec0 <col:43> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.24] (ImplicitCastExpr, LValueToRValue, Instruction)
  26: DeclRefExpr 0x555e9726b9d8 <ldebug.c:549:3> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
i
  27: BinaryOperator 0x555e9726bfc0 <ldebug.c:549:3, col:46> 'Instruction':'unsigned int' '='
|-DeclRefExpr 0x555e9726b9d8 <col:3> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
`-ImplicitCastExpr 0x555e9726bfa8 <./lstate.h:60:21, ldebug.c:549:46> 'Instruction':'unsigned int' <LValueToRValue>
  `-ArraySubscriptExpr 0x555e9726bf80 <./lstate.h:60:21, ldebug.c:549:46> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e9726bf68 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e9726be38 <./lstate.h:60:21, ldebug.c:549:25> 'Instruction *' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e9726be20 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' <LValueToRValue>
    |     `-MemberExpr 0x555e9726bde8 <./lstate.h:60:21, ldebug.c:549:22> 'struct Proto *' lvalue .p 0x555e971db718
    |       `-MemberExpr 0x555e9726bdb0 <./lstate.h:60:21, ldebug.c:549:20> 'LClosure':'struct LClosure' lvalue ->l 0x555e971dbad0
    |         `-ParenExpr 0x555e9726bd90 <./lstate.h:60:21, col:41> 'union Closure *'
    |           `-ParenExpr 0x555e9726bd70 <./llimits.h:63:25, col:27> 'union Closure *'
    |             `-UnaryOperator 0x555e9726bb90 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
    |               `-MemberExpr 0x555e9726bb58 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
    |                 `-ImplicitCastExpr 0x555e9726bb40 <col:48, col:59> 'GCObject *' <LValueToRValue>
    |                   `-MemberExpr 0x555e9726bb08 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
    |                     `-MemberExpr 0x555e9726bad0 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
    |                       `-ImplicitCastExpr 0x555e9726bab8 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    |                         `-ParenExpr 0x555e9726ba98 <col:48, col:50> 'StkId':'TValue *' lvalue
    |                           `-MemberExpr 0x555e9726ba60 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    |                             `-ImplicitCastExpr 0x555e9726ba48 <col:30, col:33> 'CallInfo *' <LValueToRValue>
    |                               `-ParenExpr 0x555e9726ba28 <col:30, col:33> 'CallInfo *' lvalue
    |                                 `-DeclRefExpr 0x555e9726ba00 <ldebug.c:549:15> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
    `-CallExpr 0x555e9726bf00 <col:30, col:45> 'int'
      |-ImplicitCastExpr 0x555e9726bee8 <col:30> 'int (*)(lua_State *, CallInfo *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x555e9726be70 <col:30> 'int (lua_State *, CallInfo *)' Function 0x555e97237848 'currentpc' 'int (lua_State *, CallInfo *)'
      |-ImplicitCastExpr 0x555e9726bf38 <col:40> 'lua_State *' <LValueToRValue>
      | `-DeclRefExpr 0x555e9726be98 <col:40> 'lua_State *' lvalue ParmVar 0x555e9726aa98 'L' 'lua_State *'
      `-ImplicitCastExpr 0x555e9726bf50 <col:43> 'CallInfo *' <LValueToRValue>
        `-DeclRefExpr 0x555e9726bec0 <col:43> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B5.26] = [B5.25]
  28: DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
i
  29: ImplicitCastExpr 0x555e9726c050 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9726c010 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
([B5.28]) (ImplicitCastExpr, LValueToRValue, Instruction)
  30: IntegerLiteral 0x555e9726c030 <./lopcodes.h:44:17> 'int' 0
0
  31: BinaryOperator 0x555e9726c068 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9726c050 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9726c010 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x555e9726c030 <./lopcodes.h:44:17> 'int' 0
[B5.29] >> [B5.30]
  32: IntegerLiteral 0x555e9726c0b0 <./lopcodes.h:71:39> 'int' 0
0
  33: CStyleCastExpr 0x555e9726c0e0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
(Instruction)[B5.32] (CStyleCastExpr, IntegralCast, Instruction)
  34: UnaryOperator 0x555e9726c108 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
~[B5.33]
  35: IntegerLiteral 0x555e9726c148 <./lopcodes.h:42:18> 'int' 6
6
  36: BinaryOperator 0x555e9726c168 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
`-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
([B5.34]) << [B5.35]
  37: UnaryOperator 0x555e9726c1b0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9726c190 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726c168 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
~([B5.36])
  38: IntegerLiteral 0x555e9726c1f0 <./lopcodes.h:80:67> 'int' 0
0
  39: BinaryOperator 0x555e9726c210 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9726c1d0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9726c1b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9726c190 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9726c168 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9726c1f0 <line:80:67> 'int' 0
([B5.37]) << [B5.38]
  40: BinaryOperator 0x555e9726c258 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9726c090 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9726c068 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9726c050 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9726c010 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x555e9726c030 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e9726c238 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9726c210 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9726c1d0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9726c1b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9726c190 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9726c168 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9726c1f0 <line:80:67> 'int' 0
([B5.31]) & ([B5.39])
  41: CStyleCastExpr 0x555e9726c2e0 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e9726c2c0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9726c258 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9726c090 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9726c068 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9726c050 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9726c010 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x555e9726c030 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e9726c238 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9726c210 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9726c1d0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9726c1b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9726c190 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9726c168 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e9726c1f0 <line:80:67> 'int' 0
(OpCode)([B5.40]) (CStyleCastExpr, IntegralCast, OpCode)
  42: ImplicitCastExpr 0x555e9726c370 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e9726c328 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e9726c308 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e9726c2e0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e9726c2c0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e9726c258 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e9726c090 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e9726c068 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e9726c050 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e9726c010 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x555e9726c030 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e9726c238 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e9726c210 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e9726c1d0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e9726c1b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e9726c190 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e9726c168 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e9726c1f0 <line:80:67> 'int' 0
(([B5.41])) (ImplicitCastExpr, IntegralCast, unsigned int)
  43: DeclRefExpr 0x555e9726c348 <ldebug.c:550:24> 'int' EnumConstant 0x555e971f1d50 'OP_CALL' 'int'
OP_CALL
  44: ImplicitCastExpr 0x555e9726c388 <ldebug.c:550:24> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e9726c348 <col:24> 'int' EnumConstant 0x555e971f1d50 'OP_CALL' 'int'
[B5.43] (ImplicitCastExpr, IntegralCast, unsigned int)
  45: BinaryOperator 0x555e9726c3a0 <./lopcodes.h:80:23, ldebug.c:550:24> 'int' '=='
|-ImplicitCastExpr 0x555e9726c370 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e9726c328 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e9726c308 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e9726c2e0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e9726c2c0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e9726c258 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e9726c090 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e9726c068 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e9726c050 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e9726c010 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x555e9726bfe8 <ldebug.c:550:18> 'Instruction':'unsigned int' lvalue Var 0x555e9726ace8 'i' 'Instruction':'unsigned int'
|           |   `-IntegerLiteral 0x555e9726c030 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e9726c238 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e9726c210 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e9726c1d0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e9726c1b0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e9726c190 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e9726c168 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e9726c128 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e9726c108 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e9726c0e0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e9726c0b0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e9726c148 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e9726c1f0 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e9726c388 <ldebug.c:550:24> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e9726c348 <col:24> 'int' EnumConstant 0x555e971f1d50 'OP_CALL' 'int'
[B5.42] == [B5.44]
   T: [B5.45] || ...
   Preds (1): B7
   Succs (2): B2 B4

 [B6]
   1: IntegerLiteral 0x555e9726b8a8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x555e9726b8e0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x555e9726b8a8 <col:24> 'int' 0
(void *)[B6.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x555e9726b928 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <NullToPointer>
`-ParenExpr 0x555e9726b908 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x555e9726b8e0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x555e9726b8a8 <col:24> 'int' 0
([B6.2]) (ImplicitCastExpr, NullToPointer, const char *)
   4: ReturnStmt 0x555e9726b940 <ldebug.c:547:5, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x555e9726b928 <col:16, col:25> 'const char *' <NullToPointer>
  `-ParenExpr 0x555e9726b908 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x555e9726b8e0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x555e9726b8a8 <col:24> 'int' 0
return [B6.3];
   Preds (2): B7 B10
   Succs (1): B0

 [B7]
   1: BinaryOperator 0x555e9726b818 <./lobject.h:83:25, ./lstate.h:61:41> 'int' '&&'
|-ParenExpr 0x555e9726b4f8 <./lobject.h:83:25, col:51> 'int'
| `-BinaryOperator 0x555e9726b4d0 <line:90:18, ./lua.h:80:24> 'int' '=='
|   |-ImplicitCastExpr 0x555e9726b4b8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
|   | `-ParenExpr 0x555e9726b478 <col:18, col:26> 'int' lvalue
|   |   `-MemberExpr 0x555e9726b440 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
|   |     `-ImplicitCastExpr 0x555e9726b428 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|   |       `-ParenExpr 0x555e9726b408 <col:19, col:21> 'StkId':'TValue *' lvalue
|   |         `-MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
|   |           `-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
|   |             `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
|   |               |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
|   |               `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
|   `-IntegerLiteral 0x555e9726b498 <./lua.h:80:24> 'int' 6
`-ParenExpr 0x555e9726b7f8 <./lstate.h:61:21, col:41> 'int'
  `-UnaryOperator 0x555e9726b7d8 <col:22, col:38> 'int' prefix '!'
    `-ImplicitCastExpr 0x555e9726b7c0 <line:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
      `-MemberExpr 0x555e9726b788 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
        `-MemberExpr 0x555e9726b750 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
          `-ParenExpr 0x555e9726b730 <line:60:21, col:41> 'union Closure *'
            `-ParenExpr 0x555e9726b710 <./llimits.h:63:25, col:27> 'union Closure *'
              `-UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
                `-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
                  `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
                    `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                      `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                        `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                          `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
                            `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                              `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                                `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                                  |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                                  | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                                  `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
([B9.10]) && ([B8.15])
   2: UnaryOperator 0x555e9726b860 <ldebug.c:546:43, ./lstate.h:62:59> 'int' prefix '!'
`-ParenExpr 0x555e9726b840 <col:19, col:59> 'int'
  `-BinaryOperator 0x555e9726b818 <./lobject.h:83:25, ./lstate.h:61:41> 'int' '&&'
    |-ParenExpr 0x555e9726b4f8 <./lobject.h:83:25, col:51> 'int'
    | `-BinaryOperator 0x555e9726b4d0 <line:90:18, ./lua.h:80:24> 'int' '=='
    |   |-ImplicitCastExpr 0x555e9726b4b8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9726b478 <col:18, col:26> 'int' lvalue
    |   |   `-MemberExpr 0x555e9726b440 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
    |   |     `-ImplicitCastExpr 0x555e9726b428 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
    |   |       `-ParenExpr 0x555e9726b408 <col:19, col:21> 'StkId':'TValue *' lvalue
    |   |         `-MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    |   |           `-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
    |   |             `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
    |   |               |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
    |   |               | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
    |   |               `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
    |   `-IntegerLiteral 0x555e9726b498 <./lua.h:80:24> 'int' 6
    `-ParenExpr 0x555e9726b7f8 <./lstate.h:61:21, col:41> 'int'
      `-UnaryOperator 0x555e9726b7d8 <col:22, col:38> 'int' prefix '!'
        `-ImplicitCastExpr 0x555e9726b7c0 <line:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
          `-MemberExpr 0x555e9726b788 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
            `-MemberExpr 0x555e9726b750 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
              `-ParenExpr 0x555e9726b730 <line:60:21, col:41> 'union Closure *'
                `-ParenExpr 0x555e9726b710 <./llimits.h:63:25, col:27> 'union Closure *'
                  `-UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
                    `-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
                      `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
                        `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                          `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                            `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                              `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
                                `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                                  `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                                    `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                                      |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                                      | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                                      `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
!([B7.1])
   T: if ((([B12.9]) && ([B11.13])) && [B10.6]) || [B7.2]
   Preds (2): B8 B9
   Succs (2): B6 B5

 [B8]
   1: DeclRefExpr 0x555e9726b518 <ldebug.c:546:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e9726b560 <ldebug.c:546:50> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B8.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: IntegerLiteral 0x555e9726b540 <ldebug.c:546:55> 'int' 1
1
   4: BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
|-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
`-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.2] - [B8.3]
   5: MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
  `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
    |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
    `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
([B8.4])->func
   6: ImplicitCastExpr 0x555e9726b618 <./lobject.h:98:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
      `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
        |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
        | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
        `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
([B8.5]) (ImplicitCastExpr, LValueToRValue, StkId)
   7: MemberExpr 0x555e9726b630 <./lobject.h:98:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
        `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
          |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
          | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
          `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.6]->value
   8: MemberExpr 0x555e9726b668 <./lobject.h:98:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
`-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
  `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
        `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
          `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
            |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
            | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
            `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.7].gc
   9: ImplicitCastExpr 0x555e9726b6a0 <./lobject.h:98:48, col:59> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
  `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
    `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
            `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
              |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
              | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
              `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.8] (ImplicitCastExpr, LValueToRValue, GCObject *)
  10: MemberExpr 0x555e9726b6b8 <./lobject.h:98:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
`-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
    `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
      `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
            `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
              `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.9]->cl
  11: UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
`-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
  `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
      `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
        `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
              `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                  |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                  | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                  `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
&[B8.10]
  12: MemberExpr 0x555e9726b750 <./lstate.h:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
`-ParenExpr 0x555e9726b730 <line:60:21, col:41> 'union Closure *'
  `-ParenExpr 0x555e9726b710 <./llimits.h:63:25, col:27> 'union Closure *'
    `-UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
      `-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
        `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
            `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
              `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
                  `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                    `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                      `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                        |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                        | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                        `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
(([B8.11]))->c
  13: MemberExpr 0x555e9726b788 <./lstate.h:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
`-MemberExpr 0x555e9726b750 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
  `-ParenExpr 0x555e9726b730 <line:60:21, col:41> 'union Closure *'
    `-ParenExpr 0x555e9726b710 <./llimits.h:63:25, col:27> 'union Closure *'
      `-UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
        `-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
          `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
            `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
              `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                      `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                        `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                          |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                          | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                          `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.12].isC
  14: ImplicitCastExpr 0x555e9726b7c0 <./lstate.h:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9726b788 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
  `-MemberExpr 0x555e9726b750 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
    `-ParenExpr 0x555e9726b730 <line:60:21, col:41> 'union Closure *'
      `-ParenExpr 0x555e9726b710 <./llimits.h:63:25, col:27> 'union Closure *'
        `-UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
          `-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
            `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                  `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                    `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
                      `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                        `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                          `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                            |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                            | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                            `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
[B8.13] (ImplicitCastExpr, LValueToRValue, lu_byte)
  15: UnaryOperator 0x555e9726b7d8 <./lstate.h:61:22, col:38> 'int' prefix '!'
`-ImplicitCastExpr 0x555e9726b7c0 <line:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9726b788 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
    `-MemberExpr 0x555e9726b750 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
      `-ParenExpr 0x555e9726b730 <line:60:21, col:41> 'union Closure *'
        `-ParenExpr 0x555e9726b710 <./llimits.h:63:25, col:27> 'union Closure *'
          `-UnaryOperator 0x555e9726b6f0 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
            `-MemberExpr 0x555e9726b6b8 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
              `-ImplicitCastExpr 0x555e9726b6a0 <col:48, col:59> 'GCObject *' <LValueToRValue>
                `-MemberExpr 0x555e9726b668 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                  `-MemberExpr 0x555e9726b630 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                    `-ImplicitCastExpr 0x555e9726b618 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                      `-ParenExpr 0x555e9726b5f8 <col:48, col:50> 'StkId':'TValue *' lvalue
                        `-MemberExpr 0x555e9726b5c0 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                          `-ParenExpr 0x555e9726b5a0 <col:30, col:33> 'CallInfo *'
                            `-BinaryOperator 0x555e9726b578 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
                              |-ImplicitCastExpr 0x555e9726b560 <col:50> 'CallInfo *' <LValueToRValue>
                              | `-DeclRefExpr 0x555e9726b518 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
                              `-IntegerLiteral 0x555e9726b540 <col:55> 'int' 1
![B8.14]
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: DeclRefExpr 0x555e9726b328 <ldebug.c:546:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e9726b370 <ldebug.c:546:50> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B9.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: IntegerLiteral 0x555e9726b350 <ldebug.c:546:55> 'int' 1
1
   4: BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
|-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
`-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
[B9.2] - [B9.3]
   5: MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
  `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
    |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
    | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
    `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
([B9.4])->func
   6: ImplicitCastExpr 0x555e9726b428 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e9726b408 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
      `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
        |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
        | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
        `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
([B9.5]) (ImplicitCastExpr, LValueToRValue, StkId)
   7: MemberExpr 0x555e9726b440 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
`-ImplicitCastExpr 0x555e9726b428 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e9726b408 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
        `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
          |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
          | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
          `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
[B9.6]->tt
   8: ImplicitCastExpr 0x555e9726b4b8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x555e9726b478 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x555e9726b440 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
    `-ImplicitCastExpr 0x555e9726b428 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e9726b408 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
            `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
              |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
              | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
              `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
([B9.7]) (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x555e9726b498 <./lua.h:80:24> 'int' 6
6
  10: BinaryOperator 0x555e9726b4d0 <./lobject.h:90:18, ./lua.h:80:24> 'int' '=='
|-ImplicitCastExpr 0x555e9726b4b8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x555e9726b478 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x555e9726b440 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
|     `-ImplicitCastExpr 0x555e9726b428 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x555e9726b408 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-MemberExpr 0x555e9726b3d0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
|           `-ParenExpr 0x555e9726b3b0 <col:33, col:36> 'CallInfo *'
|             `-BinaryOperator 0x555e9726b388 <ldebug.c:546:50, col:55> 'CallInfo *' '-'
|               |-ImplicitCastExpr 0x555e9726b370 <col:50> 'CallInfo *' <LValueToRValue>
|               | `-DeclRefExpr 0x555e9726b328 <col:50> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
|               `-IntegerLiteral 0x555e9726b350 <col:55> 'int' 1
`-IntegerLiteral 0x555e9726b498 <./lua.h:80:24> 'int' 6
[B9.8] == [B9.9]
   T: ([B9.10]) && ...
   Preds (3): B10 B11 B12
   Succs (2): B8 B7

 [B10]
   1: DeclRefExpr 0x555e9726b208 <ldebug.c:546:21> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e9726b230 <ldebug.c:546:21> 'CallInfo *' <LValueToRValue>
`-DeclRefExpr 0x555e9726b208 <col:21> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B10.1] (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x555e9726b248 <ldebug.c:546:21, col:25> 'int' lvalue ->tailcalls 0x555e9720fb48
`-ImplicitCastExpr 0x555e9726b230 <col:21> 'CallInfo *' <LValueToRValue>
  `-DeclRefExpr 0x555e9726b208 <col:21> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B10.2]->tailcalls
   4: ImplicitCastExpr 0x555e9726b2a0 <ldebug.c:546:21, col:25> 'int' <LValueToRValue>
`-MemberExpr 0x555e9726b248 <col:21, col:25> 'int' lvalue ->tailcalls 0x555e9720fb48
  `-ImplicitCastExpr 0x555e9726b230 <col:21> 'CallInfo *' <LValueToRValue>
    `-DeclRefExpr 0x555e9726b208 <col:21> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9726b280 <ldebug.c:546:37> 'int' 0
0
   6: BinaryOperator 0x555e9726b2b8 <ldebug.c:546:21, col:37> 'int' '>'
|-ImplicitCastExpr 0x555e9726b2a0 <col:21, col:25> 'int' <LValueToRValue>
| `-MemberExpr 0x555e9726b248 <col:21, col:25> 'int' lvalue ->tailcalls 0x555e9720fb48
|   `-ImplicitCastExpr 0x555e9726b230 <col:21> 'CallInfo *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9726b208 <col:21> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
`-IntegerLiteral 0x555e9726b280 <col:37> 'int' 0
[B10.4] > [B10.5]
   T: ((([B12.9]) && ([B11.13])) && [B10.6]) || ...
   Preds (1): B11
   Succs (2): B6 B9

 [B11]
   1: DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   2: ImplicitCastExpr 0x555e9726af50 <./lstate.h:60:30, col:33> 'CallInfo *' <LValueToRValue>
`-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
  `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B11.1]) (ImplicitCastExpr, LValueToRValue, CallInfo *)
   3: MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
  `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
    `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.2]->func
   4: ImplicitCastExpr 0x555e9726afc0 <./lobject.h:98:48, col:50> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
      `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
        `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B11.3]) (ImplicitCastExpr, LValueToRValue, StkId)
   5: MemberExpr 0x555e9726afd8 <./lobject.h:98:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
`-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
        `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
          `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.4]->value
   6: MemberExpr 0x555e9726b010 <./lobject.h:98:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
`-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
  `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
    `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
      `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
        `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
          `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
            `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.5].gc
   7: ImplicitCastExpr 0x555e9726b048 <./lobject.h:98:48, col:59> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
  `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
    `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
            `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
              `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.6] (ImplicitCastExpr, LValueToRValue, GCObject *)
   8: MemberExpr 0x555e9726b060 <./lobject.h:98:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
`-ImplicitCastExpr 0x555e9726b048 <col:48, col:59> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
    `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
      `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
        `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
          `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
            `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
              `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
                `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.7]->cl
   9: UnaryOperator 0x555e9726b098 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
`-MemberExpr 0x555e9726b060 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
  `-ImplicitCastExpr 0x555e9726b048 <col:48, col:59> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
      `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
        `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
          `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
            `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
              `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
                  `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
&[B11.8]
  10: MemberExpr 0x555e9726b0f8 <./lstate.h:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
`-ParenExpr 0x555e9726b0d8 <line:60:21, col:41> 'union Closure *'
  `-ParenExpr 0x555e9726b0b8 <./llimits.h:63:25, col:27> 'union Closure *'
    `-UnaryOperator 0x555e9726b098 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
      `-MemberExpr 0x555e9726b060 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
        `-ImplicitCastExpr 0x555e9726b048 <col:48, col:59> 'GCObject *' <LValueToRValue>
          `-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
            `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
              `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
                  `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                    `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                      `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
                        `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
(([B11.9]))->c
  11: MemberExpr 0x555e9726b130 <./lstate.h:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
`-MemberExpr 0x555e9726b0f8 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
  `-ParenExpr 0x555e9726b0d8 <line:60:21, col:41> 'union Closure *'
    `-ParenExpr 0x555e9726b0b8 <./llimits.h:63:25, col:27> 'union Closure *'
      `-UnaryOperator 0x555e9726b098 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
        `-MemberExpr 0x555e9726b060 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
          `-ImplicitCastExpr 0x555e9726b048 <col:48, col:59> 'GCObject *' <LValueToRValue>
            `-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
              `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                  `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
                    `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                      `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                        `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
                          `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.10].isC
  12: ImplicitCastExpr 0x555e9726b168 <./lstate.h:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9726b130 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
  `-MemberExpr 0x555e9726b0f8 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
    `-ParenExpr 0x555e9726b0d8 <line:60:21, col:41> 'union Closure *'
      `-ParenExpr 0x555e9726b0b8 <./llimits.h:63:25, col:27> 'union Closure *'
        `-UnaryOperator 0x555e9726b098 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
          `-MemberExpr 0x555e9726b060 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
            `-ImplicitCastExpr 0x555e9726b048 <col:48, col:59> 'GCObject *' <LValueToRValue>
              `-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                  `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                    `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
                      `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                        `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                          `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
                            `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B11.11] (ImplicitCastExpr, LValueToRValue, lu_byte)
  13: UnaryOperator 0x555e9726b180 <./lstate.h:61:22, col:38> 'int' prefix '!'
`-ImplicitCastExpr 0x555e9726b168 <line:60:21, line:61:38> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9726b130 <line:60:21, line:61:38> 'lu_byte':'unsigned char' lvalue .isC 0x555e971db038
    `-MemberExpr 0x555e9726b0f8 <line:60:21, line:61:36> 'CClosure':'struct CClosure' lvalue ->c 0x555e971dba50
      `-ParenExpr 0x555e9726b0d8 <line:60:21, col:41> 'union Closure *'
        `-ParenExpr 0x555e9726b0b8 <./llimits.h:63:25, col:27> 'union Closure *'
          `-UnaryOperator 0x555e9726b098 <./lobject.h:98:47, col:63> 'union Closure *' prefix '&'
            `-MemberExpr 0x555e9726b060 <col:48, col:63> 'union Closure':'union Closure' lvalue ->cl 0x555e97213f98
              `-ImplicitCastExpr 0x555e9726b048 <col:48, col:59> 'GCObject *' <LValueToRValue>
                `-MemberExpr 0x555e9726b010 <col:48, col:59> 'GCObject *' lvalue .gc 0x555e971cc250
                  `-MemberExpr 0x555e9726afd8 <col:48, col:53> 'Value':'Value' lvalue ->value 0x555e971cc550
                    `-ImplicitCastExpr 0x555e9726afc0 <col:48, col:50> 'StkId':'TValue *' <LValueToRValue>
                      `-ParenExpr 0x555e9726afa0 <col:48, col:50> 'StkId':'TValue *' lvalue
                        `-MemberExpr 0x555e9726af68 <./lstate.h:60:30, col:36> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
                          `-ImplicitCastExpr 0x555e9726af50 <col:30, col:33> 'CallInfo *' <LValueToRValue>
                            `-ParenExpr 0x555e9726af30 <col:30, col:33> 'CallInfo *' lvalue
                              `-DeclRefExpr 0x555e9726af08 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
![B11.12]
   T: (([B12.9]) && ([B11.13])) && ...
   Preds (1): B12
   Succs (2): B10 B9

 [B12]
   1: DeclStmt 0x555e9726ad48 <ldebug.c:545:3, col:16>col:15
`-VarDecl 0x555e9726ace8 <col:3, col:15> col:15 used i 'Instruction':'unsigned int'
Instruction i;
   2: DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
ci
   3: ImplicitCastExpr 0x555e9726ada8 <./lstate.h:62:33, col:36> 'CallInfo *' <LValueToRValue>
`-ParenExpr 0x555e9726ad88 <col:33, col:36> 'CallInfo *' lvalue
  `-DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B12.2]) (ImplicitCastExpr, LValueToRValue, CallInfo *)
   4: MemberExpr 0x555e9726adc0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
`-ImplicitCastExpr 0x555e9726ada8 <col:33, col:36> 'CallInfo *' <LValueToRValue>
  `-ParenExpr 0x555e9726ad88 <col:33, col:36> 'CallInfo *' lvalue
    `-DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B12.3]->func
   5: ImplicitCastExpr 0x555e9726ae18 <./lobject.h:90:19, col:21> 'StkId':'TValue *' <LValueToRValue>
`-ParenExpr 0x555e9726adf8 <col:19, col:21> 'StkId':'TValue *' lvalue
  `-MemberExpr 0x555e9726adc0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
    `-ImplicitCastExpr 0x555e9726ada8 <col:33, col:36> 'CallInfo *' <LValueToRValue>
      `-ParenExpr 0x555e9726ad88 <col:33, col:36> 'CallInfo *' lvalue
        `-DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B12.4]) (ImplicitCastExpr, LValueToRValue, StkId)
   6: MemberExpr 0x555e9726ae30 <./lobject.h:90:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
`-ImplicitCastExpr 0x555e9726ae18 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
  `-ParenExpr 0x555e9726adf8 <col:19, col:21> 'StkId':'TValue *' lvalue
    `-MemberExpr 0x555e9726adc0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
      `-ImplicitCastExpr 0x555e9726ada8 <col:33, col:36> 'CallInfo *' <LValueToRValue>
        `-ParenExpr 0x555e9726ad88 <col:33, col:36> 'CallInfo *' lvalue
          `-DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
[B12.5]->tt
   7: ImplicitCastExpr 0x555e9726aea8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x555e9726ae68 <col:18, col:26> 'int' lvalue
  `-MemberExpr 0x555e9726ae30 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
    `-ImplicitCastExpr 0x555e9726ae18 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
      `-ParenExpr 0x555e9726adf8 <col:19, col:21> 'StkId':'TValue *' lvalue
        `-MemberExpr 0x555e9726adc0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
          `-ImplicitCastExpr 0x555e9726ada8 <col:33, col:36> 'CallInfo *' <LValueToRValue>
            `-ParenExpr 0x555e9726ad88 <col:33, col:36> 'CallInfo *' lvalue
              `-DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
([B12.6]) (ImplicitCastExpr, LValueToRValue, int)
   8: IntegerLiteral 0x555e9726ae88 <./lua.h:80:24> 'int' 6
6
   9: BinaryOperator 0x555e9726aec0 <./lobject.h:90:18, ./lua.h:80:24> 'int' '=='
|-ImplicitCastExpr 0x555e9726aea8 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x555e9726ae68 <col:18, col:26> 'int' lvalue
|   `-MemberExpr 0x555e9726ae30 <col:19, col:24> 'int' lvalue ->tt 0x555e971cc5b0
|     `-ImplicitCastExpr 0x555e9726ae18 <col:19, col:21> 'StkId':'TValue *' <LValueToRValue>
|       `-ParenExpr 0x555e9726adf8 <col:19, col:21> 'StkId':'TValue *' lvalue
|         `-MemberExpr 0x555e9726adc0 <./lstate.h:62:33, col:39> 'StkId':'TValue *' lvalue ->func 0x555e9720f978
|           `-ImplicitCastExpr 0x555e9726ada8 <col:33, col:36> 'CallInfo *' <LValueToRValue>
|             `-ParenExpr 0x555e9726ad88 <col:33, col:36> 'CallInfo *' lvalue
|               `-DeclRefExpr 0x555e9726ad60 <ldebug.c:546:14> 'CallInfo *' lvalue ParmVar 0x555e9726ab08 'ci' 'CallInfo *'
`-IntegerLiteral 0x555e9726ae88 <./lua.h:80:24> 'int' 6
[B12.7] == [B12.8]
   T: ([B12.9]) && ...
   Preds (1): B13
   Succs (2): B11 B9

 [B0 (EXIT)]
   Preds (3): B1 B2 B6
