static void checkname(LexState *ls, expdesc *e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x558fa8ef05b8 <lparser.c:139:3> 'void (LexState *, expdesc *, TString *)' Function 0x558fa8ef0020 'codestring' 'void (LexState *, expdesc *, TString *)'
codestring
   2: ImplicitCastExpr 0x558fa8ef0798 <lparser.c:139:3> 'void (*)(LexState *, expdesc *, TString *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8ef05b8 <col:3> 'void (LexState *, expdesc *, TString *)' Function 0x558fa8ef0020 'codestring' 'void (LexState *, expdesc *, TString *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *, TString *))
   3: DeclRefExpr 0x558fa8ef05e0 <lparser.c:139:14> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8ef07f0 <lparser.c:139:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef05e0 <col:14> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8ef0608 <lparser.c:139:18> 'expdesc *' lvalue ParmVar 0x558fa8ef0478 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x558fa8ef0808 <lparser.c:139:18> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef0608 <col:18> 'expdesc *' lvalue ParmVar 0x558fa8ef0478 'e' 'expdesc *'
[B1.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: DeclRefExpr 0x558fa8ef0630 <lparser.c:139:21> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
str_checkname
   8: ImplicitCastExpr 0x558fa8ef06d8 <lparser.c:139:21> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8ef0630 <col:21> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *))
   9: DeclRefExpr 0x558fa8ef0658 <lparser.c:139:35> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x558fa8ef0720 <lparser.c:139:35> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8ef0658 <col:35> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: CallExpr 0x558fa8ef06f0 <lparser.c:139:21, col:37> 'TString *'
|-ImplicitCastExpr 0x558fa8ef06d8 <col:21> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8ef0630 <col:21> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
`-ImplicitCastExpr 0x558fa8ef0720 <col:35> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8ef0658 <col:35> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
[B1.8]([B1.10])
  12: CallExpr 0x558fa8ef07b0 <lparser.c:139:3, col:38> 'void'
|-ImplicitCastExpr 0x558fa8ef0798 <col:3> 'void (*)(LexState *, expdesc *, TString *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8ef05b8 <col:3> 'void (LexState *, expdesc *, TString *)' Function 0x558fa8ef0020 'codestring' 'void (LexState *, expdesc *, TString *)'
|-ImplicitCastExpr 0x558fa8ef07f0 <col:14> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8ef05e0 <col:14> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8ef0808 <col:18> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8ef0608 <col:18> 'expdesc *' lvalue ParmVar 0x558fa8ef0478 'e' 'expdesc *'
`-CallExpr 0x558fa8ef06f0 <col:21, col:37> 'TString *'
  |-ImplicitCastExpr 0x558fa8ef06d8 <col:21> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8ef0630 <col:21> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
  `-ImplicitCastExpr 0x558fa8ef0720 <col:35> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8ef0658 <col:35> 'LexState *' lvalue ParmVar 0x558fa8ef0408 'ls' 'LexState *'
[B1.2]([B1.4], [B1.6], [B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
