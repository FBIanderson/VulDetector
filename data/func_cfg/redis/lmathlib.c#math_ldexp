static int math_ldexp(lua_State *L)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x563b157720b0 <lmathlib.c:147:3> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x563b1571f300 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
lua_pushnumber
   2: ImplicitCastExpr 0x563b15772428 <lmathlib.c:147:3> 'void (*)(lua_State *, lua_Number)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563b157720b0 <col:3> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x563b1571f300 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, lua_Number))
   3: DeclRefExpr 0x563b157720d8 <lmathlib.c:147:18> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x563b15772478 <lmathlib.c:147:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563b157720d8 <col:18> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x563b15772100 <lmathlib.c:147:21> 'double (double, int)' Function 0x563b156afb30 'ldexp' 'double (double, int)'
ldexp
   6: ImplicitCastExpr 0x563b157723d8 <lmathlib.c:147:21> 'double (*)(double, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563b15772100 <col:21> 'double (double, int)' Function 0x563b156afb30 'ldexp' 'double (double, int)'
[B1.5] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(double, int))
   7: DeclRefExpr 0x563b15772128 <lmathlib.c:147:27> 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)' Function 0x563b1575b488 'luaL_checknumber' 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)'
luaL_checknumber
   8: ImplicitCastExpr 0x563b15772198 <lmathlib.c:147:27> 'lua_Number (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563b15772128 <col:27> 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)' Function 0x563b1575b488 'luaL_checknumber' 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, lua_Number (*)(lua_State *, int))
   9: DeclRefExpr 0x563b15772150 <lmathlib.c:147:44> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
L
  10: ImplicitCastExpr 0x563b157721e8 <lmathlib.c:147:44> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563b15772150 <col:44> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
[B1.9] (ImplicitCastExpr, LValueToRValue, lua_State *)
  11: IntegerLiteral 0x563b15772178 <lmathlib.c:147:47> 'int' 1
1
  12: CallExpr 0x563b157721b0 <lmathlib.c:147:27, col:48> 'lua_Number':'double'
|-ImplicitCastExpr 0x563b15772198 <col:27> 'lua_Number (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563b15772128 <col:27> 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)' Function 0x563b1575b488 'luaL_checknumber' 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)'
|-ImplicitCastExpr 0x563b157721e8 <col:44> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563b15772150 <col:44> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
`-IntegerLiteral 0x563b15772178 <col:47> 'int' 1
[B1.8]([B1.10], [B1.11])
  13: DeclRefExpr 0x563b15772200 <./lauxlib.h:104:34> 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)' Function 0x563b15760110 'luaL_checkinteger' 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)'
luaL_checkinteger
  14: ImplicitCastExpr 0x563b157722e8 <./lauxlib.h:104:34> 'lua_Integer (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x563b15772200 <col:34> 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)' Function 0x563b15760110 'luaL_checkinteger' 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)'
[B1.13] (ImplicitCastExpr, FunctionToPointerDecay, lua_Integer (*)(lua_State *, int))
  15: DeclRefExpr 0x563b15772228 <lmathlib.c:147:65> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
L
  16: ImplicitCastExpr 0x563b15772338 <lmathlib.c:147:65> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x563b15772228 <col:65> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
[B1.15] (ImplicitCastExpr, LValueToRValue, lua_State *)
  17: IntegerLiteral 0x563b15772250 <lmathlib.c:147:68> 'int' 2
2
  18: CallExpr 0x563b15772300 <./lauxlib.h:104:34, col:58> 'lua_Integer':'long'
|-ImplicitCastExpr 0x563b157722e8 <col:34> 'lua_Integer (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563b15772200 <col:34> 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)' Function 0x563b15760110 'luaL_checkinteger' 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)'
|-ImplicitCastExpr 0x563b15772338 <lmathlib.c:147:65> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563b15772228 <col:65> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
`-ParenExpr 0x563b15772270 <./lauxlib.h:104:55, col:57> 'int'
  `-IntegerLiteral 0x563b15772250 <lmathlib.c:147:68> 'int' 2
[B1.14]([B1.16], ([B1.17]))
  19: CStyleCastExpr 0x563b15772368 <./lauxlib.h:104:29, col:58> 'int' <IntegralCast>
`-CallExpr 0x563b15772300 <col:34, col:58> 'lua_Integer':'long'
  |-ImplicitCastExpr 0x563b157722e8 <col:34> 'lua_Integer (*)(lua_State *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x563b15772200 <col:34> 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)' Function 0x563b15760110 'luaL_checkinteger' 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)'
  |-ImplicitCastExpr 0x563b15772338 <lmathlib.c:147:65> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x563b15772228 <col:65> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
  `-ParenExpr 0x563b15772270 <./lauxlib.h:104:55, col:57> 'int'
    `-IntegerLiteral 0x563b15772250 <lmathlib.c:147:68> 'int' 2
(int)[B1.18] (CStyleCastExpr, IntegralCast, int)
  20: CallExpr 0x563b157723f0 <lmathlib.c:147:21, col:70> 'double'
|-ImplicitCastExpr 0x563b157723d8 <col:21> 'double (*)(double, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563b15772100 <col:21> 'double (double, int)' Function 0x563b156afb30 'ldexp' 'double (double, int)'
|-CallExpr 0x563b157721b0 <col:27, col:48> 'lua_Number':'double'
| |-ImplicitCastExpr 0x563b15772198 <col:27> 'lua_Number (*)(lua_State *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x563b15772128 <col:27> 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)' Function 0x563b1575b488 'luaL_checknumber' 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)'
| |-ImplicitCastExpr 0x563b157721e8 <col:44> 'lua_State *' <LValueToRValue>
| | `-DeclRefExpr 0x563b15772150 <col:44> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
| `-IntegerLiteral 0x563b15772178 <col:47> 'int' 1
`-ParenExpr 0x563b15772390 <./lauxlib.h:104:28, col:59> 'int'
  `-CStyleCastExpr 0x563b15772368 <col:29, col:58> 'int' <IntegralCast>
    `-CallExpr 0x563b15772300 <col:34, col:58> 'lua_Integer':'long'
      |-ImplicitCastExpr 0x563b157722e8 <col:34> 'lua_Integer (*)(lua_State *, int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x563b15772200 <col:34> 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)' Function 0x563b15760110 'luaL_checkinteger' 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)'
      |-ImplicitCastExpr 0x563b15772338 <lmathlib.c:147:65> 'lua_State *' <LValueToRValue>
      | `-DeclRefExpr 0x563b15772228 <col:65> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
      `-ParenExpr 0x563b15772270 <./lauxlib.h:104:55, col:57> 'int'
        `-IntegerLiteral 0x563b15772250 <lmathlib.c:147:68> 'int' 2
[B1.6]([B1.12], ([B1.19]))
  21: CallExpr 0x563b15772440 <lmathlib.c:147:3, col:71> 'void'
|-ImplicitCastExpr 0x563b15772428 <col:3> 'void (*)(lua_State *, lua_Number)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563b157720b0 <col:3> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x563b1571f300 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
|-ImplicitCastExpr 0x563b15772478 <col:18> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x563b157720d8 <col:18> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
`-CallExpr 0x563b157723f0 <col:21, col:70> 'double'
  |-ImplicitCastExpr 0x563b157723d8 <col:21> 'double (*)(double, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x563b15772100 <col:21> 'double (double, int)' Function 0x563b156afb30 'ldexp' 'double (double, int)'
  |-CallExpr 0x563b157721b0 <col:27, col:48> 'lua_Number':'double'
  | |-ImplicitCastExpr 0x563b15772198 <col:27> 'lua_Number (*)(lua_State *, int)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x563b15772128 <col:27> 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)' Function 0x563b1575b488 'luaL_checknumber' 'lua_Number (lua_State *, int)':'lua_Number (lua_State *, int)'
  | |-ImplicitCastExpr 0x563b157721e8 <col:44> 'lua_State *' <LValueToRValue>
  | | `-DeclRefExpr 0x563b15772150 <col:44> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
  | `-IntegerLiteral 0x563b15772178 <col:47> 'int' 1
  `-ParenExpr 0x563b15772390 <./lauxlib.h:104:28, col:59> 'int'
    `-CStyleCastExpr 0x563b15772368 <col:29, col:58> 'int' <IntegralCast>
      `-CallExpr 0x563b15772300 <col:34, col:58> 'lua_Integer':'long'
        |-ImplicitCastExpr 0x563b157722e8 <col:34> 'lua_Integer (*)(lua_State *, int)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x563b15772200 <col:34> 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)' Function 0x563b15760110 'luaL_checkinteger' 'lua_Integer (lua_State *, int)':'lua_Integer (lua_State *, int)'
        |-ImplicitCastExpr 0x563b15772338 <lmathlib.c:147:65> 'lua_State *' <LValueToRValue>
        | `-DeclRefExpr 0x563b15772228 <col:65> 'lua_State *' lvalue ParmVar 0x563b15771f78 'L' 'lua_State *'
        `-ParenExpr 0x563b15772270 <./lauxlib.h:104:55, col:57> 'int'
          `-IntegerLiteral 0x563b15772250 <lmathlib.c:147:68> 'int' 2
[B1.2]([B1.4], [B1.20])
  22: IntegerLiteral 0x563b15772490 <lmathlib.c:148:10> 'int' 1
1
  23: ReturnStmt 0x563b157724b0 <lmathlib.c:148:3, col:10>
`-IntegerLiteral 0x563b15772490 <col:10> 'int' 1
return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
