int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data, int strip)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclStmt 0x562132ddf480 <ldump.c:155:2, col:13>col:12
`-VarDecl 0x562132ddf420 <col:2, col:12> col:12 used D 'DumpState':'DumpState'
DumpState D;
   2: DeclRefExpr 0x562132ddf4f8 <ldump.c:156:6> 'lua_State *' lvalue ParmVar 0x562132ddf080 'L' 'lua_State *'
L
   3: ImplicitCastExpr 0x562132ddf520 <ldump.c:156:6> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x562132ddf4f8 <col:6> 'lua_State *' lvalue ParmVar 0x562132ddf080 'L' 'lua_State *'
[B1.2] (ImplicitCastExpr, LValueToRValue, lua_State *)
   4: DeclRefExpr 0x562132ddf498 <ldump.c:156:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
   5: MemberExpr 0x562132ddf4c0 <ldump.c:156:2, col:4> 'lua_State *' lvalue .L 0x562132dd4d80
`-DeclRefExpr 0x562132ddf498 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.4].L
   6: BinaryOperator 0x562132ddf538 <ldump.c:156:2, col:6> 'lua_State *' '='
|-MemberExpr 0x562132ddf4c0 <col:2, col:4> 'lua_State *' lvalue .L 0x562132dd4d80
| `-DeclRefExpr 0x562132ddf498 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
`-ImplicitCastExpr 0x562132ddf520 <col:6> 'lua_State *' <LValueToRValue>
  `-DeclRefExpr 0x562132ddf4f8 <col:6> 'lua_State *' lvalue ParmVar 0x562132ddf080 'L' 'lua_State *'
[B1.5] = [B1.3]
   7: DeclRefExpr 0x562132ddf5c0 <ldump.c:157:11> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' lvalue ParmVar 0x562132ddf160 'w' 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)'
w
   8: ImplicitCastExpr 0x562132ddf5e8 <ldump.c:157:11> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' <LValueToRValue>
`-DeclRefExpr 0x562132ddf5c0 <col:11> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' lvalue ParmVar 0x562132ddf160 'w' 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)'
[B1.7] (ImplicitCastExpr, LValueToRValue, lua_Writer)
   9: DeclRefExpr 0x562132ddf560 <ldump.c:157:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  10: MemberExpr 0x562132ddf588 <ldump.c:157:2, col:4> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' lvalue .writer 0x562132dd4dd8
`-DeclRefExpr 0x562132ddf560 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.9].writer
  11: BinaryOperator 0x562132ddf600 <ldump.c:157:2, col:11> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' '='
|-MemberExpr 0x562132ddf588 <col:2, col:4> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' lvalue .writer 0x562132dd4dd8
| `-DeclRefExpr 0x562132ddf560 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
`-ImplicitCastExpr 0x562132ddf5e8 <col:11> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' <LValueToRValue>
  `-DeclRefExpr 0x562132ddf5c0 <col:11> 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)' lvalue ParmVar 0x562132ddf160 'w' 'lua_Writer':'int (*)(lua_State *, const void *, size_t, void *)'
[B1.10] = [B1.8]
  12: DeclRefExpr 0x562132ddf688 <ldump.c:158:9> 'void *' lvalue ParmVar 0x562132ddf1d8 'data' 'void *'
data
  13: ImplicitCastExpr 0x562132ddf6b0 <ldump.c:158:9> 'void *' <LValueToRValue>
`-DeclRefExpr 0x562132ddf688 <col:9> 'void *' lvalue ParmVar 0x562132ddf1d8 'data' 'void *'
[B1.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: DeclRefExpr 0x562132ddf628 <ldump.c:158:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  15: MemberExpr 0x562132ddf650 <ldump.c:158:2, col:4> 'void *' lvalue .data 0x562132dd4e38
`-DeclRefExpr 0x562132ddf628 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.14].data
  16: BinaryOperator 0x562132ddf6c8 <ldump.c:158:2, col:9> 'void *' '='
|-MemberExpr 0x562132ddf650 <col:2, col:4> 'void *' lvalue .data 0x562132dd4e38
| `-DeclRefExpr 0x562132ddf628 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
`-ImplicitCastExpr 0x562132ddf6b0 <col:9> 'void *' <LValueToRValue>
  `-DeclRefExpr 0x562132ddf688 <col:9> 'void *' lvalue ParmVar 0x562132ddf1d8 'data' 'void *'
[B1.15] = [B1.13]
  17: DeclRefExpr 0x562132ddf750 <ldump.c:159:10> 'int' lvalue ParmVar 0x562132ddf250 'strip' 'int'
strip
  18: ImplicitCastExpr 0x562132ddf778 <ldump.c:159:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x562132ddf750 <col:10> 'int' lvalue ParmVar 0x562132ddf250 'strip' 'int'
[B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: DeclRefExpr 0x562132ddf6f0 <ldump.c:159:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  20: MemberExpr 0x562132ddf718 <ldump.c:159:2, col:4> 'int' lvalue .strip 0x562132dd4e98
`-DeclRefExpr 0x562132ddf6f0 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.19].strip
  21: BinaryOperator 0x562132ddf790 <ldump.c:159:2, col:10> 'int' '='
|-MemberExpr 0x562132ddf718 <col:2, col:4> 'int' lvalue .strip 0x562132dd4e98
| `-DeclRefExpr 0x562132ddf6f0 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
`-ImplicitCastExpr 0x562132ddf778 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x562132ddf750 <col:10> 'int' lvalue ParmVar 0x562132ddf250 'strip' 'int'
[B1.20] = [B1.18]
  22: IntegerLiteral 0x562132ddf880 <ldump.c:160:11> 'int' 0
0
  23: DeclRefExpr 0x562132ddf820 <ldump.c:160:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  24: MemberExpr 0x562132ddf848 <ldump.c:160:2, col:4> 'int' lvalue .status 0x562132dd4ef8
`-DeclRefExpr 0x562132ddf820 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.23].status
  25: BinaryOperator 0x562132ddf8a0 <ldump.c:160:2, col:11> 'int' '='
|-MemberExpr 0x562132ddf848 <col:2, col:4> 'int' lvalue .status 0x562132dd4ef8
| `-DeclRefExpr 0x562132ddf820 <col:2> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
`-IntegerLiteral 0x562132ddf880 <col:11> 'int' 0
[B1.24] = [B1.22]
  26: DeclRefExpr 0x562132ddf8c8 <ldump.c:161:2> 'void (DumpState *)' Function 0x562132ddec80 'DumpHeader' 'void (DumpState *)'
DumpHeader
  27: ImplicitCastExpr 0x562132ddf998 <ldump.c:161:2> 'void (*)(DumpState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x562132ddf8c8 <col:2> 'void (DumpState *)' Function 0x562132ddec80 'DumpHeader' 'void (DumpState *)'
[B1.26] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(DumpState *))
  28: DeclRefExpr 0x562132ddf8f0 <ldump.c:161:14> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  29: UnaryOperator 0x562132ddf918 <ldump.c:161:13, col:14> 'DumpState *' prefix '&'
`-DeclRefExpr 0x562132ddf8f0 <col:14> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
&[B1.28]
  30: CallExpr 0x562132de05d0 <ldump.c:161:2, col:15> 'void'
|-ImplicitCastExpr 0x562132ddf998 <col:2> 'void (*)(DumpState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x562132ddf8c8 <col:2> 'void (DumpState *)' Function 0x562132ddec80 'DumpHeader' 'void (DumpState *)'
`-UnaryOperator 0x562132ddf918 <col:13, col:14> 'DumpState *' prefix '&'
  `-DeclRefExpr 0x562132ddf8f0 <col:14> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.27]([B1.29])
  31: DeclRefExpr 0x562132de0600 <ldump.c:162:2> 'void (const Proto *, const TString *, DumpState *)' Function 0x562132ddd9a0 'DumpFunction' 'void (const Proto *, const TString *, DumpState *)'
DumpFunction
  32: ImplicitCastExpr 0x562132de0718 <ldump.c:162:2> 'void (*)(const Proto *, const TString *, DumpState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x562132de0600 <col:2> 'void (const Proto *, const TString *, DumpState *)' Function 0x562132ddd9a0 'DumpFunction' 'void (const Proto *, const TString *, DumpState *)'
[B1.31] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const Proto *, const TString *, DumpState *))
  33: DeclRefExpr 0x562132de0628 <ldump.c:162:15> 'const Proto *' lvalue ParmVar 0x562132ddf0f0 'f' 'const Proto *'
f
  34: ImplicitCastExpr 0x562132de0770 <ldump.c:162:15> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x562132de0628 <col:15> 'const Proto *' lvalue ParmVar 0x562132ddf0f0 'f' 'const Proto *'
[B1.33] (ImplicitCastExpr, LValueToRValue, const Proto *)
  35: IntegerLiteral 0x562132de0650 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  36: CStyleCastExpr 0x562132de0688 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x562132de0650 <col:24> 'int' 0
(void *)[B1.35] (CStyleCastExpr, NullToPointer, void *)
  37: ImplicitCastExpr 0x562132de0788 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TString *' <NullToPointer>
`-ParenExpr 0x562132de06b0 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x562132de0688 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x562132de0650 <col:24> 'int' 0
([B1.36]) (ImplicitCastExpr, NullToPointer, const TString *)
  38: DeclRefExpr 0x562132de06d0 <ldump.c:162:23> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  39: UnaryOperator 0x562132de06f8 <ldump.c:162:22, col:23> 'DumpState *' prefix '&'
`-DeclRefExpr 0x562132de06d0 <col:23> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
&[B1.38]
  40: CallExpr 0x562132de0730 <ldump.c:162:2, col:24> 'void'
|-ImplicitCastExpr 0x562132de0718 <col:2> 'void (*)(const Proto *, const TString *, DumpState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x562132de0600 <col:2> 'void (const Proto *, const TString *, DumpState *)' Function 0x562132ddd9a0 'DumpFunction' 'void (const Proto *, const TString *, DumpState *)'
|-ImplicitCastExpr 0x562132de0770 <col:15> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x562132de0628 <col:15> 'const Proto *' lvalue ParmVar 0x562132ddf0f0 'f' 'const Proto *'
|-ImplicitCastExpr 0x562132de0788 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TString *' <NullToPointer>
| `-ParenExpr 0x562132de06b0 <col:16, col:25> 'void *'
|   `-CStyleCastExpr 0x562132de0688 <col:17, col:24> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x562132de0650 <col:24> 'int' 0
`-UnaryOperator 0x562132de06f8 <ldump.c:162:22, col:23> 'DumpState *' prefix '&'
  `-DeclRefExpr 0x562132de06d0 <col:23> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.32]([B1.34], [B1.37], [B1.39])
  41: DeclRefExpr 0x562132de07a0 <ldump.c:163:9> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
D
  42: MemberExpr 0x562132de07c8 <ldump.c:163:9, col:11> 'int' lvalue .status 0x562132dd4ef8
`-DeclRefExpr 0x562132de07a0 <col:9> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.41].status
  43: ImplicitCastExpr 0x562132de0800 <ldump.c:163:9, col:11> 'int' <LValueToRValue>
`-MemberExpr 0x562132de07c8 <col:9, col:11> 'int' lvalue .status 0x562132dd4ef8
  `-DeclRefExpr 0x562132de07a0 <col:9> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
[B1.42] (ImplicitCastExpr, LValueToRValue, int)
  44: ReturnStmt 0x562132de0818 <ldump.c:163:2, col:11>
`-ImplicitCastExpr 0x562132de0800 <col:9, col:11> 'int' <LValueToRValue>
  `-MemberExpr 0x562132de07c8 <col:9, col:11> 'int' lvalue .status 0x562132dd4ef8
    `-DeclRefExpr 0x562132de07a0 <col:9> 'DumpState':'DumpState' lvalue Var 0x562132ddf420 'D' 'DumpState':'DumpState'
return [B1.43];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
