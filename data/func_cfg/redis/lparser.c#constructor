static void constructor(LexState *ls, expdesc *t)
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: DeclRefExpr 0x558fa8f199f8 <lparser.c:533:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
   2: ImplicitCastExpr 0x558fa8f19af8 <lparser.c:533:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f199f8 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
   3: DeclRefExpr 0x558fa8f19a20 <lparser.c:533:15> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19b58 <lparser.c:533:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19a20 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f19a48 <lparser.c:533:19> 'int' 125
'}'
   6: CharacterLiteral 0x558fa8f19a60 <lparser.c:533:24> 'int' 123
'{'
   7: DeclRefExpr 0x558fa8f19a78 <lparser.c:533:29> 'int' lvalue Var 0x558fa8f180b0 'line' 'int'
line
   8: ImplicitCastExpr 0x558fa8f19b70 <lparser.c:533:29> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19a78 <col:29> 'int' lvalue Var 0x558fa8f180b0 'line' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8f19b10 <lparser.c:533:3, col:33> 'void'
|-ImplicitCastExpr 0x558fa8f19af8 <col:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f199f8 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f19b58 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19a20 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
|-CharacterLiteral 0x558fa8f19a48 <col:19> 'int' 125
|-CharacterLiteral 0x558fa8f19a60 <col:24> 'int' 123
`-ImplicitCastExpr 0x558fa8f19b70 <col:29> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19a78 <col:29> 'int' lvalue Var 0x558fa8f180b0 'line' 'int'
[B1.2]([B1.4], [B1.5], [B1.6], [B1.8])
  10: DeclRefExpr 0x558fa8f19b88 <lparser.c:534:3> 'void (FuncState *, struct ConsControl *)' Function 0x558fa8f16468 'lastlistfield' 'void (FuncState *, struct ConsControl *)'
lastlistfield
  11: ImplicitCastExpr 0x558fa8f19c20 <lparser.c:534:3> 'void (*)(FuncState *, struct ConsControl *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19b88 <col:3> 'void (FuncState *, struct ConsControl *)' Function 0x558fa8f16468 'lastlistfield' 'void (FuncState *, struct ConsControl *)'
[B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, struct ConsControl *))
  12: DeclRefExpr 0x558fa8f19bb0 <lparser.c:534:17> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
  13: ImplicitCastExpr 0x558fa8f19c70 <lparser.c:534:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19bb0 <col:17> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.12] (ImplicitCastExpr, LValueToRValue, FuncState *)
  14: DeclRefExpr 0x558fa8f19bd8 <lparser.c:534:22> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  15: UnaryOperator 0x558fa8f19c00 <lparser.c:534:21, col:22> 'struct ConsControl *' prefix '&'
`-DeclRefExpr 0x558fa8f19bd8 <col:22> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B1.14]
  16: CallExpr 0x558fa8f19c38 <lparser.c:534:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f19c20 <col:3> 'void (*)(FuncState *, struct ConsControl *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19b88 <col:3> 'void (FuncState *, struct ConsControl *)' Function 0x558fa8f16468 'lastlistfield' 'void (FuncState *, struct ConsControl *)'
|-ImplicitCastExpr 0x558fa8f19c70 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19bb0 <col:17> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f19c00 <col:21, col:22> 'struct ConsControl *' prefix '&'
  `-DeclRefExpr 0x558fa8f19bd8 <col:22> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.11]([B1.13], [B1.15])
  17: DeclRefExpr 0x558fa8f19df0 <lparser.c:535:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
  18: ImplicitCastExpr 0x558fa8f19e18 <lparser.c:535:12> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.17] (ImplicitCastExpr, LValueToRValue, FuncState *)
  19: MemberExpr 0x558fa8f19e30 <lparser.c:535:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.18]->f
  20: ImplicitCastExpr 0x558fa8f19e68 <lparser.c:535:12, col:16> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.19] (ImplicitCastExpr, LValueToRValue, Proto *)
  21: MemberExpr 0x558fa8f19e80 <lparser.c:535:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.20]->code
  22: ImplicitCastExpr 0x558fa8f19ee0 <lparser.c:535:12, col:19> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f19e80 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.21] (ImplicitCastExpr, LValueToRValue, Instruction *)
  23: DeclRefExpr 0x558fa8f19eb8 <lparser.c:535:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
pc
  24: ImplicitCastExpr 0x558fa8f19ef8 <lparser.c:535:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19eb8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.23] (ImplicitCastExpr, LValueToRValue, int)
  25: ArraySubscriptExpr 0x558fa8f19f10 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f19ee0 <col:12, col:19> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f19e80 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f19ef8 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19eb8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.22][[B1.24]]
  26: ImplicitCastExpr 0x558fa8f1a278 <./lopcodes.h:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x558fa8f19f38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x558fa8f19f10 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x558fa8f19ee0 <col:12, col:19> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x558fa8f19e80 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
    |   `-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |       `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
    |         `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x558fa8f19ef8 <col:24> 'int' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f19eb8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
([B1.25]) (ImplicitCastExpr, LValueToRValue, Instruction)
  27: IntegerLiteral 0x558fa8f19f58 <./lopcodes.h:71:39> 'int' 0
0
  28: CStyleCastExpr 0x558fa8f19f88 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
(Instruction)[B1.27] (CStyleCastExpr, IntegralCast, Instruction)
  29: UnaryOperator 0x558fa8f19fb0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
~[B1.28]
  30: IntegerLiteral 0x558fa8f19ff0 <./lopcodes.h:38:17> 'int' 9
9
  31: BinaryOperator 0x558fa8f1a010 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
([B1.29]) << [B1.30]
  32: UnaryOperator 0x558fa8f1a058 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f1a038 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1a010 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
~([B1.31])
  33: IntegerLiteral 0x558fa8f1a098 <./lopcodes.h:44:17> 'int' 0
0
  34: IntegerLiteral 0x558fa8f1a0b8 <./lopcodes.h:42:18> 'int' 6
6
  35: BinaryOperator 0x558fa8f1a0d8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
[B1.33] + [B1.34]
  36: IntegerLiteral 0x558fa8f1a120 <./lopcodes.h:40:17> 'int' 8
8
  37: BinaryOperator 0x558fa8f1a140 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
([B1.35]) + [B1.36]
  38: IntegerLiteral 0x558fa8f1a188 <./lopcodes.h:37:17> 'int' 9
9
  39: BinaryOperator 0x558fa8f1a1a8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x558fa8f1a168 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x558fa8f1a140 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
`-IntegerLiteral 0x558fa8f1a188 <line:37:17> 'int' 9
([B1.37]) + [B1.38]
  40: BinaryOperator 0x558fa8f1a1f0 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1a078 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1a058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f1a038 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f1a010 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
`-ParenExpr 0x558fa8f1a1d0 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f1a1a8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x558fa8f1a168 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x558fa8f1a140 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
    `-IntegerLiteral 0x558fa8f1a188 <line:37:17> 'int' 9
([B1.32]) << ([B1.39])
  41: UnaryOperator 0x558fa8f1a238 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f1a218 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1a1f0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1a078 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1a058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f1a038 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f1a010 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
    `-ParenExpr 0x558fa8f1a1d0 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x558fa8f1a1a8 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x558fa8f1a168 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x558fa8f1a140 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
        `-IntegerLiteral 0x558fa8f1a188 <line:37:17> 'int' 9
~([B1.40])
  42: BinaryOperator 0x558fa8f1a290 <./lopcodes.h:89:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x558fa8f1a278 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x558fa8f19f38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x558fa8f19f10 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x558fa8f19ee0 <col:12, col:19> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x558fa8f19e80 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|     |   `-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|     |       `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x558fa8f19ef8 <col:24> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f19eb8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
`-ParenExpr 0x558fa8f1a258 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x558fa8f1a238 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x558fa8f1a218 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f1a1f0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f1a078 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f1a058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f1a038 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f1a010 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
        `-ParenExpr 0x558fa8f1a1d0 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x558fa8f1a1a8 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x558fa8f1a168 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x558fa8f1a140 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
            `-IntegerLiteral 0x558fa8f1a188 <line:37:17> 'int' 9
[B1.26] & ([B1.41])
  43: DeclRefExpr 0x558fa8f1a2d8 <lparser.c:535:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
luaO_int2fb
  44: ImplicitCastExpr 0x558fa8f1a388 <lparser.c:535:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
[B1.43] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(unsigned int))
  45: DeclRefExpr 0x558fa8f1a300 <lparser.c:535:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  46: MemberExpr 0x558fa8f1a328 <lparser.c:535:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
`-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.45].na
  47: ImplicitCastExpr 0x558fa8f1a3d0 <lparser.c:535:41, col:44> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
  `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.46] (ImplicitCastExpr, LValueToRValue, int)
  48: ImplicitCastExpr 0x558fa8f1a3e8 <lparser.c:535:41, col:44> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
    `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.47] (ImplicitCastExpr, IntegralCast, unsigned int)
  49: CallExpr 0x558fa8f1a3a0 <lparser.c:535:29, col:46> 'int'
|-ImplicitCastExpr 0x558fa8f1a388 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
`-ImplicitCastExpr 0x558fa8f1a3e8 <col:41, col:44> 'unsigned int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
      `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.44]([B1.48])
  50: CStyleCastExpr 0x558fa8f1a460 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x558fa8f1a440 <col:26, col:30> 'int'
  `-CallExpr 0x558fa8f1a3a0 <lparser.c:535:29, col:46> 'int'
    |-ImplicitCastExpr 0x558fa8f1a388 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
    `-ImplicitCastExpr 0x558fa8f1a3e8 <col:41, col:44> 'unsigned int' <IntegralCast>
      `-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
        `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
          `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
(Instruction)([B1.49]) (CStyleCastExpr, IntegralCast, Instruction)
  51: IntegerLiteral 0x558fa8f1a4a8 <./lopcodes.h:44:17> 'int' 0
0
  52: IntegerLiteral 0x558fa8f1a4c8 <./lopcodes.h:42:18> 'int' 6
6
  53: BinaryOperator 0x558fa8f1a4e8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
[B1.51] + [B1.52]
  54: IntegerLiteral 0x558fa8f1a530 <./lopcodes.h:40:17> 'int' 8
8
  55: BinaryOperator 0x558fa8f1a550 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f1a510 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f1a4e8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f1a530 <line:40:17> 'int' 8
([B1.53]) + [B1.54]
  56: IntegerLiteral 0x558fa8f1a598 <./lopcodes.h:37:17> 'int' 9
9
  57: BinaryOperator 0x558fa8f1a5b8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x558fa8f1a578 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x558fa8f1a550 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x558fa8f1a510 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x558fa8f1a4e8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x558fa8f1a530 <line:40:17> 'int' 8
`-IntegerLiteral 0x558fa8f1a598 <line:37:17> 'int' 9
([B1.55]) + [B1.56]
  58: BinaryOperator 0x558fa8f1a600 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1a488 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x558fa8f1a460 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x558fa8f1a440 <col:26, col:30> 'int'
|     `-CallExpr 0x558fa8f1a3a0 <lparser.c:535:29, col:46> 'int'
|       |-ImplicitCastExpr 0x558fa8f1a388 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
|       `-ImplicitCastExpr 0x558fa8f1a3e8 <col:41, col:44> 'unsigned int' <IntegralCast>
|         `-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
|           `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
|             `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
`-ParenExpr 0x558fa8f1a5e0 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f1a5b8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x558fa8f1a578 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x558fa8f1a550 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x558fa8f1a510 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x558fa8f1a4e8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x558fa8f1a530 <line:40:17> 'int' 8
    `-IntegerLiteral 0x558fa8f1a598 <line:37:17> 'int' 9
([B1.50]) << ([B1.57])
  59: IntegerLiteral 0x558fa8f1a648 <./lopcodes.h:71:39> 'int' 0
0
  60: CStyleCastExpr 0x558fa8f1a678 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
(Instruction)[B1.59] (CStyleCastExpr, IntegralCast, Instruction)
  61: UnaryOperator 0x558fa8f1a6a0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
~[B1.60]
  62: IntegerLiteral 0x558fa8f1a6e0 <./lopcodes.h:38:17> 'int' 9
9
  63: BinaryOperator 0x558fa8f1a700 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1a6c0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1a6a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f1a6e0 <line:38:17> 'int' 9
([B1.61]) << [B1.62]
  64: UnaryOperator 0x558fa8f1a748 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f1a728 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1a700 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1a6c0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1a6a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f1a6e0 <line:38:17> 'int' 9
~([B1.63])
  65: IntegerLiteral 0x558fa8f1a788 <./lopcodes.h:44:17> 'int' 0
0
  66: IntegerLiteral 0x558fa8f1a7a8 <./lopcodes.h:42:18> 'int' 6
6
  67: BinaryOperator 0x558fa8f1a7c8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
[B1.65] + [B1.66]
  68: IntegerLiteral 0x558fa8f1a810 <./lopcodes.h:40:17> 'int' 8
8
  69: BinaryOperator 0x558fa8f1a830 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f1a7f0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f1a7c8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f1a810 <line:40:17> 'int' 8
([B1.67]) + [B1.68]
  70: IntegerLiteral 0x558fa8f1a878 <./lopcodes.h:37:17> 'int' 9
9
  71: BinaryOperator 0x558fa8f1a898 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x558fa8f1a858 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x558fa8f1a830 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x558fa8f1a7f0 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x558fa8f1a7c8 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x558fa8f1a810 <line:40:17> 'int' 8
`-IntegerLiteral 0x558fa8f1a878 <line:37:17> 'int' 9
([B1.69]) + [B1.70]
  72: BinaryOperator 0x558fa8f1a8e0 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1a768 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1a748 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f1a728 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f1a700 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f1a6c0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f1a6a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f1a6e0 <line:38:17> 'int' 9
`-ParenExpr 0x558fa8f1a8c0 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f1a898 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x558fa8f1a858 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x558fa8f1a830 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x558fa8f1a7f0 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x558fa8f1a7c8 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x558fa8f1a810 <line:40:17> 'int' 8
    `-IntegerLiteral 0x558fa8f1a878 <line:37:17> 'int' 9
([B1.64]) << ([B1.71])
  73: BinaryOperator 0x558fa8f1a928 <./lopcodes.h:90:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x558fa8f1a628 <line:90:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x558fa8f1a600 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x558fa8f1a488 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x558fa8f1a460 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x558fa8f1a440 <col:26, col:30> 'int'
|   |     `-CallExpr 0x558fa8f1a3a0 <lparser.c:535:29, col:46> 'int'
|   |       |-ImplicitCastExpr 0x558fa8f1a388 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
|   |       `-ImplicitCastExpr 0x558fa8f1a3e8 <col:41, col:44> 'unsigned int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
|   |           `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
|   |             `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
|   `-ParenExpr 0x558fa8f1a5e0 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x558fa8f1a5b8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x558fa8f1a578 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x558fa8f1a550 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x558fa8f1a510 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x558fa8f1a4e8 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x558fa8f1a530 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x558fa8f1a598 <line:37:17> 'int' 9
`-ParenExpr 0x558fa8f1a908 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1a8e0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1a768 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1a748 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f1a728 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f1a700 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f1a6c0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f1a6a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f1a6e0 <line:38:17> 'int' 9
    `-ParenExpr 0x558fa8f1a8c0 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x558fa8f1a898 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x558fa8f1a858 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x558fa8f1a830 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x558fa8f1a7f0 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x558fa8f1a7c8 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x558fa8f1a810 <line:40:17> 'int' 8
        `-IntegerLiteral 0x558fa8f1a878 <line:37:17> 'int' 9
([B1.58]) & ([B1.72])
  74: BinaryOperator 0x558fa8f1a970 <./lopcodes.h:89:31, line:90:53> 'unsigned int' '|'
|-ParenExpr 0x558fa8f1a2b8 <line:89:31, col:55> 'unsigned int'
| `-BinaryOperator 0x558fa8f1a290 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x558fa8f1a278 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x558fa8f19f38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x558fa8f19f10 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x558fa8f19ee0 <col:12, col:19> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x558fa8f19e80 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   |     |   `-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
|   |     |     `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|   |     |       `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|   |     `-ImplicitCastExpr 0x558fa8f19ef8 <col:24> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x558fa8f19eb8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
|   `-ParenExpr 0x558fa8f1a258 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x558fa8f1a238 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x558fa8f1a218 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x558fa8f1a1f0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x558fa8f1a078 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x558fa8f1a058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x558fa8f1a038 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x558fa8f1a010 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
|           `-ParenExpr 0x558fa8f1a1d0 <line:47:16, col:31> 'int'
|             `-BinaryOperator 0x558fa8f1a1a8 <line:46:16, line:37:17> 'int' '+'
|               |-ParenExpr 0x558fa8f1a168 <line:46:16, col:31> 'int'
|               | `-BinaryOperator 0x558fa8f1a140 <line:45:16, line:40:17> 'int' '+'
|               |   |-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
|               |   | `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
|               |   |   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
|               |   |   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
|               |   `-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
|               `-IntegerLiteral 0x558fa8f1a188 <line:37:17> 'int' 9
`-ParenExpr 0x558fa8f1a950 <line:90:3, col:53> 'unsigned int'
  `-BinaryOperator 0x558fa8f1a928 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x558fa8f1a628 <line:90:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x558fa8f1a600 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x558fa8f1a488 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x558fa8f1a460 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x558fa8f1a440 <col:26, col:30> 'int'
    |   |     `-CallExpr 0x558fa8f1a3a0 <lparser.c:535:29, col:46> 'int'
    |   |       |-ImplicitCastExpr 0x558fa8f1a388 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
    |   |       `-ImplicitCastExpr 0x558fa8f1a3e8 <col:41, col:44> 'unsigned int' <IntegralCast>
    |   |         `-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
    |   |           `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
    |   |             `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
    |   `-ParenExpr 0x558fa8f1a5e0 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x558fa8f1a5b8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x558fa8f1a578 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x558fa8f1a550 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x558fa8f1a510 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x558fa8f1a4e8 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x558fa8f1a530 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x558fa8f1a598 <line:37:17> 'int' 9
    `-ParenExpr 0x558fa8f1a908 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f1a8e0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f1a768 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f1a748 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f1a728 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f1a700 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f1a6c0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f1a6a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f1a6e0 <line:38:17> 'int' 9
        `-ParenExpr 0x558fa8f1a8c0 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x558fa8f1a898 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x558fa8f1a858 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x558fa8f1a830 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x558fa8f1a7f0 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x558fa8f1a7c8 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x558fa8f1a810 <line:40:17> 'int' 8
            `-IntegerLiteral 0x558fa8f1a878 <line:37:17> 'int' 9
([B1.42]) | ([B1.73])
  75: DeclRefExpr 0x558fa8f19c88 <lparser.c:535:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
  76: ImplicitCastExpr 0x558fa8f19cb0 <lparser.c:535:12> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.75] (ImplicitCastExpr, LValueToRValue, FuncState *)
  77: MemberExpr 0x558fa8f19cc8 <lparser.c:535:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f19cb0 <col:12> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.76]->f
  78: ImplicitCastExpr 0x558fa8f19d00 <lparser.c:535:12, col:16> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f19cc8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f19cb0 <col:12> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.77] (ImplicitCastExpr, LValueToRValue, Proto *)
  79: MemberExpr 0x558fa8f19d18 <lparser.c:535:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f19d00 <col:12, col:16> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f19cc8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f19cb0 <col:12> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.78]->code
  80: ImplicitCastExpr 0x558fa8f19d78 <lparser.c:535:12, col:19> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f19d18 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f19d00 <col:12, col:16> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f19cc8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f19cb0 <col:12> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.79] (ImplicitCastExpr, LValueToRValue, Instruction *)
  81: DeclRefExpr 0x558fa8f19d50 <lparser.c:535:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
pc
  82: ImplicitCastExpr 0x558fa8f19d90 <lparser.c:535:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19d50 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.81] (ImplicitCastExpr, LValueToRValue, int)
  83: ArraySubscriptExpr 0x558fa8f19da8 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f19d78 <col:12, col:19> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f19d18 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f19d00 <col:12, col:16> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f19cc8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f19cb0 <col:12> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f19d90 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19d50 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.80][[B1.82]]
  84: BinaryOperator 0x558fa8f1a9b8 <./lopcodes.h:89:24, line:90:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x558fa8f19dd0 <line:89:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ArraySubscriptExpr 0x558fa8f19da8 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
|   |-ImplicitCastExpr 0x558fa8f19d78 <col:12, col:19> 'Instruction *' <LValueToRValue>
|   | `-MemberExpr 0x558fa8f19d18 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   |   `-ImplicitCastExpr 0x558fa8f19d00 <col:12, col:16> 'Proto *' <LValueToRValue>
|   |     `-MemberExpr 0x558fa8f19cc8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|   |       `-ImplicitCastExpr 0x558fa8f19cb0 <col:12> 'FuncState *' <LValueToRValue>
|   |         `-DeclRefExpr 0x558fa8f19c88 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|   `-ImplicitCastExpr 0x558fa8f19d90 <col:24> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f19d50 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
`-ParenExpr 0x558fa8f1a998 <./lopcodes.h:89:30, line:90:54> 'unsigned int'
  `-BinaryOperator 0x558fa8f1a970 <line:89:31, line:90:53> 'unsigned int' '|'
    |-ParenExpr 0x558fa8f1a2b8 <line:89:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x558fa8f1a290 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x558fa8f1a278 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x558fa8f19f38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x558fa8f19f10 <lparser.c:535:12, col:26> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x558fa8f19ee0 <col:12, col:19> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x558fa8f19e80 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
    |   |     |   `-ImplicitCastExpr 0x558fa8f19e68 <col:12, col:16> 'Proto *' <LValueToRValue>
    |   |     |     `-MemberExpr 0x558fa8f19e30 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |   |     |       `-ImplicitCastExpr 0x558fa8f19e18 <col:12> 'FuncState *' <LValueToRValue>
    |   |     |         `-DeclRefExpr 0x558fa8f19df0 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
    |   |     `-ImplicitCastExpr 0x558fa8f19ef8 <col:24> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x558fa8f19eb8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
    |   `-ParenExpr 0x558fa8f1a258 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x558fa8f1a238 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x558fa8f1a218 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x558fa8f1a1f0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x558fa8f1a078 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x558fa8f1a058 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x558fa8f1a038 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x558fa8f1a010 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x558fa8f19fd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x558fa8f19fb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x558fa8f19f88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x558fa8f19f58 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x558fa8f19ff0 <line:38:17> 'int' 9
    |           `-ParenExpr 0x558fa8f1a1d0 <line:47:16, col:31> 'int'
    |             `-BinaryOperator 0x558fa8f1a1a8 <line:46:16, line:37:17> 'int' '+'
    |               |-ParenExpr 0x558fa8f1a168 <line:46:16, col:31> 'int'
    |               | `-BinaryOperator 0x558fa8f1a140 <line:45:16, line:40:17> 'int' '+'
    |               |   |-ParenExpr 0x558fa8f1a100 <line:45:16, col:33> 'int'
    |               |   | `-BinaryOperator 0x558fa8f1a0d8 <line:44:17, line:42:18> 'int' '+'
    |               |   |   |-IntegerLiteral 0x558fa8f1a098 <line:44:17> 'int' 0
    |               |   |   `-IntegerLiteral 0x558fa8f1a0b8 <line:42:18> 'int' 6
    |               |   `-IntegerLiteral 0x558fa8f1a120 <line:40:17> 'int' 8
    |               `-IntegerLiteral 0x558fa8f1a188 <line:37:17> 'int' 9
    `-ParenExpr 0x558fa8f1a950 <line:90:3, col:53> 'unsigned int'
      `-BinaryOperator 0x558fa8f1a928 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x558fa8f1a628 <line:90:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x558fa8f1a600 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x558fa8f1a488 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x558fa8f1a460 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x558fa8f1a440 <col:26, col:30> 'int'
        |   |     `-CallExpr 0x558fa8f1a3a0 <lparser.c:535:29, col:46> 'int'
        |   |       |-ImplicitCastExpr 0x558fa8f1a388 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
        |   |       | `-DeclRefExpr 0x558fa8f1a2d8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
        |   |       `-ImplicitCastExpr 0x558fa8f1a3e8 <col:41, col:44> 'unsigned int' <IntegralCast>
        |   |         `-ImplicitCastExpr 0x558fa8f1a3d0 <col:41, col:44> 'int' <LValueToRValue>
        |   |           `-MemberExpr 0x558fa8f1a328 <col:41, col:44> 'int' lvalue .na 0x558fa8f13ae8
        |   |             `-DeclRefExpr 0x558fa8f1a300 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
        |   `-ParenExpr 0x558fa8f1a5e0 <./lopcodes.h:47:16, col:31> 'int'
        |     `-BinaryOperator 0x558fa8f1a5b8 <line:46:16, line:37:17> 'int' '+'
        |       |-ParenExpr 0x558fa8f1a578 <line:46:16, col:31> 'int'
        |       | `-BinaryOperator 0x558fa8f1a550 <line:45:16, line:40:17> 'int' '+'
        |       |   |-ParenExpr 0x558fa8f1a510 <line:45:16, col:33> 'int'
        |       |   | `-BinaryOperator 0x558fa8f1a4e8 <line:44:17, line:42:18> 'int' '+'
        |       |   |   |-IntegerLiteral 0x558fa8f1a4a8 <line:44:17> 'int' 0
        |       |   |   `-IntegerLiteral 0x558fa8f1a4c8 <line:42:18> 'int' 6
        |       |   `-IntegerLiteral 0x558fa8f1a530 <line:40:17> 'int' 8
        |       `-IntegerLiteral 0x558fa8f1a598 <line:37:17> 'int' 9
        `-ParenExpr 0x558fa8f1a908 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x558fa8f1a8e0 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x558fa8f1a768 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x558fa8f1a748 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x558fa8f1a728 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x558fa8f1a700 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x558fa8f1a6c0 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x558fa8f1a6a0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x558fa8f1a678 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x558fa8f1a648 <col:39> 'int' 0
            |       `-IntegerLiteral 0x558fa8f1a6e0 <line:38:17> 'int' 9
            `-ParenExpr 0x558fa8f1a8c0 <line:47:16, col:31> 'int'
              `-BinaryOperator 0x558fa8f1a898 <line:46:16, line:37:17> 'int' '+'
                |-ParenExpr 0x558fa8f1a858 <line:46:16, col:31> 'int'
                | `-BinaryOperator 0x558fa8f1a830 <line:45:16, line:40:17> 'int' '+'
                |   |-ParenExpr 0x558fa8f1a7f0 <line:45:16, col:33> 'int'
                |   | `-BinaryOperator 0x558fa8f1a7c8 <line:44:17, line:42:18> 'int' '+'
                |   |   |-IntegerLiteral 0x558fa8f1a788 <line:44:17> 'int' 0
                |   |   `-IntegerLiteral 0x558fa8f1a7a8 <line:42:18> 'int' 6
                |   `-IntegerLiteral 0x558fa8f1a810 <line:40:17> 'int' 8
                `-IntegerLiteral 0x558fa8f1a878 <line:37:17> 'int' 9
([B1.83]) = ([B1.74])
  85: DeclRefExpr 0x558fa8f1ab68 <lparser.c:536:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
  86: ImplicitCastExpr 0x558fa8f1ab90 <lparser.c:536:12> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.85] (ImplicitCastExpr, LValueToRValue, FuncState *)
  87: MemberExpr 0x558fa8f1aba8 <lparser.c:536:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.86]->f
  88: ImplicitCastExpr 0x558fa8f1abe0 <lparser.c:536:12, col:16> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.87] (ImplicitCastExpr, LValueToRValue, Proto *)
  89: MemberExpr 0x558fa8f1abf8 <lparser.c:536:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.88]->code
  90: ImplicitCastExpr 0x558fa8f1ac58 <lparser.c:536:12, col:19> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f1abf8 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.89] (ImplicitCastExpr, LValueToRValue, Instruction *)
  91: DeclRefExpr 0x558fa8f1ac30 <lparser.c:536:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
pc
  92: ImplicitCastExpr 0x558fa8f1ac70 <lparser.c:536:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1ac30 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.91] (ImplicitCastExpr, LValueToRValue, int)
  93: ArraySubscriptExpr 0x558fa8f1ac88 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f1ac58 <col:12, col:19> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f1abf8 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f1ac70 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1ac30 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.90][[B1.92]]
  94: ImplicitCastExpr 0x558fa8f1af88 <./lopcodes.h:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x558fa8f1acb0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x558fa8f1ac88 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x558fa8f1ac58 <col:12, col:19> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x558fa8f1abf8 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
    |   `-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |       `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
    |         `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x558fa8f1ac70 <col:24> 'int' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1ac30 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
([B1.93]) (ImplicitCastExpr, LValueToRValue, Instruction)
  95: IntegerLiteral 0x558fa8f1acd0 <./lopcodes.h:71:39> 'int' 0
0
  96: CStyleCastExpr 0x558fa8f1ad00 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
(Instruction)[B1.95] (CStyleCastExpr, IntegralCast, Instruction)
  97: UnaryOperator 0x558fa8f1ad28 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
~[B1.96]
  98: IntegerLiteral 0x558fa8f1ad68 <./lopcodes.h:37:17> 'int' 9
9
  99: BinaryOperator 0x558fa8f1ad88 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
([B1.97]) << [B1.98]
 100: UnaryOperator 0x558fa8f1add0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f1adb0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1ad88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
~([B1.99])
 101: IntegerLiteral 0x558fa8f1ae10 <./lopcodes.h:44:17> 'int' 0
0
 102: IntegerLiteral 0x558fa8f1ae30 <./lopcodes.h:42:18> 'int' 6
6
 103: BinaryOperator 0x558fa8f1ae50 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
[B1.101] + [B1.102]
 104: IntegerLiteral 0x558fa8f1ae98 <./lopcodes.h:40:17> 'int' 8
8
 105: BinaryOperator 0x558fa8f1aeb8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f1ae78 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f1ae50 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f1ae98 <line:40:17> 'int' 8
([B1.103]) + [B1.104]
 106: BinaryOperator 0x558fa8f1af00 <./lopcodes.h:71:21, line:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1adf0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1add0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f1adb0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f1ad88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
`-ParenExpr 0x558fa8f1aee0 <line:46:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f1aeb8 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x558fa8f1ae78 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x558fa8f1ae50 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f1ae98 <line:40:17> 'int' 8
([B1.100]) << ([B1.105])
 107: UnaryOperator 0x558fa8f1af48 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f1af28 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1af00 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1adf0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1add0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f1adb0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f1ad88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
    `-ParenExpr 0x558fa8f1aee0 <line:46:16, col:31> 'int'
      `-BinaryOperator 0x558fa8f1aeb8 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x558fa8f1ae78 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x558fa8f1ae50 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
        `-IntegerLiteral 0x558fa8f1ae98 <line:40:17> 'int' 8
~([B1.106])
 108: BinaryOperator 0x558fa8f1afa0 <./lopcodes.h:93:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x558fa8f1af88 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x558fa8f1acb0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x558fa8f1ac88 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x558fa8f1ac58 <col:12, col:19> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x558fa8f1abf8 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|     |   `-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|     |       `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x558fa8f1ac70 <col:24> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f1ac30 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
`-ParenExpr 0x558fa8f1af68 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x558fa8f1af48 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x558fa8f1af28 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f1af00 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f1adf0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f1add0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f1adb0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f1ad88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
        `-ParenExpr 0x558fa8f1aee0 <line:46:16, col:31> 'int'
          `-BinaryOperator 0x558fa8f1aeb8 <line:45:16, line:40:17> 'int' '+'
            |-ParenExpr 0x558fa8f1ae78 <line:45:16, col:33> 'int'
            | `-BinaryOperator 0x558fa8f1ae50 <line:44:17, line:42:18> 'int' '+'
            |   |-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
            |   `-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
            `-IntegerLiteral 0x558fa8f1ae98 <line:40:17> 'int' 8
[B1.94] & ([B1.107])
 109: DeclRefExpr 0x558fa8f1afe8 <lparser.c:536:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
luaO_int2fb
 110: ImplicitCastExpr 0x558fa8f1b070 <lparser.c:536:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
[B1.109] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(unsigned int))
 111: DeclRefExpr 0x558fa8f1b010 <lparser.c:536:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
 112: MemberExpr 0x558fa8f1b038 <lparser.c:536:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
`-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.111].nh
 113: ImplicitCastExpr 0x558fa8f1b0b8 <lparser.c:536:41, col:44> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
  `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.112] (ImplicitCastExpr, LValueToRValue, int)
 114: ImplicitCastExpr 0x558fa8f1b0d0 <lparser.c:536:41, col:44> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
    `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.113] (ImplicitCastExpr, IntegralCast, unsigned int)
 115: CallExpr 0x558fa8f1b088 <lparser.c:536:29, col:46> 'int'
|-ImplicitCastExpr 0x558fa8f1b070 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
`-ImplicitCastExpr 0x558fa8f1b0d0 <col:41, col:44> 'unsigned int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
      `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B1.110]([B1.114])
 116: CStyleCastExpr 0x558fa8f1b148 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x558fa8f1b128 <col:26, col:30> 'int'
  `-CallExpr 0x558fa8f1b088 <lparser.c:536:29, col:46> 'int'
    |-ImplicitCastExpr 0x558fa8f1b070 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
    `-ImplicitCastExpr 0x558fa8f1b0d0 <col:41, col:44> 'unsigned int' <IntegralCast>
      `-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
        `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
          `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
(Instruction)([B1.115]) (CStyleCastExpr, IntegralCast, Instruction)
 117: IntegerLiteral 0x558fa8f1b360 <./lopcodes.h:44:17> 'int' 0
0
 118: IntegerLiteral 0x558fa8f1b380 <./lopcodes.h:42:18> 'int' 6
6
 119: BinaryOperator 0x558fa8f1b3a0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f1b360 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f1b380 <line:42:18> 'int' 6
[B1.117] + [B1.118]
 120: IntegerLiteral 0x558fa8f1b3e8 <./lopcodes.h:40:17> 'int' 8
8
 121: BinaryOperator 0x558fa8f1b408 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f1b3c8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f1b3a0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f1b360 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f1b380 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f1b3e8 <line:40:17> 'int' 8
([B1.119]) + [B1.120]
 122: BinaryOperator 0x558fa8f1b450 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1b340 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x558fa8f1b148 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x558fa8f1b128 <col:26, col:30> 'int'
|     `-CallExpr 0x558fa8f1b088 <lparser.c:536:29, col:46> 'int'
|       |-ImplicitCastExpr 0x558fa8f1b070 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
|       `-ImplicitCastExpr 0x558fa8f1b0d0 <col:41, col:44> 'unsigned int' <IntegralCast>
|         `-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
|           `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
|             `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
`-ParenExpr 0x558fa8f1b430 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f1b408 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x558fa8f1b3c8 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x558fa8f1b3a0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x558fa8f1b360 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x558fa8f1b380 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f1b3e8 <line:40:17> 'int' 8
([B1.116]) << ([B1.121])
 123: IntegerLiteral 0x558fa8f1b498 <./lopcodes.h:71:39> 'int' 0
0
 124: CStyleCastExpr 0x558fa8f1b4c8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
(Instruction)[B1.123] (CStyleCastExpr, IntegralCast, Instruction)
 125: UnaryOperator 0x558fa8f1b4f0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
~[B1.124]
 126: IntegerLiteral 0x558fa8f1b530 <./lopcodes.h:37:17> 'int' 9
9
 127: BinaryOperator 0x558fa8f1b550 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1b510 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1b4f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f1b530 <line:37:17> 'int' 9
([B1.125]) << [B1.126]
 128: UnaryOperator 0x558fa8f1b598 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f1b578 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1b550 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1b510 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1b4f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f1b530 <line:37:17> 'int' 9
~([B1.127])
 129: IntegerLiteral 0x558fa8f1b5d8 <./lopcodes.h:44:17> 'int' 0
0
 130: IntegerLiteral 0x558fa8f1b5f8 <./lopcodes.h:42:18> 'int' 6
6
 131: BinaryOperator 0x558fa8f1b618 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x558fa8f1b5d8 <line:44:17> 'int' 0
`-IntegerLiteral 0x558fa8f1b5f8 <line:42:18> 'int' 6
[B1.129] + [B1.130]
 132: IntegerLiteral 0x558fa8f1b660 <./lopcodes.h:40:17> 'int' 8
8
 133: BinaryOperator 0x558fa8f1b680 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x558fa8f1b640 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x558fa8f1b618 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x558fa8f1b5d8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x558fa8f1b5f8 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f1b660 <line:40:17> 'int' 8
([B1.131]) + [B1.132]
 134: BinaryOperator 0x558fa8f1b6c8 <./lopcodes.h:71:21, line:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f1b5b8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f1b598 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f1b578 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f1b550 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f1b510 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f1b4f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f1b530 <line:37:17> 'int' 9
`-ParenExpr 0x558fa8f1b6a8 <line:46:16, col:31> 'int'
  `-BinaryOperator 0x558fa8f1b680 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x558fa8f1b640 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x558fa8f1b618 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x558fa8f1b5d8 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x558fa8f1b5f8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f1b660 <line:40:17> 'int' 8
([B1.128]) << ([B1.133])
 135: BinaryOperator 0x558fa8f1b710 <./lopcodes.h:94:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x558fa8f1b478 <line:94:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x558fa8f1b450 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x558fa8f1b340 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x558fa8f1b148 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x558fa8f1b128 <col:26, col:30> 'int'
|   |     `-CallExpr 0x558fa8f1b088 <lparser.c:536:29, col:46> 'int'
|   |       |-ImplicitCastExpr 0x558fa8f1b070 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
|   |       `-ImplicitCastExpr 0x558fa8f1b0d0 <col:41, col:44> 'unsigned int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
|   |           `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
|   |             `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
|   `-ParenExpr 0x558fa8f1b430 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x558fa8f1b408 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x558fa8f1b3c8 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x558fa8f1b3a0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x558fa8f1b360 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x558fa8f1b380 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x558fa8f1b3e8 <line:40:17> 'int' 8
`-ParenExpr 0x558fa8f1b6f0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f1b6c8 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f1b5b8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f1b598 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f1b578 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f1b550 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f1b510 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f1b4f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f1b530 <line:37:17> 'int' 9
    `-ParenExpr 0x558fa8f1b6a8 <line:46:16, col:31> 'int'
      `-BinaryOperator 0x558fa8f1b680 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x558fa8f1b640 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x558fa8f1b618 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x558fa8f1b5d8 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x558fa8f1b5f8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x558fa8f1b660 <line:40:17> 'int' 8
([B1.122]) & ([B1.134])
 136: BinaryOperator 0x558fa8f1b758 <./lopcodes.h:93:31, line:94:53> 'unsigned int' '|'
|-ParenExpr 0x558fa8f1afc8 <line:93:31, col:55> 'unsigned int'
| `-BinaryOperator 0x558fa8f1afa0 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x558fa8f1af88 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x558fa8f1acb0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x558fa8f1ac88 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x558fa8f1ac58 <col:12, col:19> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x558fa8f1abf8 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   |     |   `-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
|   |     |     `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|   |     |       `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|   |     `-ImplicitCastExpr 0x558fa8f1ac70 <col:24> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x558fa8f1ac30 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
|   `-ParenExpr 0x558fa8f1af68 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x558fa8f1af48 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x558fa8f1af28 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x558fa8f1af00 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x558fa8f1adf0 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x558fa8f1add0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x558fa8f1adb0 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x558fa8f1ad88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
|           `-ParenExpr 0x558fa8f1aee0 <line:46:16, col:31> 'int'
|             `-BinaryOperator 0x558fa8f1aeb8 <line:45:16, line:40:17> 'int' '+'
|               |-ParenExpr 0x558fa8f1ae78 <line:45:16, col:33> 'int'
|               | `-BinaryOperator 0x558fa8f1ae50 <line:44:17, line:42:18> 'int' '+'
|               |   |-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
|               |   `-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x558fa8f1ae98 <line:40:17> 'int' 8
`-ParenExpr 0x558fa8f1b738 <line:94:3, col:53> 'unsigned int'
  `-BinaryOperator 0x558fa8f1b710 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x558fa8f1b478 <line:94:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x558fa8f1b450 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x558fa8f1b340 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x558fa8f1b148 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x558fa8f1b128 <col:26, col:30> 'int'
    |   |     `-CallExpr 0x558fa8f1b088 <lparser.c:536:29, col:46> 'int'
    |   |       |-ImplicitCastExpr 0x558fa8f1b070 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
    |   |       `-ImplicitCastExpr 0x558fa8f1b0d0 <col:41, col:44> 'unsigned int' <IntegralCast>
    |   |         `-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
    |   |           `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
    |   |             `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
    |   `-ParenExpr 0x558fa8f1b430 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x558fa8f1b408 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x558fa8f1b3c8 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x558fa8f1b3a0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x558fa8f1b360 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x558fa8f1b380 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x558fa8f1b3e8 <line:40:17> 'int' 8
    `-ParenExpr 0x558fa8f1b6f0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f1b6c8 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f1b5b8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f1b598 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f1b578 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f1b550 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f1b510 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f1b4f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f1b530 <line:37:17> 'int' 9
        `-ParenExpr 0x558fa8f1b6a8 <line:46:16, col:31> 'int'
          `-BinaryOperator 0x558fa8f1b680 <line:45:16, line:40:17> 'int' '+'
            |-ParenExpr 0x558fa8f1b640 <line:45:16, col:33> 'int'
            | `-BinaryOperator 0x558fa8f1b618 <line:44:17, line:42:18> 'int' '+'
            |   |-IntegerLiteral 0x558fa8f1b5d8 <line:44:17> 'int' 0
            |   `-IntegerLiteral 0x558fa8f1b5f8 <line:42:18> 'int' 6
            `-IntegerLiteral 0x558fa8f1b660 <line:40:17> 'int' 8
([B1.108]) | ([B1.135])
 137: DeclRefExpr 0x558fa8f1aa00 <lparser.c:536:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
 138: ImplicitCastExpr 0x558fa8f1aa28 <lparser.c:536:12> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.137] (ImplicitCastExpr, LValueToRValue, FuncState *)
 139: MemberExpr 0x558fa8f1aa40 <lparser.c:536:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f1aa28 <col:12> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.138]->f
 140: ImplicitCastExpr 0x558fa8f1aa78 <lparser.c:536:12, col:16> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f1aa40 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f1aa28 <col:12> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.139] (ImplicitCastExpr, LValueToRValue, Proto *)
 141: MemberExpr 0x558fa8f1aa90 <lparser.c:536:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f1aa78 <col:12, col:16> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f1aa40 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f1aa28 <col:12> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.140]->code
 142: ImplicitCastExpr 0x558fa8f1aaf0 <lparser.c:536:12, col:19> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f1aa90 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f1aa78 <col:12, col:16> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f1aa40 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f1aa28 <col:12> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B1.141] (ImplicitCastExpr, LValueToRValue, Instruction *)
 143: DeclRefExpr 0x558fa8f1aac8 <lparser.c:536:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
pc
 144: ImplicitCastExpr 0x558fa8f1ab08 <lparser.c:536:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1aac8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.143] (ImplicitCastExpr, LValueToRValue, int)
 145: ArraySubscriptExpr 0x558fa8f1ab20 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f1aaf0 <col:12, col:19> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f1aa90 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f1aa78 <col:12, col:16> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f1aa40 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f1aa28 <col:12> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f1ab08 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1aac8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B1.142][[B1.144]]
 146: BinaryOperator 0x558fa8f1b7a0 <./lopcodes.h:93:24, line:94:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x558fa8f1ab48 <line:93:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ArraySubscriptExpr 0x558fa8f1ab20 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
|   |-ImplicitCastExpr 0x558fa8f1aaf0 <col:12, col:19> 'Instruction *' <LValueToRValue>
|   | `-MemberExpr 0x558fa8f1aa90 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   |   `-ImplicitCastExpr 0x558fa8f1aa78 <col:12, col:16> 'Proto *' <LValueToRValue>
|   |     `-MemberExpr 0x558fa8f1aa40 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
|   |       `-ImplicitCastExpr 0x558fa8f1aa28 <col:12> 'FuncState *' <LValueToRValue>
|   |         `-DeclRefExpr 0x558fa8f1aa00 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|   `-ImplicitCastExpr 0x558fa8f1ab08 <col:24> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f1aac8 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
`-ParenExpr 0x558fa8f1b780 <./lopcodes.h:93:30, line:94:54> 'unsigned int'
  `-BinaryOperator 0x558fa8f1b758 <line:93:31, line:94:53> 'unsigned int' '|'
    |-ParenExpr 0x558fa8f1afc8 <line:93:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x558fa8f1afa0 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x558fa8f1af88 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x558fa8f1acb0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x558fa8f1ac88 <lparser.c:536:12, col:26> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x558fa8f1ac58 <col:12, col:19> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x558fa8f1abf8 <col:12, col:19> 'Instruction *' lvalue ->code 0x558fa8e8ed28
    |   |     |   `-ImplicitCastExpr 0x558fa8f1abe0 <col:12, col:16> 'Proto *' <LValueToRValue>
    |   |     |     `-MemberExpr 0x558fa8f1aba8 <col:12, col:16> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |   |     |       `-ImplicitCastExpr 0x558fa8f1ab90 <col:12> 'FuncState *' <LValueToRValue>
    |   |     |         `-DeclRefExpr 0x558fa8f1ab68 <col:12> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
    |   |     `-ImplicitCastExpr 0x558fa8f1ac70 <col:24> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x558fa8f1ac30 <col:24> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
    |   `-ParenExpr 0x558fa8f1af68 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x558fa8f1af48 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x558fa8f1af28 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x558fa8f1af00 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x558fa8f1adf0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x558fa8f1add0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x558fa8f1adb0 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x558fa8f1ad88 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x558fa8f1ad48 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x558fa8f1ad28 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x558fa8f1ad00 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x558fa8f1acd0 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x558fa8f1ad68 <line:37:17> 'int' 9
    |           `-ParenExpr 0x558fa8f1aee0 <line:46:16, col:31> 'int'
    |             `-BinaryOperator 0x558fa8f1aeb8 <line:45:16, line:40:17> 'int' '+'
    |               |-ParenExpr 0x558fa8f1ae78 <line:45:16, col:33> 'int'
    |               | `-BinaryOperator 0x558fa8f1ae50 <line:44:17, line:42:18> 'int' '+'
    |               |   |-IntegerLiteral 0x558fa8f1ae10 <line:44:17> 'int' 0
    |               |   `-IntegerLiteral 0x558fa8f1ae30 <line:42:18> 'int' 6
    |               `-IntegerLiteral 0x558fa8f1ae98 <line:40:17> 'int' 8
    `-ParenExpr 0x558fa8f1b738 <line:94:3, col:53> 'unsigned int'
      `-BinaryOperator 0x558fa8f1b710 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x558fa8f1b478 <line:94:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x558fa8f1b450 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x558fa8f1b340 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x558fa8f1b148 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x558fa8f1b128 <col:26, col:30> 'int'
        |   |     `-CallExpr 0x558fa8f1b088 <lparser.c:536:29, col:46> 'int'
        |   |       |-ImplicitCastExpr 0x558fa8f1b070 <col:29> 'int (*)(unsigned int)' <FunctionToPointerDecay>
        |   |       | `-DeclRefExpr 0x558fa8f1afe8 <col:29> 'int (unsigned int)' Function 0x558fa8e94ab0 'luaO_int2fb' 'int (unsigned int)'
        |   |       `-ImplicitCastExpr 0x558fa8f1b0d0 <col:41, col:44> 'unsigned int' <IntegralCast>
        |   |         `-ImplicitCastExpr 0x558fa8f1b0b8 <col:41, col:44> 'int' <LValueToRValue>
        |   |           `-MemberExpr 0x558fa8f1b038 <col:41, col:44> 'int' lvalue .nh 0x558fa8f13a88
        |   |             `-DeclRefExpr 0x558fa8f1b010 <col:41> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
        |   `-ParenExpr 0x558fa8f1b430 <./lopcodes.h:46:16, col:31> 'int'
        |     `-BinaryOperator 0x558fa8f1b408 <line:45:16, line:40:17> 'int' '+'
        |       |-ParenExpr 0x558fa8f1b3c8 <line:45:16, col:33> 'int'
        |       | `-BinaryOperator 0x558fa8f1b3a0 <line:44:17, line:42:18> 'int' '+'
        |       |   |-IntegerLiteral 0x558fa8f1b360 <line:44:17> 'int' 0
        |       |   `-IntegerLiteral 0x558fa8f1b380 <line:42:18> 'int' 6
        |       `-IntegerLiteral 0x558fa8f1b3e8 <line:40:17> 'int' 8
        `-ParenExpr 0x558fa8f1b6f0 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x558fa8f1b6c8 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x558fa8f1b5b8 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x558fa8f1b598 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x558fa8f1b578 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x558fa8f1b550 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x558fa8f1b510 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x558fa8f1b4f0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x558fa8f1b4c8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x558fa8f1b498 <col:39> 'int' 0
            |       `-IntegerLiteral 0x558fa8f1b530 <line:37:17> 'int' 9
            `-ParenExpr 0x558fa8f1b6a8 <line:46:16, col:31> 'int'
              `-BinaryOperator 0x558fa8f1b680 <line:45:16, line:40:17> 'int' '+'
                |-ParenExpr 0x558fa8f1b640 <line:45:16, col:33> 'int'
                | `-BinaryOperator 0x558fa8f1b618 <line:44:17, line:42:18> 'int' '+'
                |   |-IntegerLiteral 0x558fa8f1b5d8 <line:44:17> 'int' 0
                |   `-IntegerLiteral 0x558fa8f1b5f8 <line:42:18> 'int' 6
                `-IntegerLiteral 0x558fa8f1b660 <line:40:17> 'int' 8
([B1.145]) = ([B1.136])
   Preds (2): B12 B2
   Succs (1): B0

 [B2]
   1: BinaryOperator 0x558fa8f199b0 <lparser.c:532:12, col:49> 'int' '||'
|-CallExpr 0x558fa8f19890 <col:12, col:28> 'int'
| |-ImplicitCastExpr 0x558fa8f19878 <col:12> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f19810 <col:12> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
| |-ImplicitCastExpr 0x558fa8f198c8 <col:21> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f19838 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
| `-CharacterLiteral 0x558fa8f19860 <col:25> 'int' 44
`-CallExpr 0x558fa8f19960 <col:33, col:49> 'int'
  |-ImplicitCastExpr 0x558fa8f19948 <col:33> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f198e0 <col:33> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
  |-ImplicitCastExpr 0x558fa8f19998 <col:42> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f19908 <col:42> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
  `-CharacterLiteral 0x558fa8f19930 <col:46> 'int' 59
[B4.6] || [B3.6]
   T: do ... while [B2.1]
   Preds (2): B3 B4
   Succs (2): B14 B1

 [B3]
   1: DeclRefExpr 0x558fa8f198e0 <lparser.c:532:33> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   2: ImplicitCastExpr 0x558fa8f19948 <lparser.c:532:33> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f198e0 <col:33> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f19908 <lparser.c:532:42> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19998 <lparser.c:532:42> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19908 <col:42> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f19930 <lparser.c:532:46> 'int' 59
';'
   6: CallExpr 0x558fa8f19960 <lparser.c:532:33, col:49> 'int'
|-ImplicitCastExpr 0x558fa8f19948 <col:33> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f198e0 <col:33> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f19998 <col:42> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19908 <col:42> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f19930 <col:46> 'int' 59
[B3.2]([B3.4], [B3.5])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x558fa8f19810 <lparser.c:532:12> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   2: ImplicitCastExpr 0x558fa8f19878 <lparser.c:532:12> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19810 <col:12> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f19838 <lparser.c:532:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f198c8 <lparser.c:532:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19838 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f19860 <lparser.c:532:25> 'int' 44
','
   6: CallExpr 0x558fa8f19890 <lparser.c:532:12, col:28> 'int'
|-ImplicitCastExpr 0x558fa8f19878 <col:12> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19810 <col:12> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f198c8 <col:21> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19838 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f19860 <col:25> 'int' 44
[B4.2]([B4.4], [B4.5])
   T: [B4.6] || ...
   Preds (3): B6 B7 B8
   Succs (2): B2 B3

 [B5]
   1: DeclRefExpr 0x558fa8f18db0 <lparser.c:513:5> 'void (FuncState *, struct ConsControl *)' Function 0x558fa8f158e0 'closelistfield' 'void (FuncState *, struct ConsControl *)'
closelistfield
   2: ImplicitCastExpr 0x558fa8f18ea8 <lparser.c:513:5> 'void (*)(FuncState *, struct ConsControl *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f18db0 <col:5> 'void (FuncState *, struct ConsControl *)' Function 0x558fa8f158e0 'closelistfield' 'void (FuncState *, struct ConsControl *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, struct ConsControl *))
   3: DeclRefExpr 0x558fa8f18dd8 <lparser.c:513:20> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f18ef8 <lparser.c:513:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18dd8 <col:20> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f18e00 <lparser.c:513:25> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
   6: UnaryOperator 0x558fa8f18e28 <lparser.c:513:24, col:25> 'struct ConsControl *' prefix '&'
`-DeclRefExpr 0x558fa8f18e00 <col:25> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B5.5]
   7: CallExpr 0x558fa8f18ec0 <lparser.c:513:5, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f18ea8 <col:5> 'void (*)(FuncState *, struct ConsControl *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f18db0 <col:5> 'void (FuncState *, struct ConsControl *)' Function 0x558fa8f158e0 'closelistfield' 'void (FuncState *, struct ConsControl *)'
|-ImplicitCastExpr 0x558fa8f18ef8 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f18dd8 <col:20> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f18e28 <col:24, col:25> 'struct ConsControl *' prefix '&'
  `-DeclRefExpr 0x558fa8f18e00 <col:25> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B5.2]([B5.4], [B5.6])
   8: DeclRefExpr 0x558fa8f18f10 <lparser.c:514:12> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f18f38 <lparser.c:514:12> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18f10 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B5.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: MemberExpr 0x558fa8f18f50 <lparser.c:514:12, col:16> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f18f38 <col:12> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f18f10 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B5.9]->t
  11: MemberExpr 0x558fa8f18f88 <lparser.c:514:12, col:18> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f18f50 <col:12, col:16> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f18f38 <col:12> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f18f10 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B5.10].token
  12: ImplicitCastExpr 0x558fa8f18fc0 <lparser.c:514:12, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f18f88 <col:12, col:18> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f18f50 <col:12, col:16> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f18f38 <col:12> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f18f10 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B5.11] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B5.12]
   Preds (1): B13
   Succs (3): B7 B11 B6

 [B6]
  default:
   1: DeclRefExpr 0x558fa8f19670 <lparser.c:528:9> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f176a0 'listfield' 'void (LexState *, struct ConsControl *)'
listfield
   2: ImplicitCastExpr 0x558fa8f19708 <lparser.c:528:9> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19670 <col:9> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f176a0 'listfield' 'void (LexState *, struct ConsControl *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct ConsControl *))
   3: DeclRefExpr 0x558fa8f19698 <lparser.c:528:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19758 <lparser.c:528:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19698 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f196c0 <lparser.c:528:24> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
   6: UnaryOperator 0x558fa8f196e8 <lparser.c:528:23, col:24> 'struct ConsControl *' prefix '&'
`-DeclRefExpr 0x558fa8f196c0 <col:24> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B6.5]
   7: CallExpr 0x558fa8f19720 <lparser.c:528:9, col:26> 'void'
|-ImplicitCastExpr 0x558fa8f19708 <col:9> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19670 <col:9> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f176a0 'listfield' 'void (LexState *, struct ConsControl *)'
|-ImplicitCastExpr 0x558fa8f19758 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19698 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f196e8 <col:23, col:24> 'struct ConsControl *' prefix '&'
  `-DeclRefExpr 0x558fa8f196c0 <col:24> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B6.2]([B6.4], [B6.6])
   T: break;
   Preds (1): B5
   Succs (1): B4

 [B7]
  case '[':
   1: DeclRefExpr 0x558fa8f19548 <lparser.c:524:9> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f13e70 'recfield' 'void (LexState *, struct ConsControl *)'
recfield
   2: ImplicitCastExpr 0x558fa8f195e0 <lparser.c:524:9> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19548 <col:9> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f13e70 'recfield' 'void (LexState *, struct ConsControl *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct ConsControl *))
   3: DeclRefExpr 0x558fa8f19570 <lparser.c:524:18> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19630 <lparser.c:524:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19570 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f19598 <lparser.c:524:23> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
   6: UnaryOperator 0x558fa8f195c0 <lparser.c:524:22, col:23> 'struct ConsControl *' prefix '&'
`-DeclRefExpr 0x558fa8f19598 <col:23> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B7.5]
   7: CallExpr 0x558fa8f195f8 <lparser.c:524:9, col:25> 'void'
|-ImplicitCastExpr 0x558fa8f195e0 <col:9> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19548 <col:9> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f13e70 'recfield' 'void (LexState *, struct ConsControl *)'
|-ImplicitCastExpr 0x558fa8f19630 <col:18> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19570 <col:18> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f195c0 <col:22, col:23> 'struct ConsControl *' prefix '&'
  `-DeclRefExpr 0x558fa8f19598 <col:23> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B7.2]([B7.4], [B7.6])
   T: break;
   Preds (1): B5
   Succs (1): B4

 [B8]
   T: break;
   Preds (2): B9 B10
   Succs (1): B4

 [B9]
   1: DeclRefExpr 0x558fa8f19390 <lparser.c:520:11> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f13e70 'recfield' 'void (LexState *, struct ConsControl *)'
recfield
   2: ImplicitCastExpr 0x558fa8f19428 <lparser.c:520:11> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19390 <col:11> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f13e70 'recfield' 'void (LexState *, struct ConsControl *)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct ConsControl *))
   3: DeclRefExpr 0x558fa8f193b8 <lparser.c:520:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19478 <lparser.c:520:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f193b8 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f193e0 <lparser.c:520:25> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
   6: UnaryOperator 0x558fa8f19408 <lparser.c:520:24, col:25> 'struct ConsControl *' prefix '&'
`-DeclRefExpr 0x558fa8f193e0 <col:25> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B9.5]
   7: CallExpr 0x558fa8f19440 <lparser.c:520:11, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f19428 <col:11> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19390 <col:11> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f13e70 'recfield' 'void (LexState *, struct ConsControl *)'
|-ImplicitCastExpr 0x558fa8f19478 <col:20> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f193b8 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f19408 <col:24, col:25> 'struct ConsControl *' prefix '&'
  `-DeclRefExpr 0x558fa8f193e0 <col:25> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B9.2]([B9.4], [B9.6])
   Preds (1): B11
   Succs (1): B8

 [B10]
   1: DeclRefExpr 0x558fa8f19238 <lparser.c:518:11> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f176a0 'listfield' 'void (LexState *, struct ConsControl *)'
listfield
   2: ImplicitCastExpr 0x558fa8f19328 <lparser.c:518:11> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19238 <col:11> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f176a0 'listfield' 'void (LexState *, struct ConsControl *)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct ConsControl *))
   3: DeclRefExpr 0x558fa8f19260 <lparser.c:518:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19378 <lparser.c:518:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19260 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f19288 <lparser.c:518:26> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
   6: UnaryOperator 0x558fa8f192b0 <lparser.c:518:25, col:26> 'struct ConsControl *' prefix '&'
`-DeclRefExpr 0x558fa8f19288 <col:26> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B10.5]
   7: CallExpr 0x558fa8f19340 <lparser.c:518:11, col:28> 'void'
|-ImplicitCastExpr 0x558fa8f19328 <col:11> 'void (*)(LexState *, struct ConsControl *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19238 <col:11> 'void (LexState *, struct ConsControl *)' Function 0x558fa8f176a0 'listfield' 'void (LexState *, struct ConsControl *)'
|-ImplicitCastExpr 0x558fa8f19378 <col:21> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f19260 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f192b0 <col:25, col:26> 'struct ConsControl *' prefix '&'
  `-DeclRefExpr 0x558fa8f19288 <col:26> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B10.2]([B10.4], [B10.6])
   Preds (1): B11
   Succs (1): B8

 [B11]
  case TK_NAME:
   1: DeclRefExpr 0x558fa8f19068 <lparser.c:516:9> 'void (LexState *)' Function 0x558fa8ea15e8 'luaX_lookahead' 'void (LexState *)'
luaX_lookahead
   2: ImplicitCastExpr 0x558fa8f190b8 <lparser.c:516:9> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f19068 <col:9> 'void (LexState *)' Function 0x558fa8ea15e8 'luaX_lookahead' 'void (LexState *)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x558fa8f19090 <lparser.c:516:24> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f19100 <lparser.c:516:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19090 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f190d0 <lparser.c:516:9, col:26> 'void'
|-ImplicitCastExpr 0x558fa8f190b8 <col:9> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f19068 <col:9> 'void (LexState *)' Function 0x558fa8ea15e8 'luaX_lookahead' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f19100 <col:24> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19090 <col:24> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B11.2]([B11.4])
   6: DeclRefExpr 0x558fa8f19118 <lparser.c:517:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x558fa8f19140 <lparser.c:517:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f19118 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B11.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x558fa8f19170 <lparser.c:517:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x558fa8ea0438
`-ImplicitCastExpr 0x558fa8f19140 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f19118 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B11.7]->lookahead
   9: MemberExpr 0x558fa8f191a8 <lparser.c:517:13, col:27> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f19170 <col:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x558fa8ea0438
  `-ImplicitCastExpr 0x558fa8f19140 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f19118 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B11.8].token
  10: ImplicitCastExpr 0x558fa8f191f8 <lparser.c:517:13, col:27> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f191a8 <col:13, col:27> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f19170 <col:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x558fa8ea0438
    `-ImplicitCastExpr 0x558fa8f19140 <col:13> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f19118 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B11.9] (ImplicitCastExpr, LValueToRValue, int)
  11: CharacterLiteral 0x558fa8f191e0 <lparser.c:517:36> 'int' 61
'='
  12: BinaryOperator 0x558fa8f19210 <lparser.c:517:13, col:36> 'int' '!='
|-ImplicitCastExpr 0x558fa8f191f8 <col:13, col:27> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f191a8 <col:13, col:27> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f19170 <col:13, col:17> 'Token':'struct Token' lvalue ->lookahead 0x558fa8ea0438
|     `-ImplicitCastExpr 0x558fa8f19140 <col:13> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f19118 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f191e0 <col:36> 'int' 61
[B11.10] != [B11.11]
   T: if [B11.12]
   Preds (1): B5
   Succs (2): B10 B9

 [B12]
   T: break;
   Preds (1): B13
   Succs (1): B1

 [B13]
   1: IntegerLiteral 0x558fa8f18bf0 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x558fa8f18c20 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f18bf0 <col:31> 'int' 0
(void)[B13.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x558fa8f18c68 <lparser.c:512:9> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f18c90 <lparser.c:512:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18c68 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f18ca8 <lparser.c:512:9, col:13> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f18c90 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f18c68 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B13.4]->t
   6: MemberExpr 0x558fa8f18ce0 <lparser.c:512:9, col:15> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f18ca8 <col:9, col:13> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f18c90 <col:9> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f18c68 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B13.5].token
   7: ImplicitCastExpr 0x558fa8f18d30 <lparser.c:512:9, col:15> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f18ce0 <col:9, col:15> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f18ca8 <col:9, col:13> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f18c90 <col:9> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f18c68 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B13.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CharacterLiteral 0x558fa8f18d18 <lparser.c:512:24> 'int' 125
'}'
   9: BinaryOperator 0x558fa8f18d48 <lparser.c:512:9, col:24> 'int' '=='
|-ImplicitCastExpr 0x558fa8f18d30 <col:9, col:15> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f18ce0 <col:9, col:15> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f18ca8 <col:9, col:13> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f18c90 <col:9> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f18c68 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f18d18 <col:24> 'int' 125
[B13.7] == [B13.8]
   T: if [B13.9]
   Preds (2): B14 B15
   Succs (2): B12 B5

 [B14]
   Preds (1): B2
   Succs (1): B13

 [B15]
   1: DeclRefExpr 0x558fa8f17ff0 <lparser.c:500:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f18018 <lparser.c:500:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f17ff0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f18030 <lparser.c:500:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f18018 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f17ff0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.2]->fs
   4: ImplicitCastExpr 0x558fa8f18068 <lparser.c:500:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f18030 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f18018 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f17ff0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f18080 <lparser.c:500:3, col:25>col:14
`-VarDecl 0x558fa8f17f90 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f18068 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f18030 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f18018 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f17ff0 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclRefExpr 0x558fa8f18110 <lparser.c:501:14> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x558fa8f18138 <lparser.c:501:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18110 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x558fa8f18150 <lparser.c:501:14, col:18> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8f18138 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f18110 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.7]->linenumber
   9: ImplicitCastExpr 0x558fa8f18188 <lparser.c:501:14, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f18150 <col:14, col:18> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8f18138 <col:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f18110 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.8] (ImplicitCastExpr, LValueToRValue, int)
  10: DeclStmt 0x558fa8f181a0 <lparser.c:501:3, col:28>col:7
`-VarDecl 0x558fa8f180b0 <col:3, col:18> col:7 used line 'int' cinit
  `-ImplicitCastExpr 0x558fa8f18188 <col:14, col:18> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f18150 <col:14, col:18> 'int' lvalue ->linenumber 0x558fa8ea0308
      `-ImplicitCastExpr 0x558fa8f18138 <col:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f18110 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
int line = ls->linenumber;
  11: DeclRefExpr 0x558fa8f18230 <lparser.c:502:12> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
  12: ImplicitCastExpr 0x558fa8f18308 <lparser.c:502:12> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f18230 <col:12> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B15.11] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  13: DeclRefExpr 0x558fa8f18258 <lparser.c:502:25> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x558fa8f18370 <lparser.c:502:25> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18258 <col:25> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
[B15.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: DeclRefExpr 0x558fa8f18280 <lparser.c:502:29> 'int' EnumConstant 0x558fa8eaf5f0 'OP_NEWTABLE' 'int'
OP_NEWTABLE
  16: ImplicitCastExpr 0x558fa8f18388 <lparser.c:502:29> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f18280 <col:29> 'int' EnumConstant 0x558fa8eaf5f0 'OP_NEWTABLE' 'int'
[B15.15] (ImplicitCastExpr, IntegralCast, OpCode)
  17: IntegerLiteral 0x558fa8f182a8 <lparser.c:502:42> 'int' 0
0
  18: IntegerLiteral 0x558fa8f182c8 <lparser.c:502:45> 'int' 0
0
  19: IntegerLiteral 0x558fa8f182e8 <lparser.c:502:48> 'int' 0
0
  20: CallExpr 0x558fa8f18320 <lparser.c:502:12, col:49> 'int'
|-ImplicitCastExpr 0x558fa8f18308 <col:12> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f18230 <col:12> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x558fa8f18370 <col:25> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f18258 <col:25> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f18388 <col:29> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f18280 <col:29> 'int' EnumConstant 0x558fa8eaf5f0 'OP_NEWTABLE' 'int'
|-IntegerLiteral 0x558fa8f182a8 <col:42> 'int' 0
|-IntegerLiteral 0x558fa8f182c8 <col:45> 'int' 0
`-IntegerLiteral 0x558fa8f182e8 <col:48> 'int' 0
[B15.12]([B15.14], [B15.16], [B15.17], [B15.18], [B15.19])
  21: DeclStmt 0x558fa8f183a0 <lparser.c:502:3, col:50>col:7
`-VarDecl 0x558fa8f181d0 <col:3, col:49> col:7 used pc 'int' cinit
  `-CallExpr 0x558fa8f18320 <col:12, col:49> 'int'
    |-ImplicitCastExpr 0x558fa8f18308 <col:12> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f18230 <col:12> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
    |-ImplicitCastExpr 0x558fa8f18370 <col:25> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8f18258 <col:25> 'FuncState *' lvalue Var 0x558fa8f17f90 'fs' 'FuncState *'
    |-ImplicitCastExpr 0x558fa8f18388 <col:29> 'OpCode':'OpCode' <IntegralCast>
    | `-DeclRefExpr 0x558fa8f18280 <col:29> 'int' EnumConstant 0x558fa8eaf5f0 'OP_NEWTABLE' 'int'
    |-IntegerLiteral 0x558fa8f182a8 <col:42> 'int' 0
    |-IntegerLiteral 0x558fa8f182c8 <col:45> 'int' 0
    `-IntegerLiteral 0x558fa8f182e8 <col:48> 'int' 0
int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
  22: DeclStmt 0x558fa8f18438 <lparser.c:503:3, col:24>col:22
`-VarDecl 0x558fa8f183d8 <col:3, col:22> col:22 used cc 'struct ConsControl':'struct ConsControl'
struct ConsControl cc;
  23: IntegerLiteral 0x558fa8f18570 <lparser.c:504:32> 'int' 0
0
  24: DeclRefExpr 0x558fa8f18510 <lparser.c:504:19> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  25: MemberExpr 0x558fa8f18538 <lparser.c:504:19, col:22> 'int' lvalue .tostore 0x558fa8f13b48
`-DeclRefExpr 0x558fa8f18510 <col:19> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B15.24].tostore
  26: BinaryOperator 0x558fa8f18590 <lparser.c:504:19, col:32> 'int' '='
|-MemberExpr 0x558fa8f18538 <col:19, col:22> 'int' lvalue .tostore 0x558fa8f13b48
| `-DeclRefExpr 0x558fa8f18510 <col:19> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
`-IntegerLiteral 0x558fa8f18570 <col:32> 'int' 0
[B15.25] = [B15.23]
  27: DeclRefExpr 0x558fa8f184b0 <lparser.c:504:11> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  28: MemberExpr 0x558fa8f184d8 <lparser.c:504:11, col:14> 'int' lvalue .nh 0x558fa8f13a88
`-DeclRefExpr 0x558fa8f184b0 <col:11> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B15.27].nh
  29: BinaryOperator 0x558fa8f185b8 <lparser.c:504:11, col:32> 'int' '='
|-MemberExpr 0x558fa8f184d8 <col:11, col:14> 'int' lvalue .nh 0x558fa8f13a88
| `-DeclRefExpr 0x558fa8f184b0 <col:11> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
`-BinaryOperator 0x558fa8f18590 <col:19, col:32> 'int' '='
  |-MemberExpr 0x558fa8f18538 <col:19, col:22> 'int' lvalue .tostore 0x558fa8f13b48
  | `-DeclRefExpr 0x558fa8f18510 <col:19> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
  `-IntegerLiteral 0x558fa8f18570 <col:32> 'int' 0
[B15.28] = [B15.26]
  30: DeclRefExpr 0x558fa8f18450 <lparser.c:504:3> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  31: MemberExpr 0x558fa8f18478 <lparser.c:504:3, col:6> 'int' lvalue .na 0x558fa8f13ae8
`-DeclRefExpr 0x558fa8f18450 <col:3> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B15.30].na
  32: BinaryOperator 0x558fa8f185e0 <lparser.c:504:3, col:32> 'int' '='
|-MemberExpr 0x558fa8f18478 <col:3, col:6> 'int' lvalue .na 0x558fa8f13ae8
| `-DeclRefExpr 0x558fa8f18450 <col:3> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
`-BinaryOperator 0x558fa8f185b8 <col:11, col:32> 'int' '='
  |-MemberExpr 0x558fa8f184d8 <col:11, col:14> 'int' lvalue .nh 0x558fa8f13a88
  | `-DeclRefExpr 0x558fa8f184b0 <col:11> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
  `-BinaryOperator 0x558fa8f18590 <col:19, col:32> 'int' '='
    |-MemberExpr 0x558fa8f18538 <col:19, col:22> 'int' lvalue .tostore 0x558fa8f13b48
    | `-DeclRefExpr 0x558fa8f18510 <col:19> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
    `-IntegerLiteral 0x558fa8f18570 <col:32> 'int' 0
[B15.31] = [B15.29]
  33: DeclRefExpr 0x558fa8f186d0 <lparser.c:505:10> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
t
  34: ImplicitCastExpr 0x558fa8f186f8 <lparser.c:505:10> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f186d0 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
[B15.33] (ImplicitCastExpr, LValueToRValue, expdesc *)
  35: DeclRefExpr 0x558fa8f18670 <lparser.c:505:3> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  36: MemberExpr 0x558fa8f18698 <lparser.c:505:3, col:6> 'expdesc *' lvalue .t 0x558fa8f13a28
`-DeclRefExpr 0x558fa8f18670 <col:3> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B15.35].t
  37: BinaryOperator 0x558fa8f18710 <lparser.c:505:3, col:10> 'expdesc *' '='
|-MemberExpr 0x558fa8f18698 <col:3, col:6> 'expdesc *' lvalue .t 0x558fa8f13a28
| `-DeclRefExpr 0x558fa8f18670 <col:3> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
`-ImplicitCastExpr 0x558fa8f186f8 <col:10> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f186d0 <col:10> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
[B15.36] = [B15.34]
  38: DeclRefExpr 0x558fa8f18738 <lparser.c:506:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
  39: ImplicitCastExpr 0x558fa8f187d8 <lparser.c:506:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f18738 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B15.38] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
  40: DeclRefExpr 0x558fa8f18760 <lparser.c:506:12> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
t
  41: ImplicitCastExpr 0x558fa8f18830 <lparser.c:506:12> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18760 <col:12> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
[B15.40] (ImplicitCastExpr, LValueToRValue, expdesc *)
  42: DeclRefExpr 0x558fa8f18788 <lparser.c:506:15> 'int' EnumConstant 0x558fa8eb0ba8 'VRELOCABLE' 'int'
VRELOCABLE
  43: ImplicitCastExpr 0x558fa8f18848 <lparser.c:506:15> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f18788 <col:15> 'int' EnumConstant 0x558fa8eb0ba8 'VRELOCABLE' 'int'
[B15.42] (ImplicitCastExpr, IntegralCast, expkind)
  44: DeclRefExpr 0x558fa8f187b0 <lparser.c:506:27> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
pc
  45: ImplicitCastExpr 0x558fa8f18860 <lparser.c:506:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f187b0 <col:27> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B15.44] (ImplicitCastExpr, LValueToRValue, int)
  46: CallExpr 0x558fa8f187f0 <lparser.c:506:3, col:29> 'void'
|-ImplicitCastExpr 0x558fa8f187d8 <col:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f18738 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-ImplicitCastExpr 0x558fa8f18830 <col:12> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f18760 <col:12> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
|-ImplicitCastExpr 0x558fa8f18848 <col:15> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8f18788 <col:15> 'int' EnumConstant 0x558fa8eb0ba8 'VRELOCABLE' 'int'
`-ImplicitCastExpr 0x558fa8f18860 <col:27> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f187b0 <col:27> 'int' lvalue Var 0x558fa8f181d0 'pc' 'int'
[B15.39]([B15.41], [B15.43], [B15.45])
  47: DeclRefExpr 0x558fa8f18878 <lparser.c:507:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
  48: ImplicitCastExpr 0x558fa8f18968 <lparser.c:507:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f18878 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B15.47] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
  49: DeclRefExpr 0x558fa8f188a0 <lparser.c:507:13> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
cc
  50: MemberExpr 0x558fa8f188c8 <lparser.c:507:13, col:16> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f139d0
`-DeclRefExpr 0x558fa8f188a0 <col:13> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
[B15.49].v
  51: UnaryOperator 0x558fa8f18900 <lparser.c:507:12, col:16> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f188c8 <col:13, col:16> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f139d0
  `-DeclRefExpr 0x558fa8f188a0 <col:13> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
&[B15.50]
  52: DeclRefExpr 0x558fa8f18920 <lparser.c:507:19> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
VVOID
  53: ImplicitCastExpr 0x558fa8f189c0 <lparser.c:507:19> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f18920 <col:19> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
[B15.52] (ImplicitCastExpr, IntegralCast, expkind)
  54: IntegerLiteral 0x558fa8f18948 <lparser.c:507:26> 'int' 0
0
  55: CallExpr 0x558fa8f18980 <lparser.c:507:3, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f18968 <col:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f18878 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-UnaryOperator 0x558fa8f18900 <col:12, col:16> 'expdesc *' prefix '&'
| `-MemberExpr 0x558fa8f188c8 <col:13, col:16> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f139d0
|   `-DeclRefExpr 0x558fa8f188a0 <col:13> 'struct ConsControl':'struct ConsControl' lvalue Var 0x558fa8f183d8 'cc' 'struct ConsControl':'struct ConsControl'
|-ImplicitCastExpr 0x558fa8f189c0 <col:19> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8f18920 <col:19> 'int' EnumConstant 0x558fa8eb0890 'VVOID' 'int'
`-IntegerLiteral 0x558fa8f18948 <col:26> 'int' 0
[B15.48]([B15.51], [B15.53], [B15.54])
  56: DeclRefExpr 0x558fa8f189d8 <lparser.c:508:3> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
luaK_exp2nextreg
  57: ImplicitCastExpr 0x558fa8f18aa0 <lparser.c:508:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f189d8 <col:3> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
[B15.56] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  58: DeclRefExpr 0x558fa8f18a00 <lparser.c:508:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
  59: ImplicitCastExpr 0x558fa8f18a28 <lparser.c:508:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18a00 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.58] (ImplicitCastExpr, LValueToRValue, LexState *)
  60: MemberExpr 0x558fa8f18a40 <lparser.c:508:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f18a28 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f18a00 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.59]->fs
  61: ImplicitCastExpr 0x558fa8f18af0 <lparser.c:508:20, col:24> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f18a40 <col:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f18a28 <col:20> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f18a00 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.60] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  62: DeclRefExpr 0x558fa8f18a78 <lparser.c:508:28> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
t
  63: ImplicitCastExpr 0x558fa8f18b08 <lparser.c:508:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18a78 <col:28> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
[B15.62] (ImplicitCastExpr, LValueToRValue, expdesc *)
  64: CallExpr 0x558fa8f18ab8 <lparser.c:508:3, col:29> 'void'
|-ImplicitCastExpr 0x558fa8f18aa0 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f189d8 <col:3> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f18af0 <col:20, col:24> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f18a40 <col:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f18a28 <col:20> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f18a00 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f18b08 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f18a78 <col:28> 'expdesc *' lvalue ParmVar 0x558fa8f17e40 't' 'expdesc *'
[B15.57]([B15.61], [B15.63])
  65: DeclRefExpr 0x558fa8f18b20 <lparser.c:509:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
  66: ImplicitCastExpr 0x558fa8f18b88 <lparser.c:509:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f18b20 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B15.65] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  67: DeclRefExpr 0x558fa8f18b48 <lparser.c:509:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
ls
  68: ImplicitCastExpr 0x558fa8f18bd8 <lparser.c:509:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f18b48 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
[B15.67] (ImplicitCastExpr, LValueToRValue, LexState *)
  69: CharacterLiteral 0x558fa8f18b70 <lparser.c:509:17> 'int' 123
'{'
  70: CallExpr 0x558fa8f18ba0 <lparser.c:509:3, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f18b88 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f18b20 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f18bd8 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f18b48 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f17dd0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f18b70 <col:17> 'int' 123
[B15.66]([B15.68], [B15.69])
   Preds (1): B16
   Succs (1): B13

 [B0 (EXIT)]
   Preds (1): B1
