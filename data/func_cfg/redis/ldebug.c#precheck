static int precheck(const Proto *pt)
 [B20 (ENTRY)]
   Succs (1): B19

 [B1]
   1: IntegerLiteral 0x555e9724e480 <ldebug.c:284:10> 'int' 1
1
   2: ReturnStmt 0x555e9724e4a0 <ldebug.c:284:3, col:10>
`-IntegerLiteral 0x555e9724e480 <col:10> 'int' 1
return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x555e9724e400 <ldebug.c:268:36> 'int' 0
0
   2: ReturnStmt 0x555e9724e420 <ldebug.c:268:29, col:36>
`-IntegerLiteral 0x555e9724e400 <col:36> 'int' 0
return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: BinaryOperator 0x555e9724c458 <ldebug.c:283:9, col:69> 'int' '&&'
|-BinaryOperator 0x555e9724bee8 <col:9, col:24> 'int' '>'
| |-ImplicitCastExpr 0x555e9724bed0 <col:9, col:13> 'int' <LValueToRValue>
| | `-MemberExpr 0x555e9724be78 <col:9, col:13> 'const int' lvalue ->sizecode 0x555e971d9ce8
| |   `-ImplicitCastExpr 0x555e9724be60 <col:9> 'const Proto *' <LValueToRValue>
| |     `-DeclRefExpr 0x555e9724be38 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
| `-IntegerLiteral 0x555e9724beb0 <col:24> 'int' 0
`-BinaryOperator 0x555e9724c430 <./lopcodes.h:80:23, ldebug.c:283:69> 'int' '=='
  |-ImplicitCastExpr 0x555e9724c400 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
  | `-ParenExpr 0x555e9724c3b8 <col:23, col:70> 'OpCode':'OpCode'
  |   `-ParenExpr 0x555e9724c398 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
  |     `-CStyleCastExpr 0x555e9724c370 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
  |       `-ParenExpr 0x555e9724c350 <col:26, col:30> 'unsigned int'
  |         `-BinaryOperator 0x555e9724c2e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
  |           |-ParenExpr 0x555e9724c120 <line:80:37, col:49> 'Instruction':'unsigned int'
  |           | `-BinaryOperator 0x555e9724c0f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
  |           |   |-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
  |           |   | `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  |           |   |   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
  |           |   |     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
  |           |   |     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
  |           |   |     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
  |           |   |     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
  |           |   |     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
  |           |   |       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
  |           |   |       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
  |           |   |       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
  |           |   |       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
  |           |   |       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
  |           |   `-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
  |           `-ParenExpr 0x555e9724c2c8 <line:71:20, col:49> 'Instruction':'unsigned int'
  |             `-BinaryOperator 0x555e9724c2a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
  |               |-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
  |               | `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
  |               |   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
  |               |     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
  |               |       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
  |               |       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
  |               |       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  |               |       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
  |               |       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
  |               `-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
  `-ImplicitCastExpr 0x555e9724c418 <ldebug.c:283:69> 'unsigned int' <IntegralCast>
    `-DeclRefExpr 0x555e9724c3d8 <col:69> 'int' EnumConstant 0x555e971f1de0 'OP_RETURN' 'int'
[B5.6] && [B4.28]
   2: UnaryOperator 0x555e9724e3e0 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9724c480 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9724c458 <line:283:9, col:69> 'int' '&&'
    |-BinaryOperator 0x555e9724bee8 <col:9, col:24> 'int' '>'
    | |-ImplicitCastExpr 0x555e9724bed0 <col:9, col:13> 'int' <LValueToRValue>
    | | `-MemberExpr 0x555e9724be78 <col:9, col:13> 'const int' lvalue ->sizecode 0x555e971d9ce8
    | |   `-ImplicitCastExpr 0x555e9724be60 <col:9> 'const Proto *' <LValueToRValue>
    | |     `-DeclRefExpr 0x555e9724be38 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    | `-IntegerLiteral 0x555e9724beb0 <col:24> 'int' 0
    `-BinaryOperator 0x555e9724c430 <./lopcodes.h:80:23, ldebug.c:283:69> 'int' '=='
      |-ImplicitCastExpr 0x555e9724c400 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
      | `-ParenExpr 0x555e9724c3b8 <col:23, col:70> 'OpCode':'OpCode'
      |   `-ParenExpr 0x555e9724c398 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
      |     `-CStyleCastExpr 0x555e9724c370 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      |       `-ParenExpr 0x555e9724c350 <col:26, col:30> 'unsigned int'
      |         `-BinaryOperator 0x555e9724c2e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
      |           |-ParenExpr 0x555e9724c120 <line:80:37, col:49> 'Instruction':'unsigned int'
      |           | `-BinaryOperator 0x555e9724c0f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
      |           |   |-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
      |           |   | `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
      |           |   |   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
      |           |   |     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
      |           |   |     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
      |           |   |     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
      |           |   |     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
      |           |   |     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
      |           |   |       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
      |           |   |       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
      |           |   |       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
      |           |   |       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
      |           |   |       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
      |           |   `-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
      |           `-ParenExpr 0x555e9724c2c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |             `-BinaryOperator 0x555e9724c2a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
      |               |-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
      |               | `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |               |   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
      |               |     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
      |               |       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
      |               |       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |               |       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |               |       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
      |               |       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
      |               `-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
      `-ImplicitCastExpr 0x555e9724c418 <ldebug.c:283:69> 'unsigned int' <IntegralCast>
        `-DeclRefExpr 0x555e9724c3d8 <col:69> 'int' EnumConstant 0x555e971f1de0 'OP_RETURN' 'int'
!([B3.1])
   T: if [B3.2]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x555e9724bf10 <ldebug.c:283:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724bf38 <ldebug.c:283:40> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B4.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724bf50 <ldebug.c:283:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
`-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B4.2]->code
   4: ImplicitCastExpr 0x555e9724c060 <ldebug.c:283:40, col:44> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
  `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B4.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: DeclRefExpr 0x555e9724bf88 <ldebug.c:283:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e9724bfb0 <ldebug.c:283:49> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B4.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e9724bfc8 <ldebug.c:283:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B4.6]->sizecode
   8: ImplicitCastExpr 0x555e9724c020 <ldebug.c:283:49, col:53> 'int' <LValueToRValue>
`-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x555e9724c000 <ldebug.c:283:62> 'int' 1
1
  10: BinaryOperator 0x555e9724c038 <ldebug.c:283:49, col:62> 'int' '-'
|-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
| `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
|   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
[B4.8] - [B4.9]
  11: ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
|   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
  |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
  | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
  |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
  `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
[B4.4][[B4.10]]
  12: ImplicitCastExpr 0x555e9724c0e0 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
      |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
      | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
      |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
      `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
([B4.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
0
  14: BinaryOperator 0x555e9724c0f8 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
|     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
|       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
|       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
|       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
|       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
`-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
[B4.12] >> [B4.13]
  15: IntegerLiteral 0x555e9724c140 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x555e9724c170 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
(Instruction)[B4.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x555e9724c198 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
~[B4.16]
  18: IntegerLiteral 0x555e9724c1d8 <./lopcodes.h:42:18> 'int' 6
6
  19: BinaryOperator 0x555e9724c1f8 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
`-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
([B4.17]) << [B4.18]
  20: UnaryOperator 0x555e9724c240 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
    `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
~([B4.19])
  21: IntegerLiteral 0x555e9724c280 <./lopcodes.h:80:67> 'int' 0
0
  22: BinaryOperator 0x555e9724c2a0 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
|       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
`-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
([B4.20]) << [B4.21]
  23: BinaryOperator 0x555e9724c2e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x555e9724c120 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x555e9724c0f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
|   |     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|   |     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
|   |       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
|   |       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
|   |       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|   |       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
|   `-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x555e9724c2c8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x555e9724c2a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
    |       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
([B4.14]) & ([B4.22])
  24: CStyleCastExpr 0x555e9724c370 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x555e9724c350 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x555e9724c2e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x555e9724c120 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x555e9724c0f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
    |   |     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    |   |     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
    |   |       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
    |   |       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
    |   |       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
    |   |       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    |   |       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
    |   `-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x555e9724c2c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x555e9724c2a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
        |       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
(OpCode)([B4.23]) (CStyleCastExpr, IntegralCast, OpCode)
  25: ImplicitCastExpr 0x555e9724c400 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x555e9724c3b8 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x555e9724c398 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x555e9724c370 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x555e9724c350 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x555e9724c2e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x555e9724c120 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x555e9724c0f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
          |   |     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
          |   |     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
          |   |     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
          |   |     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
          |   |     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
          |   |       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
          |   |       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
          |   |       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
          |   |       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
          |   |       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
          |   `-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x555e9724c2c8 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x555e9724c2a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
              |       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
              `-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
(([B4.24])) (ImplicitCastExpr, IntegralCast, unsigned int)
  26: DeclRefExpr 0x555e9724c3d8 <ldebug.c:283:69> 'int' EnumConstant 0x555e971f1de0 'OP_RETURN' 'int'
OP_RETURN
  27: ImplicitCastExpr 0x555e9724c418 <ldebug.c:283:69> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x555e9724c3d8 <col:69> 'int' EnumConstant 0x555e971f1de0 'OP_RETURN' 'int'
[B4.26] (ImplicitCastExpr, IntegralCast, unsigned int)
  28: BinaryOperator 0x555e9724c430 <./lopcodes.h:80:23, ldebug.c:283:69> 'int' '=='
|-ImplicitCastExpr 0x555e9724c400 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x555e9724c3b8 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x555e9724c398 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x555e9724c370 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x555e9724c350 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x555e9724c2e8 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x555e9724c120 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x555e9724c0f8 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x555e9724c0e0 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x555e9724c0a0 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-ArraySubscriptExpr 0x555e9724c078 <ldebug.c:283:40, col:63> 'Instruction':'unsigned int' lvalue
|           |   |     |-ImplicitCastExpr 0x555e9724c060 <col:40, col:44> 'Instruction *' <LValueToRValue>
|           |   |     | `-MemberExpr 0x555e9724bf50 <col:40, col:44> 'Instruction *const' lvalue ->code 0x555e971d9508
|           |   |     |   `-ImplicitCastExpr 0x555e9724bf38 <col:40> 'const Proto *' <LValueToRValue>
|           |   |     |     `-DeclRefExpr 0x555e9724bf10 <col:40> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|           |   |     `-BinaryOperator 0x555e9724c038 <col:49, col:62> 'int' '-'
|           |   |       |-ImplicitCastExpr 0x555e9724c020 <col:49, col:53> 'int' <LValueToRValue>
|           |   |       | `-MemberExpr 0x555e9724bfc8 <col:49, col:53> 'const int' lvalue ->sizecode 0x555e971d9ce8
|           |   |       |   `-ImplicitCastExpr 0x555e9724bfb0 <col:49> 'const Proto *' <LValueToRValue>
|           |   |       |     `-DeclRefExpr 0x555e9724bf88 <col:49> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|           |   |       `-IntegerLiteral 0x555e9724c000 <col:62> 'int' 1
|           |   `-IntegerLiteral 0x555e9724c0c0 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x555e9724c2c8 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x555e9724c2a0 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x555e9724c260 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x555e9724c240 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x555e9724c220 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x555e9724c1f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x555e9724c1b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x555e9724c198 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x555e9724c170 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x555e9724c140 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x555e9724c1d8 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x555e9724c280 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x555e9724c418 <ldebug.c:283:69> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x555e9724c3d8 <col:69> 'int' EnumConstant 0x555e971f1de0 'OP_RETURN' 'int'
[B4.25] == [B4.27]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x555e9724be38 <ldebug.c:283:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724be60 <ldebug.c:283:9> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724be38 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B5.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724be78 <ldebug.c:283:9, col:13> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e9724be60 <col:9> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724be38 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B5.2]->sizecode
   4: ImplicitCastExpr 0x555e9724bed0 <ldebug.c:283:9, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x555e9724be78 <col:9, col:13> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e9724be60 <col:9> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724be38 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9724beb0 <ldebug.c:283:24> 'int' 0
0
   6: BinaryOperator 0x555e9724bee8 <ldebug.c:283:9, col:24> 'int' '>'
|-ImplicitCastExpr 0x555e9724bed0 <col:9, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x555e9724be78 <col:9, col:13> 'const int' lvalue ->sizecode 0x555e971d9ce8
|   `-ImplicitCastExpr 0x555e9724be60 <col:9> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9724be38 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724beb0 <col:24> 'int' 0
[B5.4] > [B5.5]
   T: [B5.6] && ...
   Preds (1): B7
   Succs (2): B4 B3

 [B6]
   1: IntegerLiteral 0x555e9724bdb8 <ldebug.c:268:36> 'int' 0
0
   2: ReturnStmt 0x555e9724bdd8 <ldebug.c:268:29, col:36>
`-IntegerLiteral 0x555e9724bdb8 <col:36> 'int' 0
return [B6.1];
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: BinaryOperator 0x555e9724bd50 <ldebug.c:282:9, col:65> 'int' '||'
|-BinaryOperator 0x555e9724bc50 <col:9, col:33> 'int' '=='
| |-ImplicitCastExpr 0x555e9724bc20 <col:9, col:13> 'int' <LValueToRValue>
| | `-MemberExpr 0x555e9724bb70 <col:9, col:13> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
| |   `-ImplicitCastExpr 0x555e9724bb58 <col:9> 'const Proto *' <LValueToRValue>
| |     `-DeclRefExpr 0x555e9724bb30 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
| `-ImplicitCastExpr 0x555e9724bc38 <col:29, col:33> 'int' <LValueToRValue>
|   `-MemberExpr 0x555e9724bbe8 <col:29, col:33> 'const int' lvalue ->sizecode 0x555e971d9ce8
|     `-ImplicitCastExpr 0x555e9724bbd0 <col:29> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e9724bba8 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-BinaryOperator 0x555e9724bd28 <col:45, col:65> 'int' '=='
  |-ImplicitCastExpr 0x555e9724bd10 <col:45, col:49> 'int' <LValueToRValue>
  | `-MemberExpr 0x555e9724bcb8 <col:45, col:49> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
  |   `-ImplicitCastExpr 0x555e9724bca0 <col:45> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x555e9724bc78 <col:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
  `-IntegerLiteral 0x555e9724bcf0 <col:65> 'int' 0
[B9.9] || [B8.6]
   2: UnaryOperator 0x555e9724bd98 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9724bd78 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9724bd50 <line:282:9, col:65> 'int' '||'
    |-BinaryOperator 0x555e9724bc50 <col:9, col:33> 'int' '=='
    | |-ImplicitCastExpr 0x555e9724bc20 <col:9, col:13> 'int' <LValueToRValue>
    | | `-MemberExpr 0x555e9724bb70 <col:9, col:13> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
    | |   `-ImplicitCastExpr 0x555e9724bb58 <col:9> 'const Proto *' <LValueToRValue>
    | |     `-DeclRefExpr 0x555e9724bb30 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    | `-ImplicitCastExpr 0x555e9724bc38 <col:29, col:33> 'int' <LValueToRValue>
    |   `-MemberExpr 0x555e9724bbe8 <col:29, col:33> 'const int' lvalue ->sizecode 0x555e971d9ce8
    |     `-ImplicitCastExpr 0x555e9724bbd0 <col:29> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x555e9724bba8 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-BinaryOperator 0x555e9724bd28 <col:45, col:65> 'int' '=='
      |-ImplicitCastExpr 0x555e9724bd10 <col:45, col:49> 'int' <LValueToRValue>
      | `-MemberExpr 0x555e9724bcb8 <col:45, col:49> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
      |   `-ImplicitCastExpr 0x555e9724bca0 <col:45> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x555e9724bc78 <col:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
      `-IntegerLiteral 0x555e9724bcf0 <col:65> 'int' 0
!([B7.1])
   T: if [B7.2]
   Preds (2): B8 B9
   Succs (2): B6 B5

 [B8]
   1: DeclRefExpr 0x555e9724bc78 <ldebug.c:282:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724bca0 <ldebug.c:282:45> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724bc78 <col:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B8.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724bcb8 <ldebug.c:282:45, col:49> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
`-ImplicitCastExpr 0x555e9724bca0 <col:45> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724bc78 <col:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B8.2]->sizelineinfo
   4: ImplicitCastExpr 0x555e9724bd10 <ldebug.c:282:45, col:49> 'int' <LValueToRValue>
`-MemberExpr 0x555e9724bcb8 <col:45, col:49> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
  `-ImplicitCastExpr 0x555e9724bca0 <col:45> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724bc78 <col:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x555e9724bcf0 <ldebug.c:282:65> 'int' 0
0
   6: BinaryOperator 0x555e9724bd28 <ldebug.c:282:45, col:65> 'int' '=='
|-ImplicitCastExpr 0x555e9724bd10 <col:45, col:49> 'int' <LValueToRValue>
| `-MemberExpr 0x555e9724bcb8 <col:45, col:49> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
|   `-ImplicitCastExpr 0x555e9724bca0 <col:45> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9724bc78 <col:45> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724bcf0 <col:65> 'int' 0
[B8.4] == [B8.5]
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: DeclRefExpr 0x555e9724bb30 <ldebug.c:282:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724bb58 <ldebug.c:282:9> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724bb30 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724bb70 <ldebug.c:282:9, col:13> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
`-ImplicitCastExpr 0x555e9724bb58 <col:9> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724bb30 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.2]->sizelineinfo
   4: ImplicitCastExpr 0x555e9724bc20 <ldebug.c:282:9, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x555e9724bb70 <col:9, col:13> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
  `-ImplicitCastExpr 0x555e9724bb58 <col:9> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724bb30 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x555e9724bba8 <ldebug.c:282:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e9724bbd0 <ldebug.c:282:29> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724bba8 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e9724bbe8 <ldebug.c:282:29, col:33> 'const int' lvalue ->sizecode 0x555e971d9ce8
`-ImplicitCastExpr 0x555e9724bbd0 <col:29> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724bba8 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.6]->sizecode
   8: ImplicitCastExpr 0x555e9724bc38 <ldebug.c:282:29, col:33> 'int' <LValueToRValue>
`-MemberExpr 0x555e9724bbe8 <col:29, col:33> 'const int' lvalue ->sizecode 0x555e971d9ce8
  `-ImplicitCastExpr 0x555e9724bbd0 <col:29> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724bba8 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x555e9724bc50 <ldebug.c:282:9, col:33> 'int' '=='
|-ImplicitCastExpr 0x555e9724bc20 <col:9, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x555e9724bb70 <col:9, col:13> 'const int' lvalue ->sizelineinfo 0x555e971d9d48
|   `-ImplicitCastExpr 0x555e9724bb58 <col:9> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9724bb30 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-ImplicitCastExpr 0x555e9724bc38 <col:29, col:33> 'int' <LValueToRValue>
  `-MemberExpr 0x555e9724bbe8 <col:29, col:33> 'const int' lvalue ->sizecode 0x555e971d9ce8
    `-ImplicitCastExpr 0x555e9724bbd0 <col:29> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724bba8 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B9.4] == [B9.8]
   T: [B9.9] || ...
   Preds (1): B11
   Succs (2): B7 B8

 [B10]
   1: IntegerLiteral 0x555e9724bab0 <ldebug.c:268:36> 'int' 0
0
   2: ReturnStmt 0x555e9724bad0 <ldebug.c:268:29, col:36>
`-IntegerLiteral 0x555e9724bab0 <col:36> 'int' 0
return [B10.1];
   Preds (1): B11
   Succs (1): B0

 [B11]
   1: DeclRefExpr 0x555e9724b910 <ldebug.c:281:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724b938 <ldebug.c:281:9> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b910 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724b950 <ldebug.c:281:9, col:13> 'const int' lvalue ->sizeupvalues 0x555e971d9a68
`-ImplicitCastExpr 0x555e9724b938 <col:9> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b910 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.2]->sizeupvalues
   4: ImplicitCastExpr 0x555e9724ba00 <ldebug.c:281:9, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x555e9724b950 <col:9, col:13> 'const int' lvalue ->sizeupvalues 0x555e971d9a68
  `-ImplicitCastExpr 0x555e9724b938 <col:9> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b910 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x555e9724b988 <ldebug.c:281:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   6: ImplicitCastExpr 0x555e9724b9b0 <ldebug.c:281:29> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b988 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.5] (ImplicitCastExpr, LValueToRValue, const Proto *)
   7: MemberExpr 0x555e9724b9c8 <ldebug.c:281:29, col:33> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
`-ImplicitCastExpr 0x555e9724b9b0 <col:29> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b988 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.6]->nups
   8: ImplicitCastExpr 0x555e9724ba18 <ldebug.c:281:29, col:33> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b9c8 <col:29, col:33> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
  `-ImplicitCastExpr 0x555e9724b9b0 <col:29> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b988 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.7] (ImplicitCastExpr, LValueToRValue, lu_byte)
   9: ImplicitCastExpr 0x555e9724ba30 <ldebug.c:281:29, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724ba18 <col:29, col:33> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b9c8 <col:29, col:33> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
    `-ImplicitCastExpr 0x555e9724b9b0 <col:29> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b988 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.8] (ImplicitCastExpr, IntegralCast, int)
  10: BinaryOperator 0x555e9724ba48 <ldebug.c:281:9, col:33> 'int' '<='
|-ImplicitCastExpr 0x555e9724ba00 <col:9, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x555e9724b950 <col:9, col:13> 'const int' lvalue ->sizeupvalues 0x555e971d9a68
|   `-ImplicitCastExpr 0x555e9724b938 <col:9> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x555e9724b910 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-ImplicitCastExpr 0x555e9724ba30 <col:29, col:33> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9724ba18 <col:29, col:33> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9724b9c8 <col:29, col:33> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
      `-ImplicitCastExpr 0x555e9724b9b0 <col:29> 'const Proto *' <LValueToRValue>
        `-DeclRefExpr 0x555e9724b988 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B11.4] <= [B11.9]
  11: UnaryOperator 0x555e9724ba90 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9724ba70 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9724ba48 <line:281:9, col:33> 'int' '<='
    |-ImplicitCastExpr 0x555e9724ba00 <col:9, col:13> 'int' <LValueToRValue>
    | `-MemberExpr 0x555e9724b950 <col:9, col:13> 'const int' lvalue ->sizeupvalues 0x555e971d9a68
    |   `-ImplicitCastExpr 0x555e9724b938 <col:9> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x555e9724b910 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-ImplicitCastExpr 0x555e9724ba30 <col:29, col:33> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9724ba18 <col:29, col:33> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9724b9c8 <col:29, col:33> 'const lu_byte':'const unsigned char' lvalue ->nups 0x555e971d9f78
          `-ImplicitCastExpr 0x555e9724b9b0 <col:29> 'const Proto *' <LValueToRValue>
            `-DeclRefExpr 0x555e9724b988 <col:29> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
!([B11.10])
   T: if [B11.11]
   Preds (1): B13
   Succs (2): B10 B9

 [B12]
   1: IntegerLiteral 0x555e9724b890 <ldebug.c:268:36> 'int' 0
0
   2: ReturnStmt 0x555e9724b8b0 <ldebug.c:268:29, col:36>
`-IntegerLiteral 0x555e9724b890 <col:36> 'int' 0
return [B12.1];
   Preds (1): B13
   Succs (1): B0

 [B13]
   1: BinaryOperator 0x555e9724b828 <ldebug.c:279:9, line:280:45> 'int' '||'
|-UnaryOperator 0x555e9724b6f8 <line:279:9, col:42> 'int' prefix '!'
| `-ParenExpr 0x555e9724b6d8 <col:10, col:42> 'int'
|   `-BinaryOperator 0x555e9724b6b0 <col:11, ./lobject.h:259:26> 'int' '&'
|     |-ImplicitCastExpr 0x555e9724b698 <ldebug.c:279:11, col:15> 'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x555e9724b680 <col:11, col:15> 'lu_byte':'unsigned char' <LValueToRValue>
|     |   `-MemberExpr 0x555e9724b628 <col:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     |     `-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|     `-IntegerLiteral 0x555e9724b660 <./lobject.h:259:26> 'int' 4
`-ParenExpr 0x555e9724b808 <ldebug.c:280:15, col:45> 'int'
  `-BinaryOperator 0x555e9724b7e0 <col:16, ./lobject.h:257:24> 'int' '&'
    |-ImplicitCastExpr 0x555e9724b7c8 <ldebug.c:280:16, col:20> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e9724b7b0 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x555e9724b758 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |     `-ImplicitCastExpr 0x555e9724b740 <col:16> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-IntegerLiteral 0x555e9724b790 <./lobject.h:257:24> 'int' 1
[B15.8] || ([B14.7])
   2: UnaryOperator 0x555e9724b870 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9724b850 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9724b828 <line:279:9, line:280:45> 'int' '||'
    |-UnaryOperator 0x555e9724b6f8 <line:279:9, col:42> 'int' prefix '!'
    | `-ParenExpr 0x555e9724b6d8 <col:10, col:42> 'int'
    |   `-BinaryOperator 0x555e9724b6b0 <col:11, ./lobject.h:259:26> 'int' '&'
    |     |-ImplicitCastExpr 0x555e9724b698 <ldebug.c:279:11, col:15> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e9724b680 <col:11, col:15> 'lu_byte':'unsigned char' <LValueToRValue>
    |     |   `-MemberExpr 0x555e9724b628 <col:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |     |     `-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
    |     |       `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    |     `-IntegerLiteral 0x555e9724b660 <./lobject.h:259:26> 'int' 4
    `-ParenExpr 0x555e9724b808 <ldebug.c:280:15, col:45> 'int'
      `-BinaryOperator 0x555e9724b7e0 <col:16, ./lobject.h:257:24> 'int' '&'
        |-ImplicitCastExpr 0x555e9724b7c8 <ldebug.c:280:16, col:20> 'int' <IntegralCast>
        | `-ImplicitCastExpr 0x555e9724b7b0 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
        |   `-MemberExpr 0x555e9724b758 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
        |     `-ImplicitCastExpr 0x555e9724b740 <col:16> 'const Proto *' <LValueToRValue>
        |       `-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
        `-IntegerLiteral 0x555e9724b790 <./lobject.h:257:24> 'int' 1
!([B13.1])
   T: if [B13.2]
   Preds (2): B14 B15
   Succs (2): B12 B11

 [B14]
   1: DeclRefExpr 0x555e9724b718 <ldebug.c:280:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724b740 <ldebug.c:280:16> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B14.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724b758 <ldebug.c:280:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
`-ImplicitCastExpr 0x555e9724b740 <col:16> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B14.2]->is_vararg
   4: ImplicitCastExpr 0x555e9724b7b0 <ldebug.c:280:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b758 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
  `-ImplicitCastExpr 0x555e9724b740 <col:16> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B14.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x555e9724b7c8 <ldebug.c:280:16, col:20> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724b7b0 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b758 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    `-ImplicitCastExpr 0x555e9724b740 <col:16> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B14.4] (ImplicitCastExpr, IntegralCast, int)
   6: IntegerLiteral 0x555e9724b790 <./lobject.h:257:24> 'int' 1
1
   7: BinaryOperator 0x555e9724b7e0 <ldebug.c:280:16, ./lobject.h:257:24> 'int' '&'
|-ImplicitCastExpr 0x555e9724b7c8 <ldebug.c:280:16, col:20> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e9724b7b0 <col:16, col:20> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e9724b758 <col:16, col:20> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     `-ImplicitCastExpr 0x555e9724b740 <col:16> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e9724b718 <col:16> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724b790 <./lobject.h:257:24> 'int' 1
[B14.5] & [B14.6]
   Preds (1): B15
   Succs (1): B13

 [B15]
   1: DeclRefExpr 0x555e9724b5e8 <ldebug.c:279:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724b610 <ldebug.c:279:11> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B15.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724b628 <ldebug.c:279:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
`-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B15.2]->is_vararg
   4: ImplicitCastExpr 0x555e9724b680 <ldebug.c:279:11, col:15> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b628 <col:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
  `-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B15.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x555e9724b698 <ldebug.c:279:11, col:15> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724b680 <col:11, col:15> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b628 <col:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    `-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B15.4] (ImplicitCastExpr, IntegralCast, int)
   6: IntegerLiteral 0x555e9724b660 <./lobject.h:259:26> 'int' 4
4
   7: BinaryOperator 0x555e9724b6b0 <ldebug.c:279:11, ./lobject.h:259:26> 'int' '&'
|-ImplicitCastExpr 0x555e9724b698 <ldebug.c:279:11, col:15> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e9724b680 <col:11, col:15> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e9724b628 <col:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     `-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724b660 <./lobject.h:259:26> 'int' 4
[B15.5] & [B15.6]
   8: UnaryOperator 0x555e9724b6f8 <ldebug.c:279:9, col:42> 'int' prefix '!'
`-ParenExpr 0x555e9724b6d8 <col:10, col:42> 'int'
  `-BinaryOperator 0x555e9724b6b0 <col:11, ./lobject.h:259:26> 'int' '&'
    |-ImplicitCastExpr 0x555e9724b698 <ldebug.c:279:11, col:15> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e9724b680 <col:11, col:15> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x555e9724b628 <col:11, col:15> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |     `-ImplicitCastExpr 0x555e9724b610 <col:11> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x555e9724b5e8 <col:11> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-IntegerLiteral 0x555e9724b660 <./lobject.h:259:26> 'int' 4
!([B15.7])
   T: [B15.8] || ...
   Preds (1): B17
   Succs (2): B13 B14

 [B16]
   1: IntegerLiteral 0x555e9724b568 <ldebug.c:268:36> 'int' 0
0
   2: ReturnStmt 0x555e9724b588 <ldebug.c:268:29, col:36>
`-IntegerLiteral 0x555e9724b568 <col:36> 'int' 0
return [B16.1];
   Preds (1): B17
   Succs (1): B0

 [B17]
   1: DeclRefExpr 0x555e9724b278 <ldebug.c:278:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724b2a0 <ldebug.c:278:9> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724b2b8 <ldebug.c:278:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x555e971d9fd0
`-ImplicitCastExpr 0x555e9724b2a0 <col:9> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.2]->numparams
   4: ImplicitCastExpr 0x555e9724b400 <ldebug.c:278:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b2b8 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x555e971d9fd0
  `-ImplicitCastExpr 0x555e9724b2a0 <col:9> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x555e9724b418 <ldebug.c:278:9, col:13> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724b400 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b2b8 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x555e971d9fd0
    `-ImplicitCastExpr 0x555e9724b2a0 <col:9> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.4] (ImplicitCastExpr, IntegralCast, int)
   6: DeclRefExpr 0x555e9724b2f0 <ldebug.c:278:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   7: ImplicitCastExpr 0x555e9724b318 <ldebug.c:278:24> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x555e9724b330 <ldebug.c:278:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
`-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.7]->is_vararg
   9: ImplicitCastExpr 0x555e9724b388 <ldebug.c:278:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b330 <col:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
  `-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.8] (ImplicitCastExpr, LValueToRValue, lu_byte)
  10: ImplicitCastExpr 0x555e9724b3a0 <ldebug.c:278:24, col:28> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724b388 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b330 <col:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    `-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.9] (ImplicitCastExpr, IntegralCast, int)
  11: IntegerLiteral 0x555e9724b368 <./lobject.h:257:24> 'int' 1
1
  12: BinaryOperator 0x555e9724b3b8 <ldebug.c:278:24, ./lobject.h:257:24> 'int' '&'
|-ImplicitCastExpr 0x555e9724b3a0 <ldebug.c:278:24, col:28> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e9724b388 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e9724b330 <col:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     `-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724b368 <./lobject.h:257:24> 'int' 1
[B17.10] & [B17.11]
  13: BinaryOperator 0x555e9724b430 <ldebug.c:278:9, col:53> 'int' '+'
|-ImplicitCastExpr 0x555e9724b418 <col:9, col:13> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e9724b400 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e9724b2b8 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x555e971d9fd0
|     `-ImplicitCastExpr 0x555e9724b2a0 <col:9> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-ParenExpr 0x555e9724b3e0 <col:23, col:53> 'int'
  `-BinaryOperator 0x555e9724b3b8 <col:24, ./lobject.h:257:24> 'int' '&'
    |-ImplicitCastExpr 0x555e9724b3a0 <ldebug.c:278:24, col:28> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e9724b388 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x555e9724b330 <col:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |     `-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-IntegerLiteral 0x555e9724b368 <./lobject.h:257:24> 'int' 1
[B17.5] + ([B17.12])
  14: DeclRefExpr 0x555e9724b458 <ldebug.c:278:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
  15: ImplicitCastExpr 0x555e9724b480 <ldebug.c:278:58> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b458 <col:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.14] (ImplicitCastExpr, LValueToRValue, const Proto *)
  16: MemberExpr 0x555e9724b498 <ldebug.c:278:58, col:62> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9724b480 <col:58> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b458 <col:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.15]->maxstacksize
  17: ImplicitCastExpr 0x555e9724b4d0 <ldebug.c:278:58, col:62> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b498 <col:58, col:62> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9724b480 <col:58> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b458 <col:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.16] (ImplicitCastExpr, LValueToRValue, lu_byte)
  18: ImplicitCastExpr 0x555e9724b4e8 <ldebug.c:278:58, col:62> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724b4d0 <col:58, col:62> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b498 <col:58, col:62> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9724b480 <col:58> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b458 <col:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.17] (ImplicitCastExpr, IntegralCast, int)
  19: BinaryOperator 0x555e9724b500 <ldebug.c:278:9, col:62> 'int' '<='
|-BinaryOperator 0x555e9724b430 <col:9, col:53> 'int' '+'
| |-ImplicitCastExpr 0x555e9724b418 <col:9, col:13> 'int' <IntegralCast>
| | `-ImplicitCastExpr 0x555e9724b400 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x555e9724b2b8 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x555e971d9fd0
| |     `-ImplicitCastExpr 0x555e9724b2a0 <col:9> 'const Proto *' <LValueToRValue>
| |       `-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
| `-ParenExpr 0x555e9724b3e0 <col:23, col:53> 'int'
|   `-BinaryOperator 0x555e9724b3b8 <col:24, ./lobject.h:257:24> 'int' '&'
|     |-ImplicitCastExpr 0x555e9724b3a0 <ldebug.c:278:24, col:28> 'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x555e9724b388 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
|     |   `-MemberExpr 0x555e9724b330 <col:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
|     |     `-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
|     `-IntegerLiteral 0x555e9724b368 <./lobject.h:257:24> 'int' 1
`-ImplicitCastExpr 0x555e9724b4e8 <ldebug.c:278:58, col:62> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x555e9724b4d0 <col:58, col:62> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x555e9724b498 <col:58, col:62> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
      `-ImplicitCastExpr 0x555e9724b480 <col:58> 'const Proto *' <LValueToRValue>
        `-DeclRefExpr 0x555e9724b458 <col:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B17.13] <= [B17.18]
  20: UnaryOperator 0x555e9724b548 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9724b528 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9724b500 <line:278:9, col:62> 'int' '<='
    |-BinaryOperator 0x555e9724b430 <col:9, col:53> 'int' '+'
    | |-ImplicitCastExpr 0x555e9724b418 <col:9, col:13> 'int' <IntegralCast>
    | | `-ImplicitCastExpr 0x555e9724b400 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
    | |   `-MemberExpr 0x555e9724b2b8 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x555e971d9fd0
    | |     `-ImplicitCastExpr 0x555e9724b2a0 <col:9> 'const Proto *' <LValueToRValue>
    | |       `-DeclRefExpr 0x555e9724b278 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    | `-ParenExpr 0x555e9724b3e0 <col:23, col:53> 'int'
    |   `-BinaryOperator 0x555e9724b3b8 <col:24, ./lobject.h:257:24> 'int' '&'
    |     |-ImplicitCastExpr 0x555e9724b3a0 <ldebug.c:278:24, col:28> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e9724b388 <col:24, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
    |     |   `-MemberExpr 0x555e9724b330 <col:24, col:28> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x555e971da028
    |     |     `-ImplicitCastExpr 0x555e9724b318 <col:24> 'const Proto *' <LValueToRValue>
    |     |       `-DeclRefExpr 0x555e9724b2f0 <col:24> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    |     `-IntegerLiteral 0x555e9724b368 <./lobject.h:257:24> 'int' 1
    `-ImplicitCastExpr 0x555e9724b4e8 <ldebug.c:278:58, col:62> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x555e9724b4d0 <col:58, col:62> 'lu_byte':'unsigned char' <LValueToRValue>
        `-MemberExpr 0x555e9724b498 <col:58, col:62> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
          `-ImplicitCastExpr 0x555e9724b480 <col:58> 'const Proto *' <LValueToRValue>
            `-DeclRefExpr 0x555e9724b458 <col:58> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
!([B17.19])
   T: if [B17.20]
   Preds (1): B19
   Succs (2): B16 B15

 [B18]
   1: IntegerLiteral 0x555e9724b1f8 <ldebug.c:268:36> 'int' 0
0
   2: ReturnStmt 0x555e9724b218 <ldebug.c:268:29, col:36>
`-IntegerLiteral 0x555e9724b1f8 <col:36> 'int' 0
return [B18.1];
   Preds (1): B19
   Succs (1): B0

 [B19]
   1: DeclRefExpr 0x555e9724b0c8 <ldebug.c:277:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
pt
   2: ImplicitCastExpr 0x555e9724b0f0 <ldebug.c:277:9> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x555e9724b0c8 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B19.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x555e9724b108 <ldebug.c:277:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
`-ImplicitCastExpr 0x555e9724b0f0 <col:9> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x555e9724b0c8 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B19.2]->maxstacksize
   4: ImplicitCastExpr 0x555e9724b160 <ldebug.c:277:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x555e9724b108 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
  `-ImplicitCastExpr 0x555e9724b0f0 <col:9> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x555e9724b0c8 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B19.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x555e9724b178 <ldebug.c:277:9, col:13> 'int' <IntegralCast>
`-ImplicitCastExpr 0x555e9724b160 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x555e9724b108 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    `-ImplicitCastExpr 0x555e9724b0f0 <col:9> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x555e9724b0c8 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
[B19.4] (ImplicitCastExpr, IntegralCast, int)
   6: IntegerLiteral 0x555e9724b140 <./llimits.h:93:18> 'int' 250
250
   7: BinaryOperator 0x555e9724b190 <ldebug.c:277:9, ./llimits.h:93:18> 'int' '<='
|-ImplicitCastExpr 0x555e9724b178 <ldebug.c:277:9, col:13> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x555e9724b160 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x555e9724b108 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
|     `-ImplicitCastExpr 0x555e9724b0f0 <col:9> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x555e9724b0c8 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
`-IntegerLiteral 0x555e9724b140 <./llimits.h:93:18> 'int' 250
[B19.5] <= [B19.6]
   8: UnaryOperator 0x555e9724b1d8 <ldebug.c:268:23, col:26> 'int' prefix '!'
`-ParenExpr 0x555e9724b1b8 <col:24, col:26> 'int'
  `-BinaryOperator 0x555e9724b190 <line:277:9, ./llimits.h:93:18> 'int' '<='
    |-ImplicitCastExpr 0x555e9724b178 <ldebug.c:277:9, col:13> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x555e9724b160 <col:9, col:13> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-MemberExpr 0x555e9724b108 <col:9, col:13> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x555e971da080
    |     `-ImplicitCastExpr 0x555e9724b0f0 <col:9> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x555e9724b0c8 <col:9> 'const Proto *' lvalue ParmVar 0x555e9724af90 'pt' 'const Proto *'
    `-IntegerLiteral 0x555e9724b140 <./llimits.h:93:18> 'int' 250
!([B19.7])
   T: if [B19.8]
   Preds (1): B20
   Succs (2): B18 B17

 [B0 (EXIT)]
   Preds (7): B1 B2 B6 B10 B12 B16 B18
