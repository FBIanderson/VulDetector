static void ifstat(LexState *ls, int line)
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: DeclRefExpr 0x558fa8f3b790 <lparser.c:1160:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
   2: ImplicitCastExpr 0x558fa8f3b808 <lparser.c:1160:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b790 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
   3: DeclRefExpr 0x558fa8f3b7b8 <lparser.c:1160:20> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f3b858 <lparser.c:1160:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b7b8 <col:20> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f3b7e0 <lparser.c:1160:24> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
escapelist
   6: ImplicitCastExpr 0x558fa8f3b870 <lparser.c:1160:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b7e0 <col:24> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x558fa8f3b820 <lparser.c:1160:3, col:34> 'void'
|-ImplicitCastExpr 0x558fa8f3b808 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b790 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f3b858 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3b7b8 <col:20> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f3b870 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b7e0 <col:24> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
[B1.2]([B1.4], [B1.6])
   8: DeclRefExpr 0x558fa8f3b888 <lparser.c:1161:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
   9: ImplicitCastExpr 0x558fa8f3b950 <lparser.c:1161:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b888 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
  10: DeclRefExpr 0x558fa8f3b8b0 <lparser.c:1161:15> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8f3b9b0 <lparser.c:1161:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b8b0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B1.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: DeclRefExpr 0x558fa8f3b8d8 <lparser.c:1161:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
TK_END
  13: DeclRefExpr 0x558fa8f3b900 <lparser.c:1161:27> 'int' EnumConstant 0x558fa8e9e218 'TK_IF' 'int'
TK_IF
  14: DeclRefExpr 0x558fa8f3b928 <lparser.c:1161:34> 'int' lvalue ParmVar 0x558fa8f3a6b0 'line' 'int'
line
  15: ImplicitCastExpr 0x558fa8f3b9c8 <lparser.c:1161:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b928 <col:34> 'int' lvalue ParmVar 0x558fa8f3a6b0 'line' 'int'
[B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: CallExpr 0x558fa8f3b968 <lparser.c:1161:3, col:38> 'void'
|-ImplicitCastExpr 0x558fa8f3b950 <col:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b888 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f3b9b0 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3b8b0 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
|-DeclRefExpr 0x558fa8f3b8d8 <col:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
|-DeclRefExpr 0x558fa8f3b900 <col:27> 'int' EnumConstant 0x558fa8e9e218 'TK_IF' 'int'
`-ImplicitCastExpr 0x558fa8f3b9c8 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b928 <col:34> 'int' lvalue ParmVar 0x558fa8f3a6b0 'line' 'int'
[B1.9]([B1.11], [B1.12], [B1.13], [B1.15])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f3b610 <lparser.c:1159:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
   2: ImplicitCastExpr 0x558fa8f3b6d0 <lparser.c:1159:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b610 <col:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
   3: DeclRefExpr 0x558fa8f3b638 <lparser.c:1159:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f3b728 <lparser.c:1159:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b638 <col:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f3b660 <lparser.c:1159:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
escapelist
   6: UnaryOperator 0x558fa8f3b688 <lparser.c:1159:21, col:22> 'int *' prefix '&'
`-DeclRefExpr 0x558fa8f3b660 <col:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
&[B2.5]
   7: DeclRefExpr 0x558fa8f3b6a8 <lparser.c:1159:34> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
flist
   8: ImplicitCastExpr 0x558fa8f3b740 <lparser.c:1159:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b6a8 <col:34> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
[B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8f3b6e8 <lparser.c:1159:5, col:39> 'void'
|-ImplicitCastExpr 0x558fa8f3b6d0 <col:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b610 <col:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x558fa8f3b728 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3b638 <col:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f3b688 <col:21, col:22> 'int *' prefix '&'
| `-DeclRefExpr 0x558fa8f3b660 <col:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
`-ImplicitCastExpr 0x558fa8f3b740 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b6a8 <col:34> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
[B2.2]([B2.4], [B2.6], [B2.8])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f3b1d0 <lparser.c:1153:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
   2: ImplicitCastExpr 0x558fa8f3b318 <lparser.c:1153:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b1d0 <col:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
   3: DeclRefExpr 0x558fa8f3b1f8 <lparser.c:1153:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f3b370 <lparser.c:1153:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b1f8 <col:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f3b220 <lparser.c:1153:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
escapelist
   6: UnaryOperator 0x558fa8f3b248 <lparser.c:1153:21, col:22> 'int *' prefix '&'
`-DeclRefExpr 0x558fa8f3b220 <col:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
&[B3.5]
   7: DeclRefExpr 0x558fa8f3b268 <lparser.c:1153:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
   8: ImplicitCastExpr 0x558fa8f3b2b8 <lparser.c:1153:34> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b268 <col:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B3.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   9: DeclRefExpr 0x558fa8f3b290 <lparser.c:1153:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x558fa8f3b300 <lparser.c:1153:44> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b290 <col:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B3.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: CallExpr 0x558fa8f3b2d0 <lparser.c:1153:34, col:46> 'int'
|-ImplicitCastExpr 0x558fa8f3b2b8 <col:34> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b268 <col:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f3b300 <col:44> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b290 <col:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B3.8]([B3.10])
  12: CallExpr 0x558fa8f3b330 <lparser.c:1153:5, col:47> 'void'
|-ImplicitCastExpr 0x558fa8f3b318 <col:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b1d0 <col:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x558fa8f3b370 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3b1f8 <col:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f3b248 <col:21, col:22> 'int *' prefix '&'
| `-DeclRefExpr 0x558fa8f3b220 <col:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
`-CallExpr 0x558fa8f3b2d0 <col:34, col:46> 'int'
  |-ImplicitCastExpr 0x558fa8f3b2b8 <col:34> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f3b268 <col:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x558fa8f3b300 <col:44> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3b290 <col:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B3.2]([B3.4], [B3.6], [B3.11])
  13: DeclRefExpr 0x558fa8f3b388 <lparser.c:1154:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  14: ImplicitCastExpr 0x558fa8f3b400 <lparser.c:1154:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b388 <col:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B3.13] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  15: DeclRefExpr 0x558fa8f3b3b0 <lparser.c:1154:22> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
  16: ImplicitCastExpr 0x558fa8f3b450 <lparser.c:1154:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b3b0 <col:22> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B3.15] (ImplicitCastExpr, LValueToRValue, FuncState *)
  17: DeclRefExpr 0x558fa8f3b3d8 <lparser.c:1154:26> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
flist
  18: ImplicitCastExpr 0x558fa8f3b468 <lparser.c:1154:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b3d8 <col:26> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
[B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: CallExpr 0x558fa8f3b418 <lparser.c:1154:5, col:31> 'void'
|-ImplicitCastExpr 0x558fa8f3b400 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b388 <col:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f3b450 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3b3b0 <col:22> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f3b468 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b3d8 <col:26> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
[B3.14]([B3.16], [B3.18])
  20: DeclRefExpr 0x558fa8f3b480 <lparser.c:1155:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
  21: ImplicitCastExpr 0x558fa8f3b4d0 <lparser.c:1155:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b480 <col:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B3.20] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  22: DeclRefExpr 0x558fa8f3b4a8 <lparser.c:1155:15> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
  23: ImplicitCastExpr 0x558fa8f3b518 <lparser.c:1155:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b4a8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B3.22] (ImplicitCastExpr, LValueToRValue, LexState *)
  24: CallExpr 0x558fa8f3b4e8 <lparser.c:1155:5, col:17> 'void'
|-ImplicitCastExpr 0x558fa8f3b4d0 <col:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b480 <col:5> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f3b518 <col:15> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b4a8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B3.21]([B3.23])
  25: DeclRefExpr 0x558fa8f3b530 <lparser.c:1156:5> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
block
  26: ImplicitCastExpr 0x558fa8f3b580 <lparser.c:1156:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3b530 <col:5> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
[B3.25] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  27: DeclRefExpr 0x558fa8f3b558 <lparser.c:1156:11> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
  28: ImplicitCastExpr 0x558fa8f3b5c8 <lparser.c:1156:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b558 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B3.27] (ImplicitCastExpr, LValueToRValue, LexState *)
  29: CallExpr 0x558fa8f3b598 <lparser.c:1156:5, col:13> 'void'
|-ImplicitCastExpr 0x558fa8f3b580 <col:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3b530 <col:5> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f3b5c8 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b558 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B3.26]([B3.28])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x558fa8f3b0b8 <lparser.c:1152:7> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f3b0e0 <lparser.c:1152:7> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3b0b8 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f3b0f8 <lparser.c:1152:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f3b0e0 <col:7> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3b0b8 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B4.2]->t
   4: MemberExpr 0x558fa8f3b130 <lparser.c:1152:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f3b0f8 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f3b0e0 <col:7> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3b0b8 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B4.3].token
   5: ImplicitCastExpr 0x558fa8f3b190 <lparser.c:1152:7, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3b130 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f3b0f8 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f3b0e0 <col:7> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f3b0b8 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x558fa8f3b168 <lparser.c:1152:22> 'int' EnumConstant 0x558fa8e9e068 'TK_ELSE' 'int'
TK_ELSE
   7: BinaryOperator 0x558fa8f3b1a8 <lparser.c:1152:7, col:22> 'int' '=='
|-ImplicitCastExpr 0x558fa8f3b190 <col:7, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f3b130 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f3b0f8 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f3b0e0 <col:7> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f3b0b8 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8f3b168 <col:22> 'int' EnumConstant 0x558fa8e9e068 'TK_ELSE' 'int'
[B4.5] == [B4.6]
   T: if [B4.7]
   Preds (1): B7
   Succs (2): B3 B2

 [B5]
   Preds (1): B6
   Succs (1): B7

 [B6]
   1: DeclRefExpr 0x558fa8f3acc0 <lparser.c:1148:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
   2: ImplicitCastExpr 0x558fa8f3ae08 <lparser.c:1148:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3acc0 <col:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
   3: DeclRefExpr 0x558fa8f3ace8 <lparser.c:1148:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f3ae60 <lparser.c:1148:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3ace8 <col:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f3ad10 <lparser.c:1148:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
escapelist
   6: UnaryOperator 0x558fa8f3ad38 <lparser.c:1148:21, col:22> 'int *' prefix '&'
`-DeclRefExpr 0x558fa8f3ad10 <col:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
&[B6.5]
   7: DeclRefExpr 0x558fa8f3ad58 <lparser.c:1148:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
   8: ImplicitCastExpr 0x558fa8f3ada8 <lparser.c:1148:34> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3ad58 <col:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B6.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   9: DeclRefExpr 0x558fa8f3ad80 <lparser.c:1148:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x558fa8f3adf0 <lparser.c:1148:44> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3ad80 <col:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B6.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: CallExpr 0x558fa8f3adc0 <lparser.c:1148:34, col:46> 'int'
|-ImplicitCastExpr 0x558fa8f3ada8 <col:34> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3ad58 <col:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f3adf0 <col:44> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3ad80 <col:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B6.8]([B6.10])
  12: CallExpr 0x558fa8f3ae20 <lparser.c:1148:5, col:47> 'void'
|-ImplicitCastExpr 0x558fa8f3ae08 <col:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3acc0 <col:5> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x558fa8f3ae60 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3ace8 <col:17> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f3ad38 <col:21, col:22> 'int *' prefix '&'
| `-DeclRefExpr 0x558fa8f3ad10 <col:22> 'int' lvalue Var 0x558fa8f3a9d0 'escapelist' 'int'
`-CallExpr 0x558fa8f3adc0 <col:34, col:46> 'int'
  |-ImplicitCastExpr 0x558fa8f3ada8 <col:34> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f3ad58 <col:34> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x558fa8f3adf0 <col:44> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3ad80 <col:44> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B6.2]([B6.4], [B6.6], [B6.11])
  13: DeclRefExpr 0x558fa8f3ae78 <lparser.c:1149:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  14: ImplicitCastExpr 0x558fa8f3aef0 <lparser.c:1149:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3ae78 <col:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B6.13] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  15: DeclRefExpr 0x558fa8f3aea0 <lparser.c:1149:22> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
fs
  16: ImplicitCastExpr 0x558fa8f3af40 <lparser.c:1149:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3aea0 <col:22> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
[B6.15] (ImplicitCastExpr, LValueToRValue, FuncState *)
  17: DeclRefExpr 0x558fa8f3aec8 <lparser.c:1149:26> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
flist
  18: ImplicitCastExpr 0x558fa8f3af58 <lparser.c:1149:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3aec8 <col:26> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
[B6.17] (ImplicitCastExpr, LValueToRValue, int)
  19: CallExpr 0x558fa8f3af08 <lparser.c:1149:5, col:31> 'void'
|-ImplicitCastExpr 0x558fa8f3aef0 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3ae78 <col:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f3af40 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f3aea0 <col:22> 'FuncState *' lvalue Var 0x558fa8f3a800 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f3af58 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3aec8 <col:26> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
[B6.14]([B6.16], [B6.18])
  20: DeclRefExpr 0x558fa8f3af98 <lparser.c:1150:13> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
test_then_block
  21: ImplicitCastExpr 0x558fa8f3afe8 <lparser.c:1150:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3af98 <col:13> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
[B6.20] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
  22: DeclRefExpr 0x558fa8f3afc0 <lparser.c:1150:29> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
  23: ImplicitCastExpr 0x558fa8f3b030 <lparser.c:1150:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3afc0 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B6.22] (ImplicitCastExpr, LValueToRValue, LexState *)
  24: CallExpr 0x558fa8f3b000 <lparser.c:1150:13, col:31> 'int'
|-ImplicitCastExpr 0x558fa8f3afe8 <col:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3af98 <col:13> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f3b030 <col:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3afc0 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B6.21]([B6.23])
  25: DeclRefExpr 0x558fa8f3af70 <lparser.c:1150:5> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
flist
  26: BinaryOperator 0x558fa8f3b048 <lparser.c:1150:5, col:31> 'int' '='
|-DeclRefExpr 0x558fa8f3af70 <col:5> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
`-CallExpr 0x558fa8f3b000 <col:13, col:31> 'int'
  |-ImplicitCastExpr 0x558fa8f3afe8 <col:13> 'int (*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f3af98 <col:13> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
  `-ImplicitCastExpr 0x558fa8f3b030 <col:29> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3afc0 <col:29> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B6.25] = [B6.24]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x558fa8f3aba8 <lparser.c:1147:10> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f3abd0 <lparser.c:1147:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3aba8 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f3abe8 <lparser.c:1147:10, col:14> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f3abd0 <col:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3aba8 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B7.2]->t
   4: MemberExpr 0x558fa8f3ac20 <lparser.c:1147:10, col:16> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f3abe8 <col:10, col:14> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f3abd0 <col:10> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3aba8 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B7.3].token
   5: ImplicitCastExpr 0x558fa8f3ac80 <lparser.c:1147:10, col:16> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f3ac20 <col:10, col:16> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f3abe8 <col:10, col:14> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f3abd0 <col:10> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f3aba8 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B7.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x558fa8f3ac58 <lparser.c:1147:25> 'int' EnumConstant 0x558fa8e9e0b0 'TK_ELSEIF' 'int'
TK_ELSEIF
   7: BinaryOperator 0x558fa8f3ac98 <lparser.c:1147:10, col:25> 'int' '=='
|-ImplicitCastExpr 0x558fa8f3ac80 <col:10, col:16> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f3ac20 <col:10, col:16> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f3abe8 <col:10, col:14> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f3abd0 <col:10> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f3aba8 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8f3ac58 <col:25> 'int' EnumConstant 0x558fa8e9e0b0 'TK_ELSEIF' 'int'
[B7.5] == [B7.6]
   T: while [B7.7]
   Preds (2): B5 B8
   Succs (2): B6 B4

 [B8]
   1: DeclRefExpr 0x558fa8f3a860 <lparser.c:1143:19> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f3a888 <lparser.c:1143:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3a860 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B8.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f3a8a0 <lparser.c:1143:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f3a888 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3a860 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B8.2]->fs
   4: ImplicitCastExpr 0x558fa8f3a8d8 <lparser.c:1143:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f3a8a0 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f3a888 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3a860 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f3a910 <lparser.c:1143:3, col:25>col:14
`-VarDecl 0x558fa8f3a800 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f3a8d8 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f3a8a0 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f3a888 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f3a860 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f3a9a0 <lparser.c:1144:3, col:12>col:7
`-VarDecl 0x558fa8f3a940 <col:3, col:7> col:7 used flist 'int'
int flist;
   7: IntegerLiteral 0x558fa8f3aa30 <./lcode.h:20:19> 'int' 1
1
   8: UnaryOperator 0x558fa8f3aa50 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f3aa30 <col:19> 'int' 1
-[B8.7]
   9: DeclStmt 0x558fa8f3aa90 <lparser.c:1145:3, col:27>col:7
`-VarDecl 0x558fa8f3a9d0 <col:3, ./lcode.h:20:20> lparser.c:1145:7 used escapelist 'int' cinit
  `-ParenExpr 0x558fa8f3aa70 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x558fa8f3aa50 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x558fa8f3aa30 <col:19> 'int' 1
int escapelist = (-1);
  10: DeclRefExpr 0x558fa8f3aad0 <lparser.c:1146:11> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
test_then_block
  11: ImplicitCastExpr 0x558fa8f3ab20 <lparser.c:1146:11> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f3aad0 <col:11> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
[B8.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
  12: DeclRefExpr 0x558fa8f3aaf8 <lparser.c:1146:27> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
ls
  13: ImplicitCastExpr 0x558fa8f3ab68 <lparser.c:1146:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f3aaf8 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B8.12] (ImplicitCastExpr, LValueToRValue, LexState *)
  14: CallExpr 0x558fa8f3ab38 <lparser.c:1146:11, col:29> 'int'
|-ImplicitCastExpr 0x558fa8f3ab20 <col:11> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f3aad0 <col:11> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f3ab68 <col:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f3aaf8 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B8.11]([B8.13])
  15: DeclRefExpr 0x558fa8f3aaa8 <lparser.c:1146:3> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
flist
  16: BinaryOperator 0x558fa8f3ab80 <lparser.c:1146:3, col:29> 'int' '='
|-DeclRefExpr 0x558fa8f3aaa8 <col:3> 'int' lvalue Var 0x558fa8f3a940 'flist' 'int'
`-CallExpr 0x558fa8f3ab38 <col:11, col:29> 'int'
  |-ImplicitCastExpr 0x558fa8f3ab20 <col:11> 'int (*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f3aad0 <col:11> 'int (LexState *)' Function 0x558fa8f3a118 'test_then_block' 'int (LexState *)'
  `-ImplicitCastExpr 0x558fa8f3ab68 <col:27> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f3aaf8 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f3a638 'ls' 'LexState *'
[B8.15] = [B8.14]
   Preds (1): B9
   Succs (1): B7

 [B0 (EXIT)]
   Preds (1): B1
