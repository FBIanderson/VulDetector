static int need_value(FuncState *fs, int list)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: IntegerLiteral 0x5637768b5ea0 <lcode.c:127:10> 'int' 0
0
   2: ReturnStmt 0x5637768b5ec0 <lcode.c:127:3, col:10>
`-IntegerLiteral 0x5637768b5ea0 <col:10> 'int' 0
return [B1.1];
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768b5668 <lcode.c:123:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
getjump
   2: ImplicitCastExpr 0x5637768b5738 <lcode.c:123:34> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768b5668 <col:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768b5690 <lcode.c:123:42> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768b5788 <lcode.c:123:42> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768b5690 <col:42> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768b56b8 <lcode.c:123:46> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768b57a0 <lcode.c:123:46> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b56b8 <col:46> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x5637768b5750 <lcode.c:123:34, col:50> 'int'
|-ImplicitCastExpr 0x5637768b5738 <col:34> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768b5668 <col:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
|-ImplicitCastExpr 0x5637768b5788 <col:42> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768b5690 <col:42> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768b57a0 <col:46> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768b56b8 <col:46> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x5637768b5640 <lcode.c:123:27> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
list
   9: BinaryOperator 0x5637768b57b8 <lcode.c:123:27, col:50> 'int' '='
|-DeclRefExpr 0x5637768b5640 <col:27> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
`-CallExpr 0x5637768b5750 <col:34, col:50> 'int'
  |-ImplicitCastExpr 0x5637768b5738 <col:34> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768b5668 <col:34> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
  |-ImplicitCastExpr 0x5637768b5788 <col:42> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768b5690 <col:42> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768b57a0 <col:46> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768b56b8 <col:46> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B2.8] = [B2.7]
   Preds (1): B4
   Succs (1): B5

 [B3]
   1: IntegerLiteral 0x5637768b5dd8 <lcode.c:125:45> 'int' 1
1
   2: ReturnStmt 0x5637768b5df8 <lcode.c:125:38, col:45>
`-IntegerLiteral 0x5637768b5dd8 <col:45> 'int' 1
return [B3.1];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x5637768b5850 <lcode.c:124:22> 'Instruction *(FuncState *, int)' Function 0x5637768b3d10 'getjumpcontrol' 'Instruction *(FuncState *, int)'
getjumpcontrol
   2: ImplicitCastExpr 0x5637768b5928 <lcode.c:124:22> 'Instruction *(*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768b5850 <col:22> 'Instruction *(FuncState *, int)' Function 0x5637768b3d10 'getjumpcontrol' 'Instruction *(FuncState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, Instruction *(*)(FuncState *, int))
   3: DeclRefExpr 0x5637768b5878 <lcode.c:124:37> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768b5978 <lcode.c:124:37> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768b5878 <col:37> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768b58a0 <lcode.c:124:41> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768b5990 <lcode.c:124:41> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b58a0 <col:41> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x5637768b5940 <lcode.c:124:22, col:45> 'Instruction *'
|-ImplicitCastExpr 0x5637768b5928 <col:22> 'Instruction *(*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768b5850 <col:22> 'Instruction *(FuncState *, int)' Function 0x5637768b3d10 'getjumpcontrol' 'Instruction *(FuncState *, int)'
|-ImplicitCastExpr 0x5637768b5978 <col:37> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768b5878 <col:37> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768b5990 <col:41> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768b58a0 <col:41> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B4.2]([B4.4], [B4.6])
   8: UnaryOperator 0x5637768b59a8 <lcode.c:124:21, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
`-CallExpr 0x5637768b5940 <col:22, col:45> 'Instruction *'
  |-ImplicitCastExpr 0x5637768b5928 <col:22> 'Instruction *(*)(FuncState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768b5850 <col:22> 'Instruction *(FuncState *, int)' Function 0x5637768b3d10 'getjumpcontrol' 'Instruction *(FuncState *, int)'
  |-ImplicitCastExpr 0x5637768b5978 <col:37> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768b5878 <col:37> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768b5990 <col:41> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768b58a0 <col:41> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
*[B4.7]
   9: ImplicitCastExpr 0x5637768b59c8 <lcode.c:124:21, col:45> 'Instruction':'unsigned int' <LValueToRValue>
`-UnaryOperator 0x5637768b59a8 <col:21, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
  `-CallExpr 0x5637768b5940 <col:22, col:45> 'Instruction *'
    |-ImplicitCastExpr 0x5637768b5928 <col:22> 'Instruction *(*)(FuncState *, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768b5850 <col:22> 'Instruction *(FuncState *, int)' Function 0x5637768b3d10 'getjumpcontrol' 'Instruction *(FuncState *, int)'
    |-ImplicitCastExpr 0x5637768b5978 <col:37> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768b5878 <col:37> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768b5990 <col:41> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5637768b58a0 <col:41> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B4.8] (ImplicitCastExpr, LValueToRValue, Instruction)
  10: DeclStmt 0x5637768b59e0 <lcode.c:124:5, col:46>col:17
`-VarDecl 0x5637768b57f0 <col:5, col:45> col:17 used i 'Instruction':'unsigned int' cinit
  `-ImplicitCastExpr 0x5637768b59c8 <col:21, col:45> 'Instruction':'unsigned int' <LValueToRValue>
    `-UnaryOperator 0x5637768b59a8 <col:21, col:45> 'Instruction':'unsigned int' lvalue prefix '*'
      `-CallExpr 0x5637768b5940 <col:22, col:45> 'Instruction *'
        |-ImplicitCastExpr 0x5637768b5928 <col:22> 'Instruction *(*)(FuncState *, int)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x5637768b5850 <col:22> 'Instruction *(FuncState *, int)' Function 0x5637768b3d10 'getjumpcontrol' 'Instruction *(FuncState *, int)'
        |-ImplicitCastExpr 0x5637768b5978 <col:37> 'FuncState *' <LValueToRValue>
        | `-DeclRefExpr 0x5637768b5878 <col:37> 'FuncState *' lvalue ParmVar 0x5637768b4780 'fs' 'FuncState *'
        `-ImplicitCastExpr 0x5637768b5990 <col:41> 'int' <LValueToRValue>
          `-DeclRefExpr 0x5637768b58a0 <col:41> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
Instruction i = *getjumpcontrol(fs, list);
  11: DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
i
  12: ImplicitCastExpr 0x5637768b5a60 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768b5a20 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
([B4.11]) (ImplicitCastExpr, LValueToRValue, Instruction)
  13: IntegerLiteral 0x5637768b5a40 <./lopcodes.h:44:17> 'int' 0
0
  14: BinaryOperator 0x5637768b5a78 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768b5a60 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768b5a20 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x5637768b5a40 <./lopcodes.h:44:17> 'int' 0
[B4.12] >> [B4.13]
  15: IntegerLiteral 0x5637768b5ac0 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x5637768b5af0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
(Instruction)[B4.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x5637768b5b18 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
~[B4.16]
  18: IntegerLiteral 0x5637768b5b58 <./lopcodes.h:42:18> 'int' 6
6
  19: BinaryOperator 0x5637768b5b78 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
`-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
([B4.17]) << [B4.18]
  20: UnaryOperator 0x5637768b5bc0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768b5ba0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768b5b78 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
~([B4.19])
  21: IntegerLiteral 0x5637768b5c00 <./lopcodes.h:80:67> 'int' 0
0
  22: BinaryOperator 0x5637768b5c20 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768b5be0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768b5bc0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768b5ba0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768b5b78 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768b5c00 <line:80:67> 'int' 0
([B4.20]) << [B4.21]
  23: BinaryOperator 0x5637768b5c68 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768b5aa0 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768b5a78 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768b5a60 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768b5a20 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x5637768b5a40 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x5637768b5c48 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768b5c20 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768b5be0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768b5bc0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768b5ba0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768b5b78 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768b5c00 <line:80:67> 'int' 0
([B4.14]) & ([B4.22])
  24: CStyleCastExpr 0x5637768b5cf0 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x5637768b5cd0 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768b5c68 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768b5aa0 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768b5a78 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768b5a60 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768b5a20 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x5637768b5a40 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x5637768b5c48 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768b5c20 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768b5be0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768b5bc0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768b5ba0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768b5b78 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768b5c00 <line:80:67> 'int' 0
(OpCode)([B4.23]) (CStyleCastExpr, IntegralCast, OpCode)
  25: ImplicitCastExpr 0x5637768b5d80 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768b5d38 <col:23, col:70> 'OpCode':'OpCode'
  `-ParenExpr 0x5637768b5d18 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
    `-CStyleCastExpr 0x5637768b5cf0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
      `-ParenExpr 0x5637768b5cd0 <col:26, col:30> 'unsigned int'
        `-BinaryOperator 0x5637768b5c68 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
          |-ParenExpr 0x5637768b5aa0 <line:80:37, col:49> 'Instruction':'unsigned int'
          | `-BinaryOperator 0x5637768b5a78 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
          |   |-ImplicitCastExpr 0x5637768b5a60 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
          |   | `-ParenExpr 0x5637768b5a20 <col:38, col:40> 'Instruction':'unsigned int' lvalue
          |   |   `-DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
          |   `-IntegerLiteral 0x5637768b5a40 <./lopcodes.h:44:17> 'int' 0
          `-ParenExpr 0x5637768b5c48 <line:71:20, col:49> 'Instruction':'unsigned int'
            `-BinaryOperator 0x5637768b5c20 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
              |-ParenExpr 0x5637768b5be0 <line:71:21, col:45> 'Instruction':'unsigned int'
              | `-UnaryOperator 0x5637768b5bc0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
              |   `-ParenExpr 0x5637768b5ba0 <col:23, col:44> 'Instruction':'unsigned int'
              |     `-BinaryOperator 0x5637768b5b78 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
              |       |-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
              |       | `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
              |       |   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
              |       |     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
              |       `-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
              `-IntegerLiteral 0x5637768b5c00 <line:80:67> 'int' 0
(([B4.24])) (ImplicitCastExpr, IntegralCast, unsigned int)
  26: DeclRefExpr 0x5637768b5d58 <lcode.c:125:26> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
OP_TESTSET
  27: ImplicitCastExpr 0x5637768b5d98 <lcode.c:125:26> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768b5d58 <col:26> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
[B4.26] (ImplicitCastExpr, IntegralCast, unsigned int)
  28: BinaryOperator 0x5637768b5db0 <./lopcodes.h:80:23, lcode.c:125:26> 'int' '!='
|-ImplicitCastExpr 0x5637768b5d80 <./lopcodes.h:80:23, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x5637768b5d38 <col:23, col:70> 'OpCode':'OpCode'
|   `-ParenExpr 0x5637768b5d18 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
|     `-CStyleCastExpr 0x5637768b5cf0 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
|       `-ParenExpr 0x5637768b5cd0 <col:26, col:30> 'unsigned int'
|         `-BinaryOperator 0x5637768b5c68 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|           |-ParenExpr 0x5637768b5aa0 <line:80:37, col:49> 'Instruction':'unsigned int'
|           | `-BinaryOperator 0x5637768b5a78 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|           |   |-ImplicitCastExpr 0x5637768b5a60 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|           |   | `-ParenExpr 0x5637768b5a20 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|           |   |   `-DeclRefExpr 0x5637768b59f8 <lcode.c:125:20> 'Instruction':'unsigned int' lvalue Var 0x5637768b57f0 'i' 'Instruction':'unsigned int'
|           |   `-IntegerLiteral 0x5637768b5a40 <./lopcodes.h:44:17> 'int' 0
|           `-ParenExpr 0x5637768b5c48 <line:71:20, col:49> 'Instruction':'unsigned int'
|             `-BinaryOperator 0x5637768b5c20 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
|               |-ParenExpr 0x5637768b5be0 <line:71:21, col:45> 'Instruction':'unsigned int'
|               | `-UnaryOperator 0x5637768b5bc0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|               |   `-ParenExpr 0x5637768b5ba0 <col:23, col:44> 'Instruction':'unsigned int'
|               |     `-BinaryOperator 0x5637768b5b78 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|               |       |-ParenExpr 0x5637768b5b38 <line:71:24, col:40> 'Instruction':'unsigned int'
|               |       | `-UnaryOperator 0x5637768b5b18 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|               |       |   `-CStyleCastExpr 0x5637768b5af0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|               |       |     `-IntegerLiteral 0x5637768b5ac0 <col:39> 'int' 0
|               |       `-IntegerLiteral 0x5637768b5b58 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x5637768b5c00 <line:80:67> 'int' 0
`-ImplicitCastExpr 0x5637768b5d98 <lcode.c:125:26> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768b5d58 <col:26> 'int' EnumConstant 0x5637768771e0 'OP_TESTSET' 'int'
[B4.25] != [B4.27]
   T: if [B4.28]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x5637768b4940 <lcode.c:123:10> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
list
   2: ImplicitCastExpr 0x5637768b5600 <lcode.c:123:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b4940 <col:10> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768b4968 <./lcode.h:20:19> 'int' 1
1
   4: UnaryOperator 0x5637768b55c0 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768b4968 <col:19> 'int' 1
-[B5.3]
   5: BinaryOperator 0x5637768b5618 <lcode.c:123:10, ./lcode.h:20:20> 'int' '!='
|-ImplicitCastExpr 0x5637768b5600 <lcode.c:123:10> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768b4940 <col:10> 'int' lvalue ParmVar 0x5637768b47f8 'list' 'int'
`-ParenExpr 0x5637768b55e0 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768b55c0 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768b4968 <col:19> 'int' 1
[B5.2] != ([B5.4])
   T: for (; [B5.5]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B0 (EXIT)]
   Preds (2): B1 B3
