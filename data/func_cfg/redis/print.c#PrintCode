static void PrintCode(const Proto *f)
 [B70 (ENTRY)]
   Succs (1): B69

 [B1]
   1: DeclRefExpr 0x55936cb52d20 <print.c:78:19> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   2: UnaryOperator 0x55936cb52d48 <print.c:78:19, col:21> 'int' postfix '++'
`-DeclRefExpr 0x55936cb52d20 <col:19> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B1.1]++
   Preds (1): B2
   Succs (1): B68

 [B2]
   1: DeclRefExpr 0x55936cb5c300 <print.c:154:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5c358 <print.c:154:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5c300 <col:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5c328 <print.c:154:10> 'char [2]' lvalue "\n"
"\n"
   4: ImplicitCastExpr 0x55936cb5c3a0 <print.c:154:10> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5c328 <col:10> 'char [2]' lvalue "\n"
[B2.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5c3b8 <print.c:154:10> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5c3a0 <col:10> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5c328 <col:10> 'char [2]' lvalue "\n"
[B2.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb5c370 <print.c:154:3, col:14> 'int'
|-ImplicitCastExpr 0x55936cb5c358 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5c300 <col:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb5c3b8 <col:10> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5c3a0 <col:10> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5c328 <col:10> 'char [2]' lvalue "\n"
[B2.2]([B2.5])
   Preds (9): B4 B5 B9 B10 B13 B30 B34 B36
      B41
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x55936cb586c8 <print.c:105:11> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
   2: ImplicitCastExpr 0x55936cb586f0 <print.c:105:11> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb586c8 <col:11> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B3.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x55936cb58708 <print.c:105:11> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb586f0 <col:11> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb586c8 <col:11> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B3.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B3.3]
   Preds (4): B43 B47 B51 B42(Unreachable)
   Succs (22): B8 B9 B11 B12 B10 B14 B15 B16
     B17 B18 B19 B20 B21 B29 B31 B33 B35 B34
     B37 B40 B41 B4

 [B4]
  default:
   T: break;
   Preds (1): B3
   Succs (1): B2

 [B5]
   T: break;
   Preds (2): B6 B7
   Succs (1): B2

 [B6]
   1: DeclRefExpr 0x55936cb5bee8 <print.c:149:10> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5bf68 <print.c:149:10> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5bee8 <col:10> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5bf10 <print.c:149:17> 'char [6]' lvalue "\t; %d"
"\t; %d"
   4: ImplicitCastExpr 0x55936cb5bfb8 <print.c:149:17> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5bf10 <col:17> 'char [6]' lvalue "\t; %d"
[B6.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5bfd0 <print.c:149:17> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5bfb8 <col:17> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5bf10 <col:17> 'char [6]' lvalue "\t; %d"
[B6.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb5bf40 <print.c:149:26> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   7: ImplicitCastExpr 0x55936cb5bfe8 <print.c:149:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb5bf40 <col:26> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
[B6.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CallExpr 0x55936cb5bf80 <print.c:149:10, col:27> 'int'
|-ImplicitCastExpr 0x55936cb5bf68 <col:10> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5bee8 <col:10> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb5bfd0 <col:17> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb5bfb8 <col:17> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5bf10 <col:17> 'char [6]' lvalue "\t; %d"
`-ImplicitCastExpr 0x55936cb5bfe8 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5bf40 <col:26> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
[B6.2]([B6.5], [B6.7])
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x55936cb5bd08 <print.c:148:15> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5be68 <print.c:148:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5bd08 <col:15> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5bd30 <print.c:148:22> 'char [6]' lvalue "\t; %d"
"\t; %d"
   4: ImplicitCastExpr 0x55936cb5beb8 <print.c:148:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5bd30 <col:22> 'char [6]' lvalue "\t; %d"
[B7.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5bed0 <print.c:148:22> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5beb8 <col:22> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5bd30 <col:22> 'char [6]' lvalue "\t; %d"
[B7.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb5bd60 <print.c:148:36> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
code
   7: ImplicitCastExpr 0x55936cb5bdd0 <print.c:148:36> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5bd60 <col:36> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
[B7.6] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   8: DeclRefExpr 0x55936cb5bd88 <print.c:148:43> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   9: UnaryOperator 0x55936cb5bdb0 <print.c:148:41, col:43> 'int' prefix '++'
`-DeclRefExpr 0x55936cb5bd88 <col:43> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
++[B7.8]
  10: ArraySubscriptExpr 0x55936cb5bde8 <print.c:148:36, col:45> 'const Instruction':'const unsigned int' lvalue
|-ImplicitCastExpr 0x55936cb5bdd0 <col:36> 'const Instruction *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb5bd60 <col:36> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
`-UnaryOperator 0x55936cb5bdb0 <col:41, col:43> 'int' prefix '++'
  `-DeclRefExpr 0x55936cb5bd88 <col:43> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B7.7][[B7.9]]
  11: ImplicitCastExpr 0x55936cb5be28 <print.c:148:36, col:45> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb5bde8 <col:36, col:45> 'const Instruction':'const unsigned int' lvalue
  |-ImplicitCastExpr 0x55936cb5bdd0 <col:36> 'const Instruction *' <LValueToRValue>
  | `-DeclRefExpr 0x55936cb5bd60 <col:36> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
  `-UnaryOperator 0x55936cb5bdb0 <col:41, col:43> 'int' prefix '++'
    `-DeclRefExpr 0x55936cb5bd88 <col:43> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B7.10] (ImplicitCastExpr, LValueToRValue, Instruction)
  12: CStyleCastExpr 0x55936cb5be40 <print.c:148:31, col:45> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5be28 <col:36, col:45> 'Instruction':'unsigned int' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb5bde8 <col:36, col:45> 'const Instruction':'const unsigned int' lvalue
    |-ImplicitCastExpr 0x55936cb5bdd0 <col:36> 'const Instruction *' <LValueToRValue>
    | `-DeclRefExpr 0x55936cb5bd60 <col:36> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
    `-UnaryOperator 0x55936cb5bdb0 <col:41, col:43> 'int' prefix '++'
      `-DeclRefExpr 0x55936cb5bd88 <col:43> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
(int)[B7.11] (CStyleCastExpr, IntegralCast, int)
  13: CallExpr 0x55936cb5be80 <print.c:148:15, col:46> 'int'
|-ImplicitCastExpr 0x55936cb5be68 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5bd08 <col:15> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb5bed0 <col:22> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb5beb8 <col:22> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5bd30 <col:22> 'char [6]' lvalue "\t; %d"
`-CStyleCastExpr 0x55936cb5be40 <col:31, col:45> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x55936cb5be28 <col:36, col:45> 'Instruction':'unsigned int' <LValueToRValue>
    `-ArraySubscriptExpr 0x55936cb5bde8 <col:36, col:45> 'const Instruction':'const unsigned int' lvalue
      |-ImplicitCastExpr 0x55936cb5bdd0 <col:36> 'const Instruction *' <LValueToRValue>
      | `-DeclRefExpr 0x55936cb5bd60 <col:36> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
      `-UnaryOperator 0x55936cb5bdb0 <col:41, col:43> 'int' prefix '++'
        `-DeclRefExpr 0x55936cb5bd88 <col:43> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B7.2]([B7.5], [B7.12])
   Preds (1): B8
   Succs (1): B5

 [B8]
  case OP_SETLIST:
   1: DeclRefExpr 0x55936cb5bc80 <print.c:148:9> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   2: ImplicitCastExpr 0x55936cb5bcc8 <print.c:148:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb5bc80 <col:9> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
[B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x55936cb5bca8 <print.c:148:12> 'int' 0
0
   4: BinaryOperator 0x55936cb5bce0 <print.c:148:9, col:12> 'int' '=='
|-ImplicitCastExpr 0x55936cb5bcc8 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb5bc80 <col:9> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-IntegerLiteral 0x55936cb5bca8 <col:12> 'int' 0
[B8.2] == [B8.3]
   T: if [B8.4]
   Preds (1): B3
   Succs (2): B7 B6

 [B9]
  case OP_CLOSURE:
   1: DeclRefExpr 0x55936cb5b980 <print.c:145:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5bb98 <print.c:145:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5b980 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5b9a8 <print.c:145:12> 'char [6]' lvalue "\t; %p"
"\t; %p"
   4: ImplicitCastExpr 0x55936cb5bbe8 <print.c:145:12> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5b9a8 <col:12> 'char [6]' lvalue "\t; %p"
[B9.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5bc00 <print.c:145:12> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5bbe8 <col:12> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5b9a8 <col:12> 'char [6]' lvalue "\t; %p"
[B9.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb5b9d8 <print.c:145:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   7: ImplicitCastExpr 0x55936cb5ba00 <print.c:145:26> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B9.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x55936cb5ba18 <print.c:145:26, col:29> 'struct Proto **const' lvalue ->p 0x55936cb1c070
`-ImplicitCastExpr 0x55936cb5ba00 <col:26> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B9.7]->p
   9: ImplicitCastExpr 0x55936cb5ba78 <print.c:145:26, col:29> 'struct Proto **' <LValueToRValue>
`-MemberExpr 0x55936cb5ba18 <col:26, col:29> 'struct Proto **const' lvalue ->p 0x55936cb1c070
  `-ImplicitCastExpr 0x55936cb5ba00 <col:26> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B9.8] (ImplicitCastExpr, LValueToRValue, struct Proto **)
  10: DeclRefExpr 0x55936cb5ba50 <print.c:145:31> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
bx
  11: ImplicitCastExpr 0x55936cb5ba90 <print.c:145:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb5ba50 <col:31> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: ArraySubscriptExpr 0x55936cb5baa8 <print.c:145:26, col:33> 'struct Proto *' lvalue
|-ImplicitCastExpr 0x55936cb5ba78 <col:26, col:29> 'struct Proto **' <LValueToRValue>
| `-MemberExpr 0x55936cb5ba18 <col:26, col:29> 'struct Proto **const' lvalue ->p 0x55936cb1c070
|   `-ImplicitCastExpr 0x55936cb5ba00 <col:26> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ImplicitCastExpr 0x55936cb5ba90 <col:31> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5ba50 <col:31> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B9.9][[B9.11]]
  13: ImplicitCastExpr 0x55936cb5bb38 <print.c:21:32, col:34> 'struct Proto *' <LValueToRValue>
`-ParenExpr 0x55936cb5bb18 <col:32, col:34> 'struct Proto *' lvalue
  `-ArraySubscriptExpr 0x55936cb5baa8 <line:145:26, col:33> 'struct Proto *' lvalue
    |-ImplicitCastExpr 0x55936cb5ba78 <col:26, col:29> 'struct Proto **' <LValueToRValue>
    | `-MemberExpr 0x55936cb5ba18 <col:26, col:29> 'struct Proto **const' lvalue ->p 0x55936cb1c070
    |   `-ImplicitCastExpr 0x55936cb5ba00 <col:26> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
    `-ImplicitCastExpr 0x55936cb5ba90 <col:31> 'int' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5ba50 <col:31> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
([B9.12]) (ImplicitCastExpr, LValueToRValue, struct Proto *)
  14: CStyleCastExpr 0x55936cb5bb50 <print.c:21:19, col:34> 'const void *' <BitCast>
`-ImplicitCastExpr 0x55936cb5bb38 <col:32, col:34> 'struct Proto *' <LValueToRValue>
  `-ParenExpr 0x55936cb5bb18 <col:32, col:34> 'struct Proto *' lvalue
    `-ArraySubscriptExpr 0x55936cb5baa8 <line:145:26, col:33> 'struct Proto *' lvalue
      |-ImplicitCastExpr 0x55936cb5ba78 <col:26, col:29> 'struct Proto **' <LValueToRValue>
      | `-MemberExpr 0x55936cb5ba18 <col:26, col:29> 'struct Proto **const' lvalue ->p 0x55936cb1c070
      |   `-ImplicitCastExpr 0x55936cb5ba00 <col:26> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
      `-ImplicitCastExpr 0x55936cb5ba90 <col:31> 'int' <LValueToRValue>
        `-DeclRefExpr 0x55936cb5ba50 <col:31> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
(const void *)[B9.13] (CStyleCastExpr, BitCast, const void *)
  15: CallExpr 0x55936cb5bbb0 <print.c:145:5, col:35> 'int'
|-ImplicitCastExpr 0x55936cb5bb98 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5b980 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb5bc00 <col:12> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb5bbe8 <col:12> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5b9a8 <col:12> 'char [6]' lvalue "\t; %p"
`-ParenExpr 0x55936cb5bb78 <line:21:18, col:35> 'const void *'
  `-CStyleCastExpr 0x55936cb5bb50 <col:19, col:34> 'const void *' <BitCast>
    `-ImplicitCastExpr 0x55936cb5bb38 <col:32, col:34> 'struct Proto *' <LValueToRValue>
      `-ParenExpr 0x55936cb5bb18 <col:32, col:34> 'struct Proto *' lvalue
        `-ArraySubscriptExpr 0x55936cb5baa8 <line:145:26, col:33> 'struct Proto *' lvalue
          |-ImplicitCastExpr 0x55936cb5ba78 <col:26, col:29> 'struct Proto **' <LValueToRValue>
          | `-MemberExpr 0x55936cb5ba18 <col:26, col:29> 'struct Proto **const' lvalue ->p 0x55936cb1c070
          |   `-ImplicitCastExpr 0x55936cb5ba00 <col:26> 'const Proto *' <LValueToRValue>
          |     `-DeclRefExpr 0x55936cb5b9d8 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
          `-ImplicitCastExpr 0x55936cb5ba90 <col:31> 'int' <LValueToRValue>
            `-DeclRefExpr 0x55936cb5ba50 <col:31> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B9.2]([B9.5], ([B9.14]))
   T: break;
   Preds (1): B3
   Succs (1): B2

 [B10]
  case OP_FORPREP:
   1: DeclRefExpr 0x55936cb5b380 <print.c:142:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5b898 <print.c:142:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5b380 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5b3e8 <print.c:142:12> 'char [9]' lvalue "\t; to %d"
"\t; to %d"
   4: ImplicitCastExpr 0x55936cb5b8e8 <print.c:142:12> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5b3e8 <col:12> 'char [9]' lvalue "\t; to %d"
[B10.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5b900 <print.c:142:12> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5b8e8 <col:12> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5b3e8 <col:12> 'char [9]' lvalue "\t; to %d"
[B10.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb5b418 <print.c:142:24> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
sbx
   7: ImplicitCastExpr 0x55936cb5b468 <print.c:142:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb5b418 <col:24> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
[B10.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x55936cb5b440 <print.c:142:28> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   9: ImplicitCastExpr 0x55936cb5b810 <print.c:142:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb5b440 <col:28> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B10.8] (ImplicitCastExpr, LValueToRValue, int)
  10: BinaryOperator 0x55936cb5b828 <print.c:142:24, col:28> 'int' '+'
|-ImplicitCastExpr 0x55936cb5b468 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb5b418 <col:24> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
`-ImplicitCastExpr 0x55936cb5b810 <col:28> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5b440 <col:28> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B10.7] + [B10.9]
  11: IntegerLiteral 0x55936cb5b850 <print.c:142:31> 'int' 2
2
  12: BinaryOperator 0x55936cb5b870 <print.c:142:24, col:31> 'int' '+'
|-BinaryOperator 0x55936cb5b828 <col:24, col:28> 'int' '+'
| |-ImplicitCastExpr 0x55936cb5b468 <col:24> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55936cb5b418 <col:24> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
| `-ImplicitCastExpr 0x55936cb5b810 <col:28> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55936cb5b440 <col:28> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
`-IntegerLiteral 0x55936cb5b850 <col:31> 'int' 2
[B10.10] + [B10.11]
  13: CallExpr 0x55936cb5b8b0 <print.c:142:5, col:32> 'int'
|-ImplicitCastExpr 0x55936cb5b898 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5b380 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb5b900 <col:12> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb5b8e8 <col:12> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5b3e8 <col:12> 'char [9]' lvalue "\t; to %d"
`-BinaryOperator 0x55936cb5b870 <col:24, col:31> 'int' '+'
  |-BinaryOperator 0x55936cb5b828 <col:24, col:28> 'int' '+'
  | |-ImplicitCastExpr 0x55936cb5b468 <col:24> 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x55936cb5b418 <col:24> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
  | `-ImplicitCastExpr 0x55936cb5b810 <col:28> 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x55936cb5b440 <col:28> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
  `-IntegerLiteral 0x55936cb5b850 <col:31> 'int' 2
[B10.2]([B10.5], [B10.12])
   T: break;
   Preds (2): B3 B12
   Succs (1): B2

 [B11]
  case OP_JMP:
   Preds (1): B3
   Succs (1): B12

 [B12]
  case OP_FORLOOP:
   Preds (2): B11 B3
   Succs (1): B10

 [B13]
   T: break;
   Preds (3): B22 B23 B28
   Succs (1): B2

 [B14]
  case OP_SETTABLE:
   Preds (1): B3
   Succs (1): B15

 [B15]
  case OP_ADD:
   Preds (2): B14 B3
   Succs (1): B16

 [B16]
  case OP_SUB:
   Preds (2): B15 B3
   Succs (1): B17

 [B17]
  case OP_MUL:
   Preds (2): B16 B3
   Succs (1): B18

 [B18]
  case OP_DIV:
   Preds (2): B17 B3
   Succs (1): B19

 [B19]
  case OP_POW:
   Preds (2): B18 B3
   Succs (1): B20

 [B20]
  case OP_EQ:
   Preds (2): B19 B3
   Succs (1): B21

 [B21]
  case OP_LT:
   Preds (2): B20 B3
   Succs (1): B29

 [B22]
   1: DeclRefExpr 0x55936cb5b0e8 <print.c:136:51> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5b140 <print.c:136:51> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5b0e8 <col:51> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B22.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5b110 <print.c:136:58> 'char [2]' lvalue "-"
"-"
   4: ImplicitCastExpr 0x55936cb5b188 <print.c:136:58> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5b110 <col:58> 'char [2]' lvalue "-"
[B22.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5b1a0 <print.c:136:58> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5b188 <col:58> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5b110 <col:58> 'char [2]' lvalue "-"
[B22.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb5b158 <print.c:136:51, col:61> 'int'
|-ImplicitCastExpr 0x55936cb5b140 <col:51> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5b0e8 <col:51> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb5b1a0 <col:58> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5b188 <col:58> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5b110 <col:58> 'char [2]' lvalue "-"
[B22.2]([B22.5])
   Preds (1): B24
   Succs (1): B13

 [B23]
   1: DeclRefExpr 0x55936cb5ae08 <print.c:136:18> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
PrintConstant
   2: ImplicitCastExpr 0x55936cb5b080 <print.c:136:18> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5ae08 <col:18> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
[B23.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const Proto *, int))
   3: DeclRefExpr 0x55936cb5ae30 <print.c:136:32> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   4: ImplicitCastExpr 0x55936cb5b0d0 <print.c:136:32> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5ae30 <col:32> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B23.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: DeclRefExpr 0x55936cb5ae58 <print.c:136:41> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   6: ImplicitCastExpr 0x55936cb5aee8 <./lopcodes.h:125:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb5aec8 <col:25, col:27> 'int' lvalue
  `-DeclRefExpr 0x55936cb5ae58 <print.c:136:41> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B23.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: CStyleCastExpr 0x55936cb5af00 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ImplicitCastExpr 0x55936cb5aee8 <col:25, col:27> 'int' <LValueToRValue>
  `-ParenExpr 0x55936cb5aec8 <col:25, col:27> 'int' lvalue
    `-DeclRefExpr 0x55936cb5ae58 <print.c:136:41> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
(int)[B23.6] (CStyleCastExpr, NoOp, int)
   8: IntegerLiteral 0x55936cb5af28 <./lopcodes.h:119:17> 'int' 1
1
   9: IntegerLiteral 0x55936cb5af48 <./lopcodes.h:38:17> 'int' 9
9
  10: IntegerLiteral 0x55936cb5af68 <./lopcodes.h:119:32> 'int' 1
1
  11: BinaryOperator 0x55936cb5af88 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb5af48 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb5af68 <line:119:32> 'int' 1
[B23.9] - [B23.10]
  12: BinaryOperator 0x55936cb5afd0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb5af28 <col:17> 'int' 1
`-ParenExpr 0x55936cb5afb0 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb5af88 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb5af48 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb5af68 <line:119:32> 'int' 1
[B23.8] << ([B23.11])
  13: UnaryOperator 0x55936cb5b018 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x55936cb5aff8 <col:16, col:34> 'int'
  `-BinaryOperator 0x55936cb5afd0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb5af28 <col:17> 'int' 1
    `-ParenExpr 0x55936cb5afb0 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb5af88 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb5af48 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb5af68 <line:119:32> 'int' 1
~([B23.12])
  14: BinaryOperator 0x55936cb5b038 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x55936cb5af00 <line:125:20, col:27> 'int' <NoOp>
| `-ImplicitCastExpr 0x55936cb5aee8 <col:25, col:27> 'int' <LValueToRValue>
|   `-ParenExpr 0x55936cb5aec8 <col:25, col:27> 'int' lvalue
|     `-DeclRefExpr 0x55936cb5ae58 <print.c:136:41> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-UnaryOperator 0x55936cb5b018 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x55936cb5aff8 <col:16, col:34> 'int'
    `-BinaryOperator 0x55936cb5afd0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x55936cb5af28 <col:17> 'int' 1
      `-ParenExpr 0x55936cb5afb0 <col:22, col:33> 'int'
        `-BinaryOperator 0x55936cb5af88 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x55936cb5af48 <line:38:17> 'int' 9
          `-IntegerLiteral 0x55936cb5af68 <line:119:32> 'int' 1
[B23.7] & [B23.13]
  15: CallExpr 0x55936cb5b098 <print.c:136:18, col:43> 'void'
|-ImplicitCastExpr 0x55936cb5b080 <col:18> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5ae08 <col:18> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
|-ImplicitCastExpr 0x55936cb5b0d0 <col:32> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb5ae30 <col:32> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ParenExpr 0x55936cb5b060 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x55936cb5b038 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x55936cb5af00 <line:125:20, col:27> 'int' <NoOp>
    | `-ImplicitCastExpr 0x55936cb5aee8 <col:25, col:27> 'int' <LValueToRValue>
    |   `-ParenExpr 0x55936cb5aec8 <col:25, col:27> 'int' lvalue
    |     `-DeclRefExpr 0x55936cb5ae58 <print.c:136:41> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
    `-UnaryOperator 0x55936cb5b018 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x55936cb5aff8 <col:16, col:34> 'int'
        `-BinaryOperator 0x55936cb5afd0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x55936cb5af28 <col:17> 'int' 1
          `-ParenExpr 0x55936cb5afb0 <col:22, col:33> 'int'
            `-BinaryOperator 0x55936cb5af88 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x55936cb5af48 <line:38:17> 'int' 9
              `-IntegerLiteral 0x55936cb5af68 <line:119:32> 'int' 1
[B23.2]([B23.4], ([B23.14]))
   Preds (1): B24
   Succs (1): B13

 [B24]
   1: DeclRefExpr 0x55936cb5aba0 <print.c:135:6> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5abf8 <print.c:135:6> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5aba0 <col:6> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B24.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5abc8 <print.c:135:13> 'char [2]' lvalue " "
" "
   4: ImplicitCastExpr 0x55936cb5ac40 <print.c:135:13> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5abc8 <col:13> 'char [2]' lvalue " "
[B24.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5ac58 <print.c:135:13> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5ac40 <col:13> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5abc8 <col:13> 'char [2]' lvalue " "
[B24.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb5ac10 <print.c:135:6, col:16> 'int'
|-ImplicitCastExpr 0x55936cb5abf8 <col:6> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5aba0 <col:6> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb5ac58 <col:13> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5ac40 <col:13> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5abc8 <col:13> 'char [2]' lvalue " "
[B24.2]([B24.5])
   7: DeclRefExpr 0x55936cb5ac70 <print.c:136:14> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   8: ImplicitCastExpr 0x55936cb5ada8 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb5ac98 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb5ac70 <print.c:136:14> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B24.7]) (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x55936cb5acb8 <./lopcodes.h:119:17> 'int' 1
1
  10: IntegerLiteral 0x55936cb5acd8 <./lopcodes.h:38:17> 'int' 9
9
  11: IntegerLiteral 0x55936cb5acf8 <./lopcodes.h:119:32> 'int' 1
1
  12: BinaryOperator 0x55936cb5ad18 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb5acd8 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb5acf8 <line:119:32> 'int' 1
[B24.10] - [B24.11]
  13: BinaryOperator 0x55936cb5ad60 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb5acb8 <col:17> 'int' 1
`-ParenExpr 0x55936cb5ad40 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb5ad18 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb5acd8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb5acf8 <line:119:32> 'int' 1
[B24.9] << ([B24.12])
  14: BinaryOperator 0x55936cb5adc0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb5ada8 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb5ac98 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb5ac70 <print.c:136:14> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-ParenExpr 0x55936cb5ad88 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb5ad60 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb5acb8 <col:17> 'int' 1
    `-ParenExpr 0x55936cb5ad40 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb5ad18 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb5acd8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb5acf8 <line:119:32> 'int' 1
[B24.8] & ([B24.13])
   T: if ([B24.14])
   Preds (2): B25 B26
   Succs (2): B23 B22

 [B25]
   1: DeclRefExpr 0x55936cb5aa98 <print.c:134:51> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5aaf0 <print.c:134:51> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5aa98 <col:51> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B25.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5aac0 <print.c:134:58> 'char [2]' lvalue "-"
"-"
   4: ImplicitCastExpr 0x55936cb5ab38 <print.c:134:58> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5aac0 <col:58> 'char [2]' lvalue "-"
[B25.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5ab50 <print.c:134:58> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5ab38 <col:58> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5aac0 <col:58> 'char [2]' lvalue "-"
[B25.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb5ab08 <print.c:134:51, col:61> 'int'
|-ImplicitCastExpr 0x55936cb5aaf0 <col:51> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5aa98 <col:51> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb5ab50 <col:58> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5ab38 <col:58> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5aac0 <col:58> 'char [2]' lvalue "-"
[B25.2]([B25.5])
   Preds (1): B27
   Succs (1): B24

 [B26]
   1: DeclRefExpr 0x55936cb5a7b8 <print.c:134:18> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
PrintConstant
   2: ImplicitCastExpr 0x55936cb5aa30 <print.c:134:18> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5a7b8 <col:18> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
[B26.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const Proto *, int))
   3: DeclRefExpr 0x55936cb5a7e0 <print.c:134:32> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   4: ImplicitCastExpr 0x55936cb5aa80 <print.c:134:32> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5a7e0 <col:32> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B26.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: DeclRefExpr 0x55936cb5a808 <print.c:134:41> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   6: ImplicitCastExpr 0x55936cb5a898 <./lopcodes.h:125:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb5a878 <col:25, col:27> 'int' lvalue
  `-DeclRefExpr 0x55936cb5a808 <print.c:134:41> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B26.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: CStyleCastExpr 0x55936cb5a8b0 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ImplicitCastExpr 0x55936cb5a898 <col:25, col:27> 'int' <LValueToRValue>
  `-ParenExpr 0x55936cb5a878 <col:25, col:27> 'int' lvalue
    `-DeclRefExpr 0x55936cb5a808 <print.c:134:41> 'int' lvalue Var 0x55936cb53730 'b' 'int'
(int)[B26.6] (CStyleCastExpr, NoOp, int)
   8: IntegerLiteral 0x55936cb5a8d8 <./lopcodes.h:119:17> 'int' 1
1
   9: IntegerLiteral 0x55936cb5a8f8 <./lopcodes.h:38:17> 'int' 9
9
  10: IntegerLiteral 0x55936cb5a918 <./lopcodes.h:119:32> 'int' 1
1
  11: BinaryOperator 0x55936cb5a938 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb5a8f8 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb5a918 <line:119:32> 'int' 1
[B26.9] - [B26.10]
  12: BinaryOperator 0x55936cb5a980 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb5a8d8 <col:17> 'int' 1
`-ParenExpr 0x55936cb5a960 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb5a938 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb5a8f8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb5a918 <line:119:32> 'int' 1
[B26.8] << ([B26.11])
  13: UnaryOperator 0x55936cb5a9c8 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x55936cb5a9a8 <col:16, col:34> 'int'
  `-BinaryOperator 0x55936cb5a980 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb5a8d8 <col:17> 'int' 1
    `-ParenExpr 0x55936cb5a960 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb5a938 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb5a8f8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb5a918 <line:119:32> 'int' 1
~([B26.12])
  14: BinaryOperator 0x55936cb5a9e8 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x55936cb5a8b0 <line:125:20, col:27> 'int' <NoOp>
| `-ImplicitCastExpr 0x55936cb5a898 <col:25, col:27> 'int' <LValueToRValue>
|   `-ParenExpr 0x55936cb5a878 <col:25, col:27> 'int' lvalue
|     `-DeclRefExpr 0x55936cb5a808 <print.c:134:41> 'int' lvalue Var 0x55936cb53730 'b' 'int'
`-UnaryOperator 0x55936cb5a9c8 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x55936cb5a9a8 <col:16, col:34> 'int'
    `-BinaryOperator 0x55936cb5a980 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x55936cb5a8d8 <col:17> 'int' 1
      `-ParenExpr 0x55936cb5a960 <col:22, col:33> 'int'
        `-BinaryOperator 0x55936cb5a938 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x55936cb5a8f8 <line:38:17> 'int' 9
          `-IntegerLiteral 0x55936cb5a918 <line:119:32> 'int' 1
[B26.7] & [B26.13]
  15: CallExpr 0x55936cb5aa48 <print.c:134:18, col:43> 'void'
|-ImplicitCastExpr 0x55936cb5aa30 <col:18> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5a7b8 <col:18> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
|-ImplicitCastExpr 0x55936cb5aa80 <col:32> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb5a7e0 <col:32> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ParenExpr 0x55936cb5aa10 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x55936cb5a9e8 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x55936cb5a8b0 <line:125:20, col:27> 'int' <NoOp>
    | `-ImplicitCastExpr 0x55936cb5a898 <col:25, col:27> 'int' <LValueToRValue>
    |   `-ParenExpr 0x55936cb5a878 <col:25, col:27> 'int' lvalue
    |     `-DeclRefExpr 0x55936cb5a808 <print.c:134:41> 'int' lvalue Var 0x55936cb53730 'b' 'int'
    `-UnaryOperator 0x55936cb5a9c8 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x55936cb5a9a8 <col:16, col:34> 'int'
        `-BinaryOperator 0x55936cb5a980 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x55936cb5a8d8 <col:17> 'int' 1
          `-ParenExpr 0x55936cb5a960 <col:22, col:33> 'int'
            `-BinaryOperator 0x55936cb5a938 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x55936cb5a8f8 <line:38:17> 'int' 9
              `-IntegerLiteral 0x55936cb5a918 <line:119:32> 'int' 1
[B26.2]([B26.4], ([B26.14]))
   Preds (1): B27
   Succs (1): B24

 [B27]
   1: DeclRefExpr 0x55936cb5a550 <print.c:133:6> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5a5a8 <print.c:133:6> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5a550 <col:6> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B27.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5a578 <print.c:133:13> 'char [4]' lvalue "\t; "
"\t; "
   4: ImplicitCastExpr 0x55936cb5a5f0 <print.c:133:13> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5a578 <col:13> 'char [4]' lvalue "\t; "
[B27.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5a608 <print.c:133:13> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5a5f0 <col:13> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5a578 <col:13> 'char [4]' lvalue "\t; "
[B27.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb5a5c0 <print.c:133:6, col:19> 'int'
|-ImplicitCastExpr 0x55936cb5a5a8 <col:6> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5a550 <col:6> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb5a608 <col:13> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5a5f0 <col:13> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5a578 <col:13> 'char [4]' lvalue "\t; "
[B27.2]([B27.5])
   7: DeclRefExpr 0x55936cb5a620 <print.c:134:14> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   8: ImplicitCastExpr 0x55936cb5a758 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb5a648 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb5a620 <print.c:134:14> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B27.7]) (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x55936cb5a668 <./lopcodes.h:119:17> 'int' 1
1
  10: IntegerLiteral 0x55936cb5a688 <./lopcodes.h:38:17> 'int' 9
9
  11: IntegerLiteral 0x55936cb5a6a8 <./lopcodes.h:119:32> 'int' 1
1
  12: BinaryOperator 0x55936cb5a6c8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb5a688 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb5a6a8 <line:119:32> 'int' 1
[B27.10] - [B27.11]
  13: BinaryOperator 0x55936cb5a710 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb5a668 <col:17> 'int' 1
`-ParenExpr 0x55936cb5a6f0 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb5a6c8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb5a688 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb5a6a8 <line:119:32> 'int' 1
[B27.9] << ([B27.12])
  14: BinaryOperator 0x55936cb5a770 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb5a758 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb5a648 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb5a620 <print.c:134:14> 'int' lvalue Var 0x55936cb53730 'b' 'int'
`-ParenExpr 0x55936cb5a738 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb5a710 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb5a668 <col:17> 'int' 1
    `-ParenExpr 0x55936cb5a6f0 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb5a6c8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb5a688 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb5a6a8 <line:119:32> 'int' 1
[B27.8] & ([B27.13])
   T: if ([B27.14])
   Preds (2): B28 B29
   Succs (2): B26 B25

 [B28]
   1: DeclRefExpr 0x55936cb5a390 <print.c:131:23> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   2: ImplicitCastExpr 0x55936cb5a4c8 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb5a3b8 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb5a390 <print.c:131:23> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B28.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x55936cb5a3d8 <./lopcodes.h:119:17> 'int' 1
1
   4: IntegerLiteral 0x55936cb5a3f8 <./lopcodes.h:38:17> 'int' 9
9
   5: IntegerLiteral 0x55936cb5a418 <./lopcodes.h:119:32> 'int' 1
1
   6: BinaryOperator 0x55936cb5a438 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb5a3f8 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb5a418 <line:119:32> 'int' 1
[B28.4] - [B28.5]
   7: BinaryOperator 0x55936cb5a480 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb5a3d8 <col:17> 'int' 1
`-ParenExpr 0x55936cb5a460 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb5a438 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb5a3f8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb5a418 <line:119:32> 'int' 1
[B28.3] << ([B28.6])
   8: BinaryOperator 0x55936cb5a4e0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb5a4c8 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb5a3b8 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb5a390 <print.c:131:23> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-ParenExpr 0x55936cb5a4a8 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb5a480 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb5a3d8 <col:17> 'int' 1
    `-ParenExpr 0x55936cb5a460 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb5a438 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb5a3f8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb5a418 <line:119:32> 'int' 1
[B28.2] & ([B28.7])
   T: if ([B29.8]) || ([B28.8])
   Preds (1): B29
   Succs (2): B27 B13

 [B29]
  case OP_LE:
   1: DeclRefExpr 0x55936cb5a1f8 <print.c:131:13> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   2: ImplicitCastExpr 0x55936cb5a330 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb5a220 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb5a1f8 <print.c:131:13> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B29.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x55936cb5a240 <./lopcodes.h:119:17> 'int' 1
1
   4: IntegerLiteral 0x55936cb5a260 <./lopcodes.h:38:17> 'int' 9
9
   5: IntegerLiteral 0x55936cb5a280 <./lopcodes.h:119:32> 'int' 1
1
   6: BinaryOperator 0x55936cb5a2a0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb5a260 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb5a280 <line:119:32> 'int' 1
[B29.4] - [B29.5]
   7: BinaryOperator 0x55936cb5a2e8 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb5a240 <col:17> 'int' 1
`-ParenExpr 0x55936cb5a2c8 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb5a2a0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb5a260 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb5a280 <line:119:32> 'int' 1
[B29.3] << ([B29.6])
   8: BinaryOperator 0x55936cb5a348 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb5a330 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb5a220 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb5a1f8 <print.c:131:13> 'int' lvalue Var 0x55936cb53730 'b' 'int'
`-ParenExpr 0x55936cb5a310 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb5a2e8 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb5a240 <col:17> 'int' 1
    `-ParenExpr 0x55936cb5a2c8 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb5a2a0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb5a260 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb5a280 <line:119:32> 'int' 1
[B29.2] & ([B29.7])
   T: ([B29.8]) || ...
   Preds (2): B3 B21
   Succs (2): B27 B28

 [B30]
   T: break;
   Preds (2): B32 B33
   Succs (1): B2

 [B31]
  case OP_GETTABLE:
   Preds (1): B3
   Succs (1): B33

 [B32]
   1: DeclRefExpr 0x55936cb59a88 <print.c:120:19> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb59ae0 <print.c:120:19> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb59a88 <col:19> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B32.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb59ab0 <print.c:120:26> 'char [4]' lvalue "\t; "
"\t; "
   4: ImplicitCastExpr 0x55936cb59b28 <print.c:120:26> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb59ab0 <col:26> 'char [4]' lvalue "\t; "
[B32.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb59b40 <print.c:120:26> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb59b28 <col:26> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb59ab0 <col:26> 'char [4]' lvalue "\t; "
[B32.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb59af8 <print.c:120:19, col:32> 'int'
|-ImplicitCastExpr 0x55936cb59ae0 <col:19> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb59a88 <col:19> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb59b40 <col:26> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb59b28 <col:26> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb59ab0 <col:26> 'char [4]' lvalue "\t; "
[B32.2]([B32.5])
   7: DeclRefExpr 0x55936cb59b58 <print.c:120:35> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
PrintConstant
   8: ImplicitCastExpr 0x55936cb59dd0 <print.c:120:35> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb59b58 <col:35> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
[B32.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const Proto *, int))
   9: DeclRefExpr 0x55936cb59b80 <print.c:120:49> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
  10: ImplicitCastExpr 0x55936cb59e20 <print.c:120:49> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb59b80 <col:49> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B32.9] (ImplicitCastExpr, LValueToRValue, const Proto *)
  11: DeclRefExpr 0x55936cb59ba8 <print.c:120:58> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
  12: ImplicitCastExpr 0x55936cb59c38 <./lopcodes.h:125:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb59c18 <col:25, col:27> 'int' lvalue
  `-DeclRefExpr 0x55936cb59ba8 <print.c:120:58> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B32.11]) (ImplicitCastExpr, LValueToRValue, int)
  13: CStyleCastExpr 0x55936cb59c50 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ImplicitCastExpr 0x55936cb59c38 <col:25, col:27> 'int' <LValueToRValue>
  `-ParenExpr 0x55936cb59c18 <col:25, col:27> 'int' lvalue
    `-DeclRefExpr 0x55936cb59ba8 <print.c:120:58> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
(int)[B32.12] (CStyleCastExpr, NoOp, int)
  14: IntegerLiteral 0x55936cb59c78 <./lopcodes.h:119:17> 'int' 1
1
  15: IntegerLiteral 0x55936cb59c98 <./lopcodes.h:38:17> 'int' 9
9
  16: IntegerLiteral 0x55936cb59cb8 <./lopcodes.h:119:32> 'int' 1
1
  17: BinaryOperator 0x55936cb59cd8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb59c98 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb59cb8 <line:119:32> 'int' 1
[B32.15] - [B32.16]
  18: BinaryOperator 0x55936cb59d20 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb59c78 <col:17> 'int' 1
`-ParenExpr 0x55936cb59d00 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb59cd8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb59c98 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb59cb8 <line:119:32> 'int' 1
[B32.14] << ([B32.17])
  19: UnaryOperator 0x55936cb59d68 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x55936cb59d48 <col:16, col:34> 'int'
  `-BinaryOperator 0x55936cb59d20 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb59c78 <col:17> 'int' 1
    `-ParenExpr 0x55936cb59d00 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb59cd8 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb59c98 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb59cb8 <line:119:32> 'int' 1
~([B32.18])
  20: BinaryOperator 0x55936cb59d88 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x55936cb59c50 <line:125:20, col:27> 'int' <NoOp>
| `-ImplicitCastExpr 0x55936cb59c38 <col:25, col:27> 'int' <LValueToRValue>
|   `-ParenExpr 0x55936cb59c18 <col:25, col:27> 'int' lvalue
|     `-DeclRefExpr 0x55936cb59ba8 <print.c:120:58> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-UnaryOperator 0x55936cb59d68 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x55936cb59d48 <col:16, col:34> 'int'
    `-BinaryOperator 0x55936cb59d20 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x55936cb59c78 <col:17> 'int' 1
      `-ParenExpr 0x55936cb59d00 <col:22, col:33> 'int'
        `-BinaryOperator 0x55936cb59cd8 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x55936cb59c98 <line:38:17> 'int' 9
          `-IntegerLiteral 0x55936cb59cb8 <line:119:32> 'int' 1
[B32.13] & [B32.19]
  21: CallExpr 0x55936cb59de8 <print.c:120:35, col:60> 'void'
|-ImplicitCastExpr 0x55936cb59dd0 <col:35> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb59b58 <col:35> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
|-ImplicitCastExpr 0x55936cb59e20 <col:49> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb59b80 <col:49> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ParenExpr 0x55936cb59db0 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x55936cb59d88 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x55936cb59c50 <line:125:20, col:27> 'int' <NoOp>
    | `-ImplicitCastExpr 0x55936cb59c38 <col:25, col:27> 'int' <LValueToRValue>
    |   `-ParenExpr 0x55936cb59c18 <col:25, col:27> 'int' lvalue
    |     `-DeclRefExpr 0x55936cb59ba8 <print.c:120:58> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
    `-UnaryOperator 0x55936cb59d68 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x55936cb59d48 <col:16, col:34> 'int'
        `-BinaryOperator 0x55936cb59d20 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x55936cb59c78 <col:17> 'int' 1
          `-ParenExpr 0x55936cb59d00 <col:22, col:33> 'int'
            `-BinaryOperator 0x55936cb59cd8 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x55936cb59c98 <line:38:17> 'int' 9
              `-IntegerLiteral 0x55936cb59cb8 <line:119:32> 'int' 1
[B32.8]([B32.10], ([B32.20]))
   Preds (1): B33
   Succs (1): B30

 [B33]
  case OP_SELF:
   1: DeclRefExpr 0x55936cb598f0 <print.c:120:13> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   2: ImplicitCastExpr 0x55936cb59a28 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb59918 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb598f0 <print.c:120:13> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B33.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x55936cb59938 <./lopcodes.h:119:17> 'int' 1
1
   4: IntegerLiteral 0x55936cb59958 <./lopcodes.h:38:17> 'int' 9
9
   5: IntegerLiteral 0x55936cb59978 <./lopcodes.h:119:32> 'int' 1
1
   6: BinaryOperator 0x55936cb59998 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb59958 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb59978 <line:119:32> 'int' 1
[B33.4] - [B33.5]
   7: BinaryOperator 0x55936cb599e0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb59938 <col:17> 'int' 1
`-ParenExpr 0x55936cb599c0 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb59998 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb59958 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb59978 <line:119:32> 'int' 1
[B33.3] << ([B33.6])
   8: BinaryOperator 0x55936cb59a40 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb59a28 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb59918 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb598f0 <print.c:120:13> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-ParenExpr 0x55936cb59a08 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb599e0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb59938 <col:17> 'int' 1
    `-ParenExpr 0x55936cb599c0 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb59998 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb59958 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb59978 <line:119:32> 'int' 1
[B33.2] & ([B33.7])
   T: if ([B33.8])
   Preds (2): B3 B31
   Succs (2): B32 B30

 [B34]
  case OP_SETGLOBAL:
   1: DeclRefExpr 0x55936cb59030 <print.c:116:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb597a8 <print.c:116:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb59030 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B34.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb59058 <print.c:116:12> 'char [6]' lvalue "\t; %s"
"\t; %s"
   4: ImplicitCastExpr 0x55936cb597f8 <print.c:116:12> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb59058 <col:12> 'char [6]' lvalue "\t; %s"
[B34.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb59810 <print.c:116:12> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb597f8 <col:12> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb59058 <col:12> 'char [6]' lvalue "\t; %s"
[B34.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb59088 <print.c:116:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   7: ImplicitCastExpr 0x55936cb59480 <print.c:116:29> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B34.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x55936cb59498 <print.c:116:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
`-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B34.7]->k
   9: ImplicitCastExpr 0x55936cb594f8 <print.c:116:29, col:32> 'TValue *' <LValueToRValue>
`-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
  `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B34.8] (ImplicitCastExpr, LValueToRValue, TValue *)
  10: DeclRefExpr 0x55936cb594d0 <print.c:116:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
bx
  11: ImplicitCastExpr 0x55936cb59510 <print.c:116:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B34.10] (ImplicitCastExpr, LValueToRValue, int)
  12: ArraySubscriptExpr 0x55936cb59528 <print.c:116:29, col:36> 'TValue':'struct lua_TValue' lvalue
|-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
| `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
|   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B34.9][[B34.11]]
  13: UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
`-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
  |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
  | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
  |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
  `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
&[B34.12]
  14: MemberExpr 0x55936cb59590 <./lobject.h:94:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
`-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
  `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
    `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
      |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
      | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
      |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
      `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
        `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
([B34.13])->value
  15: MemberExpr 0x55936cb595c8 <./lobject.h:94:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
`-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
  `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
    `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
      `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
        |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
        | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
        |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
        |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
        `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
          `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B34.14].gc
  16: ImplicitCastExpr 0x55936cb59600 <./lobject.h:94:49, col:60> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x55936cb595c8 <col:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
  `-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
    `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
      `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
        `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
          |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
          | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
          |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
          |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
          `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
            `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B34.15] (ImplicitCastExpr, LValueToRValue, GCObject *)
  17: MemberExpr 0x55936cb59618 <./lobject.h:94:49, col:64> 'union TString':'union TString' lvalue ->ts 0x55936cb31e98
`-ImplicitCastExpr 0x55936cb59600 <col:49, col:60> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x55936cb595c8 <col:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
    `-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
      `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
        `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
          `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
            |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
            | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
            |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
            |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
            `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
              `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B34.16]->ts
  18: UnaryOperator 0x55936cb59650 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
`-MemberExpr 0x55936cb59618 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x55936cb31e98
  `-ImplicitCastExpr 0x55936cb59600 <col:49, col:60> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x55936cb595c8 <col:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
      `-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
        `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
          `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
            `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
              |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
              | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
              |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
              |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
              `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
                `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
&[B34.17]
  19: IntegerLiteral 0x55936cb596b0 <./lobject.h:210:46> 'int' 1
1
  20: BinaryOperator 0x55936cb596d0 <./lobject.h:210:39, col:46> 'union TString *' '+'
|-ParenExpr 0x55936cb59690 <col:39, col:42> 'union TString *'
| `-ParenExpr 0x55936cb59670 <./llimits.h:63:25, col:27> 'union TString *'
|   `-UnaryOperator 0x55936cb59650 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
|     `-MemberExpr 0x55936cb59618 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x55936cb31e98
|       `-ImplicitCastExpr 0x55936cb59600 <col:49, col:60> 'GCObject *' <LValueToRValue>
|         `-MemberExpr 0x55936cb595c8 <col:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
|           `-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
|             `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
|               `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
|                 `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
|                   |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
|                   | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
|                   |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
|                   |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
|                   `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
`-IntegerLiteral 0x55936cb596b0 <./lobject.h:210:46> 'int' 1
(([B34.18])) + [B34.19]
  21: CStyleCastExpr 0x55936cb59760 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x55936cb59740 <col:26, col:30> 'union TString *'
  `-BinaryOperator 0x55936cb596d0 <./lobject.h:210:39, col:46> 'union TString *' '+'
    |-ParenExpr 0x55936cb59690 <col:39, col:42> 'union TString *'
    | `-ParenExpr 0x55936cb59670 <./llimits.h:63:25, col:27> 'union TString *'
    |   `-UnaryOperator 0x55936cb59650 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
    |     `-MemberExpr 0x55936cb59618 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x55936cb31e98
    |       `-ImplicitCastExpr 0x55936cb59600 <col:49, col:60> 'GCObject *' <LValueToRValue>
    |         `-MemberExpr 0x55936cb595c8 <col:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
    |           `-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
    |             `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
    |               `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
    |                 `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
    |                   |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
    |                   | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
    |                   |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
    |                   |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
    |                   `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
    |                     `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
    `-IntegerLiteral 0x55936cb596b0 <./lobject.h:210:46> 'int' 1
(const char *)([B34.20]) (CStyleCastExpr, BitCast, const char *)
  22: CallExpr 0x55936cb597c0 <print.c:116:5, col:38> 'int'
|-ImplicitCastExpr 0x55936cb597a8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb59030 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb59810 <col:12> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb597f8 <col:12> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb59058 <col:12> 'char [6]' lvalue "\t; %s"
`-ParenExpr 0x55936cb59788 <./llimits.h:75:22, col:31> 'const char *'
  `-CStyleCastExpr 0x55936cb59760 <col:23, col:30> 'const char *' <BitCast>
    `-ParenExpr 0x55936cb59740 <col:26, col:30> 'union TString *'
      `-BinaryOperator 0x55936cb596d0 <./lobject.h:210:39, col:46> 'union TString *' '+'
        |-ParenExpr 0x55936cb59690 <col:39, col:42> 'union TString *'
        | `-ParenExpr 0x55936cb59670 <./llimits.h:63:25, col:27> 'union TString *'
        |   `-UnaryOperator 0x55936cb59650 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
        |     `-MemberExpr 0x55936cb59618 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x55936cb31e98
        |       `-ImplicitCastExpr 0x55936cb59600 <col:49, col:60> 'GCObject *' <LValueToRValue>
        |         `-MemberExpr 0x55936cb595c8 <col:49, col:60> 'GCObject *' lvalue .gc 0x55936cb0a490
        |           `-MemberExpr 0x55936cb59590 <col:49, col:54> 'Value':'Value' lvalue ->value 0x55936cb0a790
        |             `-ParenExpr 0x55936cb59570 <col:49, col:51> 'TValue *'
        |               `-UnaryOperator 0x55936cb59550 <print.c:116:28, col:36> 'TValue *' prefix '&'
        |                 `-ArraySubscriptExpr 0x55936cb59528 <col:29, col:36> 'TValue':'struct lua_TValue' lvalue
        |                   |-ImplicitCastExpr 0x55936cb594f8 <col:29, col:32> 'TValue *' <LValueToRValue>
        |                   | `-MemberExpr 0x55936cb59498 <col:29, col:32> 'TValue *const' lvalue ->k 0x55936cb1bc88
        |                   |   `-ImplicitCastExpr 0x55936cb59480 <col:29> 'const Proto *' <LValueToRValue>
        |                   |     `-DeclRefExpr 0x55936cb59088 <col:29> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
        |                   `-ImplicitCastExpr 0x55936cb59510 <col:34> 'int' <LValueToRValue>
        |                     `-DeclRefExpr 0x55936cb594d0 <col:34> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
        `-IntegerLiteral 0x55936cb596b0 <./lobject.h:210:46> 'int' 1
[B34.2]([B34.5], ([B34.21]))
   T: break;
   Preds (2): B3 B35
   Succs (1): B2

 [B35]
  case OP_GETGLOBAL:
   Preds (1): B3
   Succs (1): B34

 [B36]
   1: ConditionalOperator 0x55936cb58eb8 <print.c:112:22, col:69> 'const char *'
|-ParenExpr 0x55936cb58bd0 <col:22, col:40> 'int'
| `-BinaryOperator 0x55936cb58ba8 <col:23, col:39> 'int' '>'
|   |-ImplicitCastExpr 0x55936cb58b90 <col:23, col:26> 'int' <LValueToRValue>
|   | `-MemberExpr 0x55936cb58b38 <col:23, col:26> 'const int' lvalue ->sizeupvalues 0x55936cb1c478
|   |   `-ImplicitCastExpr 0x55936cb58b20 <col:23> 'const Proto *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55936cb58af8 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb58b70 <col:39> 'int' 0
|-ParenExpr 0x55936cb58df8 <./llimits.h:75:22, col:31> 'const char *'
| `-CStyleCastExpr 0x55936cb58dd0 <col:23, col:30> 'const char *' <BitCast>
|   `-ParenExpr 0x55936cb58db0 <col:26, col:30> 'TString *'
|     `-BinaryOperator 0x55936cb58d40 <./lobject.h:210:39, col:46> 'TString *' '+'
|       |-ImplicitCastExpr 0x55936cb58d28 <col:39, col:42> 'TString *' <LValueToRValue>
|       | `-ParenExpr 0x55936cb58ce8 <col:39, col:42> 'TString *' lvalue
|       |   `-ArraySubscriptExpr 0x55936cb58cc0 <print.c:112:51, col:64> 'TString *' lvalue
|       |     |-ImplicitCastExpr 0x55936cb58c90 <col:51, col:54> 'TString **' <LValueToRValue>
|       |     | `-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
|       |     |   `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
|       |     `-ImplicitCastExpr 0x55936cb58ca8 <col:63> 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
|       `-IntegerLiteral 0x55936cb58d08 <./lobject.h:210:46> 'int' 1
`-ImplicitCastExpr 0x55936cb58ea0 <print.c:112:69> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb58e88 <col:69> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb58e58 <col:69> 'char [2]' lvalue "-"
([B40.11]) ? ([B38.11]) : [B39.3]
   2: CallExpr 0x55936cb58f00 <print.c:112:5, col:72> 'int'
|-ImplicitCastExpr 0x55936cb58ee8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb58aa0 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb58f50 <col:12> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb58f38 <col:12> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb58ac8 <col:12> 'char [6]' lvalue "\t; %s"
`-ConditionalOperator 0x55936cb58eb8 <col:22, col:69> 'const char *'
  |-ParenExpr 0x55936cb58bd0 <col:22, col:40> 'int'
  | `-BinaryOperator 0x55936cb58ba8 <col:23, col:39> 'int' '>'
  |   |-ImplicitCastExpr 0x55936cb58b90 <col:23, col:26> 'int' <LValueToRValue>
  |   | `-MemberExpr 0x55936cb58b38 <col:23, col:26> 'const int' lvalue ->sizeupvalues 0x55936cb1c478
  |   |   `-ImplicitCastExpr 0x55936cb58b20 <col:23> 'const Proto *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55936cb58af8 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
  |   `-IntegerLiteral 0x55936cb58b70 <col:39> 'int' 0
  |-ParenExpr 0x55936cb58df8 <./llimits.h:75:22, col:31> 'const char *'
  | `-CStyleCastExpr 0x55936cb58dd0 <col:23, col:30> 'const char *' <BitCast>
  |   `-ParenExpr 0x55936cb58db0 <col:26, col:30> 'TString *'
  |     `-BinaryOperator 0x55936cb58d40 <./lobject.h:210:39, col:46> 'TString *' '+'
  |       |-ImplicitCastExpr 0x55936cb58d28 <col:39, col:42> 'TString *' <LValueToRValue>
  |       | `-ParenExpr 0x55936cb58ce8 <col:39, col:42> 'TString *' lvalue
  |       |   `-ArraySubscriptExpr 0x55936cb58cc0 <print.c:112:51, col:64> 'TString *' lvalue
  |       |     |-ImplicitCastExpr 0x55936cb58c90 <col:51, col:54> 'TString **' <LValueToRValue>
  |       |     | `-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
  |       |     |   `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
  |       |     |     `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
  |       |     `-ImplicitCastExpr 0x55936cb58ca8 <col:63> 'int' <LValueToRValue>
  |       |       `-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
  |       `-IntegerLiteral 0x55936cb58d08 <./lobject.h:210:46> 'int' 1
  `-ImplicitCastExpr 0x55936cb58ea0 <print.c:112:69> 'const char *' <BitCast>
    `-ImplicitCastExpr 0x55936cb58e88 <col:69> 'char *' <ArrayToPointerDecay>
      `-StringLiteral 0x55936cb58e58 <col:69> 'char [2]' lvalue "-"
[B40.2]([B40.5], [B36.1])
   T: break;
   Preds (2): B38 B39
   Succs (1): B2

 [B37]
  case OP_GETUPVAL:
   Preds (1): B3
   Succs (1): B40

 [B38]
   1: DeclRefExpr 0x55936cb58bf0 <print.c:112:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   2: ImplicitCastExpr 0x55936cb58c18 <print.c:112:51> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B38.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x55936cb58c30 <print.c:112:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
`-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B38.2]->upvalues
   4: ImplicitCastExpr 0x55936cb58c90 <print.c:112:51, col:54> 'TString **' <LValueToRValue>
`-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
  `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B38.3] (ImplicitCastExpr, LValueToRValue, TString **)
   5: DeclRefExpr 0x55936cb58c68 <print.c:112:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   6: ImplicitCastExpr 0x55936cb58ca8 <print.c:112:63> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
[B38.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x55936cb58cc0 <print.c:112:51, col:64> 'TString *' lvalue
|-ImplicitCastExpr 0x55936cb58c90 <col:51, col:54> 'TString **' <LValueToRValue>
| `-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
|   `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ImplicitCastExpr 0x55936cb58ca8 <col:63> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
[B38.4][[B38.6]]
   8: ImplicitCastExpr 0x55936cb58d28 <./lobject.h:210:39, col:42> 'TString *' <LValueToRValue>
`-ParenExpr 0x55936cb58ce8 <col:39, col:42> 'TString *' lvalue
  `-ArraySubscriptExpr 0x55936cb58cc0 <print.c:112:51, col:64> 'TString *' lvalue
    |-ImplicitCastExpr 0x55936cb58c90 <col:51, col:54> 'TString **' <LValueToRValue>
    | `-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
    |   `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
    `-ImplicitCastExpr 0x55936cb58ca8 <col:63> 'int' <LValueToRValue>
      `-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B38.7]) (ImplicitCastExpr, LValueToRValue, TString *)
   9: IntegerLiteral 0x55936cb58d08 <./lobject.h:210:46> 'int' 1
1
  10: BinaryOperator 0x55936cb58d40 <./lobject.h:210:39, col:46> 'TString *' '+'
|-ImplicitCastExpr 0x55936cb58d28 <col:39, col:42> 'TString *' <LValueToRValue>
| `-ParenExpr 0x55936cb58ce8 <col:39, col:42> 'TString *' lvalue
|   `-ArraySubscriptExpr 0x55936cb58cc0 <print.c:112:51, col:64> 'TString *' lvalue
|     |-ImplicitCastExpr 0x55936cb58c90 <col:51, col:54> 'TString **' <LValueToRValue>
|     | `-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
|     |   `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
|     `-ImplicitCastExpr 0x55936cb58ca8 <col:63> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
`-IntegerLiteral 0x55936cb58d08 <./lobject.h:210:46> 'int' 1
[B38.8] + [B38.9]
  11: CStyleCastExpr 0x55936cb58dd0 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x55936cb58db0 <col:26, col:30> 'TString *'
  `-BinaryOperator 0x55936cb58d40 <./lobject.h:210:39, col:46> 'TString *' '+'
    |-ImplicitCastExpr 0x55936cb58d28 <col:39, col:42> 'TString *' <LValueToRValue>
    | `-ParenExpr 0x55936cb58ce8 <col:39, col:42> 'TString *' lvalue
    |   `-ArraySubscriptExpr 0x55936cb58cc0 <print.c:112:51, col:64> 'TString *' lvalue
    |     |-ImplicitCastExpr 0x55936cb58c90 <col:51, col:54> 'TString **' <LValueToRValue>
    |     | `-MemberExpr 0x55936cb58c30 <col:51, col:54> 'TString **const' lvalue ->upvalues 0x55936cb1c3c0
    |     |   `-ImplicitCastExpr 0x55936cb58c18 <col:51> 'const Proto *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55936cb58bf0 <col:51> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
    |     `-ImplicitCastExpr 0x55936cb58ca8 <col:63> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x55936cb58c68 <col:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
    `-IntegerLiteral 0x55936cb58d08 <./lobject.h:210:46> 'int' 1
(const char *)([B38.10]) (CStyleCastExpr, BitCast, const char *)
   Preds (1): B40
   Succs (1): B36

 [B39]
   1: StringLiteral 0x55936cb58e58 <print.c:112:69> 'char [2]' lvalue "-"
"-"
   2: ImplicitCastExpr 0x55936cb58e88 <print.c:112:69> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb58e58 <col:69> 'char [2]' lvalue "-"
[B39.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x55936cb58ea0 <print.c:112:69> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb58e88 <col:69> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb58e58 <col:69> 'char [2]' lvalue "-"
[B39.2] (ImplicitCastExpr, BitCast, const char *)
   Preds (1): B40
   Succs (1): B36

 [B40]
  case OP_SETUPVAL:
   1: DeclRefExpr 0x55936cb58aa0 <print.c:112:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb58ee8 <print.c:112:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb58aa0 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B40.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb58ac8 <print.c:112:12> 'char [6]' lvalue "\t; %s"
"\t; %s"
   4: ImplicitCastExpr 0x55936cb58f38 <print.c:112:12> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb58ac8 <col:12> 'char [6]' lvalue "\t; %s"
[B40.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb58f50 <print.c:112:12> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb58f38 <col:12> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb58ac8 <col:12> 'char [6]' lvalue "\t; %s"
[B40.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb58af8 <print.c:112:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   7: ImplicitCastExpr 0x55936cb58b20 <print.c:112:23> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb58af8 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B40.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x55936cb58b38 <print.c:112:23, col:26> 'const int' lvalue ->sizeupvalues 0x55936cb1c478
`-ImplicitCastExpr 0x55936cb58b20 <col:23> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb58af8 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B40.7]->sizeupvalues
   9: ImplicitCastExpr 0x55936cb58b90 <print.c:112:23, col:26> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb58b38 <col:23, col:26> 'const int' lvalue ->sizeupvalues 0x55936cb1c478
  `-ImplicitCastExpr 0x55936cb58b20 <col:23> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb58af8 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B40.8] (ImplicitCastExpr, LValueToRValue, int)
  10: IntegerLiteral 0x55936cb58b70 <print.c:112:39> 'int' 0
0
  11: BinaryOperator 0x55936cb58ba8 <print.c:112:23, col:39> 'int' '>'
|-ImplicitCastExpr 0x55936cb58b90 <col:23, col:26> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb58b38 <col:23, col:26> 'const int' lvalue ->sizeupvalues 0x55936cb1c478
|   `-ImplicitCastExpr 0x55936cb58b20 <col:23> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb58af8 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb58b70 <col:39> 'int' 0
[B40.9] > [B40.10]
   T: ([B40.11]) ? ... : ...
   Preds (2): B3 B37
   Succs (2): B38 B39

 [B41]
  case OP_LOADK:
   1: DeclRefExpr 0x55936cb587b0 <print.c:108:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb58808 <print.c:108:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb587b0 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B41.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb587d8 <print.c:108:12> 'char [4]' lvalue "\t; "
"\t; "
   4: ImplicitCastExpr 0x55936cb58850 <print.c:108:12> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb587d8 <col:12> 'char [4]' lvalue "\t; "
[B41.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb58868 <print.c:108:12> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb58850 <col:12> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb587d8 <col:12> 'char [4]' lvalue "\t; "
[B41.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb58820 <print.c:108:5, col:18> 'int'
|-ImplicitCastExpr 0x55936cb58808 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb587b0 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb58868 <col:12> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb58850 <col:12> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb587d8 <col:12> 'char [4]' lvalue "\t; "
[B41.2]([B41.5])
   7: DeclRefExpr 0x55936cb58880 <print.c:108:21> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
PrintConstant
   8: ImplicitCastExpr 0x55936cb58958 <print.c:108:21> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb58880 <col:21> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
[B41.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const Proto *, int))
   9: DeclRefExpr 0x55936cb588a8 <print.c:108:35> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
  10: ImplicitCastExpr 0x55936cb589a8 <print.c:108:35> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb588a8 <col:35> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B41.9] (ImplicitCastExpr, LValueToRValue, const Proto *)
  11: DeclRefExpr 0x55936cb588d0 <print.c:108:37> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
bx
  12: ImplicitCastExpr 0x55936cb589c0 <print.c:108:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb588d0 <col:37> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B41.11] (ImplicitCastExpr, LValueToRValue, int)
  13: CallExpr 0x55936cb58970 <print.c:108:21, col:39> 'void'
|-ImplicitCastExpr 0x55936cb58958 <col:21> 'void (*)(const Proto *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb58880 <col:21> 'void (const Proto *, int)' Function 0x55936cb51760 'PrintConstant' 'void (const Proto *, int)'
|-ImplicitCastExpr 0x55936cb589a8 <col:35> 'const Proto *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb588a8 <col:35> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ImplicitCastExpr 0x55936cb589c0 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb588d0 <col:37> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B41.8]([B41.10], [B41.12])
   T: break;
   Preds (1): B3
   Succs (1): B2

 [B42]
   1: DeclRefExpr 0x55936cb56408 <print.c:90:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb56530 <print.c:90:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb56408 <col:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B42.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb56430 <print.c:90:10> 'char [6]' lvalue "%-9s\t"
"%-9s\t"
   4: ImplicitCastExpr 0x55936cb56580 <print.c:90:10> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb56430 <col:10> 'char [6]' lvalue "%-9s\t"
[B42.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb56598 <print.c:90:10> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb56580 <col:10> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb56430 <col:10> 'char [6]' lvalue "%-9s\t"
[B42.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb56460 <print.c:90:19> 'const char *const [39]' lvalue Var 0x55936cb49bb0 'luaP_opnames' 'const char *const [39]'
luaP_opnames
   7: ImplicitCastExpr 0x55936cb564d8 <print.c:90:19> 'const char *const *' <ArrayToPointerDecay>
`-DeclRefExpr 0x55936cb56460 <col:19> 'const char *const [39]' lvalue Var 0x55936cb49bb0 'luaP_opnames' 'const char *const [39]'
[B42.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *const *)
   8: DeclRefExpr 0x55936cb56488 <print.c:90:32> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
   9: ImplicitCastExpr 0x55936cb564f0 <print.c:90:32> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb56488 <col:32> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.8] (ImplicitCastExpr, LValueToRValue, OpCode)
  10: ArraySubscriptExpr 0x55936cb56508 <print.c:90:19, col:33> 'const char *const' lvalue
|-ImplicitCastExpr 0x55936cb564d8 <col:19> 'const char *const *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x55936cb56460 <col:19> 'const char *const [39]' lvalue Var 0x55936cb49bb0 'luaP_opnames' 'const char *const [39]'
`-ImplicitCastExpr 0x55936cb564f0 <col:32> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb56488 <col:32> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.7][[B42.9]]
  11: ImplicitCastExpr 0x55936cb565b0 <print.c:90:19, col:33> 'const char *' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb56508 <col:19, col:33> 'const char *const' lvalue
  |-ImplicitCastExpr 0x55936cb564d8 <col:19> 'const char *const *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x55936cb56460 <col:19> 'const char *const [39]' lvalue Var 0x55936cb49bb0 'luaP_opnames' 'const char *const [39]'
  `-ImplicitCastExpr 0x55936cb564f0 <col:32> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x55936cb56488 <col:32> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.10] (ImplicitCastExpr, LValueToRValue, const char *)
  12: CallExpr 0x55936cb56548 <print.c:90:3, col:34> 'int'
|-ImplicitCastExpr 0x55936cb56530 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb56408 <col:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb56598 <col:10> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb56580 <col:10> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb56430 <col:10> 'char [6]' lvalue "%-9s\t"
`-ImplicitCastExpr 0x55936cb565b0 <col:19, col:33> 'const char *' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb56508 <col:19, col:33> 'const char *const' lvalue
    |-ImplicitCastExpr 0x55936cb564d8 <col:19> 'const char *const *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x55936cb56460 <col:19> 'const char *const [39]' lvalue Var 0x55936cb49bb0 'luaP_opnames' 'const char *const [39]'
    `-ImplicitCastExpr 0x55936cb564f0 <col:32> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x55936cb56488 <col:32> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.2]([B42.5], [B42.11])
  13: DeclRefExpr 0x55936cb565c8 <./lopcodes.h:254:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
  14: ImplicitCastExpr 0x55936cb56678 <./lopcodes.h:254:41> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
[B42.13] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
  15: DeclRefExpr 0x55936cb565f0 <print.c:91:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
  16: ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.15] (ImplicitCastExpr, LValueToRValue, OpCode)
  17: ArraySubscriptExpr 0x55936cb566a8 <./lopcodes.h:254:41, col:55> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x55936cb56678 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.14][[B42.16]]
  18: ImplicitCastExpr 0x55936cb566f0 <./lopcodes.h:254:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb566a8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x55936cb56678 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.17] (ImplicitCastExpr, LValueToRValue, lu_byte)
  19: ImplicitCastExpr 0x55936cb56708 <./lopcodes.h:254:41, col:55> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb566f0 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb566a8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x55936cb56678 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B42.18] (ImplicitCastExpr, IntegralCast, int)
  20: IntegerLiteral 0x55936cb566d0 <./lopcodes.h:254:59> 'int' 3
3
  21: BinaryOperator 0x55936cb56720 <./lopcodes.h:254:41, col:59> 'int' '&'
|-ImplicitCastExpr 0x55936cb56708 <col:41, col:55> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb566f0 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x55936cb566a8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x55936cb56678 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
`-IntegerLiteral 0x55936cb566d0 <./lopcodes.h:254:59> 'int' 3
[B42.19] & [B42.20]
  22: CStyleCastExpr 0x55936cb567f0 <./llimits.h:75:23, col:30> 'enum OpMode':'enum OpMode' <IntegralCast>
`-ParenExpr 0x55936cb567d0 <col:26, col:30> 'int'
  `-BinaryOperator 0x55936cb56720 <./lopcodes.h:254:41, col:59> 'int' '&'
    |-ImplicitCastExpr 0x55936cb56708 <col:41, col:55> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x55936cb566f0 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x55936cb566a8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
    |     |-ImplicitCastExpr 0x55936cb56678 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    |     `-ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
    |       `-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
    `-IntegerLiteral 0x55936cb566d0 <./lopcodes.h:254:59> 'int' 3
(enum OpMode)([B42.21]) (CStyleCastExpr, IntegralCast, enum OpMode)
  23: ImplicitCastExpr 0x55936cb56858 <./lopcodes.h:254:22, col:61> 'unsigned int' <IntegralCast>
`-ParenExpr 0x55936cb56838 <col:22, col:61> 'enum OpMode':'enum OpMode'
  `-ParenExpr 0x55936cb56818 <./llimits.h:75:22, col:31> 'enum OpMode':'enum OpMode'
    `-CStyleCastExpr 0x55936cb567f0 <col:23, col:30> 'enum OpMode':'enum OpMode' <IntegralCast>
      `-ParenExpr 0x55936cb567d0 <col:26, col:30> 'int'
        `-BinaryOperator 0x55936cb56720 <./lopcodes.h:254:41, col:59> 'int' '&'
          |-ImplicitCastExpr 0x55936cb56708 <col:41, col:55> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x55936cb566f0 <col:41, col:55> 'lu_byte':'unsigned char' <LValueToRValue>
          |   `-ArraySubscriptExpr 0x55936cb566a8 <col:41, col:55> 'const lu_byte':'const unsigned char' lvalue
          |     |-ImplicitCastExpr 0x55936cb56678 <col:41> 'const lu_byte *' <ArrayToPointerDecay>
          |     | `-DeclRefExpr 0x55936cb565c8 <col:41> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
          |     `-ImplicitCastExpr 0x55936cb56690 <print.c:91:21> 'OpCode':'OpCode' <LValueToRValue>
          |       `-DeclRefExpr 0x55936cb565f0 <col:21> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
          `-IntegerLiteral 0x55936cb566d0 <./lopcodes.h:254:59> 'int' 3
(([B42.22])) (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B42.23]
   Preds (2): B62 B63
   Succs (4): B46 B50 B61 B3(Unreachable)

 [B43]
   T: break;
   Preds (2): B44 B45
   Succs (1): B3

 [B44]
   1: DeclRefExpr 0x55936cb58490 <print.c:102:43> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb58538 <print.c:102:43> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb58490 <col:43> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B44.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb584b8 <print.c:102:50> 'char [6]' lvalue "%d %d"
"%d %d"
   4: ImplicitCastExpr 0x55936cb58590 <print.c:102:50> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb584b8 <col:50> 'char [6]' lvalue "%d %d"
[B44.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb585a8 <print.c:102:50> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb58590 <col:50> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb584b8 <col:50> 'char [6]' lvalue "%d %d"
[B44.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb584e8 <print.c:102:58> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
a
   7: ImplicitCastExpr 0x55936cb585c0 <print.c:102:58> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb584e8 <col:58> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
[B44.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x55936cb58510 <print.c:102:60> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
sbx
   9: ImplicitCastExpr 0x55936cb585d8 <print.c:102:60> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb58510 <col:60> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
[B44.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CallExpr 0x55936cb58550 <print.c:102:43, col:63> 'int'
|-ImplicitCastExpr 0x55936cb58538 <col:43> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb58490 <col:43> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb585a8 <col:50> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb58590 <col:50> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb584b8 <col:50> 'char [6]' lvalue "%d %d"
|-ImplicitCastExpr 0x55936cb585c0 <col:58> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb584e8 <col:58> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
`-ImplicitCastExpr 0x55936cb585d8 <col:60> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb58510 <col:60> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
[B44.2]([B44.5], [B44.7], [B44.9])
   Preds (1): B46
   Succs (1): B43

 [B45]
   1: DeclRefExpr 0x55936cb58378 <print.c:102:20> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb583f8 <print.c:102:20> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb58378 <col:20> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B45.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb583a0 <print.c:102:27> 'char [3]' lvalue "%d"
"%d"
   4: ImplicitCastExpr 0x55936cb58448 <print.c:102:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb583a0 <col:27> 'char [3]' lvalue "%d"
[B45.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb58460 <print.c:102:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb58448 <col:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb583a0 <col:27> 'char [3]' lvalue "%d"
[B45.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb583d0 <print.c:102:32> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
sbx
   7: ImplicitCastExpr 0x55936cb58478 <print.c:102:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb583d0 <col:32> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
[B45.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CallExpr 0x55936cb58410 <print.c:102:20, col:35> 'int'
|-ImplicitCastExpr 0x55936cb583f8 <col:20> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb58378 <col:20> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb58460 <col:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb58448 <col:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb583a0 <col:27> 'char [3]' lvalue "%d"
`-ImplicitCastExpr 0x55936cb58478 <col:32> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb583d0 <col:32> 'int' lvalue Var 0x55936cb555e0 'sbx' 'int'
[B45.2]([B45.5], [B45.7])
   Preds (1): B46
   Succs (1): B43

 [B46]
  case iAsBx:
   1: DeclRefExpr 0x55936cb582b8 <print.c:102:9> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
   2: ImplicitCastExpr 0x55936cb58308 <print.c:102:9> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb582b8 <col:9> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B46.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x55936cb58320 <print.c:102:9> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb58308 <col:9> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb582b8 <col:9> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B46.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x55936cb582e0 <print.c:102:12> 'int' EnumConstant 0x55936cb3fd40 'OP_JMP' 'int'
OP_JMP
   5: ImplicitCastExpr 0x55936cb58338 <print.c:102:12> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x55936cb582e0 <col:12> 'int' EnumConstant 0x55936cb3fd40 'OP_JMP' 'int'
[B46.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: BinaryOperator 0x55936cb58350 <print.c:102:9, col:12> 'int' '=='
|-ImplicitCastExpr 0x55936cb58320 <col:9> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb58308 <col:9> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x55936cb582b8 <col:9> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x55936cb58338 <col:12> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x55936cb582e0 <col:12> 'int' EnumConstant 0x55936cb3fd40 'OP_JMP' 'int'
[B46.3] == [B46.5]
   T: if [B46.6]
   Preds (1): B42
   Succs (2): B45 B44

 [B47]
   T: break;
   Preds (2): B48 B49
   Succs (1): B3

 [B48]
   1: DeclRefExpr 0x55936cb580b8 <print.c:99:60> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb58160 <print.c:99:60> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb580b8 <col:60> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B48.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb580e0 <print.c:99:67> 'char [6]' lvalue "%d %d"
"%d %d"
   4: ImplicitCastExpr 0x55936cb581b8 <print.c:99:67> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb580e0 <col:67> 'char [6]' lvalue "%d %d"
[B48.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb581d0 <print.c:99:67> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb581b8 <col:67> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb580e0 <col:67> 'char [6]' lvalue "%d %d"
[B48.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb58110 <print.c:99:75> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
a
   7: ImplicitCastExpr 0x55936cb581e8 <print.c:99:75> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb58110 <col:75> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
[B48.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x55936cb58138 <print.c:99:77> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
bx
   9: ImplicitCastExpr 0x55936cb58200 <print.c:99:77> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb58138 <col:77> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B48.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CallExpr 0x55936cb58178 <print.c:99:60, col:79> 'int'
|-ImplicitCastExpr 0x55936cb58160 <col:60> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb580b8 <col:60> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb581d0 <col:67> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb581b8 <col:67> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb580e0 <col:67> 'char [6]' lvalue "%d %d"
|-ImplicitCastExpr 0x55936cb581e8 <col:75> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb58110 <col:75> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
`-ImplicitCastExpr 0x55936cb58200 <col:77> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb58138 <col:77> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B48.2]([B48.5], [B48.7], [B48.9])
   Preds (1): B50
   Succs (1): B47

 [B49]
   1: DeclRefExpr 0x55936cb57ef0 <print.c:99:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb58018 <print.c:99:30> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb57ef0 <col:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B49.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb57f18 <print.c:99:37> 'char [6]' lvalue "%d %d"
"%d %d"
   4: ImplicitCastExpr 0x55936cb58070 <print.c:99:37> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb57f18 <col:37> 'char [6]' lvalue "%d %d"
[B49.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb58088 <print.c:99:37> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb58070 <col:37> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb57f18 <col:37> 'char [6]' lvalue "%d %d"
[B49.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb57f48 <print.c:99:45> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
a
   7: ImplicitCastExpr 0x55936cb580a0 <print.c:99:45> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb57f48 <col:45> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
[B49.6] (ImplicitCastExpr, LValueToRValue, int)
   8: IntegerLiteral 0x55936cb57f70 <print.c:99:48> 'int' 1
1
   9: UnaryOperator 0x55936cb57f90 <print.c:99:47, col:48> 'int' prefix '-'
`-IntegerLiteral 0x55936cb57f70 <col:48> 'int' 1
-[B49.8]
  10: DeclRefExpr 0x55936cb57fb0 <print.c:99:50> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
bx
  11: ImplicitCastExpr 0x55936cb57fd8 <print.c:99:50> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb57fb0 <col:50> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B49.10] (ImplicitCastExpr, LValueToRValue, int)
  12: BinaryOperator 0x55936cb57ff0 <print.c:99:47, col:50> 'int' '-'
|-UnaryOperator 0x55936cb57f90 <col:47, col:48> 'int' prefix '-'
| `-IntegerLiteral 0x55936cb57f70 <col:48> 'int' 1
`-ImplicitCastExpr 0x55936cb57fd8 <col:50> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb57fb0 <col:50> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B49.9] - [B49.11]
  13: CallExpr 0x55936cb58030 <print.c:99:30, col:52> 'int'
|-ImplicitCastExpr 0x55936cb58018 <col:30> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb57ef0 <col:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb58088 <col:37> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb58070 <col:37> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb57f18 <col:37> 'char [6]' lvalue "%d %d"
|-ImplicitCastExpr 0x55936cb580a0 <col:45> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb57f48 <col:45> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
`-BinaryOperator 0x55936cb57ff0 <col:47, col:50> 'int' '-'
  |-UnaryOperator 0x55936cb57f90 <col:47, col:48> 'int' prefix '-'
  | `-IntegerLiteral 0x55936cb57f70 <col:48> 'int' 1
  `-ImplicitCastExpr 0x55936cb57fd8 <col:50> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55936cb57fb0 <col:50> 'int' lvalue Var 0x55936cb550b0 'bx' 'int'
[B49.2]([B49.5], [B49.7], [B49.12])
   Preds (1): B50
   Succs (1): B47

 [B50]
  case iABx:
   1: DeclRefExpr 0x55936cb57c10 <./lopcodes.h:255:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   2: ImplicitCastExpr 0x55936cb57c60 <./lopcodes.h:255:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
[B50.1] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   3: DeclRefExpr 0x55936cb57c38 <print.c:99:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
   4: ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B50.3] (ImplicitCastExpr, LValueToRValue, OpCode)
   5: ArraySubscriptExpr 0x55936cb57c90 <./lopcodes.h:255:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B50.2][[B50.4]]
   6: ImplicitCastExpr 0x55936cb57cd8 <./lopcodes.h:255:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B50.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x55936cb57cf0 <./lopcodes.h:255:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb57cd8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B50.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x55936cb57cb8 <./lopcodes.h:255:63> 'int' 4
4
   9: BinaryOperator 0x55936cb57d08 <./lopcodes.h:255:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x55936cb57cf0 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb57cd8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
`-IntegerLiteral 0x55936cb57cb8 <./lopcodes.h:255:63> 'int' 4
[B50.7] >> [B50.8]
  10: IntegerLiteral 0x55936cb57d50 <./lopcodes.h:255:68> 'int' 3
3
  11: BinaryOperator 0x55936cb57d70 <./lopcodes.h:255:43, col:68> 'int' '&'
|-ParenExpr 0x55936cb57d30 <col:43, col:64> 'int'
| `-BinaryOperator 0x55936cb57d08 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x55936cb57cf0 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x55936cb57cd8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x55936cb57cb8 <./lopcodes.h:255:63> 'int' 4
`-IntegerLiteral 0x55936cb57d50 <col:68> 'int' 3
([B50.9]) & [B50.10]
  12: CStyleCastExpr 0x55936cb57e08 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x55936cb57de8 <col:26, col:30> 'int'
  `-BinaryOperator 0x55936cb57d70 <./lopcodes.h:255:43, col:68> 'int' '&'
    |-ParenExpr 0x55936cb57d30 <col:43, col:64> 'int'
    | `-BinaryOperator 0x55936cb57d08 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x55936cb57cf0 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55936cb57cd8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x55936cb57cb8 <./lopcodes.h:255:63> 'int' 4
    `-IntegerLiteral 0x55936cb57d50 <col:68> 'int' 3
(enum OpArgMask)([B50.11]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  13: ImplicitCastExpr 0x55936cb57e98 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x55936cb57e50 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x55936cb57e30 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x55936cb57e08 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x55936cb57de8 <col:26, col:30> 'int'
        `-BinaryOperator 0x55936cb57d70 <./lopcodes.h:255:43, col:68> 'int' '&'
          |-ParenExpr 0x55936cb57d30 <col:43, col:64> 'int'
          | `-BinaryOperator 0x55936cb57d08 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x55936cb57cf0 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x55936cb57cd8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x55936cb57cb8 <./lopcodes.h:255:63> 'int' 4
          `-IntegerLiteral 0x55936cb57d50 <col:68> 'int' 3
(([B50.12])) (ImplicitCastExpr, IntegralCast, unsigned int)
  14: DeclRefExpr 0x55936cb57e70 <print.c:99:22> 'int' EnumConstant 0x55936cb49658 'OpArgK' 'int'
OpArgK
  15: ImplicitCastExpr 0x55936cb57eb0 <print.c:99:22> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x55936cb57e70 <col:22> 'int' EnumConstant 0x55936cb49658 'OpArgK' 'int'
[B50.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: BinaryOperator 0x55936cb57ec8 <./lopcodes.h:255:21, print.c:99:22> 'int' '=='
|-ImplicitCastExpr 0x55936cb57e98 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x55936cb57e50 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
|   `-ParenExpr 0x55936cb57e30 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
|     `-CStyleCastExpr 0x55936cb57e08 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
|       `-ParenExpr 0x55936cb57de8 <col:26, col:30> 'int'
|         `-BinaryOperator 0x55936cb57d70 <./lopcodes.h:255:43, col:68> 'int' '&'
|           |-ParenExpr 0x55936cb57d30 <col:43, col:64> 'int'
|           | `-BinaryOperator 0x55936cb57d08 <col:44, col:63> 'int' '>>'
|           |   |-ImplicitCastExpr 0x55936cb57cf0 <col:44, col:58> 'int' <IntegralCast>
|           |   | `-ImplicitCastExpr 0x55936cb57cd8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|           |   |   `-ArraySubscriptExpr 0x55936cb57c90 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|           |   |     |-ImplicitCastExpr 0x55936cb57c60 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|           |   |     | `-DeclRefExpr 0x55936cb57c10 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|           |   |     `-ImplicitCastExpr 0x55936cb57c78 <print.c:99:18> 'OpCode':'OpCode' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x55936cb57c38 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
|           |   `-IntegerLiteral 0x55936cb57cb8 <./lopcodes.h:255:63> 'int' 4
|           `-IntegerLiteral 0x55936cb57d50 <col:68> 'int' 3
`-ImplicitCastExpr 0x55936cb57eb0 <print.c:99:22> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x55936cb57e70 <col:22> 'int' EnumConstant 0x55936cb49658 'OpArgK' 'int'
[B50.13] == [B50.15]
   T: if [B50.16]
   Preds (1): B42
   Succs (2): B49 B48

 [B51]
   T: break;
   Preds (2): B52 B56
   Succs (1): B3

 [B52]
   1: ConditionalOperator 0x55936cb57ac0 <./lopcodes.h:122:17, print.c:96:69> 'int'
|-ParenExpr 0x55936cb577b0 <./lopcodes.h:122:17, col:29> 'int'
| `-BinaryOperator 0x55936cb57788 <col:18, line:119:34> 'int' '&'
|   |-ImplicitCastExpr 0x55936cb57770 <line:122:18, col:20> 'int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb57660 <col:18, col:20> 'int' lvalue
|   |   `-DeclRefExpr 0x55936cb57638 <print.c:96:47> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
|   `-ParenExpr 0x55936cb57750 <./lopcodes.h:119:16, col:34> 'int'
|     `-BinaryOperator 0x55936cb57728 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x55936cb57680 <col:17> 'int' 1
|       `-ParenExpr 0x55936cb57708 <col:22, col:33> 'int'
|         `-BinaryOperator 0x55936cb576e0 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x55936cb576a0 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x55936cb576c0 <line:119:32> 'int' 1
|-ParenExpr 0x55936cb57a60 <print.c:96:52, col:65> 'int'
| `-BinaryOperator 0x55936cb57a38 <col:53, ./lopcodes.h:125:37> 'int' '-'
|   |-UnaryOperator 0x55936cb577f0 <print.c:96:53, col:54> 'int' prefix '-'
|   | `-IntegerLiteral 0x55936cb577d0 <col:54> 'int' 1
|   `-ParenExpr 0x55936cb57a18 <./lopcodes.h:125:19, col:37> 'int'
|     `-BinaryOperator 0x55936cb579f0 <col:20, line:119:34> 'int' '&'
|       |-CStyleCastExpr 0x55936cb578b8 <line:125:20, col:27> 'int' <NoOp>
|       | `-ImplicitCastExpr 0x55936cb578a0 <col:25, col:27> 'int' <LValueToRValue>
|       |   `-ParenExpr 0x55936cb57880 <col:25, col:27> 'int' lvalue
|       |     `-DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
|       `-UnaryOperator 0x55936cb579d0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
|         `-ParenExpr 0x55936cb579b0 <col:16, col:34> 'int'
|           `-BinaryOperator 0x55936cb57988 <col:17, col:33> 'int' '<<'
|             |-IntegerLiteral 0x55936cb578e0 <col:17> 'int' 1
|             `-ParenExpr 0x55936cb57968 <col:22, col:33> 'int'
|               `-BinaryOperator 0x55936cb57940 <line:38:17, line:119:32> 'int' '-'
|                 |-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
`-ImplicitCastExpr 0x55936cb57aa8 <print.c:96:69> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb57a80 <col:69> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B55.13]) ? ([B53.13]) : [B54.2]
   2: CallExpr 0x55936cb57b08 <print.c:96:30, col:70> 'int'
|-ImplicitCastExpr 0x55936cb57af0 <col:30> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb575e0 <col:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb57b58 <col:37> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb57b40 <col:37> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb57608 <col:37> 'char [4]' lvalue " %d"
`-ConditionalOperator 0x55936cb57ac0 <./lopcodes.h:122:17, print.c:96:69> 'int'
  |-ParenExpr 0x55936cb577b0 <./lopcodes.h:122:17, col:29> 'int'
  | `-BinaryOperator 0x55936cb57788 <col:18, line:119:34> 'int' '&'
  |   |-ImplicitCastExpr 0x55936cb57770 <line:122:18, col:20> 'int' <LValueToRValue>
  |   | `-ParenExpr 0x55936cb57660 <col:18, col:20> 'int' lvalue
  |   |   `-DeclRefExpr 0x55936cb57638 <print.c:96:47> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
  |   `-ParenExpr 0x55936cb57750 <./lopcodes.h:119:16, col:34> 'int'
  |     `-BinaryOperator 0x55936cb57728 <col:17, col:33> 'int' '<<'
  |       |-IntegerLiteral 0x55936cb57680 <col:17> 'int' 1
  |       `-ParenExpr 0x55936cb57708 <col:22, col:33> 'int'
  |         `-BinaryOperator 0x55936cb576e0 <line:38:17, line:119:32> 'int' '-'
  |           |-IntegerLiteral 0x55936cb576a0 <line:38:17> 'int' 9
  |           `-IntegerLiteral 0x55936cb576c0 <line:119:32> 'int' 1
  |-ParenExpr 0x55936cb57a60 <print.c:96:52, col:65> 'int'
  | `-BinaryOperator 0x55936cb57a38 <col:53, ./lopcodes.h:125:37> 'int' '-'
  |   |-UnaryOperator 0x55936cb577f0 <print.c:96:53, col:54> 'int' prefix '-'
  |   | `-IntegerLiteral 0x55936cb577d0 <col:54> 'int' 1
  |   `-ParenExpr 0x55936cb57a18 <./lopcodes.h:125:19, col:37> 'int'
  |     `-BinaryOperator 0x55936cb579f0 <col:20, line:119:34> 'int' '&'
  |       |-CStyleCastExpr 0x55936cb578b8 <line:125:20, col:27> 'int' <NoOp>
  |       | `-ImplicitCastExpr 0x55936cb578a0 <col:25, col:27> 'int' <LValueToRValue>
  |       |   `-ParenExpr 0x55936cb57880 <col:25, col:27> 'int' lvalue
  |       |     `-DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
  |       `-UnaryOperator 0x55936cb579d0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  |         `-ParenExpr 0x55936cb579b0 <col:16, col:34> 'int'
  |           `-BinaryOperator 0x55936cb57988 <col:17, col:33> 'int' '<<'
  |             |-IntegerLiteral 0x55936cb578e0 <col:17> 'int' 1
  |             `-ParenExpr 0x55936cb57968 <col:22, col:33> 'int'
  |               `-BinaryOperator 0x55936cb57940 <line:38:17, line:119:32> 'int' '-'
  |                 |-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
  |                 `-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
  `-ImplicitCastExpr 0x55936cb57aa8 <print.c:96:69> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55936cb57a80 <col:69> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
[B55.2]([B55.5], [B52.1])
   Preds (2): B53 B54
   Succs (1): B51

 [B53]
   1: IntegerLiteral 0x55936cb577d0 <print.c:96:54> 'int' 1
1
   2: UnaryOperator 0x55936cb577f0 <print.c:96:53, col:54> 'int' prefix '-'
`-IntegerLiteral 0x55936cb577d0 <col:54> 'int' 1
-[B53.1]
   3: DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   4: ImplicitCastExpr 0x55936cb578a0 <./lopcodes.h:125:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb57880 <col:25, col:27> 'int' lvalue
  `-DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B53.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: CStyleCastExpr 0x55936cb578b8 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ImplicitCastExpr 0x55936cb578a0 <col:25, col:27> 'int' <LValueToRValue>
  `-ParenExpr 0x55936cb57880 <col:25, col:27> 'int' lvalue
    `-DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
(int)[B53.4] (CStyleCastExpr, NoOp, int)
   6: IntegerLiteral 0x55936cb578e0 <./lopcodes.h:119:17> 'int' 1
1
   7: IntegerLiteral 0x55936cb57900 <./lopcodes.h:38:17> 'int' 9
9
   8: IntegerLiteral 0x55936cb57920 <./lopcodes.h:119:32> 'int' 1
1
   9: BinaryOperator 0x55936cb57940 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
[B53.7] - [B53.8]
  10: BinaryOperator 0x55936cb57988 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb578e0 <col:17> 'int' 1
`-ParenExpr 0x55936cb57968 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb57940 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
[B53.6] << ([B53.9])
  11: UnaryOperator 0x55936cb579d0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x55936cb579b0 <col:16, col:34> 'int'
  `-BinaryOperator 0x55936cb57988 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb578e0 <col:17> 'int' 1
    `-ParenExpr 0x55936cb57968 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb57940 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
~([B53.10])
  12: BinaryOperator 0x55936cb579f0 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x55936cb578b8 <line:125:20, col:27> 'int' <NoOp>
| `-ImplicitCastExpr 0x55936cb578a0 <col:25, col:27> 'int' <LValueToRValue>
|   `-ParenExpr 0x55936cb57880 <col:25, col:27> 'int' lvalue
|     `-DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-UnaryOperator 0x55936cb579d0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x55936cb579b0 <col:16, col:34> 'int'
    `-BinaryOperator 0x55936cb57988 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x55936cb578e0 <col:17> 'int' 1
      `-ParenExpr 0x55936cb57968 <col:22, col:33> 'int'
        `-BinaryOperator 0x55936cb57940 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
          `-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
[B53.5] & [B53.11]
  13: BinaryOperator 0x55936cb57a38 <print.c:96:53, ./lopcodes.h:125:37> 'int' '-'
|-UnaryOperator 0x55936cb577f0 <print.c:96:53, col:54> 'int' prefix '-'
| `-IntegerLiteral 0x55936cb577d0 <col:54> 'int' 1
`-ParenExpr 0x55936cb57a18 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x55936cb579f0 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x55936cb578b8 <line:125:20, col:27> 'int' <NoOp>
    | `-ImplicitCastExpr 0x55936cb578a0 <col:25, col:27> 'int' <LValueToRValue>
    |   `-ParenExpr 0x55936cb57880 <col:25, col:27> 'int' lvalue
    |     `-DeclRefExpr 0x55936cb57810 <print.c:96:63> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
    `-UnaryOperator 0x55936cb579d0 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x55936cb579b0 <col:16, col:34> 'int'
        `-BinaryOperator 0x55936cb57988 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x55936cb578e0 <col:17> 'int' 1
          `-ParenExpr 0x55936cb57968 <col:22, col:33> 'int'
            `-BinaryOperator 0x55936cb57940 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x55936cb57900 <line:38:17> 'int' 9
              `-IntegerLiteral 0x55936cb57920 <line:119:32> 'int' 1
[B53.2] - ([B53.12])
   Preds (1): B55
   Succs (1): B52

 [B54]
   1: DeclRefExpr 0x55936cb57a80 <print.c:96:69> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   2: ImplicitCastExpr 0x55936cb57aa8 <print.c:96:69> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb57a80 <col:69> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
[B54.1] (ImplicitCastExpr, LValueToRValue, int)
   Preds (1): B55
   Succs (1): B52

 [B55]
   1: DeclRefExpr 0x55936cb575e0 <print.c:96:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb57af0 <print.c:96:30> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb575e0 <col:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B55.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb57608 <print.c:96:37> 'char [4]' lvalue " %d"
" %d"
   4: ImplicitCastExpr 0x55936cb57b40 <print.c:96:37> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb57608 <col:37> 'char [4]' lvalue " %d"
[B55.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb57b58 <print.c:96:37> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb57b40 <col:37> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb57608 <col:37> 'char [4]' lvalue " %d"
[B55.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb57638 <print.c:96:47> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
c
   7: ImplicitCastExpr 0x55936cb57770 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb57660 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb57638 <print.c:96:47> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
([B55.6]) (ImplicitCastExpr, LValueToRValue, int)
   8: IntegerLiteral 0x55936cb57680 <./lopcodes.h:119:17> 'int' 1
1
   9: IntegerLiteral 0x55936cb576a0 <./lopcodes.h:38:17> 'int' 9
9
  10: IntegerLiteral 0x55936cb576c0 <./lopcodes.h:119:32> 'int' 1
1
  11: BinaryOperator 0x55936cb576e0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb576a0 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb576c0 <line:119:32> 'int' 1
[B55.9] - [B55.10]
  12: BinaryOperator 0x55936cb57728 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb57680 <col:17> 'int' 1
`-ParenExpr 0x55936cb57708 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb576e0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb576a0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb576c0 <line:119:32> 'int' 1
[B55.8] << ([B55.11])
  13: BinaryOperator 0x55936cb57788 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb57770 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb57660 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb57638 <print.c:96:47> 'int' lvalue Var 0x55936cb53c60 'c' 'int'
`-ParenExpr 0x55936cb57750 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb57728 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb57680 <col:17> 'int' 1
    `-ParenExpr 0x55936cb57708 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb576e0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb576a0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb576c0 <line:119:32> 'int' 1
[B55.7] & ([B55.12])
   T: ([B55.13]) ? ... : ...
   Preds (1): B56
   Succs (2): B53 B54

 [B56]
   1: DeclRefExpr 0x55936cb57300 <./lopcodes.h:256:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
   2: ImplicitCastExpr 0x55936cb57350 <./lopcodes.h:256:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
[B56.1] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
   3: DeclRefExpr 0x55936cb57328 <print.c:96:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
   4: ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B56.3] (ImplicitCastExpr, LValueToRValue, OpCode)
   5: ArraySubscriptExpr 0x55936cb57380 <./lopcodes.h:256:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B56.2][[B56.4]]
   6: ImplicitCastExpr 0x55936cb573c8 <./lopcodes.h:256:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B56.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x55936cb573e0 <./lopcodes.h:256:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb573c8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B56.6] (ImplicitCastExpr, IntegralCast, int)
   8: IntegerLiteral 0x55936cb573a8 <./lopcodes.h:256:63> 'int' 2
2
   9: BinaryOperator 0x55936cb573f8 <./lopcodes.h:256:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x55936cb573e0 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb573c8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
`-IntegerLiteral 0x55936cb573a8 <./lopcodes.h:256:63> 'int' 2
[B56.7] >> [B56.8]
  10: IntegerLiteral 0x55936cb57440 <./lopcodes.h:256:68> 'int' 3
3
  11: BinaryOperator 0x55936cb57460 <./lopcodes.h:256:43, col:68> 'int' '&'
|-ParenExpr 0x55936cb57420 <col:43, col:64> 'int'
| `-BinaryOperator 0x55936cb573f8 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x55936cb573e0 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x55936cb573c8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x55936cb573a8 <./lopcodes.h:256:63> 'int' 2
`-IntegerLiteral 0x55936cb57440 <col:68> 'int' 3
([B56.9]) & [B56.10]
  12: CStyleCastExpr 0x55936cb574f8 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x55936cb574d8 <col:26, col:30> 'int'
  `-BinaryOperator 0x55936cb57460 <./lopcodes.h:256:43, col:68> 'int' '&'
    |-ParenExpr 0x55936cb57420 <col:43, col:64> 'int'
    | `-BinaryOperator 0x55936cb573f8 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x55936cb573e0 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55936cb573c8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x55936cb573a8 <./lopcodes.h:256:63> 'int' 2
    `-IntegerLiteral 0x55936cb57440 <col:68> 'int' 3
(enum OpArgMask)([B56.11]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  13: ImplicitCastExpr 0x55936cb57588 <./lopcodes.h:256:21, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x55936cb57540 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x55936cb57520 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x55936cb574f8 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x55936cb574d8 <col:26, col:30> 'int'
        `-BinaryOperator 0x55936cb57460 <./lopcodes.h:256:43, col:68> 'int' '&'
          |-ParenExpr 0x55936cb57420 <col:43, col:64> 'int'
          | `-BinaryOperator 0x55936cb573f8 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x55936cb573e0 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x55936cb573c8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x55936cb573a8 <./lopcodes.h:256:63> 'int' 2
          `-IntegerLiteral 0x55936cb57440 <col:68> 'int' 3
(([B56.12])) (ImplicitCastExpr, IntegralCast, unsigned int)
  14: DeclRefExpr 0x55936cb57560 <print.c:96:22> 'int' EnumConstant 0x55936cb49580 'OpArgN' 'int'
OpArgN
  15: ImplicitCastExpr 0x55936cb575a0 <print.c:96:22> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x55936cb57560 <col:22> 'int' EnumConstant 0x55936cb49580 'OpArgN' 'int'
[B56.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: BinaryOperator 0x55936cb575b8 <./lopcodes.h:256:21, print.c:96:22> 'int' '!='
|-ImplicitCastExpr 0x55936cb57588 <./lopcodes.h:256:21, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x55936cb57540 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
|   `-ParenExpr 0x55936cb57520 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
|     `-CStyleCastExpr 0x55936cb574f8 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
|       `-ParenExpr 0x55936cb574d8 <col:26, col:30> 'int'
|         `-BinaryOperator 0x55936cb57460 <./lopcodes.h:256:43, col:68> 'int' '&'
|           |-ParenExpr 0x55936cb57420 <col:43, col:64> 'int'
|           | `-BinaryOperator 0x55936cb573f8 <col:44, col:63> 'int' '>>'
|           |   |-ImplicitCastExpr 0x55936cb573e0 <col:44, col:58> 'int' <IntegralCast>
|           |   | `-ImplicitCastExpr 0x55936cb573c8 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|           |   |   `-ArraySubscriptExpr 0x55936cb57380 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|           |   |     |-ImplicitCastExpr 0x55936cb57350 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|           |   |     | `-DeclRefExpr 0x55936cb57300 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|           |   |     `-ImplicitCastExpr 0x55936cb57368 <print.c:96:18> 'OpCode':'OpCode' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x55936cb57328 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
|           |   `-IntegerLiteral 0x55936cb573a8 <./lopcodes.h:256:63> 'int' 2
|           `-IntegerLiteral 0x55936cb57440 <col:68> 'int' 3
`-ImplicitCastExpr 0x55936cb575a0 <print.c:96:22> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x55936cb57560 <col:22> 'int' EnumConstant 0x55936cb49580 'OpArgN' 'int'
[B56.13] != [B56.15]
   T: if [B56.16]
   Preds (2): B57 B61
   Succs (2): B55 B51

 [B57]
   1: ConditionalOperator 0x55936cb57218 <./lopcodes.h:122:17, print.c:95:69> 'int'
|-ParenExpr 0x55936cb56ef8 <./lopcodes.h:122:17, col:29> 'int'
| `-BinaryOperator 0x55936cb56ed0 <col:18, line:119:34> 'int' '&'
|   |-ImplicitCastExpr 0x55936cb56eb8 <line:122:18, col:20> 'int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb56da8 <col:18, col:20> 'int' lvalue
|   |   `-DeclRefExpr 0x55936cb56d80 <print.c:95:47> 'int' lvalue Var 0x55936cb53730 'b' 'int'
|   `-ParenExpr 0x55936cb56e98 <./lopcodes.h:119:16, col:34> 'int'
|     `-BinaryOperator 0x55936cb56e70 <col:17, col:33> 'int' '<<'
|       |-IntegerLiteral 0x55936cb56dc8 <col:17> 'int' 1
|       `-ParenExpr 0x55936cb56e50 <col:22, col:33> 'int'
|         `-BinaryOperator 0x55936cb56e28 <line:38:17, line:119:32> 'int' '-'
|           |-IntegerLiteral 0x55936cb56de8 <line:38:17> 'int' 9
|           `-IntegerLiteral 0x55936cb56e08 <line:119:32> 'int' 1
|-ParenExpr 0x55936cb571b8 <print.c:95:52, col:65> 'int'
| `-BinaryOperator 0x55936cb57190 <col:53, ./lopcodes.h:125:37> 'int' '-'
|   |-UnaryOperator 0x55936cb56f38 <print.c:95:53, col:54> 'int' prefix '-'
|   | `-IntegerLiteral 0x55936cb56f18 <col:54> 'int' 1
|   `-ParenExpr 0x55936cb57170 <./lopcodes.h:125:19, col:37> 'int'
|     `-BinaryOperator 0x55936cb57148 <col:20, line:119:34> 'int' '&'
|       |-CStyleCastExpr 0x55936cb57000 <line:125:20, col:27> 'int' <NoOp>
|       | `-ImplicitCastExpr 0x55936cb56fe8 <col:25, col:27> 'int' <LValueToRValue>
|       |   `-ParenExpr 0x55936cb56fc8 <col:25, col:27> 'int' lvalue
|       |     `-DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
|       `-UnaryOperator 0x55936cb57128 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
|         `-ParenExpr 0x55936cb57108 <col:16, col:34> 'int'
|           `-BinaryOperator 0x55936cb570e0 <col:17, col:33> 'int' '<<'
|             |-IntegerLiteral 0x55936cb57028 <col:17> 'int' 1
|             `-ParenExpr 0x55936cb570c0 <col:22, col:33> 'int'
|               `-BinaryOperator 0x55936cb57088 <line:38:17, line:119:32> 'int' '-'
|                 |-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
|                 `-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
`-ImplicitCastExpr 0x55936cb57200 <print.c:95:69> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb571d8 <col:69> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B60.13]) ? ([B58.13]) : [B59.2]
   2: CallExpr 0x55936cb57260 <print.c:95:30, col:70> 'int'
|-ImplicitCastExpr 0x55936cb57248 <col:30> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb56d28 <col:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb572b0 <col:37> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb57298 <col:37> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb56d50 <col:37> 'char [4]' lvalue " %d"
`-ConditionalOperator 0x55936cb57218 <./lopcodes.h:122:17, print.c:95:69> 'int'
  |-ParenExpr 0x55936cb56ef8 <./lopcodes.h:122:17, col:29> 'int'
  | `-BinaryOperator 0x55936cb56ed0 <col:18, line:119:34> 'int' '&'
  |   |-ImplicitCastExpr 0x55936cb56eb8 <line:122:18, col:20> 'int' <LValueToRValue>
  |   | `-ParenExpr 0x55936cb56da8 <col:18, col:20> 'int' lvalue
  |   |   `-DeclRefExpr 0x55936cb56d80 <print.c:95:47> 'int' lvalue Var 0x55936cb53730 'b' 'int'
  |   `-ParenExpr 0x55936cb56e98 <./lopcodes.h:119:16, col:34> 'int'
  |     `-BinaryOperator 0x55936cb56e70 <col:17, col:33> 'int' '<<'
  |       |-IntegerLiteral 0x55936cb56dc8 <col:17> 'int' 1
  |       `-ParenExpr 0x55936cb56e50 <col:22, col:33> 'int'
  |         `-BinaryOperator 0x55936cb56e28 <line:38:17, line:119:32> 'int' '-'
  |           |-IntegerLiteral 0x55936cb56de8 <line:38:17> 'int' 9
  |           `-IntegerLiteral 0x55936cb56e08 <line:119:32> 'int' 1
  |-ParenExpr 0x55936cb571b8 <print.c:95:52, col:65> 'int'
  | `-BinaryOperator 0x55936cb57190 <col:53, ./lopcodes.h:125:37> 'int' '-'
  |   |-UnaryOperator 0x55936cb56f38 <print.c:95:53, col:54> 'int' prefix '-'
  |   | `-IntegerLiteral 0x55936cb56f18 <col:54> 'int' 1
  |   `-ParenExpr 0x55936cb57170 <./lopcodes.h:125:19, col:37> 'int'
  |     `-BinaryOperator 0x55936cb57148 <col:20, line:119:34> 'int' '&'
  |       |-CStyleCastExpr 0x55936cb57000 <line:125:20, col:27> 'int' <NoOp>
  |       | `-ImplicitCastExpr 0x55936cb56fe8 <col:25, col:27> 'int' <LValueToRValue>
  |       |   `-ParenExpr 0x55936cb56fc8 <col:25, col:27> 'int' lvalue
  |       |     `-DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
  |       `-UnaryOperator 0x55936cb57128 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  |         `-ParenExpr 0x55936cb57108 <col:16, col:34> 'int'
  |           `-BinaryOperator 0x55936cb570e0 <col:17, col:33> 'int' '<<'
  |             |-IntegerLiteral 0x55936cb57028 <col:17> 'int' 1
  |             `-ParenExpr 0x55936cb570c0 <col:22, col:33> 'int'
  |               `-BinaryOperator 0x55936cb57088 <line:38:17, line:119:32> 'int' '-'
  |                 |-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
  |                 `-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
  `-ImplicitCastExpr 0x55936cb57200 <print.c:95:69> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55936cb571d8 <col:69> 'int' lvalue Var 0x55936cb53730 'b' 'int'
[B60.2]([B60.5], [B57.1])
   Preds (2): B58 B59
   Succs (1): B56

 [B58]
   1: IntegerLiteral 0x55936cb56f18 <print.c:95:54> 'int' 1
1
   2: UnaryOperator 0x55936cb56f38 <print.c:95:53, col:54> 'int' prefix '-'
`-IntegerLiteral 0x55936cb56f18 <col:54> 'int' 1
-[B58.1]
   3: DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   4: ImplicitCastExpr 0x55936cb56fe8 <./lopcodes.h:125:25, col:27> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb56fc8 <col:25, col:27> 'int' lvalue
  `-DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B58.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: CStyleCastExpr 0x55936cb57000 <./lopcodes.h:125:20, col:27> 'int' <NoOp>
`-ImplicitCastExpr 0x55936cb56fe8 <col:25, col:27> 'int' <LValueToRValue>
  `-ParenExpr 0x55936cb56fc8 <col:25, col:27> 'int' lvalue
    `-DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
(int)[B58.4] (CStyleCastExpr, NoOp, int)
   6: IntegerLiteral 0x55936cb57028 <./lopcodes.h:119:17> 'int' 1
1
   7: IntegerLiteral 0x55936cb57048 <./lopcodes.h:38:17> 'int' 9
9
   8: IntegerLiteral 0x55936cb57068 <./lopcodes.h:119:32> 'int' 1
1
   9: BinaryOperator 0x55936cb57088 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
[B58.7] - [B58.8]
  10: BinaryOperator 0x55936cb570e0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb57028 <col:17> 'int' 1
`-ParenExpr 0x55936cb570c0 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb57088 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
[B58.6] << ([B58.9])
  11: UnaryOperator 0x55936cb57128 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
`-ParenExpr 0x55936cb57108 <col:16, col:34> 'int'
  `-BinaryOperator 0x55936cb570e0 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb57028 <col:17> 'int' 1
    `-ParenExpr 0x55936cb570c0 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb57088 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
~([B58.10])
  12: BinaryOperator 0x55936cb57148 <./lopcodes.h:125:20, line:119:34> 'int' '&'
|-CStyleCastExpr 0x55936cb57000 <line:125:20, col:27> 'int' <NoOp>
| `-ImplicitCastExpr 0x55936cb56fe8 <col:25, col:27> 'int' <LValueToRValue>
|   `-ParenExpr 0x55936cb56fc8 <col:25, col:27> 'int' lvalue
|     `-DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
`-UnaryOperator 0x55936cb57128 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
  `-ParenExpr 0x55936cb57108 <col:16, col:34> 'int'
    `-BinaryOperator 0x55936cb570e0 <col:17, col:33> 'int' '<<'
      |-IntegerLiteral 0x55936cb57028 <col:17> 'int' 1
      `-ParenExpr 0x55936cb570c0 <col:22, col:33> 'int'
        `-BinaryOperator 0x55936cb57088 <line:38:17, line:119:32> 'int' '-'
          |-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
          `-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
[B58.5] & [B58.11]
  13: BinaryOperator 0x55936cb57190 <print.c:95:53, ./lopcodes.h:125:37> 'int' '-'
|-UnaryOperator 0x55936cb56f38 <print.c:95:53, col:54> 'int' prefix '-'
| `-IntegerLiteral 0x55936cb56f18 <col:54> 'int' 1
`-ParenExpr 0x55936cb57170 <./lopcodes.h:125:19, col:37> 'int'
  `-BinaryOperator 0x55936cb57148 <col:20, line:119:34> 'int' '&'
    |-CStyleCastExpr 0x55936cb57000 <line:125:20, col:27> 'int' <NoOp>
    | `-ImplicitCastExpr 0x55936cb56fe8 <col:25, col:27> 'int' <LValueToRValue>
    |   `-ParenExpr 0x55936cb56fc8 <col:25, col:27> 'int' lvalue
    |     `-DeclRefExpr 0x55936cb56f58 <print.c:95:63> 'int' lvalue Var 0x55936cb53730 'b' 'int'
    `-UnaryOperator 0x55936cb57128 <./lopcodes.h:125:31, line:119:34> 'int' prefix '~'
      `-ParenExpr 0x55936cb57108 <col:16, col:34> 'int'
        `-BinaryOperator 0x55936cb570e0 <col:17, col:33> 'int' '<<'
          |-IntegerLiteral 0x55936cb57028 <col:17> 'int' 1
          `-ParenExpr 0x55936cb570c0 <col:22, col:33> 'int'
            `-BinaryOperator 0x55936cb57088 <line:38:17, line:119:32> 'int' '-'
              |-IntegerLiteral 0x55936cb57048 <line:38:17> 'int' 9
              `-IntegerLiteral 0x55936cb57068 <line:119:32> 'int' 1
[B58.2] - ([B58.12])
   Preds (1): B60
   Succs (1): B57

 [B59]
   1: DeclRefExpr 0x55936cb571d8 <print.c:95:69> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   2: ImplicitCastExpr 0x55936cb57200 <print.c:95:69> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb571d8 <col:69> 'int' lvalue Var 0x55936cb53730 'b' 'int'
[B59.1] (ImplicitCastExpr, LValueToRValue, int)
   Preds (1): B60
   Succs (1): B57

 [B60]
   1: DeclRefExpr 0x55936cb56d28 <print.c:95:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb57248 <print.c:95:30> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb56d28 <col:30> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B60.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb56d50 <print.c:95:37> 'char [4]' lvalue " %d"
" %d"
   4: ImplicitCastExpr 0x55936cb57298 <print.c:95:37> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb56d50 <col:37> 'char [4]' lvalue " %d"
[B60.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb572b0 <print.c:95:37> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb57298 <col:37> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb56d50 <col:37> 'char [4]' lvalue " %d"
[B60.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb56d80 <print.c:95:47> 'int' lvalue Var 0x55936cb53730 'b' 'int'
b
   7: ImplicitCastExpr 0x55936cb56eb8 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x55936cb56da8 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x55936cb56d80 <print.c:95:47> 'int' lvalue Var 0x55936cb53730 'b' 'int'
([B60.6]) (ImplicitCastExpr, LValueToRValue, int)
   8: IntegerLiteral 0x55936cb56dc8 <./lopcodes.h:119:17> 'int' 1
1
   9: IntegerLiteral 0x55936cb56de8 <./lopcodes.h:38:17> 'int' 9
9
  10: IntegerLiteral 0x55936cb56e08 <./lopcodes.h:119:32> 'int' 1
1
  11: BinaryOperator 0x55936cb56e28 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x55936cb56de8 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb56e08 <line:119:32> 'int' 1
[B60.9] - [B60.10]
  12: BinaryOperator 0x55936cb56e70 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x55936cb56dc8 <col:17> 'int' 1
`-ParenExpr 0x55936cb56e50 <col:22, col:33> 'int'
  `-BinaryOperator 0x55936cb56e28 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x55936cb56de8 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb56e08 <line:119:32> 'int' 1
[B60.8] << ([B60.11])
  13: BinaryOperator 0x55936cb56ed0 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x55936cb56eb8 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x55936cb56da8 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x55936cb56d80 <print.c:95:47> 'int' lvalue Var 0x55936cb53730 'b' 'int'
`-ParenExpr 0x55936cb56e98 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x55936cb56e70 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x55936cb56dc8 <col:17> 'int' 1
    `-ParenExpr 0x55936cb56e50 <col:22, col:33> 'int'
      `-BinaryOperator 0x55936cb56e28 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x55936cb56de8 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb56e08 <line:119:32> 'int' 1
[B60.7] & ([B60.12])
   T: ([B60.13]) ? ... : ...
   Preds (1): B61
   Succs (2): B58 B59

 [B61]
  case iABC:
   1: DeclRefExpr 0x55936cb56900 <print.c:94:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb56980 <print.c:94:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb56900 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B61.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb56928 <print.c:94:12> 'char [3]' lvalue "%d"
"%d"
   4: ImplicitCastExpr 0x55936cb569d0 <print.c:94:12> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb56928 <col:12> 'char [3]' lvalue "%d"
[B61.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb569e8 <print.c:94:12> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb569d0 <col:12> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb56928 <col:12> 'char [3]' lvalue "%d"
[B61.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb56958 <print.c:94:17> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
a
   7: ImplicitCastExpr 0x55936cb56a00 <print.c:94:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb56958 <col:17> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
[B61.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CallExpr 0x55936cb56998 <print.c:94:5, col:18> 'int'
|-ImplicitCastExpr 0x55936cb56980 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb56900 <col:5> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb569e8 <col:12> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb569d0 <col:12> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb56928 <col:12> 'char [3]' lvalue "%d"
`-ImplicitCastExpr 0x55936cb56a00 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb56958 <col:17> 'int' lvalue Var 0x55936cb532d0 'a' 'int'
[B61.2]([B61.5], [B61.7])
   9: DeclRefExpr 0x55936cb56a18 <./lopcodes.h:255:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
luaP_opmodes
  10: ImplicitCastExpr 0x55936cb56a68 <./lopcodes.h:255:44> 'const lu_byte *' <ArrayToPointerDecay>
`-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
[B61.9] (ImplicitCastExpr, ArrayToPointerDecay, const lu_byte *)
  11: DeclRefExpr 0x55936cb56a40 <print.c:95:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
o
  12: ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B61.11] (ImplicitCastExpr, LValueToRValue, OpCode)
  13: ArraySubscriptExpr 0x55936cb56a98 <./lopcodes.h:255:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
`-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B61.10][[B61.12]]
  14: ImplicitCastExpr 0x55936cb56ae0 <./lopcodes.h:255:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
  |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
  | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
  `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
    `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B61.13] (ImplicitCastExpr, LValueToRValue, lu_byte)
  15: ImplicitCastExpr 0x55936cb56af8 <./lopcodes.h:255:44, col:58> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb56ae0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
      `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
[B61.14] (ImplicitCastExpr, IntegralCast, int)
  16: IntegerLiteral 0x55936cb56ac0 <./lopcodes.h:255:63> 'int' 4
4
  17: BinaryOperator 0x55936cb56b10 <./lopcodes.h:255:44, col:63> 'int' '>>'
|-ImplicitCastExpr 0x55936cb56af8 <col:44, col:58> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb56ae0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|     |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|     `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
`-IntegerLiteral 0x55936cb56ac0 <./lopcodes.h:255:63> 'int' 4
[B61.15] >> [B61.16]
  18: IntegerLiteral 0x55936cb56b58 <./lopcodes.h:255:68> 'int' 3
3
  19: BinaryOperator 0x55936cb56b78 <./lopcodes.h:255:43, col:68> 'int' '&'
|-ParenExpr 0x55936cb56b38 <col:43, col:64> 'int'
| `-BinaryOperator 0x55936cb56b10 <col:44, col:63> 'int' '>>'
|   |-ImplicitCastExpr 0x55936cb56af8 <col:44, col:58> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x55936cb56ae0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|   |     |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|   |     `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
|   |       `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
|   `-IntegerLiteral 0x55936cb56ac0 <./lopcodes.h:255:63> 'int' 4
`-IntegerLiteral 0x55936cb56b58 <col:68> 'int' 3
([B61.17]) & [B61.18]
  20: CStyleCastExpr 0x55936cb56c40 <./llimits.h:75:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
`-ParenExpr 0x55936cb56c20 <col:26, col:30> 'int'
  `-BinaryOperator 0x55936cb56b78 <./lopcodes.h:255:43, col:68> 'int' '&'
    |-ParenExpr 0x55936cb56b38 <col:43, col:64> 'int'
    | `-BinaryOperator 0x55936cb56b10 <col:44, col:63> 'int' '>>'
    |   |-ImplicitCastExpr 0x55936cb56af8 <col:44, col:58> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55936cb56ae0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
    |   |     `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
    |   `-IntegerLiteral 0x55936cb56ac0 <./lopcodes.h:255:63> 'int' 4
    `-IntegerLiteral 0x55936cb56b58 <col:68> 'int' 3
(enum OpArgMask)([B61.19]) (CStyleCastExpr, IntegralCast, enum OpArgMask)
  21: ImplicitCastExpr 0x55936cb56cd0 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
`-ParenExpr 0x55936cb56c88 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
  `-ParenExpr 0x55936cb56c68 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
    `-CStyleCastExpr 0x55936cb56c40 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
      `-ParenExpr 0x55936cb56c20 <col:26, col:30> 'int'
        `-BinaryOperator 0x55936cb56b78 <./lopcodes.h:255:43, col:68> 'int' '&'
          |-ParenExpr 0x55936cb56b38 <col:43, col:64> 'int'
          | `-BinaryOperator 0x55936cb56b10 <col:44, col:63> 'int' '>>'
          |   |-ImplicitCastExpr 0x55936cb56af8 <col:44, col:58> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x55936cb56ae0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
          |   |   `-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
          |   |     |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
          |   |     | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
          |   |     `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
          |   |       `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
          |   `-IntegerLiteral 0x55936cb56ac0 <./lopcodes.h:255:63> 'int' 4
          `-IntegerLiteral 0x55936cb56b58 <col:68> 'int' 3
(([B61.20])) (ImplicitCastExpr, IntegralCast, unsigned int)
  22: DeclRefExpr 0x55936cb56ca8 <print.c:95:22> 'int' EnumConstant 0x55936cb49580 'OpArgN' 'int'
OpArgN
  23: ImplicitCastExpr 0x55936cb56ce8 <print.c:95:22> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x55936cb56ca8 <col:22> 'int' EnumConstant 0x55936cb49580 'OpArgN' 'int'
[B61.22] (ImplicitCastExpr, IntegralCast, unsigned int)
  24: BinaryOperator 0x55936cb56d00 <./lopcodes.h:255:21, print.c:95:22> 'int' '!='
|-ImplicitCastExpr 0x55936cb56cd0 <./lopcodes.h:255:21, col:70> 'unsigned int' <IntegralCast>
| `-ParenExpr 0x55936cb56c88 <col:21, col:70> 'enum OpArgMask':'enum OpArgMask'
|   `-ParenExpr 0x55936cb56c68 <./llimits.h:75:22, col:31> 'enum OpArgMask':'enum OpArgMask'
|     `-CStyleCastExpr 0x55936cb56c40 <col:23, col:30> 'enum OpArgMask':'enum OpArgMask' <IntegralCast>
|       `-ParenExpr 0x55936cb56c20 <col:26, col:30> 'int'
|         `-BinaryOperator 0x55936cb56b78 <./lopcodes.h:255:43, col:68> 'int' '&'
|           |-ParenExpr 0x55936cb56b38 <col:43, col:64> 'int'
|           | `-BinaryOperator 0x55936cb56b10 <col:44, col:63> 'int' '>>'
|           |   |-ImplicitCastExpr 0x55936cb56af8 <col:44, col:58> 'int' <IntegralCast>
|           |   | `-ImplicitCastExpr 0x55936cb56ae0 <col:44, col:58> 'lu_byte':'unsigned char' <LValueToRValue>
|           |   |   `-ArraySubscriptExpr 0x55936cb56a98 <col:44, col:58> 'const lu_byte':'const unsigned char' lvalue
|           |   |     |-ImplicitCastExpr 0x55936cb56a68 <col:44> 'const lu_byte *' <ArrayToPointerDecay>
|           |   |     | `-DeclRefExpr 0x55936cb56a18 <col:44> 'const lu_byte [38]' lvalue Var 0x55936cb498a8 'luaP_opmodes' 'const lu_byte [38]'
|           |   |     `-ImplicitCastExpr 0x55936cb56a80 <print.c:95:18> 'OpCode':'OpCode' <LValueToRValue>
|           |   |       `-DeclRefExpr 0x55936cb56a40 <col:18> 'OpCode':'OpCode' lvalue Var 0x55936cb52ee0 'o' 'OpCode':'OpCode'
|           |   `-IntegerLiteral 0x55936cb56ac0 <./lopcodes.h:255:63> 'int' 4
|           `-IntegerLiteral 0x55936cb56b58 <col:68> 'int' 3
`-ImplicitCastExpr 0x55936cb56ce8 <print.c:95:22> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x55936cb56ca8 <col:22> 'int' EnumConstant 0x55936cb49580 'OpArgN' 'int'
[B61.21] != [B61.23]
   T: if [B61.24]
   Preds (1): B42
   Succs (2): B60 B56

 [B62]
   1: DeclRefExpr 0x55936cb56300 <print.c:89:43> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb56358 <print.c:89:43> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb56300 <col:43> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B62.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb56328 <print.c:89:50> 'char [5]' lvalue "[-]\t"
"[-]\t"
   4: ImplicitCastExpr 0x55936cb563a0 <print.c:89:50> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb56328 <col:50> 'char [5]' lvalue "[-]\t"
[B62.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb563b8 <print.c:89:50> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb563a0 <col:50> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb56328 <col:50> 'char [5]' lvalue "[-]\t"
[B62.4] (ImplicitCastExpr, BitCast, const char *)
   6: CallExpr 0x55936cb56370 <print.c:89:43, col:57> 'int'
|-ImplicitCastExpr 0x55936cb56358 <col:43> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb56300 <col:43> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
`-ImplicitCastExpr 0x55936cb563b8 <col:50> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb563a0 <col:50> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb56328 <col:50> 'char [5]' lvalue "[-]\t"
[B62.2]([B62.5])
   Preds (1): B64
   Succs (1): B42

 [B63]
   1: DeclRefExpr 0x55936cb561e8 <print.c:89:15> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb56268 <print.c:89:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb561e8 <col:15> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B63.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb56210 <print.c:89:22> 'char [6]' lvalue "[%d]\t"
"[%d]\t"
   4: ImplicitCastExpr 0x55936cb562b8 <print.c:89:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb56210 <col:22> 'char [6]' lvalue "[%d]\t"
[B63.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb562d0 <print.c:89:22> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb562b8 <col:22> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb56210 <col:22> 'char [6]' lvalue "[%d]\t"
[B63.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb56240 <print.c:89:31> 'int' lvalue Var 0x55936cb55d18 'line' 'int'
line
   7: ImplicitCastExpr 0x55936cb562e8 <print.c:89:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb56240 <col:31> 'int' lvalue Var 0x55936cb55d18 'line' 'int'
[B63.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CallExpr 0x55936cb56280 <print.c:89:15, col:35> 'int'
|-ImplicitCastExpr 0x55936cb56268 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb561e8 <col:15> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb562d0 <col:22> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb562b8 <col:22> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb56210 <col:22> 'char [6]' lvalue "[%d]\t"
`-ImplicitCastExpr 0x55936cb562e8 <col:31> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb56240 <col:31> 'int' lvalue Var 0x55936cb55d18 'line' 'int'
[B63.2]([B63.5], [B63.7])
   Preds (1): B64
   Succs (1): B42

 [B64]
   1: ConditionalOperator 0x55936cb55f98 <./ldebug.h:16:24, col:62> 'int'
|-ImplicitCastExpr 0x55936cb55f68 <col:24, col:38> 'int *' <LValueToRValue>
| `-ParenExpr 0x55936cb55e10 <col:24, col:38> 'int *const' lvalue
|   `-MemberExpr 0x55936cb55dd8 <col:25, col:30> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
|     `-ImplicitCastExpr 0x55936cb55dc0 <col:25, col:27> 'const Proto *' <LValueToRValue>
|       `-ParenExpr 0x55936cb55da0 <col:25, col:27> 'const Proto *' lvalue
|         `-DeclRefExpr 0x55936cb55d78 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
|-ImplicitCastExpr 0x55936cb55f80 <./ldebug.h:16:42, col:58> 'int' <LValueToRValue>
| `-ArraySubscriptExpr 0x55936cb55f20 <col:42, col:58> 'int' lvalue
|   |-ImplicitCastExpr 0x55936cb55ef0 <col:42, col:47> 'int *' <LValueToRValue>
|   | `-MemberExpr 0x55936cb55e90 <col:42, col:47> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
|   |   `-ImplicitCastExpr 0x55936cb55e78 <col:42, col:44> 'const Proto *' <LValueToRValue>
|   |     `-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
|   |       `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
|   `-ImplicitCastExpr 0x55936cb55f08 <col:22> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb55ec8 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
`-IntegerLiteral 0x55936cb55f48 <./ldebug.h:16:62> 'int' 0
[B67.135] ? [B65.8] : [B66.1]
   2: DeclStmt 0x55936cb55fe8 <print.c:87:3, col:25>col:7
`-VarDecl 0x55936cb55d18 <col:3, ./ldebug.h:16:63> print.c:87:7 used line 'int' cinit
  `-ParenExpr 0x55936cb55fc8 <./ldebug.h:16:23, col:63> 'int'
    `-ConditionalOperator 0x55936cb55f98 <col:24, col:62> 'int'
      |-ImplicitCastExpr 0x55936cb55f68 <col:24, col:38> 'int *' <LValueToRValue>
      | `-ParenExpr 0x55936cb55e10 <col:24, col:38> 'int *const' lvalue
      |   `-MemberExpr 0x55936cb55dd8 <col:25, col:30> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
      |     `-ImplicitCastExpr 0x55936cb55dc0 <col:25, col:27> 'const Proto *' <LValueToRValue>
      |       `-ParenExpr 0x55936cb55da0 <col:25, col:27> 'const Proto *' lvalue
      |         `-DeclRefExpr 0x55936cb55d78 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
      |-ImplicitCastExpr 0x55936cb55f80 <./ldebug.h:16:42, col:58> 'int' <LValueToRValue>
      | `-ArraySubscriptExpr 0x55936cb55f20 <col:42, col:58> 'int' lvalue
      |   |-ImplicitCastExpr 0x55936cb55ef0 <col:42, col:47> 'int *' <LValueToRValue>
      |   | `-MemberExpr 0x55936cb55e90 <col:42, col:47> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
      |   |   `-ImplicitCastExpr 0x55936cb55e78 <col:42, col:44> 'const Proto *' <LValueToRValue>
      |   |     `-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
      |   |       `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
      |   `-ImplicitCastExpr 0x55936cb55f08 <col:22> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x55936cb55ec8 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
      `-IntegerLiteral 0x55936cb55f48 <./ldebug.h:16:62> 'int' 0
int line = (((f)->lineinfo) ? (f)->lineinfo[pc] : 0);
   3: DeclRefExpr 0x55936cb56000 <print.c:88:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   4: ImplicitCastExpr 0x55936cb560e0 <print.c:88:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb56000 <col:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B64.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   5: StringLiteral 0x55936cb56028 <print.c:88:10> 'char [5]' lvalue "\t%d\t"
"\t%d\t"
   6: ImplicitCastExpr 0x55936cb56130 <print.c:88:10> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb56028 <col:10> 'char [5]' lvalue "\t%d\t"
[B64.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x55936cb56148 <print.c:88:10> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb56130 <col:10> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb56028 <col:10> 'char [5]' lvalue "\t%d\t"
[B64.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x55936cb56058 <print.c:88:19> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   9: ImplicitCastExpr 0x55936cb560a0 <print.c:88:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb56058 <col:19> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B64.8] (ImplicitCastExpr, LValueToRValue, int)
  10: IntegerLiteral 0x55936cb56080 <print.c:88:22> 'int' 1
1
  11: BinaryOperator 0x55936cb560b8 <print.c:88:19, col:22> 'int' '+'
|-ImplicitCastExpr 0x55936cb560a0 <col:19> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb56058 <col:19> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
`-IntegerLiteral 0x55936cb56080 <col:22> 'int' 1
[B64.9] + [B64.10]
  12: CallExpr 0x55936cb560f8 <print.c:88:3, col:23> 'int'
|-ImplicitCastExpr 0x55936cb560e0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb56000 <col:3> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb56148 <col:10> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb56130 <col:10> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb56028 <col:10> 'char [5]' lvalue "\t%d\t"
`-BinaryOperator 0x55936cb560b8 <col:19, col:22> 'int' '+'
  |-ImplicitCastExpr 0x55936cb560a0 <col:19> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55936cb56058 <col:19> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
  `-IntegerLiteral 0x55936cb56080 <col:22> 'int' 1
[B64.4]([B64.7], [B64.11])
  13: DeclRefExpr 0x55936cb56160 <print.c:89:7> 'int' lvalue Var 0x55936cb55d18 'line' 'int'
line
  14: ImplicitCastExpr 0x55936cb561a8 <print.c:89:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb56160 <col:7> 'int' lvalue Var 0x55936cb55d18 'line' 'int'
[B64.13] (ImplicitCastExpr, LValueToRValue, int)
  15: IntegerLiteral 0x55936cb56188 <print.c:89:12> 'int' 0
0
  16: BinaryOperator 0x55936cb561c0 <print.c:89:7, col:12> 'int' '>'
|-ImplicitCastExpr 0x55936cb561a8 <col:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb56160 <col:7> 'int' lvalue Var 0x55936cb55d18 'line' 'int'
`-IntegerLiteral 0x55936cb56188 <col:12> 'int' 0
[B64.14] > [B64.15]
   T: if [B64.16]
   Preds (2): B65 B66
   Succs (2): B63 B62

 [B65]
   1: DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   2: ImplicitCastExpr 0x55936cb55e78 <./ldebug.h:16:42, col:44> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
  `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
([B65.1]) (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x55936cb55e90 <./ldebug.h:16:42, col:47> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
`-ImplicitCastExpr 0x55936cb55e78 <col:42, col:44> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
    `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B65.2]->lineinfo
   4: ImplicitCastExpr 0x55936cb55ef0 <./ldebug.h:16:42, col:47> 'int *' <LValueToRValue>
`-MemberExpr 0x55936cb55e90 <col:42, col:47> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
  `-ImplicitCastExpr 0x55936cb55e78 <col:42, col:44> 'const Proto *' <LValueToRValue>
    `-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
      `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B65.3] (ImplicitCastExpr, LValueToRValue, int *)
   5: DeclRefExpr 0x55936cb55ec8 <print.c:87:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   6: ImplicitCastExpr 0x55936cb55f08 <print.c:87:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb55ec8 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B65.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x55936cb55f20 <./ldebug.h:16:42, col:58> 'int' lvalue
|-ImplicitCastExpr 0x55936cb55ef0 <col:42, col:47> 'int *' <LValueToRValue>
| `-MemberExpr 0x55936cb55e90 <col:42, col:47> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
|   `-ImplicitCastExpr 0x55936cb55e78 <col:42, col:44> 'const Proto *' <LValueToRValue>
|     `-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
|       `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
`-ImplicitCastExpr 0x55936cb55f08 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb55ec8 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B65.4][[B65.6]]
   8: ImplicitCastExpr 0x55936cb55f80 <./ldebug.h:16:42, col:58> 'int' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb55f20 <col:42, col:58> 'int' lvalue
  |-ImplicitCastExpr 0x55936cb55ef0 <col:42, col:47> 'int *' <LValueToRValue>
  | `-MemberExpr 0x55936cb55e90 <col:42, col:47> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
  |   `-ImplicitCastExpr 0x55936cb55e78 <col:42, col:44> 'const Proto *' <LValueToRValue>
  |     `-ParenExpr 0x55936cb55e58 <col:42, col:44> 'const Proto *' lvalue
  |       `-DeclRefExpr 0x55936cb55e30 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
  `-ImplicitCastExpr 0x55936cb55f08 <col:22> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55936cb55ec8 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B65.7] (ImplicitCastExpr, LValueToRValue, int)
   Preds (1): B67
   Succs (1): B64

 [B66]
   1: IntegerLiteral 0x55936cb55f48 <./ldebug.h:16:62> 'int' 0
0
   Preds (1): B67
   Succs (1): B64

 [B67]
   1: DeclRefExpr 0x55936cb52dd8 <print.c:80:17> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
code
   2: ImplicitCastExpr 0x55936cb52e28 <print.c:80:17> 'const Instruction *' <LValueToRValue>
`-DeclRefExpr 0x55936cb52dd8 <col:17> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
[B67.1] (ImplicitCastExpr, LValueToRValue, const Instruction *)
   3: DeclRefExpr 0x55936cb52e00 <print.c:80:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   4: ImplicitCastExpr 0x55936cb52e40 <print.c:80:22> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb52e00 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B67.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ArraySubscriptExpr 0x55936cb52e58 <print.c:80:17, col:24> 'const Instruction':'const unsigned int' lvalue
|-ImplicitCastExpr 0x55936cb52e28 <col:17> 'const Instruction *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb52dd8 <col:17> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
`-ImplicitCastExpr 0x55936cb52e40 <col:22> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb52e00 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B67.2][[B67.4]]
   6: ImplicitCastExpr 0x55936cb52e80 <print.c:80:17, col:24> 'Instruction':'unsigned int' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb52e58 <col:17, col:24> 'const Instruction':'const unsigned int' lvalue
  |-ImplicitCastExpr 0x55936cb52e28 <col:17> 'const Instruction *' <LValueToRValue>
  | `-DeclRefExpr 0x55936cb52dd8 <col:17> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
  `-ImplicitCastExpr 0x55936cb52e40 <col:22> 'int' <LValueToRValue>
    `-DeclRefExpr 0x55936cb52e00 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B67.5] (ImplicitCastExpr, LValueToRValue, Instruction)
   7: DeclStmt 0x55936cb52e98 <print.c:80:3, col:25>col:15
`-VarDecl 0x55936cb52d78 <col:3, col:24> col:15 used i 'Instruction':'unsigned int' cinit
  `-ImplicitCastExpr 0x55936cb52e80 <col:17, col:24> 'Instruction':'unsigned int' <LValueToRValue>
    `-ArraySubscriptExpr 0x55936cb52e58 <col:17, col:24> 'const Instruction':'const unsigned int' lvalue
      |-ImplicitCastExpr 0x55936cb52e28 <col:17> 'const Instruction *' <LValueToRValue>
      | `-DeclRefExpr 0x55936cb52dd8 <col:17> 'const Instruction *' lvalue Var 0x55936cb52938 'code' 'const Instruction *'
      `-ImplicitCastExpr 0x55936cb52e40 <col:22> 'int' <LValueToRValue>
        `-DeclRefExpr 0x55936cb52e00 <col:22> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
Instruction i = code[pc];
   8: DeclRefExpr 0x55936cb52f40 <print.c:81:23> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
i
   9: ImplicitCastExpr 0x55936cb52fa8 <./lopcodes.h:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x55936cb52f68 <col:38, col:40> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x55936cb52f40 <print.c:81:23> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
([B67.8]) (ImplicitCastExpr, LValueToRValue, Instruction)
  10: IntegerLiteral 0x55936cb52f88 <./lopcodes.h:44:17> 'int' 0
0
  11: BinaryOperator 0x55936cb52fc0 <./lopcodes.h:80:38, line:44:17> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x55936cb52fa8 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x55936cb52f68 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x55936cb52f40 <print.c:81:23> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
`-IntegerLiteral 0x55936cb52f88 <./lopcodes.h:44:17> 'int' 0
[B67.9] >> [B67.10]
  12: IntegerLiteral 0x55936cb53008 <./lopcodes.h:71:39> 'int' 0
0
  13: CStyleCastExpr 0x55936cb53038 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
(Instruction)[B67.12] (CStyleCastExpr, IntegralCast, Instruction)
  14: UnaryOperator 0x55936cb53060 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
~[B67.13]
  15: IntegerLiteral 0x55936cb530a0 <./lopcodes.h:42:18> 'int' 6
6
  16: BinaryOperator 0x55936cb530c0 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53080 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb53060 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
`-IntegerLiteral 0x55936cb530a0 <line:42:18> 'int' 6
([B67.14]) << [B67.15]
  17: UnaryOperator 0x55936cb53108 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x55936cb530e8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb530c0 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53080 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb53060 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
    `-IntegerLiteral 0x55936cb530a0 <line:42:18> 'int' 6
~([B67.16])
  18: IntegerLiteral 0x55936cb53148 <./lopcodes.h:80:67> 'int' 0
0
  19: BinaryOperator 0x55936cb53168 <./lopcodes.h:71:21, line:80:67> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53128 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb53108 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x55936cb530e8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x55936cb530c0 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x55936cb53080 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x55936cb53060 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
|       `-IntegerLiteral 0x55936cb530a0 <line:42:18> 'int' 6
`-IntegerLiteral 0x55936cb53148 <line:80:67> 'int' 0
([B67.17]) << [B67.18]
  20: BinaryOperator 0x55936cb531b0 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x55936cb52fe8 <line:80:37, col:49> 'Instruction':'unsigned int'
| `-BinaryOperator 0x55936cb52fc0 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x55936cb52fa8 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb52f68 <col:38, col:40> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x55936cb52f40 <print.c:81:23> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|   `-IntegerLiteral 0x55936cb52f88 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x55936cb53190 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb53168 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53128 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb53108 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x55936cb530e8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x55936cb530c0 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x55936cb53080 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x55936cb53060 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
    |       `-IntegerLiteral 0x55936cb530a0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x55936cb53148 <line:80:67> 'int' 0
([B67.11]) & ([B67.19])
  21: CStyleCastExpr 0x55936cb53238 <./llimits.h:75:23, col:30> 'OpCode':'OpCode' <IntegralCast>
`-ParenExpr 0x55936cb53218 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x55936cb531b0 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x55936cb52fe8 <line:80:37, col:49> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x55936cb52fc0 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x55936cb52fa8 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x55936cb52f68 <col:38, col:40> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x55936cb52f40 <print.c:81:23> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
    |   `-IntegerLiteral 0x55936cb52f88 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x55936cb53190 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x55936cb53168 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x55936cb53128 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x55936cb53108 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x55936cb530e8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x55936cb530c0 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x55936cb53080 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x55936cb53060 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
        |       `-IntegerLiteral 0x55936cb530a0 <line:42:18> 'int' 6
        `-IntegerLiteral 0x55936cb53148 <line:80:67> 'int' 0
(OpCode)([B67.20]) (CStyleCastExpr, IntegralCast, OpCode)
  22: DeclStmt 0x55936cb532a0 <print.c:81:3, col:25>col:10
`-VarDecl 0x55936cb52ee0 <col:3, ./lopcodes.h:80:70> print.c:81:10 used o 'OpCode':'OpCode' cinit
  `-ParenExpr 0x55936cb53280 <./lopcodes.h:80:23, col:70> 'OpCode':'OpCode'
    `-ParenExpr 0x55936cb53260 <./llimits.h:75:22, col:31> 'OpCode':'OpCode'
      `-CStyleCastExpr 0x55936cb53238 <col:23, col:30> 'OpCode':'OpCode' <IntegralCast>
        `-ParenExpr 0x55936cb53218 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x55936cb531b0 <./lopcodes.h:80:37, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x55936cb52fe8 <line:80:37, col:49> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x55936cb52fc0 <col:38, line:44:17> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x55936cb52fa8 <line:80:38, col:40> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x55936cb52f68 <col:38, col:40> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x55936cb52f40 <print.c:81:23> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
            |   `-IntegerLiteral 0x55936cb52f88 <./lopcodes.h:44:17> 'int' 0
            `-ParenExpr 0x55936cb53190 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x55936cb53168 <col:21, line:80:67> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x55936cb53128 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x55936cb53108 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x55936cb530e8 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x55936cb530c0 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x55936cb53080 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x55936cb53060 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x55936cb53038 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x55936cb53008 <col:39> 'int' 0
                |       `-IntegerLiteral 0x55936cb530a0 <line:42:18> 'int' 6
                `-IntegerLiteral 0x55936cb53148 <line:80:67> 'int' 0
OpCode o = (((OpCode)(((i) >> 0) & ((~((~(Instruction)0) << 6)) << 0))));
  23: DeclRefExpr 0x55936cb53330 <print.c:82:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
i
  24: ImplicitCastExpr 0x55936cb53400 <./lopcodes.h:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x55936cb53358 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x55936cb53330 <print.c:82:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
([B67.23]) (ImplicitCastExpr, LValueToRValue, Instruction)
  25: IntegerLiteral 0x55936cb53378 <./lopcodes.h:44:17> 'int' 0
0
  26: IntegerLiteral 0x55936cb53398 <./lopcodes.h:42:18> 'int' 6
6
  27: BinaryOperator 0x55936cb533b8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x55936cb53378 <line:44:17> 'int' 0
`-IntegerLiteral 0x55936cb53398 <line:42:18> 'int' 6
[B67.25] + [B67.26]
  28: BinaryOperator 0x55936cb53418 <./lopcodes.h:84:33, line:45:33> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x55936cb53400 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x55936cb53358 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x55936cb53330 <print.c:82:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x55936cb533e0 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x55936cb533b8 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x55936cb53378 <line:44:17> 'int' 0
    `-IntegerLiteral 0x55936cb53398 <line:42:18> 'int' 6
[B67.24] >> ([B67.27])
  29: IntegerLiteral 0x55936cb53460 <./lopcodes.h:71:39> 'int' 0
0
  30: CStyleCastExpr 0x55936cb53490 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
(Instruction)[B67.29] (CStyleCastExpr, IntegralCast, Instruction)
  31: UnaryOperator 0x55936cb534b8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
~[B67.30]
  32: IntegerLiteral 0x55936cb534f8 <./lopcodes.h:40:17> 'int' 8
8
  33: BinaryOperator 0x55936cb53518 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb534d8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb534b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
`-IntegerLiteral 0x55936cb534f8 <line:40:17> 'int' 8
([B67.31]) << [B67.32]
  34: UnaryOperator 0x55936cb53560 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x55936cb53540 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb53518 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb534d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb534b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
    `-IntegerLiteral 0x55936cb534f8 <line:40:17> 'int' 8
~([B67.33])
  35: IntegerLiteral 0x55936cb535a0 <./lopcodes.h:84:60> 'int' 0
0
  36: BinaryOperator 0x55936cb535c0 <./lopcodes.h:71:21, line:84:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53580 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb53560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x55936cb53540 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x55936cb53518 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x55936cb534d8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x55936cb534b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
|       `-IntegerLiteral 0x55936cb534f8 <line:40:17> 'int' 8
`-IntegerLiteral 0x55936cb535a0 <line:84:60> 'int' 0
([B67.34]) << [B67.35]
  37: BinaryOperator 0x55936cb53608 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x55936cb53440 <line:84:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x55936cb53418 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x55936cb53400 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb53358 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x55936cb53330 <print.c:82:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x55936cb533e0 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x55936cb533b8 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x55936cb53378 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x55936cb53398 <line:42:18> 'int' 6
`-ParenExpr 0x55936cb535e8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb535c0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53580 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb53560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x55936cb53540 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x55936cb53518 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x55936cb534d8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x55936cb534b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
    |       `-IntegerLiteral 0x55936cb534f8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x55936cb535a0 <line:84:60> 'int' 0
([B67.28]) & ([B67.36])
  38: CStyleCastExpr 0x55936cb53698 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x55936cb53678 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x55936cb53608 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x55936cb53440 <line:84:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x55936cb53418 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x55936cb53400 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x55936cb53358 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x55936cb53330 <print.c:82:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x55936cb533e0 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x55936cb533b8 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x55936cb53378 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x55936cb53398 <line:42:18> 'int' 6
    `-ParenExpr 0x55936cb535e8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x55936cb535c0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x55936cb53580 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x55936cb53560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x55936cb53540 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x55936cb53518 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x55936cb534d8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x55936cb534b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
        |       `-IntegerLiteral 0x55936cb534f8 <line:40:17> 'int' 8
        `-IntegerLiteral 0x55936cb535a0 <line:84:60> 'int' 0
(int)([B67.37]) (CStyleCastExpr, IntegralCast, int)
  39: DeclStmt 0x55936cb53700 <print.c:82:3, col:20>col:7
`-VarDecl 0x55936cb532d0 <col:3, ./lopcodes.h:84:63> print.c:82:7 used a 'int' cinit
  `-ParenExpr 0x55936cb536e0 <./lopcodes.h:84:21, col:63> 'int'
    `-ParenExpr 0x55936cb536c0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x55936cb53698 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x55936cb53678 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x55936cb53608 <./lopcodes.h:84:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x55936cb53440 <line:84:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x55936cb53418 <col:33, line:45:33> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x55936cb53400 <line:84:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x55936cb53358 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x55936cb53330 <print.c:82:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x55936cb533e0 <./lopcodes.h:45:16, col:33> 'int'
            |     `-BinaryOperator 0x55936cb533b8 <line:44:17, line:42:18> 'int' '+'
            |       |-IntegerLiteral 0x55936cb53378 <line:44:17> 'int' 0
            |       `-IntegerLiteral 0x55936cb53398 <line:42:18> 'int' 6
            `-ParenExpr 0x55936cb535e8 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x55936cb535c0 <col:21, line:84:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x55936cb53580 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x55936cb53560 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x55936cb53540 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x55936cb53518 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x55936cb534d8 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x55936cb534b8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x55936cb53490 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x55936cb53460 <col:39> 'int' 0
                |       `-IntegerLiteral 0x55936cb534f8 <line:40:17> 'int' 8
                `-IntegerLiteral 0x55936cb535a0 <line:84:60> 'int' 0
int a = (((int)(((i) >> (0 + 6)) & ((~((~(Instruction)0) << 8)) << 0))));
  40: DeclRefExpr 0x55936cb53790 <print.c:83:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
i
  41: ImplicitCastExpr 0x55936cb53930 <./lopcodes.h:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x55936cb537b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x55936cb53790 <print.c:83:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
([B67.40]) (ImplicitCastExpr, LValueToRValue, Instruction)
  42: IntegerLiteral 0x55936cb537d8 <./lopcodes.h:44:17> 'int' 0
0
  43: IntegerLiteral 0x55936cb537f8 <./lopcodes.h:42:18> 'int' 6
6
  44: BinaryOperator 0x55936cb53818 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
`-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
[B67.42] + [B67.43]
  45: IntegerLiteral 0x55936cb53860 <./lopcodes.h:40:17> 'int' 8
8
  46: BinaryOperator 0x55936cb53880 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x55936cb53840 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x55936cb53818 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
`-IntegerLiteral 0x55936cb53860 <line:40:17> 'int' 8
([B67.44]) + [B67.45]
  47: IntegerLiteral 0x55936cb538c8 <./lopcodes.h:37:17> 'int' 9
9
  48: BinaryOperator 0x55936cb538e8 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x55936cb538a8 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x55936cb53880 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x55936cb53840 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x55936cb53818 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x55936cb53860 <line:40:17> 'int' 8
`-IntegerLiteral 0x55936cb538c8 <line:37:17> 'int' 9
([B67.46]) + [B67.47]
  49: BinaryOperator 0x55936cb53948 <./lopcodes.h:88:33, line:47:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x55936cb53930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x55936cb537b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x55936cb53790 <print.c:83:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x55936cb53910 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x55936cb538e8 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x55936cb538a8 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x55936cb53880 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x55936cb53840 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x55936cb53818 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x55936cb53860 <line:40:17> 'int' 8
    `-IntegerLiteral 0x55936cb538c8 <line:37:17> 'int' 9
[B67.41] >> ([B67.48])
  50: IntegerLiteral 0x55936cb53990 <./lopcodes.h:71:39> 'int' 0
0
  51: CStyleCastExpr 0x55936cb539c0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
(Instruction)[B67.50] (CStyleCastExpr, IntegralCast, Instruction)
  52: UnaryOperator 0x55936cb539e8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
~[B67.51]
  53: IntegerLiteral 0x55936cb53a28 <./lopcodes.h:38:17> 'int' 9
9
  54: BinaryOperator 0x55936cb53a48 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53a08 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb539e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
`-IntegerLiteral 0x55936cb53a28 <line:38:17> 'int' 9
([B67.52]) << [B67.53]
  55: UnaryOperator 0x55936cb53a90 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x55936cb53a70 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb53a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53a08 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb539e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
    `-IntegerLiteral 0x55936cb53a28 <line:38:17> 'int' 9
~([B67.54])
  56: IntegerLiteral 0x55936cb53ad0 <./lopcodes.h:88:60> 'int' 0
0
  57: BinaryOperator 0x55936cb53af0 <./lopcodes.h:71:21, line:88:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb53a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x55936cb53a70 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x55936cb53a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x55936cb53a08 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x55936cb539e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
|       `-IntegerLiteral 0x55936cb53a28 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb53ad0 <line:88:60> 'int' 0
([B67.55]) << [B67.56]
  58: BinaryOperator 0x55936cb53b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x55936cb53970 <line:88:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x55936cb53948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x55936cb53930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb537b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x55936cb53790 <print.c:83:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x55936cb53910 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x55936cb538e8 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x55936cb538a8 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x55936cb53880 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x55936cb53840 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x55936cb53818 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x55936cb53860 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x55936cb538c8 <line:37:17> 'int' 9
`-ParenExpr 0x55936cb53b18 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb53af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb53a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x55936cb53a70 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x55936cb53a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x55936cb53a08 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x55936cb539e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
    |       `-IntegerLiteral 0x55936cb53a28 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb53ad0 <line:88:60> 'int' 0
([B67.49]) & ([B67.57])
  59: CStyleCastExpr 0x55936cb53bc8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x55936cb53ba8 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x55936cb53b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x55936cb53970 <line:88:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x55936cb53948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x55936cb53930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x55936cb537b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x55936cb53790 <print.c:83:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x55936cb53910 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x55936cb538e8 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x55936cb538a8 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x55936cb53880 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x55936cb53840 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x55936cb53818 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x55936cb53860 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x55936cb538c8 <line:37:17> 'int' 9
    `-ParenExpr 0x55936cb53b18 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x55936cb53af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x55936cb53ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x55936cb53a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x55936cb53a70 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x55936cb53a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x55936cb53a08 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x55936cb539e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
        |       `-IntegerLiteral 0x55936cb53a28 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb53ad0 <line:88:60> 'int' 0
(int)([B67.58]) (CStyleCastExpr, IntegralCast, int)
  60: DeclStmt 0x55936cb53c30 <print.c:83:3, col:20>col:7
`-VarDecl 0x55936cb53730 <col:3, ./lopcodes.h:88:63> print.c:83:7 used b 'int' cinit
  `-ParenExpr 0x55936cb53c10 <./lopcodes.h:88:21, col:63> 'int'
    `-ParenExpr 0x55936cb53bf0 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x55936cb53bc8 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x55936cb53ba8 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x55936cb53b38 <./lopcodes.h:88:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x55936cb53970 <line:88:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x55936cb53948 <col:33, line:47:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x55936cb53930 <line:88:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x55936cb537b8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x55936cb53790 <print.c:83:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x55936cb53910 <./lopcodes.h:47:16, col:31> 'int'
            |     `-BinaryOperator 0x55936cb538e8 <line:46:16, line:37:17> 'int' '+'
            |       |-ParenExpr 0x55936cb538a8 <line:46:16, col:31> 'int'
            |       | `-BinaryOperator 0x55936cb53880 <line:45:16, line:40:17> 'int' '+'
            |       |   |-ParenExpr 0x55936cb53840 <line:45:16, col:33> 'int'
            |       |   | `-BinaryOperator 0x55936cb53818 <line:44:17, line:42:18> 'int' '+'
            |       |   |   |-IntegerLiteral 0x55936cb537d8 <line:44:17> 'int' 0
            |       |   |   `-IntegerLiteral 0x55936cb537f8 <line:42:18> 'int' 6
            |       |   `-IntegerLiteral 0x55936cb53860 <line:40:17> 'int' 8
            |       `-IntegerLiteral 0x55936cb538c8 <line:37:17> 'int' 9
            `-ParenExpr 0x55936cb53b18 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x55936cb53af0 <col:21, line:88:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x55936cb53ab0 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x55936cb53a90 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x55936cb53a70 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x55936cb53a48 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x55936cb53a08 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x55936cb539e8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x55936cb539c0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x55936cb53990 <col:39> 'int' 0
                |       `-IntegerLiteral 0x55936cb53a28 <line:38:17> 'int' 9
                `-IntegerLiteral 0x55936cb53ad0 <line:88:60> 'int' 0
int b = (((int)(((i) >> (((0 + 6) + 8) + 9)) & ((~((~(Instruction)0) << 9)) << 0))));
  61: DeclRefExpr 0x55936cb53cc0 <print.c:84:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
i
  62: ImplicitCastExpr 0x55936cb53df8 <./lopcodes.h:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x55936cb53ce8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x55936cb53cc0 <print.c:84:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
([B67.61]) (ImplicitCastExpr, LValueToRValue, Instruction)
  63: IntegerLiteral 0x55936cb53d08 <./lopcodes.h:44:17> 'int' 0
0
  64: IntegerLiteral 0x55936cb53d28 <./lopcodes.h:42:18> 'int' 6
6
  65: BinaryOperator 0x55936cb53d48 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x55936cb53d08 <line:44:17> 'int' 0
`-IntegerLiteral 0x55936cb53d28 <line:42:18> 'int' 6
[B67.63] + [B67.64]
  66: IntegerLiteral 0x55936cb53d90 <./lopcodes.h:40:17> 'int' 8
8
  67: BinaryOperator 0x55936cb53db0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x55936cb53d70 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x55936cb53d48 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x55936cb53d08 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x55936cb53d28 <line:42:18> 'int' 6
`-IntegerLiteral 0x55936cb53d90 <line:40:17> 'int' 8
([B67.65]) + [B67.66]
  68: BinaryOperator 0x55936cb53e10 <./lopcodes.h:92:33, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x55936cb53df8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x55936cb53ce8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x55936cb53cc0 <print.c:84:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x55936cb53dd8 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x55936cb53db0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x55936cb53d70 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x55936cb53d48 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x55936cb53d08 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x55936cb53d28 <line:42:18> 'int' 6
    `-IntegerLiteral 0x55936cb53d90 <line:40:17> 'int' 8
[B67.62] >> ([B67.67])
  69: IntegerLiteral 0x55936cb53e58 <./lopcodes.h:71:39> 'int' 0
0
  70: CStyleCastExpr 0x55936cb53e88 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
(Instruction)[B67.69] (CStyleCastExpr, IntegralCast, Instruction)
  71: UnaryOperator 0x55936cb53eb0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
~[B67.70]
  72: IntegerLiteral 0x55936cb53ef0 <./lopcodes.h:37:17> 'int' 9
9
  73: BinaryOperator 0x55936cb53f10 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53ed0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb53eb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
`-IntegerLiteral 0x55936cb53ef0 <line:37:17> 'int' 9
([B67.71]) << [B67.72]
  74: UnaryOperator 0x55936cb53f58 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x55936cb53f38 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb53f10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53ed0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb53eb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
    `-IntegerLiteral 0x55936cb53ef0 <line:37:17> 'int' 9
~([B67.73])
  75: IntegerLiteral 0x55936cb53f98 <./lopcodes.h:92:60> 'int' 0
0
  76: BinaryOperator 0x55936cb53fb8 <./lopcodes.h:71:21, line:92:60> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb53f78 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb53f58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x55936cb53f38 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x55936cb53f10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x55936cb53ed0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x55936cb53eb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
|       `-IntegerLiteral 0x55936cb53ef0 <line:37:17> 'int' 9
`-IntegerLiteral 0x55936cb53f98 <line:92:60> 'int' 0
([B67.74]) << [B67.75]
  77: BinaryOperator 0x55936cb54000 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x55936cb53e38 <line:92:32, col:43> 'Instruction':'unsigned int'
| `-BinaryOperator 0x55936cb53e10 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x55936cb53df8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb53ce8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x55936cb53cc0 <print.c:84:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x55936cb53dd8 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x55936cb53db0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x55936cb53d70 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x55936cb53d48 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x55936cb53d08 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x55936cb53d28 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x55936cb53d90 <line:40:17> 'int' 8
`-ParenExpr 0x55936cb53fe0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb53fb8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb53f78 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb53f58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x55936cb53f38 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x55936cb53f10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x55936cb53ed0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x55936cb53eb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
    |       `-IntegerLiteral 0x55936cb53ef0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x55936cb53f98 <line:92:60> 'int' 0
([B67.68]) & ([B67.76])
  78: CStyleCastExpr 0x55936cb54090 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x55936cb54070 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x55936cb54000 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x55936cb53e38 <line:92:32, col:43> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x55936cb53e10 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x55936cb53df8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x55936cb53ce8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x55936cb53cc0 <print.c:84:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x55936cb53dd8 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x55936cb53db0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x55936cb53d70 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x55936cb53d48 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x55936cb53d08 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x55936cb53d28 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x55936cb53d90 <line:40:17> 'int' 8
    `-ParenExpr 0x55936cb53fe0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x55936cb53fb8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x55936cb53f78 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x55936cb53f58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x55936cb53f38 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x55936cb53f10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x55936cb53ed0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x55936cb53eb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
        |       `-IntegerLiteral 0x55936cb53ef0 <line:37:17> 'int' 9
        `-IntegerLiteral 0x55936cb53f98 <line:92:60> 'int' 0
(int)([B67.77]) (CStyleCastExpr, IntegralCast, int)
  79: DeclStmt 0x55936cb540f8 <print.c:84:3, col:20>col:7
`-VarDecl 0x55936cb53c60 <col:3, ./lopcodes.h:92:63> print.c:84:7 used c 'int' cinit
  `-ParenExpr 0x55936cb540d8 <./lopcodes.h:92:21, col:63> 'int'
    `-ParenExpr 0x55936cb540b8 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x55936cb54090 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x55936cb54070 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x55936cb54000 <./lopcodes.h:92:32, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x55936cb53e38 <line:92:32, col:43> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x55936cb53e10 <col:33, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x55936cb53df8 <line:92:33, col:35> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x55936cb53ce8 <col:33, col:35> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x55936cb53cc0 <print.c:84:18> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x55936cb53dd8 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x55936cb53db0 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x55936cb53d70 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x55936cb53d48 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x55936cb53d08 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x55936cb53d28 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x55936cb53d90 <line:40:17> 'int' 8
            `-ParenExpr 0x55936cb53fe0 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x55936cb53fb8 <col:21, line:92:60> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x55936cb53f78 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x55936cb53f58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x55936cb53f38 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x55936cb53f10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x55936cb53ed0 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x55936cb53eb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x55936cb53e88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x55936cb53e58 <col:39> 'int' 0
                |       `-IntegerLiteral 0x55936cb53ef0 <line:37:17> 'int' 9
                `-IntegerLiteral 0x55936cb53f98 <line:92:60> 'int' 0
int c = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << 9)) << 0))));
  80: DeclRefExpr 0x55936cb55110 <print.c:85:20> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
i
  81: ImplicitCastExpr 0x55936cb55248 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x55936cb55138 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x55936cb55110 <print.c:85:20> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
([B67.80]) (ImplicitCastExpr, LValueToRValue, Instruction)
  82: IntegerLiteral 0x55936cb55158 <./lopcodes.h:44:17> 'int' 0
0
  83: IntegerLiteral 0x55936cb55178 <./lopcodes.h:42:18> 'int' 6
6
  84: BinaryOperator 0x55936cb55198 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x55936cb55158 <line:44:17> 'int' 0
`-IntegerLiteral 0x55936cb55178 <line:42:18> 'int' 6
[B67.82] + [B67.83]
  85: IntegerLiteral 0x55936cb551e0 <./lopcodes.h:40:17> 'int' 8
8
  86: BinaryOperator 0x55936cb55200 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x55936cb551c0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x55936cb55198 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x55936cb55158 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x55936cb55178 <line:42:18> 'int' 6
`-IntegerLiteral 0x55936cb551e0 <line:40:17> 'int' 8
([B67.84]) + [B67.85]
  87: BinaryOperator 0x55936cb55260 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x55936cb55248 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x55936cb55138 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x55936cb55110 <print.c:85:20> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x55936cb55228 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x55936cb55200 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x55936cb551c0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x55936cb55198 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x55936cb55158 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x55936cb55178 <line:42:18> 'int' 6
    `-IntegerLiteral 0x55936cb551e0 <line:40:17> 'int' 8
[B67.81] >> ([B67.86])
  88: IntegerLiteral 0x55936cb552a8 <./lopcodes.h:71:39> 'int' 0
0
  89: CStyleCastExpr 0x55936cb552d8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
(Instruction)[B67.88] (CStyleCastExpr, IntegralCast, Instruction)
  90: UnaryOperator 0x55936cb55300 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
~[B67.89]
  91: IntegerLiteral 0x55936cb55340 <./lopcodes.h:37:17> 'int' 9
9
  92: IntegerLiteral 0x55936cb55360 <./lopcodes.h:38:17> 'int' 9
9
  93: BinaryOperator 0x55936cb55380 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
`-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
[B67.91] + [B67.92]
  94: BinaryOperator 0x55936cb553c8 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb55320 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb55300 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
`-ParenExpr 0x55936cb553a8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x55936cb55380 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
    `-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
([B67.90]) << ([B67.93])
  95: UnaryOperator 0x55936cb55410 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x55936cb553f0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb553c8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb55320 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb55300 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
    `-ParenExpr 0x55936cb553a8 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x55936cb55380 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
        `-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
~([B67.94])
  96: IntegerLiteral 0x55936cb55450 <./lopcodes.h:96:63> 'int' 0
0
  97: BinaryOperator 0x55936cb55470 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb55430 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb55410 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x55936cb553f0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x55936cb553c8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x55936cb55320 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x55936cb55300 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
|       `-ParenExpr 0x55936cb553a8 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x55936cb55380 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb55450 <line:96:63> 'int' 0
([B67.95]) << [B67.96]
  98: BinaryOperator 0x55936cb554b8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x55936cb55288 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x55936cb55260 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x55936cb55248 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb55138 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x55936cb55110 <print.c:85:20> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x55936cb55228 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x55936cb55200 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x55936cb551c0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x55936cb55198 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x55936cb55158 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x55936cb55178 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x55936cb551e0 <line:40:17> 'int' 8
`-ParenExpr 0x55936cb55498 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb55470 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb55430 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb55410 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x55936cb553f0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x55936cb553c8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x55936cb55320 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x55936cb55300 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
    |       `-ParenExpr 0x55936cb553a8 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x55936cb55380 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb55450 <line:96:63> 'int' 0
([B67.87]) & ([B67.97])
  99: CStyleCastExpr 0x55936cb55548 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x55936cb55528 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x55936cb554b8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x55936cb55288 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x55936cb55260 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x55936cb55248 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x55936cb55138 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x55936cb55110 <print.c:85:20> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x55936cb55228 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x55936cb55200 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x55936cb551c0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x55936cb55198 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x55936cb55158 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x55936cb55178 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x55936cb551e0 <line:40:17> 'int' 8
    `-ParenExpr 0x55936cb55498 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x55936cb55470 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x55936cb55430 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x55936cb55410 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x55936cb553f0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x55936cb553c8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x55936cb55320 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x55936cb55300 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
        |       `-ParenExpr 0x55936cb553a8 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x55936cb55380 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb55450 <line:96:63> 'int' 0
(int)([B67.98]) (CStyleCastExpr, IntegralCast, int)
 100: DeclStmt 0x55936cb555b0 <print.c:85:3, col:22>col:7
`-VarDecl 0x55936cb550b0 <col:3, ./lopcodes.h:96:66> print.c:85:7 used bx 'int' cinit
  `-ParenExpr 0x55936cb55590 <./lopcodes.h:96:22, col:66> 'int'
    `-ParenExpr 0x55936cb55570 <./llimits.h:75:22, col:31> 'int'
      `-CStyleCastExpr 0x55936cb55548 <col:23, col:30> 'int' <IntegralCast>
        `-ParenExpr 0x55936cb55528 <col:26, col:30> 'unsigned int'
          `-BinaryOperator 0x55936cb554b8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
            |-ParenExpr 0x55936cb55288 <line:96:33, col:45> 'Instruction':'unsigned int'
            | `-BinaryOperator 0x55936cb55260 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
            |   |-ImplicitCastExpr 0x55936cb55248 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
            |   | `-ParenExpr 0x55936cb55138 <col:34, col:36> 'Instruction':'unsigned int' lvalue
            |   |   `-DeclRefExpr 0x55936cb55110 <print.c:85:20> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
            |   `-ParenExpr 0x55936cb55228 <./lopcodes.h:46:16, col:31> 'int'
            |     `-BinaryOperator 0x55936cb55200 <line:45:16, line:40:17> 'int' '+'
            |       |-ParenExpr 0x55936cb551c0 <line:45:16, col:33> 'int'
            |       | `-BinaryOperator 0x55936cb55198 <line:44:17, line:42:18> 'int' '+'
            |       |   |-IntegerLiteral 0x55936cb55158 <line:44:17> 'int' 0
            |       |   `-IntegerLiteral 0x55936cb55178 <line:42:18> 'int' 6
            |       `-IntegerLiteral 0x55936cb551e0 <line:40:17> 'int' 8
            `-ParenExpr 0x55936cb55498 <line:71:20, col:49> 'Instruction':'unsigned int'
              `-BinaryOperator 0x55936cb55470 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
                |-ParenExpr 0x55936cb55430 <line:71:21, col:45> 'Instruction':'unsigned int'
                | `-UnaryOperator 0x55936cb55410 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
                |   `-ParenExpr 0x55936cb553f0 <col:23, col:44> 'Instruction':'unsigned int'
                |     `-BinaryOperator 0x55936cb553c8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
                |       |-ParenExpr 0x55936cb55320 <line:71:24, col:40> 'Instruction':'unsigned int'
                |       | `-UnaryOperator 0x55936cb55300 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
                |       |   `-CStyleCastExpr 0x55936cb552d8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
                |       |     `-IntegerLiteral 0x55936cb552a8 <col:39> 'int' 0
                |       `-ParenExpr 0x55936cb553a8 <line:39:18, col:34> 'int'
                |         `-BinaryOperator 0x55936cb55380 <line:37:17, line:38:17> 'int' '+'
                |           |-IntegerLiteral 0x55936cb55340 <line:37:17> 'int' 9
                |           `-IntegerLiteral 0x55936cb55360 <line:38:17> 'int' 9
                `-IntegerLiteral 0x55936cb55450 <line:96:63> 'int' 0
int bx = (((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << (9 + 9))) << 0))));
 101: DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
i
 102: ImplicitCastExpr 0x55936cb55778 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x55936cb55668 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
([B67.101]) (ImplicitCastExpr, LValueToRValue, Instruction)
 103: IntegerLiteral 0x55936cb55688 <./lopcodes.h:44:17> 'int' 0
0
 104: IntegerLiteral 0x55936cb556a8 <./lopcodes.h:42:18> 'int' 6
6
 105: BinaryOperator 0x55936cb556c8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
`-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
[B67.103] + [B67.104]
 106: IntegerLiteral 0x55936cb55710 <./lopcodes.h:40:17> 'int' 8
8
 107: BinaryOperator 0x55936cb55730 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x55936cb556f0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x55936cb556c8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
`-IntegerLiteral 0x55936cb55710 <line:40:17> 'int' 8
([B67.105]) + [B67.106]
 108: BinaryOperator 0x55936cb55790 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x55936cb55778 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x55936cb55668 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
`-ParenExpr 0x55936cb55758 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x55936cb55730 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x55936cb556f0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x55936cb556c8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x55936cb55710 <line:40:17> 'int' 8
[B67.102] >> ([B67.107])
 109: IntegerLiteral 0x55936cb557d8 <./lopcodes.h:71:39> 'int' 0
0
 110: CStyleCastExpr 0x55936cb55808 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
(Instruction)[B67.109] (CStyleCastExpr, IntegralCast, Instruction)
 111: UnaryOperator 0x55936cb55830 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
~[B67.110]
 112: IntegerLiteral 0x55936cb55870 <./lopcodes.h:37:17> 'int' 9
9
 113: IntegerLiteral 0x55936cb55890 <./lopcodes.h:38:17> 'int' 9
9
 114: BinaryOperator 0x55936cb558b0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
`-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
[B67.112] + [B67.113]
 115: BinaryOperator 0x55936cb558f8 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
`-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
    `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
([B67.111]) << ([B67.114])
 116: UnaryOperator 0x55936cb55940 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x55936cb55920 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb558f8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
    `-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
        `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
~([B67.115])
 117: IntegerLiteral 0x55936cb55980 <./lopcodes.h:96:63> 'int' 0
0
 118: BinaryOperator 0x55936cb559a0 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x55936cb55960 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x55936cb55940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x55936cb55920 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x55936cb558f8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
|       `-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb55980 <line:96:63> 'int' 0
([B67.116]) << [B67.117]
 119: BinaryOperator 0x55936cb559e8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x55936cb557b8 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x55936cb55790 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x55936cb55778 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x55936cb55668 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|   `-ParenExpr 0x55936cb55758 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x55936cb55730 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x55936cb556f0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x55936cb556c8 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x55936cb55710 <line:40:17> 'int' 8
`-ParenExpr 0x55936cb559c8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x55936cb559a0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x55936cb55960 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x55936cb55940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x55936cb55920 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x55936cb558f8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
    |       `-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
    `-IntegerLiteral 0x55936cb55980 <line:96:63> 'int' 0
([B67.108]) & ([B67.118])
 120: CStyleCastExpr 0x55936cb55a78 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x55936cb55a58 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x55936cb559e8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x55936cb557b8 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x55936cb55790 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x55936cb55778 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x55936cb55668 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
    |   `-ParenExpr 0x55936cb55758 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x55936cb55730 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x55936cb556f0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x55936cb556c8 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x55936cb55710 <line:40:17> 'int' 8
    `-ParenExpr 0x55936cb559c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x55936cb559a0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x55936cb55960 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x55936cb55940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x55936cb55920 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x55936cb558f8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
        |       `-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
        `-IntegerLiteral 0x55936cb55980 <line:96:63> 'int' 0
(int)([B67.119]) (CStyleCastExpr, IntegralCast, int)
 121: IntegerLiteral 0x55936cb55ae0 <./lopcodes.h:57:28> 'int' 1
1
 122: IntegerLiteral 0x55936cb55b00 <./lopcodes.h:37:17> 'int' 9
9
 123: IntegerLiteral 0x55936cb55b20 <./lopcodes.h:38:17> 'int' 9
9
 124: BinaryOperator 0x55936cb55b40 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x55936cb55b00 <line:37:17> 'int' 9
`-IntegerLiteral 0x55936cb55b20 <line:38:17> 'int' 9
[B67.122] + [B67.123]
 125: BinaryOperator 0x55936cb55b88 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x55936cb55ae0 <line:57:28> 'int' 1
`-ParenExpr 0x55936cb55b68 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x55936cb55b40 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x55936cb55b00 <line:37:17> 'int' 9
    `-IntegerLiteral 0x55936cb55b20 <line:38:17> 'int' 9
[B67.121] << ([B67.124])
 126: IntegerLiteral 0x55936cb55bd0 <./lopcodes.h:57:40> 'int' 1
1
 127: BinaryOperator 0x55936cb55bf0 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x55936cb55bb0 <col:27, col:38> 'int'
| `-BinaryOperator 0x55936cb55b88 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x55936cb55ae0 <line:57:28> 'int' 1
|   `-ParenExpr 0x55936cb55b68 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x55936cb55b40 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x55936cb55b00 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x55936cb55b20 <line:38:17> 'int' 9
`-IntegerLiteral 0x55936cb55bd0 <line:57:40> 'int' 1
([B67.125]) - [B67.126]
 128: IntegerLiteral 0x55936cb55c38 <./lopcodes.h:58:39> 'int' 1
1
 129: BinaryOperator 0x55936cb55c58 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x55936cb55c18 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x55936cb55bf0 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x55936cb55bb0 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x55936cb55b88 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x55936cb55ae0 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x55936cb55b68 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x55936cb55b40 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x55936cb55b00 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x55936cb55b20 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x55936cb55bd0 <line:57:40> 'int' 1
`-IntegerLiteral 0x55936cb55c38 <line:58:39> 'int' 1
([B67.127]) >> [B67.128]
 130: BinaryOperator 0x55936cb55ca0 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x55936cb55ac0 <line:96:22, col:66> 'int'
| `-ParenExpr 0x55936cb55aa0 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x55936cb55a78 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x55936cb55a58 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x55936cb559e8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x55936cb557b8 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x55936cb55790 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x55936cb55778 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x55936cb55668 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|         |   |   `-DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
|         |   `-ParenExpr 0x55936cb55758 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x55936cb55730 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x55936cb556f0 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x55936cb556c8 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x55936cb55710 <line:40:17> 'int' 8
|         `-ParenExpr 0x55936cb559c8 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x55936cb559a0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x55936cb55960 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x55936cb55940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x55936cb55920 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x55936cb558f8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
|             |       `-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x55936cb55980 <line:96:63> 'int' 0
`-ParenExpr 0x55936cb55c80 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x55936cb55c58 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x55936cb55c18 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x55936cb55bf0 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x55936cb55bb0 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x55936cb55b88 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x55936cb55ae0 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x55936cb55b68 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x55936cb55b40 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x55936cb55b00 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x55936cb55b20 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x55936cb55bd0 <line:57:40> 'int' 1
    `-IntegerLiteral 0x55936cb55c38 <line:58:39> 'int' 1
(([B67.120])) - ([B67.129])
 131: DeclStmt 0x55936cb55ce8 <print.c:86:3, col:24>col:7
`-VarDecl 0x55936cb555e0 <col:3, ./lopcodes.h:100:47> print.c:86:7 used sbx 'int' cinit
  `-ParenExpr 0x55936cb55cc8 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x55936cb55ca0 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x55936cb55ac0 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x55936cb55aa0 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x55936cb55a78 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x55936cb55a58 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x55936cb559e8 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x55936cb557b8 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x55936cb55790 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x55936cb55778 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x55936cb55668 <col:34, col:36> 'Instruction':'unsigned int' lvalue
      |         |   |   `-DeclRefExpr 0x55936cb55640 <print.c:86:22> 'Instruction':'unsigned int' lvalue Var 0x55936cb52d78 'i' 'Instruction':'unsigned int'
      |         |   `-ParenExpr 0x55936cb55758 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x55936cb55730 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x55936cb556f0 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x55936cb556c8 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x55936cb55688 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x55936cb556a8 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x55936cb55710 <line:40:17> 'int' 8
      |         `-ParenExpr 0x55936cb559c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x55936cb559a0 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x55936cb55960 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x55936cb55940 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x55936cb55920 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x55936cb558f8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x55936cb55850 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x55936cb55830 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x55936cb55808 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x55936cb557d8 <col:39> 'int' 0
      |             |       `-ParenExpr 0x55936cb558d8 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x55936cb558b0 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x55936cb55870 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x55936cb55890 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x55936cb55980 <line:96:63> 'int' 0
      `-ParenExpr 0x55936cb55c80 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x55936cb55c58 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x55936cb55c18 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x55936cb55bf0 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x55936cb55bb0 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x55936cb55b88 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x55936cb55ae0 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x55936cb55b68 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x55936cb55b40 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x55936cb55b00 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x55936cb55b20 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x55936cb55bd0 <line:57:40> 'int' 1
          `-IntegerLiteral 0x55936cb55c38 <line:58:39> 'int' 1
int sbx = ((((int)(((i) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << (9 + 9))) << 0)))) - (((1 << (9 + 9)) - 1) >> 1));
 132: DeclRefExpr 0x55936cb55d78 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
 133: ImplicitCastExpr 0x55936cb55dc0 <./ldebug.h:16:25, col:27> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x55936cb55da0 <col:25, col:27> 'const Proto *' lvalue
  `-DeclRefExpr 0x55936cb55d78 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
([B67.132]) (ImplicitCastExpr, LValueToRValue, const Proto *)
 134: MemberExpr 0x55936cb55dd8 <./ldebug.h:16:25, col:30> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
`-ImplicitCastExpr 0x55936cb55dc0 <col:25, col:27> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x55936cb55da0 <col:25, col:27> 'const Proto *' lvalue
    `-DeclRefExpr 0x55936cb55d78 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B67.133]->lineinfo
 135: ImplicitCastExpr 0x55936cb55f68 <./ldebug.h:16:24, col:38> 'int *' <LValueToRValue>
`-ParenExpr 0x55936cb55e10 <col:24, col:38> 'int *const' lvalue
  `-MemberExpr 0x55936cb55dd8 <col:25, col:30> 'int *const' lvalue ->lineinfo 0x55936cb1c0d0
    `-ImplicitCastExpr 0x55936cb55dc0 <col:25, col:27> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x55936cb55da0 <col:25, col:27> 'const Proto *' lvalue
        `-DeclRefExpr 0x55936cb55d78 <print.c:87:20> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
([B67.134]) (ImplicitCastExpr, LValueToRValue, int *)
   T: [B67.135] ? ... : ...
   Preds (1): B68
   Succs (2): B65 B66

 [B68]
   1: DeclRefExpr 0x55936cb52c78 <print.c:78:13> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
   2: ImplicitCastExpr 0x55936cb52cc8 <print.c:78:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb52c78 <col:13> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
[B68.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x55936cb52ca0 <print.c:78:16> 'int' lvalue Var 0x55936cb52ae8 'n' 'int'
n
   4: ImplicitCastExpr 0x55936cb52ce0 <print.c:78:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x55936cb52ca0 <col:16> 'int' lvalue Var 0x55936cb52ae8 'n' 'int'
[B68.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x55936cb52cf8 <print.c:78:13, col:16> 'int' '<'
|-ImplicitCastExpr 0x55936cb52cc8 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55936cb52c78 <col:13> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
`-ImplicitCastExpr 0x55936cb52ce0 <col:16> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55936cb52ca0 <col:16> 'int' lvalue Var 0x55936cb52ae8 'n' 'int'
[B68.2] < [B68.4]
   T: for (...; [B68.5]; ...)
   Preds (2): B1 B69
   Succs (2): B67 B0

 [B69]
   1: DeclRefExpr 0x55936cb52998 <print.c:76:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   2: ImplicitCastExpr 0x55936cb529c0 <print.c:76:26> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb52998 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x55936cb529d8 <print.c:76:26, col:29> 'Instruction *const' lvalue ->code 0x55936cb1bd58
`-ImplicitCastExpr 0x55936cb529c0 <col:26> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb52998 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.2]->code
   4: ImplicitCastExpr 0x55936cb52a10 <print.c:76:26, col:29> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x55936cb529d8 <col:26, col:29> 'Instruction *const' lvalue ->code 0x55936cb1bd58
  `-ImplicitCastExpr 0x55936cb529c0 <col:26> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb52998 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.3] (ImplicitCastExpr, LValueToRValue, Instruction *)
   5: ImplicitCastExpr 0x55936cb52a28 <print.c:76:26, col:29> 'const Instruction *' <BitCast>
`-ImplicitCastExpr 0x55936cb52a10 <col:26, col:29> 'Instruction *' <LValueToRValue>
  `-MemberExpr 0x55936cb529d8 <col:26, col:29> 'Instruction *const' lvalue ->code 0x55936cb1bd58
    `-ImplicitCastExpr 0x55936cb529c0 <col:26> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb52998 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.4] (ImplicitCastExpr, BitCast, const Instruction *)
   6: DeclStmt 0x55936cb52a40 <print.c:76:2, col:33>col:21
`-VarDecl 0x55936cb52938 <col:2, col:29> col:21 used code 'const Instruction *' cinit
  `-ImplicitCastExpr 0x55936cb52a28 <col:26, col:29> 'const Instruction *' <BitCast>
    `-ImplicitCastExpr 0x55936cb52a10 <col:26, col:29> 'Instruction *' <LValueToRValue>
      `-MemberExpr 0x55936cb529d8 <col:26, col:29> 'Instruction *const' lvalue ->code 0x55936cb1bd58
        `-ImplicitCastExpr 0x55936cb529c0 <col:26> 'const Proto *' <LValueToRValue>
          `-DeclRefExpr 0x55936cb52998 <col:26> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
const Instruction *code = f->code;
   7: DeclStmt 0x55936cb72828 <print.c:77:6>col:6
`-VarDecl 0x55936cb52a70 <col:2, col:6> col:6 used pc 'int'
int pc;
   8: DeclRefExpr 0x55936cb52b48 <print.c:77:11> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
f
   9: ImplicitCastExpr 0x55936cb52b70 <print.c:77:11> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb52b48 <col:11> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.8] (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x55936cb52b88 <print.c:77:11, col:14> 'const int' lvalue ->sizecode 0x55936cb1c538
`-ImplicitCastExpr 0x55936cb52b70 <col:11> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb52b48 <col:11> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.9]->sizecode
  11: ImplicitCastExpr 0x55936cb52bc0 <print.c:77:11, col:14> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb52b88 <col:11, col:14> 'const int' lvalue ->sizecode 0x55936cb1c538
  `-ImplicitCastExpr 0x55936cb52b70 <col:11> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb52b48 <col:11> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
[B69.10] (ImplicitCastExpr, LValueToRValue, int)
  12: DeclStmt 0x55936cb72790 <print.c:77:9, col:14>col:9
`-VarDecl 0x55936cb52ae8 <col:2, col:14> col:9 used n 'int' cinit
  `-ImplicitCastExpr 0x55936cb52bc0 <col:11, col:14> 'int' <LValueToRValue>
    `-MemberExpr 0x55936cb52b88 <col:11, col:14> 'const int' lvalue ->sizecode 0x55936cb1c538
      `-ImplicitCastExpr 0x55936cb52b70 <col:11> 'const Proto *' <LValueToRValue>
        `-DeclRefExpr 0x55936cb52b48 <col:11> 'const Proto *' lvalue ParmVar 0x55936cb52778 'f' 'const Proto *'
int n = f->sizecode;
  13: IntegerLiteral 0x55936cb52c30 <print.c:78:10> 'int' 0
0
  14: DeclRefExpr 0x55936cb52c08 <print.c:78:7> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
pc
  15: BinaryOperator 0x55936cb52c50 <print.c:78:7, col:10> 'int' '='
|-DeclRefExpr 0x55936cb52c08 <col:7> 'int' lvalue Var 0x55936cb52a70 'pc' 'int'
`-IntegerLiteral 0x55936cb52c30 <col:10> 'int' 0
[B69.14] = [B69.13]
   Preds (1): B70
   Succs (1): B68

 [B0 (EXIT)]
   Preds (1): B68
