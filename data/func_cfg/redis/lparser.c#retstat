static void retstat(LexState *ls)
 [B14 (ENTRY)]
   Succs (1): B13

 [B1]
   1: DeclRefExpr 0x558fa8f421b8 <lparser.c:1267:3> 'void (FuncState *, int, int)' Function 0x558fa8ebd880 'luaK_ret' 'void (FuncState *, int, int)'
luaK_ret
   2: ImplicitCastExpr 0x558fa8f42258 <lparser.c:1267:3> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f421b8 <col:3> 'void (FuncState *, int, int)' Function 0x558fa8ebd880 'luaK_ret' 'void (FuncState *, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
   3: DeclRefExpr 0x558fa8f421e0 <lparser.c:1267:12> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f422b0 <lparser.c:1267:12> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f421e0 <col:12> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f42208 <lparser.c:1267:16> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
first
   6: ImplicitCastExpr 0x558fa8f422c8 <lparser.c:1267:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f42208 <col:16> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x558fa8f42230 <lparser.c:1267:23> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
nret
   8: ImplicitCastExpr 0x558fa8f422e0 <lparser.c:1267:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f42230 <col:23> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8f42270 <lparser.c:1267:3, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f42258 <col:3> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f421b8 <col:3> 'void (FuncState *, int, int)' Function 0x558fa8ebd880 'luaK_ret' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x558fa8f422b0 <col:12> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f421e0 <col:12> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f422c8 <col:16> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f42208 <col:16> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
`-ImplicitCastExpr 0x558fa8f422e0 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f42230 <col:23> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
[B1.2]([B1.4], [B1.6], [B1.8])
   Preds (4): B2 B3 B5 B11
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f41e40 <lparser.c:1261:9> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
luaK_exp2nextreg
   2: ImplicitCastExpr 0x558fa8f41ed8 <lparser.c:1261:9> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f41e40 <col:9> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x558fa8f41e68 <lparser.c:1261:26> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f41f28 <lparser.c:1261:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f41e68 <col:26> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f41e90 <lparser.c:1261:31> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
   6: UnaryOperator 0x558fa8f41eb8 <lparser.c:1261:30, col:31> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f41e90 <col:31> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
&[B2.5]
   7: CallExpr 0x558fa8f41ef0 <lparser.c:1261:9, col:32> 'void'
|-ImplicitCastExpr 0x558fa8f41ed8 <col:9> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f41e40 <col:9> 'void (FuncState *, expdesc *)' Function 0x558fa8ebadc0 'luaK_exp2nextreg' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f41f28 <col:26> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f41e68 <col:26> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f41eb8 <col:30, col:31> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f41e90 <col:31> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x558fa8f41f68 <lparser.c:1262:17> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   9: ImplicitCastExpr 0x558fa8f41f90 <lparser.c:1262:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f41f68 <col:17> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B2.8] (ImplicitCastExpr, LValueToRValue, FuncState *)
  10: MemberExpr 0x558fa8f41fa8 <lparser.c:1262:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f41f90 <col:17> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f41f68 <col:17> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B2.9]->nactvar
  11: ImplicitCastExpr 0x558fa8f41fe0 <lparser.c:1262:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f41fa8 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f41f90 <col:17> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f41f68 <col:17> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B2.10] (ImplicitCastExpr, LValueToRValue, lu_byte)
  12: ImplicitCastExpr 0x558fa8f41ff8 <lparser.c:1262:17, col:21> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f41fe0 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f41fa8 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f41f90 <col:17> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f41f68 <col:17> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B2.11] (ImplicitCastExpr, IntegralCast, int)
  13: DeclRefExpr 0x558fa8f41f40 <lparser.c:1262:9> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
first
  14: BinaryOperator 0x558fa8f42010 <lparser.c:1262:9, col:21> 'int' '='
|-DeclRefExpr 0x558fa8f41f40 <col:9> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
`-ImplicitCastExpr 0x558fa8f41ff8 <col:17, col:21> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f41fe0 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f41fa8 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      `-ImplicitCastExpr 0x558fa8f41f90 <col:17> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f41f68 <col:17> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B2.13] = [B2.12]
  15: IntegerLiteral 0x558fa8f42038 <./llimits.h:62:31> 'int' 0
0
  16: CStyleCastExpr 0x558fa8f42068 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f42038 <col:31> 'int' 0
(void)[B2.15] (CStyleCastExpr, ToVoid, void)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f41d18 <lparser.c:1259:17> 'int (FuncState *, expdesc *)' Function 0x558fa8ebab88 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x558fa8f41db0 <lparser.c:1259:17> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f41d18 <col:17> 'int (FuncState *, expdesc *)' Function 0x558fa8ebab88 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x558fa8f41d40 <lparser.c:1259:33> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f41e00 <lparser.c:1259:33> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f41d40 <col:33> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f41d68 <lparser.c:1259:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
   6: UnaryOperator 0x558fa8f41d90 <lparser.c:1259:37, col:38> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f41d68 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
&[B3.5]
   7: CallExpr 0x558fa8f41dc8 <lparser.c:1259:17, col:39> 'int'
|-ImplicitCastExpr 0x558fa8f41db0 <col:17> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f41d18 <col:17> 'int (FuncState *, expdesc *)' Function 0x558fa8ebab88 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f41e00 <col:33> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f41d40 <col:33> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f41d90 <col:37, col:38> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f41d68 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B3.2]([B3.4], [B3.6])
   8: DeclRefExpr 0x558fa8f41cf0 <lparser.c:1259:9> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
first
   9: BinaryOperator 0x558fa8f41e18 <lparser.c:1259:9, col:39> 'int' '='
|-DeclRefExpr 0x558fa8f41cf0 <col:9> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
`-CallExpr 0x558fa8f41dc8 <col:17, col:39> 'int'
  |-ImplicitCastExpr 0x558fa8f41db0 <col:17> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f41d18 <col:17> 'int (FuncState *, expdesc *)' Function 0x558fa8ebab88 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8f41e00 <col:33> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f41d40 <col:33> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
  `-UnaryOperator 0x558fa8f41d90 <col:37, col:38> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f41d68 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B3.8] = [B3.7]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x558fa8f41c68 <lparser.c:1258:11> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
nret
   2: ImplicitCastExpr 0x558fa8f41cb0 <lparser.c:1258:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f41c68 <col:11> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
[B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x558fa8f41c90 <lparser.c:1258:19> 'int' 1
1
   4: BinaryOperator 0x558fa8f41cc8 <lparser.c:1258:11, col:19> 'int' '=='
|-ImplicitCastExpr 0x558fa8f41cb0 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f41c68 <col:11> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
`-IntegerLiteral 0x558fa8f41c90 <col:19> 'int' 1
[B4.2] == [B4.3]
   T: if [B4.4]
   Preds (1): B9
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x558fa8f41ab8 <lparser.c:1254:15> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8f41ae0 <lparser.c:1254:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f41ab8 <col:15> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B5.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x558fa8f41af8 <lparser.c:1254:15, col:19> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
`-ImplicitCastExpr 0x558fa8f41ae0 <col:15> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f41ab8 <col:15> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B5.2]->nactvar
   4: ImplicitCastExpr 0x558fa8f41b30 <lparser.c:1254:15, col:19> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f41af8 <col:15, col:19> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
  `-ImplicitCastExpr 0x558fa8f41ae0 <col:15> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f41ab8 <col:15> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: ImplicitCastExpr 0x558fa8f41b48 <lparser.c:1254:15, col:19> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f41b30 <col:15, col:19> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f41af8 <col:15, col:19> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
    `-ImplicitCastExpr 0x558fa8f41ae0 <col:15> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f41ab8 <col:15> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B5.4] (ImplicitCastExpr, IntegralCast, int)
   6: DeclRefExpr 0x558fa8f41a90 <lparser.c:1254:7> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
first
   7: BinaryOperator 0x558fa8f41b60 <lparser.c:1254:7, col:19> 'int' '='
|-DeclRefExpr 0x558fa8f41a90 <col:7> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
`-ImplicitCastExpr 0x558fa8f41b48 <col:15, col:19> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f41b30 <col:15, col:19> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f41af8 <col:15, col:19> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8eb4468
      `-ImplicitCastExpr 0x558fa8f41ae0 <col:15> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f41ab8 <col:15> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B5.6] = [B5.5]
   8: IntegerLiteral 0x558fa8f41bb0 <./lua.h:30:23> 'int' 1
1
   9: UnaryOperator 0x558fa8f41bd0 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f41bb0 <col:23> 'int' 1
-[B5.8]
  10: DeclRefExpr 0x558fa8f41b88 <lparser.c:1255:7> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
nret
  11: BinaryOperator 0x558fa8f41c10 <lparser.c:1255:7, ./lua.h:30:24> 'int' '='
|-DeclRefExpr 0x558fa8f41b88 <lparser.c:1255:7> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
`-ParenExpr 0x558fa8f41bf0 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x558fa8f41bd0 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8f41bb0 <col:23> 'int' 1
[B5.10] = ([B5.9])
   Preds (3): B6 B7 B8
   Succs (1): B1

 [B6]
   1: DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x558fa8f41178 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
([B6.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x558fa8f41190 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.2]->f
   4: ImplicitCastExpr 0x558fa8f411c8 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x558fa8f411e0 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.4]->code
   6: ImplicitCastExpr 0x558fa8f41328 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f411e0 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x558fa8f41218 <lparser.c:1251:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
   8: UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
&[B6.7]
   9: MemberExpr 0x558fa8f41280 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
  `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
([B6.8])->u
  10: MemberExpr 0x558fa8f412b8 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
    `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
      `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.9].s
  11: MemberExpr 0x558fa8f412f0 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
      `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
        `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.10].info
  12: ImplicitCastExpr 0x558fa8f41340 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f412f0 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
  `-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
      `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
        `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
          `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x558fa8f41358 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f41328 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f411e0 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f41340 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f412f0 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
    `-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
      `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
        `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
          `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
            `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.6][[B6.12]]
  14: ImplicitCastExpr 0x558fa8f415a8 <./lopcodes.h:81:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x558fa8f413a0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x558fa8f41380 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x558fa8f41358 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x558fa8f41328 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x558fa8f411e0 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
      |   `-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
      |       `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x558fa8f41340 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x558fa8f412f0 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
          `-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
            `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
              `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
                `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
                  `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
(([B6.13])) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: IntegerLiteral 0x558fa8f413c0 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x558fa8f413f0 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
(Instruction)[B6.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x558fa8f41418 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
~[B6.16]
  18: IntegerLiteral 0x558fa8f41458 <./lopcodes.h:42:18> 'int' 6
6
  19: BinaryOperator 0x558fa8f41478 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
([B6.17]) << [B6.18]
  20: UnaryOperator 0x558fa8f414c0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f414a0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f41478 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
~([B6.19])
  21: IntegerLiteral 0x558fa8f41500 <./lopcodes.h:44:17> 'int' 0
0
  22: BinaryOperator 0x558fa8f41520 <./lopcodes.h:71:21, line:44:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f414e0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f414c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f414a0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f41478 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f41500 <line:44:17> 'int' 0
([B6.20]) << [B6.21]
  23: UnaryOperator 0x558fa8f41568 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f41548 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f41520 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f414e0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f414c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f414a0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f41478 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f41500 <line:44:17> 'int' 0
~([B6.22])
  24: BinaryOperator 0x558fa8f415c0 <./lopcodes.h:81:34, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x558fa8f415a8 <line:81:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x558fa8f413a0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x558fa8f41380 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x558fa8f41358 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x558fa8f41328 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x558fa8f411e0 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|       |   `-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       |       `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x558fa8f41340 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x558fa8f412f0 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
|           `-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|             `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|               `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
|                 `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
|                   `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
`-ParenExpr 0x558fa8f41588 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x558fa8f41568 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x558fa8f41548 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f41520 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f414e0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f414c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f414a0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f41478 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
        `-IntegerLiteral 0x558fa8f41500 <line:44:17> 'int' 0
[B6.14] & ([B6.23])
  25: DeclRefExpr 0x558fa8f41608 <lparser.c:1251:36> 'int' EnumConstant 0x558fa8eafb48 'OP_TAILCALL' 'int'
OP_TAILCALL
  26: CStyleCastExpr 0x558fa8f41690 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x558fa8f41670 <col:26, col:30> 'int'
  `-DeclRefExpr 0x558fa8f41608 <lparser.c:1251:36> 'int' EnumConstant 0x558fa8eafb48 'OP_TAILCALL' 'int'
(Instruction)([B6.25]) (CStyleCastExpr, IntegralCast, Instruction)
  27: IntegerLiteral 0x558fa8f416d8 <./lopcodes.h:44:17> 'int' 0
0
  28: BinaryOperator 0x558fa8f416f8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f416b8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x558fa8f41690 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x558fa8f41670 <col:26, col:30> 'int'
|     `-DeclRefExpr 0x558fa8f41608 <lparser.c:1251:36> 'int' EnumConstant 0x558fa8eafb48 'OP_TAILCALL' 'int'
`-IntegerLiteral 0x558fa8f416d8 <./lopcodes.h:44:17> 'int' 0
([B6.26]) << [B6.27]
  29: IntegerLiteral 0x558fa8f41740 <./lopcodes.h:71:39> 'int' 0
0
  30: CStyleCastExpr 0x558fa8f41770 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
(Instruction)[B6.29] (CStyleCastExpr, IntegralCast, Instruction)
  31: UnaryOperator 0x558fa8f41798 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
~[B6.30]
  32: IntegerLiteral 0x558fa8f417d8 <./lopcodes.h:42:18> 'int' 6
6
  33: BinaryOperator 0x558fa8f417f8 <./lopcodes.h:71:24, line:42:18> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f417b8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f41798 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
`-IntegerLiteral 0x558fa8f417d8 <line:42:18> 'int' 6
([B6.31]) << [B6.32]
  34: UnaryOperator 0x558fa8f41840 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x558fa8f41820 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f417f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f417b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f41798 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
    `-IntegerLiteral 0x558fa8f417d8 <line:42:18> 'int' 6
~([B6.33])
  35: IntegerLiteral 0x558fa8f41880 <./lopcodes.h:44:17> 'int' 0
0
  36: BinaryOperator 0x558fa8f418a0 <./lopcodes.h:71:21, line:44:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x558fa8f41860 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x558fa8f41840 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x558fa8f41820 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x558fa8f417f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x558fa8f417b8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x558fa8f41798 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
|       `-IntegerLiteral 0x558fa8f417d8 <line:42:18> 'int' 6
`-IntegerLiteral 0x558fa8f41880 <line:44:17> 'int' 0
([B6.34]) << [B6.35]
  37: BinaryOperator 0x558fa8f418e8 <./lopcodes.h:82:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x558fa8f41720 <line:82:4, col:33> 'Instruction':'unsigned int'
| `-BinaryOperator 0x558fa8f416f8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x558fa8f416b8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x558fa8f41690 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x558fa8f41670 <col:26, col:30> 'int'
|   |     `-DeclRefExpr 0x558fa8f41608 <lparser.c:1251:36> 'int' EnumConstant 0x558fa8eafb48 'OP_TAILCALL' 'int'
|   `-IntegerLiteral 0x558fa8f416d8 <./lopcodes.h:44:17> 'int' 0
`-ParenExpr 0x558fa8f418c8 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x558fa8f418a0 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x558fa8f41860 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x558fa8f41840 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x558fa8f41820 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x558fa8f417f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x558fa8f417b8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x558fa8f41798 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
    |       `-IntegerLiteral 0x558fa8f417d8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x558fa8f41880 <line:44:17> 'int' 0
([B6.28]) & ([B6.36])
  38: BinaryOperator 0x558fa8f41930 <./lopcodes.h:81:33, line:82:56> 'unsigned int' '|'
|-ParenExpr 0x558fa8f415e8 <line:81:33, col:59> 'unsigned int'
| `-BinaryOperator 0x558fa8f415c0 <col:34, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x558fa8f415a8 <line:81:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x558fa8f413a0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x558fa8f41380 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x558fa8f41358 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x558fa8f41328 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x558fa8f411e0 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   |       |   `-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|   |       |       `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x558fa8f41340 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x558fa8f412f0 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
|   |           `-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|   |             `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|   |               `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
|   |                 `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
|   |                   `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
|   `-ParenExpr 0x558fa8f41588 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x558fa8f41568 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x558fa8f41548 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x558fa8f41520 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x558fa8f414e0 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x558fa8f414c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x558fa8f414a0 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x558fa8f41478 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
|           `-IntegerLiteral 0x558fa8f41500 <line:44:17> 'int' 0
`-ParenExpr 0x558fa8f41910 <line:82:3, col:56> 'unsigned int'
  `-BinaryOperator 0x558fa8f418e8 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x558fa8f41720 <line:82:4, col:33> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x558fa8f416f8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x558fa8f416b8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x558fa8f41690 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x558fa8f41670 <col:26, col:30> 'int'
    |   |     `-DeclRefExpr 0x558fa8f41608 <lparser.c:1251:36> 'int' EnumConstant 0x558fa8eafb48 'OP_TAILCALL' 'int'
    |   `-IntegerLiteral 0x558fa8f416d8 <./lopcodes.h:44:17> 'int' 0
    `-ParenExpr 0x558fa8f418c8 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x558fa8f418a0 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x558fa8f41860 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x558fa8f41840 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x558fa8f41820 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x558fa8f417f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x558fa8f417b8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x558fa8f41798 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
        |       `-IntegerLiteral 0x558fa8f417d8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x558fa8f41880 <line:44:17> 'int' 0
([B6.24]) | ([B6.37])
  39: DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
  40: ImplicitCastExpr 0x558fa8f40ee8 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
([B6.39]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  41: MemberExpr 0x558fa8f40f00 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
`-ImplicitCastExpr 0x558fa8f40ee8 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.40]->f
  42: ImplicitCastExpr 0x558fa8f40f38 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f40f00 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
  `-ImplicitCastExpr 0x558fa8f40ee8 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.41] (ImplicitCastExpr, LValueToRValue, Proto *)
  43: MemberExpr 0x558fa8f40f50 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
`-ImplicitCastExpr 0x558fa8f40f38 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f40f00 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
    `-ImplicitCastExpr 0x558fa8f40ee8 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.42]->code
  44: ImplicitCastExpr 0x558fa8f41098 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x558fa8f40f50 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
  `-ImplicitCastExpr 0x558fa8f40f38 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x558fa8f40f00 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
      `-ImplicitCastExpr 0x558fa8f40ee8 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B6.43] (ImplicitCastExpr, LValueToRValue, Instruction *)
  45: DeclRefExpr 0x558fa8f40f88 <lparser.c:1251:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
  46: UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
&[B6.45]
  47: MemberExpr 0x558fa8f40ff0 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ParenExpr 0x558fa8f40fd0 <col:38, col:40> 'expdesc *'
  `-UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
([B6.46])->u
  48: MemberExpr 0x558fa8f41028 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8f40ff0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ParenExpr 0x558fa8f40fd0 <col:38, col:40> 'expdesc *'
    `-UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
      `-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.47].s
  49: MemberExpr 0x558fa8f41060 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8f41028 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8f40ff0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ParenExpr 0x558fa8f40fd0 <col:38, col:40> 'expdesc *'
      `-UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
        `-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.48].info
  50: ImplicitCastExpr 0x558fa8f410b0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f41060 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
  `-MemberExpr 0x558fa8f41028 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    `-MemberExpr 0x558fa8f40ff0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
      `-ParenExpr 0x558fa8f40fd0 <col:38, col:40> 'expdesc *'
        `-UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
          `-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.49] (ImplicitCastExpr, LValueToRValue, int)
  51: ArraySubscriptExpr 0x558fa8f410c8 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x558fa8f41098 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x558fa8f40f50 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|   `-ImplicitCastExpr 0x558fa8f40f38 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f40f00 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|       `-ImplicitCastExpr 0x558fa8f40ee8 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f410b0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f41060 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
    `-MemberExpr 0x558fa8f41028 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
      `-MemberExpr 0x558fa8f40ff0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
        `-ParenExpr 0x558fa8f40fd0 <col:38, col:40> 'expdesc *'
          `-UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
            `-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B6.44][[B6.50]]
  52: BinaryOperator 0x558fa8f41978 <./lopcodes.h:81:26, line:82:57> 'Instruction':'unsigned int' '='
|-ParenExpr 0x558fa8f41110 <line:81:26, col:28> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x558fa8f410f0 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x558fa8f410c8 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x558fa8f41098 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x558fa8f40f50 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
|     |   `-ImplicitCastExpr 0x558fa8f40f38 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x558fa8f40f00 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
|     |       `-ImplicitCastExpr 0x558fa8f40ee8 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x558fa8f40ec8 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x558fa8f40ea0 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x558fa8f410b0 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x558fa8f41060 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
|         `-MemberExpr 0x558fa8f41028 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|           `-MemberExpr 0x558fa8f40ff0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|             `-ParenExpr 0x558fa8f40fd0 <col:38, col:40> 'expdesc *'
|               `-UnaryOperator 0x558fa8f40fb0 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
|                 `-DeclRefExpr 0x558fa8f40f88 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
`-ParenExpr 0x558fa8f41958 <./lopcodes.h:81:32, line:82:57> 'unsigned int'
  `-BinaryOperator 0x558fa8f41930 <line:81:33, line:82:56> 'unsigned int' '|'
    |-ParenExpr 0x558fa8f415e8 <line:81:33, col:59> 'unsigned int'
    | `-BinaryOperator 0x558fa8f415c0 <col:34, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x558fa8f415a8 <line:81:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x558fa8f413a0 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x558fa8f41380 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x558fa8f41358 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x558fa8f41328 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x558fa8f411e0 <col:24, col:33> 'Instruction *' lvalue ->code 0x558fa8e8ed28
    |   |       |   `-ImplicitCastExpr 0x558fa8f411c8 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x558fa8f41190 <col:24, col:30> 'Proto *' lvalue ->f 0x558fa8eb3e58
    |   |       |       `-ImplicitCastExpr 0x558fa8f41178 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x558fa8f41158 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x558fa8f41130 <lparser.c:1251:28> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x558fa8f41340 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x558fa8f412f0 <col:38, col:47> 'int' lvalue .info 0x558fa8eb1028
    |   |           `-MemberExpr 0x558fa8f412b8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    |   |             `-MemberExpr 0x558fa8f41280 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    |   |               `-ParenExpr 0x558fa8f41260 <col:38, col:40> 'expdesc *'
    |   |                 `-UnaryOperator 0x558fa8f41240 <lparser.c:1251:31, col:32> 'expdesc *' prefix '&'
    |   |                   `-DeclRefExpr 0x558fa8f41218 <col:32> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
    |   `-ParenExpr 0x558fa8f41588 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x558fa8f41568 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x558fa8f41548 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x558fa8f41520 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x558fa8f414e0 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x558fa8f414c0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x558fa8f414a0 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x558fa8f41478 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x558fa8f41438 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x558fa8f41418 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x558fa8f413f0 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x558fa8f413c0 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x558fa8f41458 <line:42:18> 'int' 6
    |           `-IntegerLiteral 0x558fa8f41500 <line:44:17> 'int' 0
    `-ParenExpr 0x558fa8f41910 <line:82:3, col:56> 'unsigned int'
      `-BinaryOperator 0x558fa8f418e8 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x558fa8f41720 <line:82:4, col:33> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x558fa8f416f8 <./llimits.h:75:22, ./lopcodes.h:44:17> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x558fa8f416b8 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x558fa8f41690 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x558fa8f41670 <col:26, col:30> 'int'
        |   |     `-DeclRefExpr 0x558fa8f41608 <lparser.c:1251:36> 'int' EnumConstant 0x558fa8eafb48 'OP_TAILCALL' 'int'
        |   `-IntegerLiteral 0x558fa8f416d8 <./lopcodes.h:44:17> 'int' 0
        `-ParenExpr 0x558fa8f418c8 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x558fa8f418a0 <col:21, line:44:17> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x558fa8f41860 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x558fa8f41840 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x558fa8f41820 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x558fa8f417f8 <col:24, line:42:18> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x558fa8f417b8 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x558fa8f41798 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x558fa8f41770 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x558fa8f41740 <col:39> 'int' 0
            |       `-IntegerLiteral 0x558fa8f417d8 <line:42:18> 'int' 6
            `-IntegerLiteral 0x558fa8f41880 <line:44:17> 'int' 0
(([B6.51])) = ([B6.38])
  53: IntegerLiteral 0x558fa8f419c0 <./llimits.h:62:31> 'int' 0
0
  54: CStyleCastExpr 0x558fa8f419f0 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x558fa8f419c0 <col:31> 'int' 0
(void)[B6.53] (CStyleCastExpr, ToVoid, void)
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x558fa8f40df0 <lparser.c:1250:27> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
nret
   2: ImplicitCastExpr 0x558fa8f40e38 <lparser.c:1250:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f40df0 <col:27> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
[B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x558fa8f40e18 <lparser.c:1250:35> 'int' 1
1
   4: BinaryOperator 0x558fa8f40e50 <lparser.c:1250:27, col:35> 'int' '=='
|-ImplicitCastExpr 0x558fa8f40e38 <col:27> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f40df0 <col:27> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
`-IntegerLiteral 0x558fa8f40e18 <col:35> 'int' 1
[B7.2] == [B7.3]
   T: if [B8.16] && [B7.4]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
   1: DeclRefExpr 0x558fa8f40b90 <./lcode.h:43:31> 'void (FuncState *, expdesc *, int)' Function 0x558fa8ebc120 'luaK_setreturns' 'void (FuncState *, expdesc *, int)'
luaK_setreturns
   2: ImplicitCastExpr 0x558fa8f40c88 <./lcode.h:43:31> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f40b90 <col:31> 'void (FuncState *, expdesc *, int)' Function 0x558fa8ebc120 'luaK_setreturns' 'void (FuncState *, expdesc *, int)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, int))
   3: DeclRefExpr 0x558fa8f40bb8 <lparser.c:1249:23> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f40ce0 <lparser.c:1249:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f40bb8 <col:23> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f40be0 <lparser.c:1249:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
   6: UnaryOperator 0x558fa8f40c08 <lparser.c:1249:27, col:28> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f40be0 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
&[B8.5]
   7: IntegerLiteral 0x558fa8f40c28 <./lua.h:30:23> 'int' 1
1
   8: UnaryOperator 0x558fa8f40c48 <./lua.h:30:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f40c28 <col:23> 'int' 1
-[B8.7]
   9: CallExpr 0x558fa8f40ca0 <./lcode.h:43:31, col:65> 'void'
|-ImplicitCastExpr 0x558fa8f40c88 <col:31> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f40b90 <col:31> 'void (FuncState *, expdesc *, int)' Function 0x558fa8ebc120 'luaK_setreturns' 'void (FuncState *, expdesc *, int)'
|-ImplicitCastExpr 0x558fa8f40ce0 <lparser.c:1249:23> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f40bb8 <col:23> 'FuncState *' lvalue Var 0x558fa8f400e8 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f40c08 <col:27, col:28> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f40be0 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
`-ParenExpr 0x558fa8f40c68 <./lua.h:30:21, col:24> 'int'
  `-UnaryOperator 0x558fa8f40c48 <col:22, col:23> 'int' prefix '-'
    `-IntegerLiteral 0x558fa8f40c28 <col:23> 'int' 1
[B8.2]([B8.4], [B8.6], ([B8.8]))
  10: DeclRefExpr 0x558fa8f40cf8 <lparser.c:1250:11> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
  11: MemberExpr 0x558fa8f40d20 <lparser.c:1250:11, col:13> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f40cf8 <col:11> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B8.10].k
  12: ImplicitCastExpr 0x558fa8f40d80 <lparser.c:1250:11, col:13> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f40d20 <col:11, col:13> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-DeclRefExpr 0x558fa8f40cf8 <col:11> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B8.11] (ImplicitCastExpr, LValueToRValue, expkind)
  13: ImplicitCastExpr 0x558fa8f40d98 <lparser.c:1250:11, col:13> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f40d80 <col:11, col:13> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f40d20 <col:11, col:13> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f40cf8 <col:11> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B8.12] (ImplicitCastExpr, IntegralCast, unsigned int)
  14: DeclRefExpr 0x558fa8f40d58 <lparser.c:1250:18> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
VCALL
  15: ImplicitCastExpr 0x558fa8f40db0 <lparser.c:1250:18> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f40d58 <col:18> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B8.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: BinaryOperator 0x558fa8f40dc8 <lparser.c:1250:11, col:18> 'int' '=='
|-ImplicitCastExpr 0x558fa8f40d98 <col:11, col:13> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f40d80 <col:11, col:13> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x558fa8f40d20 <col:11, col:13> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|     `-DeclRefExpr 0x558fa8f40cf8 <col:11> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f40db0 <col:18> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f40d58 <col:18> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B8.13] == [B8.15]
   T: [B8.16] && ...
   Preds (2): B9 B10
   Succs (2): B7 B5

 [B9]
   1: DeclRefExpr 0x558fa8f40a30 <lparser.c:1248:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
   2: MemberExpr 0x558fa8f40a58 <lparser.c:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f40a30 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B9.1].k
   3: ImplicitCastExpr 0x558fa8f40ad8 <lparser.c:30:41, col:43> 'expkind':'expkind' <LValueToRValue>
`-ParenExpr 0x558fa8f40a90 <col:41, col:43> 'expkind':'expkind' lvalue
  `-MemberExpr 0x558fa8f40a58 <line:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f40a30 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
([B9.2]) (ImplicitCastExpr, LValueToRValue, expkind)
   4: ImplicitCastExpr 0x558fa8f40af0 <lparser.c:30:41, col:43> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f40ad8 <col:41, col:43> 'expkind':'expkind' <LValueToRValue>
  `-ParenExpr 0x558fa8f40a90 <col:41, col:43> 'expkind':'expkind' lvalue
    `-MemberExpr 0x558fa8f40a58 <line:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
      `-DeclRefExpr 0x558fa8f40a30 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B9.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: DeclRefExpr 0x558fa8f40ab0 <lparser.c:30:48> 'int' EnumConstant 0x558fa8eb0c80 'VVARARG' 'int'
VVARARG
   6: ImplicitCastExpr 0x558fa8f40b08 <lparser.c:30:48> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f40ab0 <col:48> 'int' EnumConstant 0x558fa8eb0c80 'VVARARG' 'int'
[B9.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: BinaryOperator 0x558fa8f40b20 <lparser.c:30:41, col:48> 'int' '=='
|-ImplicitCastExpr 0x558fa8f40af0 <col:41, col:43> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f40ad8 <col:41, col:43> 'expkind':'expkind' <LValueToRValue>
|   `-ParenExpr 0x558fa8f40a90 <col:41, col:43> 'expkind':'expkind' lvalue
|     `-MemberExpr 0x558fa8f40a58 <line:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|       `-DeclRefExpr 0x558fa8f40a30 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f40b08 <line:30:48> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f40ab0 <col:48> 'int' EnumConstant 0x558fa8eb0c80 'VVARARG' 'int'
[B9.4] == [B9.6]
   T: if ([B10.16] || [B9.7])
   Preds (1): B10
   Succs (2): B8 B4

 [B10]
   1: DeclRefExpr 0x558fa8f407c0 <lparser.c:1247:12> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
explist1
   2: ImplicitCastExpr 0x558fa8f40858 <lparser.c:1247:12> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f407c0 <col:12> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f407e8 <lparser.c:1247:21> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f408a8 <lparser.c:1247:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f407e8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f40810 <lparser.c:1247:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
   6: UnaryOperator 0x558fa8f40838 <lparser.c:1247:25, col:26> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f40810 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
&[B10.5]
   7: CallExpr 0x558fa8f40870 <lparser.c:1247:12, col:27> 'int'
|-ImplicitCastExpr 0x558fa8f40858 <col:12> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f407c0 <col:12> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f408a8 <col:21> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f407e8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f40838 <col:25, col:26> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f40810 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B10.2]([B10.4], [B10.6])
   8: DeclRefExpr 0x558fa8f40798 <lparser.c:1247:5> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
nret
   9: BinaryOperator 0x558fa8f408c0 <lparser.c:1247:5, col:27> 'int' '='
|-DeclRefExpr 0x558fa8f40798 <col:5> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
`-CallExpr 0x558fa8f40870 <col:12, col:27> 'int'
  |-ImplicitCastExpr 0x558fa8f40858 <col:12> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f407c0 <col:12> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8f408a8 <col:21> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f407e8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
  `-UnaryOperator 0x558fa8f40838 <col:25, col:26> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f40810 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B10.8] = [B10.7]
  10: DeclRefExpr 0x558fa8f408e8 <lparser.c:1248:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
e
  11: MemberExpr 0x558fa8f40940 <lparser.c:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f408e8 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B10.10].k
  12: ImplicitCastExpr 0x558fa8f409c0 <lparser.c:30:25, col:27> 'expkind':'expkind' <LValueToRValue>
`-ParenExpr 0x558fa8f40978 <col:25, col:27> 'expkind':'expkind' lvalue
  `-MemberExpr 0x558fa8f40940 <line:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f408e8 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
([B10.11]) (ImplicitCastExpr, LValueToRValue, expkind)
  13: ImplicitCastExpr 0x558fa8f409d8 <lparser.c:30:25, col:27> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f409c0 <col:25, col:27> 'expkind':'expkind' <LValueToRValue>
  `-ParenExpr 0x558fa8f40978 <col:25, col:27> 'expkind':'expkind' lvalue
    `-MemberExpr 0x558fa8f40940 <line:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
      `-DeclRefExpr 0x558fa8f408e8 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
[B10.12] (ImplicitCastExpr, IntegralCast, unsigned int)
  14: DeclRefExpr 0x558fa8f40998 <lparser.c:30:32> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
VCALL
  15: ImplicitCastExpr 0x558fa8f409f0 <lparser.c:30:32> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f40998 <col:32> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B10.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: BinaryOperator 0x558fa8f40a08 <lparser.c:30:25, col:32> 'int' '=='
|-ImplicitCastExpr 0x558fa8f409d8 <col:25, col:27> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f409c0 <col:25, col:27> 'expkind':'expkind' <LValueToRValue>
|   `-ParenExpr 0x558fa8f40978 <col:25, col:27> 'expkind':'expkind' lvalue
|     `-MemberExpr 0x558fa8f40940 <line:1248:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|       `-DeclRefExpr 0x558fa8f408e8 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f40200 'e' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f409f0 <line:30:32> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f40998 <col:32> 'int' EnumConstant 0x558fa8eb0c38 'VCALL' 'int'
[B10.13] == [B10.15]
   T: [B10.16] || ...
   Preds (1): B12
   Succs (2): B8 B9

 [B11]
   1: IntegerLiteral 0x558fa8f40728 <lparser.c:1245:20> 'int' 0
0
   2: DeclRefExpr 0x558fa8f40700 <lparser.c:1245:13> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
nret
   3: BinaryOperator 0x558fa8f40748 <lparser.c:1245:13, col:20> 'int' '='
|-DeclRefExpr 0x558fa8f40700 <col:13> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
`-IntegerLiteral 0x558fa8f40728 <col:20> 'int' 0
[B11.2] = [B11.1]
   4: DeclRefExpr 0x558fa8f406d8 <lparser.c:1245:5> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
first
   5: BinaryOperator 0x558fa8f40770 <lparser.c:1245:5, col:20> 'int' '='
|-DeclRefExpr 0x558fa8f406d8 <col:5> 'int' lvalue Var 0x558fa8f40290 'first' 'int'
`-BinaryOperator 0x558fa8f40748 <col:13, col:20> 'int' '='
  |-DeclRefExpr 0x558fa8f40700 <col:13> 'int' lvalue Var 0x558fa8f40308 'nret' 'int'
  `-IntegerLiteral 0x558fa8f40728 <col:20> 'int' 0
[B11.4] = [B11.3]
   Preds (2): B12 B13
   Succs (1): B1

 [B12]
   1: DeclRefExpr 0x558fa8f405a8 <lparser.c:1244:36> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f405d0 <lparser.c:1244:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f405a8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B12.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f405e8 <lparser.c:1244:36, col:40> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f405d0 <col:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f405a8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B12.2]->t
   4: MemberExpr 0x558fa8f40620 <lparser.c:1244:36, col:42> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f405e8 <col:36, col:40> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f405d0 <col:36> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f405a8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B12.3].token
   5: ImplicitCastExpr 0x558fa8f40670 <lparser.c:1244:36, col:42> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f40620 <col:36, col:42> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f405e8 <col:36, col:40> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f405d0 <col:36> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f405a8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B12.4] (ImplicitCastExpr, LValueToRValue, int)
   6: CharacterLiteral 0x558fa8f40658 <lparser.c:1244:51> 'int' 59
';'
   7: BinaryOperator 0x558fa8f40688 <lparser.c:1244:36, col:51> 'int' '=='
|-ImplicitCastExpr 0x558fa8f40670 <col:36, col:42> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f40620 <col:36, col:42> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f405e8 <col:36, col:40> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f405d0 <col:36> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f405a8 <col:36> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f40658 <col:51> 'int' 59
[B12.5] == [B12.6]
   T: if [B13.21] || [B12.7]
   Preds (1): B13
   Succs (2): B11 B10

 [B13]
   1: DeclRefExpr 0x558fa8f40148 <lparser.c:1240:19> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f40170 <lparser.c:1240:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f40148 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f40188 <lparser.c:1240:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f40170 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f40148 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.2]->fs
   4: ImplicitCastExpr 0x558fa8f401c0 <lparser.c:1240:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f40188 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f40170 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f40148 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f401d8 <lparser.c:1240:3, col:25>col:14
`-VarDecl 0x558fa8f400e8 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f401c0 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f40188 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f40170 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f40148 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f40260 <lparser.c:1241:3, col:12>col:11
`-VarDecl 0x558fa8f40200 <col:3, col:11> col:11 used e 'expdesc':'struct expdesc'
expdesc e;
   7: DeclStmt 0x558fa8f4a3f8 <lparser.c:1242:7>col:7
`-VarDecl 0x558fa8f40290 <col:3, col:7> col:7 used first 'int'
int first;
   8: DeclStmt 0x558fa8f4a3e0 <lparser.c:1242:14>col:14
`-VarDecl 0x558fa8f40308 <col:3, col:14> col:14 used nret 'int'
int nret;
   9: DeclRefExpr 0x558fa8f40398 <lparser.c:1243:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
  10: ImplicitCastExpr 0x558fa8f403e8 <lparser.c:1243:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f40398 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B13.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  11: DeclRefExpr 0x558fa8f403c0 <lparser.c:1243:13> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x558fa8f40430 <lparser.c:1243:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f403c0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: CallExpr 0x558fa8f40400 <lparser.c:1243:3, col:15> 'void'
|-ImplicitCastExpr 0x558fa8f403e8 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f40398 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f40430 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f403c0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.10]([B13.12])
  14: DeclRefExpr 0x558fa8f40448 <lparser.c:1244:7> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
block_follow
  15: ImplicitCastExpr 0x558fa8f40548 <lparser.c:1244:7> 'int (*)(int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f40448 <col:7> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
[B13.14] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
  16: DeclRefExpr 0x558fa8f40470 <lparser.c:1244:20> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
ls
  17: ImplicitCastExpr 0x558fa8f40498 <lparser.c:1244:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f40470 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.16] (ImplicitCastExpr, LValueToRValue, LexState *)
  18: MemberExpr 0x558fa8f404b0 <lparser.c:1244:20, col:24> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f40498 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f40470 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.17]->t
  19: MemberExpr 0x558fa8f404e8 <lparser.c:1244:20, col:26> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f404b0 <col:20, col:24> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f40498 <col:20> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f40470 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.18].token
  20: ImplicitCastExpr 0x558fa8f40590 <lparser.c:1244:20, col:26> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f404e8 <col:20, col:26> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f404b0 <col:20, col:24> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f40498 <col:20> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f40470 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.19] (ImplicitCastExpr, LValueToRValue, int)
  21: CallExpr 0x558fa8f40560 <lparser.c:1244:7, col:31> 'int'
|-ImplicitCastExpr 0x558fa8f40548 <col:7> 'int (*)(int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f40448 <col:7> 'int (int)' Function 0x558fa8f2a1e0 'block_follow' 'int (int)'
`-ImplicitCastExpr 0x558fa8f40590 <col:20, col:26> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f404e8 <col:20, col:26> 'int' lvalue .token 0x558fa8e9ec88
    `-MemberExpr 0x558fa8f404b0 <col:20, col:24> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
      `-ImplicitCastExpr 0x558fa8f40498 <col:20> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f40470 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f3ffa8 'ls' 'LexState *'
[B13.15]([B13.20])
   T: [B13.21] || ...
   Preds (1): B14
   Succs (2): B11 B12

 [B0 (EXIT)]
   Preds (1): B1
