static void assignment(LexState *ls, struct LHS_assign *lh, int nvars)
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: DeclRefExpr 0x558fa8f2ebc8 <lparser.c:960:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
init_exp
   2: ImplicitCastExpr 0x558fa8f2ed88 <lparser.c:960:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2ebc8 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(expdesc *, expkind, int))
   3: DeclRefExpr 0x558fa8f2ebf0 <lparser.c:960:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
e
   4: UnaryOperator 0x558fa8f2ec18 <lparser.c:960:12, col:13> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2ebf0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
&[B1.3]
   5: DeclRefExpr 0x558fa8f2ec38 <lparser.c:960:16> 'int' EnumConstant 0x558fa8eb0bf0 'VNONRELOC' 'int'
VNONRELOC
   6: ImplicitCastExpr 0x558fa8f2ede0 <lparser.c:960:16> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f2ec38 <col:16> 'int' EnumConstant 0x558fa8eb0bf0 'VNONRELOC' 'int'
[B1.5] (ImplicitCastExpr, IntegralCast, expkind)
   7: DeclRefExpr 0x558fa8f2ec60 <lparser.c:960:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f2ec88 <lparser.c:960:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: MemberExpr 0x558fa8f2eca0 <lparser.c:960:27, col:31> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2ec88 <col:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.8]->fs
  10: ImplicitCastExpr 0x558fa8f2ecd8 <lparser.c:960:27, col:31> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2eca0 <col:27, col:31> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2ec88 <col:27> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  11: MemberExpr 0x558fa8f2ecf0 <lparser.c:960:27, col:35> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f2ecd8 <col:27, col:31> 'struct FuncState *' <LValueToRValue>
  `-MemberExpr 0x558fa8f2eca0 <col:27, col:31> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
    `-ImplicitCastExpr 0x558fa8f2ec88 <col:27> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.10]->freereg
  12: ImplicitCastExpr 0x558fa8f2ed48 <lparser.c:960:27, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f2ecf0 <col:27, col:35> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f2ecd8 <col:27, col:31> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f2eca0 <col:27, col:31> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f2ec88 <col:27> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: IntegerLiteral 0x558fa8f2ed28 <lparser.c:960:43> 'int' 1
1
  14: BinaryOperator 0x558fa8f2ed60 <lparser.c:960:27, col:43> 'int' '-'
|-ImplicitCastExpr 0x558fa8f2ed48 <col:27, col:35> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f2ecf0 <col:27, col:35> 'int' lvalue ->freereg 0x558fa8eb42f0
|   `-ImplicitCastExpr 0x558fa8f2ecd8 <col:27, col:31> 'struct FuncState *' <LValueToRValue>
|     `-MemberExpr 0x558fa8f2eca0 <col:27, col:31> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|       `-ImplicitCastExpr 0x558fa8f2ec88 <col:27> 'LexState *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-IntegerLiteral 0x558fa8f2ed28 <col:43> 'int' 1
[B1.12] - [B1.13]
  15: CallExpr 0x558fa8f2eda0 <lparser.c:960:3, col:44> 'void'
|-ImplicitCastExpr 0x558fa8f2ed88 <col:3> 'void (*)(expdesc *, expkind, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2ebc8 <col:3> 'void (expdesc *, expkind, int)' Function 0x558fa8eef950 'init_exp' 'void (expdesc *, expkind, int)'
|-UnaryOperator 0x558fa8f2ec18 <col:12, col:13> 'expdesc *' prefix '&'
| `-DeclRefExpr 0x558fa8f2ebf0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
|-ImplicitCastExpr 0x558fa8f2ede0 <col:16> 'expkind':'expkind' <IntegralCast>
| `-DeclRefExpr 0x558fa8f2ec38 <col:16> 'int' EnumConstant 0x558fa8eb0bf0 'VNONRELOC' 'int'
`-BinaryOperator 0x558fa8f2ed60 <col:27, col:43> 'int' '-'
  |-ImplicitCastExpr 0x558fa8f2ed48 <col:27, col:35> 'int' <LValueToRValue>
  | `-MemberExpr 0x558fa8f2ecf0 <col:27, col:35> 'int' lvalue ->freereg 0x558fa8eb42f0
  |   `-ImplicitCastExpr 0x558fa8f2ecd8 <col:27, col:31> 'struct FuncState *' <LValueToRValue>
  |     `-MemberExpr 0x558fa8f2eca0 <col:27, col:31> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  |       `-ImplicitCastExpr 0x558fa8f2ec88 <col:27> 'LexState *' <LValueToRValue>
  |         `-DeclRefExpr 0x558fa8f2ec60 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
  `-IntegerLiteral 0x558fa8f2ed28 <col:43> 'int' 1
[B1.2]([B1.4], [B1.6], [B1.14])
  16: DeclRefExpr 0x558fa8f2edf8 <lparser.c:961:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
luaK_storevar
  17: ImplicitCastExpr 0x558fa8f2ef78 <lparser.c:961:3> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2edf8 <col:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
[B1.16] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, expdesc *))
  18: DeclRefExpr 0x558fa8f2ee20 <lparser.c:961:17> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
  19: ImplicitCastExpr 0x558fa8f2ee48 <lparser.c:961:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2ee20 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.18] (ImplicitCastExpr, LValueToRValue, LexState *)
  20: MemberExpr 0x558fa8f2ee60 <lparser.c:961:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2ee48 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2ee20 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.19]->fs
  21: ImplicitCastExpr 0x558fa8f2efd0 <lparser.c:961:17, col:21> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2ee60 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2ee48 <col:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2ee20 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B1.20] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  22: DeclRefExpr 0x558fa8f2ee98 <lparser.c:961:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
lh
  23: ImplicitCastExpr 0x558fa8f2eec0 <lparser.c:961:26> 'struct LHS_assign *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2ee98 <col:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B1.22] (ImplicitCastExpr, LValueToRValue, struct LHS_assign *)
  24: MemberExpr 0x558fa8f2eed8 <lparser.c:961:26, col:30> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
`-ImplicitCastExpr 0x558fa8f2eec0 <col:26> 'struct LHS_assign *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2ee98 <col:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B1.23]->v
  25: UnaryOperator 0x558fa8f2ef10 <lparser.c:961:25, col:30> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f2eed8 <col:26, col:30> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
  `-ImplicitCastExpr 0x558fa8f2eec0 <col:26> 'struct LHS_assign *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2ee98 <col:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
&[B1.24]
  26: DeclRefExpr 0x558fa8f2ef30 <lparser.c:961:34> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
e
  27: UnaryOperator 0x558fa8f2ef58 <lparser.c:961:33, col:34> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2ef30 <col:34> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
&[B1.26]
  28: CallExpr 0x558fa8f2ef90 <lparser.c:961:3, col:35> 'void'
|-ImplicitCastExpr 0x558fa8f2ef78 <col:3> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2edf8 <col:3> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2efd0 <col:17, col:21> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f2ee60 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f2ee48 <col:17> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2ee20 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f2ef10 <col:25, col:30> 'expdesc *' prefix '&'
| `-MemberExpr 0x558fa8f2eed8 <col:26, col:30> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
|   `-ImplicitCastExpr 0x558fa8f2eec0 <col:26> 'struct LHS_assign *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2ee98 <col:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
`-UnaryOperator 0x558fa8f2ef58 <col:33, col:34> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2ef30 <col:34> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
[B1.17]([B1.21], [B1.25], [B1.27])
   Preds (3): B3 B4 B6
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f2e7a8 <lparser.c:955:7> 'void (FuncState *, expdesc *)' Function 0x558fa8ebd380 'luaK_setoneret' 'void (FuncState *, expdesc *)'
luaK_setoneret
   2: ImplicitCastExpr 0x558fa8f2e890 <lparser.c:955:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2e7a8 <col:7> 'void (FuncState *, expdesc *)' Function 0x558fa8ebd380 'luaK_setoneret' 'void (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x558fa8f2e7d0 <lparser.c:955:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2e7f8 <lparser.c:955:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e7d0 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f2e810 <lparser.c:955:22, col:26> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2e7f8 <col:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e7d0 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B2.4]->fs
   6: ImplicitCastExpr 0x558fa8f2e8e0 <lparser.c:955:22, col:26> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2e810 <col:22, col:26> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2e7f8 <col:22> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2e7d0 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B2.5] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   7: DeclRefExpr 0x558fa8f2e848 <lparser.c:955:31> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
e
   8: UnaryOperator 0x558fa8f2e870 <lparser.c:955:30, col:31> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2e848 <col:31> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
&[B2.7]
   9: CallExpr 0x558fa8f2e8a8 <lparser.c:955:7, col:32> 'void'
|-ImplicitCastExpr 0x558fa8f2e890 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2e7a8 <col:7> 'void (FuncState *, expdesc *)' Function 0x558fa8ebd380 'luaK_setoneret' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2e8e0 <col:22, col:26> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f2e810 <col:22, col:26> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f2e7f8 <col:22> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2e7d0 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f2e870 <col:30, col:31> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2e848 <col:31> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
[B2.2]([B2.6], [B2.8])
  10: DeclRefExpr 0x558fa8f2e8f8 <lparser.c:956:7> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
luaK_storevar
  11: ImplicitCastExpr 0x558fa8f2ea78 <lparser.c:956:7> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2e8f8 <col:7> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
[B2.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, expdesc *))
  12: DeclRefExpr 0x558fa8f2e920 <lparser.c:956:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
  13: ImplicitCastExpr 0x558fa8f2e948 <lparser.c:956:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e920 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B2.12] (ImplicitCastExpr, LValueToRValue, LexState *)
  14: MemberExpr 0x558fa8f2e960 <lparser.c:956:21, col:25> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2e948 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e920 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B2.13]->fs
  15: ImplicitCastExpr 0x558fa8f2ead0 <lparser.c:956:21, col:25> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2e960 <col:21, col:25> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2e948 <col:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2e920 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B2.14] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  16: DeclRefExpr 0x558fa8f2e998 <lparser.c:956:30> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
lh
  17: ImplicitCastExpr 0x558fa8f2e9c0 <lparser.c:956:30> 'struct LHS_assign *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e998 <col:30> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B2.16] (ImplicitCastExpr, LValueToRValue, struct LHS_assign *)
  18: MemberExpr 0x558fa8f2e9d8 <lparser.c:956:30, col:34> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
`-ImplicitCastExpr 0x558fa8f2e9c0 <col:30> 'struct LHS_assign *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e998 <col:30> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B2.17]->v
  19: UnaryOperator 0x558fa8f2ea10 <lparser.c:956:29, col:34> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f2e9d8 <col:30, col:34> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
  `-ImplicitCastExpr 0x558fa8f2e9c0 <col:30> 'struct LHS_assign *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2e998 <col:30> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
&[B2.18]
  20: DeclRefExpr 0x558fa8f2ea30 <lparser.c:956:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
e
  21: UnaryOperator 0x558fa8f2ea58 <lparser.c:956:37, col:38> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2ea30 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
&[B2.20]
  22: CallExpr 0x558fa8f2ea90 <lparser.c:956:7, col:39> 'void'
|-ImplicitCastExpr 0x558fa8f2ea78 <col:7> 'void (*)(FuncState *, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2e8f8 <col:7> 'void (FuncState *, expdesc *, expdesc *)' Function 0x558fa8ebbdc8 'luaK_storevar' 'void (FuncState *, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2ead0 <col:21, col:25> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f2e960 <col:21, col:25> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f2e948 <col:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2e920 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f2ea10 <col:29, col:34> 'expdesc *' prefix '&'
| `-MemberExpr 0x558fa8f2e9d8 <col:30, col:34> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
|   `-ImplicitCastExpr 0x558fa8f2e9c0 <col:30> 'struct LHS_assign *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2e998 <col:30> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
`-UnaryOperator 0x558fa8f2ea58 <col:37, col:38> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2ea30 <col:38> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
[B2.11]([B2.15], [B2.19], [B2.21])
  23: ReturnStmt 0x558fa8f2eae8 <lparser.c:957:7>
return;
   Preds (1): B5
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x558fa8f2e5a8 <lparser.c:952:9> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f2e5d0 <lparser.c:952:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e5a8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f2e5e8 <lparser.c:952:9, col:13> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2e5d0 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e5a8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B3.2]->fs
   4: ImplicitCastExpr 0x558fa8f2e620 <lparser.c:952:9, col:13> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2e5e8 <col:9, col:13> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2e5d0 <col:9> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2e5a8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: MemberExpr 0x558fa8f2e638 <lparser.c:952:9, col:17> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f2e620 <col:9, col:13> 'struct FuncState *' <LValueToRValue>
  `-MemberExpr 0x558fa8f2e5e8 <col:9, col:13> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
    `-ImplicitCastExpr 0x558fa8f2e5d0 <col:9> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2e5a8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B3.4]->freereg
   6: DeclRefExpr 0x558fa8f2e670 <lparser.c:952:28> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
nexps
   7: ImplicitCastExpr 0x558fa8f2e6c0 <lparser.c:952:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e670 <col:28> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
[B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x558fa8f2e698 <lparser.c:952:36> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
nvars
   9: ImplicitCastExpr 0x558fa8f2e6d8 <lparser.c:952:36> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e698 <col:36> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: BinaryOperator 0x558fa8f2e6f0 <lparser.c:952:28, col:36> 'int' '-'
|-ImplicitCastExpr 0x558fa8f2e6c0 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e670 <col:28> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
`-ImplicitCastExpr 0x558fa8f2e6d8 <col:36> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e698 <col:36> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B3.7] - [B3.9]
  11: CompoundAssignOperator 0x558fa8f2e718 <lparser.c:952:9, col:36> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|-MemberExpr 0x558fa8f2e638 <col:9, col:17> 'int' lvalue ->freereg 0x558fa8eb42f0
| `-ImplicitCastExpr 0x558fa8f2e620 <col:9, col:13> 'struct FuncState *' <LValueToRValue>
|   `-MemberExpr 0x558fa8f2e5e8 <col:9, col:13> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|     `-ImplicitCastExpr 0x558fa8f2e5d0 <col:9> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f2e5a8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-BinaryOperator 0x558fa8f2e6f0 <col:28, col:36> 'int' '-'
  |-ImplicitCastExpr 0x558fa8f2e6c0 <col:28> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f2e670 <col:28> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
  `-ImplicitCastExpr 0x558fa8f2e6d8 <col:36> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2e698 <col:36> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B3.5] -= [B3.10]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x558fa8f2e310 <lparser.c:950:7> 'void (LexState *, int, int, expdesc *)' Function 0x558fa8efeab0 'adjust_assign' 'void (LexState *, int, int, expdesc *)'
adjust_assign
   2: ImplicitCastExpr 0x558fa8f2e458 <lparser.c:950:7> 'void (*)(LexState *, int, int, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2e310 <col:7> 'void (LexState *, int, int, expdesc *)' Function 0x558fa8efeab0 'adjust_assign' 'void (LexState *, int, int, expdesc *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, expdesc *))
   3: DeclRefExpr 0x558fa8f2e338 <lparser.c:950:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2e4b8 <lparser.c:950:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e338 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f2e360 <lparser.c:950:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
nvars
   6: ImplicitCastExpr 0x558fa8f2e4d0 <lparser.c:950:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e360 <col:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x558fa8f2e388 <lparser.c:950:32> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
nexps
   8: ImplicitCastExpr 0x558fa8f2e4e8 <lparser.c:950:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e388 <col:32> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
[B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x558fa8f2e3b0 <lparser.c:950:40> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
e
  10: UnaryOperator 0x558fa8f2e3d8 <lparser.c:950:39, col:40> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2e3b0 <col:40> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
&[B4.9]
  11: CallExpr 0x558fa8f2e470 <lparser.c:950:7, col:41> 'void'
|-ImplicitCastExpr 0x558fa8f2e458 <col:7> 'void (*)(LexState *, int, int, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2e310 <col:7> 'void (LexState *, int, int, expdesc *)' Function 0x558fa8efeab0 'adjust_assign' 'void (LexState *, int, int, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2e4b8 <col:21> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e338 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f2e4d0 <col:25> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e360 <col:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
|-ImplicitCastExpr 0x558fa8f2e4e8 <col:32> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e388 <col:32> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
`-UnaryOperator 0x558fa8f2e3d8 <col:39, col:40> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2e3b0 <col:40> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
[B4.2]([B4.4], [B4.6], [B4.8], [B4.10])
  12: DeclRefExpr 0x558fa8f2e500 <lparser.c:951:11> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
nexps
  13: ImplicitCastExpr 0x558fa8f2e550 <lparser.c:951:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e500 <col:11> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
[B4.12] (ImplicitCastExpr, LValueToRValue, int)
  14: DeclRefExpr 0x558fa8f2e528 <lparser.c:951:19> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
nvars
  15: ImplicitCastExpr 0x558fa8f2e568 <lparser.c:951:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e528 <col:19> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B4.14] (ImplicitCastExpr, LValueToRValue, int)
  16: BinaryOperator 0x558fa8f2e580 <lparser.c:951:11, col:19> 'int' '>'
|-ImplicitCastExpr 0x558fa8f2e550 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e500 <col:11> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
`-ImplicitCastExpr 0x558fa8f2e568 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e528 <col:19> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B4.13] > [B4.15]
   T: if [B4.16]
   Preds (1): B5
   Succs (2): B3 B1

 [B5]
   1: DeclStmt 0x558fa8f2e030 <lparser.c:946:5, col:14>col:9
`-VarDecl 0x558fa8f2dfd0 <col:5, col:9> col:9 used nexps 'int'
int nexps;
   2: DeclRefExpr 0x558fa8f2e048 <lparser.c:947:5> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
   3: ImplicitCastExpr 0x558fa8f2e0b0 <lparser.c:947:5> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2e048 <col:5> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B5.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   4: DeclRefExpr 0x558fa8f2e070 <lparser.c:947:15> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   5: ImplicitCastExpr 0x558fa8f2e100 <lparser.c:947:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e070 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B5.4] (ImplicitCastExpr, LValueToRValue, LexState *)
   6: CharacterLiteral 0x558fa8f2e098 <lparser.c:947:19> 'int' 61
'='
   7: CallExpr 0x558fa8f2e0c8 <lparser.c:947:5, col:22> 'void'
|-ImplicitCastExpr 0x558fa8f2e0b0 <col:5> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2e048 <col:5> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f2e100 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e070 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f2e098 <col:19> 'int' 61
[B5.3]([B5.5], [B5.6])
   8: DeclRefExpr 0x558fa8f2e140 <lparser.c:948:13> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
explist1
   9: ImplicitCastExpr 0x558fa8f2e1d8 <lparser.c:948:13> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2e140 <col:13> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
[B5.8] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, expdesc *))
  10: DeclRefExpr 0x558fa8f2e168 <lparser.c:948:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x558fa8f2e228 <lparser.c:948:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e168 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B5.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: DeclRefExpr 0x558fa8f2e190 <lparser.c:948:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
e
  13: UnaryOperator 0x558fa8f2e1b8 <lparser.c:948:26, col:27> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2e190 <col:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
&[B5.12]
  14: CallExpr 0x558fa8f2e1f0 <lparser.c:948:13, col:28> 'int'
|-ImplicitCastExpr 0x558fa8f2e1d8 <col:13> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2e140 <col:13> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2e228 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e168 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f2e1b8 <col:26, col:27> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2e190 <col:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
[B5.9]([B5.11], [B5.13])
  15: DeclRefExpr 0x558fa8f2e118 <lparser.c:948:5> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
nexps
  16: BinaryOperator 0x558fa8f2e240 <lparser.c:948:5, col:28> 'int' '='
|-DeclRefExpr 0x558fa8f2e118 <col:5> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
`-CallExpr 0x558fa8f2e1f0 <col:13, col:28> 'int'
  |-ImplicitCastExpr 0x558fa8f2e1d8 <col:13> 'int (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f2e140 <col:13> 'int (LexState *, expdesc *)' Function 0x558fa8f1e988 'explist1' 'int (LexState *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8f2e228 <col:22> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f2e168 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
  `-UnaryOperator 0x558fa8f2e1b8 <col:26, col:27> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f2e190 <col:27> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2cc68 'e' 'expdesc':'struct expdesc'
[B5.15] = [B5.14]
  17: DeclRefExpr 0x558fa8f2e268 <lparser.c:949:9> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
nexps
  18: ImplicitCastExpr 0x558fa8f2e2b8 <lparser.c:949:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e268 <col:9> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
[B5.17] (ImplicitCastExpr, LValueToRValue, int)
  19: DeclRefExpr 0x558fa8f2e290 <lparser.c:949:18> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
nvars
  20: ImplicitCastExpr 0x558fa8f2e2d0 <lparser.c:949:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2e290 <col:18> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B5.19] (ImplicitCastExpr, LValueToRValue, int)
  21: BinaryOperator 0x558fa8f2e2e8 <lparser.c:949:9, col:18> 'int' '!='
|-ImplicitCastExpr 0x558fa8f2e2b8 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2e268 <col:9> 'int' lvalue Var 0x558fa8f2dfd0 'nexps' 'int'
`-ImplicitCastExpr 0x558fa8f2e2d0 <col:18> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2e290 <col:18> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B5.18] != [B5.20]
   T: if [B5.21]
   Preds (1): B11
   Succs (2): B4 B2

 [B6]
   1: DeclRefExpr 0x558fa8f2dd78 <lparser.c:943:5> 'void (LexState *, struct LHS_assign *, int)' Function 0x558fa8f2cba0 'assignment' 'void (LexState *, struct LHS_assign *, int)'
assignment
   2: ImplicitCastExpr 0x558fa8f2df08 <lparser.c:943:5> 'void (*)(LexState *, struct LHS_assign *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2dd78 <col:5> 'void (LexState *, struct LHS_assign *, int)' Function 0x558fa8f2cba0 'assignment' 'void (LexState *, struct LHS_assign *, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct LHS_assign *, int))
   3: DeclRefExpr 0x558fa8f2dda0 <lparser.c:943:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2df60 <lparser.c:943:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2dda0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f2ddc8 <lparser.c:943:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
nv
   6: UnaryOperator 0x558fa8f2ddf0 <lparser.c:943:20, col:21> 'struct LHS_assign *' prefix '&'
`-DeclRefExpr 0x558fa8f2ddc8 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
&[B6.5]
   7: DeclRefExpr 0x558fa8f2de10 <lparser.c:943:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
nvars
   8: ImplicitCastExpr 0x558fa8f2de58 <lparser.c:943:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2de10 <col:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
[B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x558fa8f2de38 <lparser.c:943:31> 'int' 1
1
  10: BinaryOperator 0x558fa8f2de70 <lparser.c:943:25, col:31> 'int' '+'
|-ImplicitCastExpr 0x558fa8f2de58 <col:25> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2de10 <col:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
`-IntegerLiteral 0x558fa8f2de38 <col:31> 'int' 1
[B6.8] + [B6.9]
  11: CallExpr 0x558fa8f2df20 <lparser.c:943:5, col:32> 'void'
|-ImplicitCastExpr 0x558fa8f2df08 <col:5> 'void (*)(LexState *, struct LHS_assign *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2dd78 <col:5> 'void (LexState *, struct LHS_assign *, int)' Function 0x558fa8f2cba0 'assignment' 'void (LexState *, struct LHS_assign *, int)'
|-ImplicitCastExpr 0x558fa8f2df60 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2dda0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f2ddf0 <col:20, col:21> 'struct LHS_assign *' prefix '&'
| `-DeclRefExpr 0x558fa8f2ddc8 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
`-BinaryOperator 0x558fa8f2de70 <col:25, col:31> 'int' '+'
  |-ImplicitCastExpr 0x558fa8f2de58 <col:25> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f2de10 <col:25> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
  `-IntegerLiteral 0x558fa8f2de38 <col:31> 'int' 1
[B6.2]([B6.4], [B6.6], [B6.10])
   Preds (2): B7 B8
   Succs (1): B1

 [B7]
   1: DeclRefExpr 0x558fa8f2da80 <lparser.c:34:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
errorlimit
   2: ImplicitCastExpr 0x558fa8f2dca0 <lparser.c:34:48> 'void (*)(FuncState *, int, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2da80 <col:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, const char *))
   3: DeclRefExpr 0x558fa8f2daa8 <lparser.c:941:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2dad0 <lparser.c:941:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2daa8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f2dae8 <lparser.c:941:21, col:25> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2dad0 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2daa8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.4]->fs
   6: ImplicitCastExpr 0x558fa8f2dcf8 <lparser.c:941:21, col:25> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2dae8 <col:21, col:25> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2dad0 <col:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2daa8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.5] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   7: IntegerLiteral 0x558fa8f2db20 <./luaconf.h:468:25> 'int' 200
200
   8: DeclRefExpr 0x558fa8f2db40 <lparser.c:941:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f2db68 <lparser.c:941:53> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: MemberExpr 0x558fa8f2db80 <lparser.c:941:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.9]->L
  11: ImplicitCastExpr 0x558fa8f2dbb8 <lparser.c:941:53, col:57> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8f2db80 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.10] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
  12: MemberExpr 0x558fa8f2dbd0 <lparser.c:941:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
`-ImplicitCastExpr 0x558fa8f2dbb8 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
  `-MemberExpr 0x558fa8f2db80 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
    `-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.11]->nCcalls
  13: ImplicitCastExpr 0x558fa8f2dc08 <lparser.c:941:53, col:60> 'unsigned short' <LValueToRValue>
`-MemberExpr 0x558fa8f2dbd0 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
  `-ImplicitCastExpr 0x558fa8f2dbb8 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x558fa8f2db80 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
      `-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.12] (ImplicitCastExpr, LValueToRValue, unsigned short)
  14: ImplicitCastExpr 0x558fa8f2dc20 <lparser.c:941:53, col:60> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2dc08 <col:53, col:60> 'unsigned short' <LValueToRValue>
  `-MemberExpr 0x558fa8f2dbd0 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
    `-ImplicitCastExpr 0x558fa8f2dbb8 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
      `-MemberExpr 0x558fa8f2db80 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
        `-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.13] (ImplicitCastExpr, IntegralCast, int)
  15: BinaryOperator 0x558fa8f2dc38 <./luaconf.h:468:25, lparser.c:941:60> 'int' '-'
|-IntegerLiteral 0x558fa8f2db20 <./luaconf.h:468:25> 'int' 200
`-ImplicitCastExpr 0x558fa8f2dc20 <lparser.c:941:53, col:60> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f2dc08 <col:53, col:60> 'unsigned short' <LValueToRValue>
    `-MemberExpr 0x558fa8f2dbd0 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
      `-ImplicitCastExpr 0x558fa8f2dbb8 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
        `-MemberExpr 0x558fa8f2db80 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
          `-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B7.7] - [B7.14]
  16: StringLiteral 0x558fa8f2dc60 <lparser.c:942:21> 'char [24]' lvalue "variables in assignment"
"variables in assignment"
  17: ImplicitCastExpr 0x558fa8f2dd10 <lparser.c:942:21> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f2dc60 <col:21> 'char [24]' lvalue "variables in assignment"
[B7.16] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  18: ImplicitCastExpr 0x558fa8f2dd28 <lparser.c:942:21> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f2dd10 <col:21> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f2dc60 <col:21> 'char [24]' lvalue "variables in assignment"
[B7.17] (ImplicitCastExpr, BitCast, const char *)
  19: CallExpr 0x558fa8f2dcb8 <lparser.c:34:48, col:65> 'void'
|-ImplicitCastExpr 0x558fa8f2dca0 <col:48> 'void (*)(FuncState *, int, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2da80 <col:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
|-ImplicitCastExpr 0x558fa8f2dcf8 <line:941:21, col:25> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f2dae8 <col:21, col:25> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f2dad0 <col:21> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2daa8 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
|-BinaryOperator 0x558fa8f2dc38 <./luaconf.h:468:25, lparser.c:941:60> 'int' '-'
| |-IntegerLiteral 0x558fa8f2db20 <./luaconf.h:468:25> 'int' 200
| `-ImplicitCastExpr 0x558fa8f2dc20 <lparser.c:941:53, col:60> 'int' <IntegralCast>
|   `-ImplicitCastExpr 0x558fa8f2dc08 <col:53, col:60> 'unsigned short' <LValueToRValue>
|     `-MemberExpr 0x558fa8f2dbd0 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
|       `-ImplicitCastExpr 0x558fa8f2dbb8 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
|         `-MemberExpr 0x558fa8f2db80 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
|           `-ImplicitCastExpr 0x558fa8f2db68 <col:53> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x558fa8f2db40 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f2dd28 <line:942:21> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f2dd10 <col:21> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f2dc60 <col:21> 'char [24]' lvalue "variables in assignment"
[B7.2]([B7.6], [B7.15], [B7.18])
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x558fa8f2d898 <lparser.c:941:29> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
nvars
   2: ImplicitCastExpr 0x558fa8f2da40 <lparser.c:34:39, col:41> 'int' <LValueToRValue>
`-ParenExpr 0x558fa8f2d8c0 <col:39, col:41> 'int' lvalue
  `-DeclRefExpr 0x558fa8f2d898 <line:941:29> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
([B8.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x558fa8f2d8e0 <./luaconf.h:468:25> 'int' 200
200
   4: DeclRefExpr 0x558fa8f2d900 <lparser.c:941:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   5: ImplicitCastExpr 0x558fa8f2d928 <lparser.c:941:53> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.4] (ImplicitCastExpr, LValueToRValue, LexState *)
   6: MemberExpr 0x558fa8f2d940 <lparser.c:941:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
`-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.5]->L
   7: ImplicitCastExpr 0x558fa8f2d978 <lparser.c:941:53, col:57> 'struct lua_State *' <LValueToRValue>
`-MemberExpr 0x558fa8f2d940 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
  `-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.6] (ImplicitCastExpr, LValueToRValue, struct lua_State *)
   8: MemberExpr 0x558fa8f2d990 <lparser.c:941:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
`-ImplicitCastExpr 0x558fa8f2d978 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
  `-MemberExpr 0x558fa8f2d940 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
    `-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.7]->nCcalls
   9: ImplicitCastExpr 0x558fa8f2d9c8 <lparser.c:941:53, col:60> 'unsigned short' <LValueToRValue>
`-MemberExpr 0x558fa8f2d990 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
  `-ImplicitCastExpr 0x558fa8f2d978 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
    `-MemberExpr 0x558fa8f2d940 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
      `-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.8] (ImplicitCastExpr, LValueToRValue, unsigned short)
  10: ImplicitCastExpr 0x558fa8f2d9e0 <lparser.c:941:53, col:60> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2d9c8 <col:53, col:60> 'unsigned short' <LValueToRValue>
  `-MemberExpr 0x558fa8f2d990 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
    `-ImplicitCastExpr 0x558fa8f2d978 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
      `-MemberExpr 0x558fa8f2d940 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
        `-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.9] (ImplicitCastExpr, IntegralCast, int)
  11: BinaryOperator 0x558fa8f2d9f8 <./luaconf.h:468:25, lparser.c:941:60> 'int' '-'
|-IntegerLiteral 0x558fa8f2d8e0 <./luaconf.h:468:25> 'int' 200
`-ImplicitCastExpr 0x558fa8f2d9e0 <lparser.c:941:53, col:60> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f2d9c8 <col:53, col:60> 'unsigned short' <LValueToRValue>
    `-MemberExpr 0x558fa8f2d990 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
      `-ImplicitCastExpr 0x558fa8f2d978 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
        `-MemberExpr 0x558fa8f2d940 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
          `-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.3] - [B8.10]
  12: BinaryOperator 0x558fa8f2da58 <lparser.c:34:39, col:45> 'int' '>'
|-ImplicitCastExpr 0x558fa8f2da40 <col:39, col:41> 'int' <LValueToRValue>
| `-ParenExpr 0x558fa8f2d8c0 <col:39, col:41> 'int' lvalue
|   `-DeclRefExpr 0x558fa8f2d898 <line:941:29> 'int' lvalue ParmVar 0x558fa8f2ca68 'nvars' 'int'
`-ParenExpr 0x558fa8f2da20 <line:34:43, col:45> 'int'
  `-BinaryOperator 0x558fa8f2d9f8 <./luaconf.h:468:25, lparser.c:941:60> 'int' '-'
    |-IntegerLiteral 0x558fa8f2d8e0 <./luaconf.h:468:25> 'int' 200
    `-ImplicitCastExpr 0x558fa8f2d9e0 <lparser.c:941:53, col:60> 'int' <IntegralCast>
      `-ImplicitCastExpr 0x558fa8f2d9c8 <col:53, col:60> 'unsigned short' <LValueToRValue>
        `-MemberExpr 0x558fa8f2d990 <col:53, col:60> 'unsigned short' lvalue ->nCcalls 0x558fa8ec76b0
          `-ImplicitCastExpr 0x558fa8f2d978 <col:53, col:57> 'struct lua_State *' <LValueToRValue>
            `-MemberExpr 0x558fa8f2d940 <col:53, col:57> 'struct lua_State *' lvalue ->L 0x558fa8ea0690
              `-ImplicitCastExpr 0x558fa8f2d928 <col:53> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x558fa8f2d900 <col:53> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B8.2] > ([B8.11])
   T: if [B8.12]
   Preds (2): B9 B10
   Succs (2): B7 B6

 [B9]
   1: DeclRefExpr 0x558fa8f2d680 <lparser.c:940:7> 'void (LexState *, struct LHS_assign *, expdesc *)' Function 0x558fa8f2b0d0 'check_conflict' 'void (LexState *, struct LHS_assign *, expdesc *)'
check_conflict
   2: ImplicitCastExpr 0x558fa8f2d7d8 <lparser.c:940:7> 'void (*)(LexState *, struct LHS_assign *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2d680 <col:7> 'void (LexState *, struct LHS_assign *, expdesc *)' Function 0x558fa8f2b0d0 'check_conflict' 'void (LexState *, struct LHS_assign *, expdesc *)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, struct LHS_assign *, expdesc *))
   3: DeclRefExpr 0x558fa8f2d6a8 <lparser.c:940:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2d830 <lparser.c:940:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d6a8 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f2d6d0 <lparser.c:940:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
lh
   6: ImplicitCastExpr 0x558fa8f2d848 <lparser.c:940:26> 'struct LHS_assign *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d6d0 <col:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B9.5] (ImplicitCastExpr, LValueToRValue, struct LHS_assign *)
   7: DeclRefExpr 0x558fa8f2d6f8 <lparser.c:940:31> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
nv
   8: MemberExpr 0x558fa8f2d720 <lparser.c:940:31, col:34> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f2d6f8 <col:31> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B9.7].v
   9: UnaryOperator 0x558fa8f2d758 <lparser.c:940:30, col:34> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f2d720 <col:31, col:34> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f2d6f8 <col:31> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
&[B9.8]
  10: CallExpr 0x558fa8f2d7f0 <lparser.c:940:7, col:35> 'void'
|-ImplicitCastExpr 0x558fa8f2d7d8 <col:7> 'void (*)(LexState *, struct LHS_assign *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2d680 <col:7> 'void (LexState *, struct LHS_assign *, expdesc *)' Function 0x558fa8f2b0d0 'check_conflict' 'void (LexState *, struct LHS_assign *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2d830 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2d6a8 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f2d848 <col:26> 'struct LHS_assign *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2d6d0 <col:26> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
`-UnaryOperator 0x558fa8f2d758 <col:30, col:34> 'expdesc *' prefix '&'
  `-MemberExpr 0x558fa8f2d720 <col:31, col:34> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
    `-DeclRefExpr 0x558fa8f2d6f8 <col:31> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B9.2]([B9.4], [B9.6], [B9.9])
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: DeclStmt 0x558fa8f2d2e8 <lparser.c:936:5, col:25>col:23
`-VarDecl 0x558fa8f2d288 <col:5, col:23> col:23 used nv 'struct LHS_assign':'struct LHS_assign'
struct LHS_assign nv;
   2: DeclRefExpr 0x558fa8f2d360 <lparser.c:937:15> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
lh
   3: ImplicitCastExpr 0x558fa8f2d388 <lparser.c:937:15> 'struct LHS_assign *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d360 <col:15> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B10.2] (ImplicitCastExpr, LValueToRValue, struct LHS_assign *)
   4: DeclRefExpr 0x558fa8f2d300 <lparser.c:937:5> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
nv
   5: MemberExpr 0x558fa8f2d328 <lparser.c:937:5, col:8> 'struct LHS_assign *' lvalue .prev 0x558fa8f2adf0
`-DeclRefExpr 0x558fa8f2d300 <col:5> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.4].prev
   6: BinaryOperator 0x558fa8f2d3a0 <lparser.c:937:5, col:15> 'struct LHS_assign *' '='
|-MemberExpr 0x558fa8f2d328 <col:5, col:8> 'struct LHS_assign *' lvalue .prev 0x558fa8f2adf0
| `-DeclRefExpr 0x558fa8f2d300 <col:5> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
`-ImplicitCastExpr 0x558fa8f2d388 <col:15> 'struct LHS_assign *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2d360 <col:15> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B10.5] = [B10.3]
   7: DeclRefExpr 0x558fa8f2d3c8 <lparser.c:938:5> 'void (LexState *, expdesc *)' Function 0x558fa8f223d8 'primaryexp' 'void (LexState *, expdesc *)'
primaryexp
   8: ImplicitCastExpr 0x558fa8f2d498 <lparser.c:938:5> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2d3c8 <col:5> 'void (LexState *, expdesc *)' Function 0x558fa8f223d8 'primaryexp' 'void (LexState *, expdesc *)'
[B10.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   9: DeclRefExpr 0x558fa8f2d3f0 <lparser.c:938:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x558fa8f2d4e8 <lparser.c:938:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d3f0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B10.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: DeclRefExpr 0x558fa8f2d418 <lparser.c:938:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
nv
  12: MemberExpr 0x558fa8f2d440 <lparser.c:938:21, col:24> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f2d418 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.11].v
  13: UnaryOperator 0x558fa8f2d478 <lparser.c:938:20, col:24> 'expdesc *' prefix '&'
`-MemberExpr 0x558fa8f2d440 <col:21, col:24> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f2d418 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
&[B10.12]
  14: CallExpr 0x558fa8f2d4b0 <lparser.c:938:5, col:25> 'void'
|-ImplicitCastExpr 0x558fa8f2d498 <col:5> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2d3c8 <col:5> 'void (LexState *, expdesc *)' Function 0x558fa8f223d8 'primaryexp' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2d4e8 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2d3f0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f2d478 <col:20, col:24> 'expdesc *' prefix '&'
  `-MemberExpr 0x558fa8f2d440 <col:21, col:24> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
    `-DeclRefExpr 0x558fa8f2d418 <col:21> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.8]([B10.10], [B10.13])
  15: DeclRefExpr 0x558fa8f2d500 <lparser.c:939:9> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
nv
  16: MemberExpr 0x558fa8f2d528 <lparser.c:939:9, col:12> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
`-DeclRefExpr 0x558fa8f2d500 <col:9> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.15].v
  17: MemberExpr 0x558fa8f2d560 <lparser.c:939:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-MemberExpr 0x558fa8f2d528 <col:9, col:12> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
  `-DeclRefExpr 0x558fa8f2d500 <col:9> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.16].k
  18: ImplicitCastExpr 0x558fa8f2d5c0 <lparser.c:939:9, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f2d560 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-MemberExpr 0x558fa8f2d528 <col:9, col:12> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
    `-DeclRefExpr 0x558fa8f2d500 <col:9> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.17] (ImplicitCastExpr, LValueToRValue, expkind)
  19: ImplicitCastExpr 0x558fa8f2d5d8 <lparser.c:939:9, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2d5c0 <col:9, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f2d560 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-MemberExpr 0x558fa8f2d528 <col:9, col:12> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
      `-DeclRefExpr 0x558fa8f2d500 <col:9> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
[B10.18] (ImplicitCastExpr, IntegralCast, unsigned int)
  20: DeclRefExpr 0x558fa8f2d598 <lparser.c:939:19> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
VLOCAL
  21: ImplicitCastExpr 0x558fa8f2d5f0 <lparser.c:939:19> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f2d598 <col:19> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
[B10.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: BinaryOperator 0x558fa8f2d608 <lparser.c:939:9, col:19> 'int' '=='
|-ImplicitCastExpr 0x558fa8f2d5d8 <col:9, col:14> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f2d5c0 <col:9, col:14> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x558fa8f2d560 <col:9, col:14> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|     `-MemberExpr 0x558fa8f2d528 <col:9, col:12> 'expdesc':'struct expdesc' lvalue .v 0x558fa8f2ae48
|       `-DeclRefExpr 0x558fa8f2d500 <col:9> 'struct LHS_assign':'struct LHS_assign' lvalue Var 0x558fa8f2d288 'nv' 'struct LHS_assign':'struct LHS_assign'
`-ImplicitCastExpr 0x558fa8f2d5f0 <col:19> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f2d598 <col:19> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
[B10.19] == [B10.21]
   T: if [B10.22]
   Preds (1): B11
   Succs (2): B9 B8

 [B11]
   1: DeclRefExpr 0x558fa8f2d198 <lparser.c:935:7> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
   2: ImplicitCastExpr 0x558fa8f2d200 <lparser.c:935:7> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2d198 <col:7> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
   3: DeclRefExpr 0x558fa8f2d1c0 <lparser.c:935:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2d250 <lparser.c:935:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d1c0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x558fa8f2d1e8 <lparser.c:935:20> 'int' 44
','
   6: CallExpr 0x558fa8f2d218 <lparser.c:935:7, col:23> 'int'
|-ImplicitCastExpr 0x558fa8f2d200 <col:7> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2d198 <col:7> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f2d250 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2d1c0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f2d1e8 <col:20> 'int' 44
[B11.2]([B11.4], [B11.5])
   T: if [B11.6]
   Preds (2): B12 B13
   Succs (2): B10 B5

 [B12]
   1: DeclRefExpr 0x558fa8f2cfd8 <lparser.c:100:47> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f2d0a0 <lparser.c:100:47> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2cfd8 <col:47> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f2d000 <lparser.c:933:19> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2d0f0 <lparser.c:933:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2d000 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f2d068 <lparser.c:934:23> 'char [13]' lvalue "syntax error"
"syntax error"
   6: ImplicitCastExpr 0x558fa8f2d108 <lparser.c:934:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f2d068 <col:23> 'char [13]' lvalue "syntax error"
[B12.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f2d120 <lparser.c:934:23> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f2d108 <col:23> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f2d068 <col:23> 'char [13]' lvalue "syntax error"
[B12.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f2d0b8 <lparser.c:100:47, col:71> 'void'
|-ImplicitCastExpr 0x558fa8f2d0a0 <col:47> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2cfd8 <col:47> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f2d0f0 <line:933:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2d000 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f2c968 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f2d120 <line:934:23> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f2d108 <col:23> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f2d068 <col:23> 'char [13]' lvalue "syntax error"
[B12.2]([B12.4], [B12.7])
   Preds (1): B13
   Succs (1): B11

 [B13]
   1: BinaryOperator 0x558fa8f2cf70 <lparser.c:933:23, col:55> 'int' '&&'
|-BinaryOperator 0x558fa8f2ce00 <col:23, col:39> 'int' '<='
| |-ImplicitCastExpr 0x558fa8f2cde8 <col:23> 'unsigned int' <IntegralCast>
| | `-DeclRefExpr 0x558fa8f2cce0 <col:23> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
| `-ImplicitCastExpr 0x558fa8f2cdd0 <col:33, col:39> 'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x558fa8f2cdb8 <col:33, col:39> 'expkind':'expkind' <LValueToRValue>
|     `-MemberExpr 0x558fa8f2cd80 <col:33, col:39> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|       `-MemberExpr 0x558fa8f2cd48 <col:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
|         `-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
|           `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
`-BinaryOperator 0x558fa8f2cf48 <col:44, col:55> 'int' '<='
  |-ImplicitCastExpr 0x558fa8f2cf18 <col:44, col:50> 'unsigned int' <IntegralCast>
  | `-ImplicitCastExpr 0x558fa8f2cf00 <col:44, col:50> 'expkind':'expkind' <LValueToRValue>
  |   `-MemberExpr 0x558fa8f2cea0 <col:44, col:50> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  |     `-MemberExpr 0x558fa8f2ce68 <col:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
  |       `-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
  |         `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
  `-ImplicitCastExpr 0x558fa8f2cf30 <col:55> 'unsigned int' <IntegralCast>
    `-DeclRefExpr 0x558fa8f2ced8 <col:55> 'int' EnumConstant 0x558fa8eb0b18 'VINDEXED' 'int'
[B15.10] && [B14.9]
   2: UnaryOperator 0x558fa8f2cfb8 <lparser.c:100:41, col:44> 'int' prefix '!'
`-ParenExpr 0x558fa8f2cf98 <col:42, col:44> 'int'
  `-BinaryOperator 0x558fa8f2cf70 <line:933:23, col:55> 'int' '&&'
    |-BinaryOperator 0x558fa8f2ce00 <col:23, col:39> 'int' '<='
    | |-ImplicitCastExpr 0x558fa8f2cde8 <col:23> 'unsigned int' <IntegralCast>
    | | `-DeclRefExpr 0x558fa8f2cce0 <col:23> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
    | `-ImplicitCastExpr 0x558fa8f2cdd0 <col:33, col:39> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x558fa8f2cdb8 <col:33, col:39> 'expkind':'expkind' <LValueToRValue>
    |     `-MemberExpr 0x558fa8f2cd80 <col:33, col:39> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    |       `-MemberExpr 0x558fa8f2cd48 <col:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
    |         `-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
    |           `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
    `-BinaryOperator 0x558fa8f2cf48 <col:44, col:55> 'int' '<='
      |-ImplicitCastExpr 0x558fa8f2cf18 <col:44, col:50> 'unsigned int' <IntegralCast>
      | `-ImplicitCastExpr 0x558fa8f2cf00 <col:44, col:50> 'expkind':'expkind' <LValueToRValue>
      |   `-MemberExpr 0x558fa8f2cea0 <col:44, col:50> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
      |     `-MemberExpr 0x558fa8f2ce68 <col:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
      |       `-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
      |         `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
      `-ImplicitCastExpr 0x558fa8f2cf30 <col:55> 'unsigned int' <IntegralCast>
        `-DeclRefExpr 0x558fa8f2ced8 <col:55> 'int' EnumConstant 0x558fa8eb0b18 'VINDEXED' 'int'
!([B13.1])
   T: if [B13.2]
   Preds (2): B14 B15
   Succs (2): B12 B11

 [B14]
   1: DeclRefExpr 0x558fa8f2ce28 <lparser.c:933:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
lh
   2: ImplicitCastExpr 0x558fa8f2ce50 <lparser.c:933:44> 'struct LHS_assign *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B14.1] (ImplicitCastExpr, LValueToRValue, struct LHS_assign *)
   3: MemberExpr 0x558fa8f2ce68 <lparser.c:933:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
`-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B14.2]->v
   4: MemberExpr 0x558fa8f2cea0 <lparser.c:933:44, col:50> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-MemberExpr 0x558fa8f2ce68 <col:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
  `-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B14.3].k
   5: ImplicitCastExpr 0x558fa8f2cf00 <lparser.c:933:44, col:50> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f2cea0 <col:44, col:50> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-MemberExpr 0x558fa8f2ce68 <col:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
    `-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B14.4] (ImplicitCastExpr, LValueToRValue, expkind)
   6: ImplicitCastExpr 0x558fa8f2cf18 <lparser.c:933:44, col:50> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2cf00 <col:44, col:50> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f2cea0 <col:44, col:50> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-MemberExpr 0x558fa8f2ce68 <col:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
      `-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B14.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: DeclRefExpr 0x558fa8f2ced8 <lparser.c:933:55> 'int' EnumConstant 0x558fa8eb0b18 'VINDEXED' 'int'
VINDEXED
   8: ImplicitCastExpr 0x558fa8f2cf30 <lparser.c:933:55> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f2ced8 <col:55> 'int' EnumConstant 0x558fa8eb0b18 'VINDEXED' 'int'
[B14.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: BinaryOperator 0x558fa8f2cf48 <lparser.c:933:44, col:55> 'int' '<='
|-ImplicitCastExpr 0x558fa8f2cf18 <col:44, col:50> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f2cf00 <col:44, col:50> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x558fa8f2cea0 <col:44, col:50> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|     `-MemberExpr 0x558fa8f2ce68 <col:44, col:48> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
|       `-ImplicitCastExpr 0x558fa8f2ce50 <col:44> 'struct LHS_assign *' <LValueToRValue>
|         `-DeclRefExpr 0x558fa8f2ce28 <col:44> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
`-ImplicitCastExpr 0x558fa8f2cf30 <col:55> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f2ced8 <col:55> 'int' EnumConstant 0x558fa8eb0b18 'VINDEXED' 'int'
[B14.6] <= [B14.8]
   Preds (1): B15
   Succs (1): B13

 [B15]
   1: DeclStmt 0x558fa8f2ccc8 <lparser.c:932:3, col:12>col:11
`-VarDecl 0x558fa8f2cc68 <col:3, col:11> col:11 used e 'expdesc':'struct expdesc'
expdesc e;
   2: DeclRefExpr 0x558fa8f2cce0 <lparser.c:933:23> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
VLOCAL
   3: ImplicitCastExpr 0x558fa8f2cde8 <lparser.c:933:23> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f2cce0 <col:23> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
[B15.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x558fa8f2cd08 <lparser.c:933:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
lh
   5: ImplicitCastExpr 0x558fa8f2cd30 <lparser.c:933:33> 'struct LHS_assign *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B15.4] (ImplicitCastExpr, LValueToRValue, struct LHS_assign *)
   6: MemberExpr 0x558fa8f2cd48 <lparser.c:933:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
`-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B15.5]->v
   7: MemberExpr 0x558fa8f2cd80 <lparser.c:933:33, col:39> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-MemberExpr 0x558fa8f2cd48 <col:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
  `-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B15.6].k
   8: ImplicitCastExpr 0x558fa8f2cdb8 <lparser.c:933:33, col:39> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f2cd80 <col:33, col:39> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-MemberExpr 0x558fa8f2cd48 <col:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
    `-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B15.7] (ImplicitCastExpr, LValueToRValue, expkind)
   9: ImplicitCastExpr 0x558fa8f2cdd0 <lparser.c:933:33, col:39> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2cdb8 <col:33, col:39> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f2cd80 <col:33, col:39> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-MemberExpr 0x558fa8f2cd48 <col:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
      `-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B15.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: BinaryOperator 0x558fa8f2ce00 <lparser.c:933:23, col:39> 'int' '<='
|-ImplicitCastExpr 0x558fa8f2cde8 <col:23> 'unsigned int' <IntegralCast>
| `-DeclRefExpr 0x558fa8f2cce0 <col:23> 'int' EnumConstant 0x558fa8eb0a40 'VLOCAL' 'int'
`-ImplicitCastExpr 0x558fa8f2cdd0 <col:33, col:39> 'unsigned int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f2cdb8 <col:33, col:39> 'expkind':'expkind' <LValueToRValue>
    `-MemberExpr 0x558fa8f2cd80 <col:33, col:39> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
      `-MemberExpr 0x558fa8f2cd48 <col:33, col:37> 'expdesc':'struct expdesc' lvalue ->v 0x558fa8f2ae48
        `-ImplicitCastExpr 0x558fa8f2cd30 <col:33> 'struct LHS_assign *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f2cd08 <col:33> 'struct LHS_assign *' lvalue ParmVar 0x558fa8f2c9f0 'lh' 'struct LHS_assign *'
[B15.3] <= [B15.9]
   T: [B15.10] && ...
   Preds (1): B16
   Succs (2): B14 B13

 [B0 (EXIT)]
   Preds (2): B1 B2
