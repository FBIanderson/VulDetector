static int llex(LexState *ls, SemInfo *seminfo)
 [B107 (ENTRY)]
   Succs (1): B106

 [B1]
   Preds (4): B23 B82 B92 B104
   Succs (1): B105

 [B2]
   1: DeclRefExpr 0x561ce7461a60 <llex.c:337:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7461a88 <llex.c:337:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461a60 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7461aa0 <llex.c:337:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7461a88 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461a60 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B2.2]->current
   4: ImplicitCastExpr 0x561ce7461ad8 <llex.c:337:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7461aa0 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7461a88 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7461a60 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B2.4]
   Preds (1): B105
   Succs (13): B28 B38 B39 B40 B49 B58 B67 B76
     B81 B102 B103 B104 B27

 [B3]
   1: ConditionalOperator 0x561ce746c398 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce746bfb0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce746bf58 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce746bf38 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce746bf00 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce746bee8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce746bec8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce746bf98 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce746bf78 <col:31> 'int' 0
|-ParenExpr 0x561ce746c278 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce746c250 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce746c230 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce746c1c8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce746c1a0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce746c188 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce746c168 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce746c100 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce746c0e0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce746c0c0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce746c350 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce746c338 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce746c298 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce746c380 <llex.c:439:16, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce746c300 <line:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce746c2e8 <line:439:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746c2c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.14] ? ([B4.10]) : [B5.7]
   2: DeclRefExpr 0x561ce746bdd8 <llex.c:439:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce746be00 <llex.c:439:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746bdd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B3.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce746be18 <llex.c:439:16, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746be00 <line:439:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746bdd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B3.3]->current
   5: BinaryOperator 0x561ce746c3e8 <llex.c:439:16, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce746be18 <llex.c:439:16, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce746be00 <line:439:16> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce746bdd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce746c3c8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce746c398 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce746bfb0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce746bf58 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce746bf38 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce746bf00 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce746bee8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce746bec8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce746bf98 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce746bf78 <col:31> 'int' 0
    |-ParenExpr 0x561ce746c278 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce746c250 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce746c230 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce746c1c8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce746c1a0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce746c188 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce746c168 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce746c100 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce746c0e0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce746c0c0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce746c350 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce746c338 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce746c298 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce746c380 <llex.c:439:16, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce746c300 <line:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce746c2e8 <line:439:16> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746c2c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B3.4] = ([B3.1])
   6: DeclRefExpr 0x561ce746c430 <llex.c:440:18> 'int' lvalue Var 0x561ce746bcd0 'c' 'int'
c
   7: ImplicitCastExpr 0x561ce746c458 <llex.c:440:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce746c430 <col:18> 'int' lvalue Var 0x561ce746bcd0 'c' 'int'
[B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: ReturnStmt 0x561ce746c470 <llex.c:440:11, col:18>
`-ImplicitCastExpr 0x561ce746c458 <col:18> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce746c430 <col:18> 'int' lvalue Var 0x561ce746bcd0 'c' 'int'
return [B3.7];
   Preds (2): B4 B5
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x561ce746bfd8 <llex.c:439:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746c000 <llex.c:439:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B4.2]->z
   4: ImplicitCastExpr 0x561ce746c070 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B4.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce746c088 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B4.4]->p
   6: UnaryOperator 0x561ce746c0c0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B4.5]++
   7: UnaryOperator 0x561ce746c0e0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce746c0c0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B4.6]
   8: ImplicitCastExpr 0x561ce746c188 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce746c168 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce746c100 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce746c0e0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce746c0c0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B4.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce746c1a0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce746c188 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce746c168 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce746c100 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce746c0e0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce746c0c0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B4.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce746c250 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce746c230 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce746c1c8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce746c1a0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce746c188 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce746c168 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce746c100 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce746c0e0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce746c0c0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce746c088 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce746c070 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce746c050 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce746c018 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce746c000 <line:439:16> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce746bfd8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B4.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x561ce746c298 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce746c338 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746c298 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce746c2c0 <llex.c:439:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce746c2e8 <llex.c:439:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746c2c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce746c300 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce746c2e8 <line:439:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746c2c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B5.4]->z
   6: ImplicitCastExpr 0x561ce746c380 <llex.c:439:16, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce746c300 <line:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce746c2e8 <line:439:16> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746c2c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B5.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce746c350 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce746c338 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce746c298 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce746c380 <llex.c:439:16, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce746c300 <line:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce746c2e8 <line:439:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746c2c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B5.2]([B5.6])
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: DeclRefExpr 0x561ce746bd30 <llex.c:438:19> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746bd58 <llex.c:438:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746bd30 <col:19> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746bd70 <llex.c:438:19, col:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746bd58 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746bd30 <col:19> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.2]->current
   4: ImplicitCastExpr 0x561ce746bda8 <llex.c:438:19, col:23> 'int' <LValueToRValue>
`-MemberExpr 0x561ce746bd70 <col:19, col:23> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce746bd58 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746bd30 <col:19> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x561ce746bdc0 <llex.c:438:11, col:30>col:15
`-VarDecl 0x561ce746bcd0 <col:11, col:23> col:15 used c 'int' cinit
  `-ImplicitCastExpr 0x561ce746bda8 <col:19, col:23> 'int' <LValueToRValue>
    `-MemberExpr 0x561ce746bd70 <col:19, col:23> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce746bd58 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746bd30 <col:19> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
int c = ls->current;
   6: DeclRefExpr 0x561ce746be50 <llex.c:439:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce746be78 <llex.c:439:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.7]->z
   9: ImplicitCastExpr 0x561ce746bee8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce746bec8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B6.8]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  10: MemberExpr 0x561ce746bf00 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce746bee8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce746bec8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.9]->n
  11: UnaryOperator 0x561ce746bf38 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce746bf00 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce746bee8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce746bec8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B6.10]--
  12: IntegerLiteral 0x561ce746bf78 <./lzio.h:22:31> 'int' 0
0
  13: ImplicitCastExpr 0x561ce746bf98 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce746bf78 <col:31> 'int' 0
[B6.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: BinaryOperator 0x561ce746bfb0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce746bf58 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce746bf38 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce746bf00 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce746bee8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce746bec8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce746be90 <llex.c:439:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce746be78 <line:439:16> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce746be50 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746bf98 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce746bf78 <col:31> 'int' 0
([B6.11]) > [B6.13]
   T: [B6.14] ? ... : ...
   Preds (1): B19
   Succs (2): B4 B5

 [B7]
   1: DeclRefExpr 0x561ce746bb88 <llex.c:433:27> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
ts
   2: ImplicitCastExpr 0x561ce746bbb0 <llex.c:433:27> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x561ce746bb88 <col:27> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B7.1] (ImplicitCastExpr, LValueToRValue, TString *)
   3: DeclRefExpr 0x561ce746bb10 <llex.c:433:13> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
seminfo
   4: ImplicitCastExpr 0x561ce746bb38 <llex.c:433:13> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce746bb10 <col:13> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B7.3] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   5: MemberExpr 0x561ce746bb50 <llex.c:433:13, col:22> 'TString *' lvalue ->ts 0x561ce74251d8
`-ImplicitCastExpr 0x561ce746bb38 <col:13> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746bb10 <col:13> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B7.4]->ts
   6: BinaryOperator 0x561ce746bbc8 <llex.c:433:13, col:27> 'TString *' '='
|-MemberExpr 0x561ce746bb50 <col:13, col:22> 'TString *' lvalue ->ts 0x561ce74251d8
| `-ImplicitCastExpr 0x561ce746bb38 <col:13> 'SemInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce746bb10 <col:13> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
`-ImplicitCastExpr 0x561ce746bbb0 <col:27> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746bb88 <col:27> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B7.5] = [B7.2]
   7: DeclRefExpr 0x561ce746bbf0 <llex.c:434:20> 'int' EnumConstant 0x561ce7424ef0 'TK_NAME' 'int'
TK_NAME
   8: ReturnStmt 0x561ce746bc18 <llex.c:434:13, col:20>
`-DeclRefExpr 0x561ce746bbf0 <col:20> 'int' EnumConstant 0x561ce7424ef0 'TK_NAME' 'int'
return [B7.7];
   Preds (1): B9
   Succs (1): B0

 [B8]
   1: DeclRefExpr 0x561ce746b988 <llex.c:431:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
ts
   2: ImplicitCastExpr 0x561ce746b9b0 <llex.c:431:20> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B8.1] (ImplicitCastExpr, LValueToRValue, TString *)
   3: MemberExpr 0x561ce746b9c8 <llex.c:431:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
`-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B8.2]->tsv
   4: MemberExpr 0x561ce746ba00 <llex.c:431:20, col:28> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
`-MemberExpr 0x561ce746b9c8 <col:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
  `-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B8.3].reserved
   5: ImplicitCastExpr 0x561ce746ba58 <llex.c:431:20, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x561ce746ba00 <col:20, col:28> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
  `-MemberExpr 0x561ce746b9c8 <col:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
    `-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B8.4] (ImplicitCastExpr, LValueToRValue, lu_byte)
   6: ImplicitCastExpr 0x561ce746ba70 <llex.c:431:20, col:28> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce746ba58 <col:20, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x561ce746ba00 <col:20, col:28> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
    `-MemberExpr 0x561ce746b9c8 <col:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
      `-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B8.5] (ImplicitCastExpr, IntegralCast, int)
   7: IntegerLiteral 0x561ce746ba38 <llex.c:431:39> 'int' 1
1
   8: BinaryOperator 0x561ce746ba88 <llex.c:431:20, col:39> 'int' '-'
|-ImplicitCastExpr 0x561ce746ba70 <col:20, col:28> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce746ba58 <col:20, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x561ce746ba00 <col:20, col:28> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
|     `-MemberExpr 0x561ce746b9c8 <col:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
|       `-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
`-IntegerLiteral 0x561ce746ba38 <col:39> 'int' 1
[B8.6] - [B8.7]
   9: IntegerLiteral 0x561ce746bab0 <./llex.h:14:24> 'int' 257
257
  10: BinaryOperator 0x561ce746bad0 <llex.c:431:20, ./llex.h:14:24> 'int' '+'
|-BinaryOperator 0x561ce746ba88 <llex.c:431:20, col:39> 'int' '-'
| |-ImplicitCastExpr 0x561ce746ba70 <col:20, col:28> 'int' <IntegralCast>
| | `-ImplicitCastExpr 0x561ce746ba58 <col:20, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x561ce746ba00 <col:20, col:28> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
| |     `-MemberExpr 0x561ce746b9c8 <col:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
| |       `-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
| |         `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
| `-IntegerLiteral 0x561ce746ba38 <col:39> 'int' 1
`-IntegerLiteral 0x561ce746bab0 <./llex.h:14:24> 'int' 257
[B8.8] + [B8.9]
  11: ReturnStmt 0x561ce746baf8 <llex.c:431:13, ./llex.h:14:24>
`-BinaryOperator 0x561ce746bad0 <llex.c:431:20, ./llex.h:14:24> 'int' '+'
  |-BinaryOperator 0x561ce746ba88 <llex.c:431:20, col:39> 'int' '-'
  | |-ImplicitCastExpr 0x561ce746ba70 <col:20, col:28> 'int' <IntegralCast>
  | | `-ImplicitCastExpr 0x561ce746ba58 <col:20, col:28> 'lu_byte':'unsigned char' <LValueToRValue>
  | |   `-MemberExpr 0x561ce746ba00 <col:20, col:28> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
  | |     `-MemberExpr 0x561ce746b9c8 <col:20, col:24> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
  | |       `-ImplicitCastExpr 0x561ce746b9b0 <col:20> 'TString *' <LValueToRValue>
  | |         `-DeclRefExpr 0x561ce746b988 <col:20> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
  | `-IntegerLiteral 0x561ce746ba38 <col:39> 'int' 1
  `-IntegerLiteral 0x561ce746bab0 <./llex.h:14:24> 'int' 257
return [B8.10];
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: DeclRefExpr 0x561ce746b520 <llex.c:428:16> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
   2: ImplicitCastExpr 0x561ce746b780 <llex.c:428:16> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746b520 <col:16> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
   3: DeclRefExpr 0x561ce746b548 <llex.c:428:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce746b7d8 <llex.c:428:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746b548 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce746b570 <llex.c:428:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce746b598 <llex.c:428:47> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.6]->buff
   8: ImplicitCastExpr 0x561ce746b608 <./lzio.h:32:28, col:33> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce746b5e8 <col:28, col:33> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B9.7]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
   9: MemberExpr 0x561ce746b620 <./lzio.h:32:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce746b608 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce746b5e8 <col:28, col:33> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.8]->buffer
  10: ImplicitCastExpr 0x561ce746b7f0 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
`-ParenExpr 0x561ce746b658 <col:27, col:42> 'char *' lvalue
  `-MemberExpr 0x561ce746b620 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
    `-ImplicitCastExpr 0x561ce746b608 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce746b5e8 <col:28, col:33> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B9.9]) (ImplicitCastExpr, LValueToRValue, char *)
  11: ImplicitCastExpr 0x561ce746b808 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce746b7f0 <col:27, col:42> 'char *' <LValueToRValue>
  `-ParenExpr 0x561ce746b658 <col:27, col:42> 'char *' lvalue
    `-MemberExpr 0x561ce746b620 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
      `-ImplicitCastExpr 0x561ce746b608 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
        `-ParenExpr 0x561ce746b5e8 <col:28, col:33> 'Mbuffer *' lvalue
          `-MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
            `-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.10] (ImplicitCastExpr, BitCast, const char *)
  12: DeclRefExpr 0x561ce746b678 <llex.c:429:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
  13: ImplicitCastExpr 0x561ce746b6a0 <llex.c:429:48> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.12] (ImplicitCastExpr, LValueToRValue, LexState *)
  14: MemberExpr 0x561ce746b6b8 <llex.c:429:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce746b6a0 <col:48> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.13]->buff
  15: ImplicitCastExpr 0x561ce746b710 <./lzio.h:34:29, col:34> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce746b6f0 <col:29, col:34> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce746b6b8 <llex.c:429:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce746b6a0 <col:48> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B9.14]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  16: MemberExpr 0x561ce746b728 <./lzio.h:34:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce746b710 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce746b6f0 <col:29, col:34> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce746b6b8 <llex.c:429:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce746b6a0 <col:48> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.15]->n
  17: ImplicitCastExpr 0x561ce746b820 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
`-ParenExpr 0x561ce746b760 <col:28, col:38> 'size_t':'unsigned long' lvalue
  `-MemberExpr 0x561ce746b728 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
    `-ImplicitCastExpr 0x561ce746b710 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce746b6f0 <col:29, col:34> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce746b6b8 <llex.c:429:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce746b6a0 <col:48> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B9.16]) (ImplicitCastExpr, LValueToRValue, size_t)
  18: CallExpr 0x561ce746b798 <llex.c:428:16, line:429:57> 'TString *'
|-ImplicitCastExpr 0x561ce746b780 <line:428:16> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce746b520 <col:16> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x561ce746b7d8 <col:31> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce746b548 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce746b808 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce746b7f0 <col:27, col:42> 'char *' <LValueToRValue>
|   `-ParenExpr 0x561ce746b658 <col:27, col:42> 'char *' lvalue
|     `-MemberExpr 0x561ce746b620 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|       `-ImplicitCastExpr 0x561ce746b608 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|         `-ParenExpr 0x561ce746b5e8 <col:28, col:33> 'Mbuffer *' lvalue
|           `-MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|             `-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
|               `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746b820 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
  `-ParenExpr 0x561ce746b760 <col:28, col:38> 'size_t':'unsigned long' lvalue
    `-MemberExpr 0x561ce746b728 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
      `-ImplicitCastExpr 0x561ce746b710 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
        `-ParenExpr 0x561ce746b6f0 <col:29, col:34> 'Mbuffer *' lvalue
          `-MemberExpr 0x561ce746b6b8 <llex.c:429:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
            `-ImplicitCastExpr 0x561ce746b6a0 <col:48> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.2]([B9.4], [B9.11], [B9.17])
  19: DeclRefExpr 0x561ce746b4f8 <llex.c:428:11> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
ts
  20: BinaryOperator 0x561ce746b838 <llex.c:428:11, line:429:57> 'TString *' '='
|-DeclRefExpr 0x561ce746b4f8 <line:428:11> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
`-CallExpr 0x561ce746b798 <col:16, line:429:57> 'TString *'
  |-ImplicitCastExpr 0x561ce746b780 <line:428:16> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce746b520 <col:16> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
  |-ImplicitCastExpr 0x561ce746b7d8 <col:31> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x561ce746b548 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
  |-ImplicitCastExpr 0x561ce746b808 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
  | `-ImplicitCastExpr 0x561ce746b7f0 <col:27, col:42> 'char *' <LValueToRValue>
  |   `-ParenExpr 0x561ce746b658 <col:27, col:42> 'char *' lvalue
  |     `-MemberExpr 0x561ce746b620 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |       `-ImplicitCastExpr 0x561ce746b608 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |         `-ParenExpr 0x561ce746b5e8 <col:28, col:33> 'Mbuffer *' lvalue
  |           `-MemberExpr 0x561ce746b5b0 <llex.c:428:47, col:51> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |             `-ImplicitCastExpr 0x561ce746b598 <col:47> 'LexState *' <LValueToRValue>
  |               `-DeclRefExpr 0x561ce746b570 <col:47> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
  `-ImplicitCastExpr 0x561ce746b820 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
    `-ParenExpr 0x561ce746b760 <col:28, col:38> 'size_t':'unsigned long' lvalue
      `-MemberExpr 0x561ce746b728 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
        `-ImplicitCastExpr 0x561ce746b710 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
          `-ParenExpr 0x561ce746b6f0 <col:29, col:34> 'Mbuffer *' lvalue
            `-MemberExpr 0x561ce746b6b8 <llex.c:429:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
              `-ImplicitCastExpr 0x561ce746b6a0 <col:48> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce746b678 <col:48> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B9.19] = [B9.18]
  21: DeclRefExpr 0x561ce746b860 <llex.c:430:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
ts
  22: ImplicitCastExpr 0x561ce746b888 <llex.c:430:15> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x561ce746b860 <col:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B9.21] (ImplicitCastExpr, LValueToRValue, TString *)
  23: MemberExpr 0x561ce746b8a0 <llex.c:430:15, col:19> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
`-ImplicitCastExpr 0x561ce746b888 <col:15> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746b860 <col:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B9.22]->tsv
  24: MemberExpr 0x561ce746b8d8 <llex.c:430:15, col:23> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
`-MemberExpr 0x561ce746b8a0 <col:15, col:19> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
  `-ImplicitCastExpr 0x561ce746b888 <col:15> 'TString *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746b860 <col:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B9.23].reserved
  25: ImplicitCastExpr 0x561ce746b930 <llex.c:430:15, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x561ce746b8d8 <col:15, col:23> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
  `-MemberExpr 0x561ce746b8a0 <col:15, col:19> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
    `-ImplicitCastExpr 0x561ce746b888 <col:15> 'TString *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746b860 <col:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B9.24] (ImplicitCastExpr, LValueToRValue, lu_byte)
  26: ImplicitCastExpr 0x561ce746b948 <llex.c:430:15, col:23> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce746b930 <col:15, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x561ce746b8d8 <col:15, col:23> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
    `-MemberExpr 0x561ce746b8a0 <col:15, col:19> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
      `-ImplicitCastExpr 0x561ce746b888 <col:15> 'TString *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746b860 <col:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
[B9.25] (ImplicitCastExpr, IntegralCast, int)
  27: IntegerLiteral 0x561ce746b910 <llex.c:430:34> 'int' 0
0
  28: BinaryOperator 0x561ce746b960 <llex.c:430:15, col:34> 'int' '>'
|-ImplicitCastExpr 0x561ce746b948 <col:15, col:23> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce746b930 <col:15, col:23> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x561ce746b8d8 <col:15, col:23> 'lu_byte':'unsigned char' lvalue .reserved 0x561ce73f33c8
|     `-MemberExpr 0x561ce746b8a0 <col:15, col:19> 'struct (anonymous struct at ./lobject.h:201:3)':'struct TString::(anonymous at ./lobject.h:201:3)' lvalue ->tsv 0x561ce73f3520
|       `-ImplicitCastExpr 0x561ce746b888 <col:15> 'TString *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce746b860 <col:15> 'TString *' lvalue Var 0x561ce746a670 'ts' 'TString *'
`-IntegerLiteral 0x561ce746b910 <col:34> 'int' 0
[B9.26] > [B9.27]
   T: if [B9.28]
   Preds (1): B10
   Succs (2): B8 B7

 [B10]
   1: BinaryOperator 0x561ce746b4b0 </usr/include/ctype.h:89:3, llex.c:427:59> 'int' '||'
|-ParenExpr 0x561ce746b1e8 </usr/include/ctype.h:89:3, col:62> 'int'
| `-BinaryOperator 0x561ce746b1c0 <col:4, line:189:36> 'int' '&'
|   |-ImplicitCastExpr 0x561ce746b190 <line:89:4, col:33> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x561ce746b178 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x561ce746b0e8 <col:4, col:33> 'const unsigned short' lvalue
|   |     |-ImplicitCastExpr 0x561ce746b0d0 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|   |     | `-ParenExpr 0x561ce746af70 <col:4, col:22> 'const unsigned short *' lvalue
|   |     |   `-UnaryOperator 0x561ce746af50 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|   |     |     `-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
|   |     |       `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|   |     |         `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|   |     `-CStyleCastExpr 0x561ce746b0a8 <col:24, col:32> 'int' <NoOp>
|   |       `-ImplicitCastExpr 0x561ce746b090 <col:30, col:32> 'int' <LValueToRValue>
|   |         `-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
|   |           `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
|   |             `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
|   |               `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
|   |                 `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
|   `-ImplicitCastExpr 0x561ce746b1a8 </usr/include/ctype.h:89:37, line:189:36> 'int' <IntegralCast>
|     `-CStyleCastExpr 0x561ce746b150 <line:89:37, line:189:36> 'unsigned short' <IntegralCast>
|       `-DeclRefExpr 0x561ce746b110 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
`-BinaryOperator 0x561ce746b488 <llex.c:427:44, col:59> 'int' '=='
  |-ImplicitCastExpr 0x561ce746b470 <col:44, col:48> 'int' <LValueToRValue>
  | `-MemberExpr 0x561ce746b420 <col:44, col:48> 'int' lvalue ->current 0x561ce74267f0
  |   `-ImplicitCastExpr 0x561ce746b408 <col:44> 'LexState *' <LValueToRValue>
  |     `-DeclRefExpr 0x561ce746b3e0 <col:44> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
  `-CharacterLiteral 0x561ce746b458 <col:59> 'int' 95
([B12.17]) || [B11.6]
   T: do ... while [B10.1]
   Preds (2): B11 B12
   Succs (2): B17 B9

 [B11]
   1: DeclRefExpr 0x561ce746b3e0 <llex.c:427:44> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746b408 <llex.c:427:44> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746b3e0 <col:44> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B11.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746b420 <llex.c:427:44, col:48> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746b408 <col:44> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746b3e0 <col:44> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B11.2]->current
   4: ImplicitCastExpr 0x561ce746b470 <llex.c:427:44, col:48> 'int' <LValueToRValue>
`-MemberExpr 0x561ce746b420 <col:44, col:48> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce746b408 <col:44> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746b3e0 <col:44> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce746b458 <llex.c:427:59> 'int' 95
'_'
   6: BinaryOperator 0x561ce746b488 <llex.c:427:44, col:59> 'int' '=='
|-ImplicitCastExpr 0x561ce746b470 <col:44, col:48> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce746b420 <col:44, col:48> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce746b408 <col:44> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce746b3e0 <col:44> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce746b458 <col:59> 'int' 95
[B11.4] == [B11.5]
   Preds (1): B12
   Succs (1): B10

 [B12]
   1: DeclRefExpr 0x561ce746aee8 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce746af10 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce746af28 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B12.2]()
   4: UnaryOperator 0x561ce746af50 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B12.3]
   5: ImplicitCastExpr 0x561ce746b0d0 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce746af70 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce746af50 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B12.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce746af90 <llex.c:427:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce746afb8 <llex.c:427:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B12.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B12.7]->current
   9: ImplicitCastExpr 0x561ce746b090 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B12.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce746b0a8 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce746b090 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)[B12.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce746b0e8 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce746b0d0 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce746af70 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce746af50 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce746b0a8 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce746b090 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B12.5][[B12.10]]
  12: ImplicitCastExpr 0x561ce746b178 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce746b0e8 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce746b0d0 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce746af70 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce746af50 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce746b0a8 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce746b090 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B12.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce746b190 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce746b178 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce746b0e8 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce746b0d0 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce746af70 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce746af50 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce746b0a8 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce746b090 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B12.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce746b110 </usr/include/ctype.h:189:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
_ISalnum
  15: CStyleCastExpr 0x561ce746b150 </usr/include/ctype.h:89:37, line:189:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce746b110 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
(unsigned short)[B12.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce746b1a8 </usr/include/ctype.h:89:37, line:189:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce746b150 <line:89:37, line:189:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce746b110 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
[B12.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce746b1c0 </usr/include/ctype.h:89:4, line:189:36> 'int' '&'
|-ImplicitCastExpr 0x561ce746b190 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce746b178 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce746b0e8 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce746b0d0 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce746af70 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce746af50 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce746af28 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce746af10 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce746aee8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce746b0a8 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce746b090 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce746b070 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce746b008 <line:189:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce746afd0 <llex.c:427:28, col:32> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce746afb8 <col:28> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce746af90 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746b1a8 </usr/include/ctype.h:89:37, line:189:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce746b150 <line:89:37, line:189:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce746b110 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
[B12.13] & [B12.16]
   T: ([B12.17]) || ...
   Preds (1): B13
   Succs (2): B10 B11

 [B13]
   1: ConditionalOperator 0x561ce746adf0 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce746aa08 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce746a9b0 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce746a990 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce746a958 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce746a940 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce746a9f0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce746a9d0 <col:31> 'int' 0
|-ParenExpr 0x561ce746acd0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce746aca8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce746ac88 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce746ac20 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce746abf8 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce746abe0 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce746abc0 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce746ab58 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce746ab38 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce746ada8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce746ad90 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce746acf0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce746add8 <llex.c:426:27, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce746ad58 <line:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce746ad40 <line:426:27> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.18] ? ([B14.10]) : [B15.7]
   2: DeclRefExpr 0x561ce746a830 <llex.c:426:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce746a858 <llex.c:426:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a830 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B13.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce746a870 <llex.c:426:27, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746a858 <line:426:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746a830 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B13.3]->current
   5: BinaryOperator 0x561ce746ae40 <llex.c:426:27, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce746a870 <llex.c:426:27, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce746a858 <line:426:27> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce746a830 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce746ae20 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce746adf0 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce746aa08 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce746a9b0 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce746a990 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce746a958 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce746a940 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce746a9f0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce746a9d0 <col:31> 'int' 0
    |-ParenExpr 0x561ce746acd0 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce746aca8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce746ac88 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce746ac20 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce746abf8 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce746abe0 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce746abc0 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce746ab58 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce746ab38 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce746ada8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce746ad90 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce746acf0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce746add8 <llex.c:426:27, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce746ad58 <line:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce746ad40 <line:426:27> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B13.4] = ([B13.1])
   6: BinaryOperator 0x561ce746ae88 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce746a7c8 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce746a7b0 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce746a6e8 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce746a800 <line:426:27> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce746a710 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce746a818 <col:27, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce746a778 <line:426:27, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce746a760 <line:426:27> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce746a738 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce746ae68 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce746ae40 <line:426:27, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce746a870 <llex.c:426:27, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce746a858 <line:426:27> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce746a830 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-ParenExpr 0x561ce746ae20 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce746adf0 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce746aa08 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce746a9b0 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce746a990 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce746a958 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce746a940 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce746a9f0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce746a9d0 <col:31> 'int' 0
        |-ParenExpr 0x561ce746acd0 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce746aca8 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce746ac88 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce746ac20 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce746abf8 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce746abe0 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce746abc0 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce746ab58 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce746ab38 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
        `-CallExpr 0x561ce746ada8 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce746ad90 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce746acf0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce746add8 <llex.c:426:27, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce746ad58 <line:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce746ad40 <line:426:27> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
... , 
   Preds (2): B14 B15
   Succs (1): B12

 [B14]
   1: DeclRefExpr 0x561ce746aa30 <llex.c:426:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746aa58 <llex.c:426:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B14.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B14.2]->z
   4: ImplicitCastExpr 0x561ce746aac8 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B14.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce746aae0 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B14.4]->p
   6: UnaryOperator 0x561ce746ab18 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B14.5]++
   7: UnaryOperator 0x561ce746ab38 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B14.6]
   8: ImplicitCastExpr 0x561ce746abe0 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce746abc0 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce746ab58 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce746ab38 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B14.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce746abf8 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce746abe0 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce746abc0 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce746ab58 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce746ab38 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B14.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce746aca8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce746ac88 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce746ac20 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce746abf8 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce746abe0 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce746abc0 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce746ab58 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce746ab38 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce746ab18 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce746aae0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce746aac8 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce746aaa8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce746aa70 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce746aa58 <line:426:27> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce746aa30 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B14.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B16
   Succs (1): B13

 [B15]
   1: DeclRefExpr 0x561ce746acf0 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce746ad90 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746acf0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B15.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce746ad18 <llex.c:426:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce746ad40 <llex.c:426:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B15.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce746ad58 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce746ad40 <line:426:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B15.4]->z
   6: ImplicitCastExpr 0x561ce746add8 <llex.c:426:27, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce746ad58 <line:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce746ad40 <line:426:27> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B15.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce746ada8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce746ad90 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce746acf0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce746add8 <llex.c:426:27, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce746ad58 <line:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce746ad40 <line:426:27> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746ad18 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B15.2]([B15.6])
   Preds (1): B16
   Succs (1): B13

 [B16]
   1: DeclRefExpr 0x561ce746a6e8 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce746a7b0 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746a6e8 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B16.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce746a710 <llex.c:426:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce746a800 <llex.c:426:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a710 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce746a738 <llex.c:426:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce746a760 <llex.c:426:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a738 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce746a778 <llex.c:426:27, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746a760 <line:426:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746a738 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.6]->current
   8: ImplicitCastExpr 0x561ce746a818 <llex.c:426:27, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce746a778 <line:426:27, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce746a760 <line:426:27> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746a738 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce746a7c8 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce746a7b0 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce746a6e8 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce746a800 <line:426:27> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce746a710 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746a818 <col:27, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce746a778 <line:426:27, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce746a760 <line:426:27> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746a738 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.2]([B16.4], [B16.8])
  10: DeclRefExpr 0x561ce746a8a8 <llex.c:426:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce746a8d0 <llex.c:426:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.11]->z
  13: ImplicitCastExpr 0x561ce746a940 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B16.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce746a958 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce746a940 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.13]->n
  15: UnaryOperator 0x561ce746a990 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce746a958 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce746a940 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B16.14]--
  16: IntegerLiteral 0x561ce746a9d0 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce746a9f0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce746a9d0 <col:31> 'int' 0
[B16.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce746aa08 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce746a9b0 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce746a990 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce746a958 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce746a940 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce746a920 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce746a8e8 <llex.c:426:27, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce746a8d0 <line:426:27> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce746a8a8 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746a9f0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce746a9d0 <col:31> 'int' 0
([B16.15]) > [B16.17]
   T: [B16.18] ? ... : ...
   Preds (2): B17 B18
   Succs (2): B14 B15

 [B17]
   Preds (1): B10
   Succs (1): B16

 [B18]
   1: DeclStmt 0x561ce746a6d0 <llex.c:424:11, col:22>col:20
`-VarDecl 0x561ce746a670 <col:11, col:20> col:20 used ts 'TString *'
TString *ts;
   Preds (2): B19 B20
   Succs (1): B16

 [B19]
   1: DeclRefExpr 0x561ce746a568 <llex.c:422:42> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce746a590 <llex.c:422:42> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a568 <col:42> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B19.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce746a5a8 <llex.c:422:42, col:46> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746a590 <col:42> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746a568 <col:42> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B19.2]->current
   4: ImplicitCastExpr 0x561ce746a5f8 <llex.c:422:42, col:46> 'int' <LValueToRValue>
`-MemberExpr 0x561ce746a5a8 <col:42, col:46> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce746a590 <col:42> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce746a568 <col:42> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B19.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce746a5e0 <llex.c:422:57> 'int' 95
'_'
   6: BinaryOperator 0x561ce746a610 <llex.c:422:42, col:57> 'int' '=='
|-ImplicitCastExpr 0x561ce746a5f8 <col:42, col:46> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce746a5a8 <col:42, col:46> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce746a590 <col:42> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce746a568 <col:42> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce746a5e0 <col:57> 'int' 95
[B19.4] == [B19.5]
   T: if ([B20.17]) || [B19.6]
   Preds (1): B20
   Succs (2): B18 B6

 [B20]
   1: DeclRefExpr 0x561ce746a248 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce746a270 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B20.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce746a288 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B20.2]()
   4: UnaryOperator 0x561ce746a2b0 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce746a288 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B20.3]
   5: ImplicitCastExpr 0x561ce746a430 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce746a2d0 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce746a2b0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce746a288 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B20.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce746a2f0 <llex.c:422:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce746a318 <llex.c:422:26> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B20.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B20.7]->current
   9: ImplicitCastExpr 0x561ce746a3f0 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce746a3d0 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce746a368 <line:190:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B20.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce746a408 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce746a3f0 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce746a3d0 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce746a368 <line:190:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)[B20.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce746a448 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce746a430 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce746a2d0 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce746a2b0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce746a288 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce746a408 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce746a3f0 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce746a3d0 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce746a368 <line:190:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B20.5][[B20.10]]
  12: ImplicitCastExpr 0x561ce746a4d8 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce746a448 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce746a430 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce746a2d0 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce746a2b0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce746a288 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce746a408 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce746a3f0 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce746a3d0 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce746a368 <line:190:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B20.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce746a4f0 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce746a4d8 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce746a448 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce746a430 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce746a2d0 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce746a2b0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce746a288 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce746a408 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce746a3f0 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce746a3d0 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce746a368 <line:190:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B20.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce746a470 </usr/include/ctype.h:190:36> 'int' EnumConstant 0x561ce73051c0 '_ISalpha' 'int'
_ISalpha
  15: CStyleCastExpr 0x561ce746a4b0 </usr/include/ctype.h:89:37, line:190:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce746a470 <col:36> 'int' EnumConstant 0x561ce73051c0 '_ISalpha' 'int'
(unsigned short)[B20.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce746a508 </usr/include/ctype.h:89:37, line:190:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce746a4b0 <line:89:37, line:190:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce746a470 <col:36> 'int' EnumConstant 0x561ce73051c0 '_ISalpha' 'int'
[B20.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce746a520 </usr/include/ctype.h:89:4, line:190:36> 'int' '&'
|-ImplicitCastExpr 0x561ce746a4f0 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce746a4d8 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce746a448 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce746a430 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce746a2d0 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce746a2b0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce746a288 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce746a270 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce746a248 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce746a408 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce746a3f0 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce746a3d0 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce746a368 <line:190:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce746a330 <llex.c:422:26, col:30> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce746a318 <col:26> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce746a2f0 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746a508 </usr/include/ctype.h:89:37, line:190:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce746a4b0 <line:89:37, line:190:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce746a470 <col:36> 'int' EnumConstant 0x561ce73051c0 '_ISalpha' 'int'
[B20.13] & [B20.16]
   T: ([B20.17]) || ...
   Preds (1): B22
   Succs (2): B18 B19

 [B21]
   1: DeclRefExpr 0x561ce746a0f0 <llex.c:419:11> 'void (LexState *, SemInfo *)' Function 0x561ce7452d18 'read_numeral' 'void (LexState *, SemInfo *)'
read_numeral
   2: ImplicitCastExpr 0x561ce746a168 <llex.c:419:11> 'void (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce746a0f0 <col:11> 'void (LexState *, SemInfo *)' Function 0x561ce7452d18 'read_numeral' 'void (LexState *, SemInfo *)'
[B21.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, SemInfo *))
   3: DeclRefExpr 0x561ce746a118 <llex.c:419:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce746a1b8 <llex.c:419:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a118 <col:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B21.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce746a140 <llex.c:419:28> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
seminfo
   6: ImplicitCastExpr 0x561ce746a1d0 <llex.c:419:28> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce746a140 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B21.5] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   7: CallExpr 0x561ce746a180 <llex.c:419:11, col:35> 'void'
|-ImplicitCastExpr 0x561ce746a168 <col:11> 'void (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce746a0f0 <col:11> 'void (LexState *, SemInfo *)' Function 0x561ce7452d18 'read_numeral' 'void (LexState *, SemInfo *)'
|-ImplicitCastExpr 0x561ce746a1b8 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce746a118 <col:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746a1d0 <col:28> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce746a140 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B21.2]([B21.4], [B21.6])
   8: DeclRefExpr 0x561ce746a1e8 <llex.c:420:18> 'int' EnumConstant 0x561ce7424ea8 'TK_NUMBER' 'int'
TK_NUMBER
   9: ReturnStmt 0x561ce746a210 <llex.c:420:11, col:18>
`-DeclRefExpr 0x561ce746a1e8 <col:18> 'int' EnumConstant 0x561ce7424ea8 'TK_NUMBER' 'int'
return [B21.8];
   Preds (1): B22
   Succs (1): B0

 [B22]
   1: DeclRefExpr 0x561ce7469dd0 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce7469df8 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B22.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce7469e10 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B22.2]()
   4: UnaryOperator 0x561ce7469e38 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce7469e10 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B22.3]
   5: ImplicitCastExpr 0x561ce7469fb8 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce7469e58 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce7469e38 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce7469e10 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B22.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce7469e78 <llex.c:418:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7469ea0 <llex.c:418:26> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B22.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B22.7]->current
   9: ImplicitCastExpr 0x561ce7469f78 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce7469f58 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce7469ef0 <line:192:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B22.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce7469f90 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce7469f78 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce7469f58 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce7469ef0 <line:192:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)[B22.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce7469fd0 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce7469fb8 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce7469e58 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce7469e38 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce7469e10 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce7469f90 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce7469f78 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce7469f58 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce7469ef0 <line:192:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B22.5][[B22.10]]
  12: ImplicitCastExpr 0x561ce746a060 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce7469fd0 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce7469fb8 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce7469e58 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce7469e38 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce7469e10 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce7469f90 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce7469f78 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce7469f58 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce7469ef0 <line:192:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B22.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce746a078 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce746a060 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce7469fd0 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce7469fb8 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce7469e58 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce7469e38 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce7469e10 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce7469f90 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce7469f78 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce7469f58 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce7469ef0 <line:192:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B22.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce7469ff8 </usr/include/ctype.h:192:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
_ISdigit
  15: CStyleCastExpr 0x561ce746a038 </usr/include/ctype.h:89:37, line:192:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce7469ff8 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
(unsigned short)[B22.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce746a090 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce746a038 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce7469ff8 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B22.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce746a0a8 </usr/include/ctype.h:89:4, line:192:36> 'int' '&'
|-ImplicitCastExpr 0x561ce746a078 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce746a060 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce7469fd0 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce7469fb8 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce7469e58 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce7469e38 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce7469e10 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce7469df8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce7469dd0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce7469f90 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce7469f78 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce7469f58 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce7469ef0 <line:192:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce7469eb8 <llex.c:418:26, col:30> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce7469ea0 <col:26> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce7469e78 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce746a090 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce746a038 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce7469ff8 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B22.13] & [B22.16]
   T: if ([B22.17])
   Preds (1): B27
   Succs (2): B21 B20

 [B23]
   1: ConditionalOperator 0x561ce7469d08 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7469920 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce74698c8 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74698a8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7469870 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7469858 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7469838 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7469908 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce74698e8 <col:31> 'int' 0
|-ParenExpr 0x561ce7469be8 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7469bc0 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7469ba0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7469b38 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7469b10 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7469af8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7469ad8 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7469a70 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7469a50 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7469a30 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7469cc0 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7469ca8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7469c08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7469cf0 <llex.c:415:16, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7469c70 <line:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7469c58 <line:415:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7469c30 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B26.11] ? ([B24.10]) : [B25.7]
   2: DeclRefExpr 0x561ce7469748 <llex.c:415:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7469770 <llex.c:415:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7469748 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B23.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7469788 <llex.c:415:16, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7469770 <line:415:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7469748 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B23.3]->current
   5: BinaryOperator 0x561ce7469d58 <llex.c:415:16, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7469788 <llex.c:415:16, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7469770 <line:415:16> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7469748 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7469d38 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7469d08 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7469920 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce74698c8 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74698a8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7469870 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7469858 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7469838 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7469908 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce74698e8 <col:31> 'int' 0
    |-ParenExpr 0x561ce7469be8 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7469bc0 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7469ba0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7469b38 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7469b10 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7469af8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7469ad8 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7469a70 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7469a50 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7469a30 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7469cc0 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7469ca8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7469c08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7469cf0 <llex.c:415:16, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7469c70 <line:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7469c58 <line:415:16> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7469c30 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B23.4] = ([B23.1])
   T: continue;
   Preds (2): B24 B25
   Succs (1): B1

 [B24]
   1: DeclRefExpr 0x561ce7469948 <llex.c:415:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7469970 <llex.c:415:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B24.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B24.2]->z
   4: ImplicitCastExpr 0x561ce74699e0 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B24.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce74699f8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B24.4]->p
   6: UnaryOperator 0x561ce7469a30 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B24.5]++
   7: UnaryOperator 0x561ce7469a50 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7469a30 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B24.6]
   8: ImplicitCastExpr 0x561ce7469af8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7469ad8 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7469a70 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7469a50 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7469a30 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B24.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7469b10 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7469af8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7469ad8 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7469a70 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7469a50 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7469a30 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B24.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7469bc0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7469ba0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7469b38 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7469b10 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7469af8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7469ad8 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7469a70 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7469a50 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7469a30 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce74699f8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce74699e0 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce74699c0 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7469988 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7469970 <line:415:16> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7469948 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B24.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B26
   Succs (1): B23

 [B25]
   1: DeclRefExpr 0x561ce7469c08 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7469ca8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7469c08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B25.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7469c30 <llex.c:415:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7469c58 <llex.c:415:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7469c30 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B25.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7469c70 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7469c58 <line:415:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7469c30 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B25.4]->z
   6: ImplicitCastExpr 0x561ce7469cf0 <llex.c:415:16, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7469c70 <line:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7469c58 <line:415:16> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7469c30 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B25.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7469cc0 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7469ca8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7469c08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7469cf0 <llex.c:415:16, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7469c70 <line:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7469c58 <line:415:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7469c30 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B25.2]([B25.6])
   Preds (1): B26
   Succs (1): B23

 [B26]
   1: IntegerLiteral 0x561ce74696d0 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x561ce7469700 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x561ce74696d0 <col:31> 'int' 0
(void)[B26.1] (CStyleCastExpr, ToVoid, void)
   3: DeclRefExpr 0x561ce74697c0 <llex.c:415:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74697e8 <llex.c:415:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B26.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B26.4]->z
   6: ImplicitCastExpr 0x561ce7469858 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7469838 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B26.5]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: MemberExpr 0x561ce7469870 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7469858 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7469838 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B26.6]->n
   8: UnaryOperator 0x561ce74698a8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7469870 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7469858 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7469838 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B26.7]--
   9: IntegerLiteral 0x561ce74698e8 <./lzio.h:22:31> 'int' 0
0
  10: ImplicitCastExpr 0x561ce7469908 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce74698e8 <col:31> 'int' 0
[B26.9] (ImplicitCastExpr, IntegralCast, unsigned long)
  11: BinaryOperator 0x561ce7469920 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce74698c8 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74698a8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7469870 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7469858 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7469838 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7469800 <llex.c:415:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce74697e8 <line:415:16> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74697c0 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7469908 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce74698e8 <col:31> 'int' 0
([B26.8]) > [B26.10]
   T: [B26.11] ? ... : ...
   Preds (1): B27
   Succs (2): B24 B25

 [B27]
  default:
   1: DeclRefExpr 0x561ce74693b0 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce74693d8 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B27.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce74693f0 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B27.2]()
   4: UnaryOperator 0x561ce7469418 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce74693f0 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B27.3]
   5: ImplicitCastExpr 0x561ce7469598 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce7469438 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce7469418 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce74693f0 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B27.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce7469458 <llex.c:413:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7469480 <llex.c:413:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B27.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B27.7]->current
   9: ImplicitCastExpr 0x561ce7469558 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce7469538 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce74694d0 <line:197:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B27.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce7469570 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce7469558 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce7469538 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce74694d0 <line:197:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)[B27.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce74695b0 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce7469598 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce7469438 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce7469418 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce74693f0 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce7469570 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce7469558 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce7469538 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce74694d0 <line:197:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B27.5][[B27.10]]
  12: ImplicitCastExpr 0x561ce7469640 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce74695b0 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce7469598 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce7469438 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce7469418 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce74693f0 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce7469570 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce7469558 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce7469538 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce74694d0 <line:197:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B27.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce7469658 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce7469640 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce74695b0 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce7469598 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce7469438 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce7469418 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce74693f0 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce7469570 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce7469558 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce7469538 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce74694d0 <line:197:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B27.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce74695d8 </usr/include/ctype.h:197:36> 'int' EnumConstant 0x561ce7305b90 '_ISspace' 'int'
_ISspace
  15: CStyleCastExpr 0x561ce7469618 </usr/include/ctype.h:89:37, line:197:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce74695d8 <col:36> 'int' EnumConstant 0x561ce7305b90 '_ISspace' 'int'
(unsigned short)[B27.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce7469670 </usr/include/ctype.h:89:37, line:197:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce7469618 <line:89:37, line:197:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce74695d8 <col:36> 'int' EnumConstant 0x561ce7305b90 '_ISspace' 'int'
[B27.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce7469688 </usr/include/ctype.h:89:4, line:197:36> 'int' '&'
|-ImplicitCastExpr 0x561ce7469658 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce7469640 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce74695b0 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce7469598 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce7469438 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce7469418 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce74693f0 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce74693d8 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce74693b0 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce7469570 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce7469558 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce7469538 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce74694d0 <line:197:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce7469498 <llex.c:413:21, col:25> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce7469480 <col:21> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce7469458 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7469670 </usr/include/ctype.h:89:37, line:197:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce7469618 <line:89:37, line:197:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce74695d8 <col:36> 'int' EnumConstant 0x561ce7305b90 '_ISspace' 'int'
[B27.13] & [B27.16]
   T: if ([B27.17])
   Preds (1): B2
   Succs (2): B26 B22

 [B28]
  case (-1):
   1: DeclRefExpr 0x561ce7469358 <llex.c:410:16> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
TK_EOS
   2: ReturnStmt 0x561ce7469380 <llex.c:410:9, col:16>
`-DeclRefExpr 0x561ce7469358 <col:16> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
return [B28.1];
   Preds (1): B2
   Succs (1): B0

 [B29]
   1: DeclRefExpr 0x561ce74690b8 <llex.c:405:11> 'void (LexState *, SemInfo *)' Function 0x561ce7452d18 'read_numeral' 'void (LexState *, SemInfo *)'
read_numeral
   2: ImplicitCastExpr 0x561ce7469130 <llex.c:405:11> 'void (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74690b8 <col:11> 'void (LexState *, SemInfo *)' Function 0x561ce7452d18 'read_numeral' 'void (LexState *, SemInfo *)'
[B29.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, SemInfo *))
   3: DeclRefExpr 0x561ce74690e0 <llex.c:405:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7469180 <llex.c:405:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74690e0 <col:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B29.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7469108 <llex.c:405:28> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
seminfo
   6: ImplicitCastExpr 0x561ce7469198 <llex.c:405:28> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7469108 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B29.5] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   7: CallExpr 0x561ce7469148 <llex.c:405:11, col:35> 'void'
|-ImplicitCastExpr 0x561ce7469130 <col:11> 'void (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74690b8 <col:11> 'void (LexState *, SemInfo *)' Function 0x561ce7452d18 'read_numeral' 'void (LexState *, SemInfo *)'
|-ImplicitCastExpr 0x561ce7469180 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74690e0 <col:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7469198 <col:28> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7469108 <col:28> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B29.2]([B29.4], [B29.6])
   8: DeclRefExpr 0x561ce74691b0 <llex.c:406:18> 'int' EnumConstant 0x561ce7424ea8 'TK_NUMBER' 'int'
TK_NUMBER
   9: ReturnStmt 0x561ce74691d8 <llex.c:406:11, col:18>
`-DeclRefExpr 0x561ce74691b0 <col:18> 'int' EnumConstant 0x561ce7424ea8 'TK_NUMBER' 'int'
return [B29.8];
   Preds (1): B31
   Succs (1): B0

 [B30]
   1: CharacterLiteral 0x561ce7469088 <llex.c:403:48> 'int' 46
'.'
   2: ReturnStmt 0x561ce74690a0 <llex.c:403:41, col:48>
`-CharacterLiteral 0x561ce7469088 <col:48> 'int' 46
return [B30.1];
   Preds (1): B31
   Succs (1): B0

 [B31]
   1: DeclRefExpr 0x561ce7468d48 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce7468d70 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B31.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce7468d88 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B31.2]()
   4: UnaryOperator 0x561ce7468db0 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B31.3]
   5: ImplicitCastExpr 0x561ce7468f30 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce7468dd0 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce7468db0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B31.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce7468df0 <llex.c:403:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7468e18 <llex.c:403:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B31.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B31.7]->current
   9: ImplicitCastExpr 0x561ce7468ef0 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B31.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce7468f08 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce7468ef0 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)[B31.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce7468f48 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce7468f30 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce7468dd0 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce7468db0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce7468f08 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce7468ef0 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B31.5][[B31.10]]
  12: ImplicitCastExpr 0x561ce7468fd8 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce7468f48 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce7468f30 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce7468dd0 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce7468db0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce7468f08 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce7468ef0 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B31.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce7468ff0 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce7468fd8 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce7468f48 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce7468f30 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce7468dd0 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce7468db0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce7468f08 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce7468ef0 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B31.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce7468f70 </usr/include/ctype.h:192:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
_ISdigit
  15: CStyleCastExpr 0x561ce7468fb0 </usr/include/ctype.h:89:37, line:192:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce7468f70 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
(unsigned short)[B31.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce7469008 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce7468fb0 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce7468f70 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B31.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce7469020 </usr/include/ctype.h:89:4, line:192:36> 'int' '&'
|-ImplicitCastExpr 0x561ce7468ff0 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce7468fd8 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce7468f48 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce7468f30 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce7468dd0 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce7468db0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce7468f08 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce7468ef0 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7469008 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce7468fb0 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce7468f70 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B31.13] & [B31.16]
  18: UnaryOperator 0x561ce7469068 <llex.c:403:18, /usr/include/ctype.h:89:62> 'int' prefix '!'
`-ParenExpr 0x561ce7469048 <col:3, col:62> 'int'
  `-BinaryOperator 0x561ce7469020 <col:4, line:192:36> 'int' '&'
    |-ImplicitCastExpr 0x561ce7468ff0 <line:89:4, col:33> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x561ce7468fd8 <col:4, col:33> 'unsigned short' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x561ce7468f48 <col:4, col:33> 'const unsigned short' lvalue
    |     |-ImplicitCastExpr 0x561ce7468f30 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    |     | `-ParenExpr 0x561ce7468dd0 <col:4, col:22> 'const unsigned short *' lvalue
    |     |   `-UnaryOperator 0x561ce7468db0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     |     `-CallExpr 0x561ce7468d88 <col:6, col:21> 'const unsigned short **'
    |     |       `-ImplicitCastExpr 0x561ce7468d70 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |     |         `-DeclRefExpr 0x561ce7468d48 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    |     `-CStyleCastExpr 0x561ce7468f08 <col:24, col:32> 'int' <NoOp>
    |       `-ImplicitCastExpr 0x561ce7468ef0 <col:30, col:32> 'int' <LValueToRValue>
    |         `-ParenExpr 0x561ce7468ed0 <col:30, col:32> 'int' lvalue
    |           `-ParenExpr 0x561ce7468e68 <line:192:31, col:33> 'int' lvalue
    |             `-MemberExpr 0x561ce7468e30 <llex.c:403:27, col:31> 'int' lvalue ->current 0x561ce74267f0
    |               `-ImplicitCastExpr 0x561ce7468e18 <col:27> 'LexState *' <LValueToRValue>
    |                 `-DeclRefExpr 0x561ce7468df0 <col:27> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-ImplicitCastExpr 0x561ce7469008 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
      `-CStyleCastExpr 0x561ce7468fb0 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
        `-DeclRefExpr 0x561ce7468f70 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
!([B31.17])
   T: if [B31.18]
   Preds (1): B35
   Succs (2): B30 B29

 [B32]
   1: DeclRefExpr 0x561ce7468cb8 <llex.c:401:23> 'int' EnumConstant 0x561ce7424cf8 'TK_CONCAT' 'int'
TK_CONCAT
   2: ReturnStmt 0x561ce7468ce0 <llex.c:401:16, col:23>
`-DeclRefExpr 0x561ce7468cb8 <col:23> 'int' EnumConstant 0x561ce7424cf8 'TK_CONCAT' 'int'
return [B32.1];
   Preds (1): B34
   Succs (1): B0

 [B33]
   1: DeclRefExpr 0x561ce7468c78 <llex.c:400:20> 'int' EnumConstant 0x561ce7424d40 'TK_DOTS' 'int'
TK_DOTS
   2: ReturnStmt 0x561ce7468ca0 <llex.c:400:13, col:20>
`-DeclRefExpr 0x561ce7468c78 <col:20> 'int' EnumConstant 0x561ce7424d40 'TK_DOTS' 'int'
return [B33.1];
   Preds (1): B34
   Succs (1): B0

 [B34]
   1: DeclRefExpr 0x561ce7468b60 <llex.c:399:15> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
check_next
   2: ImplicitCastExpr 0x561ce7468be0 <llex.c:399:15> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7468b60 <col:15> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
[B34.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, const char *))
   3: DeclRefExpr 0x561ce7468b88 <llex.c:399:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7468c30 <llex.c:399:26> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468b88 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B34.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce7468bb0 <llex.c:399:30> 'char [2]' lvalue "."
"."
   6: ImplicitCastExpr 0x561ce7468c48 <llex.c:399:30> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7468bb0 <col:30> 'char [2]' lvalue "."
[B34.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce7468c60 <llex.c:399:30> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7468c48 <col:30> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7468bb0 <col:30> 'char [2]' lvalue "."
[B34.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x561ce7468bf8 <llex.c:399:15, col:33> 'int'
|-ImplicitCastExpr 0x561ce7468be0 <col:15> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7468b60 <col:15> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
|-ImplicitCastExpr 0x561ce7468c30 <col:26> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7468b88 <col:26> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7468c60 <col:30> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x561ce7468c48 <col:30> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561ce7468bb0 <col:30> 'char [2]' lvalue "."
[B34.2]([B34.4], [B34.7])
   T: if [B34.8]
   Preds (1): B35
   Succs (2): B33 B32

 [B35]
   1: ConditionalOperator 0x561ce7468930 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7468548 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce74684f0 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74684d0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7468498 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7468480 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7468530 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7468510 <col:31> 'int' 0
|-ParenExpr 0x561ce7468810 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce74687e8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74687c8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7468760 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7468738 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7468720 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7468700 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7468698 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7468678 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce74688e8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74688d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7468830 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7468918 <llex.c:397:23, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7468898 <line:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7468880 <line:397:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.18] ? ([B36.10]) : [B37.7]
   2: DeclRefExpr 0x561ce7468370 <llex.c:397:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7468398 <llex.c:397:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468370 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B35.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce74683b0 <llex.c:397:23, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7468398 <line:397:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7468370 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B35.3]->current
   5: BinaryOperator 0x561ce7468980 <llex.c:397:23, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce74683b0 <llex.c:397:23, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7468398 <line:397:23> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7468370 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7468960 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7468930 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7468548 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce74684f0 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74684d0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7468498 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7468480 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7468530 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7468510 <col:31> 'int' 0
    |-ParenExpr 0x561ce7468810 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce74687e8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74687c8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7468760 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7468738 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7468720 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7468700 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7468698 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7468678 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce74688e8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74688d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7468830 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7468918 <llex.c:397:23, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7468898 <line:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7468880 <line:397:23> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B35.4] = ([B35.1])
   6: BinaryOperator 0x561ce74689c8 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7468308 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce74682f0 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7468228 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7468340 <line:397:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7468250 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7468358 <col:23, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce74682b8 <line:397:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce74682a0 <line:397:23> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7468278 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce74689a8 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7468980 <line:397:23, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce74683b0 <llex.c:397:23, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7468398 <line:397:23> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7468370 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-ParenExpr 0x561ce7468960 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7468930 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7468548 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce74684f0 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce74684d0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7468498 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7468480 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7468530 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7468510 <col:31> 'int' 0
        |-ParenExpr 0x561ce7468810 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce74687e8 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce74687c8 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7468760 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7468738 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7468720 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7468700 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce7468698 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7468678 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
        `-CallExpr 0x561ce74688e8 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce74688d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7468830 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7468918 <llex.c:397:23, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce7468898 <line:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce7468880 <line:397:23> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
... , 
   7: DeclRefExpr 0x561ce7468a10 <llex.c:398:13> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
check_next
   8: ImplicitCastExpr 0x561ce7468ac8 <llex.c:398:13> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7468a10 <col:13> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
[B35.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, const char *))
   9: DeclRefExpr 0x561ce7468a38 <llex.c:398:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce7468b18 <llex.c:398:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468a38 <col:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B35.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: StringLiteral 0x561ce7468a98 <llex.c:398:28> 'char [2]' lvalue "."
"."
  12: ImplicitCastExpr 0x561ce7468b30 <llex.c:398:28> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7468a98 <col:28> 'char [2]' lvalue "."
[B35.11] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  13: ImplicitCastExpr 0x561ce7468b48 <llex.c:398:28> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7468b30 <col:28> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7468a98 <col:28> 'char [2]' lvalue "."
[B35.12] (ImplicitCastExpr, BitCast, const char *)
  14: CallExpr 0x561ce7468ae0 <llex.c:398:13, col:31> 'int'
|-ImplicitCastExpr 0x561ce7468ac8 <col:13> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7468a10 <col:13> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
|-ImplicitCastExpr 0x561ce7468b18 <col:24> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7468a38 <col:24> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7468b48 <col:28> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x561ce7468b30 <col:28> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561ce7468a98 <col:28> 'char [2]' lvalue "."
[B35.8]([B35.10], [B35.13])
   T: if [B35.14]
   Preds (2): B36 B37
   Succs (2): B34 B31

 [B36]
   1: DeclRefExpr 0x561ce7468570 <llex.c:397:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7468598 <llex.c:397:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B36.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B36.2]->z
   4: ImplicitCastExpr 0x561ce7468608 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B36.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7468620 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B36.4]->p
   6: UnaryOperator 0x561ce7468658 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B36.5]++
   7: UnaryOperator 0x561ce7468678 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B36.6]
   8: ImplicitCastExpr 0x561ce7468720 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7468700 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7468698 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7468678 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B36.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7468738 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7468720 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7468700 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7468698 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7468678 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B36.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce74687e8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74687c8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7468760 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7468738 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7468720 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7468700 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7468698 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7468678 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7468658 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7468620 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7468608 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce74685e8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74685b0 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7468598 <line:397:23> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7468570 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B36.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B38
   Succs (1): B35

 [B37]
   1: DeclRefExpr 0x561ce7468830 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74688d0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7468830 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B37.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7468858 <llex.c:397:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7468880 <llex.c:397:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B37.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7468898 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7468880 <line:397:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B37.4]->z
   6: ImplicitCastExpr 0x561ce7468918 <llex.c:397:23, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7468898 <line:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7468880 <line:397:23> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B37.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce74688e8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74688d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7468830 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7468918 <llex.c:397:23, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7468898 <line:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7468880 <line:397:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7468858 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B37.2]([B37.6])
   Preds (1): B38
   Succs (1): B35

 [B38]
  case '.':
   1: DeclRefExpr 0x561ce7468228 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce74682f0 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7468228 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B38.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7468250 <llex.c:397:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7468340 <llex.c:397:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468250 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7468278 <llex.c:397:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce74682a0 <llex.c:397:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468278 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce74682b8 <llex.c:397:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74682a0 <line:397:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7468278 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.6]->current
   8: ImplicitCastExpr 0x561ce7468358 <llex.c:397:23, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce74682b8 <line:397:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce74682a0 <line:397:23> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7468278 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7468308 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce74682f0 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7468228 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7468340 <line:397:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7468250 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7468358 <col:23, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce74682b8 <line:397:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce74682a0 <line:397:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7468278 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.2]([B38.4], [B38.8])
  10: DeclRefExpr 0x561ce74683e8 <llex.c:397:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7468410 <llex.c:397:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.11]->z
  13: ImplicitCastExpr 0x561ce7468480 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B38.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7468498 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7468480 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.13]->n
  15: UnaryOperator 0x561ce74684d0 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7468498 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7468480 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B38.14]--
  16: IntegerLiteral 0x561ce7468510 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7468530 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7468510 <col:31> 'int' 0
[B38.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7468548 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce74684f0 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74684d0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7468498 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7468480 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7468460 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7468428 <llex.c:397:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7468410 <line:397:23> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74683e8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7468530 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7468510 <col:31> 'int' 0
([B38.15]) > [B38.17]
   T: [B38.18] ? ... : ...
   Preds (1): B2
   Succs (2): B36 B37

 [B39]
  case '"':
   Preds (1): B2
   Succs (1): B40

 [B40]
  case '\'':
   1: DeclRefExpr 0x561ce7467f88 <llex.c:393:9> 'void (LexState *, int, SemInfo *)' Function 0x561ce745b6a0 'read_string' 'void (LexState *, int, SemInfo *)'
read_string
   2: ImplicitCastExpr 0x561ce74680d8 <llex.c:393:9> 'void (*)(LexState *, int, SemInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7467f88 <col:9> 'void (LexState *, int, SemInfo *)' Function 0x561ce745b6a0 'read_string' 'void (LexState *, int, SemInfo *)'
[B40.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, SemInfo *))
   3: DeclRefExpr 0x561ce7467fb0 <llex.c:393:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7468130 <llex.c:393:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467fb0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B40.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7467fd8 <llex.c:393:25> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7468000 <llex.c:393:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467fd8 <col:25> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B40.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7468018 <llex.c:393:25, col:29> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7468000 <col:25> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7467fd8 <col:25> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B40.6]->current
   8: ImplicitCastExpr 0x561ce7468148 <llex.c:393:25, col:29> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7468018 <col:25, col:29> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7468000 <col:25> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7467fd8 <col:25> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B40.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x561ce7468050 <llex.c:393:38> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
seminfo
  10: ImplicitCastExpr 0x561ce7468160 <llex.c:393:38> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7468050 <col:38> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B40.9] (ImplicitCastExpr, LValueToRValue, SemInfo *)
  11: CallExpr 0x561ce74680f0 <llex.c:393:9, col:45> 'void'
|-ImplicitCastExpr 0x561ce74680d8 <col:9> 'void (*)(LexState *, int, SemInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7467f88 <col:9> 'void (LexState *, int, SemInfo *)' Function 0x561ce745b6a0 'read_string' 'void (LexState *, int, SemInfo *)'
|-ImplicitCastExpr 0x561ce7468130 <col:21> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7467fb0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7468148 <col:25, col:29> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7468018 <col:25, col:29> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7468000 <col:25> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7467fd8 <col:25> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7468160 <col:38> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7468050 <col:38> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B40.2]([B40.4], [B40.8], [B40.10])
  12: DeclRefExpr 0x561ce7468178 <llex.c:394:16> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
TK_STRING
  13: ReturnStmt 0x561ce74681a0 <llex.c:394:9, col:16>
`-DeclRefExpr 0x561ce7468178 <col:16> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
return [B40.12];
   Preds (2): B2 B39
   Succs (1): B0

 [B41]
   1: ConditionalOperator 0x561ce7467d98 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce74679b0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7467958 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7467938 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7467900 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce74678e8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce74678c8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7467998 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7467978 <col:31> 'int' 0
|-ParenExpr 0x561ce7467c78 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7467c50 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7467c30 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7467bc8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7467ba0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7467b88 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7467b68 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7467b00 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7467ae0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7467ac0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7467d50 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7467d38 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7467c98 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7467d80 <llex.c:389:21, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7467d00 <line:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7467ce8 <line:389:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7467cc0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B44.9] ? ([B42.10]) : [B43.7]
   2: DeclRefExpr 0x561ce74677d8 <llex.c:389:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7467800 <llex.c:389:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74677d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B41.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7467818 <llex.c:389:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7467800 <line:389:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74677d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B41.3]->current
   5: BinaryOperator 0x561ce7467de8 <llex.c:389:21, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7467818 <llex.c:389:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7467800 <line:389:21> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce74677d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7467dc8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7467d98 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce74679b0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7467958 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7467938 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7467900 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce74678e8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce74678c8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7467998 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7467978 <col:31> 'int' 0
    |-ParenExpr 0x561ce7467c78 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7467c50 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7467c30 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7467bc8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7467ba0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7467b88 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7467b68 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7467b00 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7467ae0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7467ac0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7467d50 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7467d38 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7467c98 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7467d80 <llex.c:389:21, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7467d00 <line:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7467ce8 <line:389:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7467cc0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B41.4] = ([B41.1])
   6: DeclRefExpr 0x561ce7467e30 <llex.c:389:33> 'int' EnumConstant 0x561ce7424e60 'TK_NE' 'int'
TK_NE
   7: ReturnStmt 0x561ce7467e58 <llex.c:389:26, col:33>
`-DeclRefExpr 0x561ce7467e30 <col:33> 'int' EnumConstant 0x561ce7424e60 'TK_NE' 'int'
return [B41.6];
   Preds (2): B42 B43
   Succs (1): B0

 [B42]
   1: DeclRefExpr 0x561ce74679d8 <llex.c:389:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7467a00 <llex.c:389:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B42.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B42.2]->z
   4: ImplicitCastExpr 0x561ce7467a70 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B42.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7467a88 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B42.4]->p
   6: UnaryOperator 0x561ce7467ac0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B42.5]++
   7: UnaryOperator 0x561ce7467ae0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7467ac0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B42.6]
   8: ImplicitCastExpr 0x561ce7467b88 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7467b68 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7467b00 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7467ae0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7467ac0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B42.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7467ba0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7467b88 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7467b68 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7467b00 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7467ae0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7467ac0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B42.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7467c50 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7467c30 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7467bc8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7467ba0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7467b88 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7467b68 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7467b00 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7467ae0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7467ac0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7467a88 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7467a70 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7467a50 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7467a18 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7467a00 <line:389:21> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce74679d8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B42.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B44
   Succs (1): B41

 [B43]
   1: DeclRefExpr 0x561ce7467c98 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7467d38 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7467c98 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B43.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7467cc0 <llex.c:389:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7467ce8 <llex.c:389:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467cc0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B43.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7467d00 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7467ce8 <line:389:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7467cc0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B43.4]->z
   6: ImplicitCastExpr 0x561ce7467d80 <llex.c:389:21, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7467d00 <line:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7467ce8 <line:389:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7467cc0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B43.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7467d50 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7467d38 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7467c98 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7467d80 <llex.c:389:21, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7467d00 <line:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7467ce8 <line:389:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7467cc0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B43.2]([B43.6])
   Preds (1): B44
   Succs (1): B41

 [B44]
   1: DeclRefExpr 0x561ce7467850 <llex.c:389:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7467878 <llex.c:389:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B44.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B44.2]->z
   4: ImplicitCastExpr 0x561ce74678e8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74678c8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B44.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7467900 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce74678e8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74678c8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B44.4]->n
   6: UnaryOperator 0x561ce7467938 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7467900 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce74678e8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74678c8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B44.5]--
   7: IntegerLiteral 0x561ce7467978 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7467998 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7467978 <col:31> 'int' 0
[B44.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce74679b0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7467958 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7467938 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7467900 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce74678e8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce74678c8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7467890 <llex.c:389:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7467878 <line:389:21> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7467850 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7467998 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7467978 <col:31> 'int' 0
([B44.6]) > [B44.8]
   T: [B44.9] ? ... : ...
   Preds (1): B46
   Succs (2): B42 B43

 [B45]
   1: CharacterLiteral 0x561ce74677a8 <llex.c:388:40> 'int' 126
'~'
   2: ReturnStmt 0x561ce74677c0 <llex.c:388:33, col:40>
`-CharacterLiteral 0x561ce74677a8 <col:40> 'int' 126
return [B45.1];
   Preds (1): B46
   Succs (1): B0

 [B46]
   1: ConditionalOperator 0x561ce7467640 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7467258 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7467200 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74671c8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7467190 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7467178 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7467158 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7467240 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7467220 <col:31> 'int' 0
|-ParenExpr 0x561ce7467520 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce74674f8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74674d8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7467470 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7467448 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7467430 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7467410 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74673a8 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7467388 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7467368 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce74675f8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74675e0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7467540 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7467628 <llex.c:387:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74675a8 <line:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7467590 <line:387:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7467568 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B49.9] ? ([B47.10]) : [B48.7]
   2: DeclRefExpr 0x561ce7467068 <llex.c:387:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7467090 <llex.c:387:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467068 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B46.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce74670a8 <llex.c:387:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7467090 <line:387:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7467068 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B46.3]->current
   5: BinaryOperator 0x561ce7467690 <llex.c:387:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce74670a8 <llex.c:387:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7467090 <line:387:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7467068 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7467670 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7467640 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7467258 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7467200 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74671c8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7467190 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7467178 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7467158 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7467240 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7467220 <col:31> 'int' 0
    |-ParenExpr 0x561ce7467520 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce74674f8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74674d8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7467470 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7467448 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7467430 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7467410 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74673a8 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7467388 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7467368 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce74675f8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74675e0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7467540 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7467628 <llex.c:387:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74675a8 <line:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7467590 <line:387:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7467568 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B46.4] = ([B46.1])
   6: DeclRefExpr 0x561ce74676d8 <llex.c:388:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7467700 <llex.c:388:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74676d8 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B46.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7467718 <llex.c:388:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7467700 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74676d8 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B46.7]->current
   9: ImplicitCastExpr 0x561ce7467768 <llex.c:388:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7467718 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7467700 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74676d8 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B46.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce7467750 <llex.c:388:28> 'int' 61
'='
  11: BinaryOperator 0x561ce7467780 <llex.c:388:13, col:28> 'int' '!='
|-ImplicitCastExpr 0x561ce7467768 <col:13, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7467718 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7467700 <col:13> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce74676d8 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7467750 <col:28> 'int' 61
[B46.9] != [B46.10]
   T: if [B46.11]
   Preds (2): B47 B48
   Succs (2): B45 B44

 [B47]
   1: DeclRefExpr 0x561ce7467280 <llex.c:387:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74672a8 <llex.c:387:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B47.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B47.2]->z
   4: ImplicitCastExpr 0x561ce7467318 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B47.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7467330 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B47.4]->p
   6: UnaryOperator 0x561ce7467368 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B47.5]++
   7: UnaryOperator 0x561ce7467388 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7467368 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B47.6]
   8: ImplicitCastExpr 0x561ce7467430 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7467410 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74673a8 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7467388 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7467368 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B47.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7467448 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7467430 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7467410 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74673a8 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7467388 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7467368 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B47.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce74674f8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74674d8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7467470 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7467448 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7467430 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7467410 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74673a8 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7467388 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7467368 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7467330 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7467318 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce74672f8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74672c0 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74672a8 <line:387:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7467280 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B47.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B49
   Succs (1): B46

 [B48]
   1: DeclRefExpr 0x561ce7467540 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74675e0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7467540 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B48.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7467568 <llex.c:387:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7467590 <llex.c:387:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7467568 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B48.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74675a8 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7467590 <line:387:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7467568 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B48.4]->z
   6: ImplicitCastExpr 0x561ce7467628 <llex.c:387:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74675a8 <line:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7467590 <line:387:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7467568 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B48.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce74675f8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74675e0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7467540 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7467628 <llex.c:387:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74675a8 <line:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7467590 <line:387:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7467568 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B48.2]([B48.6])
   Preds (1): B49
   Succs (1): B46

 [B49]
  case '~':
   1: DeclRefExpr 0x561ce74670e0 <llex.c:387:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7467108 <llex.c:387:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B49.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B49.2]->z
   4: ImplicitCastExpr 0x561ce7467178 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7467158 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B49.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7467190 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7467178 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7467158 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B49.4]->n
   6: UnaryOperator 0x561ce74671c8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7467190 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7467178 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7467158 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B49.5]--
   7: IntegerLiteral 0x561ce7467220 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7467240 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7467220 <col:31> 'int' 0
[B49.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7467258 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7467200 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74671c8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7467190 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7467178 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7467158 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7467120 <llex.c:387:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7467108 <line:387:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74670e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7467240 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7467220 <col:31> 'int' 0
([B49.6]) > [B49.8]
   T: [B49.9] ? ... : ...
   Preds (1): B2
   Succs (2): B47 B48

 [B50]
   1: ConditionalOperator 0x561ce7466ec8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7466ae0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7466a88 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7466a68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7466a30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7466a18 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce74669f8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7466ac8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7466aa8 <col:31> 'int' 0
|-ParenExpr 0x561ce7466da8 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7466d80 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7466d60 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7466cf8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7466cd0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7466cb8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7466c98 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7466c30 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7466c10 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7466bf0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7466e80 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7466e68 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7466dc8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7466eb0 <llex.c:384:21, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7466e30 <line:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7466e18 <line:384:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7466df0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B53.9] ? ([B51.10]) : [B52.7]
   2: DeclRefExpr 0x561ce7466908 <llex.c:384:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7466930 <llex.c:384:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466908 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B50.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7466948 <llex.c:384:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7466930 <line:384:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466908 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B50.3]->current
   5: BinaryOperator 0x561ce7466f18 <llex.c:384:21, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7466948 <llex.c:384:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7466930 <line:384:21> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7466908 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7466ef8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7466ec8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7466ae0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7466a88 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7466a68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7466a30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7466a18 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce74669f8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7466ac8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7466aa8 <col:31> 'int' 0
    |-ParenExpr 0x561ce7466da8 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7466d80 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7466d60 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7466cf8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7466cd0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7466cb8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7466c98 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7466c30 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7466c10 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7466bf0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7466e80 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7466e68 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7466dc8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7466eb0 <llex.c:384:21, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7466e30 <line:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7466e18 <line:384:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7466df0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B50.4] = ([B50.1])
   6: DeclRefExpr 0x561ce7466f60 <llex.c:384:33> 'int' EnumConstant 0x561ce7424dd0 'TK_GE' 'int'
TK_GE
   7: ReturnStmt 0x561ce7466f88 <llex.c:384:26, col:33>
`-DeclRefExpr 0x561ce7466f60 <col:33> 'int' EnumConstant 0x561ce7424dd0 'TK_GE' 'int'
return [B50.6];
   Preds (2): B51 B52
   Succs (1): B0

 [B51]
   1: DeclRefExpr 0x561ce7466b08 <llex.c:384:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7466b30 <llex.c:384:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B51.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B51.2]->z
   4: ImplicitCastExpr 0x561ce7466ba0 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B51.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7466bb8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B51.4]->p
   6: UnaryOperator 0x561ce7466bf0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B51.5]++
   7: UnaryOperator 0x561ce7466c10 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7466bf0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B51.6]
   8: ImplicitCastExpr 0x561ce7466cb8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7466c98 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7466c30 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7466c10 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7466bf0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B51.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7466cd0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7466cb8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7466c98 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7466c30 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7466c10 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7466bf0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B51.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7466d80 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7466d60 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7466cf8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7466cd0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7466cb8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7466c98 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7466c30 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7466c10 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7466bf0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7466bb8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7466ba0 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7466b80 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7466b48 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7466b30 <line:384:21> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7466b08 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B51.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B53
   Succs (1): B50

 [B52]
   1: DeclRefExpr 0x561ce7466dc8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7466e68 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7466dc8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B52.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7466df0 <llex.c:384:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7466e18 <llex.c:384:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466df0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B52.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7466e30 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7466e18 <line:384:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466df0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B52.4]->z
   6: ImplicitCastExpr 0x561ce7466eb0 <llex.c:384:21, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7466e30 <line:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7466e18 <line:384:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7466df0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B52.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7466e80 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7466e68 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7466dc8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7466eb0 <llex.c:384:21, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7466e30 <line:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7466e18 <line:384:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7466df0 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B52.2]([B52.6])
   Preds (1): B53
   Succs (1): B50

 [B53]
   1: DeclRefExpr 0x561ce7466980 <llex.c:384:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74669a8 <llex.c:384:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B53.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B53.2]->z
   4: ImplicitCastExpr 0x561ce7466a18 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74669f8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B53.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7466a30 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7466a18 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74669f8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B53.4]->n
   6: UnaryOperator 0x561ce7466a68 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7466a30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7466a18 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74669f8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B53.5]--
   7: IntegerLiteral 0x561ce7466aa8 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7466ac8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7466aa8 <col:31> 'int' 0
[B53.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7466ae0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7466a88 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7466a68 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7466a30 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7466a18 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce74669f8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce74669c0 <llex.c:384:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce74669a8 <line:384:21> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7466980 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7466ac8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7466aa8 <col:31> 'int' 0
([B53.6]) > [B53.8]
   T: [B53.9] ? ... : ...
   Preds (1): B55
   Succs (2): B51 B52

 [B54]
   1: CharacterLiteral 0x561ce74668d8 <llex.c:383:40> 'int' 62
'>'
   2: ReturnStmt 0x561ce74668f0 <llex.c:383:33, col:40>
`-CharacterLiteral 0x561ce74668d8 <col:40> 'int' 62
return [B54.1];
   Preds (1): B55
   Succs (1): B0

 [B55]
   1: ConditionalOperator 0x561ce7466770 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7466388 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7466330 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7466310 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce74662d8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce74662c0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce74662a0 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7466370 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7466350 <col:31> 'int' 0
|-ParenExpr 0x561ce7466650 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7466628 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7466608 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce74665a0 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7466578 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7466560 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7466540 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74664d8 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce74664b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7466498 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7466728 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7466710 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7466670 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7466758 <llex.c:382:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74666d8 <line:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74666c0 <line:382:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7466698 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B58.9] ? ([B56.10]) : [B57.7]
   2: DeclRefExpr 0x561ce74661b0 <llex.c:382:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce74661d8 <llex.c:382:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74661b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B55.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce74661f0 <llex.c:382:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74661d8 <line:382:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74661b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B55.3]->current
   5: BinaryOperator 0x561ce74667c0 <llex.c:382:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce74661f0 <llex.c:382:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce74661d8 <line:382:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce74661b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce74667a0 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7466770 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7466388 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7466330 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7466310 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce74662d8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce74662c0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce74662a0 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7466370 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7466350 <col:31> 'int' 0
    |-ParenExpr 0x561ce7466650 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7466628 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7466608 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce74665a0 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7466578 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7466560 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7466540 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74664d8 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce74664b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7466498 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7466728 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7466710 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7466670 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7466758 <llex.c:382:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74666d8 <line:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74666c0 <line:382:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7466698 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B55.4] = ([B55.1])
   6: DeclRefExpr 0x561ce7466808 <llex.c:383:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7466830 <llex.c:383:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466808 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B55.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7466848 <llex.c:383:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7466830 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466808 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B55.7]->current
   9: ImplicitCastExpr 0x561ce7466898 <llex.c:383:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7466848 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7466830 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7466808 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B55.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce7466880 <llex.c:383:28> 'int' 61
'='
  11: BinaryOperator 0x561ce74668b0 <llex.c:383:13, col:28> 'int' '!='
|-ImplicitCastExpr 0x561ce7466898 <col:13, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7466848 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7466830 <col:13> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7466808 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7466880 <col:28> 'int' 61
[B55.9] != [B55.10]
   T: if [B55.11]
   Preds (2): B56 B57
   Succs (2): B54 B53

 [B56]
   1: DeclRefExpr 0x561ce74663b0 <llex.c:382:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74663d8 <llex.c:382:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B56.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B56.2]->z
   4: ImplicitCastExpr 0x561ce7466448 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B56.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7466460 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B56.4]->p
   6: UnaryOperator 0x561ce7466498 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B56.5]++
   7: UnaryOperator 0x561ce74664b8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7466498 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B56.6]
   8: ImplicitCastExpr 0x561ce7466560 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7466540 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74664d8 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce74664b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7466498 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B56.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7466578 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7466560 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7466540 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74664d8 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce74664b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7466498 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B56.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7466628 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7466608 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce74665a0 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7466578 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7466560 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7466540 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74664d8 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce74664b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7466498 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7466460 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7466448 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7466428 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74663f0 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74663d8 <line:382:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce74663b0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B56.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B58
   Succs (1): B55

 [B57]
   1: DeclRefExpr 0x561ce7466670 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7466710 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7466670 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B57.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7466698 <llex.c:382:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74666c0 <llex.c:382:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466698 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B57.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74666d8 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74666c0 <line:382:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466698 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B57.4]->z
   6: ImplicitCastExpr 0x561ce7466758 <llex.c:382:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74666d8 <line:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74666c0 <line:382:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7466698 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B57.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7466728 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7466710 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7466670 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7466758 <llex.c:382:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74666d8 <line:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74666c0 <line:382:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7466698 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B57.2]([B57.6])
   Preds (1): B58
   Succs (1): B55

 [B58]
  case '>':
   1: DeclRefExpr 0x561ce7466228 <llex.c:382:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7466250 <llex.c:382:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B58.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B58.2]->z
   4: ImplicitCastExpr 0x561ce74662c0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74662a0 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B58.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce74662d8 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce74662c0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74662a0 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B58.4]->n
   6: UnaryOperator 0x561ce7466310 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce74662d8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce74662c0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74662a0 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B58.5]--
   7: IntegerLiteral 0x561ce7466350 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7466370 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7466350 <col:31> 'int' 0
[B58.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7466388 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7466330 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7466310 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce74662d8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce74662c0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce74662a0 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7466268 <llex.c:382:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7466250 <line:382:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7466228 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7466370 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7466350 <col:31> 'int' 0
([B58.6]) > [B58.8]
   T: [B58.9] ? ... : ...
   Preds (1): B2
   Succs (2): B56 B57

 [B59]
   1: ConditionalOperator 0x561ce7466010 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7465c28 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7465bd0 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7465bb0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7465b78 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7465b60 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7465b40 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7465c10 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7465bf0 <col:31> 'int' 0
|-ParenExpr 0x561ce7465ef0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7465ec8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7465ea8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7465e40 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7465e18 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7465e00 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7465de0 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7465d78 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7465d58 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7465d38 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7465fc8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7465fb0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7465f10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7465ff8 <llex.c:379:21, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7465f78 <line:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465f60 <line:379:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7465f38 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B62.9] ? ([B60.10]) : [B61.7]
   2: DeclRefExpr 0x561ce7465a50 <llex.c:379:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7465a78 <llex.c:379:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465a50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B59.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7465a90 <llex.c:379:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7465a78 <line:379:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465a50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B59.3]->current
   5: BinaryOperator 0x561ce7466060 <llex.c:379:21, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7465a90 <llex.c:379:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7465a78 <line:379:21> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7465a50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7466040 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7466010 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7465c28 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7465bd0 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7465bb0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7465b78 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7465b60 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7465b40 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7465c10 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7465bf0 <col:31> 'int' 0
    |-ParenExpr 0x561ce7465ef0 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7465ec8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7465ea8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7465e40 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7465e18 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7465e00 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7465de0 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7465d78 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7465d58 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7465d38 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7465fc8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7465fb0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7465f10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7465ff8 <llex.c:379:21, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7465f78 <line:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7465f60 <line:379:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7465f38 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B59.4] = ([B59.1])
   6: DeclRefExpr 0x561ce74660a8 <llex.c:379:33> 'int' EnumConstant 0x561ce7424e18 'TK_LE' 'int'
TK_LE
   7: ReturnStmt 0x561ce74660d0 <llex.c:379:26, col:33>
`-DeclRefExpr 0x561ce74660a8 <col:33> 'int' EnumConstant 0x561ce7424e18 'TK_LE' 'int'
return [B59.6];
   Preds (2): B60 B61
   Succs (1): B0

 [B60]
   1: DeclRefExpr 0x561ce7465c50 <llex.c:379:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7465c78 <llex.c:379:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B60.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B60.2]->z
   4: ImplicitCastExpr 0x561ce7465ce8 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B60.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7465d00 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B60.4]->p
   6: UnaryOperator 0x561ce7465d38 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B60.5]++
   7: UnaryOperator 0x561ce7465d58 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7465d38 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B60.6]
   8: ImplicitCastExpr 0x561ce7465e00 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7465de0 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7465d78 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7465d58 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7465d38 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B60.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7465e18 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7465e00 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7465de0 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7465d78 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7465d58 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7465d38 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B60.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7465ec8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7465ea8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7465e40 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7465e18 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7465e00 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7465de0 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7465d78 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7465d58 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7465d38 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7465d00 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7465ce8 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7465cc8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7465c90 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7465c78 <line:379:21> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7465c50 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B60.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B62
   Succs (1): B59

 [B61]
   1: DeclRefExpr 0x561ce7465f10 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7465fb0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7465f10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B61.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7465f38 <llex.c:379:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7465f60 <llex.c:379:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465f38 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B61.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7465f78 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465f60 <line:379:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465f38 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B61.4]->z
   6: ImplicitCastExpr 0x561ce7465ff8 <llex.c:379:21, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7465f78 <line:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7465f60 <line:379:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7465f38 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B61.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7465fc8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7465fb0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7465f10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7465ff8 <llex.c:379:21, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7465f78 <line:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465f60 <line:379:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7465f38 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B61.2]([B61.6])
   Preds (1): B62
   Succs (1): B59

 [B62]
   1: DeclRefExpr 0x561ce7465ac8 <llex.c:379:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7465af0 <llex.c:379:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B62.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B62.2]->z
   4: ImplicitCastExpr 0x561ce7465b60 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7465b40 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B62.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7465b78 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7465b60 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7465b40 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B62.4]->n
   6: UnaryOperator 0x561ce7465bb0 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7465b78 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7465b60 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7465b40 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B62.5]--
   7: IntegerLiteral 0x561ce7465bf0 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7465c10 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7465bf0 <col:31> 'int' 0
[B62.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7465c28 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7465bd0 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7465bb0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7465b78 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7465b60 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7465b40 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7465b08 <llex.c:379:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7465af0 <line:379:21> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7465ac8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7465c10 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7465bf0 <col:31> 'int' 0
([B62.6]) > [B62.8]
   T: [B62.9] ? ... : ...
   Preds (1): B64
   Succs (2): B60 B61

 [B63]
   1: CharacterLiteral 0x561ce7465a20 <llex.c:378:40> 'int' 60
'<'
   2: ReturnStmt 0x561ce7465a38 <llex.c:378:33, col:40>
`-CharacterLiteral 0x561ce7465a20 <col:40> 'int' 60
return [B63.1];
   Preds (1): B64
   Succs (1): B0

 [B64]
   1: ConditionalOperator 0x561ce74658b8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce74654d0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7465478 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7465458 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7465420 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7465408 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce74653e8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce74654b8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7465498 <col:31> 'int' 0
|-ParenExpr 0x561ce7465798 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7465770 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7465750 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce74656e8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce74656c0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce74656a8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7465688 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7465620 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7465600 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce74655e0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7465870 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7465858 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce74657b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce74658a0 <llex.c:377:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7465820 <line:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465808 <line:377:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74657e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B67.9] ? ([B65.10]) : [B66.7]
   2: DeclRefExpr 0x561ce74652f8 <llex.c:377:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7465320 <llex.c:377:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74652f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B64.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7465338 <llex.c:377:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7465320 <line:377:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74652f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B64.3]->current
   5: BinaryOperator 0x561ce7465908 <llex.c:377:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7465338 <llex.c:377:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7465320 <line:377:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce74652f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce74658e8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce74658b8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce74654d0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7465478 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7465458 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7465420 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7465408 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce74653e8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce74654b8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7465498 <col:31> 'int' 0
    |-ParenExpr 0x561ce7465798 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7465770 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7465750 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce74656e8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce74656c0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce74656a8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7465688 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7465620 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7465600 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce74655e0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7465870 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7465858 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce74657b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce74658a0 <llex.c:377:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7465820 <line:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7465808 <line:377:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74657e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B64.4] = ([B64.1])
   6: DeclRefExpr 0x561ce7465950 <llex.c:378:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7465978 <llex.c:378:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465950 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B64.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7465990 <llex.c:378:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7465978 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465950 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B64.7]->current
   9: ImplicitCastExpr 0x561ce74659e0 <llex.c:378:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7465990 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7465978 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7465950 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B64.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce74659c8 <llex.c:378:28> 'int' 61
'='
  11: BinaryOperator 0x561ce74659f8 <llex.c:378:13, col:28> 'int' '!='
|-ImplicitCastExpr 0x561ce74659e0 <col:13, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7465990 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7465978 <col:13> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7465950 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce74659c8 <col:28> 'int' 61
[B64.9] != [B64.10]
   T: if [B64.11]
   Preds (2): B65 B66
   Succs (2): B63 B62

 [B65]
   1: DeclRefExpr 0x561ce74654f8 <llex.c:377:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7465520 <llex.c:377:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B65.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B65.2]->z
   4: ImplicitCastExpr 0x561ce7465590 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B65.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce74655a8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B65.4]->p
   6: UnaryOperator 0x561ce74655e0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B65.5]++
   7: UnaryOperator 0x561ce7465600 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce74655e0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B65.6]
   8: ImplicitCastExpr 0x561ce74656a8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7465688 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7465620 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7465600 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce74655e0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B65.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce74656c0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce74656a8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7465688 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7465620 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7465600 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce74655e0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B65.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7465770 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7465750 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce74656e8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce74656c0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce74656a8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7465688 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7465620 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7465600 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce74655e0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce74655a8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7465590 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7465570 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7465538 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7465520 <line:377:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce74654f8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B65.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B67
   Succs (1): B64

 [B66]
   1: DeclRefExpr 0x561ce74657b8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7465858 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74657b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B66.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce74657e0 <llex.c:377:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7465808 <llex.c:377:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74657e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B66.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7465820 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465808 <line:377:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74657e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B66.4]->z
   6: ImplicitCastExpr 0x561ce74658a0 <llex.c:377:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7465820 <line:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7465808 <line:377:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74657e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B66.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7465870 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7465858 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74657b8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce74658a0 <llex.c:377:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7465820 <line:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465808 <line:377:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74657e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B66.2]([B66.6])
   Preds (1): B67
   Succs (1): B64

 [B67]
  case '<':
   1: DeclRefExpr 0x561ce7465370 <llex.c:377:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7465398 <llex.c:377:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B67.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B67.2]->z
   4: ImplicitCastExpr 0x561ce7465408 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74653e8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B67.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7465420 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7465408 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74653e8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B67.4]->n
   6: UnaryOperator 0x561ce7465458 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7465420 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7465408 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74653e8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B67.5]--
   7: IntegerLiteral 0x561ce7465498 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce74654b8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7465498 <col:31> 'int' 0
[B67.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce74654d0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7465478 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7465458 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7465420 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7465408 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce74653e8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce74653b0 <llex.c:377:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7465398 <line:377:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7465370 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74654b8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7465498 <col:31> 'int' 0
([B67.6]) > [B67.8]
   T: [B67.9] ? ... : ...
   Preds (1): B2
   Succs (2): B65 B66

 [B68]
   1: ConditionalOperator 0x561ce7465130 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7464d48 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7464cf0 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7464cd0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7464c98 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7464c80 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7464c60 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7464d30 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7464d10 <col:31> 'int' 0
|-ParenExpr 0x561ce7465010 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7464fe8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7464fc8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7464f60 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7464f38 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7464f20 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7464f00 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7464e98 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7464e78 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7464e58 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce74650e8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74650d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7465030 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7465118 <llex.c:374:21, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7465098 <line:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7465080 <line:374:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7465058 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B71.9] ? ([B69.10]) : [B70.7]
   2: DeclRefExpr 0x561ce7464b70 <llex.c:374:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7464b98 <llex.c:374:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464b70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B68.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7464bb0 <llex.c:374:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7464b98 <line:374:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464b70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B68.3]->current
   5: BinaryOperator 0x561ce7465180 <llex.c:374:21, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7464bb0 <llex.c:374:21, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7464b98 <line:374:21> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7464b70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7465160 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7465130 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7464d48 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7464cf0 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7464cd0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7464c98 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7464c80 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7464c60 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7464d30 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7464d10 <col:31> 'int' 0
    |-ParenExpr 0x561ce7465010 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7464fe8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7464fc8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7464f60 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7464f38 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7464f20 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7464f00 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7464e98 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7464e78 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7464e58 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce74650e8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74650d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7465030 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7465118 <llex.c:374:21, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7465098 <line:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7465080 <line:374:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7465058 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B68.4] = ([B68.1])
   6: DeclRefExpr 0x561ce74651f0 <llex.c:374:33> 'int' EnumConstant 0x561ce7424d88 'TK_EQ' 'int'
TK_EQ
   7: ReturnStmt 0x561ce7465218 <llex.c:374:26, col:33>
`-DeclRefExpr 0x561ce74651f0 <col:33> 'int' EnumConstant 0x561ce7424d88 'TK_EQ' 'int'
return [B68.6];
   Preds (2): B69 B70
   Succs (1): B0

 [B69]
   1: DeclRefExpr 0x561ce7464d70 <llex.c:374:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7464d98 <llex.c:374:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B69.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B69.2]->z
   4: ImplicitCastExpr 0x561ce7464e08 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B69.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7464e20 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B69.4]->p
   6: UnaryOperator 0x561ce7464e58 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B69.5]++
   7: UnaryOperator 0x561ce7464e78 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7464e58 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B69.6]
   8: ImplicitCastExpr 0x561ce7464f20 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7464f00 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7464e98 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7464e78 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7464e58 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B69.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7464f38 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7464f20 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7464f00 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7464e98 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7464e78 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7464e58 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B69.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7464fe8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7464fc8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7464f60 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7464f38 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7464f20 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7464f00 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7464e98 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7464e78 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7464e58 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7464e20 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7464e08 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7464de8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7464db0 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7464d98 <line:374:21> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7464d70 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B69.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B71
   Succs (1): B68

 [B70]
   1: DeclRefExpr 0x561ce7465030 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74650d0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7465030 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B70.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7465058 <llex.c:374:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7465080 <llex.c:374:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7465058 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B70.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7465098 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7465080 <line:374:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7465058 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B70.4]->z
   6: ImplicitCastExpr 0x561ce7465118 <llex.c:374:21, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7465098 <line:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7465080 <line:374:21> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7465058 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B70.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce74650e8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74650d0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7465030 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7465118 <llex.c:374:21, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7465098 <line:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7465080 <line:374:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7465058 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B70.2]([B70.6])
   Preds (1): B71
   Succs (1): B68

 [B71]
   1: DeclRefExpr 0x561ce7464be8 <llex.c:374:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7464c10 <llex.c:374:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B71.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B71.2]->z
   4: ImplicitCastExpr 0x561ce7464c80 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7464c60 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B71.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7464c98 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7464c80 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7464c60 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B71.4]->n
   6: UnaryOperator 0x561ce7464cd0 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7464c98 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7464c80 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7464c60 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B71.5]--
   7: IntegerLiteral 0x561ce7464d10 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7464d30 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7464d10 <col:31> 'int' 0
[B71.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7464d48 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7464cf0 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7464cd0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7464c98 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7464c80 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7464c60 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7464c28 <llex.c:374:21, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7464c10 <line:374:21> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7464be8 <col:21> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7464d30 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7464d10 <col:31> 'int' 0
([B71.6]) > [B71.8]
   T: [B71.9] ? ... : ...
   Preds (1): B73
   Succs (2): B69 B70

 [B72]
   1: CharacterLiteral 0x561ce7464b40 <llex.c:373:40> 'int' 61
'='
   2: ReturnStmt 0x561ce7464b58 <llex.c:373:33, col:40>
`-CharacterLiteral 0x561ce7464b40 <col:40> 'int' 61
return [B72.1];
   Preds (1): B73
   Succs (1): B0

 [B73]
   1: ConditionalOperator 0x561ce74649d8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce74645f0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7464598 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7464578 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7464540 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7464528 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7464508 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce74645d8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce74645b8 <col:31> 'int' 0
|-ParenExpr 0x561ce74648b8 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7464890 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7464870 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7464808 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce74647e0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce74647c8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce74647a8 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7464740 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7464720 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7464700 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7464990 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7464978 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce74648d8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce74649c0 <llex.c:372:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7464940 <line:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7464928 <line:372:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7464900 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B76.9] ? ([B74.10]) : [B75.7]
   2: DeclRefExpr 0x561ce7464418 <llex.c:372:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7464440 <llex.c:372:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464418 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B73.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7464458 <llex.c:372:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7464440 <line:372:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464418 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B73.3]->current
   5: BinaryOperator 0x561ce7464a28 <llex.c:372:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7464458 <llex.c:372:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7464440 <line:372:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7464418 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7464a08 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce74649d8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce74645f0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7464598 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7464578 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7464540 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7464528 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7464508 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce74645d8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce74645b8 <col:31> 'int' 0
    |-ParenExpr 0x561ce74648b8 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7464890 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7464870 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7464808 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce74647e0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce74647c8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce74647a8 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7464740 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7464720 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7464700 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7464990 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7464978 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce74648d8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce74649c0 <llex.c:372:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7464940 <line:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7464928 <line:372:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7464900 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B73.4] = ([B73.1])
   6: DeclRefExpr 0x561ce7464a70 <llex.c:373:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7464a98 <llex.c:373:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464a70 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B73.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7464ab0 <llex.c:373:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7464a98 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464a70 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B73.7]->current
   9: ImplicitCastExpr 0x561ce7464b00 <llex.c:373:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7464ab0 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7464a98 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7464a70 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B73.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce7464ae8 <llex.c:373:28> 'int' 61
'='
  11: BinaryOperator 0x561ce7464b18 <llex.c:373:13, col:28> 'int' '!='
|-ImplicitCastExpr 0x561ce7464b00 <col:13, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7464ab0 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7464a98 <col:13> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7464a70 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7464ae8 <col:28> 'int' 61
[B73.9] != [B73.10]
   T: if [B73.11]
   Preds (2): B74 B75
   Succs (2): B72 B71

 [B74]
   1: DeclRefExpr 0x561ce7464618 <llex.c:372:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7464640 <llex.c:372:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B74.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B74.2]->z
   4: ImplicitCastExpr 0x561ce74646b0 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B74.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce74646c8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B74.4]->p
   6: UnaryOperator 0x561ce7464700 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B74.5]++
   7: UnaryOperator 0x561ce7464720 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7464700 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B74.6]
   8: ImplicitCastExpr 0x561ce74647c8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce74647a8 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7464740 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7464720 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7464700 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B74.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce74647e0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce74647c8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce74647a8 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7464740 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7464720 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7464700 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B74.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7464890 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7464870 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7464808 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce74647e0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce74647c8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce74647a8 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7464740 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7464720 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7464700 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce74646c8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce74646b0 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7464690 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7464658 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7464640 <line:372:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7464618 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B74.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B76
   Succs (1): B73

 [B75]
   1: DeclRefExpr 0x561ce74648d8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7464978 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74648d8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B75.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7464900 <llex.c:372:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7464928 <llex.c:372:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464900 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B75.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7464940 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7464928 <line:372:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464900 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B75.4]->z
   6: ImplicitCastExpr 0x561ce74649c0 <llex.c:372:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7464940 <line:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7464928 <line:372:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7464900 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B75.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7464990 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7464978 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74648d8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce74649c0 <llex.c:372:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7464940 <line:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7464928 <line:372:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7464900 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B75.2]([B75.6])
   Preds (1): B76
   Succs (1): B73

 [B76]
  case '=':
   1: DeclRefExpr 0x561ce7464490 <llex.c:372:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74644b8 <llex.c:372:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B76.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B76.2]->z
   4: ImplicitCastExpr 0x561ce7464528 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7464508 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B76.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7464540 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7464528 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7464508 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B76.4]->n
   6: UnaryOperator 0x561ce7464578 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7464540 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7464528 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7464508 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B76.5]--
   7: IntegerLiteral 0x561ce74645b8 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce74645d8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce74645b8 <col:31> 'int' 0
[B76.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce74645f0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7464598 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7464578 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7464540 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7464528 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7464508 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce74644d0 <llex.c:372:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce74644b8 <line:372:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7464490 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74645d8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce74645b8 <col:31> 'int' 0
([B76.6]) > [B76.8]
   T: [B76.9] ? ... : ...
   Preds (2): B2 B77
   Succs (2): B74 B75

 [B77]
   1: DeclRefExpr 0x561ce74641a0 <llex.c:369:14> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x561ce7464298 <llex.c:369:14> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74641a0 <col:14> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B77.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x561ce74641c8 <llex.c:369:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74642f0 <llex.c:369:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74641c8 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B77.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce7464228 <llex.c:369:32> 'char [30]' lvalue "invalid long string delimiter"
"invalid long string delimiter"
   6: ImplicitCastExpr 0x561ce7464308 <llex.c:369:32> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7464228 <col:32> 'char [30]' lvalue "invalid long string delimiter"
[B77.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce7464320 <llex.c:369:32> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7464308 <col:32> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7464228 <col:32> 'char [30]' lvalue "invalid long string delimiter"
[B77.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x561ce7464270 <llex.c:369:65> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
TK_STRING
   9: CallExpr 0x561ce74642b0 <llex.c:369:14, col:74> 'void'
|-ImplicitCastExpr 0x561ce7464298 <col:14> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74641a0 <col:14> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce74642f0 <col:28> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74641c8 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7464320 <col:32> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce7464308 <col:32> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561ce7464228 <col:32> 'char [30]' lvalue "invalid long string delimiter"
`-DeclRefExpr 0x561ce7464270 <col:65> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
[B77.2]([B77.4], [B77.7], [B77.8])
   Preds (1): B79
   Succs (1): B76

 [B78]
   1: CharacterLiteral 0x561ce7464170 <llex.c:368:36> 'int' 91
'['
   2: ReturnStmt 0x561ce7464188 <llex.c:368:29, col:36>
`-CharacterLiteral 0x561ce7464170 <col:36> 'int' 91
return [B78.1];
   Preds (1): B79
   Succs (1): B0

 [B79]
   1: DeclRefExpr 0x561ce74640c8 <llex.c:368:18> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
sep
   2: ImplicitCastExpr 0x561ce7464130 <llex.c:368:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce74640c8 <col:18> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
[B79.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x561ce74640f0 <llex.c:368:26> 'int' 1
1
   4: UnaryOperator 0x561ce7464110 <llex.c:368:25, col:26> 'int' prefix '-'
`-IntegerLiteral 0x561ce74640f0 <col:26> 'int' 1
-[B79.3]
   5: BinaryOperator 0x561ce7464148 <llex.c:368:18, col:26> 'int' '=='
|-ImplicitCastExpr 0x561ce7464130 <col:18> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce74640c8 <col:18> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
`-UnaryOperator 0x561ce7464110 <col:25, col:26> 'int' prefix '-'
  `-IntegerLiteral 0x561ce74640f0 <col:26> 'int' 1
[B79.2] == [B79.4]
   T: if [B79.5]
   Preds (1): B81
   Succs (2): B78 B77

 [B80]
   1: DeclRefExpr 0x561ce7463f28 <llex.c:365:11> 'void (LexState *, SemInfo *, int)' Function 0x561ce7456a30 'read_long_string' 'void (LexState *, SemInfo *, int)'
read_long_string
   2: ImplicitCastExpr 0x561ce7463fc8 <llex.c:365:11> 'void (*)(LexState *, SemInfo *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7463f28 <col:11> 'void (LexState *, SemInfo *, int)' Function 0x561ce7456a30 'read_long_string' 'void (LexState *, SemInfo *, int)'
[B80.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, SemInfo *, int))
   3: DeclRefExpr 0x561ce7463f50 <llex.c:365:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7464020 <llex.c:365:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463f50 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B80.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7463f78 <llex.c:365:32> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
seminfo
   6: ImplicitCastExpr 0x561ce7464038 <llex.c:365:32> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463f78 <col:32> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
[B80.5] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   7: DeclRefExpr 0x561ce7463fa0 <llex.c:365:41> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
sep
   8: ImplicitCastExpr 0x561ce7464050 <llex.c:365:41> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7463fa0 <col:41> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
[B80.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7463fe0 <llex.c:365:11, col:44> 'void'
|-ImplicitCastExpr 0x561ce7463fc8 <col:11> 'void (*)(LexState *, SemInfo *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7463f28 <col:11> 'void (LexState *, SemInfo *, int)' Function 0x561ce7456a30 'read_long_string' 'void (LexState *, SemInfo *, int)'
|-ImplicitCastExpr 0x561ce7464020 <col:28> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7463f50 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7464038 <col:32> 'SemInfo *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7463f78 <col:32> 'SemInfo *' lvalue ParmVar 0x561ce7461728 'seminfo' 'SemInfo *'
`-ImplicitCastExpr 0x561ce7464050 <col:41> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463fa0 <col:41> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
[B80.2]([B80.4], [B80.6], [B80.8])
  10: DeclRefExpr 0x561ce7464068 <llex.c:366:18> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
TK_STRING
  11: ReturnStmt 0x561ce7464090 <llex.c:366:11, col:18>
`-DeclRefExpr 0x561ce7464068 <col:18> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
return [B80.10];
   Preds (1): B81
   Succs (1): B0

 [B81]
  case '[':
   1: DeclRefExpr 0x561ce7463dd8 <llex.c:363:19> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
skip_sep
   2: ImplicitCastExpr 0x561ce7463e28 <llex.c:363:19> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7463dd8 <col:19> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
[B81.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
   3: DeclRefExpr 0x561ce7463e00 <llex.c:363:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7463e70 <llex.c:363:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463e00 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B81.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x561ce7463e40 <llex.c:363:19, col:30> 'int'
|-ImplicitCastExpr 0x561ce7463e28 <col:19> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7463dd8 <col:19> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
`-ImplicitCastExpr 0x561ce7463e70 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463e00 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B81.2]([B81.4])
   6: DeclStmt 0x561ce7463e88 <llex.c:363:9, col:31>col:13
`-VarDecl 0x561ce7463d78 <col:9, col:30> col:13 used sep 'int' cinit
  `-CallExpr 0x561ce7463e40 <col:19, col:30> 'int'
    |-ImplicitCastExpr 0x561ce7463e28 <col:19> 'int (*)(LexState *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x561ce7463dd8 <col:19> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
    `-ImplicitCastExpr 0x561ce7463e70 <col:28> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7463e00 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
int sep = skip_sep(ls);
   7: DeclRefExpr 0x561ce7463ea0 <llex.c:364:13> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
sep
   8: ImplicitCastExpr 0x561ce7463ee8 <llex.c:364:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7463ea0 <col:13> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
[B81.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x561ce7463ec8 <llex.c:364:20> 'int' 0
0
  10: BinaryOperator 0x561ce7463f00 <llex.c:364:13, col:20> 'int' '>='
|-ImplicitCastExpr 0x561ce7463ee8 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce7463ea0 <col:13> 'int' lvalue Var 0x561ce7463d78 'sep' 'int'
`-IntegerLiteral 0x561ce7463ec8 <col:20> 'int' 0
[B81.8] >= [B81.9]
   T: if [B81.10]
   Preds (1): B2
   Succs (2): B80 B79

 [B82]
   T: continue;
   Preds (2): B88 B89
   Succs (1): B1

 [B83]
   Preds (1): B84
   Succs (1): B91

 [B84]
   1: ConditionalOperator 0x561ce7463c10 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7463828 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce74637d0 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74637b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7463778 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7463760 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7463740 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7463810 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce74637f0 <col:31> 'int' 0
|-ParenExpr 0x561ce7463af0 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7463ac8 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7463aa8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7463a40 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7463a18 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7463a00 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce74639e0 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7463978 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7463958 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7463938 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7463bc8 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7463bb0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7463b10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7463bf8 <llex.c:359:16, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7463b78 <line:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7463b60 <line:359:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7463b38 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B87.9] ? ([B85.10]) : [B86.7]
   2: DeclRefExpr 0x561ce7463650 <llex.c:359:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7463678 <llex.c:359:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463650 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B84.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7463690 <llex.c:359:16, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7463678 <line:359:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463650 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B84.3]->current
   5: BinaryOperator 0x561ce7463c60 <llex.c:359:16, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7463690 <llex.c:359:16, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7463678 <line:359:16> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7463650 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7463c40 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7463c10 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7463828 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce74637d0 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74637b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7463778 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7463760 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7463740 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7463810 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce74637f0 <col:31> 'int' 0
    |-ParenExpr 0x561ce7463af0 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7463ac8 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7463aa8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7463a40 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7463a18 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7463a00 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce74639e0 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7463978 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7463958 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7463938 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7463bc8 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7463bb0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7463b10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7463bf8 <llex.c:359:16, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7463b78 <line:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7463b60 <line:359:16> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7463b38 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B84.4] = ([B84.1])
   Preds (2): B85 B86
   Succs (1): B83

 [B85]
   1: DeclRefExpr 0x561ce7463850 <llex.c:359:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7463878 <llex.c:359:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B85.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B85.2]->z
   4: ImplicitCastExpr 0x561ce74638e8 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B85.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7463900 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B85.4]->p
   6: UnaryOperator 0x561ce7463938 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B85.5]++
   7: UnaryOperator 0x561ce7463958 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7463938 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B85.6]
   8: ImplicitCastExpr 0x561ce7463a00 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce74639e0 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7463978 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7463958 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7463938 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B85.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7463a18 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7463a00 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce74639e0 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7463978 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7463958 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7463938 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B85.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7463ac8 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7463aa8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7463a40 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7463a18 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7463a00 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce74639e0 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7463978 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7463958 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7463938 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7463900 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce74638e8 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce74638c8 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7463890 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7463878 <line:359:16> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7463850 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B85.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B87
   Succs (1): B84

 [B86]
   1: DeclRefExpr 0x561ce7463b10 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7463bb0 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7463b10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B86.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7463b38 <llex.c:359:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7463b60 <llex.c:359:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463b38 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B86.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7463b78 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7463b60 <line:359:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463b38 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B86.4]->z
   6: ImplicitCastExpr 0x561ce7463bf8 <llex.c:359:16, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7463b78 <line:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7463b60 <line:359:16> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7463b38 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B86.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7463bc8 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7463bb0 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7463b10 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7463bf8 <llex.c:359:16, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7463b78 <line:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7463b60 <line:359:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7463b38 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B86.2]([B86.6])
   Preds (1): B87
   Succs (1): B84

 [B87]
   1: DeclRefExpr 0x561ce74636c8 <llex.c:359:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74636f0 <llex.c:359:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B87.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B87.2]->z
   4: ImplicitCastExpr 0x561ce7463760 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7463740 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B87.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7463778 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7463760 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7463740 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B87.4]->n
   6: UnaryOperator 0x561ce74637b0 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7463778 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7463760 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7463740 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B87.5]--
   7: IntegerLiteral 0x561ce74637f0 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7463810 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce74637f0 <col:31> 'int' 0
[B87.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7463828 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce74637d0 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74637b0 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7463778 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7463760 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7463740 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7463708 <llex.c:359:16, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce74636f0 <line:359:16> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74636c8 <col:16> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7463810 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce74637f0 <col:31> 'int' 0
([B87.6]) > [B87.8]
   T: [B87.9] ? ... : ...
   Preds (1): B88
   Succs (2): B85 B86

 [B88]
   1: DeclRefExpr 0x561ce7463510 <llex.c:358:38> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7463538 <llex.c:358:38> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463510 <col:38> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B88.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7463550 <llex.c:358:38, col:42> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7463538 <col:38> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463510 <col:38> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B88.2]->current
   4: ImplicitCastExpr 0x561ce74635e8 <llex.c:358:38, col:42> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7463550 <col:38, col:42> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7463538 <col:38> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7463510 <col:38> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B88.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x561ce7463588 <./lzio.h:16:15> 'int' 1
1
   6: UnaryOperator 0x561ce74635a8 <./lzio.h:16:14, col:15> 'int' prefix '-'
`-IntegerLiteral 0x561ce7463588 <col:15> 'int' 1
-[B88.5]
   7: BinaryOperator 0x561ce7463600 <llex.c:358:38, ./lzio.h:16:16> 'int' '!='
|-ImplicitCastExpr 0x561ce74635e8 <llex.c:358:38, col:42> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7463550 <col:38, col:42> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7463538 <col:38> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7463510 <col:38> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce74635c8 <./lzio.h:16:13, col:16> 'int'
  `-UnaryOperator 0x561ce74635a8 <col:14, col:15> 'int' prefix '-'
    `-IntegerLiteral 0x561ce7463588 <col:15> 'int' 1
[B88.4] != ([B88.6])
   T: while [B89.2] && [B88.7]
   Preds (1): B89
   Succs (2): B87 B82

 [B89]
   1: BinaryOperator 0x561ce74634a8 <llex.c:358:31, line:33:66> 'int' '||'
|-BinaryOperator 0x561ce74633b0 <line:358:31, line:33:43> 'int' '=='
| |-ImplicitCastExpr 0x561ce7463398 <line:358:31, line:33:32> 'int' <LValueToRValue>
| | `-MemberExpr 0x561ce7463348 <line:358:31, line:33:32> 'int' lvalue ->current 0x561ce74267f0
| |   `-ImplicitCastExpr 0x561ce7463330 <line:358:31> 'LexState *' <LValueToRValue>
| |     `-DeclRefExpr 0x561ce7463308 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-CharacterLiteral 0x561ce7463380 <line:33:43> 'int' 10
`-BinaryOperator 0x561ce7463480 <line:358:31, line:33:66> 'int' '=='
  |-ImplicitCastExpr 0x561ce7463468 <line:358:31, line:33:55> 'int' <LValueToRValue>
  | `-MemberExpr 0x561ce7463418 <line:358:31, line:33:55> 'int' lvalue ->current 0x561ce74267f0
  |   `-ImplicitCastExpr 0x561ce7463400 <line:358:31> 'LexState *' <LValueToRValue>
  |     `-DeclRefExpr 0x561ce74633d8 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
  `-CharacterLiteral 0x561ce7463450 <line:33:66> 'int' 13
[B91.6] || [B90.6]
   2: UnaryOperator 0x561ce74634f0 <llex.c:358:16, line:33:70> 'int' prefix '!'
`-ParenExpr 0x561ce74634d0 <col:27, col:70> 'int'
  `-BinaryOperator 0x561ce74634a8 <line:358:31, line:33:66> 'int' '||'
    |-BinaryOperator 0x561ce74633b0 <line:358:31, line:33:43> 'int' '=='
    | |-ImplicitCastExpr 0x561ce7463398 <line:358:31, line:33:32> 'int' <LValueToRValue>
    | | `-MemberExpr 0x561ce7463348 <line:358:31, line:33:32> 'int' lvalue ->current 0x561ce74267f0
    | |   `-ImplicitCastExpr 0x561ce7463330 <line:358:31> 'LexState *' <LValueToRValue>
    | |     `-DeclRefExpr 0x561ce7463308 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-CharacterLiteral 0x561ce7463380 <line:33:43> 'int' 10
    `-BinaryOperator 0x561ce7463480 <line:358:31, line:33:66> 'int' '=='
      |-ImplicitCastExpr 0x561ce7463468 <line:358:31, line:33:55> 'int' <LValueToRValue>
      | `-MemberExpr 0x561ce7463418 <line:358:31, line:33:55> 'int' lvalue ->current 0x561ce74267f0
      |   `-ImplicitCastExpr 0x561ce7463400 <line:358:31> 'LexState *' <LValueToRValue>
      |     `-DeclRefExpr 0x561ce74633d8 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
      `-CharacterLiteral 0x561ce7463450 <line:33:66> 'int' 13
!([B89.1])
   T: [B89.2] && ...
   Preds (2): B90 B91
   Succs (2): B88 B82

 [B90]
   1: DeclRefExpr 0x561ce74633d8 <llex.c:358:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7463400 <llex.c:358:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74633d8 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B90.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7463418 <llex.c:358:31, line:33:55> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7463400 <line:358:31> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74633d8 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B90.2]->current
   4: ImplicitCastExpr 0x561ce7463468 <llex.c:358:31, line:33:55> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7463418 <line:358:31, line:33:55> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7463400 <line:358:31> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74633d8 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B90.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce7463450 <llex.c:33:66> 'int' 13
'\r'
   6: BinaryOperator 0x561ce7463480 <llex.c:358:31, line:33:66> 'int' '=='
|-ImplicitCastExpr 0x561ce7463468 <line:358:31, line:33:55> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7463418 <line:358:31, line:33:55> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7463400 <line:358:31> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce74633d8 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7463450 <line:33:66> 'int' 13
[B90.4] == [B90.5]
   Preds (1): B91
   Succs (1): B89

 [B91]
   1: DeclRefExpr 0x561ce7463308 <llex.c:358:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7463330 <llex.c:358:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7463308 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B91.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7463348 <llex.c:358:31, line:33:32> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7463330 <line:358:31> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7463308 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B91.2]->current
   4: ImplicitCastExpr 0x561ce7463398 <llex.c:358:31, line:33:32> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7463348 <line:358:31, line:33:32> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7463330 <line:358:31> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7463308 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B91.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce7463380 <llex.c:33:43> 'int' 10
'\n'
   6: BinaryOperator 0x561ce74633b0 <llex.c:358:31, line:33:43> 'int' '=='
|-ImplicitCastExpr 0x561ce7463398 <line:358:31, line:33:32> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7463348 <line:358:31, line:33:32> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7463330 <line:358:31> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7463308 <col:31> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7463380 <line:33:43> 'int' 10
[B91.4] == [B91.5]
   T: [B91.6] || ...
   Preds (3): B83 B93 B94
   Succs (2): B89 B90

 [B92]
   1: DeclRefExpr 0x561ce7462ed0 <llex.c:352:13> 'void (LexState *, SemInfo *, int)' Function 0x561ce7456a30 'read_long_string' 'void (LexState *, SemInfo *, int)'
read_long_string
   2: ImplicitCastExpr 0x561ce7463028 <llex.c:352:13> 'void (*)(LexState *, SemInfo *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7462ed0 <col:13> 'void (LexState *, SemInfo *, int)' Function 0x561ce7456a30 'read_long_string' 'void (LexState *, SemInfo *, int)'
[B92.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, SemInfo *, int))
   3: DeclRefExpr 0x561ce7462ef8 <llex.c:352:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7463080 <llex.c:352:30> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462ef8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B92.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: IntegerLiteral 0x561ce7462f20 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   6: CStyleCastExpr 0x561ce7462f58 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x561ce7462f20 <col:24> 'int' 0
(void *)[B92.5] (CStyleCastExpr, NullToPointer, void *)
   7: ImplicitCastExpr 0x561ce7463098 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'SemInfo *' <NullToPointer>
`-ParenExpr 0x561ce7462f80 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x561ce7462f58 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x561ce7462f20 <col:24> 'int' 0
([B92.6]) (ImplicitCastExpr, NullToPointer, SemInfo *)
   8: DeclRefExpr 0x561ce7462fa0 <llex.c:352:40> 'int' lvalue Var 0x561ce7462bb8 'sep' 'int'
sep
   9: ImplicitCastExpr 0x561ce74630b0 <llex.c:352:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7462fa0 <col:40> 'int' lvalue Var 0x561ce7462bb8 'sep' 'int'
[B92.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CallExpr 0x561ce7463040 <llex.c:352:13, col:43> 'void'
|-ImplicitCastExpr 0x561ce7463028 <col:13> 'void (*)(LexState *, SemInfo *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7462ed0 <col:13> 'void (LexState *, SemInfo *, int)' Function 0x561ce7456a30 'read_long_string' 'void (LexState *, SemInfo *, int)'
|-ImplicitCastExpr 0x561ce7463080 <col:30> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7462ef8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7463098 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'SemInfo *' <NullToPointer>
| `-ParenExpr 0x561ce7462f80 <col:16, col:25> 'void *'
|   `-CStyleCastExpr 0x561ce7462f58 <col:17, col:24> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x561ce7462f20 <col:24> 'int' 0
`-ImplicitCastExpr 0x561ce74630b0 <llex.c:352:40> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462fa0 <col:40> 'int' lvalue Var 0x561ce7462bb8 'sep' 'int'
[B92.2]([B92.4], [B92.7], [B92.9])
  11: IntegerLiteral 0x561ce74631b0 <./lzio.h:36:45> 'int' 0
0
  12: ImplicitCastExpr 0x561ce74631e0 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce74631b0 <col:45> 'int' 0
[B92.11] (ImplicitCastExpr, IntegralCast, size_t)
  13: DeclRefExpr 0x561ce74630c8 <llex.c:353:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
  14: ImplicitCastExpr 0x561ce74630f0 <llex.c:353:30> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74630c8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B92.13] (ImplicitCastExpr, LValueToRValue, LexState *)
  15: MemberExpr 0x561ce7463108 <llex.c:353:30, col:34> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce74630f0 <col:30> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74630c8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B92.14]->buff
  16: ImplicitCastExpr 0x561ce7463160 <./lzio.h:36:33, col:38> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7463140 <col:33, col:38> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7463108 <llex.c:353:30, col:34> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce74630f0 <col:30> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74630c8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B92.15]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  17: MemberExpr 0x561ce7463178 <./lzio.h:36:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce7463160 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7463140 <col:33, col:38> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7463108 <llex.c:353:30, col:34> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce74630f0 <col:30> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74630c8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B92.16]->n
  18: BinaryOperator 0x561ce74631f8 <./lzio.h:36:33, col:45> 'size_t':'unsigned long' '='
|-MemberExpr 0x561ce7463178 <col:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
| `-ImplicitCastExpr 0x561ce7463160 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
|   `-ParenExpr 0x561ce7463140 <col:33, col:38> 'Mbuffer *' lvalue
|     `-MemberExpr 0x561ce7463108 <llex.c:353:30, col:34> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|       `-ImplicitCastExpr 0x561ce74630f0 <col:30> 'LexState *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce74630c8 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74631e0 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce74631b0 <col:45> 'int' 0
[B92.17] = [B92.12]
   T: continue;
   Preds (1): B93
   Succs (1): B1

 [B93]
   1: DeclRefExpr 0x561ce7462c18 <llex.c:349:21> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
skip_sep
   2: ImplicitCastExpr 0x561ce7462c68 <llex.c:349:21> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7462c18 <col:21> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
[B93.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
   3: DeclRefExpr 0x561ce7462c40 <llex.c:349:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7462cb0 <llex.c:349:30> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462c40 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B93.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x561ce7462c80 <llex.c:349:21, col:32> 'int'
|-ImplicitCastExpr 0x561ce7462c68 <col:21> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7462c18 <col:21> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
`-ImplicitCastExpr 0x561ce7462cb0 <col:30> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462c40 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B93.2]([B93.4])
   6: DeclStmt 0x561ce7462cc8 <llex.c:349:11, col:33>col:15
`-VarDecl 0x561ce7462bb8 <col:11, col:32> col:15 used sep 'int' cinit
  `-CallExpr 0x561ce7462c80 <col:21, col:32> 'int'
    |-ImplicitCastExpr 0x561ce7462c68 <col:21> 'int (*)(LexState *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x561ce7462c18 <col:21> 'int (LexState *)' Function 0x561ce7455118 'skip_sep' 'int (LexState *)'
    `-ImplicitCastExpr 0x561ce7462cb0 <col:30> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7462c40 <col:30> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
int sep = skip_sep(ls);
   7: IntegerLiteral 0x561ce7462dc8 <./lzio.h:36:45> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7462de8 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7462dc8 <col:45> 'int' 0
[B93.7] (ImplicitCastExpr, IntegralCast, size_t)
   9: DeclRefExpr 0x561ce7462ce0 <llex.c:350:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce7462d08 <llex.c:350:28> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462ce0 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B93.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: MemberExpr 0x561ce7462d20 <llex.c:350:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce7462d08 <col:28> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462ce0 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B93.10]->buff
  12: ImplicitCastExpr 0x561ce7462d78 <./lzio.h:36:33, col:38> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7462d58 <col:33, col:38> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7462d20 <llex.c:350:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce7462d08 <col:28> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7462ce0 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B93.11]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  13: MemberExpr 0x561ce7462d90 <./lzio.h:36:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce7462d78 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7462d58 <col:33, col:38> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7462d20 <llex.c:350:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce7462d08 <col:28> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7462ce0 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B93.12]->n
  14: BinaryOperator 0x561ce7462e00 <./lzio.h:36:33, col:45> 'size_t':'unsigned long' '='
|-MemberExpr 0x561ce7462d90 <col:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
| `-ImplicitCastExpr 0x561ce7462d78 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
|   `-ParenExpr 0x561ce7462d58 <col:33, col:38> 'Mbuffer *' lvalue
|     `-MemberExpr 0x561ce7462d20 <llex.c:350:28, col:32> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|       `-ImplicitCastExpr 0x561ce7462d08 <col:28> 'LexState *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce7462ce0 <col:28> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7462de8 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7462dc8 <col:45> 'int' 0
[B93.13] = [B93.8]
  15: DeclRefExpr 0x561ce7462e48 <llex.c:351:15> 'int' lvalue Var 0x561ce7462bb8 'sep' 'int'
sep
  16: ImplicitCastExpr 0x561ce7462e90 <llex.c:351:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce7462e48 <col:15> 'int' lvalue Var 0x561ce7462bb8 'sep' 'int'
[B93.15] (ImplicitCastExpr, LValueToRValue, int)
  17: IntegerLiteral 0x561ce7462e70 <llex.c:351:22> 'int' 0
0
  18: BinaryOperator 0x561ce7462ea8 <llex.c:351:15, col:22> 'int' '>='
|-ImplicitCastExpr 0x561ce7462e90 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce7462e48 <col:15> 'int' lvalue Var 0x561ce7462bb8 'sep' 'int'
`-IntegerLiteral 0x561ce7462e70 <col:22> 'int' 0
[B93.16] >= [B93.17]
   T: if [B93.18]
   Preds (1): B94
   Succs (2): B92 B91

 [B94]
   1: ConditionalOperator 0x561ce7462a38 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7462650 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce74625f8 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74625d8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce74625a0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7462588 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7462568 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7462638 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7462618 <col:31> 'int' 0
|-ParenExpr 0x561ce7462918 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce74628f0 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74628d0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7462868 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7462840 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7462828 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7462808 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74627a0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7462780 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7462760 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce74629f0 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74629d8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7462938 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7462a20 <llex.c:347:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74629a0 <line:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7462988 <line:347:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7462960 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B97.9] ? ([B95.10]) : [B96.7]
   2: DeclRefExpr 0x561ce7462478 <llex.c:347:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce74624a0 <llex.c:347:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462478 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B94.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce74624b8 <llex.c:347:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74624a0 <line:347:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462478 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B94.3]->current
   5: BinaryOperator 0x561ce7462a88 <llex.c:347:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce74624b8 <llex.c:347:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce74624a0 <line:347:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7462478 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce7462a68 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7462a38 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7462650 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce74625f8 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74625d8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce74625a0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7462588 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7462568 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7462638 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7462618 <col:31> 'int' 0
    |-ParenExpr 0x561ce7462918 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce74628f0 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74628d0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7462868 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7462840 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7462828 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7462808 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74627a0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7462780 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7462760 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce74629f0 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74629d8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7462938 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7462a20 <llex.c:347:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74629a0 <line:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7462988 <line:347:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7462960 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B94.4] = ([B94.1])
   6: DeclRefExpr 0x561ce7462ad0 <llex.c:348:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7462af8 <llex.c:348:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462ad0 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B94.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7462b10 <llex.c:348:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7462af8 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462ad0 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B94.7]->current
   9: ImplicitCastExpr 0x561ce7462b60 <llex.c:348:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7462b10 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7462af8 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7462ad0 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B94.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce7462b48 <llex.c:348:28> 'int' 91
'['
  11: BinaryOperator 0x561ce7462b78 <llex.c:348:13, col:28> 'int' '=='
|-ImplicitCastExpr 0x561ce7462b60 <col:13, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7462b10 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7462af8 <col:13> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7462ad0 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce7462b48 <col:28> 'int' 91
[B94.9] == [B94.10]
   T: if [B94.11]
   Preds (2): B95 B96
   Succs (2): B93 B91

 [B95]
   1: DeclRefExpr 0x561ce7462678 <llex.c:347:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74626a0 <llex.c:347:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B95.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B95.2]->z
   4: ImplicitCastExpr 0x561ce7462710 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B95.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7462728 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B95.4]->p
   6: UnaryOperator 0x561ce7462760 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B95.5]++
   7: UnaryOperator 0x561ce7462780 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7462760 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B95.6]
   8: ImplicitCastExpr 0x561ce7462828 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7462808 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74627a0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7462780 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7462760 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B95.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7462840 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7462828 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7462808 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74627a0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7462780 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7462760 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B95.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce74628f0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74628d0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7462868 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7462840 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7462828 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7462808 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74627a0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7462780 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7462760 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7462728 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7462710 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce74626f0 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74626b8 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74626a0 <line:347:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7462678 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B95.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B97
   Succs (1): B94

 [B96]
   1: DeclRefExpr 0x561ce7462938 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74629d8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7462938 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B96.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7462960 <llex.c:347:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7462988 <llex.c:347:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462960 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B96.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74629a0 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7462988 <line:347:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462960 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B96.4]->z
   6: ImplicitCastExpr 0x561ce7462a20 <llex.c:347:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74629a0 <line:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7462988 <line:347:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7462960 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B96.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce74629f0 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74629d8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7462938 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7462a20 <llex.c:347:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74629a0 <line:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7462988 <line:347:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7462960 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B96.2]([B96.6])
   Preds (1): B97
   Succs (1): B94

 [B97]
   1: DeclRefExpr 0x561ce74624f0 <llex.c:347:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7462518 <llex.c:347:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B97.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B97.2]->z
   4: ImplicitCastExpr 0x561ce7462588 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7462568 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B97.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce74625a0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7462588 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7462568 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B97.4]->n
   6: UnaryOperator 0x561ce74625d8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce74625a0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7462588 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7462568 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B97.5]--
   7: IntegerLiteral 0x561ce7462618 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7462638 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7462618 <col:31> 'int' 0
[B97.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7462650 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce74625f8 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74625d8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce74625a0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7462588 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7462568 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7462530 <llex.c:347:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7462518 <line:347:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74624f0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7462638 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7462618 <col:31> 'int' 0
([B97.6]) > [B97.8]
   T: [B97.9] ? ... : ...
   Preds (1): B99
   Succs (2): B95 B96

 [B98]
   1: CharacterLiteral 0x561ce7462410 <llex.c:345:40> 'int' 45
'-'
   2: ReturnStmt 0x561ce7462428 <llex.c:345:33, col:40>
`-CharacterLiteral 0x561ce7462410 <col:40> 'int' 45
return [B98.1];
   Preds (1): B99
   Succs (1): B0

 [B99]
   1: ConditionalOperator 0x561ce74622a8 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7461ec0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7461e68 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7461e48 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7461e10 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7461df8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7461dd8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7461ea8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7461e88 <col:31> 'int' 0
|-ParenExpr 0x561ce7462188 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7462160 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7462140 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce74620d8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce74620b0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7462098 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7462078 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7462010 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7461ff0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7461fd0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CallExpr 0x561ce7462260 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7462248 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce74621a8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7462290 <llex.c:344:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7462210 <line:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74621f8 <line:344:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74621d0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B102.9] ? ([B100.10]) : [B101.7]
   2: DeclRefExpr 0x561ce7461ce8 <llex.c:344:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7461d10 <llex.c:344:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461ce8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B99.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7461d28 <llex.c:344:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7461d10 <line:344:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461ce8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B99.3]->current
   5: BinaryOperator 0x561ce74622f8 <llex.c:344:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7461d28 <llex.c:344:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7461d10 <line:344:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7461ce8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ParenExpr 0x561ce74622d8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce74622a8 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7461ec0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7461e68 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7461e48 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7461e10 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7461df8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7461dd8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7461ea8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7461e88 <col:31> 'int' 0
    |-ParenExpr 0x561ce7462188 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7462160 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7462140 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce74620d8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce74620b0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7462098 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7462078 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7462010 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7461ff0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7461fd0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
    `-CallExpr 0x561ce7462260 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7462248 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce74621a8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7462290 <llex.c:344:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7462210 <line:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74621f8 <line:344:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74621d0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B99.4] = ([B99.1])
   6: DeclRefExpr 0x561ce7462340 <llex.c:345:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7462368 <llex.c:345:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7462340 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B99.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7462380 <llex.c:345:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7462368 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7462340 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B99.7]->current
   9: ImplicitCastExpr 0x561ce74623d0 <llex.c:345:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7462380 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7462368 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7462340 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B99.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CharacterLiteral 0x561ce74623b8 <llex.c:345:28> 'int' 45
'-'
  11: BinaryOperator 0x561ce74623e8 <llex.c:345:13, col:28> 'int' '!='
|-ImplicitCastExpr 0x561ce74623d0 <col:13, col:17> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce7462380 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7462368 <col:13> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7462340 <col:13> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-CharacterLiteral 0x561ce74623b8 <col:28> 'int' 45
[B99.9] != [B99.10]
   T: if [B99.11]
   Preds (2): B100 B101
   Succs (2): B98 B97

 [B100]
   1: DeclRefExpr 0x561ce7461ee8 <llex.c:344:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7461f10 <llex.c:344:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B100.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B100.2]->z
   4: ImplicitCastExpr 0x561ce7461f80 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B100.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7461f98 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B100.4]->p
   6: UnaryOperator 0x561ce7461fd0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B100.5]++
   7: UnaryOperator 0x561ce7461ff0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7461fd0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
*[B100.6]
   8: ImplicitCastExpr 0x561ce7462098 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7462078 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7462010 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7461ff0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7461fd0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(([B100.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce74620b0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7462098 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7462078 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7462010 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7461ff0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7461fd0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(unsigned char)[B100.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7462160 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7462140 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce74620d8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce74620b0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7462098 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7462078 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7462010 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7461ff0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7461fd0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7461f98 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7461f80 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7461f60 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7461f28 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7461f10 <line:344:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7461ee8 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
(int)(([B100.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B102
   Succs (1): B99

 [B101]
   1: DeclRefExpr 0x561ce74621a8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7462248 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce74621a8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B101.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce74621d0 <llex.c:344:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74621f8 <llex.c:344:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74621d0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B101.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7462210 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74621f8 <line:344:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74621d0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B101.4]->z
   6: ImplicitCastExpr 0x561ce7462290 <llex.c:344:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7462210 <line:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74621f8 <line:344:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74621d0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B101.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7462260 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7462248 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce74621a8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7462290 <llex.c:344:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7462210 <line:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74621f8 <line:344:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74621d0 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B101.2]([B101.6])
   Preds (1): B102
   Succs (1): B99

 [B102]
  case '-':
   1: DeclRefExpr 0x561ce7461d60 <llex.c:344:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7461d88 <llex.c:344:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B102.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B102.2]->z
   4: ImplicitCastExpr 0x561ce7461df8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7461dd8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B102.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7461e10 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7461df8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7461dd8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B102.4]->n
   6: UnaryOperator 0x561ce7461e48 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7461e10 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7461df8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7461dd8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B102.5]--
   7: IntegerLiteral 0x561ce7461e88 <./lzio.h:22:31> 'int' 0
0
   8: ImplicitCastExpr 0x561ce7461ea8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7461e88 <col:31> 'int' 0
[B102.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: BinaryOperator 0x561ce7461ec0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7461e68 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7461e48 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7461e10 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7461df8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7461dd8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7461da0 <llex.c:344:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7461d88 <line:344:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7461d60 <col:14> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7461ea8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7461e88 <col:31> 'int' 0
([B102.6]) > [B102.8]
   T: [B102.9] ? ... : ...
   Preds (1): B2
   Succs (2): B100 B101

 [B103]
  case '\n':
   Preds (1): B2
   Succs (1): B104

 [B104]
  case '\r':
   1: DeclRefExpr 0x561ce7461bc0 <llex.c:340:9> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
inclinenumber
   2: ImplicitCastExpr 0x561ce7461c10 <llex.c:340:9> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7461bc0 <col:9> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
[B104.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x561ce7461be8 <llex.c:340:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7461c58 <llex.c:340:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461be8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B104.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x561ce7461c28 <llex.c:340:9, col:25> 'void'
|-ImplicitCastExpr 0x561ce7461c10 <col:9> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7461bc0 <col:9> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
`-ImplicitCastExpr 0x561ce7461c58 <col:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461be8 <col:23> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B104.2]([B104.4])
   T: continue;
   Preds (2): B2 B103
   Succs (1): B1

 [B105]
   T: for (; ; )
   Preds (2): B1 B106
   Succs (2): B2 NULL

 [B106]
   1: IntegerLiteral 0x561ce74619e0 <./lzio.h:36:45> 'int' 0
0
   2: ImplicitCastExpr 0x561ce7461a00 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce74619e0 <col:45> 'int' 0
[B106.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: DeclRefExpr 0x561ce74618f8 <llex.c:335:20> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7461920 <llex.c:335:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74618f8 <col:20> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B106.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7461938 <llex.c:335:20, col:24> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce7461920 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74618f8 <col:20> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B106.4]->buff
   6: ImplicitCastExpr 0x561ce7461990 <./lzio.h:36:33, col:38> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7461970 <col:33, col:38> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7461938 <llex.c:335:20, col:24> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce7461920 <col:20> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74618f8 <col:20> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
([B106.5]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
   7: MemberExpr 0x561ce74619a8 <./lzio.h:36:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce7461990 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7461970 <col:33, col:38> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7461938 <llex.c:335:20, col:24> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce7461920 <col:20> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74618f8 <col:20> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
[B106.6]->n
   8: BinaryOperator 0x561ce7461a18 <./lzio.h:36:33, col:45> 'size_t':'unsigned long' '='
|-MemberExpr 0x561ce74619a8 <col:33, col:41> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
| `-ImplicitCastExpr 0x561ce7461990 <col:33, col:38> 'Mbuffer *' <LValueToRValue>
|   `-ParenExpr 0x561ce7461970 <col:33, col:38> 'Mbuffer *' lvalue
|     `-MemberExpr 0x561ce7461938 <llex.c:335:20, col:24> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|       `-ImplicitCastExpr 0x561ce7461920 <col:20> 'LexState *' <LValueToRValue>
|         `-DeclRefExpr 0x561ce74618f8 <col:20> 'LexState *' lvalue ParmVar 0x561ce74616b8 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7461a00 <./lzio.h:36:45> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce74619e0 <col:45> 'int' 0
[B106.7] = [B106.2]
   Preds (1): B107
   Succs (1): B105

 [B0 (EXIT)]
   Preds (21): B3 B7 B8 B21 B28 B29 B30 B32
      B33 B40 B41 B45 B50 B54 B59 B63 B68 B72
      B78 B80 B98
