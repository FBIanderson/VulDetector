static void recfield(LexState *ls, struct ConsControl *cc)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: DeclRefExpr 0x558fa8f14a68 <lparser.c:455:3> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
cc
   2: ImplicitCastExpr 0x558fa8f14a90 <lparser.c:455:3> 'struct ConsControl *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14a68 <col:3> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.1] (ImplicitCastExpr, LValueToRValue, struct ConsControl *)
   3: MemberExpr 0x558fa8f14aa8 <lparser.c:455:3, col:7> 'int' lvalue ->nh 0x558fa8f13a88
`-ImplicitCastExpr 0x558fa8f14a90 <col:3> 'struct ConsControl *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f14a68 <col:3> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.2]->nh
   4: UnaryOperator 0x558fa8f14ae0 <lparser.c:455:3, col:9> 'int' postfix '++'
`-MemberExpr 0x558fa8f14aa8 <col:3, col:7> 'int' lvalue ->nh 0x558fa8f13a88
  `-ImplicitCastExpr 0x558fa8f14a90 <col:3> 'struct ConsControl *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f14a68 <col:3> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.3]++
   5: DeclRefExpr 0x558fa8f14b00 <lparser.c:456:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
   6: ImplicitCastExpr 0x558fa8f14b68 <lparser.c:456:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f14b00 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B1.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   7: DeclRefExpr 0x558fa8f14b28 <lparser.c:456:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f14bb8 <lparser.c:456:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14b28 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B1.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: CharacterLiteral 0x558fa8f14b50 <lparser.c:456:17> 'int' 61
'='
  10: CallExpr 0x558fa8f14b80 <lparser.c:456:3, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f14b68 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f14b00 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f14bb8 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f14b28 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f14b50 <col:17> 'int' 61
[B1.6]([B1.8], [B1.9])
  11: DeclRefExpr 0x558fa8f14bf8 <lparser.c:457:11> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
  12: ImplicitCastExpr 0x558fa8f14c90 <lparser.c:457:11> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f14bf8 <col:11> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B1.11] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
  13: DeclRefExpr 0x558fa8f14c20 <lparser.c:457:23> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x558fa8f14ce0 <lparser.c:457:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14c20 <col:23> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
[B1.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: DeclRefExpr 0x558fa8f14c48 <lparser.c:457:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
key
  16: UnaryOperator 0x558fa8f14c70 <lparser.c:457:27, col:28> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f14c48 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
&[B1.15]
  17: CallExpr 0x558fa8f14ca8 <lparser.c:457:11, col:31> 'int'
|-ImplicitCastExpr 0x558fa8f14c90 <col:11> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f14bf8 <col:11> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f14ce0 <col:23> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f14c20 <col:23> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f14c70 <col:27, col:28> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f14c48 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
[B1.12]([B1.14], [B1.16])
  18: DeclRefExpr 0x558fa8f14bd0 <lparser.c:457:3> 'int' lvalue Var 0x558fa8f142d0 'rkkey' 'int'
rkkey
  19: BinaryOperator 0x558fa8f14cf8 <lparser.c:457:3, col:31> 'int' '='
|-DeclRefExpr 0x558fa8f14bd0 <col:3> 'int' lvalue Var 0x558fa8f142d0 'rkkey' 'int'
`-CallExpr 0x558fa8f14ca8 <col:11, col:31> 'int'
  |-ImplicitCastExpr 0x558fa8f14c90 <col:11> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f14bf8 <col:11> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8f14ce0 <col:23> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f14c20 <col:23> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
  `-UnaryOperator 0x558fa8f14c70 <col:27, col:28> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f14c48 <col:28> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
[B1.18] = [B1.17]
  20: DeclRefExpr 0x558fa8f15150 <lparser.c:458:3> 'void (LexState *, expdesc *)' Function 0x558fa8eea220 'expr' 'void (LexState *, expdesc *)'
expr
  21: ImplicitCastExpr 0x558fa8f151e8 <lparser.c:458:3> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f15150 <col:3> 'void (LexState *, expdesc *)' Function 0x558fa8eea220 'expr' 'void (LexState *, expdesc *)'
[B1.20] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
  22: DeclRefExpr 0x558fa8f15178 <lparser.c:458:8> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
  23: ImplicitCastExpr 0x558fa8f15238 <lparser.c:458:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f15178 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B1.22] (ImplicitCastExpr, LValueToRValue, LexState *)
  24: DeclRefExpr 0x558fa8f151a0 <lparser.c:458:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
val
  25: UnaryOperator 0x558fa8f151c8 <lparser.c:458:12, col:13> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f151a0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
&[B1.24]
  26: CallExpr 0x558fa8f15200 <lparser.c:458:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f151e8 <col:3> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f15150 <col:3> 'void (LexState *, expdesc *)' Function 0x558fa8eea220 'expr' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f15238 <col:8> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f15178 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f151c8 <col:12, col:13> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f151a0 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
[B1.21]([B1.23], [B1.25])
  27: DeclRefExpr 0x558fa8f15250 <lparser.c:459:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
  28: ImplicitCastExpr 0x558fa8f15528 <lparser.c:459:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f15250 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B1.27] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
  29: DeclRefExpr 0x558fa8f15278 <lparser.c:459:16> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
fs
  30: ImplicitCastExpr 0x558fa8f15590 <lparser.c:459:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f15278 <col:16> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
[B1.29] (ImplicitCastExpr, LValueToRValue, FuncState *)
  31: DeclRefExpr 0x558fa8f152a0 <lparser.c:459:20> 'int' EnumConstant 0x558fa8eaf5a8 'OP_SETTABLE' 'int'
OP_SETTABLE
  32: ImplicitCastExpr 0x558fa8f155a8 <lparser.c:459:20> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f152a0 <col:20> 'int' EnumConstant 0x558fa8eaf5a8 'OP_SETTABLE' 'int'
[B1.31] (ImplicitCastExpr, IntegralCast, OpCode)
  33: DeclRefExpr 0x558fa8f152c8 <lparser.c:459:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
cc
  34: ImplicitCastExpr 0x558fa8f152f0 <lparser.c:459:33> 'struct ConsControl *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.33] (ImplicitCastExpr, LValueToRValue, struct ConsControl *)
  35: MemberExpr 0x558fa8f15308 <lparser.c:459:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
`-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.34]->t
  36: ImplicitCastExpr 0x558fa8f15340 <lparser.c:459:33, col:37> 'expdesc *' <LValueToRValue>
`-MemberExpr 0x558fa8f15308 <col:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
  `-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.35] (ImplicitCastExpr, LValueToRValue, expdesc *)
  37: MemberExpr 0x558fa8f15358 <lparser.c:459:33, col:40> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
`-ImplicitCastExpr 0x558fa8f15340 <col:33, col:37> 'expdesc *' <LValueToRValue>
  `-MemberExpr 0x558fa8f15308 <col:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
    `-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.36]->u
  38: MemberExpr 0x558fa8f15390 <lparser.c:459:33, col:42> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
`-MemberExpr 0x558fa8f15358 <col:33, col:40> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
  `-ImplicitCastExpr 0x558fa8f15340 <col:33, col:37> 'expdesc *' <LValueToRValue>
    `-MemberExpr 0x558fa8f15308 <col:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
      `-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.37].s
  39: MemberExpr 0x558fa8f153c8 <lparser.c:459:33, col:44> 'int' lvalue .info 0x558fa8eb1028
`-MemberExpr 0x558fa8f15390 <col:33, col:42> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
  `-MemberExpr 0x558fa8f15358 <col:33, col:40> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
    `-ImplicitCastExpr 0x558fa8f15340 <col:33, col:37> 'expdesc *' <LValueToRValue>
      `-MemberExpr 0x558fa8f15308 <col:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
        `-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
          `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.38].info
  40: ImplicitCastExpr 0x558fa8f155c0 <lparser.c:459:33, col:44> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f153c8 <col:33, col:44> 'int' lvalue .info 0x558fa8eb1028
  `-MemberExpr 0x558fa8f15390 <col:33, col:42> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
    `-MemberExpr 0x558fa8f15358 <col:33, col:40> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
      `-ImplicitCastExpr 0x558fa8f15340 <col:33, col:37> 'expdesc *' <LValueToRValue>
        `-MemberExpr 0x558fa8f15308 <col:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
          `-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
            `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B1.39] (ImplicitCastExpr, LValueToRValue, int)
  41: DeclRefExpr 0x558fa8f15400 <lparser.c:459:50> 'int' lvalue Var 0x558fa8f142d0 'rkkey' 'int'
rkkey
  42: ImplicitCastExpr 0x558fa8f155d8 <lparser.c:459:50> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f15400 <col:50> 'int' lvalue Var 0x558fa8f142d0 'rkkey' 'int'
[B1.41] (ImplicitCastExpr, LValueToRValue, int)
  43: DeclRefExpr 0x558fa8f15428 <lparser.c:459:57> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
  44: ImplicitCastExpr 0x558fa8f154c0 <lparser.c:459:57> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f15428 <col:57> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B1.43] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
  45: DeclRefExpr 0x558fa8f15450 <lparser.c:459:69> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
fs
  46: ImplicitCastExpr 0x558fa8f15510 <lparser.c:459:69> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f15450 <col:69> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
[B1.45] (ImplicitCastExpr, LValueToRValue, FuncState *)
  47: DeclRefExpr 0x558fa8f15478 <lparser.c:459:74> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
val
  48: UnaryOperator 0x558fa8f154a0 <lparser.c:459:73, col:74> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f15478 <col:74> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
&[B1.47]
  49: CallExpr 0x558fa8f154d8 <lparser.c:459:57, col:77> 'int'
|-ImplicitCastExpr 0x558fa8f154c0 <col:57> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f15428 <col:57> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f15510 <col:69> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f15450 <col:69> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
`-UnaryOperator 0x558fa8f154a0 <col:73, col:74> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f15478 <col:74> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
[B1.44]([B1.46], [B1.48])
  50: CallExpr 0x558fa8f15540 <lparser.c:459:3, col:78> 'int'
|-ImplicitCastExpr 0x558fa8f15528 <col:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f15250 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x558fa8f15590 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f15278 <col:16> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f155a8 <col:20> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f152a0 <col:20> 'int' EnumConstant 0x558fa8eaf5a8 'OP_SETTABLE' 'int'
|-ImplicitCastExpr 0x558fa8f155c0 <col:33, col:44> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f153c8 <col:33, col:44> 'int' lvalue .info 0x558fa8eb1028
|   `-MemberExpr 0x558fa8f15390 <col:33, col:42> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x558fa8eb1120
|     `-MemberExpr 0x558fa8f15358 <col:33, col:40> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x558fa8eb1260
|       `-ImplicitCastExpr 0x558fa8f15340 <col:33, col:37> 'expdesc *' <LValueToRValue>
|         `-MemberExpr 0x558fa8f15308 <col:33, col:37> 'expdesc *' lvalue ->t 0x558fa8f13a28
|           `-ImplicitCastExpr 0x558fa8f152f0 <col:33> 'struct ConsControl *' <LValueToRValue>
|             `-DeclRefExpr 0x558fa8f152c8 <col:33> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
|-ImplicitCastExpr 0x558fa8f155d8 <col:50> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f15400 <col:50> 'int' lvalue Var 0x558fa8f142d0 'rkkey' 'int'
`-CallExpr 0x558fa8f154d8 <col:57, col:77> 'int'
  |-ImplicitCastExpr 0x558fa8f154c0 <col:57> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f15428 <col:57> 'int (FuncState *, expdesc *)' Function 0x558fa8ebb2d0 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
  |-ImplicitCastExpr 0x558fa8f15510 <col:69> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f15450 <col:69> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
  `-UnaryOperator 0x558fa8f154a0 <col:73, col:74> 'expdesc *' prefix '&'
    `-DeclRefExpr 0x558fa8f15478 <col:74> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f14228 'val' 'expdesc':'struct expdesc'
[B1.28]([B1.30], [B1.32], [B1.40], [B1.42], [B1.49])
  51: DeclRefExpr 0x558fa8f15668 <lparser.c:460:17> 'int' lvalue Var 0x558fa8f14050 'reg' 'int'
reg
  52: ImplicitCastExpr 0x558fa8f15690 <lparser.c:460:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f15668 <col:17> 'int' lvalue Var 0x558fa8f14050 'reg' 'int'
[B1.51] (ImplicitCastExpr, LValueToRValue, int)
  53: DeclRefExpr 0x558fa8f155f0 <lparser.c:460:3> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
fs
  54: ImplicitCastExpr 0x558fa8f15618 <lparser.c:460:3> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f155f0 <col:3> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
[B1.53] (ImplicitCastExpr, LValueToRValue, FuncState *)
  55: MemberExpr 0x558fa8f15630 <lparser.c:460:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f15618 <col:3> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f155f0 <col:3> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
[B1.54]->freereg
  56: BinaryOperator 0x558fa8f156a8 <lparser.c:460:3, col:17> 'int' '='
|-MemberExpr 0x558fa8f15630 <col:3, col:7> 'int' lvalue ->freereg 0x558fa8eb42f0
| `-ImplicitCastExpr 0x558fa8f15618 <col:3> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f155f0 <col:3> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f15690 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f15668 <col:17> 'int' lvalue Var 0x558fa8f14050 'reg' 'int'
[B1.55] = [B1.52]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f14930 <lparser.c:454:5> 'void (LexState *, expdesc *)' Function 0x558fa8f13470 'yindex' 'void (LexState *, expdesc *)'
yindex
   2: ImplicitCastExpr 0x558fa8f149c8 <lparser.c:454:5> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f14930 <col:5> 'void (LexState *, expdesc *)' Function 0x558fa8f13470 'yindex' 'void (LexState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f14958 <lparser.c:454:12> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f14a18 <lparser.c:454:12> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14958 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f14980 <lparser.c:454:17> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
key
   6: UnaryOperator 0x558fa8f149a8 <lparser.c:454:16, col:17> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f14980 <col:17> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
&[B2.5]
   7: CallExpr 0x558fa8f149e0 <lparser.c:454:5, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f149c8 <col:5> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f14930 <col:5> 'void (LexState *, expdesc *)' Function 0x558fa8f13470 'yindex' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f14a18 <col:12> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f14958 <col:12> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f149a8 <col:16, col:17> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f14980 <col:17> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
[B2.2]([B2.4], [B2.6])
   Preds (1): B6
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f14810 <lparser.c:451:5> 'void (LexState *, expdesc *)' Function 0x558fa8ef0508 'checkname' 'void (LexState *, expdesc *)'
checkname
   2: ImplicitCastExpr 0x558fa8f148a8 <lparser.c:451:5> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f14810 <col:5> 'void (LexState *, expdesc *)' Function 0x558fa8ef0508 'checkname' 'void (LexState *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   3: DeclRefExpr 0x558fa8f14838 <lparser.c:451:15> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f148f8 <lparser.c:451:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14838 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f14860 <lparser.c:451:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
key
   6: UnaryOperator 0x558fa8f14888 <lparser.c:451:19, col:20> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f14860 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
&[B3.5]
   7: CallExpr 0x558fa8f148c0 <lparser.c:451:5, col:23> 'void'
|-ImplicitCastExpr 0x558fa8f148a8 <col:5> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f14810 <col:5> 'void (LexState *, expdesc *)' Function 0x558fa8ef0508 'checkname' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f148f8 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f14838 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f14888 <col:19, col:20> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f14860 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f141b8 'key' 'expdesc':'struct expdesc'
[B3.2]([B3.4], [B3.6])
   Preds (2): B4 B5
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x558fa8f145e0 <lparser.c:34:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
errorlimit
   2: ImplicitCastExpr 0x558fa8f14738 <lparser.c:34:48> 'void (*)(FuncState *, int, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f145e0 <col:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, const char *))
   3: DeclRefExpr 0x558fa8f14608 <lparser.c:450:21> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f14790 <lparser.c:450:21> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14608 <col:21> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: IntegerLiteral 0x558fa8f14630 <<built-in>:37:21> 'int' 2147483647
2147483647
   6: IntegerLiteral 0x558fa8f14650 <./llimits.h:35:26> 'int' 2
2
   7: BinaryOperator 0x558fa8f14670 <<built-in>:37:21, ./llimits.h:35:26> 'int' '-'
|-IntegerLiteral 0x558fa8f14630 <<built-in>:37:21> 'int' 2147483647
`-IntegerLiteral 0x558fa8f14650 <./llimits.h:35:26> 'int' 2
[B4.5] - [B4.6]
   8: StringLiteral 0x558fa8f146f8 <lparser.c:450:42> 'char [23]' lvalue "items in a constructor"
"items in a constructor"
   9: ImplicitCastExpr 0x558fa8f147a8 <lparser.c:450:42> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f146f8 <col:42> 'char [23]' lvalue "items in a constructor"
[B4.8] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  10: ImplicitCastExpr 0x558fa8f147c0 <lparser.c:450:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f147a8 <col:42> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f146f8 <col:42> 'char [23]' lvalue "items in a constructor"
[B4.9] (ImplicitCastExpr, BitCast, const char *)
  11: CallExpr 0x558fa8f14750 <lparser.c:34:48, col:65> 'void'
|-ImplicitCastExpr 0x558fa8f14738 <col:48> 'void (*)(FuncState *, int, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f145e0 <col:48> 'void (FuncState *, int, const char *)' Function 0x558fa8eeb4d0 'errorlimit' 'void (FuncState *, int, const char *)'
|-ImplicitCastExpr 0x558fa8f14790 <line:450:21> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f14608 <col:21> 'FuncState *' lvalue Var 0x558fa8f13f30 'fs' 'FuncState *'
|-ParenExpr 0x558fa8f14698 <./llimits.h:35:17, col:27> 'int'
| `-BinaryOperator 0x558fa8f14670 <<built-in>:37:21, ./llimits.h:35:26> 'int' '-'
|   |-IntegerLiteral 0x558fa8f14630 <<built-in>:37:21> 'int' 2147483647
|   `-IntegerLiteral 0x558fa8f14650 <./llimits.h:35:26> 'int' 2
`-ImplicitCastExpr 0x558fa8f147c0 <lparser.c:450:42> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f147a8 <col:42> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f146f8 <col:42> 'char [23]' lvalue "items in a constructor"
[B4.2]([B4.4], ([B4.7]), [B4.10])
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x558fa8f14460 <lparser.c:450:25> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
cc
   2: ImplicitCastExpr 0x558fa8f14488 <lparser.c:450:25> 'struct ConsControl *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14460 <col:25> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B5.1] (ImplicitCastExpr, LValueToRValue, struct ConsControl *)
   3: MemberExpr 0x558fa8f144a0 <lparser.c:450:25, col:29> 'int' lvalue ->nh 0x558fa8f13a88
`-ImplicitCastExpr 0x558fa8f14488 <col:25> 'struct ConsControl *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f14460 <col:25> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
[B5.2]->nh
   4: ImplicitCastExpr 0x558fa8f145a0 <lparser.c:34:39, col:41> 'int' <LValueToRValue>
`-ParenExpr 0x558fa8f144d8 <col:39, col:41> 'int' lvalue
  `-MemberExpr 0x558fa8f144a0 <line:450:25, col:29> 'int' lvalue ->nh 0x558fa8f13a88
    `-ImplicitCastExpr 0x558fa8f14488 <col:25> 'struct ConsControl *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f14460 <col:25> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
([B5.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x558fa8f144f8 <<built-in>:37:21> 'int' 2147483647
2147483647
   6: IntegerLiteral 0x558fa8f14518 <./llimits.h:35:26> 'int' 2
2
   7: BinaryOperator 0x558fa8f14538 <<built-in>:37:21, ./llimits.h:35:26> 'int' '-'
|-IntegerLiteral 0x558fa8f144f8 <<built-in>:37:21> 'int' 2147483647
`-IntegerLiteral 0x558fa8f14518 <./llimits.h:35:26> 'int' 2
[B5.5] - [B5.6]
   8: BinaryOperator 0x558fa8f145b8 <lparser.c:34:39, col:45> 'int' '>'
|-ImplicitCastExpr 0x558fa8f145a0 <col:39, col:41> 'int' <LValueToRValue>
| `-ParenExpr 0x558fa8f144d8 <col:39, col:41> 'int' lvalue
|   `-MemberExpr 0x558fa8f144a0 <line:450:25, col:29> 'int' lvalue ->nh 0x558fa8f13a88
|     `-ImplicitCastExpr 0x558fa8f14488 <col:25> 'struct ConsControl *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f14460 <col:25> 'struct ConsControl *' lvalue ParmVar 0x558fa8f13d60 'cc' 'struct ConsControl *'
`-ParenExpr 0x558fa8f14580 <line:34:43, col:45> 'int'
  `-ParenExpr 0x558fa8f14560 <./llimits.h:35:17, col:27> 'int'
    `-BinaryOperator 0x558fa8f14538 <<built-in>:37:21, ./llimits.h:35:26> 'int' '-'
      |-IntegerLiteral 0x558fa8f144f8 <<built-in>:37:21> 'int' 2147483647
      `-IntegerLiteral 0x558fa8f14518 <./llimits.h:35:26> 'int' 2
[B5.4] > (([B5.7]))
   T: if [B5.8]
   Preds (1): B6
   Succs (2): B4 B3

 [B6]
   1: DeclRefExpr 0x558fa8f13f90 <lparser.c:445:19> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f13fb8 <lparser.c:445:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f13f90 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f13fd0 <lparser.c:445:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f13fb8 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f13f90 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.2]->fs
   4: ImplicitCastExpr 0x558fa8f14008 <lparser.c:445:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f13fd0 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f13fb8 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f13f90 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f14020 <lparser.c:445:3, col:25>col:14
`-VarDecl 0x558fa8f13f30 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f14008 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f13fd0 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f13fb8 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f13f90 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclRefExpr 0x558fa8f140b0 <lparser.c:446:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x558fa8f140d8 <lparser.c:446:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f140b0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x558fa8f140f0 <lparser.c:446:13, col:17> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f140d8 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f140b0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.7]->fs
   9: ImplicitCastExpr 0x558fa8f14128 <lparser.c:446:13, col:17> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f140f0 <col:13, col:17> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f140d8 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f140b0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.8] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  10: MemberExpr 0x558fa8f14140 <lparser.c:446:13, col:21> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f14128 <col:13, col:17> 'struct FuncState *' <LValueToRValue>
  `-MemberExpr 0x558fa8f140f0 <col:13, col:17> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
    `-ImplicitCastExpr 0x558fa8f140d8 <col:13> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f140b0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.9]->freereg
  11: ImplicitCastExpr 0x558fa8f14178 <lparser.c:446:13, col:21> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f14140 <col:13, col:21> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f14128 <col:13, col:17> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f140f0 <col:13, col:17> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f140d8 <col:13> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f140b0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.10] (ImplicitCastExpr, LValueToRValue, int)
  12: DeclStmt 0x558fa8f14190 <lparser.c:446:3, col:28>col:7
`-VarDecl 0x558fa8f14050 <col:3, col:21> col:7 used reg 'int' cinit
  `-ImplicitCastExpr 0x558fa8f14178 <col:13, col:21> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f14140 <col:13, col:21> 'int' lvalue ->freereg 0x558fa8eb42f0
      `-ImplicitCastExpr 0x558fa8f14128 <col:13, col:17> 'struct FuncState *' <LValueToRValue>
        `-MemberExpr 0x558fa8f140f0 <col:13, col:17> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
          `-ImplicitCastExpr 0x558fa8f140d8 <col:13> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x558fa8f140b0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
int reg = ls->fs->freereg;
  13: DeclStmt 0x558fa8f482c0 <lparser.c:447:11>col:11
`-VarDecl 0x558fa8f141b8 <col:3, col:11> col:11 used key 'expdesc':'struct expdesc'
expdesc key;
  14: DeclStmt 0x558fa8f481a8 <lparser.c:447:16>col:16
`-VarDecl 0x558fa8f14228 <col:3, col:16> col:16 used val 'expdesc':'struct expdesc'
expdesc val;
  15: DeclStmt 0x558fa8f14330 <lparser.c:448:3, col:12>col:7
`-VarDecl 0x558fa8f142d0 <col:3, col:7> col:7 used rkkey 'int'
int rkkey;
  16: DeclRefExpr 0x558fa8f14348 <lparser.c:449:7> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
ls
  17: ImplicitCastExpr 0x558fa8f14370 <lparser.c:449:7> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f14348 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.16] (ImplicitCastExpr, LValueToRValue, LexState *)
  18: MemberExpr 0x558fa8f14388 <lparser.c:449:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f14370 <col:7> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f14348 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.17]->t
  19: MemberExpr 0x558fa8f143c0 <lparser.c:449:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f14388 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f14370 <col:7> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f14348 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.18].token
  20: ImplicitCastExpr 0x558fa8f14420 <lparser.c:449:7, col:13> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f143c0 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f14388 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f14370 <col:7> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f14348 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
[B6.19] (ImplicitCastExpr, LValueToRValue, int)
  21: DeclRefExpr 0x558fa8f143f8 <lparser.c:449:22> 'int' EnumConstant 0x558fa8e9e770 'TK_NAME' 'int'
TK_NAME
  22: BinaryOperator 0x558fa8f14438 <lparser.c:449:7, col:22> 'int' '=='
|-ImplicitCastExpr 0x558fa8f14420 <col:7, col:13> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f143c0 <col:7, col:13> 'int' lvalue .token 0x558fa8e9ec88
|   `-MemberExpr 0x558fa8f14388 <col:7, col:11> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
|     `-ImplicitCastExpr 0x558fa8f14370 <col:7> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f14348 <col:7> 'LexState *' lvalue ParmVar 0x558fa8f13c50 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8f143f8 <col:22> 'int' EnumConstant 0x558fa8e9e770 'TK_NAME' 'int'
[B6.20] == [B6.21]
   T: if [B6.22]
   Preds (1): B7
   Succs (2): B5 B2

 [B0 (EXIT)]
   Preds (1): B1
