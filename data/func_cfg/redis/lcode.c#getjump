static int getjump(FuncState *fs, int pc)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x5637768b39f0 <lcode.c:105:13> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
pc
   2: ImplicitCastExpr 0x5637768b3a38 <lcode.c:105:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b39f0 <col:13> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768b3a18 <lcode.c:105:16> 'int' 1
1
   4: BinaryOperator 0x5637768b3a50 <lcode.c:105:13, col:16> 'int' '+'
|-ImplicitCastExpr 0x5637768b3a38 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768b39f0 <col:13> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
`-IntegerLiteral 0x5637768b3a18 <col:16> 'int' 1
[B1.2] + [B1.3]
   5: DeclRefExpr 0x5637768b3a98 <lcode.c:105:19> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
offset
   6: ImplicitCastExpr 0x5637768b3ac0 <lcode.c:105:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b3a98 <col:19> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x5637768b3ad8 <lcode.c:105:12, col:19> 'int' '+'
|-ParenExpr 0x5637768b3a78 <col:12, col:17> 'int'
| `-BinaryOperator 0x5637768b3a50 <col:13, col:16> 'int' '+'
|   |-ImplicitCastExpr 0x5637768b3a38 <col:13> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x5637768b39f0 <col:13> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
|   `-IntegerLiteral 0x5637768b3a18 <col:16> 'int' 1
`-ImplicitCastExpr 0x5637768b3ac0 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768b3a98 <col:19> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
([B1.4]) + [B1.6]
   8: ReturnStmt 0x5637768b3b00 <lcode.c:105:5, col:19>
`-BinaryOperator 0x5637768b3ad8 <col:12, col:19> 'int' '+'
  |-ParenExpr 0x5637768b3a78 <col:12, col:17> 'int'
  | `-BinaryOperator 0x5637768b3a50 <col:13, col:16> 'int' '+'
  |   |-ImplicitCastExpr 0x5637768b3a38 <col:13> 'int' <LValueToRValue>
  |   | `-DeclRefExpr 0x5637768b39f0 <col:13> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
  |   `-IntegerLiteral 0x5637768b3a18 <col:16> 'int' 1
  `-ImplicitCastExpr 0x5637768b3ac0 <col:19> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768b3a98 <col:19> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
return [B1.7];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x5637768b3978 <./lcode.h:20:19> 'int' 1
1
   2: UnaryOperator 0x5637768b3998 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768b3978 <col:19> 'int' 1
-[B2.1]
   3: ReturnStmt 0x5637768b39d8 <lcode.c:103:5, ./lcode.h:20:20>
`-ParenExpr 0x5637768b39b8 <col:17, col:20> 'int'
  `-UnaryOperator 0x5637768b3998 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768b3978 <col:19> 'int' 1
return ([B2.2]);
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5637768b30d0 <lcode.c:101:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768b30f8 <lcode.c:101:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
[B3.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768b3110 <lcode.c:101:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
[B3.2]->f
   4: ImplicitCastExpr 0x5637768b3148 <lcode.c:101:27, col:31> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768b3160 <lcode.c:101:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
[B3.4]->code
   6: ImplicitCastExpr 0x5637768b31c0 <lcode.c:101:27, col:34> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768b3198 <lcode.c:101:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
pc
   8: ImplicitCastExpr 0x5637768b31d8 <lcode.c:101:39> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
[B3.6][[B3.8]]
  10: ImplicitCastExpr 0x5637768b3328 <./lopcodes.h:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768b3218 <col:34, col:36> 'Instruction':'unsigned int' lvalue
  `-ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
    |-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
    | `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
    |   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
    |     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
    |       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
    |         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
([B3.9]) (ImplicitCastExpr, LValueToRValue, Instruction)
  11: IntegerLiteral 0x5637768b3238 <./lopcodes.h:44:17> 'int' 0
0
  12: IntegerLiteral 0x5637768b3258 <./lopcodes.h:42:18> 'int' 6
6
  13: BinaryOperator 0x5637768b3278 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
[B3.11] + [B3.12]
  14: IntegerLiteral 0x5637768b32c0 <./lopcodes.h:40:17> 'int' 8
8
  15: BinaryOperator 0x5637768b32e0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768b32a0 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768b3278 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768b32c0 <line:40:17> 'int' 8
([B3.13]) + [B3.14]
  16: BinaryOperator 0x5637768b3340 <./lopcodes.h:96:34, line:46:31> 'Instruction':'unsigned int' '>>'
|-ImplicitCastExpr 0x5637768b3328 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768b3218 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
|     |   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
|     |       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
`-ParenExpr 0x5637768b3308 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5637768b32e0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5637768b32a0 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5637768b3278 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768b32c0 <line:40:17> 'int' 8
[B3.10] >> ([B3.15])
  17: IntegerLiteral 0x5637768b3388 <./lopcodes.h:71:39> 'int' 0
0
  18: CStyleCastExpr 0x5637768b33b8 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
(Instruction)[B3.17] (CStyleCastExpr, IntegralCast, Instruction)
  19: UnaryOperator 0x5637768b33e0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
~[B3.18]
  20: IntegerLiteral 0x5637768b3420 <./lopcodes.h:37:17> 'int' 9
9
  21: IntegerLiteral 0x5637768b3440 <./lopcodes.h:38:17> 'int' 9
9
  22: BinaryOperator 0x5637768b3460 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
`-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
[B3.20] + [B3.21]
  23: BinaryOperator 0x5637768b34a8 <./lopcodes.h:71:24, line:39:34> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
`-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
([B3.19]) << ([B3.22])
  24: UnaryOperator 0x5637768b34f0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768b34d0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768b34a8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
    `-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
      `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
        |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
        `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
~([B3.23])
  25: IntegerLiteral 0x5637768b3530 <./lopcodes.h:96:63> 'int' 0
0
  26: BinaryOperator 0x5637768b3550 <./lopcodes.h:71:21, line:96:63> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768b3510 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768b34f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768b34d0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768b34a8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
|       `-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
|         `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
|           |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
|           `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768b3530 <line:96:63> 'int' 0
([B3.24]) << [B3.25]
  27: BinaryOperator 0x5637768b3598 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768b3368 <line:96:33, col:45> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768b3340 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|   |-ImplicitCastExpr 0x5637768b3328 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768b3218 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|   |   `-ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
|   |     |-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
|   |     | `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
|   |     |   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
|   |     |     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
|   |     |       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
|   |     `-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
|   `-ParenExpr 0x5637768b3308 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5637768b32e0 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5637768b32a0 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5637768b3278 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5637768b32c0 <line:40:17> 'int' 8
`-ParenExpr 0x5637768b3578 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768b3550 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768b3510 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768b34f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768b34d0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768b34a8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
    |       `-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
    |         `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
    |           |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
    |           `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768b3530 <line:96:63> 'int' 0
([B3.16]) & ([B3.26])
  28: CStyleCastExpr 0x5637768b3628 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x5637768b3608 <col:26, col:30> 'unsigned int'
  `-BinaryOperator 0x5637768b3598 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768b3368 <line:96:33, col:45> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768b3340 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x5637768b3328 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768b3218 <col:34, col:36> 'Instruction':'unsigned int' lvalue
    |   |   `-ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
    |   |     | `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
    |   |     |   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
    |   |     |     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |     |       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
    |   |     |         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
    |   |     `-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
    |   `-ParenExpr 0x5637768b3308 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768b32e0 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5637768b32a0 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5637768b3278 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5637768b32c0 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768b3578 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768b3550 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768b3510 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768b34f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768b34d0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768b34a8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
        |       `-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
        |         `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
        |           |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
        |           `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5637768b3530 <line:96:63> 'int' 0
(int)([B3.27]) (CStyleCastExpr, IntegralCast, int)
  29: IntegerLiteral 0x5637768b3690 <./lopcodes.h:57:28> 'int' 1
1
  30: IntegerLiteral 0x5637768b36b0 <./lopcodes.h:37:17> 'int' 9
9
  31: IntegerLiteral 0x5637768b36d0 <./lopcodes.h:38:17> 'int' 9
9
  32: BinaryOperator 0x5637768b36f0 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x5637768b36b0 <line:37:17> 'int' 9
`-IntegerLiteral 0x5637768b36d0 <line:38:17> 'int' 9
[B3.30] + [B3.31]
  33: BinaryOperator 0x5637768b3738 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x5637768b3690 <line:57:28> 'int' 1
`-ParenExpr 0x5637768b3718 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x5637768b36f0 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x5637768b36b0 <line:37:17> 'int' 9
    `-IntegerLiteral 0x5637768b36d0 <line:38:17> 'int' 9
[B3.29] << ([B3.32])
  34: IntegerLiteral 0x5637768b3780 <./lopcodes.h:57:40> 'int' 1
1
  35: BinaryOperator 0x5637768b37a0 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x5637768b3760 <col:27, col:38> 'int'
| `-BinaryOperator 0x5637768b3738 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x5637768b3690 <line:57:28> 'int' 1
|   `-ParenExpr 0x5637768b3718 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x5637768b36f0 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x5637768b36b0 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x5637768b36d0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768b3780 <line:57:40> 'int' 1
([B3.33]) - [B3.34]
  36: IntegerLiteral 0x5637768b37e8 <./lopcodes.h:58:39> 'int' 1
1
  37: BinaryOperator 0x5637768b3808 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x5637768b37c8 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x5637768b37a0 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x5637768b3760 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x5637768b3738 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x5637768b3690 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x5637768b3718 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x5637768b36f0 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x5637768b36b0 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x5637768b36d0 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x5637768b3780 <line:57:40> 'int' 1
`-IntegerLiteral 0x5637768b37e8 <line:58:39> 'int' 1
([B3.35]) >> [B3.36]
  38: BinaryOperator 0x5637768b3850 <./lopcodes.h:96:22, line:58:40> 'int' '-'
|-ParenExpr 0x5637768b3670 <line:96:22, col:66> 'int'
| `-ParenExpr 0x5637768b3650 <./llimits.h:75:22, col:31> 'int'
|   `-CStyleCastExpr 0x5637768b3628 <col:23, col:30> 'int' <IntegralCast>
|     `-ParenExpr 0x5637768b3608 <col:26, col:30> 'unsigned int'
|       `-BinaryOperator 0x5637768b3598 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
|         |-ParenExpr 0x5637768b3368 <line:96:33, col:45> 'Instruction':'unsigned int'
|         | `-BinaryOperator 0x5637768b3340 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
|         |   |-ImplicitCastExpr 0x5637768b3328 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
|         |   | `-ParenExpr 0x5637768b3218 <col:34, col:36> 'Instruction':'unsigned int' lvalue
|         |   |   `-ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
|         |   |     |-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
|         |   |     | `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
|         |   |     |   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
|         |   |     |     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
|         |   |     |       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
|         |   |     |         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
|         |   |     `-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
|         |   `-ParenExpr 0x5637768b3308 <./lopcodes.h:46:16, col:31> 'int'
|         |     `-BinaryOperator 0x5637768b32e0 <line:45:16, line:40:17> 'int' '+'
|         |       |-ParenExpr 0x5637768b32a0 <line:45:16, col:33> 'int'
|         |       | `-BinaryOperator 0x5637768b3278 <line:44:17, line:42:18> 'int' '+'
|         |       |   |-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
|         |       |   `-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
|         |       `-IntegerLiteral 0x5637768b32c0 <line:40:17> 'int' 8
|         `-ParenExpr 0x5637768b3578 <line:71:20, col:49> 'Instruction':'unsigned int'
|           `-BinaryOperator 0x5637768b3550 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
|             |-ParenExpr 0x5637768b3510 <line:71:21, col:45> 'Instruction':'unsigned int'
|             | `-UnaryOperator 0x5637768b34f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|             |   `-ParenExpr 0x5637768b34d0 <col:23, col:44> 'Instruction':'unsigned int'
|             |     `-BinaryOperator 0x5637768b34a8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
|             |       |-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
|             |       | `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|             |       |   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|             |       |     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
|             |       `-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
|             |         `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
|             |           |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
|             |           `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
|             `-IntegerLiteral 0x5637768b3530 <line:96:63> 'int' 0
`-ParenExpr 0x5637768b3830 <line:58:27, col:40> 'int'
  `-BinaryOperator 0x5637768b3808 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x5637768b37c8 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x5637768b37a0 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x5637768b3760 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x5637768b3738 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x5637768b3690 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x5637768b3718 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x5637768b36f0 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x5637768b36b0 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x5637768b36d0 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x5637768b3780 <line:57:40> 'int' 1
    `-IntegerLiteral 0x5637768b37e8 <line:58:39> 'int' 1
(([B3.28])) - ([B3.37])
  39: DeclStmt 0x5637768b3898 <lcode.c:101:3, col:43>col:7
`-VarDecl 0x5637768b3070 <col:3, ./lopcodes.h:100:47> lcode.c:101:7 used offset 'int' cinit
  `-ParenExpr 0x5637768b3878 <./lopcodes.h:100:23, col:47> 'int'
    `-BinaryOperator 0x5637768b3850 <line:96:22, line:58:40> 'int' '-'
      |-ParenExpr 0x5637768b3670 <line:96:22, col:66> 'int'
      | `-ParenExpr 0x5637768b3650 <./llimits.h:75:22, col:31> 'int'
      |   `-CStyleCastExpr 0x5637768b3628 <col:23, col:30> 'int' <IntegralCast>
      |     `-ParenExpr 0x5637768b3608 <col:26, col:30> 'unsigned int'
      |       `-BinaryOperator 0x5637768b3598 <./lopcodes.h:96:33, line:71:49> 'unsigned int' '&'
      |         |-ParenExpr 0x5637768b3368 <line:96:33, col:45> 'Instruction':'unsigned int'
      |         | `-BinaryOperator 0x5637768b3340 <col:34, line:46:31> 'Instruction':'unsigned int' '>>'
      |         |   |-ImplicitCastExpr 0x5637768b3328 <line:96:34, col:36> 'Instruction':'unsigned int' <LValueToRValue>
      |         |   | `-ParenExpr 0x5637768b3218 <col:34, col:36> 'Instruction':'unsigned int' lvalue
      |         |   |   `-ArraySubscriptExpr 0x5637768b31f0 <lcode.c:101:27, col:41> 'Instruction':'unsigned int' lvalue
      |         |   |     |-ImplicitCastExpr 0x5637768b31c0 <col:27, col:34> 'Instruction *' <LValueToRValue>
      |         |   |     | `-MemberExpr 0x5637768b3160 <col:27, col:34> 'Instruction *' lvalue ->code 0x563776857e38
      |         |   |     |   `-ImplicitCastExpr 0x5637768b3148 <col:27, col:31> 'Proto *' <LValueToRValue>
      |         |   |     |     `-MemberExpr 0x5637768b3110 <col:27, col:31> 'Proto *' lvalue ->f 0x56377687ddb8
      |         |   |     |       `-ImplicitCastExpr 0x5637768b30f8 <col:27> 'FuncState *' <LValueToRValue>
      |         |   |     |         `-DeclRefExpr 0x5637768b30d0 <col:27> 'FuncState *' lvalue ParmVar 0x5637768b2e10 'fs' 'FuncState *'
      |         |   |     `-ImplicitCastExpr 0x5637768b31d8 <col:39> 'int' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x5637768b3198 <col:39> 'int' lvalue ParmVar 0x5637768b2e88 'pc' 'int'
      |         |   `-ParenExpr 0x5637768b3308 <./lopcodes.h:46:16, col:31> 'int'
      |         |     `-BinaryOperator 0x5637768b32e0 <line:45:16, line:40:17> 'int' '+'
      |         |       |-ParenExpr 0x5637768b32a0 <line:45:16, col:33> 'int'
      |         |       | `-BinaryOperator 0x5637768b3278 <line:44:17, line:42:18> 'int' '+'
      |         |       |   |-IntegerLiteral 0x5637768b3238 <line:44:17> 'int' 0
      |         |       |   `-IntegerLiteral 0x5637768b3258 <line:42:18> 'int' 6
      |         |       `-IntegerLiteral 0x5637768b32c0 <line:40:17> 'int' 8
      |         `-ParenExpr 0x5637768b3578 <line:71:20, col:49> 'Instruction':'unsigned int'
      |           `-BinaryOperator 0x5637768b3550 <col:21, line:96:63> 'Instruction':'unsigned int' '<<'
      |             |-ParenExpr 0x5637768b3510 <line:71:21, col:45> 'Instruction':'unsigned int'
      |             | `-UnaryOperator 0x5637768b34f0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
      |             |   `-ParenExpr 0x5637768b34d0 <col:23, col:44> 'Instruction':'unsigned int'
      |             |     `-BinaryOperator 0x5637768b34a8 <col:24, line:39:34> 'Instruction':'unsigned int' '<<'
      |             |       |-ParenExpr 0x5637768b3400 <line:71:24, col:40> 'Instruction':'unsigned int'
      |             |       | `-UnaryOperator 0x5637768b33e0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
      |             |       |   `-CStyleCastExpr 0x5637768b33b8 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
      |             |       |     `-IntegerLiteral 0x5637768b3388 <col:39> 'int' 0
      |             |       `-ParenExpr 0x5637768b3488 <line:39:18, col:34> 'int'
      |             |         `-BinaryOperator 0x5637768b3460 <line:37:17, line:38:17> 'int' '+'
      |             |           |-IntegerLiteral 0x5637768b3420 <line:37:17> 'int' 9
      |             |           `-IntegerLiteral 0x5637768b3440 <line:38:17> 'int' 9
      |             `-IntegerLiteral 0x5637768b3530 <line:96:63> 'int' 0
      `-ParenExpr 0x5637768b3830 <line:58:27, col:40> 'int'
        `-BinaryOperator 0x5637768b3808 <line:57:26, line:58:39> 'int' '>>'
          |-ParenExpr 0x5637768b37c8 <line:57:26, col:41> 'int'
          | `-BinaryOperator 0x5637768b37a0 <col:27, col:40> 'int' '-'
          |   |-ParenExpr 0x5637768b3760 <col:27, col:38> 'int'
          |   | `-BinaryOperator 0x5637768b3738 <col:28, line:39:34> 'int' '<<'
          |   |   |-IntegerLiteral 0x5637768b3690 <line:57:28> 'int' 1
          |   |   `-ParenExpr 0x5637768b3718 <line:39:18, col:34> 'int'
          |   |     `-BinaryOperator 0x5637768b36f0 <line:37:17, line:38:17> 'int' '+'
          |   |       |-IntegerLiteral 0x5637768b36b0 <line:37:17> 'int' 9
          |   |       `-IntegerLiteral 0x5637768b36d0 <line:38:17> 'int' 9
          |   `-IntegerLiteral 0x5637768b3780 <line:57:40> 'int' 1
          `-IntegerLiteral 0x5637768b37e8 <line:58:39> 'int' 1
int offset = ((((int)(((fs->f->code[pc]) >> ((0 + 6) + 8)) & ((~((~(Instruction)0) << (9 + 9))) << 0)))) - (((1 << (9 + 9)) - 1) >> 1));
  40: DeclRefExpr 0x5637768b38b0 <lcode.c:102:7> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
offset
  41: ImplicitCastExpr 0x5637768b3938 <lcode.c:102:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768b38b0 <col:7> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
[B3.40] (ImplicitCastExpr, LValueToRValue, int)
  42: IntegerLiteral 0x5637768b38d8 <./lcode.h:20:19> 'int' 1
1
  43: UnaryOperator 0x5637768b38f8 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768b38d8 <col:19> 'int' 1
-[B3.42]
  44: BinaryOperator 0x5637768b3950 <lcode.c:102:7, ./lcode.h:20:20> 'int' '=='
|-ImplicitCastExpr 0x5637768b3938 <lcode.c:102:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768b38b0 <col:7> 'int' lvalue Var 0x5637768b3070 'offset' 'int'
`-ParenExpr 0x5637768b3918 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768b38f8 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768b38d8 <col:19> 'int' 1
[B3.41] == ([B3.43])
   T: if [B3.44]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2
