static void fornum(LexState *ls, TString *varname, int line)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x558fa8f37228 <lparser.c:1085:3> 'void (LexState *, int, int, int, int)' Function 0x558fa8f33480 'forbody' 'void (LexState *, int, int, int, int)'
forbody
   2: ImplicitCastExpr 0x558fa8f37368 <lparser.c:1085:3> 'void (*)(LexState *, int, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f37228 <col:3> 'void (LexState *, int, int, int, int)' Function 0x558fa8f33480 'forbody' 'void (LexState *, int, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int, int))
   3: DeclRefExpr 0x558fa8f37250 <lparser.c:1085:11> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f373d0 <lparser.c:1085:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37250 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f37278 <lparser.c:1085:15> 'int' lvalue Var 0x558fa8f35ca8 'base' 'int'
base
   6: ImplicitCastExpr 0x558fa8f373e8 <lparser.c:1085:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37278 <col:15> 'int' lvalue Var 0x558fa8f35ca8 'base' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x558fa8f372a0 <lparser.c:1085:21> 'int' lvalue ParmVar 0x558fa8f35a28 'line' 'int'
line
   8: ImplicitCastExpr 0x558fa8f37400 <lparser.c:1085:21> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f372a0 <col:21> 'int' lvalue ParmVar 0x558fa8f35a28 'line' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x558fa8f372c8 <lparser.c:1085:27> 'int' 1
1
  10: IntegerLiteral 0x558fa8f372e8 <lparser.c:1085:30> 'int' 1
1
  11: CallExpr 0x558fa8f37380 <lparser.c:1085:3, col:31> 'void'
|-ImplicitCastExpr 0x558fa8f37368 <col:3> 'void (*)(LexState *, int, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f37228 <col:3> 'void (LexState *, int, int, int, int)' Function 0x558fa8f33480 'forbody' 'void (LexState *, int, int, int, int)'
|-ImplicitCastExpr 0x558fa8f373d0 <col:11> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37250 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f373e8 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37278 <col:15> 'int' lvalue Var 0x558fa8f35ca8 'base' 'int'
|-ImplicitCastExpr 0x558fa8f37400 <col:21> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f372a0 <col:21> 'int' lvalue ParmVar 0x558fa8f35a28 'line' 'int'
|-IntegerLiteral 0x558fa8f372c8 <col:27> 'int' 1
`-IntegerLiteral 0x558fa8f372e8 <col:30> 'int' 1
[B1.2]([B1.4], [B1.6], [B1.8], [B1.9], [B1.10])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f36df8 <lparser.c:1082:5> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
   2: ImplicitCastExpr 0x558fa8f37038 <lparser.c:1082:5> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36df8 <col:5> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
   3: DeclRefExpr 0x558fa8f36e20 <lparser.c:1082:18> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f37098 <lparser.c:1082:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36e20 <col:18> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f36e48 <lparser.c:1082:22> 'int' EnumConstant 0x558fa8eaf368 'OP_LOADK' 'int'
OP_LOADK
   6: ImplicitCastExpr 0x558fa8f370b0 <lparser.c:1082:22> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f36e48 <col:22> 'int' EnumConstant 0x558fa8eaf368 'OP_LOADK' 'int'
[B2.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x558fa8f36e70 <lparser.c:1082:32> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
fs
   8: ImplicitCastExpr 0x558fa8f36e98 <lparser.c:1082:32> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36e70 <col:32> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B2.7] (ImplicitCastExpr, LValueToRValue, FuncState *)
   9: MemberExpr 0x558fa8f36eb0 <lparser.c:1082:32, col:36> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f36e98 <col:32> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f36e70 <col:32> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B2.8]->freereg
  10: ImplicitCastExpr 0x558fa8f370c8 <lparser.c:1082:32, col:36> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f36eb0 <col:32, col:36> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f36e98 <col:32> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f36e70 <col:32> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x558fa8f36ee8 <lparser.c:1082:45> 'int (FuncState *, lua_Number)' Function 0x558fa8eba588 'luaK_numberK' 'int (FuncState *, lua_Number)'
luaK_numberK
  12: ImplicitCastExpr 0x558fa8f36fb8 <lparser.c:1082:45> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36ee8 <col:45> 'int (FuncState *, lua_Number)' Function 0x558fa8eba588 'luaK_numberK' 'int (FuncState *, lua_Number)'
[B2.11] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, lua_Number))
  13: DeclRefExpr 0x558fa8f36f10 <lparser.c:1082:58> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x558fa8f37008 <lparser.c:1082:58> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36f10 <col:58> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B2.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: IntegerLiteral 0x558fa8f36f38 <lparser.c:1082:62> 'int' 1
1
  16: ImplicitCastExpr 0x558fa8f37020 <lparser.c:1082:62> 'lua_Number':'double' <IntegralToFloating>
`-IntegerLiteral 0x558fa8f36f38 <col:62> 'int' 1
[B2.15] (ImplicitCastExpr, IntegralToFloating, lua_Number)
  17: CallExpr 0x558fa8f36fd0 <lparser.c:1082:45, col:63> 'int'
|-ImplicitCastExpr 0x558fa8f36fb8 <col:45> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36ee8 <col:45> 'int (FuncState *, lua_Number)' Function 0x558fa8eba588 'luaK_numberK' 'int (FuncState *, lua_Number)'
|-ImplicitCastExpr 0x558fa8f37008 <col:58> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36f10 <col:58> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f37020 <col:62> 'lua_Number':'double' <IntegralToFloating>
  `-IntegerLiteral 0x558fa8f36f38 <col:62> 'int' 1
[B2.12]([B2.14], [B2.16])
  18: ImplicitCastExpr 0x558fa8f370e0 <lparser.c:1082:45, col:63> 'unsigned int' <IntegralCast>
`-CallExpr 0x558fa8f36fd0 <col:45, col:63> 'int'
  |-ImplicitCastExpr 0x558fa8f36fb8 <col:45> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f36ee8 <col:45> 'int (FuncState *, lua_Number)' Function 0x558fa8eba588 'luaK_numberK' 'int (FuncState *, lua_Number)'
  |-ImplicitCastExpr 0x558fa8f37008 <col:58> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f36f10 <col:58> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x558fa8f37020 <col:62> 'lua_Number':'double' <IntegralToFloating>
    `-IntegerLiteral 0x558fa8f36f38 <col:62> 'int' 1
[B2.17] (ImplicitCastExpr, IntegralCast, unsigned int)
  19: CallExpr 0x558fa8f37050 <lparser.c:1082:5, col:64> 'int'
|-ImplicitCastExpr 0x558fa8f37038 <col:5> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36df8 <col:5> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x558fa8f37098 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36e20 <col:18> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f370b0 <col:22> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f36e48 <col:22> 'int' EnumConstant 0x558fa8eaf368 'OP_LOADK' 'int'
|-ImplicitCastExpr 0x558fa8f370c8 <col:32, col:36> 'int' <LValueToRValue>
| `-MemberExpr 0x558fa8f36eb0 <col:32, col:36> 'int' lvalue ->freereg 0x558fa8eb42f0
|   `-ImplicitCastExpr 0x558fa8f36e98 <col:32> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f36e70 <col:32> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f370e0 <col:45, col:63> 'unsigned int' <IntegralCast>
  `-CallExpr 0x558fa8f36fd0 <col:45, col:63> 'int'
    |-ImplicitCastExpr 0x558fa8f36fb8 <col:45> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f36ee8 <col:45> 'int (FuncState *, lua_Number)' Function 0x558fa8eba588 'luaK_numberK' 'int (FuncState *, lua_Number)'
    |-ImplicitCastExpr 0x558fa8f37008 <col:58> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8f36f10 <col:58> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x558fa8f37020 <col:62> 'lua_Number':'double' <IntegralToFloating>
      `-IntegerLiteral 0x558fa8f36f38 <col:62> 'int' 1
[B2.2]([B2.4], [B2.6], [B2.10], [B2.18])
  20: DeclRefExpr 0x558fa8f370f8 <lparser.c:1083:5> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
  21: ImplicitCastExpr 0x558fa8f37168 <lparser.c:1083:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f370f8 <col:5> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
[B2.20] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  22: DeclRefExpr 0x558fa8f37120 <lparser.c:1083:22> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
fs
  23: ImplicitCastExpr 0x558fa8f371b8 <lparser.c:1083:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f37120 <col:22> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B2.22] (ImplicitCastExpr, LValueToRValue, FuncState *)
  24: IntegerLiteral 0x558fa8f37148 <lparser.c:1083:26> 'int' 1
1
  25: CallExpr 0x558fa8f37180 <lparser.c:1083:5, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f37168 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f370f8 <col:5> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f371b8 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f37120 <col:22> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
`-IntegerLiteral 0x558fa8f37148 <col:26> 'int' 1
[B2.21]([B2.23], [B2.24])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f36d48 <lparser.c:1080:5> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
exp1
   2: ImplicitCastExpr 0x558fa8f36d98 <lparser.c:1080:5> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36d48 <col:5> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
   3: DeclRefExpr 0x558fa8f36d70 <lparser.c:1080:10> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f36de0 <lparser.c:1080:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36d70 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f36db0 <lparser.c:1080:5, col:12> 'int'
|-ImplicitCastExpr 0x558fa8f36d98 <col:5> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36d48 <col:5> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f36de0 <col:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f36d70 <col:10> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B3.2]([B3.4])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x558fa8f35be8 <lparser.c:1069:19> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f35c10 <lparser.c:1069:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35be8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f35c28 <lparser.c:1069:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f35c10 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f35be8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.2]->fs
   4: ImplicitCastExpr 0x558fa8f35c60 <lparser.c:1069:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f35c28 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f35c10 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f35be8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f35c78 <lparser.c:1069:3, col:25>col:14
`-VarDecl 0x558fa8f35b88 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f35c60 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f35c28 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f35c10 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f35be8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclRefExpr 0x558fa8f35d08 <lparser.c:1070:14> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x558fa8f35d30 <lparser.c:1070:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35d08 <col:14> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B4.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: MemberExpr 0x558fa8f35d48 <lparser.c:1070:14, col:18> 'int' lvalue ->freereg 0x558fa8eb42f0
`-ImplicitCastExpr 0x558fa8f35d30 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f35d08 <col:14> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B4.7]->freereg
   9: ImplicitCastExpr 0x558fa8f35d80 <lparser.c:1070:14, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f35d48 <col:14, col:18> 'int' lvalue ->freereg 0x558fa8eb42f0
  `-ImplicitCastExpr 0x558fa8f35d30 <col:14> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f35d08 <col:14> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: DeclStmt 0x558fa8f35d98 <lparser.c:1070:3, col:25>col:7
`-VarDecl 0x558fa8f35ca8 <col:3, col:18> col:7 used base 'int' cinit
  `-ImplicitCastExpr 0x558fa8f35d80 <col:14, col:18> 'int' <LValueToRValue>
    `-MemberExpr 0x558fa8f35d48 <col:14, col:18> 'int' lvalue ->freereg 0x558fa8eb42f0
      `-ImplicitCastExpr 0x558fa8f35d30 <col:14> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f35d08 <col:14> 'FuncState *' lvalue Var 0x558fa8f35b88 'fs' 'FuncState *'
int base = fs->freereg;
  11: DeclRefExpr 0x558fa8f35db0 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  12: ImplicitCastExpr 0x558fa8f360d8 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f35db0 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B4.11] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  13: DeclRefExpr 0x558fa8f35dd8 <lparser.c:1071:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  14: ImplicitCastExpr 0x558fa8f36130 <lparser.c:1071:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35dd8 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.13] (ImplicitCastExpr, LValueToRValue, LexState *)
  15: DeclRefExpr 0x558fa8f35e00 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  16: ImplicitCastExpr 0x558fa8f36018 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f35e00 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B4.15] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  17: DeclRefExpr 0x558fa8f35e28 <lparser.c:1071:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  18: ImplicitCastExpr 0x558fa8f36070 <lparser.c:1071:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35e28 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.17] (ImplicitCastExpr, LValueToRValue, LexState *)
  19: StringLiteral 0x558fa8f35e88 <lparser.c:157:39, line:1071:27> 'char [12]' lvalue "(for index)"
"(for index)"
  20: ImplicitCastExpr 0x558fa8f36088 <lparser.c:157:39, line:1071:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f35e88 <line:157:39, line:1071:27> 'char [12]' lvalue "(for index)"
[B4.19] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  21: ImplicitCastExpr 0x558fa8f360a0 <lparser.c:157:39, line:1071:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f36088 <line:157:39, line:1071:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f35e88 <line:157:39, line:1071:27> 'char [12]' lvalue "(for index)"
[B4.20] (ImplicitCastExpr, BitCast, const char *)
  22: UnaryExprOrTypeTraitExpr 0x558fa8f35f20 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f35f00 <col:52, col:54> 'char [12]' lvalue
  `-StringLiteral 0x558fa8f35ec8 <line:1071:27> 'char [12]' lvalue "(for index)"
sizeof ("(for index)")
  23: UnaryExprOrTypeTraitExpr 0x558fa8f35f50 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  24: BinaryOperator 0x558fa8f35f70 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f35f20 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f35f00 <col:52, col:54> 'char [12]' lvalue
|   `-StringLiteral 0x558fa8f35ec8 <line:1071:27> 'char [12]' lvalue "(for index)"
`-UnaryExprOrTypeTraitExpr 0x558fa8f35f50 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B4.22] / [B4.23]
  25: IntegerLiteral 0x558fa8f35fb8 <lparser.c:157:70> 'int' 1
1
  26: ImplicitCastExpr 0x558fa8f35fd8 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f35fb8 <col:70> 'int' 1
[B4.25] (ImplicitCastExpr, IntegralCast, unsigned long)
  27: BinaryOperator 0x558fa8f35ff0 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f35f98 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f35f70 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f35f20 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f35f00 <col:52, col:54> 'char [12]' lvalue
|   |   `-StringLiteral 0x558fa8f35ec8 <line:1071:27> 'char [12]' lvalue "(for index)"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f35f50 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f35fd8 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f35fb8 <col:70> 'int' 1
([B4.24]) - [B4.26]
  28: CallExpr 0x558fa8f36030 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f36018 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f35e00 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f36070 <line:1071:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35e28 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f360a0 <line:157:39, line:1071:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f36088 <line:157:39, line:1071:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f35e88 <line:157:39, line:1071:27> 'char [12]' lvalue "(for index)"
`-BinaryOperator 0x558fa8f35ff0 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f35f98 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f35f70 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f35f20 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f35f00 <col:52, col:54> 'char [12]' lvalue
  |   |   `-StringLiteral 0x558fa8f35ec8 <line:1071:27> 'char [12]' lvalue "(for index)"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f35f50 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f35fd8 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f35fb8 <col:70> 'int' 1
[B4.16]([B4.18], [B4.21], [B4.27])
  29: IntegerLiteral 0x558fa8f360b8 <lparser.c:1071:42> 'int' 0
0
  30: CallExpr 0x558fa8f360f0 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f360d8 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f35db0 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f36130 <line:1071:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35dd8 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-CallExpr 0x558fa8f36030 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f36018 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f35e00 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f36070 <line:1071:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f35e28 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f360a0 <line:157:39, line:1071:27> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f36088 <line:157:39, line:1071:27> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f35e88 <line:157:39, line:1071:27> 'char [12]' lvalue "(for index)"
| `-BinaryOperator 0x558fa8f35ff0 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f35f98 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f35f70 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f35f20 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f35f00 <col:52, col:54> 'char [12]' lvalue
|   |   |   `-StringLiteral 0x558fa8f35ec8 <line:1071:27> 'char [12]' lvalue "(for index)"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f35f50 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f35fd8 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f35fb8 <col:70> 'int' 1
`-IntegerLiteral 0x558fa8f360b8 <line:1071:42> 'int' 0
[B4.12]([B4.14], [B4.28], [B4.29])
  31: DeclRefExpr 0x558fa8f36148 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  32: ImplicitCastExpr 0x558fa8f36438 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36148 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B4.31] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  33: DeclRefExpr 0x558fa8f36170 <lparser.c:1072:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  34: ImplicitCastExpr 0x558fa8f36490 <lparser.c:1072:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36170 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.33] (ImplicitCastExpr, LValueToRValue, LexState *)
  35: DeclRefExpr 0x558fa8f36198 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  36: ImplicitCastExpr 0x558fa8f36378 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36198 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B4.35] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  37: DeclRefExpr 0x558fa8f361c0 <lparser.c:1072:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  38: ImplicitCastExpr 0x558fa8f363d0 <lparser.c:1072:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f361c0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.37] (ImplicitCastExpr, LValueToRValue, LexState *)
  39: StringLiteral 0x558fa8f361e8 <lparser.c:157:39, line:1072:27> 'char [12]' lvalue "(for limit)"
"(for limit)"
  40: ImplicitCastExpr 0x558fa8f363e8 <lparser.c:157:39, line:1072:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f361e8 <line:157:39, line:1072:27> 'char [12]' lvalue "(for limit)"
[B4.39] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  41: ImplicitCastExpr 0x558fa8f36400 <lparser.c:157:39, line:1072:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f363e8 <line:157:39, line:1072:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f361e8 <line:157:39, line:1072:27> 'char [12]' lvalue "(for limit)"
[B4.40] (ImplicitCastExpr, BitCast, const char *)
  42: UnaryExprOrTypeTraitExpr 0x558fa8f36280 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f36260 <col:52, col:54> 'char [12]' lvalue
  `-StringLiteral 0x558fa8f36228 <line:1072:27> 'char [12]' lvalue "(for limit)"
sizeof ("(for limit)")
  43: UnaryExprOrTypeTraitExpr 0x558fa8f362b0 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  44: BinaryOperator 0x558fa8f362d0 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f36280 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f36260 <col:52, col:54> 'char [12]' lvalue
|   `-StringLiteral 0x558fa8f36228 <line:1072:27> 'char [12]' lvalue "(for limit)"
`-UnaryExprOrTypeTraitExpr 0x558fa8f362b0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B4.42] / [B4.43]
  45: IntegerLiteral 0x558fa8f36318 <lparser.c:157:70> 'int' 1
1
  46: ImplicitCastExpr 0x558fa8f36338 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f36318 <col:70> 'int' 1
[B4.45] (ImplicitCastExpr, IntegralCast, unsigned long)
  47: BinaryOperator 0x558fa8f36350 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f362f8 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f362d0 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f36280 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f36260 <col:52, col:54> 'char [12]' lvalue
|   |   `-StringLiteral 0x558fa8f36228 <line:1072:27> 'char [12]' lvalue "(for limit)"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f362b0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f36338 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f36318 <col:70> 'int' 1
([B4.44]) - [B4.46]
  48: CallExpr 0x558fa8f36390 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f36378 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36198 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f363d0 <line:1072:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f361c0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f36400 <line:157:39, line:1072:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f363e8 <line:157:39, line:1072:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f361e8 <line:157:39, line:1072:27> 'char [12]' lvalue "(for limit)"
`-BinaryOperator 0x558fa8f36350 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f362f8 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f362d0 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f36280 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f36260 <col:52, col:54> 'char [12]' lvalue
  |   |   `-StringLiteral 0x558fa8f36228 <line:1072:27> 'char [12]' lvalue "(for limit)"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f362b0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f36338 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f36318 <col:70> 'int' 1
[B4.36]([B4.38], [B4.41], [B4.47])
  49: IntegerLiteral 0x558fa8f36418 <lparser.c:1072:42> 'int' 1
1
  50: CallExpr 0x558fa8f36450 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f36438 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36148 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f36490 <line:1072:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36170 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-CallExpr 0x558fa8f36390 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f36378 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f36198 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f363d0 <line:1072:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f361c0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f36400 <line:157:39, line:1072:27> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f363e8 <line:157:39, line:1072:27> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f361e8 <line:157:39, line:1072:27> 'char [12]' lvalue "(for limit)"
| `-BinaryOperator 0x558fa8f36350 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f362f8 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f362d0 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f36280 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f36260 <col:52, col:54> 'char [12]' lvalue
|   |   |   `-StringLiteral 0x558fa8f36228 <line:1072:27> 'char [12]' lvalue "(for limit)"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f362b0 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f36338 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f36318 <col:70> 'int' 1
`-IntegerLiteral 0x558fa8f36418 <line:1072:42> 'int' 1
[B4.32]([B4.34], [B4.48], [B4.49])
  51: DeclRefExpr 0x558fa8f364a8 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  52: ImplicitCastExpr 0x558fa8f367d8 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f364a8 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B4.51] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  53: DeclRefExpr 0x558fa8f364d0 <lparser.c:1073:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  54: ImplicitCastExpr 0x558fa8f36830 <lparser.c:1073:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f364d0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.53] (ImplicitCastExpr, LValueToRValue, LexState *)
  55: DeclRefExpr 0x558fa8f364f8 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
  56: ImplicitCastExpr 0x558fa8f36718 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f364f8 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B4.55] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
  57: DeclRefExpr 0x558fa8f36520 <lparser.c:1073:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  58: ImplicitCastExpr 0x558fa8f36770 <lparser.c:1073:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36520 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.57] (ImplicitCastExpr, LValueToRValue, LexState *)
  59: StringLiteral 0x558fa8f36588 <lparser.c:157:39, line:1073:27> 'char [11]' lvalue "(for step)"
"(for step)"
  60: ImplicitCastExpr 0x558fa8f36788 <lparser.c:157:39, line:1073:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f36588 <line:157:39, line:1073:27> 'char [11]' lvalue "(for step)"
[B4.59] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  61: ImplicitCastExpr 0x558fa8f367a0 <lparser.c:157:39, line:1073:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f36788 <line:157:39, line:1073:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f36588 <line:157:39, line:1073:27> 'char [11]' lvalue "(for step)"
[B4.60] (ImplicitCastExpr, BitCast, const char *)
  62: UnaryExprOrTypeTraitExpr 0x558fa8f36620 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f36600 <col:52, col:54> 'char [11]' lvalue
  `-StringLiteral 0x558fa8f365c8 <line:1073:27> 'char [11]' lvalue "(for step)"
sizeof ("(for step)")
  63: UnaryExprOrTypeTraitExpr 0x558fa8f36650 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  64: BinaryOperator 0x558fa8f36670 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f36620 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f36600 <col:52, col:54> 'char [11]' lvalue
|   `-StringLiteral 0x558fa8f365c8 <line:1073:27> 'char [11]' lvalue "(for step)"
`-UnaryExprOrTypeTraitExpr 0x558fa8f36650 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B4.62] / [B4.63]
  65: IntegerLiteral 0x558fa8f366b8 <lparser.c:157:70> 'int' 1
1
  66: ImplicitCastExpr 0x558fa8f366d8 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f366b8 <col:70> 'int' 1
[B4.65] (ImplicitCastExpr, IntegralCast, unsigned long)
  67: BinaryOperator 0x558fa8f366f0 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f36698 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f36670 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f36620 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f36600 <col:52, col:54> 'char [11]' lvalue
|   |   `-StringLiteral 0x558fa8f365c8 <line:1073:27> 'char [11]' lvalue "(for step)"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f36650 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f366d8 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f366b8 <col:70> 'int' 1
([B4.64]) - [B4.66]
  68: CallExpr 0x558fa8f36730 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f36718 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f364f8 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f36770 <line:1073:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36520 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f367a0 <line:157:39, line:1073:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f36788 <line:157:39, line:1073:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f36588 <line:157:39, line:1073:27> 'char [11]' lvalue "(for step)"
`-BinaryOperator 0x558fa8f366f0 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f36698 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f36670 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f36620 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f36600 <col:52, col:54> 'char [11]' lvalue
  |   |   `-StringLiteral 0x558fa8f365c8 <line:1073:27> 'char [11]' lvalue "(for step)"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f36650 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f366d8 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f366b8 <col:70> 'int' 1
[B4.56]([B4.58], [B4.61], [B4.67])
  69: IntegerLiteral 0x558fa8f367b8 <lparser.c:1073:41> 'int' 2
2
  70: CallExpr 0x558fa8f367f0 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f367d8 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f364a8 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f36830 <line:1073:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f364d0 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-CallExpr 0x558fa8f36730 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f36718 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f364f8 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f36770 <line:1073:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f36520 <col:23> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f367a0 <line:157:39, line:1073:27> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f36788 <line:157:39, line:1073:27> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f36588 <line:157:39, line:1073:27> 'char [11]' lvalue "(for step)"
| `-BinaryOperator 0x558fa8f366f0 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f36698 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f36670 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f36620 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f36600 <col:52, col:54> 'char [11]' lvalue
|   |   |   `-StringLiteral 0x558fa8f365c8 <line:1073:27> 'char [11]' lvalue "(for step)"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f36650 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f366d8 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f366b8 <col:70> 'int' 1
`-IntegerLiteral 0x558fa8f367b8 <line:1073:41> 'int' 2
[B4.52]([B4.54], [B4.68], [B4.69])
  71: DeclRefExpr 0x558fa8f36848 <lparser.c:1074:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
  72: ImplicitCastExpr 0x558fa8f368f0 <lparser.c:1074:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36848 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B4.71] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
  73: DeclRefExpr 0x558fa8f36870 <lparser.c:1074:16> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  74: ImplicitCastExpr 0x558fa8f36948 <lparser.c:1074:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36870 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.73] (ImplicitCastExpr, LValueToRValue, LexState *)
  75: DeclRefExpr 0x558fa8f36898 <lparser.c:1074:20> 'TString *' lvalue ParmVar 0x558fa8f359b0 'varname' 'TString *'
varname
  76: ImplicitCastExpr 0x558fa8f36960 <lparser.c:1074:20> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36898 <col:20> 'TString *' lvalue ParmVar 0x558fa8f359b0 'varname' 'TString *'
[B4.75] (ImplicitCastExpr, LValueToRValue, TString *)
  77: IntegerLiteral 0x558fa8f368c0 <lparser.c:1074:29> 'int' 3
3
  78: CallExpr 0x558fa8f36908 <lparser.c:1074:3, col:30> 'void'
|-ImplicitCastExpr 0x558fa8f368f0 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36848 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f36948 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36870 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f36960 <col:20> 'TString *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36898 <col:20> 'TString *' lvalue ParmVar 0x558fa8f359b0 'varname' 'TString *'
`-IntegerLiteral 0x558fa8f368c0 <col:29> 'int' 3
[B4.72]([B4.74], [B4.76], [B4.77])
  79: DeclRefExpr 0x558fa8f36978 <lparser.c:1075:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
  80: ImplicitCastExpr 0x558fa8f369e0 <lparser.c:1075:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36978 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B4.79] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  81: DeclRefExpr 0x558fa8f369a0 <lparser.c:1075:13> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  82: ImplicitCastExpr 0x558fa8f36a30 <lparser.c:1075:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f369a0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.81] (ImplicitCastExpr, LValueToRValue, LexState *)
  83: CharacterLiteral 0x558fa8f369c8 <lparser.c:1075:17> 'int' 61
'='
  84: CallExpr 0x558fa8f369f8 <lparser.c:1075:3, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f369e0 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36978 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f36a30 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f369a0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f369c8 <col:17> 'int' 61
[B4.80]([B4.82], [B4.83])
  85: DeclRefExpr 0x558fa8f36a48 <lparser.c:1076:3> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
exp1
  86: ImplicitCastExpr 0x558fa8f36a98 <lparser.c:1076:3> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36a48 <col:3> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
[B4.85] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
  87: DeclRefExpr 0x558fa8f36a70 <lparser.c:1076:8> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  88: ImplicitCastExpr 0x558fa8f36ae0 <lparser.c:1076:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36a70 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.87] (ImplicitCastExpr, LValueToRValue, LexState *)
  89: CallExpr 0x558fa8f36ab0 <lparser.c:1076:3, col:10> 'int'
|-ImplicitCastExpr 0x558fa8f36a98 <col:3> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36a48 <col:3> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f36ae0 <col:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f36a70 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.86]([B4.88])
  90: DeclRefExpr 0x558fa8f36af8 <lparser.c:1077:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
  91: ImplicitCastExpr 0x558fa8f36b60 <lparser.c:1077:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36af8 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B4.90] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  92: DeclRefExpr 0x558fa8f36b20 <lparser.c:1077:13> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  93: ImplicitCastExpr 0x558fa8f36bb0 <lparser.c:1077:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36b20 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.92] (ImplicitCastExpr, LValueToRValue, LexState *)
  94: CharacterLiteral 0x558fa8f36b48 <lparser.c:1077:17> 'int' 44
','
  95: CallExpr 0x558fa8f36b78 <lparser.c:1077:3, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f36b60 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36af8 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f36bb0 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36b20 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f36b48 <col:17> 'int' 44
[B4.91]([B4.93], [B4.94])
  96: DeclRefExpr 0x558fa8f36bc8 <lparser.c:1078:3> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
exp1
  97: ImplicitCastExpr 0x558fa8f36c18 <lparser.c:1078:3> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36bc8 <col:3> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
[B4.96] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
  98: DeclRefExpr 0x558fa8f36bf0 <lparser.c:1078:8> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
  99: ImplicitCastExpr 0x558fa8f36c60 <lparser.c:1078:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36bf0 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.98] (ImplicitCastExpr, LValueToRValue, LexState *)
 100: CallExpr 0x558fa8f36c30 <lparser.c:1078:3, col:10> 'int'
|-ImplicitCastExpr 0x558fa8f36c18 <col:3> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36bc8 <col:3> 'int (LexState *)' Function 0x558fa8f32ba0 'exp1' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f36c60 <col:8> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f36bf0 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.97]([B4.99])
 101: DeclRefExpr 0x558fa8f36c78 <lparser.c:1079:7> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
testnext
 102: ImplicitCastExpr 0x558fa8f36ce0 <lparser.c:1079:7> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f36c78 <col:7> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
[B4.101] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, int))
 103: DeclRefExpr 0x558fa8f36ca0 <lparser.c:1079:16> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
ls
 104: ImplicitCastExpr 0x558fa8f36d30 <lparser.c:1079:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f36ca0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
[B4.103] (ImplicitCastExpr, LValueToRValue, LexState *)
 105: CharacterLiteral 0x558fa8f36cc8 <lparser.c:1079:20> 'int' 44
','
 106: CallExpr 0x558fa8f36cf8 <lparser.c:1079:7, col:23> 'int'
|-ImplicitCastExpr 0x558fa8f36ce0 <col:7> 'int (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f36c78 <col:7> 'int (LexState *, int)' Function 0x558fa8eed328 'testnext' 'int (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f36d30 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f36ca0 <col:16> 'LexState *' lvalue ParmVar 0x558fa8f35940 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f36cc8 <col:20> 'int' 44
[B4.102]([B4.104], [B4.105])
   T: if [B4.106]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1
