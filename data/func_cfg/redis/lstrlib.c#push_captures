static int push_captures(MatchState *ms, const char *s, const char *e)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x55fb421e6ba8 <lstrlib.c:491:10> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
nlevels
   2: ImplicitCastExpr 0x55fb421e6bd0 <lstrlib.c:491:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb421e6ba8 <col:10> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x55fb421e6be8 <lstrlib.c:491:3, col:10>
`-ImplicitCastExpr 0x55fb421e6bd0 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55fb421e6ba8 <col:10> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
return [B1.2];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x55fb421e6928 <lstrlib.c:489:28> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
i
   2: UnaryOperator 0x55fb421e6950 <lstrlib.c:489:28, col:29> 'int' postfix '++'
`-DeclRefExpr 0x55fb421e6928 <col:28> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
[B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: DeclRefExpr 0x55fb421e6970 <lstrlib.c:490:5> 'void (MatchState *, int, const char *, const char *)' Function 0x55fb421e4dc0 'push_onecapture' 'void (MatchState *, int, const char *, const char *)'
push_onecapture
   2: ImplicitCastExpr 0x55fb421e6a98 <lstrlib.c:490:5> 'void (*)(MatchState *, int, const char *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55fb421e6970 <col:5> 'void (MatchState *, int, const char *, const char *)' Function 0x55fb421e4dc0 'push_onecapture' 'void (MatchState *, int, const char *, const char *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(MatchState *, int, const char *, const char *))
   3: DeclRefExpr 0x55fb421e6998 <lstrlib.c:490:21> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
ms
   4: ImplicitCastExpr 0x55fb421e6b10 <lstrlib.c:490:21> 'MatchState *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e6998 <col:21> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, MatchState *)
   5: DeclRefExpr 0x55fb421e69c0 <lstrlib.c:490:25> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
i
   6: ImplicitCastExpr 0x55fb421e6b28 <lstrlib.c:490:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb421e69c0 <col:25> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
[B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x55fb421e69e8 <lstrlib.c:490:28> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
s
   8: ImplicitCastExpr 0x55fb421e6b40 <lstrlib.c:490:28> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e69e8 <col:28> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
[B3.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: DeclRefExpr 0x55fb421e6a10 <lstrlib.c:490:31> 'const char *' lvalue ParmVar 0x55fb421e60f8 'e' 'const char *'
e
  10: ImplicitCastExpr 0x55fb421e6b58 <lstrlib.c:490:31> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e6a10 <col:31> 'const char *' lvalue ParmVar 0x55fb421e60f8 'e' 'const char *'
[B3.9] (ImplicitCastExpr, LValueToRValue, const char *)
  11: CallExpr 0x55fb421e6ab0 <lstrlib.c:490:5, col:32> 'void'
|-ImplicitCastExpr 0x55fb421e6a98 <col:5> 'void (*)(MatchState *, int, const char *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55fb421e6970 <col:5> 'void (MatchState *, int, const char *, const char *)' Function 0x55fb421e4dc0 'push_onecapture' 'void (MatchState *, int, const char *, const char *)'
|-ImplicitCastExpr 0x55fb421e6b10 <col:21> 'MatchState *' <LValueToRValue>
| `-DeclRefExpr 0x55fb421e6998 <col:21> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
|-ImplicitCastExpr 0x55fb421e6b28 <col:25> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55fb421e69c0 <col:25> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
|-ImplicitCastExpr 0x55fb421e6b40 <col:28> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55fb421e69e8 <col:28> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
`-ImplicitCastExpr 0x55fb421e6b58 <col:31> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421e6a10 <col:31> 'const char *' lvalue ParmVar 0x55fb421e60f8 'e' 'const char *'
[B3.2]([B3.4], [B3.6], [B3.8], [B3.10])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x55fb421e6880 <lstrlib.c:489:15> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
i
   2: ImplicitCastExpr 0x55fb421e68d0 <lstrlib.c:489:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb421e6880 <col:15> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
[B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x55fb421e68a8 <lstrlib.c:489:19> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
nlevels
   4: ImplicitCastExpr 0x55fb421e68e8 <lstrlib.c:489:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb421e68a8 <col:19> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x55fb421e6900 <lstrlib.c:489:15, col:19> 'int' '<'
|-ImplicitCastExpr 0x55fb421e68d0 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55fb421e6880 <col:15> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
`-ImplicitCastExpr 0x55fb421e68e8 <col:19> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55fb421e68a8 <col:19> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
[B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: ConditionalOperator 0x55fb421e6608 <lstrlib.c:487:17, col:49> 'int'
|-ParenExpr 0x55fb421e6538 <col:17, col:37> 'int'
| `-BinaryOperator 0x55fb421e6510 <col:18, col:36> 'int' '&&'
|   |-BinaryOperator 0x55fb421e64a8 <col:18, col:31> 'int' '=='
|   | |-ImplicitCastExpr 0x55fb421e6490 <col:18, col:22> 'int' <LValueToRValue>
|   | | `-MemberExpr 0x55fb421e6438 <col:18, col:22> 'int' lvalue ->level 0x55fb421c3700
|   | |   `-ImplicitCastExpr 0x55fb421e6420 <col:18> 'MatchState *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55fb421e63f8 <col:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
|   | `-IntegerLiteral 0x55fb421e6470 <col:31> 'int' 0
|   `-ImplicitCastExpr 0x55fb421e64f8 <col:36> 'const char *' <LValueToRValue>
|     `-DeclRefExpr 0x55fb421e64d0 <col:36> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
|-IntegerLiteral 0x55fb421e6558 <col:41> 'int' 1
`-ImplicitCastExpr 0x55fb421e65f0 <col:45, col:49> 'int' <LValueToRValue>
  `-MemberExpr 0x55fb421e65b8 <col:45, col:49> 'int' lvalue ->level 0x55fb421c3700
    `-ImplicitCastExpr 0x55fb421e65a0 <col:45> 'MatchState *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421e6578 <col:45> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
([B9.7] && [B8.2]) ? [B6.1] : [B7.4]
   2: DeclStmt 0x55fb421e6638 <lstrlib.c:487:3, col:54>col:7
`-VarDecl 0x55fb421e6398 <col:3, col:49> col:7 used nlevels 'int' cinit
  `-ConditionalOperator 0x55fb421e6608 <col:17, col:49> 'int'
    |-ParenExpr 0x55fb421e6538 <col:17, col:37> 'int'
    | `-BinaryOperator 0x55fb421e6510 <col:18, col:36> 'int' '&&'
    |   |-BinaryOperator 0x55fb421e64a8 <col:18, col:31> 'int' '=='
    |   | |-ImplicitCastExpr 0x55fb421e6490 <col:18, col:22> 'int' <LValueToRValue>
    |   | | `-MemberExpr 0x55fb421e6438 <col:18, col:22> 'int' lvalue ->level 0x55fb421c3700
    |   | |   `-ImplicitCastExpr 0x55fb421e6420 <col:18> 'MatchState *' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x55fb421e63f8 <col:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
    |   | `-IntegerLiteral 0x55fb421e6470 <col:31> 'int' 0
    |   `-ImplicitCastExpr 0x55fb421e64f8 <col:36> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x55fb421e64d0 <col:36> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
    |-IntegerLiteral 0x55fb421e6558 <col:41> 'int' 1
    `-ImplicitCastExpr 0x55fb421e65f0 <col:45, col:49> 'int' <LValueToRValue>
      `-MemberExpr 0x55fb421e65b8 <col:45, col:49> 'int' lvalue ->level 0x55fb421c3700
        `-ImplicitCastExpr 0x55fb421e65a0 <col:45> 'MatchState *' <LValueToRValue>
          `-DeclRefExpr 0x55fb421e6578 <col:45> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
int nlevels = (ms->level == 0 && s) ? 1 : ms->level;
   3: DeclRefExpr 0x55fb421e6650 <lstrlib.c:488:3> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x55fb421a6640 'luaL_checkstack' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
luaL_checkstack
   4: ImplicitCastExpr 0x55fb421e6758 <lstrlib.c:488:3> 'void (*)(lua_State *, int, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55fb421e6650 <col:3> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x55fb421a6640 'luaL_checkstack' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
[B5.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int, const char *))
   5: DeclRefExpr 0x55fb421e6678 <lstrlib.c:488:19> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
ms
   6: ImplicitCastExpr 0x55fb421e66a0 <lstrlib.c:488:19> 'MatchState *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e6678 <col:19> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B5.5] (ImplicitCastExpr, LValueToRValue, MatchState *)
   7: MemberExpr 0x55fb421e66b8 <lstrlib.c:488:19, col:23> 'lua_State *' lvalue ->L 0x55fb421c36a0
`-ImplicitCastExpr 0x55fb421e66a0 <col:19> 'MatchState *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421e6678 <col:19> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B5.6]->L
   8: ImplicitCastExpr 0x55fb421e67b0 <lstrlib.c:488:19, col:23> 'lua_State *' <LValueToRValue>
`-MemberExpr 0x55fb421e66b8 <col:19, col:23> 'lua_State *' lvalue ->L 0x55fb421c36a0
  `-ImplicitCastExpr 0x55fb421e66a0 <col:19> 'MatchState *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421e6678 <col:19> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B5.7] (ImplicitCastExpr, LValueToRValue, lua_State *)
   9: DeclRefExpr 0x55fb421e66f0 <lstrlib.c:488:26> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
nlevels
  10: ImplicitCastExpr 0x55fb421e67c8 <lstrlib.c:488:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x55fb421e66f0 <col:26> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
[B5.9] (ImplicitCastExpr, LValueToRValue, int)
  11: StringLiteral 0x55fb421e6718 <lstrlib.c:488:35> 'char [18]' lvalue "too many captures"
"too many captures"
  12: ImplicitCastExpr 0x55fb421e67e0 <lstrlib.c:488:35> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55fb421e6718 <col:35> 'char [18]' lvalue "too many captures"
[B5.11] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  13: ImplicitCastExpr 0x55fb421e67f8 <lstrlib.c:488:35> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55fb421e67e0 <col:35> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55fb421e6718 <col:35> 'char [18]' lvalue "too many captures"
[B5.12] (ImplicitCastExpr, BitCast, const char *)
  14: CallExpr 0x55fb421e6770 <lstrlib.c:488:3, col:54> 'void'
|-ImplicitCastExpr 0x55fb421e6758 <col:3> 'void (*)(lua_State *, int, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55fb421e6650 <col:3> 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)' Function 0x55fb421a6640 'luaL_checkstack' 'void (lua_State *, int, const char *)':'void (lua_State *, int, const char *)'
|-ImplicitCastExpr 0x55fb421e67b0 <col:19, col:23> 'lua_State *' <LValueToRValue>
| `-MemberExpr 0x55fb421e66b8 <col:19, col:23> 'lua_State *' lvalue ->L 0x55fb421c36a0
|   `-ImplicitCastExpr 0x55fb421e66a0 <col:19> 'MatchState *' <LValueToRValue>
|     `-DeclRefExpr 0x55fb421e6678 <col:19> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
|-ImplicitCastExpr 0x55fb421e67c8 <col:26> 'int' <LValueToRValue>
| `-DeclRefExpr 0x55fb421e66f0 <col:26> 'int' lvalue Var 0x55fb421e6398 'nlevels' 'int'
`-ImplicitCastExpr 0x55fb421e67f8 <col:35> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55fb421e67e0 <col:35> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55fb421e6718 <col:35> 'char [18]' lvalue "too many captures"
[B5.4]([B5.8], [B5.10], [B5.13])
  15: IntegerLiteral 0x55fb421e6838 <lstrlib.c:489:12> 'int' 0
0
  16: DeclRefExpr 0x55fb421e6810 <lstrlib.c:489:8> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
i
  17: BinaryOperator 0x55fb421e6858 <lstrlib.c:489:8, col:12> 'int' '='
|-DeclRefExpr 0x55fb421e6810 <col:8> 'int' lvalue Var 0x55fb421e6308 'i' 'int'
`-IntegerLiteral 0x55fb421e6838 <col:12> 'int' 0
[B5.16] = [B5.15]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: IntegerLiteral 0x55fb421e6558 <lstrlib.c:487:41> 'int' 1
1
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x55fb421e6578 <lstrlib.c:487:45> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
ms
   2: ImplicitCastExpr 0x55fb421e65a0 <lstrlib.c:487:45> 'MatchState *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e6578 <col:45> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B7.1] (ImplicitCastExpr, LValueToRValue, MatchState *)
   3: MemberExpr 0x55fb421e65b8 <lstrlib.c:487:45, col:49> 'int' lvalue ->level 0x55fb421c3700
`-ImplicitCastExpr 0x55fb421e65a0 <col:45> 'MatchState *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421e6578 <col:45> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B7.2]->level
   4: ImplicitCastExpr 0x55fb421e65f0 <lstrlib.c:487:45, col:49> 'int' <LValueToRValue>
`-MemberExpr 0x55fb421e65b8 <col:45, col:49> 'int' lvalue ->level 0x55fb421c3700
  `-ImplicitCastExpr 0x55fb421e65a0 <col:45> 'MatchState *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421e6578 <col:45> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   Preds (2): B8 B9
   Succs (1): B5

 [B8]
   1: DeclRefExpr 0x55fb421e64d0 <lstrlib.c:487:36> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
s
   2: ImplicitCastExpr 0x55fb421e64f8 <lstrlib.c:487:36> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e64d0 <col:36> 'const char *' lvalue ParmVar 0x55fb421e6080 's' 'const char *'
[B8.1] (ImplicitCastExpr, LValueToRValue, const char *)
   T: ([B9.7] && [B8.2]) ? ... : ...
   Preds (1): B9
   Succs (2): B6 B7

 [B9]
   1: DeclStmt 0x55fb421e6368 <lstrlib.c:486:3, col:8>col:7
`-VarDecl 0x55fb421e6308 <col:3, col:7> col:7 used i 'int'
int i;
   2: DeclRefExpr 0x55fb421e63f8 <lstrlib.c:487:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
ms
   3: ImplicitCastExpr 0x55fb421e6420 <lstrlib.c:487:18> 'MatchState *' <LValueToRValue>
`-DeclRefExpr 0x55fb421e63f8 <col:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B9.2] (ImplicitCastExpr, LValueToRValue, MatchState *)
   4: MemberExpr 0x55fb421e6438 <lstrlib.c:487:18, col:22> 'int' lvalue ->level 0x55fb421c3700
`-ImplicitCastExpr 0x55fb421e6420 <col:18> 'MatchState *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421e63f8 <col:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B9.3]->level
   5: ImplicitCastExpr 0x55fb421e6490 <lstrlib.c:487:18, col:22> 'int' <LValueToRValue>
`-MemberExpr 0x55fb421e6438 <col:18, col:22> 'int' lvalue ->level 0x55fb421c3700
  `-ImplicitCastExpr 0x55fb421e6420 <col:18> 'MatchState *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421e63f8 <col:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
[B9.4] (ImplicitCastExpr, LValueToRValue, int)
   6: IntegerLiteral 0x55fb421e6470 <lstrlib.c:487:31> 'int' 0
0
   7: BinaryOperator 0x55fb421e64a8 <lstrlib.c:487:18, col:31> 'int' '=='
|-ImplicitCastExpr 0x55fb421e6490 <col:18, col:22> 'int' <LValueToRValue>
| `-MemberExpr 0x55fb421e6438 <col:18, col:22> 'int' lvalue ->level 0x55fb421c3700
|   `-ImplicitCastExpr 0x55fb421e6420 <col:18> 'MatchState *' <LValueToRValue>
|     `-DeclRefExpr 0x55fb421e63f8 <col:18> 'MatchState *' lvalue ParmVar 0x55fb421e6008 'ms' 'MatchState *'
`-IntegerLiteral 0x55fb421e6470 <col:31> 'int' 0
[B9.5] == [B9.6]
   T: [B9.7] && ...
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (1): B1
