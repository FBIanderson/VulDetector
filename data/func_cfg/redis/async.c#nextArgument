static const char *nextArgument(const char *start, const char **str, size_t *len)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: ConditionalOperator 0x55bf9a622028 </usr/include/assert.h:98:6, line:100:67> 'void'
|-ImplicitCastExpr 0x55bf9a622010 <line:98:6, col:11> 'const char *' <LValueToRValue>
| `-ParenExpr 0x55bf9a621c38 <col:6, col:11> 'const char *' lvalue
|   `-DeclRefExpr 0x55bf9a621c10 <async.c:626:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
|-CStyleCastExpr 0x55bf9a621cd8 </usr/include/assert.h:40:29, line:99:29> 'void' <ToVoid>
| `-ParenExpr 0x55bf9a621cb8 <col:27, col:29> 'int'
|   `-IntegerLiteral 0x55bf9a621c58 <col:28> 'int' 0
`-CallExpr 0x55bf9a621f68 <line:100:8, col:67> 'void'
  |-ImplicitCastExpr 0x55bf9a621f50 <col:8> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55bf9a621d00 <col:8> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55bf9a52ff20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
  |-ImplicitCastExpr 0x55bf9a621fb0 <<scratch space>:149:1> 'const char *' <ArrayToPointerDecay>
  | `-StringLiteral 0x55bf9a621da8 <col:1> 'const char [2]' lvalue "p"
  |-ImplicitCastExpr 0x55bf9a621fc8 <line:150:1> 'const char *' <ArrayToPointerDecay>
  | `-StringLiteral 0x55bf9a621dd8 <col:1> 'const char [8]' lvalue "async.c"
  |-ImplicitCastExpr 0x55bf9a621fe0 <line:151:1> 'unsigned int' <IntegralCast>
  | `-IntegerLiteral 0x55bf9a621e08 <col:1> 'int' 626
  `-ImplicitCastExpr 0x55bf9a621ff8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
    `-UnaryOperator 0x55bf9a621f30 <col:30, col:44> 'const char [64]' lvalue prefix '__extension__'
      `-PredefinedExpr 0x55bf9a621f10 <col:44> 'const char [64]' lvalue __PRETTY_FUNCTION__
        `-StringLiteral 0x55bf9a621ea8 <col:44> 'const char [64]' lvalue "const char *nextArgument(const char *, const char **, size_t *)"
[B4.28] ? [B2.2] : [B3.12]
   2: DeclRefExpr 0x55bf9a6220d8 <async.c:627:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
   3: ImplicitCastExpr 0x55bf9a622120 <async.c:627:12> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a6220d8 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B1.2] (ImplicitCastExpr, LValueToRValue, const char *)
   4: IntegerLiteral 0x55bf9a622100 <async.c:627:14> 'int' 2
2
   5: BinaryOperator 0x55bf9a622138 <async.c:627:12, col:14> 'const char *' '+'
|-ImplicitCastExpr 0x55bf9a622120 <col:12> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a6220d8 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-IntegerLiteral 0x55bf9a622100 <col:14> 'int' 2
[B1.3] + [B1.4]
   6: DeclRefExpr 0x55bf9a622078 <async.c:627:6> 'const char **' lvalue ParmVar 0x55bf9a620fd8 'str' 'const char **'
str
   7: ImplicitCastExpr 0x55bf9a6220a0 <async.c:627:6> 'const char **' <LValueToRValue>
`-DeclRefExpr 0x55bf9a622078 <col:6> 'const char **' lvalue ParmVar 0x55bf9a620fd8 'str' 'const char **'
[B1.6] (ImplicitCastExpr, LValueToRValue, const char **)
   8: UnaryOperator 0x55bf9a6220b8 <async.c:627:5, col:6> 'const char *' lvalue prefix '*'
`-ImplicitCastExpr 0x55bf9a6220a0 <col:6> 'const char **' <LValueToRValue>
  `-DeclRefExpr 0x55bf9a622078 <col:6> 'const char **' lvalue ParmVar 0x55bf9a620fd8 'str' 'const char **'
*[B1.7]
   9: BinaryOperator 0x55bf9a622160 <async.c:627:5, col:14> 'const char *' '='
|-UnaryOperator 0x55bf9a6220b8 <col:5, col:6> 'const char *' lvalue prefix '*'
| `-ImplicitCastExpr 0x55bf9a6220a0 <col:6> 'const char **' <LValueToRValue>
|   `-DeclRefExpr 0x55bf9a622078 <col:6> 'const char **' lvalue ParmVar 0x55bf9a620fd8 'str' 'const char **'
`-BinaryOperator 0x55bf9a622138 <col:12, col:14> 'const char *' '+'
  |-ImplicitCastExpr 0x55bf9a622120 <col:12> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55bf9a6220d8 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
  `-IntegerLiteral 0x55bf9a622100 <col:14> 'int' 2
[B1.8] = [B1.5]
  10: DeclRefExpr 0x55bf9a622188 <async.c:628:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
  11: ImplicitCastExpr 0x55bf9a6221d0 <async.c:628:12> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a622188 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B1.10] (ImplicitCastExpr, LValueToRValue, const char *)
  12: IntegerLiteral 0x55bf9a6221b0 <async.c:628:14> 'int' 2
2
  13: BinaryOperator 0x55bf9a6221e8 <async.c:628:12, col:14> 'const char *' '+'
|-ImplicitCastExpr 0x55bf9a6221d0 <col:12> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a622188 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-IntegerLiteral 0x55bf9a6221b0 <col:14> 'int' 2
[B1.11] + [B1.12]
  14: DeclRefExpr 0x55bf9a622210 <async.c:628:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
len
  15: ImplicitCastExpr 0x55bf9a622238 <async.c:628:18> 'size_t *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a622210 <col:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
[B1.14] (ImplicitCastExpr, LValueToRValue, size_t *)
  16: UnaryOperator 0x55bf9a622250 <async.c:628:17, col:18> 'size_t':'unsigned long' lvalue prefix '*'
`-ImplicitCastExpr 0x55bf9a622238 <col:18> 'size_t *' <LValueToRValue>
  `-DeclRefExpr 0x55bf9a622210 <col:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
*[B1.15]
  17: ImplicitCastExpr 0x55bf9a622290 <async.c:628:16, col:21> 'size_t':'unsigned long' <LValueToRValue>
`-ParenExpr 0x55bf9a622270 <col:16, col:21> 'size_t':'unsigned long' lvalue
  `-UnaryOperator 0x55bf9a622250 <col:17, col:18> 'size_t':'unsigned long' lvalue prefix '*'
    `-ImplicitCastExpr 0x55bf9a622238 <col:18> 'size_t *' <LValueToRValue>
      `-DeclRefExpr 0x55bf9a622210 <col:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
([B1.16]) (ImplicitCastExpr, LValueToRValue, size_t)
  18: BinaryOperator 0x55bf9a6222a8 <async.c:628:12, col:21> 'const char *' '+'
|-BinaryOperator 0x55bf9a6221e8 <col:12, col:14> 'const char *' '+'
| |-ImplicitCastExpr 0x55bf9a6221d0 <col:12> 'const char *' <LValueToRValue>
| | `-DeclRefExpr 0x55bf9a622188 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
| `-IntegerLiteral 0x55bf9a6221b0 <col:14> 'int' 2
`-ImplicitCastExpr 0x55bf9a622290 <col:16, col:21> 'size_t':'unsigned long' <LValueToRValue>
  `-ParenExpr 0x55bf9a622270 <col:16, col:21> 'size_t':'unsigned long' lvalue
    `-UnaryOperator 0x55bf9a622250 <col:17, col:18> 'size_t':'unsigned long' lvalue prefix '*'
      `-ImplicitCastExpr 0x55bf9a622238 <col:18> 'size_t *' <LValueToRValue>
        `-DeclRefExpr 0x55bf9a622210 <col:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
[B1.13] + [B1.17]
  19: IntegerLiteral 0x55bf9a6222d0 <async.c:628:23> 'int' 2
2
  20: BinaryOperator 0x55bf9a6222f0 <async.c:628:12, col:23> 'const char *' '+'
|-BinaryOperator 0x55bf9a6222a8 <col:12, col:21> 'const char *' '+'
| |-BinaryOperator 0x55bf9a6221e8 <col:12, col:14> 'const char *' '+'
| | |-ImplicitCastExpr 0x55bf9a6221d0 <col:12> 'const char *' <LValueToRValue>
| | | `-DeclRefExpr 0x55bf9a622188 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
| | `-IntegerLiteral 0x55bf9a6221b0 <col:14> 'int' 2
| `-ImplicitCastExpr 0x55bf9a622290 <col:16, col:21> 'size_t':'unsigned long' <LValueToRValue>
|   `-ParenExpr 0x55bf9a622270 <col:16, col:21> 'size_t':'unsigned long' lvalue
|     `-UnaryOperator 0x55bf9a622250 <col:17, col:18> 'size_t':'unsigned long' lvalue prefix '*'
|       `-ImplicitCastExpr 0x55bf9a622238 <col:18> 'size_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55bf9a622210 <col:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
`-IntegerLiteral 0x55bf9a6222d0 <col:23> 'int' 2
[B1.18] + [B1.19]
  21: ReturnStmt 0x55bf9a622318 <async.c:628:5, col:23>
`-BinaryOperator 0x55bf9a6222f0 <col:12, col:23> 'const char *' '+'
  |-BinaryOperator 0x55bf9a6222a8 <col:12, col:21> 'const char *' '+'
  | |-BinaryOperator 0x55bf9a6221e8 <col:12, col:14> 'const char *' '+'
  | | |-ImplicitCastExpr 0x55bf9a6221d0 <col:12> 'const char *' <LValueToRValue>
  | | | `-DeclRefExpr 0x55bf9a622188 <col:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
  | | `-IntegerLiteral 0x55bf9a6221b0 <col:14> 'int' 2
  | `-ImplicitCastExpr 0x55bf9a622290 <col:16, col:21> 'size_t':'unsigned long' <LValueToRValue>
  |   `-ParenExpr 0x55bf9a622270 <col:16, col:21> 'size_t':'unsigned long' lvalue
  |     `-UnaryOperator 0x55bf9a622250 <col:17, col:18> 'size_t':'unsigned long' lvalue prefix '*'
  |       `-ImplicitCastExpr 0x55bf9a622238 <col:18> 'size_t *' <LValueToRValue>
  |         `-DeclRefExpr 0x55bf9a622210 <col:18> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
  `-IntegerLiteral 0x55bf9a6222d0 <col:23> 'int' 2
return [B1.20];
   Preds (2): B2 B3(Unreachable)
   Succs (1): B0

 [B2]
   1: IntegerLiteral 0x55bf9a621c58 </usr/include/assert.h:99:28> 'int' 0
0
   2: CStyleCastExpr 0x55bf9a621cd8 </usr/include/assert.h:40:29, line:99:29> 'void' <ToVoid>
`-ParenExpr 0x55bf9a621cb8 <col:27, col:29> 'int'
  `-IntegerLiteral 0x55bf9a621c58 <col:28> 'int' 0
(void)([B2.1]) (CStyleCastExpr, ToVoid, void)
   Preds (1): B4
   Succs (1): B1

 [B3 (NORETURN)]
   1: DeclRefExpr 0x55bf9a621d00 </usr/include/assert.h:100:8> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55bf9a52ff20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
__assert_fail
   2: ImplicitCastExpr 0x55bf9a621f50 </usr/include/assert.h:100:8> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
`-DeclRefExpr 0x55bf9a621d00 <col:8> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55bf9a52ff20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)))
   3: StringLiteral 0x55bf9a621da8 <<scratch space>:149:1> 'const char [2]' lvalue "p"
"p"
   4: ImplicitCastExpr 0x55bf9a621fb0 <<scratch space>:149:1> 'const char *' <ArrayToPointerDecay>
`-StringLiteral 0x55bf9a621da8 <col:1> 'const char [2]' lvalue "p"
[B3.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: StringLiteral 0x55bf9a621dd8 <<scratch space>:150:1> 'const char [8]' lvalue "async.c"
"async.c"
   6: ImplicitCastExpr 0x55bf9a621fc8 <<scratch space>:150:1> 'const char *' <ArrayToPointerDecay>
`-StringLiteral 0x55bf9a621dd8 <col:1> 'const char [8]' lvalue "async.c"
[B3.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: IntegerLiteral 0x55bf9a621e08 <<scratch space>:151:1> 'int' 626
626
   8: ImplicitCastExpr 0x55bf9a621fe0 <<scratch space>:151:1> 'unsigned int' <IntegralCast>
`-IntegerLiteral 0x55bf9a621e08 <col:1> 'int' 626
[B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: StringLiteral 0x55bf9a621ea8 </usr/include/assert.h:129:44> 'const char [64]' lvalue "const char *nextArgument(const char *, const char **, size_t *)"
"const char *nextArgument(const char *, const char **, size_t *)"
  10: PredefinedExpr 0x55bf9a621f10 </usr/include/assert.h:129:44> 'const char [64]' lvalue __PRETTY_FUNCTION__
`-StringLiteral 0x55bf9a621ea8 <col:44> 'const char [64]' lvalue "const char *nextArgument(const char *, const char **, size_t *)"
__PRETTY_FUNCTION__
  11: ImplicitCastExpr 0x55bf9a621ff8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
`-UnaryOperator 0x55bf9a621f30 <col:30, col:44> 'const char [64]' lvalue prefix '__extension__'
  `-PredefinedExpr 0x55bf9a621f10 <col:44> 'const char [64]' lvalue __PRETTY_FUNCTION__
    `-StringLiteral 0x55bf9a621ea8 <col:44> 'const char [64]' lvalue "const char *nextArgument(const char *, const char **, size_t *)"
__extension__ [B3.10] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  12: CallExpr 0x55bf9a621f68 </usr/include/assert.h:100:8, col:67> 'void'
|-ImplicitCastExpr 0x55bf9a621f50 <col:8> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55bf9a621d00 <col:8> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x55bf9a52ff20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|-ImplicitCastExpr 0x55bf9a621fb0 <<scratch space>:149:1> 'const char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55bf9a621da8 <col:1> 'const char [2]' lvalue "p"
|-ImplicitCastExpr 0x55bf9a621fc8 <line:150:1> 'const char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55bf9a621dd8 <col:1> 'const char [8]' lvalue "async.c"
|-ImplicitCastExpr 0x55bf9a621fe0 <line:151:1> 'unsigned int' <IntegralCast>
| `-IntegerLiteral 0x55bf9a621e08 <col:1> 'int' 626
`-ImplicitCastExpr 0x55bf9a621ff8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
  `-UnaryOperator 0x55bf9a621f30 <col:30, col:44> 'const char [64]' lvalue prefix '__extension__'
    `-PredefinedExpr 0x55bf9a621f10 <col:44> 'const char [64]' lvalue __PRETTY_FUNCTION__
      `-StringLiteral 0x55bf9a621ea8 <col:44> 'const char [64]' lvalue "const char *nextArgument(const char *, const char **, size_t *)"
[B3.2]([B3.4], [B3.6], [B3.8], [B3.11])
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x55bf9a621880 <async.c:624:17> 'long (const char *__restrict, char **__restrict, int)' Function 0x55bf9a4ea908 'strtol' 'long (const char *__restrict, char **__restrict, int)'
strtol
   2: ImplicitCastExpr 0x55bf9a6219d0 <async.c:624:17> 'long (*)(const char *__restrict, char **__restrict, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55bf9a621880 <col:17> 'long (const char *__restrict, char **__restrict, int)' Function 0x55bf9a4ea908 'strtol' 'long (const char *__restrict, char **__restrict, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, long (*)(const char *__restrict, char **__restrict, int))
   3: DeclRefExpr 0x55bf9a6218a8 <async.c:624:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
   4: ImplicitCastExpr 0x55bf9a6218f0 <async.c:624:24> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a6218a8 <col:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B4.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: IntegerLiteral 0x55bf9a6218d0 <async.c:624:26> 'int' 1
1
   6: BinaryOperator 0x55bf9a621908 <async.c:624:24, col:26> 'const char *' '+'
|-ImplicitCastExpr 0x55bf9a6218f0 <col:24> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a6218a8 <col:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-IntegerLiteral 0x55bf9a6218d0 <col:26> 'int' 1
[B4.4] + [B4.5]
   7: IntegerLiteral 0x55bf9a621930 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   8: CStyleCastExpr 0x55bf9a621968 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55bf9a621930 <col:24> 'int' 0
(void *)[B4.7] (CStyleCastExpr, NullToPointer, void *)
   9: ImplicitCastExpr 0x55bf9a621a28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <NullToPointer>
`-ParenExpr 0x55bf9a621990 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55bf9a621968 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55bf9a621930 <col:24> 'int' 0
([B4.8]) (ImplicitCastExpr, NullToPointer, char **)
  10: IntegerLiteral 0x55bf9a6219b0 <async.c:624:33> 'int' 10
10
  11: CallExpr 0x55bf9a6219e8 <async.c:624:17, col:35> 'long'
|-ImplicitCastExpr 0x55bf9a6219d0 <col:17> 'long (*)(const char *__restrict, char **__restrict, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55bf9a621880 <col:17> 'long (const char *__restrict, char **__restrict, int)' Function 0x55bf9a4ea908 'strtol' 'long (const char *__restrict, char **__restrict, int)'
|-BinaryOperator 0x55bf9a621908 <col:24, col:26> 'const char *' '+'
| |-ImplicitCastExpr 0x55bf9a6218f0 <col:24> 'const char *' <LValueToRValue>
| | `-DeclRefExpr 0x55bf9a6218a8 <col:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
| `-IntegerLiteral 0x55bf9a6218d0 <col:26> 'int' 1
|-ImplicitCastExpr 0x55bf9a621a28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <NullToPointer>
| `-ParenExpr 0x55bf9a621990 <col:16, col:25> 'void *'
|   `-CStyleCastExpr 0x55bf9a621968 <col:17, col:24> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x55bf9a621930 <col:24> 'int' 0
`-IntegerLiteral 0x55bf9a6219b0 <async.c:624:33> 'int' 10
[B4.2]([B4.6], [B4.9], [B4.10])
  12: CStyleCastExpr 0x55bf9a621a58 <async.c:624:12, col:35> 'int' <IntegralCast>
`-CallExpr 0x55bf9a6219e8 <col:17, col:35> 'long'
  |-ImplicitCastExpr 0x55bf9a6219d0 <col:17> 'long (*)(const char *__restrict, char **__restrict, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55bf9a621880 <col:17> 'long (const char *__restrict, char **__restrict, int)' Function 0x55bf9a4ea908 'strtol' 'long (const char *__restrict, char **__restrict, int)'
  |-BinaryOperator 0x55bf9a621908 <col:24, col:26> 'const char *' '+'
  | |-ImplicitCastExpr 0x55bf9a6218f0 <col:24> 'const char *' <LValueToRValue>
  | | `-DeclRefExpr 0x55bf9a6218a8 <col:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
  | `-IntegerLiteral 0x55bf9a6218d0 <col:26> 'int' 1
  |-ImplicitCastExpr 0x55bf9a621a28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <NullToPointer>
  | `-ParenExpr 0x55bf9a621990 <col:16, col:25> 'void *'
  |   `-CStyleCastExpr 0x55bf9a621968 <col:17, col:24> 'void *' <NullToPointer>
  |     `-IntegerLiteral 0x55bf9a621930 <col:24> 'int' 0
  `-IntegerLiteral 0x55bf9a6219b0 <async.c:624:33> 'int' 10
(int)[B4.11] (CStyleCastExpr, IntegralCast, int)
  13: ImplicitCastExpr 0x55bf9a621a80 <async.c:624:12, col:35> 'size_t':'unsigned long' <IntegralCast>
`-CStyleCastExpr 0x55bf9a621a58 <col:12, col:35> 'int' <IntegralCast>
  `-CallExpr 0x55bf9a6219e8 <col:17, col:35> 'long'
    |-ImplicitCastExpr 0x55bf9a6219d0 <col:17> 'long (*)(const char *__restrict, char **__restrict, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x55bf9a621880 <col:17> 'long (const char *__restrict, char **__restrict, int)' Function 0x55bf9a4ea908 'strtol' 'long (const char *__restrict, char **__restrict, int)'
    |-BinaryOperator 0x55bf9a621908 <col:24, col:26> 'const char *' '+'
    | |-ImplicitCastExpr 0x55bf9a6218f0 <col:24> 'const char *' <LValueToRValue>
    | | `-DeclRefExpr 0x55bf9a6218a8 <col:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
    | `-IntegerLiteral 0x55bf9a6218d0 <col:26> 'int' 1
    |-ImplicitCastExpr 0x55bf9a621a28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <NullToPointer>
    | `-ParenExpr 0x55bf9a621990 <col:16, col:25> 'void *'
    |   `-CStyleCastExpr 0x55bf9a621968 <col:17, col:24> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55bf9a621930 <col:24> 'int' 0
    `-IntegerLiteral 0x55bf9a6219b0 <async.c:624:33> 'int' 10
[B4.12] (ImplicitCastExpr, IntegralCast, size_t)
  14: DeclRefExpr 0x55bf9a621820 <async.c:624:6> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
len
  15: ImplicitCastExpr 0x55bf9a621848 <async.c:624:6> 'size_t *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a621820 <col:6> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
[B4.14] (ImplicitCastExpr, LValueToRValue, size_t *)
  16: UnaryOperator 0x55bf9a621860 <async.c:624:5, col:6> 'size_t':'unsigned long' lvalue prefix '*'
`-ImplicitCastExpr 0x55bf9a621848 <col:6> 'size_t *' <LValueToRValue>
  `-DeclRefExpr 0x55bf9a621820 <col:6> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
*[B4.15]
  17: BinaryOperator 0x55bf9a621a98 <async.c:624:5, col:35> 'size_t':'unsigned long' '='
|-UnaryOperator 0x55bf9a621860 <col:5, col:6> 'size_t':'unsigned long' lvalue prefix '*'
| `-ImplicitCastExpr 0x55bf9a621848 <col:6> 'size_t *' <LValueToRValue>
|   `-DeclRefExpr 0x55bf9a621820 <col:6> 'size_t *' lvalue ParmVar 0x55bf9a6210a8 'len' 'size_t *'
`-ImplicitCastExpr 0x55bf9a621a80 <col:12, col:35> 'size_t':'unsigned long' <IntegralCast>
  `-CStyleCastExpr 0x55bf9a621a58 <col:12, col:35> 'int' <IntegralCast>
    `-CallExpr 0x55bf9a6219e8 <col:17, col:35> 'long'
      |-ImplicitCastExpr 0x55bf9a6219d0 <col:17> 'long (*)(const char *__restrict, char **__restrict, int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x55bf9a621880 <col:17> 'long (const char *__restrict, char **__restrict, int)' Function 0x55bf9a4ea908 'strtol' 'long (const char *__restrict, char **__restrict, int)'
      |-BinaryOperator 0x55bf9a621908 <col:24, col:26> 'const char *' '+'
      | |-ImplicitCastExpr 0x55bf9a6218f0 <col:24> 'const char *' <LValueToRValue>
      | | `-DeclRefExpr 0x55bf9a6218a8 <col:24> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
      | `-IntegerLiteral 0x55bf9a6218d0 <col:26> 'int' 1
      |-ImplicitCastExpr 0x55bf9a621a28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'char **' <NullToPointer>
      | `-ParenExpr 0x55bf9a621990 <col:16, col:25> 'void *'
      |   `-CStyleCastExpr 0x55bf9a621968 <col:17, col:24> 'void *' <NullToPointer>
      |     `-IntegerLiteral 0x55bf9a621930 <col:24> 'int' 0
      `-IntegerLiteral 0x55bf9a6219b0 <async.c:624:33> 'int' 10
[B4.16] = [B4.13]
  18: DeclRefExpr 0x55bf9a621ae8 <async.c:625:9> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
strchr
  19: ImplicitCastExpr 0x55bf9a621b68 <async.c:625:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55bf9a621ae8 <col:9> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
[B4.18] (ImplicitCastExpr, FunctionToPointerDecay, char *(*)(const char *, int))
  20: DeclRefExpr 0x55bf9a621b10 <async.c:625:16> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
  21: ImplicitCastExpr 0x55bf9a621bb8 <async.c:625:16> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a621b10 <col:16> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B4.20] (ImplicitCastExpr, LValueToRValue, const char *)
  22: CharacterLiteral 0x55bf9a621b38 <async.c:625:18> 'int' 13
'\r'
  23: CallExpr 0x55bf9a621b80 <async.c:625:9, col:22> 'char *'
|-ImplicitCastExpr 0x55bf9a621b68 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55bf9a621ae8 <col:9> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
|-ImplicitCastExpr 0x55bf9a621bb8 <col:16> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a621b10 <col:16> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-CharacterLiteral 0x55bf9a621b38 <col:18> 'int' 13
[B4.19]([B4.21], [B4.22])
  24: ImplicitCastExpr 0x55bf9a621bd0 <async.c:625:9, col:22> 'const char *' <BitCast>
`-CallExpr 0x55bf9a621b80 <col:9, col:22> 'char *'
  |-ImplicitCastExpr 0x55bf9a621b68 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55bf9a621ae8 <col:9> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
  |-ImplicitCastExpr 0x55bf9a621bb8 <col:16> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55bf9a621b10 <col:16> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
  `-CharacterLiteral 0x55bf9a621b38 <col:18> 'int' 13
[B4.23] (ImplicitCastExpr, BitCast, const char *)
  25: DeclRefExpr 0x55bf9a621ac0 <async.c:625:5> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
  26: BinaryOperator 0x55bf9a621be8 <async.c:625:5, col:22> 'const char *' '='
|-DeclRefExpr 0x55bf9a621ac0 <col:5> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-ImplicitCastExpr 0x55bf9a621bd0 <col:9, col:22> 'const char *' <BitCast>
  `-CallExpr 0x55bf9a621b80 <col:9, col:22> 'char *'
    |-ImplicitCastExpr 0x55bf9a621b68 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x55bf9a621ae8 <col:9> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
    |-ImplicitCastExpr 0x55bf9a621bb8 <col:16> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x55bf9a621b10 <col:16> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
    `-CharacterLiteral 0x55bf9a621b38 <col:18> 'int' 13
[B4.25] = [B4.24]
  27: DeclRefExpr 0x55bf9a621c10 <async.c:626:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
  28: ImplicitCastExpr 0x55bf9a622010 </usr/include/assert.h:98:6, col:11> 'const char *' <LValueToRValue>
`-ParenExpr 0x55bf9a621c38 <col:6, col:11> 'const char *' lvalue
  `-DeclRefExpr 0x55bf9a621c10 <async.c:626:12> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
([B4.27]) (ImplicitCastExpr, LValueToRValue, const char *)
   T: [B4.28] ? ... : ...
   Preds (2): B6 B7
   Succs (2): B2 B3

 [B5]
   1: IntegerLiteral 0x55bf9a6216e0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x55bf9a621718 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55bf9a6216e0 <col:24> 'int' 0
(void *)[B5.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x55bf9a621760 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <NullToPointer>
`-ParenExpr 0x55bf9a621740 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55bf9a621718 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55bf9a6216e0 <col:24> 'int' 0
([B5.2]) (ImplicitCastExpr, NullToPointer, const char *)
   4: ReturnStmt 0x55bf9a621778 <async.c:621:24, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x55bf9a621760 <col:16, col:25> 'const char *' <NullToPointer>
  `-ParenExpr 0x55bf9a621740 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55bf9a621718 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55bf9a6216e0 <col:24> 'int' 0
return [B5.3];
   Preds (1): B6
   Succs (1): B0

 [B6]
   1: DeclRefExpr 0x55bf9a621490 <async.c:620:13> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
strchr
   2: ImplicitCastExpr 0x55bf9a621538 <async.c:620:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55bf9a621490 <col:13> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, char *(*)(const char *, int))
   3: DeclRefExpr 0x55bf9a6214b8 <async.c:620:20> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
   4: ImplicitCastExpr 0x55bf9a621588 <async.c:620:20> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a6214b8 <col:20> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B6.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: CharacterLiteral 0x55bf9a6214e0 <async.c:620:22> 'int' 36
'$'
   6: CallExpr 0x55bf9a621550 <async.c:620:13, col:25> 'char *'
|-ImplicitCastExpr 0x55bf9a621538 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55bf9a621490 <col:13> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
|-ImplicitCastExpr 0x55bf9a621588 <col:20> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a6214b8 <col:20> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-CharacterLiteral 0x55bf9a6214e0 <col:22> 'int' 36
[B6.2]([B6.4], [B6.5])
   7: ImplicitCastExpr 0x55bf9a6215a0 <async.c:620:13, col:25> 'const char *' <BitCast>
`-CallExpr 0x55bf9a621550 <col:13, col:25> 'char *'
  |-ImplicitCastExpr 0x55bf9a621538 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55bf9a621490 <col:13> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
  |-ImplicitCastExpr 0x55bf9a621588 <col:20> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55bf9a6214b8 <col:20> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
  `-CharacterLiteral 0x55bf9a6214e0 <col:22> 'int' 36
[B6.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x55bf9a621468 <async.c:620:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
   9: BinaryOperator 0x55bf9a6215b8 <async.c:620:9, col:25> 'const char *' '='
|-DeclRefExpr 0x55bf9a621468 <col:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-ImplicitCastExpr 0x55bf9a6215a0 <col:13, col:25> 'const char *' <BitCast>
  `-CallExpr 0x55bf9a621550 <col:13, col:25> 'char *'
    |-ImplicitCastExpr 0x55bf9a621538 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x55bf9a621490 <col:13> 'char *(const char *, int)' Function 0x55bf9a5297a8 'strchr' 'char *(const char *, int)'
    |-ImplicitCastExpr 0x55bf9a621588 <col:20> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x55bf9a6214b8 <col:20> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
    `-CharacterLiteral 0x55bf9a6214e0 <col:22> 'int' 36
[B6.8] = [B6.7]
  10: DeclRefExpr 0x55bf9a6215e0 <async.c:621:13> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
  11: ImplicitCastExpr 0x55bf9a621688 <async.c:621:13> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a6215e0 <col:13> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B6.10] (ImplicitCastExpr, LValueToRValue, const char *)
  12: IntegerLiteral 0x55bf9a621608 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  13: CStyleCastExpr 0x55bf9a621640 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55bf9a621608 <col:24> 'int' 0
(void *)[B6.12] (CStyleCastExpr, NullToPointer, void *)
  14: ImplicitCastExpr 0x55bf9a6216a0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
`-ParenExpr 0x55bf9a621668 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55bf9a621640 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55bf9a621608 <col:24> 'int' 0
([B6.13]) (ImplicitCastExpr, BitCast, const char *)
  15: BinaryOperator 0x55bf9a6216b8 <async.c:621:13, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x55bf9a621688 <async.c:621:13> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a6215e0 <col:13> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-ImplicitCastExpr 0x55bf9a6216a0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
  `-ParenExpr 0x55bf9a621668 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55bf9a621640 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55bf9a621608 <col:24> 'int' 0
[B6.11] == [B6.14]
   T: if [B6.15]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclRefExpr 0x55bf9a621318 <async.c:618:21> 'const char *' lvalue ParmVar 0x55bf9a620f60 'start' 'const char *'
start
   2: ImplicitCastExpr 0x55bf9a621340 <async.c:618:21> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a621318 <col:21> 'const char *' lvalue ParmVar 0x55bf9a620f60 'start' 'const char *'
[B7.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: DeclStmt 0x55bf9a621358 <async.c:618:5, col:26>col:17
`-VarDecl 0x55bf9a6212b8 <col:5, col:21> col:17 used p 'const char *' cinit
  `-ImplicitCastExpr 0x55bf9a621340 <col:21> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55bf9a621318 <col:21> 'const char *' lvalue ParmVar 0x55bf9a620f60 'start' 'const char *'
const char *p = start;
   4: DeclRefExpr 0x55bf9a621370 <async.c:619:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
p
   5: ImplicitCastExpr 0x55bf9a6213b8 <async.c:619:9> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55bf9a621370 <col:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
[B7.4] (ImplicitCastExpr, LValueToRValue, const char *)
   6: IntegerLiteral 0x55bf9a621398 <async.c:619:11> 'int' 0
0
   7: ArraySubscriptExpr 0x55bf9a6213d0 <async.c:619:9, col:12> 'const char' lvalue
|-ImplicitCastExpr 0x55bf9a6213b8 <col:9> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55bf9a621370 <col:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
`-IntegerLiteral 0x55bf9a621398 <col:11> 'int' 0
[B7.5][[B7.6]]
   8: ImplicitCastExpr 0x55bf9a621410 <async.c:619:9, col:12> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x55bf9a6213d0 <col:9, col:12> 'const char' lvalue
  |-ImplicitCastExpr 0x55bf9a6213b8 <col:9> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55bf9a621370 <col:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
  `-IntegerLiteral 0x55bf9a621398 <col:11> 'int' 0
[B7.7] (ImplicitCastExpr, LValueToRValue, char)
   9: ImplicitCastExpr 0x55bf9a621428 <async.c:619:9, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55bf9a621410 <col:9, col:12> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55bf9a6213d0 <col:9, col:12> 'const char' lvalue
    |-ImplicitCastExpr 0x55bf9a6213b8 <col:9> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x55bf9a621370 <col:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
    `-IntegerLiteral 0x55bf9a621398 <col:11> 'int' 0
[B7.8] (ImplicitCastExpr, IntegralCast, int)
  10: CharacterLiteral 0x55bf9a6213f8 <async.c:619:17> 'int' 36
'$'
  11: BinaryOperator 0x55bf9a621440 <async.c:619:9, col:17> 'int' '!='
|-ImplicitCastExpr 0x55bf9a621428 <col:9, col:12> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55bf9a621410 <col:9, col:12> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x55bf9a6213d0 <col:9, col:12> 'const char' lvalue
|     |-ImplicitCastExpr 0x55bf9a6213b8 <col:9> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bf9a621370 <col:9> 'const char *' lvalue Var 0x55bf9a6212b8 'p' 'const char *'
|     `-IntegerLiteral 0x55bf9a621398 <col:11> 'int' 0
`-CharacterLiteral 0x55bf9a6213f8 <col:17> 'int' 36
[B7.9] != [B7.10]
   T: if [B7.11]
   Preds (1): B8
   Succs (2): B6 B4

 [B0 (EXIT)]
   Preds (3): B1 B3 B5
