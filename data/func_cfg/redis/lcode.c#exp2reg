static void exp2reg(FuncState *fs, expdesc *e, int reg)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: IntegerLiteral 0x5637768d1f10 <./lcode.h:20:19> 'int' 1
1
   2: UnaryOperator 0x5637768d1f30 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768d1f10 <col:19> 'int' 1
-[B1.1]
   3: DeclRefExpr 0x5637768d1e98 <lcode.c:408:10> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   4: ImplicitCastExpr 0x5637768d1ec0 <lcode.c:408:10> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1e98 <col:10> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.3] (ImplicitCastExpr, LValueToRValue, expdesc *)
   5: MemberExpr 0x5637768d1ed8 <lcode.c:408:10, col:13> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768d1ec0 <col:10> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1e98 <col:10> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.4]->t
   6: BinaryOperator 0x5637768d1f70 <lcode.c:408:10, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768d1ed8 <lcode.c:408:10, col:13> 'int' lvalue ->t 0x56377687d890
| `-ImplicitCastExpr 0x5637768d1ec0 <col:10> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768d1e98 <col:10> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ParenExpr 0x5637768d1f50 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768d1f30 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768d1f10 <col:19> 'int' 1
[B1.5] = ([B1.2])
   7: DeclRefExpr 0x5637768d1e20 <lcode.c:408:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768d1e48 <lcode.c:408:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1e20 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768d1e60 <lcode.c:408:3, col:6> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768d1e48 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1e20 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.8]->f
  10: BinaryOperator 0x5637768d1f98 <lcode.c:408:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768d1e60 <lcode.c:408:3, col:6> 'int' lvalue ->f 0x56377687d8f0
| `-ImplicitCastExpr 0x5637768d1e48 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768d1e20 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-BinaryOperator 0x5637768d1f70 <col:10, ./lcode.h:20:20> 'int' '='
  |-MemberExpr 0x5637768d1ed8 <lcode.c:408:10, col:13> 'int' lvalue ->t 0x56377687d890
  | `-ImplicitCastExpr 0x5637768d1ec0 <col:10> 'expdesc *' <LValueToRValue>
  |   `-DeclRefExpr 0x5637768d1e98 <col:10> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
  `-ParenExpr 0x5637768d1f50 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x5637768d1f30 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x5637768d1f10 <col:19> 'int' 1
[B1.9] = [B1.6]
  11: DeclRefExpr 0x5637768d20a8 <lcode.c:409:17> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
reg
  12: ImplicitCastExpr 0x5637768d20d0 <lcode.c:409:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d20a8 <col:17> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: DeclRefExpr 0x5637768d1fc0 <lcode.c:409:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  14: ImplicitCastExpr 0x5637768d1fe8 <lcode.c:409:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1fc0 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.13] (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: MemberExpr 0x5637768d2000 <lcode.c:409:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d1fe8 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1fc0 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.14]->u
  16: MemberExpr 0x5637768d2038 <lcode.c:409:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d2000 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d1fe8 <col:3> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d1fc0 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.15].s
  17: MemberExpr 0x5637768d2070 <lcode.c:409:3, col:10> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d2038 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d2000 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d1fe8 <col:3> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d1fc0 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.16].info
  18: BinaryOperator 0x5637768d20e8 <lcode.c:409:3, col:17> 'int' '='
|-MemberExpr 0x5637768d2070 <col:3, col:10> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768d2038 <col:3, col:8> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768d2000 <col:3, col:6> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768d1fe8 <col:3> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d1fc0 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d20d0 <col:17> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d20a8 <col:17> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B1.17] = [B1.12]
  19: DeclRefExpr 0x5637768d2188 <lcode.c:410:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
VNONRELOC
  20: ImplicitCastExpr 0x5637768d21b0 <lcode.c:410:10> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768d2188 <col:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B1.19] (ImplicitCastExpr, IntegralCast, expkind)
  21: DeclRefExpr 0x5637768d2110 <lcode.c:410:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  22: ImplicitCastExpr 0x5637768d2138 <lcode.c:410:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d2110 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.21] (ImplicitCastExpr, LValueToRValue, expdesc *)
  23: MemberExpr 0x5637768d2150 <lcode.c:410:3, col:6> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d2138 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d2110 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B1.22]->k
  24: BinaryOperator 0x5637768d21c8 <lcode.c:410:3, col:10> 'expkind':'expkind' '='
|-MemberExpr 0x5637768d2150 <col:3, col:6> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768d2138 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768d2110 <col:3> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d21b0 <col:10> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768d2188 <col:10> 'int' EnumConstant 0x56377687d1c8 'VNONRELOC' 'int'
[B1.23] = [B1.20]
   Preds (2): B2 B9
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768d1870 <lcode.c:404:13> 'int (FuncState *)' Function 0x5637768b2b18 'luaK_getlabel' 'int (FuncState *)'
luaK_getlabel
   2: ImplicitCastExpr 0x5637768d18c0 <lcode.c:404:13> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d1870 <col:13> 'int (FuncState *)' Function 0x5637768b2b18 'luaK_getlabel' 'int (FuncState *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   3: DeclRefExpr 0x5637768d1898 <lcode.c:404:27> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d1908 <lcode.c:404:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1898 <col:27> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x5637768d18d8 <lcode.c:404:13, col:29> 'int'
|-ImplicitCastExpr 0x5637768d18c0 <col:13> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d1870 <col:13> 'int (FuncState *)' Function 0x5637768b2b18 'luaK_getlabel' 'int (FuncState *)'
`-ImplicitCastExpr 0x5637768d1908 <col:27> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1898 <col:27> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B2.2]([B2.4])
   6: DeclRefExpr 0x5637768d1848 <lcode.c:404:5> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
final
   7: BinaryOperator 0x5637768d1920 <lcode.c:404:5, col:29> 'int' '='
|-DeclRefExpr 0x5637768d1848 <col:5> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
`-CallExpr 0x5637768d18d8 <col:13, col:29> 'int'
  |-ImplicitCastExpr 0x5637768d18c0 <col:13> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d1870 <col:13> 'int (FuncState *)' Function 0x5637768b2b18 'luaK_getlabel' 'int (FuncState *)'
  `-ImplicitCastExpr 0x5637768d1908 <col:27> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d1898 <col:27> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B2.6] = [B2.5]
   8: DeclRefExpr 0x5637768d1948 <lcode.c:405:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
patchlistaux
   9: ImplicitCastExpr 0x5637768d1a88 <lcode.c:405:5> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d1948 <col:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
[B2.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int, int, int))
  10: DeclRefExpr 0x5637768d1970 <lcode.c:405:18> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768d1af0 <lcode.c:405:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1970 <col:18> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B2.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768d1998 <lcode.c:405:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  13: ImplicitCastExpr 0x5637768d19c0 <lcode.c:405:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1998 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B2.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: MemberExpr 0x5637768d19d8 <lcode.c:405:22, col:25> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768d19c0 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1998 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B2.13]->f
  15: ImplicitCastExpr 0x5637768d1b08 <lcode.c:405:22, col:25> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d19d8 <col:22, col:25> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768d19c0 <col:22> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d1998 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: DeclRefExpr 0x5637768d1a10 <lcode.c:405:28> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
final
  17: ImplicitCastExpr 0x5637768d1b20 <lcode.c:405:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1a10 <col:28> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
[B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: DeclRefExpr 0x5637768d1a38 <lcode.c:405:35> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
reg
  19: ImplicitCastExpr 0x5637768d1b50 <lcode.c:405:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1a38 <col:35> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: DeclRefExpr 0x5637768d1a60 <lcode.c:405:40> 'int' lvalue Var 0x5637768d0bd8 'p_f' 'int'
p_f
  21: ImplicitCastExpr 0x5637768d1b68 <lcode.c:405:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1a60 <col:40> 'int' lvalue Var 0x5637768d0bd8 'p_f' 'int'
[B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: CallExpr 0x5637768d1aa0 <lcode.c:405:5, col:43> 'void'
|-ImplicitCastExpr 0x5637768d1a88 <col:5> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d1948 <col:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
|-ImplicitCastExpr 0x5637768d1af0 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1970 <col:18> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d1b08 <col:22, col:25> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d19d8 <col:22, col:25> 'int' lvalue ->f 0x56377687d8f0
|   `-ImplicitCastExpr 0x5637768d19c0 <col:22> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768d1998 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
|-ImplicitCastExpr 0x5637768d1b20 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1a10 <col:28> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
|-ImplicitCastExpr 0x5637768d1b50 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1a38 <col:35> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
`-ImplicitCastExpr 0x5637768d1b68 <col:40> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1a60 <col:40> 'int' lvalue Var 0x5637768d0bd8 'p_f' 'int'
[B2.9]([B2.11], [B2.15], [B2.17], [B2.19], [B2.21])
  23: DeclRefExpr 0x5637768d1b80 <lcode.c:406:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
patchlistaux
  24: ImplicitCastExpr 0x5637768d1cc0 <lcode.c:406:5> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d1b80 <col:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
[B2.23] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int, int, int))
  25: DeclRefExpr 0x5637768d1ba8 <lcode.c:406:18> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
  26: ImplicitCastExpr 0x5637768d1d28 <lcode.c:406:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1ba8 <col:18> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B2.25] (ImplicitCastExpr, LValueToRValue, FuncState *)
  27: DeclRefExpr 0x5637768d1bd0 <lcode.c:406:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  28: ImplicitCastExpr 0x5637768d1bf8 <lcode.c:406:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1bd0 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B2.27] (ImplicitCastExpr, LValueToRValue, expdesc *)
  29: MemberExpr 0x5637768d1c10 <lcode.c:406:22, col:25> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768d1bf8 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1bd0 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B2.28]->t
  30: ImplicitCastExpr 0x5637768d1d40 <lcode.c:406:22, col:25> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d1c10 <col:22, col:25> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768d1bf8 <col:22> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d1bd0 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B2.29] (ImplicitCastExpr, LValueToRValue, int)
  31: DeclRefExpr 0x5637768d1c48 <lcode.c:406:28> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
final
  32: ImplicitCastExpr 0x5637768d1d58 <lcode.c:406:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1c48 <col:28> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
[B2.31] (ImplicitCastExpr, LValueToRValue, int)
  33: DeclRefExpr 0x5637768d1c70 <lcode.c:406:35> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
reg
  34: ImplicitCastExpr 0x5637768d1d70 <lcode.c:406:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1c70 <col:35> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B2.33] (ImplicitCastExpr, LValueToRValue, int)
  35: DeclRefExpr 0x5637768d1c98 <lcode.c:406:40> 'int' lvalue Var 0x5637768d0cc8 'p_t' 'int'
p_t
  36: ImplicitCastExpr 0x5637768d1d88 <lcode.c:406:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1c98 <col:40> 'int' lvalue Var 0x5637768d0cc8 'p_t' 'int'
[B2.35] (ImplicitCastExpr, LValueToRValue, int)
  37: CallExpr 0x5637768d1cd8 <lcode.c:406:5, col:43> 'void'
|-ImplicitCastExpr 0x5637768d1cc0 <col:5> 'void (*)(FuncState *, int, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d1b80 <col:5> 'void (FuncState *, int, int, int, int)' Function 0x5637768b9300 'patchlistaux' 'void (FuncState *, int, int, int, int)'
|-ImplicitCastExpr 0x5637768d1d28 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1ba8 <col:18> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d1d40 <col:22, col:25> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d1c10 <col:22, col:25> 'int' lvalue ->t 0x56377687d890
|   `-ImplicitCastExpr 0x5637768d1bf8 <col:22> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768d1bd0 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
|-ImplicitCastExpr 0x5637768d1d58 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1c48 <col:28> 'int' lvalue Var 0x5637768d0b48 'final' 'int'
|-ImplicitCastExpr 0x5637768d1d70 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1c70 <col:35> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
`-ImplicitCastExpr 0x5637768d1d88 <col:40> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1c98 <col:40> 'int' lvalue Var 0x5637768d0cc8 'p_t' 'int'
[B2.24]([B2.26], [B2.30], [B2.32], [B2.34], [B2.36])
   Preds (2): B3 B7
   Succs (1): B1

 [B3]
   1: ConditionalOperator 0x5637768d1310 <lcode.c:399:16, col:55> 'int'
|-ParenExpr 0x5637768d11e0 <col:16, col:29> 'int'
| `-BinaryOperator 0x5637768d11b8 <col:17, col:25> 'int' '=='
|   |-ImplicitCastExpr 0x5637768d1188 <col:17, col:20> 'unsigned int' <IntegralCast>
|   | `-ImplicitCastExpr 0x5637768d1170 <col:17, col:20> 'expkind':'expkind' <LValueToRValue>
|   |   `-MemberExpr 0x5637768d1110 <col:17, col:20> 'expkind':'expkind' lvalue ->k 0x56377687d440
|   |     `-ImplicitCastExpr 0x5637768d10f8 <col:17> 'expdesc *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
|   `-ImplicitCastExpr 0x5637768d11a0 <col:25> 'unsigned int' <IntegralCast>
|     `-DeclRefExpr 0x5637768d1148 <col:25> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
|-ParenExpr 0x5637768d1240 <./lcode.h:20:17, col:20> 'int'
| `-UnaryOperator 0x5637768d1220 <col:18, col:19> 'int' prefix '-'
|   `-IntegerLiteral 0x5637768d1200 <col:19> 'int' 1
`-CallExpr 0x5637768d12c8 <lcode.c:399:43, col:55> 'int'
  |-ImplicitCastExpr 0x5637768d12b0 <col:43> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d1260 <col:43> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x5637768d12f8 <col:53> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d1288 <col:53> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
([B6.8]) ? ([B4.2]) : [B5.5]
   2: DeclStmt 0x5637768d1340 <lcode.c:399:7, col:56>col:11
`-VarDecl 0x5637768d1070 <col:7, col:55> col:11 used fj 'int' cinit
  `-ConditionalOperator 0x5637768d1310 <col:16, col:55> 'int'
    |-ParenExpr 0x5637768d11e0 <col:16, col:29> 'int'
    | `-BinaryOperator 0x5637768d11b8 <col:17, col:25> 'int' '=='
    |   |-ImplicitCastExpr 0x5637768d1188 <col:17, col:20> 'unsigned int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5637768d1170 <col:17, col:20> 'expkind':'expkind' <LValueToRValue>
    |   |   `-MemberExpr 0x5637768d1110 <col:17, col:20> 'expkind':'expkind' lvalue ->k 0x56377687d440
    |   |     `-ImplicitCastExpr 0x5637768d10f8 <col:17> 'expdesc *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
    |   `-ImplicitCastExpr 0x5637768d11a0 <col:25> 'unsigned int' <IntegralCast>
    |     `-DeclRefExpr 0x5637768d1148 <col:25> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
    |-ParenExpr 0x5637768d1240 <./lcode.h:20:17, col:20> 'int'
    | `-UnaryOperator 0x5637768d1220 <col:18, col:19> 'int' prefix '-'
    |   `-IntegerLiteral 0x5637768d1200 <col:19> 'int' 1
    `-CallExpr 0x5637768d12c8 <lcode.c:399:43, col:55> 'int'
      |-ImplicitCastExpr 0x5637768d12b0 <col:43> 'int (*)(FuncState *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5637768d1260 <col:43> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
      `-ImplicitCastExpr 0x5637768d12f8 <col:53> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d1288 <col:53> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
int fj = (e->k == VJMP) ? (-1) : luaK_jump(fs);
   3: DeclRefExpr 0x5637768d1380 <lcode.c:400:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
code_label
   4: ImplicitCastExpr 0x5637768d1498 <lcode.c:400:13> 'int (*)(FuncState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d1380 <col:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
[B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int, int, int))
   5: DeclRefExpr 0x5637768d13a8 <lcode.c:400:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768d14f8 <lcode.c:400:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d13a8 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: DeclRefExpr 0x5637768d13d0 <lcode.c:400:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
reg
   8: ImplicitCastExpr 0x5637768d1510 <lcode.c:400:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d13d0 <col:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x5637768d13f8 <lcode.c:400:33> 'int' 0
0
  10: IntegerLiteral 0x5637768d1418 <lcode.c:400:36> 'int' 1
1
  11: CallExpr 0x5637768d14b0 <lcode.c:400:13, col:37> 'int'
|-ImplicitCastExpr 0x5637768d1498 <col:13> 'int (*)(FuncState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d1380 <col:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
|-ImplicitCastExpr 0x5637768d14f8 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d13a8 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d1510 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d13d0 <col:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
|-IntegerLiteral 0x5637768d13f8 <col:33> 'int' 0
`-IntegerLiteral 0x5637768d1418 <col:36> 'int' 1
[B3.4]([B3.6], [B3.8], [B3.9], [B3.10])
  12: DeclRefExpr 0x5637768d1358 <lcode.c:400:7> 'int' lvalue Var 0x5637768d0bd8 'p_f' 'int'
p_f
  13: BinaryOperator 0x5637768d1528 <lcode.c:400:7, col:37> 'int' '='
|-DeclRefExpr 0x5637768d1358 <col:7> 'int' lvalue Var 0x5637768d0bd8 'p_f' 'int'
`-CallExpr 0x5637768d14b0 <col:13, col:37> 'int'
  |-ImplicitCastExpr 0x5637768d1498 <col:13> 'int (*)(FuncState *, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d1380 <col:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
  |-ImplicitCastExpr 0x5637768d14f8 <col:24> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d13a8 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768d1510 <col:28> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d13d0 <col:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
  |-IntegerLiteral 0x5637768d13f8 <col:33> 'int' 0
  `-IntegerLiteral 0x5637768d1418 <col:36> 'int' 1
[B3.12] = [B3.11]
  14: DeclRefExpr 0x5637768d1578 <lcode.c:401:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
code_label
  15: ImplicitCastExpr 0x5637768d1630 <lcode.c:401:13> 'int (*)(FuncState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d1578 <col:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
[B3.14] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int, int, int))
  16: DeclRefExpr 0x5637768d15a0 <lcode.c:401:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
  17: ImplicitCastExpr 0x5637768d1690 <lcode.c:401:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d15a0 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B3.16] (ImplicitCastExpr, LValueToRValue, FuncState *)
  18: DeclRefExpr 0x5637768d15c8 <lcode.c:401:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
reg
  19: ImplicitCastExpr 0x5637768d16a8 <lcode.c:401:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d15c8 <col:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: IntegerLiteral 0x5637768d15f0 <lcode.c:401:33> 'int' 1
1
  21: IntegerLiteral 0x5637768d1610 <lcode.c:401:36> 'int' 0
0
  22: CallExpr 0x5637768d1648 <lcode.c:401:13, col:37> 'int'
|-ImplicitCastExpr 0x5637768d1630 <col:13> 'int (*)(FuncState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d1578 <col:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
|-ImplicitCastExpr 0x5637768d1690 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d15a0 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d16a8 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768d15c8 <col:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
|-IntegerLiteral 0x5637768d15f0 <col:33> 'int' 1
`-IntegerLiteral 0x5637768d1610 <col:36> 'int' 0
[B3.15]([B3.17], [B3.19], [B3.20], [B3.21])
  23: DeclRefExpr 0x5637768d1550 <lcode.c:401:7> 'int' lvalue Var 0x5637768d0cc8 'p_t' 'int'
p_t
  24: BinaryOperator 0x5637768d16c0 <lcode.c:401:7, col:37> 'int' '='
|-DeclRefExpr 0x5637768d1550 <col:7> 'int' lvalue Var 0x5637768d0cc8 'p_t' 'int'
`-CallExpr 0x5637768d1648 <col:13, col:37> 'int'
  |-ImplicitCastExpr 0x5637768d1630 <col:13> 'int (*)(FuncState *, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d1578 <col:13> 'int (FuncState *, int, int, int)' Function 0x5637768cd1a8 'code_label' 'int (FuncState *, int, int, int)'
  |-ImplicitCastExpr 0x5637768d1690 <col:24> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d15a0 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768d16a8 <col:28> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d15c8 <col:28> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
  |-IntegerLiteral 0x5637768d15f0 <col:33> 'int' 1
  `-IntegerLiteral 0x5637768d1610 <col:36> 'int' 0
[B3.23] = [B3.22]
  25: DeclRefExpr 0x5637768d16e8 <lcode.c:402:7> 'void (FuncState *, int)' Function 0x5637768bc2c8 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  26: ImplicitCastExpr 0x5637768d1760 <lcode.c:402:7> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d16e8 <col:7> 'void (FuncState *, int)' Function 0x5637768bc2c8 'luaK_patchtohere' 'void (FuncState *, int)'
[B3.25] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  27: DeclRefExpr 0x5637768d1710 <lcode.c:402:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
  28: ImplicitCastExpr 0x5637768d17b0 <lcode.c:402:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1710 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B3.27] (ImplicitCastExpr, LValueToRValue, FuncState *)
  29: DeclRefExpr 0x5637768d1738 <lcode.c:402:28> 'int' lvalue Var 0x5637768d1070 'fj' 'int'
fj
  30: ImplicitCastExpr 0x5637768d17c8 <lcode.c:402:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d1738 <col:28> 'int' lvalue Var 0x5637768d1070 'fj' 'int'
[B3.29] (ImplicitCastExpr, LValueToRValue, int)
  31: CallExpr 0x5637768d1778 <lcode.c:402:7, col:30> 'void'
|-ImplicitCastExpr 0x5637768d1760 <col:7> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d16e8 <col:7> 'void (FuncState *, int)' Function 0x5637768bc2c8 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768d17b0 <col:24> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d1710 <col:24> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d17c8 <col:28> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1738 <col:28> 'int' lvalue Var 0x5637768d1070 'fj' 'int'
[B3.26]([B3.28], [B3.30])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: IntegerLiteral 0x5637768d1200 <./lcode.h:20:19> 'int' 1
1
   2: UnaryOperator 0x5637768d1220 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768d1200 <col:19> 'int' 1
-[B4.1]
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x5637768d1260 <lcode.c:399:43> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
luaK_jump
   2: ImplicitCastExpr 0x5637768d12b0 <lcode.c:399:43> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d1260 <col:43> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   3: DeclRefExpr 0x5637768d1288 <lcode.c:399:53> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d12f8 <lcode.c:399:53> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d1288 <col:53> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x5637768d12c8 <lcode.c:399:43, col:55> 'int'
|-ImplicitCastExpr 0x5637768d12b0 <col:43> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d1260 <col:43> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x5637768d12f8 <col:53> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d1288 <col:53> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B5.2]([B5.4])
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: DeclRefExpr 0x5637768d10d0 <lcode.c:399:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d10f8 <lcode.c:399:17> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B6.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d1110 <lcode.c:399:17, col:20> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d10f8 <col:17> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B6.2]->k
   4: ImplicitCastExpr 0x5637768d1170 <lcode.c:399:17, col:20> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d1110 <col:17, col:20> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d10f8 <col:17> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B6.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768d1188 <lcode.c:399:17, col:20> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d1170 <col:17, col:20> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d1110 <col:17, col:20> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d10f8 <col:17> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B6.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768d1148 <lcode.c:399:25> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
VJMP
   7: ImplicitCastExpr 0x5637768d11a0 <lcode.c:399:25> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d1148 <col:25> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
[B6.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768d11b8 <lcode.c:399:17, col:25> 'int' '=='
|-ImplicitCastExpr 0x5637768d1188 <col:17, col:20> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768d1170 <col:17, col:20> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768d1110 <col:17, col:20> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768d10f8 <col:17> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d10d0 <col:17> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d11a0 <col:25> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d1148 <col:25> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
[B6.5] == [B6.7]
   T: ([B6.8]) ? ... : ...
   Preds (2): B7 B8
   Succs (2): B4 B5

 [B7]
   1: DeclRefExpr 0x5637768d0ee8 <lcode.c:398:33> 'int (FuncState *, int)' Function 0x5637768b4890 'need_value' 'int (FuncState *, int)'
need_value
   2: ImplicitCastExpr 0x5637768d0fb0 <lcode.c:398:33> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d0ee8 <col:33> 'int (FuncState *, int)' Function 0x5637768b4890 'need_value' 'int (FuncState *, int)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768d0f10 <lcode.c:398:44> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d1000 <lcode.c:398:44> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0f10 <col:44> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d0f38 <lcode.c:398:48> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d0f60 <lcode.c:398:48> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0f38 <col:48> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B7.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768d0f78 <lcode.c:398:48, col:51> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768d0f60 <col:48> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d0f38 <col:48> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B7.6]->f
   8: ImplicitCastExpr 0x5637768d1018 <lcode.c:398:48, col:51> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d0f78 <col:48, col:51> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768d0f60 <col:48> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d0f38 <col:48> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B7.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x5637768d0fc8 <lcode.c:398:33, col:52> 'int'
|-ImplicitCastExpr 0x5637768d0fb0 <col:33> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d0ee8 <col:33> 'int (FuncState *, int)' Function 0x5637768b4890 'need_value' 'int (FuncState *, int)'
|-ImplicitCastExpr 0x5637768d1000 <col:44> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d0f10 <col:44> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d1018 <col:48, col:51> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d0f78 <col:48, col:51> 'int' lvalue ->f 0x56377687d8f0
    `-ImplicitCastExpr 0x5637768d0f60 <col:48> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d0f38 <col:48> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B7.2]([B7.4], [B7.8])
   T: if [B8.16] || [B7.9]
   Preds (1): B8
   Succs (2): B6 B2

 [B8]
   1: DeclStmt 0x5637768d0ba8 <lcode.c:395:5, col:14>col:9
`-VarDecl 0x5637768d0b48 <col:5, col:9> col:9 used final 'int'
int final;
   2: IntegerLiteral 0x5637768d0c38 <./lcode.h:20:19> 'int' 1
1
   3: UnaryOperator 0x5637768d0c58 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768d0c38 <col:19> 'int' 1
-[B8.2]
   4: DeclStmt 0x5637768d0c98 <lcode.c:396:5, col:22>col:9
`-VarDecl 0x5637768d0bd8 <col:5, ./lcode.h:20:20> lcode.c:396:9 used p_f 'int' cinit
  `-ParenExpr 0x5637768d0c78 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x5637768d0c58 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x5637768d0c38 <col:19> 'int' 1
int p_f = (-1);
   5: IntegerLiteral 0x5637768d0d28 <./lcode.h:20:19> 'int' 1
1
   6: UnaryOperator 0x5637768d0d48 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768d0d28 <col:19> 'int' 1
-[B8.5]
   7: DeclStmt 0x5637768d0d88 <lcode.c:397:5, col:22>col:9
`-VarDecl 0x5637768d0cc8 <col:5, ./lcode.h:20:20> lcode.c:397:9 used p_t 'int' cinit
  `-ParenExpr 0x5637768d0d68 <./lcode.h:20:17, col:20> 'int'
    `-UnaryOperator 0x5637768d0d48 <col:18, col:19> 'int' prefix '-'
      `-IntegerLiteral 0x5637768d0d28 <col:19> 'int' 1
int p_t = (-1);
   8: DeclRefExpr 0x5637768d0da0 <lcode.c:398:9> 'int (FuncState *, int)' Function 0x5637768b4890 'need_value' 'int (FuncState *, int)'
need_value
   9: ImplicitCastExpr 0x5637768d0e68 <lcode.c:398:9> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d0da0 <col:9> 'int (FuncState *, int)' Function 0x5637768b4890 'need_value' 'int (FuncState *, int)'
[B8.8] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int))
  10: DeclRefExpr 0x5637768d0dc8 <lcode.c:398:20> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768d0eb8 <lcode.c:398:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0dc8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B8.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768d0df0 <lcode.c:398:24> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  13: ImplicitCastExpr 0x5637768d0e18 <lcode.c:398:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0df0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B8.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: MemberExpr 0x5637768d0e30 <lcode.c:398:24, col:27> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768d0e18 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d0df0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B8.13]->t
  15: ImplicitCastExpr 0x5637768d0ed0 <lcode.c:398:24, col:27> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d0e30 <col:24, col:27> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768d0e18 <col:24> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d0df0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B8.14] (ImplicitCastExpr, LValueToRValue, int)
  16: CallExpr 0x5637768d0e80 <lcode.c:398:9, col:28> 'int'
|-ImplicitCastExpr 0x5637768d0e68 <col:9> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d0da0 <col:9> 'int (FuncState *, int)' Function 0x5637768b4890 'need_value' 'int (FuncState *, int)'
|-ImplicitCastExpr 0x5637768d0eb8 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d0dc8 <col:20> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d0ed0 <col:24, col:27> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d0e30 <col:24, col:27> 'int' lvalue ->t 0x56377687d890
    `-ImplicitCastExpr 0x5637768d0e18 <col:24> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d0df0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B8.9]([B8.11], [B8.15])
   T: [B8.16] || ...
   Preds (1): B9
   Succs (2): B6 B7

 [B9]
   1: DeclRefExpr 0x5637768d0988 <lcode.c:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d09d0 <lcode.c:27:22, col:24> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768d09b0 <col:22, col:24> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768d0988 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
([B9.1]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d09e8 <lcode.c:27:22, col:27> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768d09d0 <col:22, col:24> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768d09b0 <col:22, col:24> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768d0988 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B9.2]->t
   4: ImplicitCastExpr 0x5637768d0ab8 <lcode.c:27:22, col:27> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d09e8 <col:22, col:27> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768d09d0 <col:22, col:24> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768d09b0 <col:22, col:24> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768d0988 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x5637768d0a20 <lcode.c:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d0a68 <lcode.c:27:32, col:34> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768d0a48 <col:32, col:34> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768d0a20 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
([B9.5]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768d0a80 <lcode.c:27:32, col:37> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768d0a68 <col:32, col:34> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768d0a48 <col:32, col:34> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768d0a20 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B9.6]->f
   8: ImplicitCastExpr 0x5637768d0ad0 <lcode.c:27:32, col:37> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d0a80 <col:32, col:37> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768d0a68 <col:32, col:34> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768d0a48 <col:32, col:34> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768d0a20 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B9.7] (ImplicitCastExpr, LValueToRValue, int)
   9: BinaryOperator 0x5637768d0ae8 <lcode.c:27:22, col:37> 'int' '!='
|-ImplicitCastExpr 0x5637768d0ab8 <col:22, col:27> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d09e8 <col:22, col:27> 'int' lvalue ->t 0x56377687d890
|   `-ImplicitCastExpr 0x5637768d09d0 <col:22, col:24> 'expdesc *' <LValueToRValue>
|     `-ParenExpr 0x5637768d09b0 <col:22, col:24> 'expdesc *' lvalue
|       `-DeclRefExpr 0x5637768d0988 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d0ad0 <line:27:32, col:37> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d0a80 <col:32, col:37> 'int' lvalue ->f 0x56377687d8f0
    `-ImplicitCastExpr 0x5637768d0a68 <col:32, col:34> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768d0a48 <col:32, col:34> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768d0a20 <line:394:16> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B9.4] != [B9.8]
   T: if ([B9.9])
   Preds (2): B10 B11
   Succs (2): B8 B1

 [B10]
   1: DeclRefExpr 0x5637768d06f8 <lcode.c:393:5> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
   2: ImplicitCastExpr 0x5637768d08c8 <lcode.c:393:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d06f8 <col:5> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
   3: DeclRefExpr 0x5637768d0720 <lcode.c:393:17> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d0920 <lcode.c:393:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0720 <col:17> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d0748 <lcode.c:393:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d0770 <lcode.c:393:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d0748 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768d0788 <lcode.c:393:22, col:25> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768d0770 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d0748 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.6]->t
   8: UnaryOperator 0x5637768d07c0 <lcode.c:393:21, col:25> 'int *' prefix '&'
`-MemberExpr 0x5637768d0788 <col:22, col:25> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768d0770 <col:22> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d0748 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
&[B10.7]
   9: DeclRefExpr 0x5637768d07e0 <lcode.c:393:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  10: ImplicitCastExpr 0x5637768d0808 <lcode.c:393:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d07e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: MemberExpr 0x5637768d0820 <lcode.c:393:28, col:31> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d0808 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d07e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.10]->u
  12: MemberExpr 0x5637768d0858 <lcode.c:393:28, col:33> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d0820 <col:28, col:31> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d0808 <col:28> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d07e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.11].s
  13: MemberExpr 0x5637768d0890 <lcode.c:393:28, col:35> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d0858 <col:28, col:33> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d0820 <col:28, col:31> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d0808 <col:28> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d07e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.12].info
  14: ImplicitCastExpr 0x5637768d0938 <lcode.c:393:28, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d0890 <col:28, col:35> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d0858 <col:28, col:33> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d0820 <col:28, col:31> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d0808 <col:28> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d07e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.13] (ImplicitCastExpr, LValueToRValue, int)
  15: CallExpr 0x5637768d08e0 <lcode.c:393:5, col:39> 'void'
|-ImplicitCastExpr 0x5637768d08c8 <col:5> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d06f8 <col:5> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x5637768d0920 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d0720 <col:17> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
|-UnaryOperator 0x5637768d07c0 <col:21, col:25> 'int *' prefix '&'
| `-MemberExpr 0x5637768d0788 <col:22, col:25> 'int' lvalue ->t 0x56377687d890
|   `-ImplicitCastExpr 0x5637768d0770 <col:22> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768d0748 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d0938 <col:28, col:35> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768d0890 <col:28, col:35> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768d0858 <col:28, col:33> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768d0820 <col:28, col:31> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768d0808 <col:28> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768d07e0 <col:28> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B10.2]([B10.4], [B10.8], [B10.14])
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: DeclRefExpr 0x5637768d04a8 <lcode.c:391:3> 'void (FuncState *, expdesc *, int)' Function 0x5637768cd6b0 'discharge2reg' 'void (FuncState *, expdesc *, int)'
discharge2reg
   2: ImplicitCastExpr 0x5637768d0548 <lcode.c:391:3> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d04a8 <col:3> 'void (FuncState *, expdesc *, int)' Function 0x5637768cd6b0 'discharge2reg' 'void (FuncState *, expdesc *, int)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *, int))
   3: DeclRefExpr 0x5637768d04d0 <lcode.c:391:17> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d05a0 <lcode.c:391:17> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d04d0 <col:17> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d04f8 <lcode.c:391:21> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d05b8 <lcode.c:391:21> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d04f8 <col:21> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B11.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: DeclRefExpr 0x5637768d0520 <lcode.c:391:24> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
reg
   8: ImplicitCastExpr 0x5637768d05d0 <lcode.c:391:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768d0520 <col:24> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B11.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x5637768d0560 <lcode.c:391:3, col:27> 'void'
|-ImplicitCastExpr 0x5637768d0548 <col:3> 'void (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d04a8 <col:3> 'void (FuncState *, expdesc *, int)' Function 0x5637768cd6b0 'discharge2reg' 'void (FuncState *, expdesc *, int)'
|-ImplicitCastExpr 0x5637768d05a0 <col:17> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d04d0 <col:17> 'FuncState *' lvalue ParmVar 0x5637768d0270 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768d05b8 <col:21> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d04f8 <col:21> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d05d0 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768d0520 <col:24> 'int' lvalue ParmVar 0x5637768d0358 'reg' 'int'
[B11.2]([B11.4], [B11.6], [B11.8])
  10: DeclRefExpr 0x5637768d05e8 <lcode.c:392:7> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
e
  11: ImplicitCastExpr 0x5637768d0610 <lcode.c:392:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d05e8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B11.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: MemberExpr 0x5637768d0628 <lcode.c:392:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d0610 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d05e8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B11.11]->k
  13: ImplicitCastExpr 0x5637768d0688 <lcode.c:392:7, col:10> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d0628 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d0610 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d05e8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B11.12] (ImplicitCastExpr, LValueToRValue, expkind)
  14: ImplicitCastExpr 0x5637768d06a0 <lcode.c:392:7, col:10> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d0688 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d0628 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d0610 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d05e8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
[B11.13] (ImplicitCastExpr, IntegralCast, unsigned int)
  15: DeclRefExpr 0x5637768d0660 <lcode.c:392:15> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
VJMP
  16: ImplicitCastExpr 0x5637768d06b8 <lcode.c:392:15> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d0660 <col:15> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
[B11.15] (ImplicitCastExpr, IntegralCast, unsigned int)
  17: BinaryOperator 0x5637768d06d0 <lcode.c:392:7, col:15> 'int' '=='
|-ImplicitCastExpr 0x5637768d06a0 <col:7, col:10> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768d0688 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768d0628 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768d0610 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d05e8 <col:7> 'expdesc *' lvalue ParmVar 0x5637768d02e0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d06b8 <col:15> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d0660 <col:15> 'int' EnumConstant 0x5637768780e0 'VJMP' 'int'
[B11.14] == [B11.16]
   T: if [B11.17]
   Preds (1): B12
   Succs (2): B10 B9

 [B0 (EXIT)]
   Preds (1): B1
