const TValue *luaV_tonumber(const TValue *obj, TValue *n)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: IntegerLiteral 0x5590eced0970 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x5590eced09a8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x5590eced0970 <col:24> 'int' 0
(void *)[B1.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x5590eced09f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <NullToPointer>
`-ParenExpr 0x5590eced09d0 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x5590eced09a8 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x5590eced0970 <col:24> 'int' 0
([B1.2]) (ImplicitCastExpr, NullToPointer, const TValue *)
   4: ReturnStmt 0x5590eced0a08 <lvm.c:43:5, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x5590eced09f0 <col:16, col:25> 'const TValue *' <NullToPointer>
  `-ParenExpr 0x5590eced09d0 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x5590eced09a8 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x5590eced0970 <col:24> 'int' 0
return [B1.3];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5590eced0630 <lvm.c:39:15> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
n
   2: ImplicitCastExpr 0x5590eced0678 <./lobject.h:120:17, col:21> 'TValue *' <LValueToRValue>
`-ParenExpr 0x5590eced0658 <col:17, col:21> 'TValue *' lvalue
  `-DeclRefExpr 0x5590eced0630 <lvm.c:39:15> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
([B2.1]) (ImplicitCastExpr, LValueToRValue, TValue *)
   3: DeclStmt 0x5590eced0690 <./lobject.h:120:5, col:22>col:13
`-VarDecl 0x5590eced05d0 <col:5, col:21> col:13 used i_o 'TValue *' cinit
  `-ImplicitCastExpr 0x5590eced0678 <col:17, col:21> 'TValue *' <LValueToRValue>
    `-ParenExpr 0x5590eced0658 <col:17, col:21> 'TValue *' lvalue
      `-DeclRefExpr 0x5590eced0630 <lvm.c:39:15> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
TValue *i_o = (n);
   4: DeclRefExpr 0x5590eced0758 <lvm.c:39:18> 'lua_Number':'double' lvalue Var 0x5590ececfe60 'num' 'lua_Number':'double'
num
   5: ImplicitCastExpr 0x5590eced07a0 <./lobject.h:120:37, col:39> 'lua_Number':'double' <LValueToRValue>
`-ParenExpr 0x5590eced0780 <col:37, col:39> 'lua_Number':'double' lvalue
  `-DeclRefExpr 0x5590eced0758 <lvm.c:39:18> 'lua_Number':'double' lvalue Var 0x5590ececfe60 'num' 'lua_Number':'double'
([B2.4]) (ImplicitCastExpr, LValueToRValue, lua_Number)
   6: DeclRefExpr 0x5590eced06a8 <./lobject.h:120:24> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
i_o
   7: ImplicitCastExpr 0x5590eced06d0 <./lobject.h:120:24> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590eced06a8 <col:24> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
[B2.6] (ImplicitCastExpr, LValueToRValue, TValue *)
   8: MemberExpr 0x5590eced06e8 <./lobject.h:120:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590eced06d0 <col:24> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590eced06a8 <col:24> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
[B2.7]->value
   9: MemberExpr 0x5590eced0720 <./lobject.h:120:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
`-MemberExpr 0x5590eced06e8 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590eced06d0 <col:24> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590eced06a8 <col:24> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
[B2.8].n
  10: BinaryOperator 0x5590eced07b8 <./lobject.h:120:24, col:39> 'lua_Number':'double' '='
|-MemberExpr 0x5590eced0720 <col:24, col:35> 'lua_Number':'double' lvalue .n 0x5590ece76b58
| `-MemberExpr 0x5590eced06e8 <col:24, col:29> 'Value':'Value' lvalue ->value 0x5590ece76da0
|   `-ImplicitCastExpr 0x5590eced06d0 <col:24> 'TValue *' <LValueToRValue>
|     `-DeclRefExpr 0x5590eced06a8 <col:24> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
`-ImplicitCastExpr 0x5590eced07a0 <col:37, col:39> 'lua_Number':'double' <LValueToRValue>
  `-ParenExpr 0x5590eced0780 <col:37, col:39> 'lua_Number':'double' lvalue
    `-DeclRefExpr 0x5590eced0758 <lvm.c:39:18> 'lua_Number':'double' lvalue Var 0x5590ececfe60 'num' 'lua_Number':'double'
[B2.9] = [B2.5]
  11: IntegerLiteral 0x5590eced0858 <./lua.h:77:22> 'int' 3
3
  12: DeclRefExpr 0x5590eced07e0 <./lobject.h:120:42> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
i_o
  13: ImplicitCastExpr 0x5590eced0808 <./lobject.h:120:42> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590eced07e0 <col:42> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
[B2.12] (ImplicitCastExpr, LValueToRValue, TValue *)
  14: MemberExpr 0x5590eced0820 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590eced0808 <col:42> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590eced07e0 <col:42> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
[B2.13]->tt
  15: BinaryOperator 0x5590eced0878 <./lobject.h:120:42, ./lua.h:77:22> 'int' '='
|-MemberExpr 0x5590eced0820 <./lobject.h:120:42, col:47> 'int' lvalue ->tt 0x5590ece76e00
| `-ImplicitCastExpr 0x5590eced0808 <col:42> 'TValue *' <LValueToRValue>
|   `-DeclRefExpr 0x5590eced07e0 <col:42> 'TValue *' lvalue Var 0x5590eced05d0 'i_o' 'TValue *'
`-IntegerLiteral 0x5590eced0858 <./lua.h:77:22> 'int' 3
[B2.14] = [B2.11]
  16: DeclRefExpr 0x5590eced08d8 <lvm.c:40:12> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
n
  17: ImplicitCastExpr 0x5590eced0900 <lvm.c:40:12> 'TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590eced08d8 <col:12> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
[B2.16] (ImplicitCastExpr, LValueToRValue, TValue *)
  18: ImplicitCastExpr 0x5590eced0918 <lvm.c:40:12> 'const TValue *' <BitCast>
`-ImplicitCastExpr 0x5590eced0900 <col:12> 'TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590eced08d8 <col:12> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
[B2.17] (ImplicitCastExpr, BitCast, const TValue *)
  19: ReturnStmt 0x5590eced0930 <lvm.c:40:5, col:12>
`-ImplicitCastExpr 0x5590eced0918 <col:12> 'const TValue *' <BitCast>
  `-ImplicitCastExpr 0x5590eced0900 <col:12> 'TValue *' <LValueToRValue>
    `-DeclRefExpr 0x5590eced08d8 <col:12> 'TValue *' lvalue ParmVar 0x5590ececfcc8 'n' 'TValue *'
return [B2.18];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x5590eced01d8 <lvm.c:38:26> 'int (const char *, lua_Number *)' Function 0x5590ece93918 'luaO_str2d' 'int (const char *, lua_Number *)'
luaO_str2d
   2: ImplicitCastExpr 0x5590eced0548 <lvm.c:38:26> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5590eced01d8 <col:26> 'int (const char *, lua_Number *)' Function 0x5590ece93918 'luaO_str2d' 'int (const char *, lua_Number *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, lua_Number *))
   3: DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
obj
   4: ImplicitCastExpr 0x5590eced0248 <./lobject.h:94:49, col:51> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
([B3.3]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   5: MemberExpr 0x5590eced0260 <./lobject.h:94:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
`-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B3.4]->value
   6: MemberExpr 0x5590eced0298 <./lobject.h:94:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
`-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
  `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
    `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
      `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B3.5].gc
   7: ImplicitCastExpr 0x5590eced02d0 <./lobject.h:94:49, col:60> 'GCObject *' <LValueToRValue>
`-MemberExpr 0x5590eced0298 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
  `-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B3.6] (ImplicitCastExpr, LValueToRValue, GCObject *)
   8: MemberExpr 0x5590eced02e8 <./lobject.h:94:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
`-ImplicitCastExpr 0x5590eced02d0 <col:49, col:60> 'GCObject *' <LValueToRValue>
  `-MemberExpr 0x5590eced0298 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
    `-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
      `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
        `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
          `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B3.7]->ts
   9: UnaryOperator 0x5590eced0348 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
`-MemberExpr 0x5590eced02e8 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
  `-ImplicitCastExpr 0x5590eced02d0 <col:49, col:60> 'GCObject *' <LValueToRValue>
    `-MemberExpr 0x5590eced0298 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
      `-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
        `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
          `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
            `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
&[B3.8]
  10: IntegerLiteral 0x5590eced03a8 <./lobject.h:210:46> 'int' 1
1
  11: BinaryOperator 0x5590eced03c8 <./lobject.h:210:39, col:46> 'union TString *' '+'
|-ParenExpr 0x5590eced0388 <col:39, col:42> 'union TString *'
| `-ParenExpr 0x5590eced0368 <./llimits.h:63:25, col:27> 'union TString *'
|   `-UnaryOperator 0x5590eced0348 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
|     `-MemberExpr 0x5590eced02e8 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
|       `-ImplicitCastExpr 0x5590eced02d0 <col:49, col:60> 'GCObject *' <LValueToRValue>
|         `-MemberExpr 0x5590eced0298 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
|           `-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
|             `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
|               `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
|                 `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
`-IntegerLiteral 0x5590eced03a8 <./lobject.h:210:46> 'int' 1
(([B3.9])) + [B3.10]
  12: CStyleCastExpr 0x5590eced0458 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x5590eced0438 <col:26, col:30> 'union TString *'
  `-BinaryOperator 0x5590eced03c8 <./lobject.h:210:39, col:46> 'union TString *' '+'
    |-ParenExpr 0x5590eced0388 <col:39, col:42> 'union TString *'
    | `-ParenExpr 0x5590eced0368 <./llimits.h:63:25, col:27> 'union TString *'
    |   `-UnaryOperator 0x5590eced0348 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
    |     `-MemberExpr 0x5590eced02e8 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
    |       `-ImplicitCastExpr 0x5590eced02d0 <col:49, col:60> 'GCObject *' <LValueToRValue>
    |         `-MemberExpr 0x5590eced0298 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
    |           `-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
    |             `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
    |               `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
    |                 `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
    `-IntegerLiteral 0x5590eced03a8 <./lobject.h:210:46> 'int' 1
(const char *)([B3.11]) (CStyleCastExpr, BitCast, const char *)
  13: DeclRefExpr 0x5590eced04a0 <lvm.c:38:51> 'lua_Number':'double' lvalue Var 0x5590ececfe60 'num' 'lua_Number':'double'
num
  14: UnaryOperator 0x5590eced04c8 <lvm.c:38:50, col:51> 'lua_Number *' prefix '&'
`-DeclRefExpr 0x5590eced04a0 <col:51> 'lua_Number':'double' lvalue Var 0x5590ececfe60 'num' 'lua_Number':'double'
&[B3.13]
  15: CallExpr 0x5590eced0560 <lvm.c:38:26, col:54> 'int'
|-ImplicitCastExpr 0x5590eced0548 <col:26> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5590eced01d8 <col:26> 'int (const char *, lua_Number *)' Function 0x5590ece93918 'luaO_str2d' 'int (const char *, lua_Number *)'
|-ParenExpr 0x5590eced0480 <./llimits.h:75:22, col:31> 'const char *'
| `-CStyleCastExpr 0x5590eced0458 <col:23, col:30> 'const char *' <BitCast>
|   `-ParenExpr 0x5590eced0438 <col:26, col:30> 'union TString *'
|     `-BinaryOperator 0x5590eced03c8 <./lobject.h:210:39, col:46> 'union TString *' '+'
|       |-ParenExpr 0x5590eced0388 <col:39, col:42> 'union TString *'
|       | `-ParenExpr 0x5590eced0368 <./llimits.h:63:25, col:27> 'union TString *'
|       |   `-UnaryOperator 0x5590eced0348 <./lobject.h:94:48, col:64> 'union TString *' prefix '&'
|       |     `-MemberExpr 0x5590eced02e8 <col:49, col:64> 'union TString':'union TString' lvalue ->ts 0x5590ecea3768
|       |       `-ImplicitCastExpr 0x5590eced02d0 <col:49, col:60> 'GCObject *' <LValueToRValue>
|       |         `-MemberExpr 0x5590eced0298 <col:49, col:60> 'GCObject *const' lvalue .gc 0x5590ece76aa0
|       |           `-MemberExpr 0x5590eced0260 <col:49, col:54> 'const Value':'const Value' lvalue ->value 0x5590ece76da0
|       |             `-ImplicitCastExpr 0x5590eced0248 <col:49, col:51> 'const TValue *' <LValueToRValue>
|       |               `-ParenExpr 0x5590eced0228 <col:49, col:51> 'const TValue *' lvalue
|       |                 `-DeclRefExpr 0x5590eced0200 <lvm.c:38:44> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
|       `-IntegerLiteral 0x5590eced03a8 <./lobject.h:210:46> 'int' 1
`-UnaryOperator 0x5590eced04c8 <lvm.c:38:50, col:51> 'lua_Number *' prefix '&'
  `-DeclRefExpr 0x5590eced04a0 <col:51> 'lua_Number':'double' lvalue Var 0x5590ececfe60 'num' 'lua_Number':'double'
[B3.2](([B3.12]), [B3.14])
   T: if ([B4.6]) && [B3.15]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5590eced00a0 <lvm.c:38:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
obj
   2: ImplicitCastExpr 0x5590eced00e8 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590eced00c8 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590eced00a0 <lvm.c:38:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
([B4.1]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: MemberExpr 0x5590eced0100 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590eced00e8 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590eced00c8 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590eced00a0 <lvm.c:38:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B4.2]->tt
   4: ImplicitCastExpr 0x5590eced0178 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590eced0138 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5590eced0100 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590eced00e8 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590eced00c8 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590eced00a0 <lvm.c:38:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
([B4.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5590eced0158 <./lua.h:78:22> 'int' 4
4
   6: BinaryOperator 0x5590eced0190 <./lobject.h:90:18, ./lua.h:78:22> 'int' '=='
|-ImplicitCastExpr 0x5590eced0178 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590eced0138 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5590eced0100 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590eced00e8 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590eced00c8 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5590eced00a0 <lvm.c:38:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
`-IntegerLiteral 0x5590eced0158 <./lua.h:78:22> 'int' 4
[B4.4] == [B4.5]
   T: ([B4.6]) && ...
   Preds (1): B6
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x5590eced0010 <lvm.c:37:31> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
obj
   2: ImplicitCastExpr 0x5590eced0038 <lvm.c:37:31> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x5590eced0010 <col:31> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B5.1] (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: ReturnStmt 0x5590eced0050 <lvm.c:37:24, col:31>
`-ImplicitCastExpr 0x5590eced0038 <col:31> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x5590eced0010 <col:31> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
return [B5.2];
   Preds (1): B6
   Succs (1): B0

 [B6]
   1: DeclStmt 0x5590ececfec0 <lvm.c:36:3, col:17>col:14
`-VarDecl 0x5590ececfe60 <col:3, col:14> col:14 used num 'lua_Number':'double'
lua_Number num;
   2: DeclRefExpr 0x5590ececfed8 <lvm.c:37:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
obj
   3: ImplicitCastExpr 0x5590ececff20 <./lobject.h:90:19, col:21> 'const TValue *' <LValueToRValue>
`-ParenExpr 0x5590ececff00 <col:19, col:21> 'const TValue *' lvalue
  `-DeclRefExpr 0x5590ececfed8 <lvm.c:37:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
([B6.2]) (ImplicitCastExpr, LValueToRValue, const TValue *)
   4: MemberExpr 0x5590ececff38 <./lobject.h:90:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
`-ImplicitCastExpr 0x5590ececff20 <col:19, col:21> 'const TValue *' <LValueToRValue>
  `-ParenExpr 0x5590ececff00 <col:19, col:21> 'const TValue *' lvalue
    `-DeclRefExpr 0x5590ececfed8 <lvm.c:37:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
[B6.3]->tt
   5: ImplicitCastExpr 0x5590ececffb0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
`-ParenExpr 0x5590ececff70 <col:18, col:26> 'const int' lvalue
  `-MemberExpr 0x5590ececff38 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
    `-ImplicitCastExpr 0x5590ececff20 <col:19, col:21> 'const TValue *' <LValueToRValue>
      `-ParenExpr 0x5590ececff00 <col:19, col:21> 'const TValue *' lvalue
        `-DeclRefExpr 0x5590ececfed8 <lvm.c:37:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
([B6.4]) (ImplicitCastExpr, LValueToRValue, int)
   6: IntegerLiteral 0x5590ececff90 <./lua.h:77:22> 'int' 3
3
   7: BinaryOperator 0x5590ececffc8 <./lobject.h:90:18, ./lua.h:77:22> 'int' '=='
|-ImplicitCastExpr 0x5590ececffb0 <./lobject.h:90:18, col:26> 'int' <LValueToRValue>
| `-ParenExpr 0x5590ececff70 <col:18, col:26> 'const int' lvalue
|   `-MemberExpr 0x5590ececff38 <col:19, col:24> 'const int' lvalue ->tt 0x5590ece76e00
|     `-ImplicitCastExpr 0x5590ececff20 <col:19, col:21> 'const TValue *' <LValueToRValue>
|       `-ParenExpr 0x5590ececff00 <col:19, col:21> 'const TValue *' lvalue
|         `-DeclRefExpr 0x5590ececfed8 <lvm.c:37:18> 'const TValue *' lvalue ParmVar 0x5590ececfc58 'obj' 'const TValue *'
`-IntegerLiteral 0x5590ececff90 <./lua.h:77:22> 'int' 3
[B6.5] == [B6.6]
   T: if ([B6.7])
   Preds (1): B7
   Succs (2): B5 B4

 [B0 (EXIT)]
   Preds (3): B1 B2 B5
