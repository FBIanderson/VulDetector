extern int luaopen_bit(lua_State *L)
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: DeclRefExpr 0x5567d0dddf68 <lua_bit.c:183:3> 'void (lua_State *, const char *, const luaL_Reg *)':'void (lua_State *, const char *, const luaL_Reg *)' Function 0x5567d0db9708 'luaL_register' 'void (lua_State *, const char *, const luaL_Reg *)':'void (lua_State *, const char *, const luaL_Reg *)'
luaL_register
   2: ImplicitCastExpr 0x5567d0dde068 <lua_bit.c:183:3> 'void (*)(lua_State *, const char *, const luaL_Reg *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5567d0dddf68 <col:3> 'void (lua_State *, const char *, const luaL_Reg *)':'void (lua_State *, const char *, const luaL_Reg *)' Function 0x5567d0db9708 'luaL_register' 'void (lua_State *, const char *, const luaL_Reg *)':'void (lua_State *, const char *, const luaL_Reg *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const char *, const luaL_Reg *))
   3: DeclRefExpr 0x5567d0dddf90 <lua_bit.c:183:17> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5567d0dde0c0 <lua_bit.c:183:17> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5567d0dddf90 <col:17> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: StringLiteral 0x5567d0dddfb8 <lua_bit.c:183:20> 'char [4]' lvalue "bit"
"bit"
   6: ImplicitCastExpr 0x5567d0dde0d8 <lua_bit.c:183:20> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5567d0dddfb8 <col:20> 'char [4]' lvalue "bit"
[B1.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x5567d0dde0f0 <lua_bit.c:183:20> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5567d0dde0d8 <col:20> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5567d0dddfb8 <col:20> 'char [4]' lvalue "bit"
[B1.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x5567d0dddfe8 <lua_bit.c:183:27> 'const struct luaL_Reg [13]' lvalue Var 0x5567d0ddb7e8 'bit_funcs' 'const struct luaL_Reg [13]'
bit_funcs
   9: ImplicitCastExpr 0x5567d0dde138 <lua_bit.c:183:27> 'const struct luaL_Reg *' <ArrayToPointerDecay>
`-DeclRefExpr 0x5567d0dddfe8 <col:27> 'const struct luaL_Reg [13]' lvalue Var 0x5567d0ddb7e8 'bit_funcs' 'const struct luaL_Reg [13]'
[B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const struct luaL_Reg *)
  10: CallExpr 0x5567d0dde080 <lua_bit.c:183:3, col:36> 'void'
|-ImplicitCastExpr 0x5567d0dde068 <col:3> 'void (*)(lua_State *, const char *, const luaL_Reg *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5567d0dddf68 <col:3> 'void (lua_State *, const char *, const luaL_Reg *)':'void (lua_State *, const char *, const luaL_Reg *)' Function 0x5567d0db9708 'luaL_register' 'void (lua_State *, const char *, const luaL_Reg *)':'void (lua_State *, const char *, const luaL_Reg *)'
|-ImplicitCastExpr 0x5567d0dde0c0 <col:17> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5567d0dddf90 <col:17> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
|-ImplicitCastExpr 0x5567d0dde0f0 <col:20> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x5567d0dde0d8 <col:20> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x5567d0dddfb8 <col:20> 'char [4]' lvalue "bit"
`-ImplicitCastExpr 0x5567d0dde138 <col:27> 'const struct luaL_Reg *' <ArrayToPointerDecay>
  `-DeclRefExpr 0x5567d0dddfe8 <col:27> 'const struct luaL_Reg [13]' lvalue Var 0x5567d0ddb7e8 'bit_funcs' 'const struct luaL_Reg [13]'
[B1.2]([B1.4], [B1.7], [B1.9])
  11: IntegerLiteral 0x5567d0dde150 <lua_bit.c:187:10> 'int' 1
1
  12: ReturnStmt 0x5567d0dde170 <lua_bit.c:187:3, col:10>
`-IntegerLiteral 0x5567d0dde150 <col:10> 'int' 1
return [B1.11];
   Preds (2): B2 B7
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5567d0ddd940 <lua_bit.c:180:5> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x5567d0dbc4c8 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
luaL_error
   2: ImplicitCastExpr 0x5567d0ddda98 <lua_bit.c:180:5> 'int (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5567d0ddd940 <col:5> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x5567d0dbc4c8 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const char *, ...))
   3: DeclRefExpr 0x5567d0ddd968 <lua_bit.c:180:16> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x5567d0dddaf0 <lua_bit.c:180:16> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5567d0ddd968 <col:16> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
[B2.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: StringLiteral 0x5567d0ddd9c8 <lua_bit.c:180:19> 'char [34]' lvalue "bit library self-test failed (%s)"
"bit library self-test failed (%s)"
   6: ImplicitCastExpr 0x5567d0dddb08 <lua_bit.c:180:19> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5567d0ddd9c8 <col:19> 'char [34]' lvalue "bit library self-test failed (%s)"
[B2.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x5567d0dddb20 <lua_bit.c:180:19> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5567d0dddb08 <col:19> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5567d0ddd9c8 <col:19> 'char [34]' lvalue "bit library self-test failed (%s)"
[B2.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x5567d0ddda18 <lua_bit.c:180:56> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
msg
   9: ImplicitCastExpr 0x5567d0dddb38 <lua_bit.c:180:56> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x5567d0ddda18 <col:56> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
[B2.8] (ImplicitCastExpr, LValueToRValue, const char *)
  10: CallExpr 0x5567d0dddab0 <lua_bit.c:180:5, col:59> 'int'
|-ImplicitCastExpr 0x5567d0ddda98 <col:5> 'int (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5567d0ddd940 <col:5> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x5567d0dbc4c8 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x5567d0dddaf0 <col:16> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5567d0ddd968 <col:16> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
|-ImplicitCastExpr 0x5567d0dddb20 <col:19> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x5567d0dddb08 <col:19> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x5567d0ddd9c8 <col:19> 'char [34]' lvalue "bit library self-test failed (%s)"
`-ImplicitCastExpr 0x5567d0dddb38 <col:56> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x5567d0ddda18 <col:56> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
[B2.2]([B2.4], [B2.7], [B2.9])
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: StringLiteral 0x5567d0ddd868 <lua_bit.c:179:13> 'char [30]' lvalue "arithmetic right-shift broken"
"arithmetic right-shift broken"
   2: ImplicitCastExpr 0x5567d0ddd8b0 <lua_bit.c:179:13> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5567d0ddd868 <col:13> 'char [30]' lvalue "arithmetic right-shift broken"
[B3.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x5567d0ddd8c8 <lua_bit.c:179:13> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5567d0ddd8b0 <col:13> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5567d0ddd868 <col:13> 'char [30]' lvalue "arithmetic right-shift broken"
[B3.2] (ImplicitCastExpr, BitCast, const char *)
   4: DeclRefExpr 0x5567d0ddd800 <lua_bit.c:179:7> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
msg
   5: BinaryOperator 0x5567d0ddd8e0 <lua_bit.c:179:7, col:13> 'const char *' '='
|-DeclRefExpr 0x5567d0ddd800 <col:7> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
`-ImplicitCastExpr 0x5567d0ddd8c8 <col:13> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5567d0ddd8b0 <col:13> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5567d0ddd868 <col:13> 'char [30]' lvalue "arithmetic right-shift broken"
[B3.4] = [B3.3]
   Preds (1): B4(Unreachable)
   Succs (1): B2

 [B4]
   1: IntegerLiteral 0x5567d0ddd660 <lua_bit.c:161:25> 'int' 8
8
   2: UnaryOperator 0x5567d0ddd680 <lua_bit.c:161:24, col:25> 'int' prefix '-'
`-IntegerLiteral 0x5567d0ddd660 <col:25> 'int' 8
-[B4.1]
   3: CStyleCastExpr 0x5567d0ddd6b0 <lua_bit.c:108:22, line:161:25> 'SBits':'int' <NoOp>
`-UnaryOperator 0x5567d0ddd680 <col:24, col:25> 'int' prefix '-'
  `-IntegerLiteral 0x5567d0ddd660 <col:25> 'int' 8
(SBits)[B4.2] (CStyleCastExpr, NoOp, SBits)
   4: IntegerLiteral 0x5567d0ddd6d8 <lua_bit.c:161:28> 'int' 2
2
   5: BinaryOperator 0x5567d0ddd6f8 <lua_bit.c:108:22, line:161:28> 'SBits':'int' '>>'
|-CStyleCastExpr 0x5567d0ddd6b0 <line:108:22, line:161:25> 'SBits':'int' <NoOp>
| `-UnaryOperator 0x5567d0ddd680 <col:24, col:25> 'int' prefix '-'
|   `-IntegerLiteral 0x5567d0ddd660 <col:25> 'int' 8
`-IntegerLiteral 0x5567d0ddd6d8 <col:28> 'int' 2
[B4.3] >> [B4.4]
   6: IntegerLiteral 0x5567d0ddd740 <lua_bit.c:161:42> 'int' 2
2
   7: UnaryOperator 0x5567d0ddd760 <lua_bit.c:161:41, col:42> 'int' prefix '-'
`-IntegerLiteral 0x5567d0ddd740 <col:42> 'int' 2
-[B4.6]
   8: CStyleCastExpr 0x5567d0ddd790 <lua_bit.c:161:34, col:42> 'SBits':'int' <NoOp>
`-UnaryOperator 0x5567d0ddd760 <col:41, col:42> 'int' prefix '-'
  `-IntegerLiteral 0x5567d0ddd740 <col:42> 'int' 2
(SBits)[B4.7] (CStyleCastExpr, NoOp, SBits)
   9: BinaryOperator 0x5567d0ddd7b8 <lua_bit.c:108:21, line:161:42> 'int' '!='
|-ParenExpr 0x5567d0ddd720 <line:108:21, col:35> 'SBits':'int'
| `-BinaryOperator 0x5567d0ddd6f8 <col:22, line:161:28> 'SBits':'int' '>>'
|   |-CStyleCastExpr 0x5567d0ddd6b0 <line:108:22, line:161:25> 'SBits':'int' <NoOp>
|   | `-UnaryOperator 0x5567d0ddd680 <col:24, col:25> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5567d0ddd660 <col:25> 'int' 8
|   `-IntegerLiteral 0x5567d0ddd6d8 <col:28> 'int' 2
`-CStyleCastExpr 0x5567d0ddd790 <col:34, col:42> 'SBits':'int' <NoOp>
  `-UnaryOperator 0x5567d0ddd760 <col:41, col:42> 'int' prefix '-'
    `-IntegerLiteral 0x5567d0ddd740 <col:42> 'int' 2
([B4.5]) != [B4.8]
   T: if ([B4.9])
   Preds (2): B5 B6
   Succs (2): B3(Unreachable) B2

 [B5]
   1: StringLiteral 0x5567d0ddd588 <lua_bit.c:176:13> 'char [33]' lvalue "not compiled with SWAPPED_DOUBLE"
"not compiled with SWAPPED_DOUBLE"
   2: ImplicitCastExpr 0x5567d0ddd5d0 <lua_bit.c:176:13> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5567d0ddd588 <col:13> 'char [33]' lvalue "not compiled with SWAPPED_DOUBLE"
[B5.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x5567d0ddd5e8 <lua_bit.c:176:13> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5567d0ddd5d0 <col:13> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5567d0ddd588 <col:13> 'char [33]' lvalue "not compiled with SWAPPED_DOUBLE"
[B5.2] (ImplicitCastExpr, BitCast, const char *)
   4: DeclRefExpr 0x5567d0ddd520 <lua_bit.c:176:7> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
msg
   5: BinaryOperator 0x5567d0ddd600 <lua_bit.c:176:7, col:13> 'const char *' '='
|-DeclRefExpr 0x5567d0ddd520 <col:7> 'const char *' lvalue Var 0x5567d0ddd330 'msg' 'const char *'
`-ImplicitCastExpr 0x5567d0ddd5e8 <col:13> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5567d0ddd5d0 <col:13> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5567d0ddd588 <col:13> 'char [33]' lvalue "not compiled with SWAPPED_DOUBLE"
[B5.4] = [B5.3]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: StringLiteral 0x5567d0ddd3c8 <lua_bit.c:169:23> 'char [37]' lvalue "compiled with incompatible luaconf.h"
"compiled with incompatible luaconf.h"
   2: ImplicitCastExpr 0x5567d0ddd418 <lua_bit.c:169:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5567d0ddd3c8 <col:23> 'char [37]' lvalue "compiled with incompatible luaconf.h"
[B6.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x5567d0ddd430 <lua_bit.c:169:23> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5567d0ddd418 <col:23> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5567d0ddd3c8 <col:23> 'char [37]' lvalue "compiled with incompatible luaconf.h"
[B6.2] (ImplicitCastExpr, BitCast, const char *)
   4: DeclStmt 0x5567d0ddd448 <lua_bit.c:169:5, col:61>col:17
`-VarDecl 0x5567d0ddd330 <col:5, col:23> col:17 used msg 'const char *' cinit
  `-ImplicitCastExpr 0x5567d0ddd430 <col:23> 'const char *' <BitCast>
    `-ImplicitCastExpr 0x5567d0ddd418 <col:23> 'char *' <ArrayToPointerDecay>
      `-StringLiteral 0x5567d0ddd3c8 <col:23> 'char [37]' lvalue "compiled with incompatible luaconf.h"
const char *msg = "compiled with incompatible luaconf.h";
   5: DeclRefExpr 0x5567d0ddd460 <lua_bit.c:175:9> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
b
   6: ImplicitCastExpr 0x5567d0ddd4e0 <lua_bit.c:175:9> 'UBits':'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x5567d0ddd460 <col:9> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
[B6.5] (ImplicitCastExpr, LValueToRValue, UBits)
   7: IntegerLiteral 0x5567d0ddd488 <lua_bit.c:175:21> 'long' 1127743488
1127743488L
   8: CStyleCastExpr 0x5567d0ddd4b8 <lua_bit.c:175:14, col:21> 'UBits':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5567d0ddd488 <col:21> 'long' 1127743488
(UBits)[B6.7] (CStyleCastExpr, IntegralCast, UBits)
   9: BinaryOperator 0x5567d0ddd4f8 <lua_bit.c:175:9, col:21> 'int' '=='
|-ImplicitCastExpr 0x5567d0ddd4e0 <col:9> 'UBits':'unsigned int' <LValueToRValue>
| `-DeclRefExpr 0x5567d0ddd460 <col:9> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
`-CStyleCastExpr 0x5567d0ddd4b8 <col:14, col:21> 'UBits':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5567d0ddd488 <col:21> 'long' 1127743488
[B6.6] == [B6.8]
   T: if [B6.9]
   Preds (2): B7(Unreachable) B8
   Succs (2): B5 B4

 [B7]
   1: IntegerLiteral 0x5567d0ddd150 <lua_bit.c:161:25> 'int' 8
8
   2: UnaryOperator 0x5567d0ddd170 <lua_bit.c:161:24, col:25> 'int' prefix '-'
`-IntegerLiteral 0x5567d0ddd150 <col:25> 'int' 8
-[B7.1]
   3: CStyleCastExpr 0x5567d0ddd1a0 <lua_bit.c:108:22, line:161:25> 'SBits':'int' <NoOp>
`-UnaryOperator 0x5567d0ddd170 <col:24, col:25> 'int' prefix '-'
  `-IntegerLiteral 0x5567d0ddd150 <col:25> 'int' 8
(SBits)[B7.2] (CStyleCastExpr, NoOp, SBits)
   4: IntegerLiteral 0x5567d0ddd1c8 <lua_bit.c:161:28> 'int' 2
2
   5: BinaryOperator 0x5567d0ddd1e8 <lua_bit.c:108:22, line:161:28> 'SBits':'int' '>>'
|-CStyleCastExpr 0x5567d0ddd1a0 <line:108:22, line:161:25> 'SBits':'int' <NoOp>
| `-UnaryOperator 0x5567d0ddd170 <col:24, col:25> 'int' prefix '-'
|   `-IntegerLiteral 0x5567d0ddd150 <col:25> 'int' 8
`-IntegerLiteral 0x5567d0ddd1c8 <col:28> 'int' 2
[B7.3] >> [B7.4]
   6: IntegerLiteral 0x5567d0ddd230 <lua_bit.c:161:42> 'int' 2
2
   7: UnaryOperator 0x5567d0ddd250 <lua_bit.c:161:41, col:42> 'int' prefix '-'
`-IntegerLiteral 0x5567d0ddd230 <col:42> 'int' 2
-[B7.6]
   8: CStyleCastExpr 0x5567d0ddd280 <lua_bit.c:161:34, col:42> 'SBits':'int' <NoOp>
`-UnaryOperator 0x5567d0ddd250 <col:41, col:42> 'int' prefix '-'
  `-IntegerLiteral 0x5567d0ddd230 <col:42> 'int' 2
(SBits)[B7.7] (CStyleCastExpr, NoOp, SBits)
   9: BinaryOperator 0x5567d0ddd2a8 <lua_bit.c:108:21, line:161:42> 'int' '!='
|-ParenExpr 0x5567d0ddd210 <line:108:21, col:35> 'SBits':'int'
| `-BinaryOperator 0x5567d0ddd1e8 <col:22, line:161:28> 'SBits':'int' '>>'
|   |-CStyleCastExpr 0x5567d0ddd1a0 <line:108:22, line:161:25> 'SBits':'int' <NoOp>
|   | `-UnaryOperator 0x5567d0ddd170 <col:24, col:25> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5567d0ddd150 <col:25> 'int' 8
|   `-IntegerLiteral 0x5567d0ddd1c8 <col:28> 'int' 2
`-CStyleCastExpr 0x5567d0ddd280 <col:34, col:42> 'SBits':'int' <NoOp>
  `-UnaryOperator 0x5567d0ddd250 <col:41, col:42> 'int' prefix '-'
    `-IntegerLiteral 0x5567d0ddd230 <col:42> 'int' 2
([B7.5]) != [B7.8]
   T: if [B8.22] || ([B7.9])
   Preds (1): B8
   Succs (2): B6(Unreachable) B1

 [B8]
   1: DeclStmt 0x5567d0ddce20 <lua_bit.c:165:3, col:10>col:9
`-VarDecl 0x5567d0ddcdc0 <col:3, col:9> col:9 used b 'UBits':'unsigned int'
UBits b;
   2: DeclRefExpr 0x5567d0ddce38 <lua_bit.c:166:3> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x5567d0d6adf0 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
lua_pushnumber
   3: ImplicitCastExpr 0x5567d0ddcee0 <lua_bit.c:166:3> 'void (*)(lua_State *, lua_Number)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5567d0ddce38 <col:3> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x5567d0d6adf0 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
[B8.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, lua_Number))
   4: DeclRefExpr 0x5567d0ddce60 <lua_bit.c:166:18> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
L
   5: ImplicitCastExpr 0x5567d0ddcf30 <lua_bit.c:166:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5567d0ddce60 <col:18> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
[B8.4] (ImplicitCastExpr, LValueToRValue, lua_State *)
   6: IntegerLiteral 0x5567d0ddce88 <lua_bit.c:166:33> 'long' 1437217655
1437217655L
   7: CStyleCastExpr 0x5567d0ddceb8 <lua_bit.c:166:21, col:33> 'lua_Number':'double' <IntegralToFloating>
`-IntegerLiteral 0x5567d0ddce88 <col:33> 'long' 1437217655
(lua_Number)[B8.6] (CStyleCastExpr, IntegralToFloating, lua_Number)
   8: CallExpr 0x5567d0ddcef8 <lua_bit.c:166:3, col:44> 'void'
|-ImplicitCastExpr 0x5567d0ddcee0 <col:3> 'void (*)(lua_State *, lua_Number)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5567d0ddce38 <col:3> 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)' Function 0x5567d0d6adf0 'lua_pushnumber' 'void (lua_State *, lua_Number)':'void (lua_State *, lua_Number)'
|-ImplicitCastExpr 0x5567d0ddcf30 <col:18> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5567d0ddce60 <col:18> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
`-CStyleCastExpr 0x5567d0ddceb8 <col:21, col:33> 'lua_Number':'double' <IntegralToFloating>
  `-IntegerLiteral 0x5567d0ddce88 <col:33> 'long' 1437217655
[B8.3]([B8.5], [B8.7])
   9: DeclRefExpr 0x5567d0ddcf70 <lua_bit.c:167:7> 'UBits (lua_State *, int)' Function 0x5567d0dcac50 'barg' 'UBits (lua_State *, int)'
barg
  10: ImplicitCastExpr 0x5567d0ddd000 <lua_bit.c:167:7> 'UBits (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5567d0ddcf70 <col:7> 'UBits (lua_State *, int)' Function 0x5567d0dcac50 'barg' 'UBits (lua_State *, int)'
[B8.9] (ImplicitCastExpr, FunctionToPointerDecay, UBits (*)(lua_State *, int))
  11: DeclRefExpr 0x5567d0ddcf98 <lua_bit.c:167:12> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
L
  12: ImplicitCastExpr 0x5567d0ddd050 <lua_bit.c:167:12> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x5567d0ddcf98 <col:12> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
[B8.11] (ImplicitCastExpr, LValueToRValue, lua_State *)
  13: IntegerLiteral 0x5567d0ddcfc0 <lua_bit.c:167:16> 'int' 1
1
  14: UnaryOperator 0x5567d0ddcfe0 <lua_bit.c:167:15, col:16> 'int' prefix '-'
`-IntegerLiteral 0x5567d0ddcfc0 <col:16> 'int' 1
-[B8.13]
  15: CallExpr 0x5567d0ddd018 <lua_bit.c:167:7, col:17> 'UBits':'unsigned int'
|-ImplicitCastExpr 0x5567d0ddd000 <col:7> 'UBits (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5567d0ddcf70 <col:7> 'UBits (lua_State *, int)' Function 0x5567d0dcac50 'barg' 'UBits (lua_State *, int)'
|-ImplicitCastExpr 0x5567d0ddd050 <col:12> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x5567d0ddcf98 <col:12> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
`-UnaryOperator 0x5567d0ddcfe0 <col:15, col:16> 'int' prefix '-'
  `-IntegerLiteral 0x5567d0ddcfc0 <col:16> 'int' 1
[B8.10]([B8.12], [B8.14])
  16: DeclRefExpr 0x5567d0ddcf48 <lua_bit.c:167:3> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
b
  17: BinaryOperator 0x5567d0ddd068 <lua_bit.c:167:3, col:17> 'UBits':'unsigned int' '='
|-DeclRefExpr 0x5567d0ddcf48 <col:3> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
`-CallExpr 0x5567d0ddd018 <col:7, col:17> 'UBits':'unsigned int'
  |-ImplicitCastExpr 0x5567d0ddd000 <col:7> 'UBits (*)(lua_State *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5567d0ddcf70 <col:7> 'UBits (lua_State *, int)' Function 0x5567d0dcac50 'barg' 'UBits (lua_State *, int)'
  |-ImplicitCastExpr 0x5567d0ddd050 <col:12> 'lua_State *' <LValueToRValue>
  | `-DeclRefExpr 0x5567d0ddcf98 <col:12> 'lua_State *' lvalue ParmVar 0x5567d0ddcc78 'L' 'lua_State *'
  `-UnaryOperator 0x5567d0ddcfe0 <col:15, col:16> 'int' prefix '-'
    `-IntegerLiteral 0x5567d0ddcfc0 <col:16> 'int' 1
[B8.16] = [B8.15]
  18: DeclRefExpr 0x5567d0ddd090 <lua_bit.c:168:7> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
b
  19: ImplicitCastExpr 0x5567d0ddd110 <lua_bit.c:168:7> 'UBits':'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x5567d0ddd090 <col:7> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
[B8.18] (ImplicitCastExpr, LValueToRValue, UBits)
  20: IntegerLiteral 0x5567d0ddd0b8 <lua_bit.c:168:19> 'long' 1437217655
1437217655L
  21: CStyleCastExpr 0x5567d0ddd0e8 <lua_bit.c:168:12, col:19> 'UBits':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5567d0ddd0b8 <col:19> 'long' 1437217655
(UBits)[B8.20] (CStyleCastExpr, IntegralCast, UBits)
  22: BinaryOperator 0x5567d0ddd128 <lua_bit.c:168:7, col:19> 'int' '!='
|-ImplicitCastExpr 0x5567d0ddd110 <col:7> 'UBits':'unsigned int' <LValueToRValue>
| `-DeclRefExpr 0x5567d0ddd090 <col:7> 'UBits':'unsigned int' lvalue Var 0x5567d0ddcdc0 'b' 'UBits':'unsigned int'
`-CStyleCastExpr 0x5567d0ddd0e8 <col:12, col:19> 'UBits':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5567d0ddd0b8 <col:19> 'long' 1437217655
[B8.19] != [B8.21]
   T: [B8.22] || ...
   Preds (1): B9
   Succs (2): B6 B7

 [B0 (EXIT)]
   Preds (1): B1
