static int condjump(FuncState *fs, OpCode op, int A, int B, int C)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x5637768aec30 <lcode.c:75:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768aed20 <lcode.c:75:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768aec30 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768aec58 <lcode.c:75:16> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768aed88 <lcode.c:75:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768aec58 <col:16> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768aec80 <lcode.c:75:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ae950 'op' 'OpCode':'OpCode'
op
   6: ImplicitCastExpr 0x5637768aeda0 <lcode.c:75:20> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768aec80 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ae950 'op' 'OpCode':'OpCode'
[B1.5] (ImplicitCastExpr, LValueToRValue, OpCode)
   7: DeclRefExpr 0x5637768aeca8 <lcode.c:75:24> 'int' lvalue ParmVar 0x5637768ae9c8 'A' 'int'
A
   8: ImplicitCastExpr 0x5637768aedb8 <lcode.c:75:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aeca8 <col:24> 'int' lvalue ParmVar 0x5637768ae9c8 'A' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: DeclRefExpr 0x5637768aecd0 <lcode.c:75:27> 'int' lvalue ParmVar 0x5637768aea40 'B' 'int'
B
  10: ImplicitCastExpr 0x5637768aedd0 <lcode.c:75:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aecd0 <col:27> 'int' lvalue ParmVar 0x5637768aea40 'B' 'int'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x5637768aecf8 <lcode.c:75:30> 'int' lvalue ParmVar 0x5637768aeab8 'C' 'int'
C
  12: ImplicitCastExpr 0x5637768aede8 <lcode.c:75:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768aecf8 <col:30> 'int' lvalue ParmVar 0x5637768aeab8 'C' 'int'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: CallExpr 0x5637768aed38 <lcode.c:75:3, col:31> 'int'
|-ImplicitCastExpr 0x5637768aed20 <col:3> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768aec30 <col:3> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768aed88 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768aec58 <col:16> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768aeda0 <col:20> 'OpCode':'OpCode' <LValueToRValue>
| `-DeclRefExpr 0x5637768aec80 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768ae950 'op' 'OpCode':'OpCode'
|-ImplicitCastExpr 0x5637768aedb8 <col:24> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768aeca8 <col:24> 'int' lvalue ParmVar 0x5637768ae9c8 'A' 'int'
|-ImplicitCastExpr 0x5637768aedd0 <col:27> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768aecd0 <col:27> 'int' lvalue ParmVar 0x5637768aea40 'B' 'int'
`-ImplicitCastExpr 0x5637768aede8 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768aecf8 <col:30> 'int' lvalue ParmVar 0x5637768aeab8 'C' 'int'
[B1.2]([B1.4], [B1.6], [B1.8], [B1.10], [B1.12])
  14: DeclRefExpr 0x5637768aee00 <lcode.c:76:10> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
luaK_jump
  15: ImplicitCastExpr 0x5637768aeea8 <lcode.c:76:10> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768aee00 <col:10> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
[B1.14] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
  16: DeclRefExpr 0x5637768aee28 <lcode.c:76:20> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
fs
  17: ImplicitCastExpr 0x5637768aeef0 <lcode.c:76:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768aee28 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
[B1.16] (ImplicitCastExpr, LValueToRValue, FuncState *)
  18: CallExpr 0x5637768aeec0 <lcode.c:76:10, col:22> 'int'
|-ImplicitCastExpr 0x5637768aeea8 <col:10> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768aee00 <col:10> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x5637768aeef0 <col:20> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768aee28 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
[B1.15]([B1.17])
  19: ReturnStmt 0x5637768aef08 <lcode.c:76:3, col:22>
`-CallExpr 0x5637768aeec0 <col:10, col:22> 'int'
  |-ImplicitCastExpr 0x5637768aeea8 <col:10> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768aee00 <col:10> 'int (FuncState *)' Function 0x5637768ad4a0 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x5637768aeef0 <col:20> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768aee28 <col:20> 'FuncState *' lvalue ParmVar 0x5637768ae8e0 'fs' 'FuncState *'
return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
