int sdsll2str(char *s, long long value)
 [B15 (ENTRY)]
   Succs (1): B14

 [B1]
   1: DeclRefExpr 0x55e83d10d7c0 <sds.c:460:12> 'size_t':'unsigned long' lvalue Var 0x55e83d10c9f0 'l' 'size_t':'unsigned long'
l
   2: ImplicitCastExpr 0x55e83d10d7e8 <sds.c:460:12> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d7c0 <col:12> 'size_t':'unsigned long' lvalue Var 0x55e83d10c9f0 'l' 'size_t':'unsigned long'
[B1.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: ImplicitCastExpr 0x55e83d10d800 <sds.c:460:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55e83d10d7e8 <col:12> 'size_t':'unsigned long' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d7c0 <col:12> 'size_t':'unsigned long' lvalue Var 0x55e83d10c9f0 'l' 'size_t':'unsigned long'
[B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: ReturnStmt 0x55e83d10d818 <sds.c:460:5, col:12>
`-ImplicitCastExpr 0x55e83d10d800 <col:12> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x55e83d10d7e8 <col:12> 'size_t':'unsigned long' <LValueToRValue>
    `-DeclRefExpr 0x55e83d10d7c0 <col:12> 'size_t':'unsigned long' lvalue Var 0x55e83d10c9f0 'l' 'size_t':'unsigned long'
return [B1.3];
   Preds (1): B4
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: DeclRefExpr 0x55e83d10d470 <sds.c:454:16> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
s
   2: ImplicitCastExpr 0x55e83d10d498 <sds.c:454:16> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d470 <col:16> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B3.1] (ImplicitCastExpr, LValueToRValue, char *)
   3: UnaryOperator 0x55e83d10d4b0 <sds.c:454:15, col:16> 'char' lvalue prefix '*'
`-ImplicitCastExpr 0x55e83d10d498 <col:16> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d470 <col:16> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
*[B3.2]
   4: ImplicitCastExpr 0x55e83d10d4d0 <sds.c:454:15, col:16> 'char' <LValueToRValue>
`-UnaryOperator 0x55e83d10d4b0 <col:15, col:16> 'char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55e83d10d498 <col:16> 'char *' <LValueToRValue>
    `-DeclRefExpr 0x55e83d10d470 <col:16> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B3.3] (ImplicitCastExpr, LValueToRValue, char)
   5: DeclRefExpr 0x55e83d10d448 <sds.c:454:9> 'char' lvalue Var 0x55e83d10c8c0 'aux' 'char'
aux
   6: BinaryOperator 0x55e83d10d4e8 <sds.c:454:9, col:16> 'char' '='
|-DeclRefExpr 0x55e83d10d448 <col:9> 'char' lvalue Var 0x55e83d10c8c0 'aux' 'char'
`-ImplicitCastExpr 0x55e83d10d4d0 <col:15, col:16> 'char' <LValueToRValue>
  `-UnaryOperator 0x55e83d10d4b0 <col:15, col:16> 'char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55e83d10d498 <col:16> 'char *' <LValueToRValue>
      `-DeclRefExpr 0x55e83d10d470 <col:16> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B3.5] = [B3.4]
   7: DeclRefExpr 0x55e83d10d570 <sds.c:455:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
   8: ImplicitCastExpr 0x55e83d10d598 <sds.c:455:15> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d570 <col:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B3.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: UnaryOperator 0x55e83d10d5b0 <sds.c:455:14, col:15> 'char' lvalue prefix '*'
`-ImplicitCastExpr 0x55e83d10d598 <col:15> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d570 <col:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
*[B3.8]
  10: ImplicitCastExpr 0x55e83d10d5d0 <sds.c:455:14, col:15> 'char' <LValueToRValue>
`-UnaryOperator 0x55e83d10d5b0 <col:14, col:15> 'char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55e83d10d598 <col:15> 'char *' <LValueToRValue>
    `-DeclRefExpr 0x55e83d10d570 <col:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B3.9] (ImplicitCastExpr, LValueToRValue, char)
  11: DeclRefExpr 0x55e83d10d510 <sds.c:455:10> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
s
  12: ImplicitCastExpr 0x55e83d10d538 <sds.c:455:10> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d510 <col:10> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B3.11] (ImplicitCastExpr, LValueToRValue, char *)
  13: UnaryOperator 0x55e83d10d550 <sds.c:455:9, col:10> 'char' lvalue prefix '*'
`-ImplicitCastExpr 0x55e83d10d538 <col:10> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d510 <col:10> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
*[B3.12]
  14: BinaryOperator 0x55e83d10d5e8 <sds.c:455:9, col:15> 'char' '='
|-UnaryOperator 0x55e83d10d550 <col:9, col:10> 'char' lvalue prefix '*'
| `-ImplicitCastExpr 0x55e83d10d538 <col:10> 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x55e83d10d510 <col:10> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
`-ImplicitCastExpr 0x55e83d10d5d0 <col:14, col:15> 'char' <LValueToRValue>
  `-UnaryOperator 0x55e83d10d5b0 <col:14, col:15> 'char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55e83d10d598 <col:15> 'char *' <LValueToRValue>
      `-DeclRefExpr 0x55e83d10d570 <col:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B3.13] = [B3.10]
  15: DeclRefExpr 0x55e83d10d670 <sds.c:456:14> 'char' lvalue Var 0x55e83d10c8c0 'aux' 'char'
aux
  16: ImplicitCastExpr 0x55e83d10d698 <sds.c:456:14> 'char' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d670 <col:14> 'char' lvalue Var 0x55e83d10c8c0 'aux' 'char'
[B3.15] (ImplicitCastExpr, LValueToRValue, char)
  17: DeclRefExpr 0x55e83d10d610 <sds.c:456:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
  18: ImplicitCastExpr 0x55e83d10d638 <sds.c:456:10> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d610 <col:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B3.17] (ImplicitCastExpr, LValueToRValue, char *)
  19: UnaryOperator 0x55e83d10d650 <sds.c:456:9, col:10> 'char' lvalue prefix '*'
`-ImplicitCastExpr 0x55e83d10d638 <col:10> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d610 <col:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
*[B3.18]
  20: BinaryOperator 0x55e83d10d6b0 <sds.c:456:9, col:14> 'char' '='
|-UnaryOperator 0x55e83d10d650 <col:9, col:10> 'char' lvalue prefix '*'
| `-ImplicitCastExpr 0x55e83d10d638 <col:10> 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x55e83d10d610 <col:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
`-ImplicitCastExpr 0x55e83d10d698 <col:14> 'char' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d670 <col:14> 'char' lvalue Var 0x55e83d10c8c0 'aux' 'char'
[B3.19] = [B3.16]
  21: DeclRefExpr 0x55e83d10d6d8 <sds.c:457:9> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
s
  22: UnaryOperator 0x55e83d10d700 <sds.c:457:9, col:10> 'char *' postfix '++'
`-DeclRefExpr 0x55e83d10d6d8 <col:9> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B3.21]++
  23: DeclRefExpr 0x55e83d10d720 <sds.c:458:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
  24: UnaryOperator 0x55e83d10d748 <sds.c:458:9, col:10> 'char *' postfix '--'
`-DeclRefExpr 0x55e83d10d720 <col:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B3.23]--
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x55e83d10d3a0 <sds.c:453:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
s
   2: ImplicitCastExpr 0x55e83d10d3f0 <sds.c:453:11> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d3a0 <col:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B4.1] (ImplicitCastExpr, LValueToRValue, char *)
   3: DeclRefExpr 0x55e83d10d3c8 <sds.c:453:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
   4: ImplicitCastExpr 0x55e83d10d408 <sds.c:453:15> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d3c8 <col:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B4.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: BinaryOperator 0x55e83d10d420 <sds.c:453:11, col:15> 'int' '<'
|-ImplicitCastExpr 0x55e83d10d3f0 <col:11> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55e83d10d3a0 <col:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
`-ImplicitCastExpr 0x55e83d10d408 <col:15> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d3c8 <col:15> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B4.2] < [B4.4]
   T: while [B4.5]
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x55e83d10d188 <sds.c:448:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
   2: ImplicitCastExpr 0x55e83d10d1d8 <sds.c:448:9> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d188 <col:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B5.1] (ImplicitCastExpr, LValueToRValue, char *)
   3: DeclRefExpr 0x55e83d10d1b0 <sds.c:448:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
s
   4: ImplicitCastExpr 0x55e83d10d1f0 <sds.c:448:11> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d1b0 <col:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B5.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: BinaryOperator 0x55e83d10d208 <sds.c:448:9, col:11> 'long' '-'
|-ImplicitCastExpr 0x55e83d10d1d8 <col:9> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x55e83d10d188 <col:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
`-ImplicitCastExpr 0x55e83d10d1f0 <col:11> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d1b0 <col:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B5.2] - [B5.4]
   6: ImplicitCastExpr 0x55e83d10d230 <sds.c:448:9, col:11> 'size_t':'unsigned long' <IntegralCast>
`-BinaryOperator 0x55e83d10d208 <col:9, col:11> 'long' '-'
  |-ImplicitCastExpr 0x55e83d10d1d8 <col:9> 'char *' <LValueToRValue>
  | `-DeclRefExpr 0x55e83d10d188 <col:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
  `-ImplicitCastExpr 0x55e83d10d1f0 <col:11> 'char *' <LValueToRValue>
    `-DeclRefExpr 0x55e83d10d1b0 <col:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B5.5] (ImplicitCastExpr, IntegralCast, size_t)
   7: DeclRefExpr 0x55e83d10d160 <sds.c:448:5> 'size_t':'unsigned long' lvalue Var 0x55e83d10c9f0 'l' 'size_t':'unsigned long'
l
   8: BinaryOperator 0x55e83d10d248 <sds.c:448:5, col:11> 'size_t':'unsigned long' '='
|-DeclRefExpr 0x55e83d10d160 <col:5> 'size_t':'unsigned long' lvalue Var 0x55e83d10c9f0 'l' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x55e83d10d230 <col:9, col:11> 'size_t':'unsigned long' <IntegralCast>
  `-BinaryOperator 0x55e83d10d208 <col:9, col:11> 'long' '-'
    |-ImplicitCastExpr 0x55e83d10d1d8 <col:9> 'char *' <LValueToRValue>
    | `-DeclRefExpr 0x55e83d10d188 <col:9> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
    `-ImplicitCastExpr 0x55e83d10d1f0 <col:11> 'char *' <LValueToRValue>
      `-DeclRefExpr 0x55e83d10d1b0 <col:11> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B5.7] = [B5.6]
   9: CharacterLiteral 0x55e83d10d300 <sds.c:449:10> 'int' 0
'\x00'
  10: ImplicitCastExpr 0x55e83d10d318 <sds.c:449:10> 'char' <IntegralCast>
`-CharacterLiteral 0x55e83d10d300 <col:10> 'int' 0
[B5.9] (ImplicitCastExpr, IntegralCast, char)
  11: DeclRefExpr 0x55e83d10d2a0 <sds.c:449:6> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
  12: ImplicitCastExpr 0x55e83d10d2c8 <sds.c:449:6> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10d2a0 <col:6> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B5.11] (ImplicitCastExpr, LValueToRValue, char *)
  13: UnaryOperator 0x55e83d10d2e0 <sds.c:449:5, col:6> 'char' lvalue prefix '*'
`-ImplicitCastExpr 0x55e83d10d2c8 <col:6> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10d2a0 <col:6> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
*[B5.12]
  14: BinaryOperator 0x55e83d10d330 <sds.c:449:5, col:10> 'char' '='
|-UnaryOperator 0x55e83d10d2e0 <col:5, col:6> 'char' lvalue prefix '*'
| `-ImplicitCastExpr 0x55e83d10d2c8 <col:6> 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x55e83d10d2a0 <col:6> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
`-ImplicitCastExpr 0x55e83d10d318 <col:10> 'char' <IntegralCast>
  `-CharacterLiteral 0x55e83d10d300 <col:10> 'int' 0
[B5.13] = [B5.10]
  15: DeclRefExpr 0x55e83d10d358 <sds.c:452:5> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
  16: UnaryOperator 0x55e83d10d380 <sds.c:452:5, col:6> 'char *' postfix '--'
`-DeclRefExpr 0x55e83d10d358 <col:5> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B5.15]--
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: CharacterLiteral 0x55e83d10d0d0 <sds.c:445:27> 'int' 45
'-'
   2: ImplicitCastExpr 0x55e83d10d0e8 <sds.c:445:27> 'char' <IntegralCast>
`-CharacterLiteral 0x55e83d10d0d0 <col:27> 'int' 45
[B6.1] (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x55e83d10d068 <sds.c:445:21> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
   4: UnaryOperator 0x55e83d10d090 <sds.c:445:21, col:22> 'char *' postfix '++'
`-DeclRefExpr 0x55e83d10d068 <col:21> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B6.3]++
   5: UnaryOperator 0x55e83d10d0b0 <sds.c:445:20, col:22> 'char' lvalue prefix '*'
`-UnaryOperator 0x55e83d10d090 <col:21, col:22> 'char *' postfix '++'
  `-DeclRefExpr 0x55e83d10d068 <col:21> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
*[B6.4]
   6: BinaryOperator 0x55e83d10d100 <sds.c:445:20, col:27> 'char' '='
|-UnaryOperator 0x55e83d10d0b0 <col:20, col:22> 'char' lvalue prefix '*'
| `-UnaryOperator 0x55e83d10d090 <col:21, col:22> 'char *' postfix '++'
|   `-DeclRefExpr 0x55e83d10d068 <col:21> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
`-ImplicitCastExpr 0x55e83d10d0e8 <col:27> 'char' <IntegralCast>
  `-CharacterLiteral 0x55e83d10d0d0 <col:27> 'int' 45
[B6.5] = [B6.2]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: DeclRefExpr 0x55e83d10cfc8 <sds.c:445:9> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
value
   2: ImplicitCastExpr 0x55e83d10d010 <sds.c:445:9> 'long long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10cfc8 <col:9> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
[B7.1] (ImplicitCastExpr, LValueToRValue, long long)
   3: IntegerLiteral 0x55e83d10cff0 <sds.c:445:17> 'int' 0
0
   4: ImplicitCastExpr 0x55e83d10d028 <sds.c:445:17> 'long long' <IntegralCast>
`-IntegerLiteral 0x55e83d10cff0 <col:17> 'int' 0
[B7.3] (ImplicitCastExpr, IntegralCast, long long)
   5: BinaryOperator 0x55e83d10d040 <sds.c:445:9, col:17> 'int' '<'
|-ImplicitCastExpr 0x55e83d10d010 <col:9> 'long long' <LValueToRValue>
| `-DeclRefExpr 0x55e83d10cfc8 <col:9> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
`-ImplicitCastExpr 0x55e83d10d028 <col:17> 'long long' <IntegralCast>
  `-IntegerLiteral 0x55e83d10cff0 <col:17> 'int' 0
[B7.2] < [B7.4]
   T: if [B7.5]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
   1: DeclRefExpr 0x55e83d10cf68 <sds.c:444:13> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
v
   2: ImplicitCastExpr 0x55e83d10cf90 <sds.c:444:13> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10cf68 <col:13> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
[B8.1] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   T: do ... while [B8.2]
   Preds (1): B9
   Succs (2): B10 B7

 [B9]
   1: CharacterLiteral 0x55e83d10cd58 <sds.c:442:16> 'int' 48
'0'
   2: ImplicitCastExpr 0x55e83d10ce30 <sds.c:442:16> 'unsigned long long' <IntegralCast>
`-CharacterLiteral 0x55e83d10cd58 <col:16> 'int' 48
[B9.1] (ImplicitCastExpr, IntegralCast, unsigned long long)
   3: DeclRefExpr 0x55e83d10cd70 <sds.c:442:21> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
v
   4: ImplicitCastExpr 0x55e83d10cdb8 <sds.c:442:21> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10cd70 <col:21> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
[B9.3] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   5: IntegerLiteral 0x55e83d10cd98 <sds.c:442:23> 'int' 10
10
   6: ImplicitCastExpr 0x55e83d10cdd0 <sds.c:442:23> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x55e83d10cd98 <col:23> 'int' 10
[B9.5] (ImplicitCastExpr, IntegralCast, unsigned long long)
   7: BinaryOperator 0x55e83d10cde8 <sds.c:442:21, col:23> 'unsigned long long' '%'
|-ImplicitCastExpr 0x55e83d10cdb8 <col:21> 'unsigned long long' <LValueToRValue>
| `-DeclRefExpr 0x55e83d10cd70 <col:21> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
`-ImplicitCastExpr 0x55e83d10cdd0 <col:23> 'unsigned long long' <IntegralCast>
  `-IntegerLiteral 0x55e83d10cd98 <col:23> 'int' 10
[B9.4] % [B9.6]
   8: BinaryOperator 0x55e83d10ce48 <sds.c:442:16, col:25> 'unsigned long long' '+'
|-ImplicitCastExpr 0x55e83d10ce30 <col:16> 'unsigned long long' <IntegralCast>
| `-CharacterLiteral 0x55e83d10cd58 <col:16> 'int' 48
`-ParenExpr 0x55e83d10ce10 <col:20, col:25> 'unsigned long long'
  `-BinaryOperator 0x55e83d10cde8 <col:21, col:23> 'unsigned long long' '%'
    |-ImplicitCastExpr 0x55e83d10cdb8 <col:21> 'unsigned long long' <LValueToRValue>
    | `-DeclRefExpr 0x55e83d10cd70 <col:21> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
    `-ImplicitCastExpr 0x55e83d10cdd0 <col:23> 'unsigned long long' <IntegralCast>
      `-IntegerLiteral 0x55e83d10cd98 <col:23> 'int' 10
[B9.2] + ([B9.7])
   9: ImplicitCastExpr 0x55e83d10ce70 <sds.c:442:16, col:25> 'char' <IntegralCast>
`-BinaryOperator 0x55e83d10ce48 <col:16, col:25> 'unsigned long long' '+'
  |-ImplicitCastExpr 0x55e83d10ce30 <col:16> 'unsigned long long' <IntegralCast>
  | `-CharacterLiteral 0x55e83d10cd58 <col:16> 'int' 48
  `-ParenExpr 0x55e83d10ce10 <col:20, col:25> 'unsigned long long'
    `-BinaryOperator 0x55e83d10cde8 <col:21, col:23> 'unsigned long long' '%'
      |-ImplicitCastExpr 0x55e83d10cdb8 <col:21> 'unsigned long long' <LValueToRValue>
      | `-DeclRefExpr 0x55e83d10cd70 <col:21> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
      `-ImplicitCastExpr 0x55e83d10cdd0 <col:23> 'unsigned long long' <IntegralCast>
        `-IntegerLiteral 0x55e83d10cd98 <col:23> 'int' 10
[B9.8] (ImplicitCastExpr, IntegralCast, char)
  10: DeclRefExpr 0x55e83d10ccf0 <sds.c:442:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
  11: UnaryOperator 0x55e83d10cd18 <sds.c:442:10, col:11> 'char *' postfix '++'
`-DeclRefExpr 0x55e83d10ccf0 <col:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
[B9.10]++
  12: UnaryOperator 0x55e83d10cd38 <sds.c:442:9, col:11> 'char' lvalue prefix '*'
`-UnaryOperator 0x55e83d10cd18 <col:10, col:11> 'char *' postfix '++'
  `-DeclRefExpr 0x55e83d10ccf0 <col:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
*[B9.11]
  13: BinaryOperator 0x55e83d10ce88 <sds.c:442:9, col:25> 'char' '='
|-UnaryOperator 0x55e83d10cd38 <col:9, col:11> 'char' lvalue prefix '*'
| `-UnaryOperator 0x55e83d10cd18 <col:10, col:11> 'char *' postfix '++'
|   `-DeclRefExpr 0x55e83d10ccf0 <col:10> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
`-ImplicitCastExpr 0x55e83d10ce70 <col:16, col:25> 'char' <IntegralCast>
  `-BinaryOperator 0x55e83d10ce48 <col:16, col:25> 'unsigned long long' '+'
    |-ImplicitCastExpr 0x55e83d10ce30 <col:16> 'unsigned long long' <IntegralCast>
    | `-CharacterLiteral 0x55e83d10cd58 <col:16> 'int' 48
    `-ParenExpr 0x55e83d10ce10 <col:20, col:25> 'unsigned long long'
      `-BinaryOperator 0x55e83d10cde8 <col:21, col:23> 'unsigned long long' '%'
        |-ImplicitCastExpr 0x55e83d10cdb8 <col:21> 'unsigned long long' <LValueToRValue>
        | `-DeclRefExpr 0x55e83d10cd70 <col:21> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
        `-ImplicitCastExpr 0x55e83d10cdd0 <col:23> 'unsigned long long' <IntegralCast>
          `-IntegerLiteral 0x55e83d10cd98 <col:23> 'int' 10
[B9.12] = [B9.9]
  14: DeclRefExpr 0x55e83d10ceb0 <sds.c:443:9> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
v
  15: IntegerLiteral 0x55e83d10ced8 <sds.c:443:14> 'int' 10
10
  16: ImplicitCastExpr 0x55e83d10cef8 <sds.c:443:14> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x55e83d10ced8 <col:14> 'int' 10
[B9.15] (ImplicitCastExpr, IntegralCast, unsigned long long)
  17: CompoundAssignOperator 0x55e83d10cf10 <sds.c:443:9, col:14> 'unsigned long long' '/=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|-DeclRefExpr 0x55e83d10ceb0 <col:9> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
`-ImplicitCastExpr 0x55e83d10cef8 <col:14> 'unsigned long long' <IntegralCast>
  `-IntegerLiteral 0x55e83d10ced8 <col:14> 'int' 10
[B9.14] /= [B9.16]
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   Preds (1): B8
   Succs (1): B9

 [B11]
   1: ConditionalOperator 0x55e83d10cbf0 <sds.c:439:9, col:32> 'long long'
|-ParenExpr 0x55e83d10cb30 <col:9, col:19> 'int'
| `-BinaryOperator 0x55e83d10cb08 <col:10, col:18> 'int' '<'
|   |-ImplicitCastExpr 0x55e83d10cad8 <col:10> 'long long' <LValueToRValue>
|   | `-DeclRefExpr 0x55e83d10ca90 <col:10> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
|   `-ImplicitCastExpr 0x55e83d10caf0 <col:18> 'long long' <IntegralCast>
|     `-IntegerLiteral 0x55e83d10cab8 <col:18> 'int' 0
|-UnaryOperator 0x55e83d10cb90 <col:23, col:24> 'long long' prefix '-'
| `-ImplicitCastExpr 0x55e83d10cb78 <col:24> 'long long' <LValueToRValue>
|   `-DeclRefExpr 0x55e83d10cb50 <col:24> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
`-ImplicitCastExpr 0x55e83d10cbd8 <col:32> 'long long' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10cbb0 <col:32> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
([B14.9]) ? [B12.3] : [B13.2]
   2: ImplicitCastExpr 0x55e83d10cc20 <sds.c:439:9, col:32> 'unsigned long long' <IntegralCast>
`-ConditionalOperator 0x55e83d10cbf0 <col:9, col:32> 'long long'
  |-ParenExpr 0x55e83d10cb30 <col:9, col:19> 'int'
  | `-BinaryOperator 0x55e83d10cb08 <col:10, col:18> 'int' '<'
  |   |-ImplicitCastExpr 0x55e83d10cad8 <col:10> 'long long' <LValueToRValue>
  |   | `-DeclRefExpr 0x55e83d10ca90 <col:10> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
  |   `-ImplicitCastExpr 0x55e83d10caf0 <col:18> 'long long' <IntegralCast>
  |     `-IntegerLiteral 0x55e83d10cab8 <col:18> 'int' 0
  |-UnaryOperator 0x55e83d10cb90 <col:23, col:24> 'long long' prefix '-'
  | `-ImplicitCastExpr 0x55e83d10cb78 <col:24> 'long long' <LValueToRValue>
  |   `-DeclRefExpr 0x55e83d10cb50 <col:24> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
  `-ImplicitCastExpr 0x55e83d10cbd8 <col:32> 'long long' <LValueToRValue>
    `-DeclRefExpr 0x55e83d10cbb0 <col:32> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
[B11.1] (ImplicitCastExpr, IntegralCast, unsigned long long)
   3: DeclRefExpr 0x55e83d10ca68 <sds.c:439:5> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
v
   4: BinaryOperator 0x55e83d10cc38 <sds.c:439:5, col:32> 'unsigned long long' '='
|-DeclRefExpr 0x55e83d10ca68 <col:5> 'unsigned long long' lvalue Var 0x55e83d10c968 'v' 'unsigned long long'
`-ImplicitCastExpr 0x55e83d10cc20 <col:9, col:32> 'unsigned long long' <IntegralCast>
  `-ConditionalOperator 0x55e83d10cbf0 <col:9, col:32> 'long long'
    |-ParenExpr 0x55e83d10cb30 <col:9, col:19> 'int'
    | `-BinaryOperator 0x55e83d10cb08 <col:10, col:18> 'int' '<'
    |   |-ImplicitCastExpr 0x55e83d10cad8 <col:10> 'long long' <LValueToRValue>
    |   | `-DeclRefExpr 0x55e83d10ca90 <col:10> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
    |   `-ImplicitCastExpr 0x55e83d10caf0 <col:18> 'long long' <IntegralCast>
    |     `-IntegerLiteral 0x55e83d10cab8 <col:18> 'int' 0
    |-UnaryOperator 0x55e83d10cb90 <col:23, col:24> 'long long' prefix '-'
    | `-ImplicitCastExpr 0x55e83d10cb78 <col:24> 'long long' <LValueToRValue>
    |   `-DeclRefExpr 0x55e83d10cb50 <col:24> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
    `-ImplicitCastExpr 0x55e83d10cbd8 <col:32> 'long long' <LValueToRValue>
      `-DeclRefExpr 0x55e83d10cbb0 <col:32> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
[B11.3] = [B11.2]
   5: DeclRefExpr 0x55e83d10cc88 <sds.c:440:9> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
s
   6: ImplicitCastExpr 0x55e83d10ccb0 <sds.c:440:9> 'char *' <LValueToRValue>
`-DeclRefExpr 0x55e83d10cc88 <col:9> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B11.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: DeclRefExpr 0x55e83d10cc60 <sds.c:440:5> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
p
   8: BinaryOperator 0x55e83d10ccc8 <sds.c:440:5, col:9> 'char *' '='
|-DeclRefExpr 0x55e83d10cc60 <col:5> 'char *' lvalue Var 0x55e83d10c850 'p' 'char *'
`-ImplicitCastExpr 0x55e83d10ccb0 <col:9> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10cc88 <col:9> 'char *' lvalue ParmVar 0x55e83d10c638 's' 'char *'
[B11.7] = [B11.6]
   Preds (2): B12 B13
   Succs (1): B9

 [B12]
   1: DeclRefExpr 0x55e83d10cb50 <sds.c:439:24> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
value
   2: ImplicitCastExpr 0x55e83d10cb78 <sds.c:439:24> 'long long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10cb50 <col:24> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
[B12.1] (ImplicitCastExpr, LValueToRValue, long long)
   3: UnaryOperator 0x55e83d10cb90 <sds.c:439:23, col:24> 'long long' prefix '-'
`-ImplicitCastExpr 0x55e83d10cb78 <col:24> 'long long' <LValueToRValue>
  `-DeclRefExpr 0x55e83d10cb50 <col:24> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
-[B12.2]
   Preds (1): B14
   Succs (1): B11

 [B13]
   1: DeclRefExpr 0x55e83d10cbb0 <sds.c:439:32> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
value
   2: ImplicitCastExpr 0x55e83d10cbd8 <sds.c:439:32> 'long long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10cbb0 <col:32> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
[B13.1] (ImplicitCastExpr, LValueToRValue, long long)
   Preds (1): B14
   Succs (1): B11

 [B14]
   1: DeclStmt 0x55e83d135c30 <sds.c:433:11>col:11
`-VarDecl 0x55e83d10c850 <col:5, col:11> col:11 used p 'char *'
char *p;
   2: DeclStmt 0x55e83d135c18 <sds.c:433:14>col:14
`-VarDecl 0x55e83d10c8c0 <col:5, col:14> col:14 used aux 'char'
char aux;
   3: DeclStmt 0x55e83d10c9c8 <sds.c:434:5, col:25>col:24
`-VarDecl 0x55e83d10c968 <col:5, col:24> col:24 used v 'unsigned long long'
unsigned long long v;
   4: DeclStmt 0x55e83d10ca50 <sds.c:435:5, col:13>col:12
`-VarDecl 0x55e83d10c9f0 <col:5, col:12> col:12 used l 'size_t':'unsigned long'
size_t l;
   5: DeclRefExpr 0x55e83d10ca90 <sds.c:439:10> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
value
   6: ImplicitCastExpr 0x55e83d10cad8 <sds.c:439:10> 'long long' <LValueToRValue>
`-DeclRefExpr 0x55e83d10ca90 <col:10> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
[B14.5] (ImplicitCastExpr, LValueToRValue, long long)
   7: IntegerLiteral 0x55e83d10cab8 <sds.c:439:18> 'int' 0
0
   8: ImplicitCastExpr 0x55e83d10caf0 <sds.c:439:18> 'long long' <IntegralCast>
`-IntegerLiteral 0x55e83d10cab8 <col:18> 'int' 0
[B14.7] (ImplicitCastExpr, IntegralCast, long long)
   9: BinaryOperator 0x55e83d10cb08 <sds.c:439:10, col:18> 'int' '<'
|-ImplicitCastExpr 0x55e83d10cad8 <col:10> 'long long' <LValueToRValue>
| `-DeclRefExpr 0x55e83d10ca90 <col:10> 'long long' lvalue ParmVar 0x55e83d10c6b0 'value' 'long long'
`-ImplicitCastExpr 0x55e83d10caf0 <col:18> 'long long' <IntegralCast>
  `-IntegerLiteral 0x55e83d10cab8 <col:18> 'int' 0
[B14.6] < [B14.8]
   T: ([B14.9]) ? ... : ...
   Preds (1): B15
   Succs (2): B12 B13

 [B0 (EXIT)]
   Preds (1): B1
