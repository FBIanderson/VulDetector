static int string2ll(const char *s, size_t slen, long long *value)
 [B39 (ENTRY)]
   Succs (1): B38

 [B1]
   1: IntegerLiteral 0x557397a16520 <./read.h:38:18> 'int' 0
0
   2: ReturnStmt 0x557397a16540 <read.c:219:5, ./read.h:38:18>
`-IntegerLiteral 0x557397a16520 <col:18> 'int' 0
return [B1.1];
   Preds (4): B2 B3 B6 B7
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x557397a16410 <read.c:217:37> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: ImplicitCastExpr 0x557397a16438 <read.c:217:37> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x557397a16410 <col:37> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B2.1] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   3: ImplicitCastExpr 0x557397a16450 <read.c:217:37> 'long long' <IntegralCast>
`-ImplicitCastExpr 0x557397a16438 <col:37> 'unsigned long long' <LValueToRValue>
  `-DeclRefExpr 0x557397a16410 <col:37> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B2.2] (ImplicitCastExpr, IntegralCast, long long)
   4: DeclRefExpr 0x557397a163b0 <read.c:217:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   5: ImplicitCastExpr 0x557397a163d8 <read.c:217:29> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a163b0 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B2.4] (ImplicitCastExpr, LValueToRValue, long long *)
   6: UnaryOperator 0x557397a163f0 <read.c:217:28, col:29> 'long long' lvalue prefix '*'
`-ImplicitCastExpr 0x557397a163d8 <col:29> 'long long *' <LValueToRValue>
  `-DeclRefExpr 0x557397a163b0 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
*[B2.5]
   7: BinaryOperator 0x557397a16468 <read.c:217:28, col:37> 'long long' '='
|-UnaryOperator 0x557397a163f0 <col:28, col:29> 'long long' lvalue prefix '*'
| `-ImplicitCastExpr 0x557397a163d8 <col:29> 'long long *' <LValueToRValue>
|   `-DeclRefExpr 0x557397a163b0 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a16450 <col:37> 'long long' <IntegralCast>
  `-ImplicitCastExpr 0x557397a16438 <col:37> 'unsigned long long' <LValueToRValue>
    `-DeclRefExpr 0x557397a16410 <col:37> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B2.6] = [B2.3]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x557397a162b0 <read.c:217:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   2: ImplicitCastExpr 0x557397a16358 <read.c:217:13> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a162b0 <col:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B3.1] (ImplicitCastExpr, LValueToRValue, long long *)
   3: IntegerLiteral 0x557397a162d8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   4: CStyleCastExpr 0x557397a16310 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x557397a162d8 <col:24> 'int' 0
(void *)[B3.3] (CStyleCastExpr, NullToPointer, void *)
   5: ImplicitCastExpr 0x557397a16370 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'long long *' <BitCast>
`-ParenExpr 0x557397a16338 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x557397a16310 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x557397a162d8 <col:24> 'int' 0
([B3.4]) (ImplicitCastExpr, BitCast, long long *)
   6: BinaryOperator 0x557397a16388 <read.c:217:13, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ImplicitCastExpr 0x557397a16358 <read.c:217:13> 'long long *' <LValueToRValue>
| `-DeclRefExpr 0x557397a162b0 <col:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a16370 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'long long *' <BitCast>
  `-ParenExpr 0x557397a16338 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x557397a16310 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x557397a162d8 <col:24> 'int' 0
[B3.2] != [B3.5]
   T: if [B3.6]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: IntegerLiteral 0x557397a16220 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a16240 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a16220 <col:20> 'int' 1
-[B4.1]
   3: ReturnStmt 0x557397a16260 <read.c:216:13, ./read.h:37:20>
`-UnaryOperator 0x557397a16240 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a16220 <col:20> 'int' 1
return [B4.2];
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: DeclRefExpr 0x557397a16180 <read.c:215:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: ImplicitCastExpr 0x557397a161c8 <read.c:215:13> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x557397a16180 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B5.1] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   3: IntegerLiteral 0x557397a161a8 <<built-in>:40:27> 'long long' 9223372036854775807
9223372036854775807LL
   4: ImplicitCastExpr 0x557397a161e0 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x557397a161a8 <col:27> 'long long' 9223372036854775807
[B5.3] (ImplicitCastExpr, IntegralCast, unsigned long long)
   5: BinaryOperator 0x557397a161f8 <read.c:215:13, <built-in>:40:27> 'int' '>'
|-ImplicitCastExpr 0x557397a161c8 <read.c:215:13> 'unsigned long long' <LValueToRValue>
| `-DeclRefExpr 0x557397a16180 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ImplicitCastExpr 0x557397a161e0 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
  `-IntegerLiteral 0x557397a161a8 <col:27> 'long long' 9223372036854775807
[B5.2] > [B5.4]
   T: if [B5.5]
   Preds (1): B10
   Succs (2): B4 B3

 [B6]
   1: DeclRefExpr 0x557397a16088 <read.c:213:38> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: ImplicitCastExpr 0x557397a160b0 <read.c:213:38> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x557397a16088 <col:38> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B6.1] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   3: UnaryOperator 0x557397a160c8 <read.c:213:37, col:38> 'unsigned long long' prefix '-'
`-ImplicitCastExpr 0x557397a160b0 <col:38> 'unsigned long long' <LValueToRValue>
  `-DeclRefExpr 0x557397a16088 <col:38> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
-[B6.2]
   4: ImplicitCastExpr 0x557397a160e8 <read.c:213:37, col:38> 'long long' <IntegralCast>
`-UnaryOperator 0x557397a160c8 <col:37, col:38> 'unsigned long long' prefix '-'
  `-ImplicitCastExpr 0x557397a160b0 <col:38> 'unsigned long long' <LValueToRValue>
    `-DeclRefExpr 0x557397a16088 <col:38> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B6.3] (ImplicitCastExpr, IntegralCast, long long)
   5: DeclRefExpr 0x557397a16028 <read.c:213:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   6: ImplicitCastExpr 0x557397a16050 <read.c:213:29> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a16028 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B6.5] (ImplicitCastExpr, LValueToRValue, long long *)
   7: UnaryOperator 0x557397a16068 <read.c:213:28, col:29> 'long long' lvalue prefix '*'
`-ImplicitCastExpr 0x557397a16050 <col:29> 'long long *' <LValueToRValue>
  `-DeclRefExpr 0x557397a16028 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
*[B6.6]
   8: BinaryOperator 0x557397a16100 <read.c:213:28, col:38> 'long long' '='
|-UnaryOperator 0x557397a16068 <col:28, col:29> 'long long' lvalue prefix '*'
| `-ImplicitCastExpr 0x557397a16050 <col:29> 'long long *' <LValueToRValue>
|   `-DeclRefExpr 0x557397a16028 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a160e8 <col:37, col:38> 'long long' <IntegralCast>
  `-UnaryOperator 0x557397a160c8 <col:37, col:38> 'unsigned long long' prefix '-'
    `-ImplicitCastExpr 0x557397a160b0 <col:38> 'unsigned long long' <LValueToRValue>
      `-DeclRefExpr 0x557397a16088 <col:38> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B6.7] = [B6.4]
   Preds (1): B7
   Succs (1): B1

 [B7]
   1: DeclRefExpr 0x557397a15f28 <read.c:213:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   2: ImplicitCastExpr 0x557397a15fd0 <read.c:213:13> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a15f28 <col:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B7.1] (ImplicitCastExpr, LValueToRValue, long long *)
   3: IntegerLiteral 0x557397a15f50 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   4: CStyleCastExpr 0x557397a15f88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x557397a15f50 <col:24> 'int' 0
(void *)[B7.3] (CStyleCastExpr, NullToPointer, void *)
   5: ImplicitCastExpr 0x557397a15fe8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'long long *' <BitCast>
`-ParenExpr 0x557397a15fb0 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x557397a15f88 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x557397a15f50 <col:24> 'int' 0
([B7.4]) (ImplicitCastExpr, BitCast, long long *)
   6: BinaryOperator 0x557397a16000 <read.c:213:13, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ImplicitCastExpr 0x557397a15fd0 <read.c:213:13> 'long long *' <LValueToRValue>
| `-DeclRefExpr 0x557397a15f28 <col:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a15fe8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'long long *' <BitCast>
  `-ParenExpr 0x557397a15fb0 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x557397a15f88 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x557397a15f50 <col:24> 'int' 0
[B7.2] != [B7.5]
   T: if [B7.6]
   Preds (1): B9
   Succs (2): B6 B1

 [B8]
   1: IntegerLiteral 0x557397a15e98 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a15eb8 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a15e98 <col:20> 'int' 1
-[B8.1]
   3: ReturnStmt 0x557397a15ed8 <read.c:212:13, ./read.h:37:20>
`-UnaryOperator 0x557397a15eb8 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a15e98 <col:20> 'int' 1
return [B8.2];
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: DeclRefExpr 0x557397a15bd8 <read.c:211:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: ImplicitCastExpr 0x557397a15e58 <read.c:211:13> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x557397a15bd8 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B9.1] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   3: IntegerLiteral 0x557397a15c00 <<built-in>:40:27> 'long long' 9223372036854775807
9223372036854775807LL
   4: UnaryOperator 0x557397a15c20 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:21, <built-in>:40:27> 'long long' prefix '-'
`-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
-[B9.3]
   5: IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
1LL
   6: BinaryOperator 0x557397a15c60 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:21, col:40> 'long long' '-'
|-UnaryOperator 0x557397a15c20 <col:21, <built-in>:40:27> 'long long' prefix '-'
| `-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
`-IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
[B9.4] - [B9.5]
   7: IntegerLiteral 0x557397a15ca8 <read.c:211:51> 'int' 1
1
   8: ImplicitCastExpr 0x557397a15cc8 <read.c:211:51> 'long long' <IntegralCast>
`-IntegerLiteral 0x557397a15ca8 <col:51> 'int' 1
[B9.7] (ImplicitCastExpr, IntegralCast, long long)
   9: BinaryOperator 0x557397a15ce0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, read.c:211:51> 'long long' '+'
|-ParenExpr 0x557397a15c88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, col:43> 'long long'
| `-BinaryOperator 0x557397a15c60 <col:21, col:40> 'long long' '-'
|   |-UnaryOperator 0x557397a15c20 <col:21, <built-in>:40:27> 'long long' prefix '-'
|   | `-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
|   `-IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
`-ImplicitCastExpr 0x557397a15cc8 <read.c:211:51> 'long long' <IntegralCast>
  `-IntegerLiteral 0x557397a15ca8 <col:51> 'int' 1
([B9.6]) + [B9.8]
  10: UnaryOperator 0x557397a15d28 <read.c:211:39, col:52> 'long long' prefix '-'
`-ParenExpr 0x557397a15d08 <col:40, col:52> 'long long'
  `-BinaryOperator 0x557397a15ce0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, read.c:211:51> 'long long' '+'
    |-ParenExpr 0x557397a15c88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, col:43> 'long long'
    | `-BinaryOperator 0x557397a15c60 <col:21, col:40> 'long long' '-'
    |   |-UnaryOperator 0x557397a15c20 <col:21, <built-in>:40:27> 'long long' prefix '-'
    |   | `-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
    |   `-IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
    `-ImplicitCastExpr 0x557397a15cc8 <read.c:211:51> 'long long' <IntegralCast>
      `-IntegerLiteral 0x557397a15ca8 <col:51> 'int' 1
-([B9.9])
  11: CStyleCastExpr 0x557397a15db0 <read.c:211:18, col:53> 'unsigned long long' <IntegralCast>
`-ParenExpr 0x557397a15d90 <col:38, col:53> 'long long'
  `-UnaryOperator 0x557397a15d28 <col:39, col:52> 'long long' prefix '-'
    `-ParenExpr 0x557397a15d08 <col:40, col:52> 'long long'
      `-BinaryOperator 0x557397a15ce0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, read.c:211:51> 'long long' '+'
        |-ParenExpr 0x557397a15c88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, col:43> 'long long'
        | `-BinaryOperator 0x557397a15c60 <col:21, col:40> 'long long' '-'
        |   |-UnaryOperator 0x557397a15c20 <col:21, <built-in>:40:27> 'long long' prefix '-'
        |   | `-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
        |   `-IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
        `-ImplicitCastExpr 0x557397a15cc8 <read.c:211:51> 'long long' <IntegralCast>
          `-IntegerLiteral 0x557397a15ca8 <col:51> 'int' 1
(unsigned long long)([B9.10]) (CStyleCastExpr, IntegralCast, unsigned long long)
  12: IntegerLiteral 0x557397a15dd8 <read.c:211:55> 'int' 1
1
  13: ImplicitCastExpr 0x557397a15df8 <read.c:211:55> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x557397a15dd8 <col:55> 'int' 1
[B9.12] (ImplicitCastExpr, IntegralCast, unsigned long long)
  14: BinaryOperator 0x557397a15e10 <read.c:211:18, col:55> 'unsigned long long' '+'
|-CStyleCastExpr 0x557397a15db0 <col:18, col:53> 'unsigned long long' <IntegralCast>
| `-ParenExpr 0x557397a15d90 <col:38, col:53> 'long long'
|   `-UnaryOperator 0x557397a15d28 <col:39, col:52> 'long long' prefix '-'
|     `-ParenExpr 0x557397a15d08 <col:40, col:52> 'long long'
|       `-BinaryOperator 0x557397a15ce0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, read.c:211:51> 'long long' '+'
|         |-ParenExpr 0x557397a15c88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, col:43> 'long long'
|         | `-BinaryOperator 0x557397a15c60 <col:21, col:40> 'long long' '-'
|         |   |-UnaryOperator 0x557397a15c20 <col:21, <built-in>:40:27> 'long long' prefix '-'
|         |   | `-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
|         |   `-IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
|         `-ImplicitCastExpr 0x557397a15cc8 <read.c:211:51> 'long long' <IntegralCast>
|           `-IntegerLiteral 0x557397a15ca8 <col:51> 'int' 1
`-ImplicitCastExpr 0x557397a15df8 <col:55> 'unsigned long long' <IntegralCast>
  `-IntegerLiteral 0x557397a15dd8 <col:55> 'int' 1
[B9.11] + [B9.13]
  15: BinaryOperator 0x557397a15e70 <read.c:211:13, col:56> 'int' '>'
|-ImplicitCastExpr 0x557397a15e58 <col:13> 'unsigned long long' <LValueToRValue>
| `-DeclRefExpr 0x557397a15bd8 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ParenExpr 0x557397a15e38 <col:17, col:56> 'unsigned long long'
  `-BinaryOperator 0x557397a15e10 <col:18, col:55> 'unsigned long long' '+'
    |-CStyleCastExpr 0x557397a15db0 <col:18, col:53> 'unsigned long long' <IntegralCast>
    | `-ParenExpr 0x557397a15d90 <col:38, col:53> 'long long'
    |   `-UnaryOperator 0x557397a15d28 <col:39, col:52> 'long long' prefix '-'
    |     `-ParenExpr 0x557397a15d08 <col:40, col:52> 'long long'
    |       `-BinaryOperator 0x557397a15ce0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, read.c:211:51> 'long long' '+'
    |         |-ParenExpr 0x557397a15c88 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:20, col:43> 'long long'
    |         | `-BinaryOperator 0x557397a15c60 <col:21, col:40> 'long long' '-'
    |         |   |-UnaryOperator 0x557397a15c20 <col:21, <built-in>:40:27> 'long long' prefix '-'
    |         |   | `-IntegerLiteral 0x557397a15c00 <col:27> 'long long' 9223372036854775807
    |         |   `-IntegerLiteral 0x557397a15c40 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:99:40> 'long long' 1
    |         `-ImplicitCastExpr 0x557397a15cc8 <read.c:211:51> 'long long' <IntegralCast>
    |           `-IntegerLiteral 0x557397a15ca8 <col:51> 'int' 1
    `-ImplicitCastExpr 0x557397a15df8 <col:55> 'unsigned long long' <IntegralCast>
      `-IntegerLiteral 0x557397a15dd8 <col:55> 'int' 1
[B9.2] > ([B9.14])
   T: if [B9.15]
   Preds (1): B10
   Succs (2): B8 B7

 [B10]
   1: DeclRefExpr 0x557397a15b98 <read.c:210:9> 'int' lvalue Var 0x557397a13c88 'negative' 'int'
negative
   2: ImplicitCastExpr 0x557397a15bc0 <read.c:210:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x557397a15b98 <col:9> 'int' lvalue Var 0x557397a13c88 'negative' 'int'
[B10.1] (ImplicitCastExpr, LValueToRValue, int)
   T: if [B10.2]
   Preds (1): B12
   Succs (2): B9 B5

 [B11]
   1: IntegerLiteral 0x557397a15b08 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a15b28 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a15b08 <col:20> 'int' 1
-[B11.1]
   3: ReturnStmt 0x557397a15b48 <read.c:208:9, ./read.h:37:20>
`-UnaryOperator 0x557397a15b28 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a15b08 <col:20> 'int' 1
return [B11.2];
   Preds (1): B12
   Succs (1): B0

 [B12]
   1: DeclRefExpr 0x557397a15a60 <read.c:207:9> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
   2: ImplicitCastExpr 0x557397a15ab0 <read.c:207:9> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a15a60 <col:9> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B12.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: DeclRefExpr 0x557397a15a88 <read.c:207:16> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
slen
   4: ImplicitCastExpr 0x557397a15ac8 <read.c:207:16> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a15a88 <col:16> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B12.3] (ImplicitCastExpr, LValueToRValue, size_t)
   5: BinaryOperator 0x557397a15ae0 <read.c:207:9, col:16> 'int' '<'
|-ImplicitCastExpr 0x557397a15ab0 <col:9> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x557397a15a60 <col:9> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x557397a15ac8 <col:16> 'size_t':'unsigned long' <LValueToRValue>
  `-DeclRefExpr 0x557397a15a88 <col:16> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B12.2] < [B12.4]
   T: if [B12.5]
   Preds (3): B19 B20 B21
   Succs (2): B11 B10

 [B13]
   Preds (1): B14
   Succs (1): B21

 [B14]
   1: DeclRefExpr 0x557397a15800 <read.c:201:9> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: DeclRefExpr 0x557397a15828 <read.c:201:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   3: ImplicitCastExpr 0x557397a15870 <read.c:201:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B14.2] (ImplicitCastExpr, LValueToRValue, const char *)
   4: IntegerLiteral 0x557397a15850 <read.c:201:16> 'int' 0
0
   5: ArraySubscriptExpr 0x557397a15888 <read.c:201:14, col:17> 'const char' lvalue
|-ImplicitCastExpr 0x557397a15870 <col:14> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a15850 <col:16> 'int' 0
[B14.3][[B14.4]]
   6: ImplicitCastExpr 0x557397a158c8 <read.c:201:14, col:17> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a15888 <col:14, col:17> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a15870 <col:14> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a15850 <col:16> 'int' 0
[B14.5] (ImplicitCastExpr, LValueToRValue, char)
   7: ImplicitCastExpr 0x557397a158e0 <read.c:201:14, col:17> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a158c8 <col:14, col:17> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a15888 <col:14, col:17> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a15870 <col:14> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a15850 <col:16> 'int' 0
[B14.6] (ImplicitCastExpr, IntegralCast, int)
   8: CharacterLiteral 0x557397a158b0 <read.c:201:19> 'int' 48
'0'
   9: BinaryOperator 0x557397a158f8 <read.c:201:14, col:19> 'int' '-'
|-ImplicitCastExpr 0x557397a158e0 <col:14, col:17> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a158c8 <col:14, col:17> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a15888 <col:14, col:17> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a15870 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a15850 <col:16> 'int' 0
`-CharacterLiteral 0x557397a158b0 <col:19> 'int' 48
[B14.7] - [B14.8]
  10: ImplicitCastExpr 0x557397a15920 <read.c:201:14, col:19> 'unsigned long long' <IntegralCast>
`-BinaryOperator 0x557397a158f8 <col:14, col:19> 'int' '-'
  |-ImplicitCastExpr 0x557397a158e0 <col:14, col:17> 'int' <IntegralCast>
  | `-ImplicitCastExpr 0x557397a158c8 <col:14, col:17> 'char' <LValueToRValue>
  |   `-ArraySubscriptExpr 0x557397a15888 <col:14, col:17> 'const char' lvalue
  |     |-ImplicitCastExpr 0x557397a15870 <col:14> 'const char *' <LValueToRValue>
  |     | `-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  |     `-IntegerLiteral 0x557397a15850 <col:16> 'int' 0
  `-CharacterLiteral 0x557397a158b0 <col:19> 'int' 48
[B14.9] (ImplicitCastExpr, IntegralCast, unsigned long long)
  11: CompoundAssignOperator 0x557397a15938 <read.c:201:9, col:19> 'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|-DeclRefExpr 0x557397a15800 <col:9> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ImplicitCastExpr 0x557397a15920 <col:14, col:19> 'unsigned long long' <IntegralCast>
  `-BinaryOperator 0x557397a158f8 <col:14, col:19> 'int' '-'
    |-ImplicitCastExpr 0x557397a158e0 <col:14, col:17> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x557397a158c8 <col:14, col:17> 'char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x557397a15888 <col:14, col:17> 'const char' lvalue
    |     |-ImplicitCastExpr 0x557397a15870 <col:14> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x557397a15828 <col:14> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    |     `-IntegerLiteral 0x557397a15850 <col:16> 'int' 0
    `-CharacterLiteral 0x557397a158b0 <col:19> 'int' 48
[B14.1] += [B14.10]
  12: DeclRefExpr 0x557397a15970 <read.c:203:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
  13: UnaryOperator 0x557397a15998 <read.c:203:9, col:10> 'const char *' postfix '++'
`-DeclRefExpr 0x557397a15970 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B14.12]++
  14: DeclRefExpr 0x557397a159b8 <read.c:203:14> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
  15: UnaryOperator 0x557397a159e0 <read.c:203:14, col:18> 'size_t':'unsigned long' postfix '++'
`-DeclRefExpr 0x557397a159b8 <col:14> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B14.14]++
   Preds (1): B16
   Succs (1): B13

 [B15]
   1: IntegerLiteral 0x557397a15770 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a15790 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a15770 <col:20> 'int' 1
-[B15.1]
   3: ReturnStmt 0x557397a157b0 <read.c:200:13, ./read.h:37:20>
`-UnaryOperator 0x557397a15790 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a15770 <col:20> 'int' 1
return [B15.2];
   Preds (1): B16
   Succs (1): B0

 [B16]
   1: DeclRefExpr 0x557397a15410 <read.c:197:9> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: IntegerLiteral 0x557397a15438 <read.c:197:14> 'int' 10
10
   3: ImplicitCastExpr 0x557397a15458 <read.c:197:14> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x557397a15438 <col:14> 'int' 10
[B16.2] (ImplicitCastExpr, IntegralCast, unsigned long long)
   4: CompoundAssignOperator 0x557397a15470 <read.c:197:9, col:14> 'unsigned long long' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|-DeclRefExpr 0x557397a15410 <col:9> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ImplicitCastExpr 0x557397a15458 <col:14> 'unsigned long long' <IntegralCast>
  `-IntegerLiteral 0x557397a15438 <col:14> 'int' 10
[B16.1] *= [B16.3]
   5: DeclRefExpr 0x557397a154a8 <read.c:199:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   6: ImplicitCastExpr 0x557397a15730 <read.c:199:13> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x557397a154a8 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B16.5] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   7: IntegerLiteral 0x557397a154d0 <<built-in>:40:27> 'long long' 9223372036854775807
9223372036854775807LL
   8: ImplicitCastExpr 0x557397a15510 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x557397a154d0 <col:27> 'long long' 9223372036854775807
[B16.7] (ImplicitCastExpr, IntegralCast, unsigned long long)
   9: IntegerLiteral 0x557397a154f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
2ULL
  10: BinaryOperator 0x557397a15528 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
|-ImplicitCastExpr 0x557397a15510 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
| `-IntegerLiteral 0x557397a154d0 <col:27> 'long long' 9223372036854775807
`-IntegerLiteral 0x557397a154f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
[B16.8] * [B16.9]
  11: IntegerLiteral 0x557397a15550 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' 1
1ULL
  12: BinaryOperator 0x557397a15570 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' '+'
|-BinaryOperator 0x557397a15528 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
| |-ImplicitCastExpr 0x557397a15510 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
| | `-IntegerLiteral 0x557397a154d0 <col:27> 'long long' 9223372036854775807
| `-IntegerLiteral 0x557397a154f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
`-IntegerLiteral 0x557397a15550 <col:44> 'unsigned long long' 1
[B16.10] + [B16.11]
  13: DeclRefExpr 0x557397a155b8 <read.c:199:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
  14: ImplicitCastExpr 0x557397a15600 <read.c:199:32> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B16.13] (ImplicitCastExpr, LValueToRValue, const char *)
  15: IntegerLiteral 0x557397a155e0 <read.c:199:34> 'int' 0
0
  16: ArraySubscriptExpr 0x557397a15618 <read.c:199:32, col:35> 'const char' lvalue
|-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
[B16.14][[B16.15]]
  17: ImplicitCastExpr 0x557397a15658 <read.c:199:32, col:35> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a15618 <col:32, col:35> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
[B16.16] (ImplicitCastExpr, LValueToRValue, char)
  18: ImplicitCastExpr 0x557397a15670 <read.c:199:32, col:35> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a15658 <col:32, col:35> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a15618 <col:32, col:35> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
[B16.17] (ImplicitCastExpr, IntegralCast, int)
  19: CharacterLiteral 0x557397a15640 <read.c:199:37> 'int' 48
'0'
  20: BinaryOperator 0x557397a15688 <read.c:199:32, col:37> 'int' '-'
|-ImplicitCastExpr 0x557397a15670 <col:32, col:35> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a15658 <col:32, col:35> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a15618 <col:32, col:35> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
`-CharacterLiteral 0x557397a15640 <col:37> 'int' 48
[B16.18] - [B16.19]
  21: ImplicitCastExpr 0x557397a156d0 <read.c:199:31, col:40> 'unsigned long long' <IntegralCast>
`-ParenExpr 0x557397a156b0 <col:31, col:40> 'int'
  `-BinaryOperator 0x557397a15688 <col:32, col:37> 'int' '-'
    |-ImplicitCastExpr 0x557397a15670 <col:32, col:35> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x557397a15658 <col:32, col:35> 'char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x557397a15618 <col:32, col:35> 'const char' lvalue
    |     |-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    |     `-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
    `-CharacterLiteral 0x557397a15640 <col:37> 'int' 48
([B16.20]) (ImplicitCastExpr, IntegralCast, unsigned long long)
  22: BinaryOperator 0x557397a156e8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, read.c:199:40> 'unsigned long long' '-'
|-ParenExpr 0x557397a15598 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, col:48> 'unsigned long long'
| `-BinaryOperator 0x557397a15570 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' '+'
|   |-BinaryOperator 0x557397a15528 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
|   | |-ImplicitCastExpr 0x557397a15510 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x557397a154d0 <col:27> 'long long' 9223372036854775807
|   | `-IntegerLiteral 0x557397a154f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
|   `-IntegerLiteral 0x557397a15550 <col:44> 'unsigned long long' 1
`-ImplicitCastExpr 0x557397a156d0 <read.c:199:31, col:40> 'unsigned long long' <IntegralCast>
  `-ParenExpr 0x557397a156b0 <col:31, col:40> 'int'
    `-BinaryOperator 0x557397a15688 <col:32, col:37> 'int' '-'
      |-ImplicitCastExpr 0x557397a15670 <col:32, col:35> 'int' <IntegralCast>
      | `-ImplicitCastExpr 0x557397a15658 <col:32, col:35> 'char' <LValueToRValue>
      |   `-ArraySubscriptExpr 0x557397a15618 <col:32, col:35> 'const char' lvalue
      |     |-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
      |     | `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
      |     `-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
      `-CharacterLiteral 0x557397a15640 <col:37> 'int' 48
([B16.12]) - [B16.21]
  23: BinaryOperator 0x557397a15748 <read.c:199:13, col:41> 'int' '>'
|-ImplicitCastExpr 0x557397a15730 <col:13> 'unsigned long long' <LValueToRValue>
| `-DeclRefExpr 0x557397a154a8 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ParenExpr 0x557397a15710 <col:17, col:41> 'unsigned long long'
  `-BinaryOperator 0x557397a156e8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, read.c:199:40> 'unsigned long long' '-'
    |-ParenExpr 0x557397a15598 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, col:48> 'unsigned long long'
    | `-BinaryOperator 0x557397a15570 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' '+'
    |   |-BinaryOperator 0x557397a15528 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
    |   | |-ImplicitCastExpr 0x557397a15510 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
    |   | | `-IntegerLiteral 0x557397a154d0 <col:27> 'long long' 9223372036854775807
    |   | `-IntegerLiteral 0x557397a154f0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
    |   `-IntegerLiteral 0x557397a15550 <col:44> 'unsigned long long' 1
    `-ImplicitCastExpr 0x557397a156d0 <read.c:199:31, col:40> 'unsigned long long' <IntegralCast>
      `-ParenExpr 0x557397a156b0 <col:31, col:40> 'int'
        `-BinaryOperator 0x557397a15688 <col:32, col:37> 'int' '-'
          |-ImplicitCastExpr 0x557397a15670 <col:32, col:35> 'int' <IntegralCast>
          | `-ImplicitCastExpr 0x557397a15658 <col:32, col:35> 'char' <LValueToRValue>
          |   `-ArraySubscriptExpr 0x557397a15618 <col:32, col:35> 'const char' lvalue
          |     |-ImplicitCastExpr 0x557397a15600 <col:32> 'const char *' <LValueToRValue>
          |     | `-DeclRefExpr 0x557397a155b8 <col:32> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
          |     `-IntegerLiteral 0x557397a155e0 <col:34> 'int' 0
          `-CharacterLiteral 0x557397a15640 <col:37> 'int' 48
[B16.6] > ([B16.22])
   T: if [B16.23]
   Preds (1): B18
   Succs (2): B15 B14

 [B17]
   1: IntegerLiteral 0x557397a15380 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a153a0 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a15380 <col:20> 'int' 1
-[B17.1]
   3: ReturnStmt 0x557397a153c0 <read.c:196:13, ./read.h:37:20>
`-UnaryOperator 0x557397a153a0 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a15380 <col:20> 'int' 1
return [B17.2];
   Preds (1): B18
   Succs (1): B0

 [B18]
   1: DeclRefExpr 0x557397a151b0 <read.c:195:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
   2: ImplicitCastExpr 0x557397a15340 <read.c:195:13> 'unsigned long long' <LValueToRValue>
`-DeclRefExpr 0x557397a151b0 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
[B18.1] (ImplicitCastExpr, LValueToRValue, unsigned long long)
   3: IntegerLiteral 0x557397a151d8 <<built-in>:40:27> 'long long' 9223372036854775807
9223372036854775807LL
   4: ImplicitCastExpr 0x557397a15218 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x557397a151d8 <col:27> 'long long' 9223372036854775807
[B18.3] (ImplicitCastExpr, IntegralCast, unsigned long long)
   5: IntegerLiteral 0x557397a151f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
2ULL
   6: BinaryOperator 0x557397a15230 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
|-ImplicitCastExpr 0x557397a15218 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
| `-IntegerLiteral 0x557397a151d8 <col:27> 'long long' 9223372036854775807
`-IntegerLiteral 0x557397a151f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
[B18.4] * [B18.5]
   7: IntegerLiteral 0x557397a15258 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' 1
1ULL
   8: BinaryOperator 0x557397a15278 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' '+'
|-BinaryOperator 0x557397a15230 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
| |-ImplicitCastExpr 0x557397a15218 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
| | `-IntegerLiteral 0x557397a151d8 <col:27> 'long long' 9223372036854775807
| `-IntegerLiteral 0x557397a151f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
`-IntegerLiteral 0x557397a15258 <col:44> 'unsigned long long' 1
[B18.6] + [B18.7]
   9: IntegerLiteral 0x557397a152c0 <read.c:195:31> 'int' 10
10
  10: ImplicitCastExpr 0x557397a152e0 <read.c:195:31> 'unsigned long long' <IntegralCast>
`-IntegerLiteral 0x557397a152c0 <col:31> 'int' 10
[B18.9] (ImplicitCastExpr, IntegralCast, unsigned long long)
  11: BinaryOperator 0x557397a152f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, read.c:195:31> 'unsigned long long' '/'
|-ParenExpr 0x557397a152a0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, col:48> 'unsigned long long'
| `-BinaryOperator 0x557397a15278 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' '+'
|   |-BinaryOperator 0x557397a15230 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
|   | |-ImplicitCastExpr 0x557397a15218 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x557397a151d8 <col:27> 'long long' 9223372036854775807
|   | `-IntegerLiteral 0x557397a151f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
|   `-IntegerLiteral 0x557397a15258 <col:44> 'unsigned long long' 1
`-ImplicitCastExpr 0x557397a152e0 <read.c:195:31> 'unsigned long long' <IntegralCast>
  `-IntegerLiteral 0x557397a152c0 <col:31> 'int' 10
([B18.8]) / [B18.10]
  12: BinaryOperator 0x557397a15358 <read.c:195:13, col:33> 'int' '>'
|-ImplicitCastExpr 0x557397a15340 <col:13> 'unsigned long long' <LValueToRValue>
| `-DeclRefExpr 0x557397a151b0 <col:13> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ParenExpr 0x557397a15320 <col:17, col:33> 'unsigned long long'
  `-BinaryOperator 0x557397a152f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, read.c:195:31> 'unsigned long long' '/'
    |-ParenExpr 0x557397a152a0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:20, col:48> 'unsigned long long'
    | `-BinaryOperator 0x557397a15278 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:44> 'unsigned long long' '+'
    |   |-BinaryOperator 0x557397a15230 <<built-in>:40:27, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' '*'
    |   | |-ImplicitCastExpr 0x557397a15218 <<built-in>:40:27> 'unsigned long long' <IntegralCast>
    |   | | `-IntegerLiteral 0x557397a151d8 <col:27> 'long long' 9223372036854775807
    |   | `-IntegerLiteral 0x557397a151f8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:100:39> 'unsigned long long' 2
    |   `-IntegerLiteral 0x557397a15258 <col:44> 'unsigned long long' 1
    `-ImplicitCastExpr 0x557397a152e0 <read.c:195:31> 'unsigned long long' <IntegralCast>
      `-IntegerLiteral 0x557397a152c0 <col:31> 'int' 10
[B18.2] > ([B18.11])
   T: if [B18.12]
   Preds (1): B19
   Succs (2): B17 B16

 [B19]
   1: DeclRefExpr 0x557397a15090 <read.c:194:42> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a150d8 <read.c:194:42> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a15090 <col:42> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B19.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a150b8 <read.c:194:44> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a150f0 <read.c:194:42, col:45> 'const char' lvalue
|-ImplicitCastExpr 0x557397a150d8 <col:42> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a15090 <col:42> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a150b8 <col:44> 'int' 0
[B19.2][[B19.3]]
   5: ImplicitCastExpr 0x557397a15130 <read.c:194:42, col:45> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a150f0 <col:42, col:45> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a150d8 <col:42> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a15090 <col:42> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a150b8 <col:44> 'int' 0
[B19.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a15148 <read.c:194:42, col:45> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a15130 <col:42, col:45> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a150f0 <col:42, col:45> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a150d8 <col:42> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a15090 <col:42> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a150b8 <col:44> 'int' 0
[B19.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a15118 <read.c:194:50> 'int' 57
'9'
   8: BinaryOperator 0x557397a15160 <read.c:194:42, col:50> 'int' '<='
|-ImplicitCastExpr 0x557397a15148 <col:42, col:45> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a15130 <col:42, col:45> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a150f0 <col:42, col:45> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a150d8 <col:42> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a15090 <col:42> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a150b8 <col:44> 'int' 0
`-CharacterLiteral 0x557397a15118 <col:50> 'int' 57
[B19.6] <= [B19.7]
   T: while [B21.5] && [B20.8] && [B19.8]
   Preds (1): B20
   Succs (2): B18 B12

 [B20]
   1: DeclRefExpr 0x557397a14f70 <read.c:194:27> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a14fb8 <read.c:194:27> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a14f70 <col:27> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B20.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a14f98 <read.c:194:29> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a14fd0 <read.c:194:27, col:30> 'const char' lvalue
|-ImplicitCastExpr 0x557397a14fb8 <col:27> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a14f70 <col:27> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a14f98 <col:29> 'int' 0
[B20.2][[B20.3]]
   5: ImplicitCastExpr 0x557397a15010 <read.c:194:27, col:30> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a14fd0 <col:27, col:30> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a14fb8 <col:27> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a14f70 <col:27> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a14f98 <col:29> 'int' 0
[B20.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a15028 <read.c:194:27, col:30> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a15010 <col:27, col:30> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a14fd0 <col:27, col:30> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a14fb8 <col:27> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a14f70 <col:27> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a14f98 <col:29> 'int' 0
[B20.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a14ff8 <read.c:194:35> 'int' 48
'0'
   8: BinaryOperator 0x557397a15040 <read.c:194:27, col:35> 'int' '>='
|-ImplicitCastExpr 0x557397a15028 <col:27, col:30> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a15010 <col:27, col:30> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a14fd0 <col:27, col:30> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a14fb8 <col:27> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a14f70 <col:27> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a14f98 <col:29> 'int' 0
`-CharacterLiteral 0x557397a14ff8 <col:35> 'int' 48
[B20.6] >= [B20.7]
   T: [B21.5] && [B20.8] && ...
   Preds (1): B21
   Succs (2): B19 B12

 [B21]
   1: DeclRefExpr 0x557397a14ec8 <read.c:194:12> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
   2: ImplicitCastExpr 0x557397a14f18 <read.c:194:12> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a14ec8 <col:12> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B21.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: DeclRefExpr 0x557397a14ef0 <read.c:194:19> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
slen
   4: ImplicitCastExpr 0x557397a14f30 <read.c:194:19> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a14ef0 <col:19> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B21.3] (ImplicitCastExpr, LValueToRValue, size_t)
   5: BinaryOperator 0x557397a14f48 <read.c:194:12, col:19> 'int' '<'
|-ImplicitCastExpr 0x557397a14f18 <col:12> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x557397a14ec8 <col:12> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x557397a14f30 <col:19> 'size_t':'unsigned long' <LValueToRValue>
  `-DeclRefExpr 0x557397a14ef0 <col:19> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B21.2] < [B21.4]
   T: [B21.5] && ...
   Preds (2): B13 B26
   Succs (2): B20 B12

 [B22]
   1: IntegerLiteral 0x557397a14de8 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a14e08 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a14de8 <col:20> 'int' 1
-[B22.1]
   3: ReturnStmt 0x557397a14e28 <read.c:191:9, ./read.h:37:20>
`-UnaryOperator 0x557397a14e08 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a14de8 <col:20> 'int' 1
return [B22.2];
   Preds (2): B24 B25
   Succs (1): B0

 [B23]
   1: IntegerLiteral 0x557397a14d30 <read.c:188:18> 'int' 0
0
   2: ImplicitCastExpr 0x557397a14d50 <read.c:188:18> 'long long' <IntegralCast>
`-IntegerLiteral 0x557397a14d30 <col:18> 'int' 0
[B23.1] (ImplicitCastExpr, IntegralCast, long long)
   3: DeclRefExpr 0x557397a14cd0 <read.c:188:10> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   4: ImplicitCastExpr 0x557397a14cf8 <read.c:188:10> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a14cd0 <col:10> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B23.3] (ImplicitCastExpr, LValueToRValue, long long *)
   5: UnaryOperator 0x557397a14d10 <read.c:188:9, col:10> 'long long' lvalue prefix '*'
`-ImplicitCastExpr 0x557397a14cf8 <col:10> 'long long *' <LValueToRValue>
  `-DeclRefExpr 0x557397a14cd0 <col:10> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
*[B23.4]
   6: BinaryOperator 0x557397a14d68 <read.c:188:9, col:18> 'long long' '='
|-UnaryOperator 0x557397a14d10 <col:9, col:10> 'long long' lvalue prefix '*'
| `-ImplicitCastExpr 0x557397a14cf8 <col:10> 'long long *' <LValueToRValue>
|   `-DeclRefExpr 0x557397a14cd0 <col:10> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a14d50 <col:18> 'long long' <IntegralCast>
  `-IntegerLiteral 0x557397a14d30 <col:18> 'int' 0
[B23.5] = [B23.2]
   7: IntegerLiteral 0x557397a14d90 <./read.h:38:18> 'int' 0
0
   8: ReturnStmt 0x557397a14db0 <read.c:189:9, ./read.h:38:18>
`-IntegerLiteral 0x557397a14d90 <col:18> 'int' 0
return [B23.7];
   Preds (1): B24
   Succs (1): B0

 [B24]
   1: DeclRefExpr 0x557397a14bf0 <read.c:187:31> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
slen
   2: ImplicitCastExpr 0x557397a14c38 <read.c:187:31> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a14bf0 <col:31> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B24.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: IntegerLiteral 0x557397a14c18 <read.c:187:39> 'int' 1
1
   4: ImplicitCastExpr 0x557397a14c50 <read.c:187:39> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x557397a14c18 <col:39> 'int' 1
[B24.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: BinaryOperator 0x557397a14c80 <read.c:187:31, col:39> 'int' '=='
|-ImplicitCastExpr 0x557397a14c38 <col:31> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x557397a14bf0 <col:31> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x557397a14c50 <col:39> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x557397a14c18 <col:39> 'int' 1
[B24.2] == [B24.4]
   T: if [B25.8] && [B24.5]
   Preds (1): B25
   Succs (2): B23 B22

 [B25]
   1: DeclRefExpr 0x557397a14af8 <read.c:187:16> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a14b40 <read.c:187:16> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a14af8 <col:16> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B25.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a14b20 <read.c:187:18> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a14b58 <read.c:187:16, col:19> 'const char' lvalue
|-ImplicitCastExpr 0x557397a14b40 <col:16> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a14af8 <col:16> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a14b20 <col:18> 'int' 0
[B25.2][[B25.3]]
   5: ImplicitCastExpr 0x557397a14b98 <read.c:187:16, col:19> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a14b58 <col:16, col:19> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a14b40 <col:16> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a14af8 <col:16> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a14b20 <col:18> 'int' 0
[B25.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a14bb0 <read.c:187:16, col:19> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a14b98 <col:16, col:19> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a14b58 <col:16, col:19> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a14b40 <col:16> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a14af8 <col:16> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a14b20 <col:18> 'int' 0
[B25.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a14b80 <read.c:187:24> 'int' 48
'0'
   8: BinaryOperator 0x557397a14bc8 <read.c:187:16, col:24> 'int' '=='
|-ImplicitCastExpr 0x557397a14bb0 <col:16, col:19> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a14b98 <col:16, col:19> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a14b58 <col:16, col:19> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a14b40 <col:16> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a14af8 <col:16> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a14b20 <col:18> 'int' 0
`-CharacterLiteral 0x557397a14b80 <col:24> 'int' 48
[B25.6] == [B25.7]
   T: [B25.8] && ...
   Preds (2): B27 B28
   Succs (2): B24 B22

 [B26]
   1: DeclRefExpr 0x557397a14908 <read.c:185:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a14950 <read.c:185:13> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B26.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a14930 <read.c:185:15> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a14968 <read.c:185:13, col:16> 'const char' lvalue
|-ImplicitCastExpr 0x557397a14950 <col:13> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a14930 <col:15> 'int' 0
[B26.2][[B26.3]]
   5: ImplicitCastExpr 0x557397a149a8 <read.c:185:13, col:16> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a14968 <col:13, col:16> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a14950 <col:13> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a14930 <col:15> 'int' 0
[B26.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a149c0 <read.c:185:13, col:16> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a149a8 <col:13, col:16> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a14968 <col:13, col:16> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a14950 <col:13> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a14930 <col:15> 'int' 0
[B26.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a14990 <read.c:185:18> 'int' 48
'0'
   8: BinaryOperator 0x557397a149d8 <read.c:185:13, col:18> 'int' '-'
|-ImplicitCastExpr 0x557397a149c0 <col:13, col:16> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a149a8 <col:13, col:16> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a14968 <col:13, col:16> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a14950 <col:13> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a14930 <col:15> 'int' 0
`-CharacterLiteral 0x557397a14990 <col:18> 'int' 48
[B26.6] - [B26.7]
   9: ImplicitCastExpr 0x557397a14a00 <read.c:185:13, col:18> 'unsigned long long' <IntegralCast>
`-BinaryOperator 0x557397a149d8 <col:13, col:18> 'int' '-'
  |-ImplicitCastExpr 0x557397a149c0 <col:13, col:16> 'int' <IntegralCast>
  | `-ImplicitCastExpr 0x557397a149a8 <col:13, col:16> 'char' <LValueToRValue>
  |   `-ArraySubscriptExpr 0x557397a14968 <col:13, col:16> 'const char' lvalue
  |     |-ImplicitCastExpr 0x557397a14950 <col:13> 'const char *' <LValueToRValue>
  |     | `-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  |     `-IntegerLiteral 0x557397a14930 <col:15> 'int' 0
  `-CharacterLiteral 0x557397a14990 <col:18> 'int' 48
[B26.8] (ImplicitCastExpr, IntegralCast, unsigned long long)
  10: DeclRefExpr 0x557397a148e0 <read.c:185:9> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
v
  11: BinaryOperator 0x557397a14a18 <read.c:185:9, col:18> 'unsigned long long' '='
|-DeclRefExpr 0x557397a148e0 <col:9> 'unsigned long long' lvalue Var 0x557397a13d38 'v' 'unsigned long long'
`-ImplicitCastExpr 0x557397a14a00 <col:13, col:18> 'unsigned long long' <IntegralCast>
  `-BinaryOperator 0x557397a149d8 <col:13, col:18> 'int' '-'
    |-ImplicitCastExpr 0x557397a149c0 <col:13, col:16> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x557397a149a8 <col:13, col:16> 'char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x557397a14968 <col:13, col:16> 'const char' lvalue
    |     |-ImplicitCastExpr 0x557397a14950 <col:13> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x557397a14908 <col:13> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    |     `-IntegerLiteral 0x557397a14930 <col:15> 'int' 0
    `-CharacterLiteral 0x557397a14990 <col:18> 'int' 48
[B26.10] = [B26.9]
  12: DeclRefExpr 0x557397a14a40 <read.c:186:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
  13: UnaryOperator 0x557397a14a68 <read.c:186:9, col:10> 'const char *' postfix '++'
`-DeclRefExpr 0x557397a14a40 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B26.12]++
  14: DeclRefExpr 0x557397a14a88 <read.c:186:14> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
  15: UnaryOperator 0x557397a14ab0 <read.c:186:14, col:18> 'size_t':'unsigned long' postfix '++'
`-DeclRefExpr 0x557397a14a88 <col:14> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B26.14]++
   Preds (1): B27
   Succs (1): B21

 [B27]
   1: DeclRefExpr 0x557397a147c0 <read.c:184:24> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a14808 <read.c:184:24> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a147c0 <col:24> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B27.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a147e8 <read.c:184:26> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a14820 <read.c:184:24, col:27> 'const char' lvalue
|-ImplicitCastExpr 0x557397a14808 <col:24> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a147c0 <col:24> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a147e8 <col:26> 'int' 0
[B27.2][[B27.3]]
   5: ImplicitCastExpr 0x557397a14860 <read.c:184:24, col:27> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a14820 <col:24, col:27> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a14808 <col:24> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a147c0 <col:24> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a147e8 <col:26> 'int' 0
[B27.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a14878 <read.c:184:24, col:27> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a14860 <col:24, col:27> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a14820 <col:24, col:27> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a14808 <col:24> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a147c0 <col:24> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a147e8 <col:26> 'int' 0
[B27.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a14848 <read.c:184:32> 'int' 57
'9'
   8: BinaryOperator 0x557397a14890 <read.c:184:24, col:32> 'int' '<='
|-ImplicitCastExpr 0x557397a14878 <col:24, col:27> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a14860 <col:24, col:27> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a14820 <col:24, col:27> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a14808 <col:24> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a147c0 <col:24> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a147e8 <col:26> 'int' 0
`-CharacterLiteral 0x557397a14848 <col:32> 'int' 57
[B27.6] <= [B27.7]
   T: if [B28.8] && [B27.8]
   Preds (1): B28
   Succs (2): B26 B25

 [B28]
   1: DeclRefExpr 0x557397a146c8 <read.c:184:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a14710 <read.c:184:9> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a146c8 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B28.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a146f0 <read.c:184:11> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a14728 <read.c:184:9, col:12> 'const char' lvalue
|-ImplicitCastExpr 0x557397a14710 <col:9> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a146c8 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a146f0 <col:11> 'int' 0
[B28.2][[B28.3]]
   5: ImplicitCastExpr 0x557397a14768 <read.c:184:9, col:12> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a14728 <col:9, col:12> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a14710 <col:9> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a146c8 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a146f0 <col:11> 'int' 0
[B28.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a14780 <read.c:184:9, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a14768 <col:9, col:12> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a14728 <col:9, col:12> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a14710 <col:9> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a146c8 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a146f0 <col:11> 'int' 0
[B28.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a14750 <read.c:184:17> 'int' 49
'1'
   8: BinaryOperator 0x557397a14798 <read.c:184:9, col:17> 'int' '>='
|-ImplicitCastExpr 0x557397a14780 <col:9, col:12> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a14768 <col:9, col:12> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a14728 <col:9, col:12> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a14710 <col:9> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a146c8 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a146f0 <col:11> 'int' 0
`-CharacterLiteral 0x557397a14750 <col:17> 'int' 49
[B28.6] >= [B28.7]
   T: [B28.8] && ...
   Preds (2): B30 B31
   Succs (2): B27 B25

 [B29]
   1: IntegerLiteral 0x557397a145d0 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a145f0 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a145d0 <col:20> 'int' 1
-[B29.1]
   3: ReturnStmt 0x557397a14610 <read.c:180:13, ./read.h:37:20>
`-UnaryOperator 0x557397a145f0 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a145d0 <col:20> 'int' 1
return [B29.2];
   Preds (1): B30
   Succs (1): B0

 [B30]
   1: IntegerLiteral 0x557397a14450 <read.c:175:20> 'int' 1
1
   2: DeclRefExpr 0x557397a14428 <read.c:175:9> 'int' lvalue Var 0x557397a13c88 'negative' 'int'
negative
   3: BinaryOperator 0x557397a14470 <read.c:175:9, col:20> 'int' '='
|-DeclRefExpr 0x557397a14428 <col:9> 'int' lvalue Var 0x557397a13c88 'negative' 'int'
`-IntegerLiteral 0x557397a14450 <col:20> 'int' 1
[B30.2] = [B30.1]
   4: DeclRefExpr 0x557397a14498 <read.c:176:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   5: UnaryOperator 0x557397a144c0 <read.c:176:9, col:10> 'const char *' postfix '++'
`-DeclRefExpr 0x557397a14498 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B30.4]++
   6: DeclRefExpr 0x557397a144e0 <read.c:176:14> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
   7: UnaryOperator 0x557397a14508 <read.c:176:14, col:18> 'size_t':'unsigned long' postfix '++'
`-DeclRefExpr 0x557397a144e0 <col:14> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B30.6]++
   8: DeclRefExpr 0x557397a14528 <read.c:179:13> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
   9: ImplicitCastExpr 0x557397a14578 <read.c:179:13> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a14528 <col:13> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B30.8] (ImplicitCastExpr, LValueToRValue, size_t)
  10: DeclRefExpr 0x557397a14550 <read.c:179:21> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
slen
  11: ImplicitCastExpr 0x557397a14590 <read.c:179:21> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a14550 <col:21> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B30.10] (ImplicitCastExpr, LValueToRValue, size_t)
  12: BinaryOperator 0x557397a145a8 <read.c:179:13, col:21> 'int' '=='
|-ImplicitCastExpr 0x557397a14578 <col:13> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x557397a14528 <col:13> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x557397a14590 <col:21> 'size_t':'unsigned long' <LValueToRValue>
  `-DeclRefExpr 0x557397a14550 <col:21> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B30.9] == [B30.11]
   T: if [B30.12]
   Preds (1): B31
   Succs (2): B29 B28

 [B31]
   1: DeclRefExpr 0x557397a14330 <read.c:174:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a14378 <read.c:174:9> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a14330 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B31.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a14358 <read.c:174:11> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a14390 <read.c:174:9, col:12> 'const char' lvalue
|-ImplicitCastExpr 0x557397a14378 <col:9> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a14330 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a14358 <col:11> 'int' 0
[B31.2][[B31.3]]
   5: ImplicitCastExpr 0x557397a143d0 <read.c:174:9, col:12> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a14390 <col:9, col:12> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a14378 <col:9> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a14330 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a14358 <col:11> 'int' 0
[B31.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a143e8 <read.c:174:9, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a143d0 <col:9, col:12> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a14390 <col:9, col:12> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a14378 <col:9> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a14330 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a14358 <col:11> 'int' 0
[B31.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a143b8 <read.c:174:17> 'int' 45
'-'
   8: BinaryOperator 0x557397a14400 <read.c:174:9, col:17> 'int' '=='
|-ImplicitCastExpr 0x557397a143e8 <col:9, col:12> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a143d0 <col:9, col:12> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a14390 <col:9, col:12> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a14378 <col:9> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a14330 <col:9> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a14358 <col:11> 'int' 0
`-CharacterLiteral 0x557397a143b8 <col:17> 'int' 45
[B31.6] == [B31.7]
   T: if [B31.8]
   Preds (2): B35 B36
   Succs (2): B30 B28

 [B32]
   1: IntegerLiteral 0x557397a142a0 <./read.h:38:18> 'int' 0
0
   2: ReturnStmt 0x557397a142c0 <read.c:171:9, ./read.h:38:18>
`-IntegerLiteral 0x557397a142a0 <col:18> 'int' 0
return [B32.1];
   Preds (2): B33 B34
   Succs (1): B0

 [B33]
   1: IntegerLiteral 0x557397a14208 <read.c:170:37> 'int' 0
0
   2: ImplicitCastExpr 0x557397a14228 <read.c:170:37> 'long long' <IntegralCast>
`-IntegerLiteral 0x557397a14208 <col:37> 'int' 0
[B33.1] (ImplicitCastExpr, IntegralCast, long long)
   3: DeclRefExpr 0x557397a141a8 <read.c:170:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   4: ImplicitCastExpr 0x557397a141d0 <read.c:170:29> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a141a8 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B33.3] (ImplicitCastExpr, LValueToRValue, long long *)
   5: UnaryOperator 0x557397a141e8 <read.c:170:28, col:29> 'long long' lvalue prefix '*'
`-ImplicitCastExpr 0x557397a141d0 <col:29> 'long long *' <LValueToRValue>
  `-DeclRefExpr 0x557397a141a8 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
*[B33.4]
   6: BinaryOperator 0x557397a14240 <read.c:170:28, col:37> 'long long' '='
|-UnaryOperator 0x557397a141e8 <col:28, col:29> 'long long' lvalue prefix '*'
| `-ImplicitCastExpr 0x557397a141d0 <col:29> 'long long *' <LValueToRValue>
|   `-DeclRefExpr 0x557397a141a8 <col:29> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a14228 <col:37> 'long long' <IntegralCast>
  `-IntegerLiteral 0x557397a14208 <col:37> 'int' 0
[B33.5] = [B33.2]
   Preds (1): B34
   Succs (1): B32

 [B34]
   1: DeclRefExpr 0x557397a140a8 <read.c:170:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
value
   2: ImplicitCastExpr 0x557397a14150 <read.c:170:13> 'long long *' <LValueToRValue>
`-DeclRefExpr 0x557397a140a8 <col:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
[B34.1] (ImplicitCastExpr, LValueToRValue, long long *)
   3: IntegerLiteral 0x557397a140d0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   4: CStyleCastExpr 0x557397a14108 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x557397a140d0 <col:24> 'int' 0
(void *)[B34.3] (CStyleCastExpr, NullToPointer, void *)
   5: ImplicitCastExpr 0x557397a14168 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'long long *' <BitCast>
`-ParenExpr 0x557397a14130 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x557397a14108 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x557397a140d0 <col:24> 'int' 0
([B34.4]) (ImplicitCastExpr, BitCast, long long *)
   6: BinaryOperator 0x557397a14180 <read.c:170:13, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '!='
|-ImplicitCastExpr 0x557397a14150 <read.c:170:13> 'long long *' <LValueToRValue>
| `-DeclRefExpr 0x557397a140a8 <col:13> 'long long *' lvalue ParmVar 0x557397a138f0 'value' 'long long *'
`-ImplicitCastExpr 0x557397a14168 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'long long *' <BitCast>
  `-ParenExpr 0x557397a14130 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x557397a14108 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x557397a140d0 <col:24> 'int' 0
[B34.2] != [B34.5]
   T: if [B34.6]
   Preds (1): B35
   Succs (2): B33 B32

 [B35]
   1: DeclRefExpr 0x557397a13f88 <read.c:169:22> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
p
   2: ImplicitCastExpr 0x557397a13fd0 <read.c:169:22> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a13f88 <col:22> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
[B35.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x557397a13fb0 <read.c:169:24> 'int' 0
0
   4: ArraySubscriptExpr 0x557397a13fe8 <read.c:169:22, col:25> 'const char' lvalue
|-ImplicitCastExpr 0x557397a13fd0 <col:22> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x557397a13f88 <col:22> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
`-IntegerLiteral 0x557397a13fb0 <col:24> 'int' 0
[B35.2][[B35.3]]
   5: ImplicitCastExpr 0x557397a14028 <read.c:169:22, col:25> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x557397a13fe8 <col:22, col:25> 'const char' lvalue
  |-ImplicitCastExpr 0x557397a13fd0 <col:22> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x557397a13f88 <col:22> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
  `-IntegerLiteral 0x557397a13fb0 <col:24> 'int' 0
[B35.4] (ImplicitCastExpr, LValueToRValue, char)
   6: ImplicitCastExpr 0x557397a14040 <read.c:169:22, col:25> 'int' <IntegralCast>
`-ImplicitCastExpr 0x557397a14028 <col:22, col:25> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x557397a13fe8 <col:22, col:25> 'const char' lvalue
    |-ImplicitCastExpr 0x557397a13fd0 <col:22> 'const char *' <LValueToRValue>
    | `-DeclRefExpr 0x557397a13f88 <col:22> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
    `-IntegerLiteral 0x557397a13fb0 <col:24> 'int' 0
[B35.5] (ImplicitCastExpr, IntegralCast, int)
   7: CharacterLiteral 0x557397a14010 <read.c:169:30> 'int' 48
'0'
   8: BinaryOperator 0x557397a14058 <read.c:169:22, col:30> 'int' '=='
|-ImplicitCastExpr 0x557397a14040 <col:22, col:25> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x557397a14028 <col:22, col:25> 'char' <LValueToRValue>
|   `-ArraySubscriptExpr 0x557397a13fe8 <col:22, col:25> 'const char' lvalue
|     |-ImplicitCastExpr 0x557397a13fd0 <col:22> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557397a13f88 <col:22> 'const char *' lvalue Var 0x557397a13af8 'p' 'const char *'
|     `-IntegerLiteral 0x557397a13fb0 <col:24> 'int' 0
`-CharacterLiteral 0x557397a14010 <col:30> 'int' 48
[B35.6] == [B35.7]
   T: if [B36.5] && [B35.8]
   Preds (1): B36
   Succs (2): B34 B31

 [B36]
   1: DeclRefExpr 0x557397a13ee8 <read.c:169:9> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
slen
   2: ImplicitCastExpr 0x557397a13f30 <read.c:169:9> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a13ee8 <col:9> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B36.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: IntegerLiteral 0x557397a13f10 <read.c:169:17> 'int' 1
1
   4: ImplicitCastExpr 0x557397a13f48 <read.c:169:17> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x557397a13f10 <col:17> 'int' 1
[B36.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: BinaryOperator 0x557397a13f60 <read.c:169:9, col:17> 'int' '=='
|-ImplicitCastExpr 0x557397a13f30 <col:9> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x557397a13ee8 <col:9> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x557397a13f48 <col:17> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x557397a13f10 <col:17> 'int' 1
[B36.2] == [B36.4]
   T: [B36.5] && ...
   Preds (1): B38
   Succs (2): B35 B31

 [B37]
   1: IntegerLiteral 0x557397a13e58 <./read.h:37:20> 'int' 1
1
   2: UnaryOperator 0x557397a13e78 <./read.h:37:19, col:20> 'int' prefix '-'
`-IntegerLiteral 0x557397a13e58 <col:20> 'int' 1
-[B37.1]
   3: ReturnStmt 0x557397a13e98 <read.c:166:9, ./read.h:37:20>
`-UnaryOperator 0x557397a13e78 <col:19, col:20> 'int' prefix '-'
  `-IntegerLiteral 0x557397a13e58 <col:20> 'int' 1
return [B37.2];
   Preds (1): B38
   Succs (1): B0

 [B38]
   1: DeclRefExpr 0x557397a13b58 <read.c:160:21> 'const char *' lvalue ParmVar 0x557397a137d8 's' 'const char *'
s
   2: ImplicitCastExpr 0x557397a13b80 <read.c:160:21> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x557397a13b58 <col:21> 'const char *' lvalue ParmVar 0x557397a137d8 's' 'const char *'
[B38.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: DeclStmt 0x557397a13b98 <read.c:160:5, col:22>col:17
`-VarDecl 0x557397a13af8 <col:5, col:21> col:17 used p 'const char *' cinit
  `-ImplicitCastExpr 0x557397a13b80 <col:21> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x557397a13b58 <col:21> 'const char *' lvalue ParmVar 0x557397a137d8 's' 'const char *'
const char *p = s;
   4: IntegerLiteral 0x557397a13c20 <read.c:161:19> 'int' 0
0
   5: ImplicitCastExpr 0x557397a13c40 <read.c:161:19> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x557397a13c20 <col:19> 'int' 0
[B38.4] (ImplicitCastExpr, IntegralCast, size_t)
   6: DeclStmt 0x557397a13c58 <read.c:161:5, col:20>col:12
`-VarDecl 0x557397a13bc0 <col:5, col:19> col:12 used plen 'size_t':'unsigned long' cinit
  `-ImplicitCastExpr 0x557397a13c40 <col:19> 'size_t':'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x557397a13c20 <col:19> 'int' 0
size_t plen = 0;
   7: IntegerLiteral 0x557397a13ce8 <read.c:162:20> 'int' 0
0
   8: DeclStmt 0x557397a13d08 <read.c:162:5, col:21>col:9
`-VarDecl 0x557397a13c88 <col:5, col:20> col:9 used negative 'int' cinit
  `-IntegerLiteral 0x557397a13ce8 <col:20> 'int' 0
int negative = 0;
   9: DeclStmt 0x557397a13d98 <read.c:163:5, col:25>col:24
`-VarDecl 0x557397a13d38 <col:5, col:24> col:24 used v 'unsigned long long'
unsigned long long v;
  10: DeclRefExpr 0x557397a13db0 <read.c:165:9> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
plen
  11: ImplicitCastExpr 0x557397a13e00 <read.c:165:9> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a13db0 <col:9> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
[B38.10] (ImplicitCastExpr, LValueToRValue, size_t)
  12: DeclRefExpr 0x557397a13dd8 <read.c:165:17> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
slen
  13: ImplicitCastExpr 0x557397a13e18 <read.c:165:17> 'size_t':'unsigned long' <LValueToRValue>
`-DeclRefExpr 0x557397a13dd8 <col:17> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B38.12] (ImplicitCastExpr, LValueToRValue, size_t)
  14: BinaryOperator 0x557397a13e30 <read.c:165:9, col:17> 'int' '=='
|-ImplicitCastExpr 0x557397a13e00 <col:9> 'size_t':'unsigned long' <LValueToRValue>
| `-DeclRefExpr 0x557397a13db0 <col:9> 'size_t':'unsigned long' lvalue Var 0x557397a13bc0 'plen' 'size_t':'unsigned long'
`-ImplicitCastExpr 0x557397a13e18 <col:17> 'size_t':'unsigned long' <LValueToRValue>
  `-DeclRefExpr 0x557397a13dd8 <col:17> 'size_t':'unsigned long' lvalue ParmVar 0x557397a13848 'slen' 'size_t':'unsigned long'
[B38.11] == [B38.13]
   T: if [B38.14]
   Preds (1): B39
   Succs (2): B37 B36

 [B0 (EXIT)]
   Preds (11): B1 B4 B8 B11 B15 B17 B22 B23
      B29 B32 B37
