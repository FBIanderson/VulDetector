void luaK_goiftrue(FuncState *fs, expdesc *e)
 [B8 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x5637768dbf58 <lcode.c:557:3> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
   2: ImplicitCastExpr 0x5637768dc068 <lcode.c:557:3> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dbf58 <col:3> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
   3: DeclRefExpr 0x5637768dbf80 <lcode.c:557:15> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768dc0c0 <lcode.c:557:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dbf80 <col:15> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768dbfa8 <lcode.c:557:20> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768dbfd0 <lcode.c:557:20> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dbfa8 <col:20> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768dbfe8 <lcode.c:557:20, col:23> 'int' lvalue ->f 0x56377687d8f0
`-ImplicitCastExpr 0x5637768dbfd0 <col:20> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dbfa8 <col:20> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.6]->f
   8: UnaryOperator 0x5637768dc020 <lcode.c:557:19, col:23> 'int *' prefix '&'
`-MemberExpr 0x5637768dbfe8 <col:20, col:23> 'int' lvalue ->f 0x56377687d8f0
  `-ImplicitCastExpr 0x5637768dbfd0 <col:20> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768dbfa8 <col:20> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
&[B1.7]
   9: DeclRefExpr 0x5637768dc040 <lcode.c:557:26> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
pc
  10: ImplicitCastExpr 0x5637768dc0d8 <lcode.c:557:26> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768dc040 <col:26> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
[B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: CallExpr 0x5637768dc080 <lcode.c:557:3, col:28> 'void'
|-ImplicitCastExpr 0x5637768dc068 <col:3> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dbf58 <col:3> 'void (FuncState *, int *, int)' Function 0x5637768bc7c0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x5637768dc0c0 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dbf80 <col:15> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
|-UnaryOperator 0x5637768dc020 <col:19, col:23> 'int *' prefix '&'
| `-MemberExpr 0x5637768dbfe8 <col:20, col:23> 'int' lvalue ->f 0x56377687d8f0
|   `-ImplicitCastExpr 0x5637768dbfd0 <col:20> 'expdesc *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768dbfa8 <col:20> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768dc0d8 <col:26> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768dc040 <col:26> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
[B1.2]([B1.4], [B1.8], [B1.10])
  12: DeclRefExpr 0x5637768dc0f0 <lcode.c:558:3> 'void (FuncState *, int)' Function 0x5637768bc2c8 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  13: ImplicitCastExpr 0x5637768dc1b8 <lcode.c:558:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dc0f0 <col:3> 'void (FuncState *, int)' Function 0x5637768bc2c8 'luaK_patchtohere' 'void (FuncState *, int)'
[B1.12] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  14: DeclRefExpr 0x5637768dc118 <lcode.c:558:20> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
fs
  15: ImplicitCastExpr 0x5637768dc208 <lcode.c:558:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dc118 <col:20> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
[B1.14] (ImplicitCastExpr, LValueToRValue, FuncState *)
  16: DeclRefExpr 0x5637768dc140 <lcode.c:558:24> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
  17: ImplicitCastExpr 0x5637768dc168 <lcode.c:558:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dc140 <col:24> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.16] (ImplicitCastExpr, LValueToRValue, expdesc *)
  18: MemberExpr 0x5637768dc180 <lcode.c:558:24, col:27> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768dc168 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dc140 <col:24> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.17]->t
  19: ImplicitCastExpr 0x5637768dc220 <lcode.c:558:24, col:27> 'int' <LValueToRValue>
`-MemberExpr 0x5637768dc180 <col:24, col:27> 'int' lvalue ->t 0x56377687d890
  `-ImplicitCastExpr 0x5637768dc168 <col:24> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768dc140 <col:24> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: CallExpr 0x5637768dc1d0 <lcode.c:558:3, col:28> 'void'
|-ImplicitCastExpr 0x5637768dc1b8 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dc0f0 <col:3> 'void (FuncState *, int)' Function 0x5637768bc2c8 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768dc208 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dc118 <col:20> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768dc220 <col:24, col:27> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768dc180 <col:24, col:27> 'int' lvalue ->t 0x56377687d890
    `-ImplicitCastExpr 0x5637768dc168 <col:24> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768dc140 <col:24> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.13]([B1.15], [B1.19])
  21: IntegerLiteral 0x5637768dc2b0 <./lcode.h:20:19> 'int' 1
1
  22: UnaryOperator 0x5637768dc2d0 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768dc2b0 <col:19> 'int' 1
-[B1.21]
  23: DeclRefExpr 0x5637768dc238 <lcode.c:559:3> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
  24: ImplicitCastExpr 0x5637768dc260 <lcode.c:559:3> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dc238 <col:3> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.23] (ImplicitCastExpr, LValueToRValue, expdesc *)
  25: MemberExpr 0x5637768dc278 <lcode.c:559:3, col:6> 'int' lvalue ->t 0x56377687d890
`-ImplicitCastExpr 0x5637768dc260 <col:3> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dc238 <col:3> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B1.24]->t
  26: BinaryOperator 0x5637768dc310 <lcode.c:559:3, ./lcode.h:20:20> 'int' '='
|-MemberExpr 0x5637768dc278 <lcode.c:559:3, col:6> 'int' lvalue ->t 0x56377687d890
| `-ImplicitCastExpr 0x5637768dc260 <col:3> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768dc238 <col:3> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
`-ParenExpr 0x5637768dc2f0 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768dc2d0 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768dc2b0 <col:19> 'int' 1
[B1.25] = ([B1.22])
   Preds (3): B3 B4 B7
   Succs (1): B0

 [B2]
   1: DeclStmt 0x5637768db608 <lcode.c:540:3, col:9>col:7
`-VarDecl 0x5637768db5a8 <col:3, col:7> col:7 used pc 'int'
int pc;
   2: DeclRefExpr 0x5637768db620 <lcode.c:541:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
luaK_dischargevars
   3: ImplicitCastExpr 0x5637768db698 <lcode.c:541:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768db620 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
[B2.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   4: DeclRefExpr 0x5637768db648 <lcode.c:541:22> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
fs
   5: ImplicitCastExpr 0x5637768db6e8 <lcode.c:541:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768db648 <col:22> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
[B2.4] (ImplicitCastExpr, LValueToRValue, FuncState *)
   6: DeclRefExpr 0x5637768db670 <lcode.c:541:26> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
   7: ImplicitCastExpr 0x5637768db700 <lcode.c:541:26> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768db670 <col:26> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B2.6] (ImplicitCastExpr, LValueToRValue, expdesc *)
   8: CallExpr 0x5637768db6b0 <lcode.c:541:3, col:27> 'void'
|-ImplicitCastExpr 0x5637768db698 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768db620 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768ca7b0 'luaK_dischargevars' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768db6e8 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768db648 <col:22> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768db700 <col:26> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768db670 <col:26> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B2.3]([B2.5], [B2.7])
   9: DeclRefExpr 0x5637768db718 <lcode.c:542:11> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
  10: ImplicitCastExpr 0x5637768db740 <lcode.c:542:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768db718 <col:11> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B2.9] (ImplicitCastExpr, LValueToRValue, expdesc *)
  11: MemberExpr 0x5637768db758 <lcode.c:542:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768db740 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768db718 <col:11> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B2.10]->k
  12: ImplicitCastExpr 0x5637768db790 <lcode.c:542:11, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768db758 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768db740 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768db718 <col:11> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B2.11] (ImplicitCastExpr, LValueToRValue, expkind)
  13: ImplicitCastExpr 0x5637768db7a8 <lcode.c:542:11, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768db790 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768db758 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768db740 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768db718 <col:11> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B2.12] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.13]
   Preds (1): B8
   Succs (5): B4 B5 B6 B7 B3

 [B3]
  default:
   1: DeclRefExpr 0x5637768dbce8 <lcode.c:553:12> 'int (FuncState *, expdesc *, int)' Function 0x5637768d9308 'jumponcond' 'int (FuncState *, expdesc *, int)'
jumponcond
   2: ImplicitCastExpr 0x5637768dbdd8 <lcode.c:553:12> 'int (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dbce8 <col:12> 'int (FuncState *, expdesc *, int)' Function 0x5637768d9308 'jumponcond' 'int (FuncState *, expdesc *, int)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *, int))
   3: DeclRefExpr 0x5637768dbd10 <lcode.c:553:23> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768dbe30 <lcode.c:553:23> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dbd10 <col:23> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768dbd38 <lcode.c:553:27> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768dbe48 <lcode.c:553:27> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dbd38 <col:27> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B3.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: IntegerLiteral 0x5637768dbd60 <lcode.c:553:30> 'int' 0
0
   8: CallExpr 0x5637768dbdf0 <lcode.c:553:12, col:31> 'int'
|-ImplicitCastExpr 0x5637768dbdd8 <col:12> 'int (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dbce8 <col:12> 'int (FuncState *, expdesc *, int)' Function 0x5637768d9308 'jumponcond' 'int (FuncState *, expdesc *, int)'
|-ImplicitCastExpr 0x5637768dbe30 <col:23> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dbd10 <col:23> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768dbe48 <col:27> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dbd38 <col:27> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
`-IntegerLiteral 0x5637768dbd60 <col:30> 'int' 0
[B3.2]([B3.4], [B3.6], [B3.7])
   9: DeclRefExpr 0x5637768dbcc0 <lcode.c:553:7> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
pc
  10: BinaryOperator 0x5637768dbe60 <lcode.c:553:7, col:31> 'int' '='
|-DeclRefExpr 0x5637768dbcc0 <col:7> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
`-CallExpr 0x5637768dbdf0 <col:12, col:31> 'int'
  |-ImplicitCastExpr 0x5637768dbdd8 <col:12> 'int (*)(FuncState *, expdesc *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768dbce8 <col:12> 'int (FuncState *, expdesc *, int)' Function 0x5637768d9308 'jumponcond' 'int (FuncState *, expdesc *, int)'
  |-ImplicitCastExpr 0x5637768dbe30 <col:23> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768dbd10 <col:23> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768dbe48 <col:27> 'expdesc *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768dbd38 <col:27> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
  `-IntegerLiteral 0x5637768dbd60 <col:30> 'int' 0
[B3.9] = [B3.8]
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B4]
  case VJMP:
   1: DeclRefExpr 0x5637768dba48 <lcode.c:548:7> 'void (FuncState *, expdesc *)' Function 0x5637768d80f0 'invertjump' 'void (FuncState *, expdesc *)'
invertjump
   2: ImplicitCastExpr 0x5637768dbac0 <lcode.c:548:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768dba48 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768d80f0 'invertjump' 'void (FuncState *, expdesc *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768dba70 <lcode.c:548:18> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768dbb10 <lcode.c:548:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768dba70 <col:18> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768dba98 <lcode.c:548:22> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768dbb28 <lcode.c:548:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dba98 <col:22> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768dbad8 <lcode.c:548:7, col:23> 'void'
|-ImplicitCastExpr 0x5637768dbac0 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768dba48 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768d80f0 'invertjump' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768dbb10 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768dba70 <col:18> 'FuncState *' lvalue ParmVar 0x5637768db398 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768dbb28 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dba98 <col:22> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.2]([B4.4], [B4.6])
   8: DeclRefExpr 0x5637768dbb68 <lcode.c:549:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
e
   9: ImplicitCastExpr 0x5637768dbb90 <lcode.c:549:12> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768dbb68 <col:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: MemberExpr 0x5637768dbba8 <lcode.c:549:12, col:15> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768dbb90 <col:12> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768dbb68 <col:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.9]->u
  11: MemberExpr 0x5637768dbbe0 <lcode.c:549:12, col:17> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768dbba8 <col:12, col:15> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768dbb90 <col:12> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768dbb68 <col:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.10].s
  12: MemberExpr 0x5637768dbc18 <lcode.c:549:12, col:19> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768dbbe0 <col:12, col:17> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768dbba8 <col:12, col:15> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768dbb90 <col:12> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768dbb68 <col:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.11].info
  13: ImplicitCastExpr 0x5637768dbc50 <lcode.c:549:12, col:19> 'int' <LValueToRValue>
`-MemberExpr 0x5637768dbc18 <col:12, col:19> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768dbbe0 <col:12, col:17> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768dbba8 <col:12, col:15> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768dbb90 <col:12> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768dbb68 <col:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.12] (ImplicitCastExpr, LValueToRValue, int)
  14: DeclRefExpr 0x5637768dbb40 <lcode.c:549:7> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
pc
  15: BinaryOperator 0x5637768dbc68 <lcode.c:549:7, col:19> 'int' '='
|-DeclRefExpr 0x5637768dbb40 <col:7> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
`-ImplicitCastExpr 0x5637768dbc50 <col:12, col:19> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768dbc18 <col:12, col:19> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768dbbe0 <col:12, col:17> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768dbba8 <col:12, col:15> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768dbb90 <col:12> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768dbb68 <col:12> 'expdesc *' lvalue ParmVar 0x5637768db408 'e' 'expdesc *'
[B4.14] = [B4.13]
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B5]
  case VK:
   Preds (1): B2
   Succs (1): B6

 [B6]
  case VKNUM:
   Preds (2): B5 B2
   Succs (1): B7

 [B7]
  case VTRUE:
   1: IntegerLiteral 0x5637768db938 <./lcode.h:20:19> 'int' 1
1
   2: UnaryOperator 0x5637768db958 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768db938 <col:19> 'int' 1
-[B7.1]
   3: DeclRefExpr 0x5637768db910 <lcode.c:544:7> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
pc
   4: BinaryOperator 0x5637768db998 <lcode.c:544:7, ./lcode.h:20:20> 'int' '='
|-DeclRefExpr 0x5637768db910 <lcode.c:544:7> 'int' lvalue Var 0x5637768db5a8 'pc' 'int'
`-ParenExpr 0x5637768db978 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768db958 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768db938 <col:19> 'int' 1
[B7.3] = ([B7.2])
   T: break;
   Preds (2): B2 B6
   Succs (1): B1

 [B0 (EXIT)]
   Preds (1): B1
