void luaK_concat(FuncState *fs, int *l1, int l2)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: DeclRefExpr 0x5637768bcfb8 <lcode.c:194:5> 'void (FuncState *, int, int)' Function 0x5637768af0d8 'fixjump' 'void (FuncState *, int, int)'
fixjump
   2: ImplicitCastExpr 0x5637768bd058 <lcode.c:194:5> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768bcfb8 <col:5> 'void (FuncState *, int, int)' Function 0x5637768af0d8 'fixjump' 'void (FuncState *, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
   3: DeclRefExpr 0x5637768bcfe0 <lcode.c:194:13> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768bd0b0 <lcode.c:194:13> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bcfe0 <col:13> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768bd008 <lcode.c:194:17> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768bd0c8 <lcode.c:194:17> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bd008 <col:17> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x5637768bd030 <lcode.c:194:23> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
l2
   8: ImplicitCastExpr 0x5637768bd0e0 <lcode.c:194:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bd030 <col:23> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x5637768bd070 <lcode.c:194:5, col:25> 'void'
|-ImplicitCastExpr 0x5637768bd058 <col:5> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768bcfb8 <col:5> 'void (FuncState *, int, int)' Function 0x5637768af0d8 'fixjump' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x5637768bd0b0 <col:13> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768bcfe0 <col:13> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768bd0c8 <col:17> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bd008 <col:17> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
`-ImplicitCastExpr 0x5637768bd0e0 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bd030 <col:23> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
[B1.2]([B1.4], [B1.6], [B1.8])
   Preds (1): B4
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: DeclRefExpr 0x5637768bcf30 <lcode.c:193:14> 'int' lvalue Var 0x5637768bcc88 'next' 'int'
next
   2: ImplicitCastExpr 0x5637768bcf58 <lcode.c:193:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bcf30 <col:14> 'int' lvalue Var 0x5637768bcc88 'next' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768bcf08 <lcode.c:193:7> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
list
   4: BinaryOperator 0x5637768bcf70 <lcode.c:193:7, col:14> 'int' '='
|-DeclRefExpr 0x5637768bcf08 <col:7> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
`-ImplicitCastExpr 0x5637768bcf58 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bcf30 <col:14> 'int' lvalue Var 0x5637768bcc88 'next' 'int'
[B3.3] = [B3.2]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x5637768bcd40 <lcode.c:192:20> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
getjump
   2: ImplicitCastExpr 0x5637768bcdb8 <lcode.c:192:20> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768bcd40 <col:20> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768bcd68 <lcode.c:192:28> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768bce08 <lcode.c:192:28> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bcd68 <col:28> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768bcd90 <lcode.c:192:32> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
list
   6: ImplicitCastExpr 0x5637768bce20 <lcode.c:192:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bcd90 <col:32> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x5637768bcdd0 <lcode.c:192:20, col:36> 'int'
|-ImplicitCastExpr 0x5637768bcdb8 <col:20> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768bcd40 <col:20> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
|-ImplicitCastExpr 0x5637768bce08 <col:28> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768bcd68 <col:28> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768bce20 <col:32> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bcd90 <col:32> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
[B4.2]([B4.4], [B4.6])
   8: DeclRefExpr 0x5637768bcd00 <lcode.c:192:13> 'int' lvalue Var 0x5637768bcc88 'next' 'int'
next
   9: BinaryOperator 0x5637768bce38 <lcode.c:192:13, col:36> 'int' '='
|-DeclRefExpr 0x5637768bcd00 <col:13> 'int' lvalue Var 0x5637768bcc88 'next' 'int'
`-CallExpr 0x5637768bcdd0 <col:20, col:36> 'int'
  |-ImplicitCastExpr 0x5637768bcdb8 <col:20> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768bcd40 <col:20> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
  |-ImplicitCastExpr 0x5637768bce08 <col:28> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768bcd68 <col:28> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768bce20 <col:32> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768bcd90 <col:32> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
[B4.8] = [B4.7]
  10: IntegerLiteral 0x5637768bce80 <./lcode.h:20:19> 'int' 1
1
  11: UnaryOperator 0x5637768bcea0 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768bce80 <col:19> 'int' 1
-[B4.10]
  12: BinaryOperator 0x5637768bcee0 <lcode.c:192:12, ./lcode.h:20:20> 'int' '!='
|-ParenExpr 0x5637768bce60 <lcode.c:192:12, col:37> 'int'
| `-BinaryOperator 0x5637768bce38 <col:13, col:36> 'int' '='
|   |-DeclRefExpr 0x5637768bcd00 <col:13> 'int' lvalue Var 0x5637768bcc88 'next' 'int'
|   `-CallExpr 0x5637768bcdd0 <col:20, col:36> 'int'
|     |-ImplicitCastExpr 0x5637768bcdb8 <col:20> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5637768bcd40 <col:20> 'int (FuncState *, int)' Function 0x5637768b2fa8 'getjump' 'int (FuncState *, int)'
|     |-ImplicitCastExpr 0x5637768bce08 <col:28> 'FuncState *' <LValueToRValue>
|     | `-DeclRefExpr 0x5637768bcd68 <col:28> 'FuncState *' lvalue ParmVar 0x5637768bc638 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768bce20 <col:32> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5637768bcd90 <col:32> 'int' lvalue Var 0x5637768bcb80 'list' 'int'
`-ParenExpr 0x5637768bcec0 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768bcea0 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768bce80 <col:19> 'int' 1
([B4.9]) != ([B4.11])
   T: while [B4.12]
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: DeclRefExpr 0x5637768bcbe0 <lcode.c:190:17> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
l1
   2: ImplicitCastExpr 0x5637768bcc08 <lcode.c:190:17> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5637768bcbe0 <col:17> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
[B5.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: UnaryOperator 0x5637768bcc20 <lcode.c:190:16, col:17> 'int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768bcc08 <col:17> 'int *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bcbe0 <col:17> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
*[B5.2]
   4: ImplicitCastExpr 0x5637768bcc40 <lcode.c:190:16, col:17> 'int' <LValueToRValue>
`-UnaryOperator 0x5637768bcc20 <col:16, col:17> 'int' lvalue prefix '*'
  `-ImplicitCastExpr 0x5637768bcc08 <col:17> 'int *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bcbe0 <col:17> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
[B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclStmt 0x5637768bcc58 <lcode.c:190:5, col:19>col:9
`-VarDecl 0x5637768bcb80 <col:5, col:17> col:9 used list 'int' cinit
  `-ImplicitCastExpr 0x5637768bcc40 <col:16, col:17> 'int' <LValueToRValue>
    `-UnaryOperator 0x5637768bcc20 <col:16, col:17> 'int' lvalue prefix '*'
      `-ImplicitCastExpr 0x5637768bcc08 <col:17> 'int *' <LValueToRValue>
        `-DeclRefExpr 0x5637768bcbe0 <col:17> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
int list = *l1;
   6: DeclStmt 0x5637768bcce8 <lcode.c:191:5, col:13>col:9
`-VarDecl 0x5637768bcc88 <col:5, col:9> col:9 used next 'int'
int next;
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x5637768bcb00 <lcode.c:188:11> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
l2
   2: ImplicitCastExpr 0x5637768bcb28 <lcode.c:188:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bcb00 <col:11> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768bcaa0 <lcode.c:188:6> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
l1
   4: ImplicitCastExpr 0x5637768bcac8 <lcode.c:188:6> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5637768bcaa0 <col:6> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
[B6.3] (ImplicitCastExpr, LValueToRValue, int *)
   5: UnaryOperator 0x5637768bcae0 <lcode.c:188:5, col:6> 'int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768bcac8 <col:6> 'int *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bcaa0 <col:6> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
*[B6.4]
   6: BinaryOperator 0x5637768bcb40 <lcode.c:188:5, col:11> 'int' '='
|-UnaryOperator 0x5637768bcae0 <col:5, col:6> 'int' lvalue prefix '*'
| `-ImplicitCastExpr 0x5637768bcac8 <col:6> 'int *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768bcaa0 <col:6> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
`-ImplicitCastExpr 0x5637768bcb28 <col:11> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bcb00 <col:11> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
[B6.5] = [B6.2]
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: DeclRefExpr 0x5637768bc9a0 <lcode.c:187:13> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
l1
   2: ImplicitCastExpr 0x5637768bc9c8 <lcode.c:187:13> 'int *' <LValueToRValue>
`-DeclRefExpr 0x5637768bc9a0 <col:13> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
[B7.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: UnaryOperator 0x5637768bc9e0 <lcode.c:187:12, col:13> 'int' lvalue prefix '*'
`-ImplicitCastExpr 0x5637768bc9c8 <col:13> 'int *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bc9a0 <col:13> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
*[B7.2]
   4: ImplicitCastExpr 0x5637768bca60 <lcode.c:187:12, col:13> 'int' <LValueToRValue>
`-UnaryOperator 0x5637768bc9e0 <col:12, col:13> 'int' lvalue prefix '*'
  `-ImplicitCastExpr 0x5637768bc9c8 <col:13> 'int *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bc9a0 <col:13> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5637768bca00 <./lcode.h:20:19> 'int' 1
1
   6: UnaryOperator 0x5637768bca20 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768bca00 <col:19> 'int' 1
-[B7.5]
   7: BinaryOperator 0x5637768bca78 <lcode.c:187:12, ./lcode.h:20:20> 'int' '=='
|-ImplicitCastExpr 0x5637768bca60 <lcode.c:187:12, col:13> 'int' <LValueToRValue>
| `-UnaryOperator 0x5637768bc9e0 <col:12, col:13> 'int' lvalue prefix '*'
|   `-ImplicitCastExpr 0x5637768bc9c8 <col:13> 'int *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768bc9a0 <col:13> 'int *' lvalue ParmVar 0x5637768bc6b0 'l1' 'int *'
`-ParenExpr 0x5637768bca40 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768bca20 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768bca00 <col:19> 'int' 1
[B7.4] == ([B7.6])
   T: if [B7.7]
   Preds (1): B9
   Succs (2): B6 B5

 [B8]
   1: ReturnStmt 0x5637768bc988 <lcode.c:186:22>
return;
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: DeclRefExpr 0x5637768bc8c0 <lcode.c:186:7> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
l2
   2: ImplicitCastExpr 0x5637768bc948 <lcode.c:186:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bc8c0 <col:7> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
[B9.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768bc8e8 <./lcode.h:20:19> 'int' 1
1
   4: UnaryOperator 0x5637768bc908 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x5637768bc8e8 <col:19> 'int' 1
-[B9.3]
   5: BinaryOperator 0x5637768bc960 <lcode.c:186:7, ./lcode.h:20:20> 'int' '=='
|-ImplicitCastExpr 0x5637768bc948 <lcode.c:186:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bc8c0 <col:7> 'int' lvalue ParmVar 0x5637768bc728 'l2' 'int'
`-ParenExpr 0x5637768bc928 <./lcode.h:20:17, col:20> 'int'
  `-UnaryOperator 0x5637768bc908 <col:18, col:19> 'int' prefix '-'
    `-IntegerLiteral 0x5637768bc8e8 <col:19> 'int' 1
[B9.2] == ([B9.4])
   T: if [B9.5]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (3): B1 B6 B8
