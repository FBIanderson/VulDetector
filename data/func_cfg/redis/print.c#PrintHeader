static void PrintHeader(const Proto *f)
 [B35 (ENTRY)]
   Succs (1): B34

 [B1]
   1: ConditionalOperator 0x55936cb60418 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb60370 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb60348 <line:178:34, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb60330 <line:178:34, col:37> 'int' <LValueToRValue>
|   | `-MemberExpr 0x55936cb602d8 <col:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
|   |   `-ImplicitCastExpr 0x55936cb602c0 <col:34> 'const Proto *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55936cb60298 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb60310 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb603e8 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb60390 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb60400 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb603b8 <col:25> 'char [2]' lvalue "s"
([B4.11]) ? [B2.2] : [B3.2]
   2: CallExpr 0x55936cb60460 <print.c:177:2, line:178:43> 'int'
|-ImplicitCastExpr 0x55936cb60448 <line:177:2> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5fd18 <col:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb604d8 <col:9> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb604c0 <col:9> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5fd78 <col:9> 'char [42]' lvalue "%d local%s, %d constant%s, %d function%s\n"
|-ImplicitCastExpr 0x55936cb604f0 <line:178:4, col:7> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5fe10 <col:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
|   `-ImplicitCastExpr 0x55936cb5fdf8 <col:4> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5fdd0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ConditionalOperator 0x55936cb5ffc8 <line:158:15, col:25> 'char *'
| |-ParenExpr 0x55936cb5ff20 <col:15, col:20> 'int'
| | `-BinaryOperator 0x55936cb5fef8 <line:178:4, line:158:19> 'int' '=='
| |   |-ImplicitCastExpr 0x55936cb5fee0 <line:178:4, col:7> 'int' <LValueToRValue>
| |   | `-MemberExpr 0x55936cb5fe88 <col:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
| |   |   `-ImplicitCastExpr 0x55936cb5fe70 <col:4> 'const Proto *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55936cb5fe48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |   `-IntegerLiteral 0x55936cb5fec0 <line:158:19> 'int' 1
| |-ImplicitCastExpr 0x55936cb5ff98 <col:22> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb5ff40 <col:22> 'char [1]' lvalue ""
| `-ImplicitCastExpr 0x55936cb5ffb0 <col:25> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5ff68 <col:25> 'char [2]' lvalue "s"
|-ImplicitCastExpr 0x55936cb60508 <line:178:22, col:25> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb60038 <col:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
|   `-ImplicitCastExpr 0x55936cb60020 <col:22> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5fff8 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ConditionalOperator 0x55936cb601f0 <line:158:15, col:25> 'char *'
| |-ParenExpr 0x55936cb60148 <col:15, col:20> 'int'
| | `-BinaryOperator 0x55936cb60120 <line:178:22, line:158:19> 'int' '=='
| |   |-ImplicitCastExpr 0x55936cb60108 <line:178:22, col:25> 'int' <LValueToRValue>
| |   | `-MemberExpr 0x55936cb600b0 <col:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
| |   |   `-ImplicitCastExpr 0x55936cb60098 <col:22> 'const Proto *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55936cb60070 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |   `-IntegerLiteral 0x55936cb600e8 <line:158:19> 'int' 1
| |-ImplicitCastExpr 0x55936cb601c0 <col:22> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb60168 <col:22> 'char [1]' lvalue ""
| `-ImplicitCastExpr 0x55936cb601d8 <col:25> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb60190 <col:25> 'char [2]' lvalue "s"
|-ImplicitCastExpr 0x55936cb60520 <line:178:34, col:37> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb60260 <col:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
|   `-ImplicitCastExpr 0x55936cb60248 <col:34> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb60220 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-ConditionalOperator 0x55936cb60418 <line:158:15, col:25> 'char *'
  |-ParenExpr 0x55936cb60370 <col:15, col:20> 'int'
  | `-BinaryOperator 0x55936cb60348 <line:178:34, line:158:19> 'int' '=='
  |   |-ImplicitCastExpr 0x55936cb60330 <line:178:34, col:37> 'int' <LValueToRValue>
  |   | `-MemberExpr 0x55936cb602d8 <col:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
  |   |   `-ImplicitCastExpr 0x55936cb602c0 <col:34> 'const Proto *' <LValueToRValue>
  |   |     `-DeclRefExpr 0x55936cb60298 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
  |   `-IntegerLiteral 0x55936cb60310 <line:158:19> 'int' 1
  |-ImplicitCastExpr 0x55936cb603e8 <col:22> 'char *' <ArrayToPointerDecay>
  | `-StringLiteral 0x55936cb60390 <col:22> 'char [1]' lvalue ""
  `-ImplicitCastExpr 0x55936cb60400 <col:25> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb603b8 <col:25> 'char [2]' lvalue "s"
[B10.4]([B10.7], [B10.11], [B7.1], [B7.5], [B4.1], [B4.5], [B1.1])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: StringLiteral 0x55936cb60390 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb603e8 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb60390 <col:22> 'char [1]' lvalue ""
[B2.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: StringLiteral 0x55936cb603b8 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb60400 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb603b8 <col:25> 'char [2]' lvalue "s"
[B3.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: ConditionalOperator 0x55936cb601f0 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb60148 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb60120 <line:178:22, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb60108 <line:178:22, col:25> 'int' <LValueToRValue>
|   | `-MemberExpr 0x55936cb600b0 <col:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
|   |   `-ImplicitCastExpr 0x55936cb60098 <col:22> 'const Proto *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55936cb60070 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb600e8 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb601c0 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb60168 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb601d8 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb60190 <col:25> 'char [2]' lvalue "s"
([B7.11]) ? [B5.2] : [B6.2]
   2: DeclRefExpr 0x55936cb60220 <print.c:178:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   3: ImplicitCastExpr 0x55936cb60248 <print.c:178:34> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb60220 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B4.2] (ImplicitCastExpr, LValueToRValue, const Proto *)
   4: MemberExpr 0x55936cb60260 <print.c:178:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
`-ImplicitCastExpr 0x55936cb60248 <col:34> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb60220 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B4.3]->sizep
   5: ImplicitCastExpr 0x55936cb60520 <print.c:178:34, col:37> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb60260 <col:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
  `-ImplicitCastExpr 0x55936cb60248 <col:34> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb60220 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x55936cb60298 <print.c:178:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   7: ImplicitCastExpr 0x55936cb602c0 <print.c:178:34> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb60298 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B4.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x55936cb602d8 <print.c:178:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
`-ImplicitCastExpr 0x55936cb602c0 <col:34> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb60298 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B4.7]->sizep
   9: ImplicitCastExpr 0x55936cb60330 <print.c:178:34, col:37> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb602d8 <col:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
  `-ImplicitCastExpr 0x55936cb602c0 <col:34> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb60298 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: IntegerLiteral 0x55936cb60310 <print.c:158:19> 'int' 1
1
  11: BinaryOperator 0x55936cb60348 <print.c:178:34, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb60330 <line:178:34, col:37> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb602d8 <col:34, col:37> 'const int' lvalue ->sizep 0x55936cb1c5f8
|   `-ImplicitCastExpr 0x55936cb602c0 <col:34> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb60298 <col:34> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb60310 <line:158:19> 'int' 1
[B4.9] == [B4.10]
   T: ([B4.11]) ? ... : ...
   Preds (2): B5 B6
   Succs (2): B2 B3

 [B5]
   1: StringLiteral 0x55936cb60168 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb601c0 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb60168 <col:22> 'char [1]' lvalue ""
[B5.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: StringLiteral 0x55936cb60190 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb601d8 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb60190 <col:25> 'char [2]' lvalue "s"
[B6.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: ConditionalOperator 0x55936cb5ffc8 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb5ff20 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb5fef8 <line:178:4, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb5fee0 <line:178:4, col:7> 'int' <LValueToRValue>
|   | `-MemberExpr 0x55936cb5fe88 <col:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
|   |   `-ImplicitCastExpr 0x55936cb5fe70 <col:4> 'const Proto *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55936cb5fe48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb5fec0 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb5ff98 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5ff40 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb5ffb0 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5ff68 <col:25> 'char [2]' lvalue "s"
([B10.17]) ? [B8.2] : [B9.2]
   2: DeclRefExpr 0x55936cb5fff8 <print.c:178:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   3: ImplicitCastExpr 0x55936cb60020 <print.c:178:22> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5fff8 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B7.2] (ImplicitCastExpr, LValueToRValue, const Proto *)
   4: MemberExpr 0x55936cb60038 <print.c:178:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
`-ImplicitCastExpr 0x55936cb60020 <col:22> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5fff8 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B7.3]->sizek
   5: ImplicitCastExpr 0x55936cb60508 <print.c:178:22, col:25> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb60038 <col:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
  `-ImplicitCastExpr 0x55936cb60020 <col:22> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5fff8 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B7.4] (ImplicitCastExpr, LValueToRValue, int)
   6: DeclRefExpr 0x55936cb60070 <print.c:178:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   7: ImplicitCastExpr 0x55936cb60098 <print.c:178:22> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb60070 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B7.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x55936cb600b0 <print.c:178:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
`-ImplicitCastExpr 0x55936cb60098 <col:22> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb60070 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B7.7]->sizek
   9: ImplicitCastExpr 0x55936cb60108 <print.c:178:22, col:25> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb600b0 <col:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
  `-ImplicitCastExpr 0x55936cb60098 <col:22> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb60070 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B7.8] (ImplicitCastExpr, LValueToRValue, int)
  10: IntegerLiteral 0x55936cb600e8 <print.c:158:19> 'int' 1
1
  11: BinaryOperator 0x55936cb60120 <print.c:178:22, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb60108 <line:178:22, col:25> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb600b0 <col:22, col:25> 'const int' lvalue ->sizek 0x55936cb1c4d8
|   `-ImplicitCastExpr 0x55936cb60098 <col:22> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb60070 <col:22> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb600e8 <line:158:19> 'int' 1
[B7.9] == [B7.10]
   T: ([B7.11]) ? ... : ...
   Preds (2): B8 B9
   Succs (2): B5 B6

 [B8]
   1: StringLiteral 0x55936cb5ff40 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb5ff98 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5ff40 <col:22> 'char [1]' lvalue ""
[B8.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B10
   Succs (1): B7

 [B9]
   1: StringLiteral 0x55936cb5ff68 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb5ffb0 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5ff68 <col:25> 'char [2]' lvalue "s"
[B9.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B10
   Succs (1): B7

 [B10]
   1: ConditionalOperator 0x55936cb5fba8 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb5fb00 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb5fad8 <line:176:23, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb5fac0 <line:176:23, col:26> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x55936cb5faa8 <col:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x55936cb5fa50 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
|   |     `-ImplicitCastExpr 0x55936cb5fa38 <col:23> 'const Proto *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb5fa88 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb5fb78 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5fb20 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb5fb90 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5fb48 <col:25> 'char [2]' lvalue "s"
([B13.13]) ? [B11.2] : [B12.2]
   2: CallExpr 0x55936cb5fbf0 <print.c:174:2, line:176:31> 'int'
|-ImplicitCastExpr 0x55936cb5fbd8 <line:174:2> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5d690 <col:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb5fc70 <col:9> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb5fc58 <col:9> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5d6f8 <col:9> 'char [40]' lvalue "%d%s param%s, %d slot%s, %d upvalue%s, "
|-ImplicitCastExpr 0x55936cb5fca0 <line:175:2, col:5> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5fc88 <col:2, col:5> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5d788 <col:2, col:5> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
|     `-ImplicitCastExpr 0x55936cb5d770 <col:2> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5d748 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ConditionalOperator 0x55936cb5f560 <col:15, col:32> 'char *'
| |-ImplicitCastExpr 0x55936cb5f518 <col:15, col:18> 'int' <IntegralCast>
| | `-ImplicitCastExpr 0x55936cb5f500 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55936cb5f470 <col:15, col:18> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x55936cb1c878
| |     `-ImplicitCastExpr 0x55936cb5d7e8 <col:15> 'const Proto *' <LValueToRValue>
| |       `-DeclRefExpr 0x55936cb5d7c0 <col:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |-ImplicitCastExpr 0x55936cb5f530 <col:28> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb5f4a8 <col:28> 'char [2]' lvalue "+"
| `-ImplicitCastExpr 0x55936cb5f548 <col:32> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5f4d8 <col:32> 'char [1]' lvalue ""
|-ConditionalOperator 0x55936cb5f728 <line:158:15, col:25> 'char *'
| |-ParenExpr 0x55936cb5f680 <col:15, col:20> 'int'
| | `-BinaryOperator 0x55936cb5f658 <line:175:38, line:158:19> 'int' '=='
| |   |-ImplicitCastExpr 0x55936cb5f640 <line:175:38, col:41> 'int' <IntegralCast>
| |   | `-ImplicitCastExpr 0x55936cb5f628 <col:38, col:41> 'lu_byte':'unsigned char' <LValueToRValue>
| |   |   `-MemberExpr 0x55936cb5f5d0 <col:38, col:41> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
| |   |     `-ImplicitCastExpr 0x55936cb5f5b8 <col:38> 'const Proto *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |   `-IntegerLiteral 0x55936cb5f608 <line:158:19> 'int' 1
| |-ImplicitCastExpr 0x55936cb5f6f8 <col:22> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb5f6a0 <col:22> 'char [1]' lvalue ""
| `-ImplicitCastExpr 0x55936cb5f710 <col:25> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5f6c8 <col:25> 'char [2]' lvalue "s"
|-ImplicitCastExpr 0x55936cb5fcd0 <line:176:4, col:7> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5fcb8 <col:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5f798 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
|     `-ImplicitCastExpr 0x55936cb5f780 <col:4> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5f758 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ConditionalOperator 0x55936cb5f968 <line:158:15, col:25> 'char *'
| |-ParenExpr 0x55936cb5f8c0 <col:15, col:20> 'int'
| | `-BinaryOperator 0x55936cb5f898 <line:176:4, line:158:19> 'int' '=='
| |   |-ImplicitCastExpr 0x55936cb5f880 <line:176:4, col:7> 'int' <IntegralCast>
| |   | `-ImplicitCastExpr 0x55936cb5f868 <col:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
| |   |   `-MemberExpr 0x55936cb5f810 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
| |   |     `-ImplicitCastExpr 0x55936cb5f7f8 <col:4> 'const Proto *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |   `-IntegerLiteral 0x55936cb5f848 <line:158:19> 'int' 1
| |-ImplicitCastExpr 0x55936cb5f938 <col:22> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb5f8e0 <col:22> 'char [1]' lvalue ""
| `-ImplicitCastExpr 0x55936cb5f950 <col:25> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5f908 <col:25> 'char [2]' lvalue "s"
|-ImplicitCastExpr 0x55936cb5fd00 <line:176:23, col:26> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5fce8 <col:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5f9d8 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
|     `-ImplicitCastExpr 0x55936cb5f9c0 <col:23> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5f998 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-ConditionalOperator 0x55936cb5fba8 <line:158:15, col:25> 'char *'
  |-ParenExpr 0x55936cb5fb00 <col:15, col:20> 'int'
  | `-BinaryOperator 0x55936cb5fad8 <line:176:23, line:158:19> 'int' '=='
  |   |-ImplicitCastExpr 0x55936cb5fac0 <line:176:23, col:26> 'int' <IntegralCast>
  |   | `-ImplicitCastExpr 0x55936cb5faa8 <col:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  |   |   `-MemberExpr 0x55936cb5fa50 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
  |   |     `-ImplicitCastExpr 0x55936cb5fa38 <col:23> 'const Proto *' <LValueToRValue>
  |   |       `-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
  |   `-IntegerLiteral 0x55936cb5fa88 <line:158:19> 'int' 1
  |-ImplicitCastExpr 0x55936cb5fb78 <col:22> 'char *' <ArrayToPointerDecay>
  | `-StringLiteral 0x55936cb5fb20 <col:22> 'char [1]' lvalue ""
  `-ImplicitCastExpr 0x55936cb5fb90 <col:25> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5fb48 <col:25> 'char [2]' lvalue "s"
[B22.14]([B22.17], [B22.22], [B19.1], [B16.1], [B16.6], [B13.1], [B13.6], [B10.1])
   3: DeclRefExpr 0x55936cb5fd18 <print.c:177:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   4: ImplicitCastExpr 0x55936cb60448 <print.c:177:2> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5fd18 <col:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B10.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   5: StringLiteral 0x55936cb5fd78 <print.c:177:9> 'char [42]' lvalue "%d local%s, %d constant%s, %d function%s\n"
"%d local%s, %d constant%s, %d function%s\n"
   6: ImplicitCastExpr 0x55936cb604c0 <print.c:177:9> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5fd78 <col:9> 'char [42]' lvalue "%d local%s, %d constant%s, %d function%s\n"
[B10.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x55936cb604d8 <print.c:177:9> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb604c0 <col:9> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5fd78 <col:9> 'char [42]' lvalue "%d local%s, %d constant%s, %d function%s\n"
[B10.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x55936cb5fdd0 <print.c:178:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   9: ImplicitCastExpr 0x55936cb5fdf8 <print.c:178:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5fdd0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B10.8] (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x55936cb5fe10 <print.c:178:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
`-ImplicitCastExpr 0x55936cb5fdf8 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5fdd0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B10.9]->sizelocvars
  11: ImplicitCastExpr 0x55936cb604f0 <print.c:178:4, col:7> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5fe10 <col:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
  `-ImplicitCastExpr 0x55936cb5fdf8 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5fdd0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B10.10] (ImplicitCastExpr, LValueToRValue, int)
  12: DeclRefExpr 0x55936cb5fe48 <print.c:178:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
  13: ImplicitCastExpr 0x55936cb5fe70 <print.c:178:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5fe48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B10.12] (ImplicitCastExpr, LValueToRValue, const Proto *)
  14: MemberExpr 0x55936cb5fe88 <print.c:178:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
`-ImplicitCastExpr 0x55936cb5fe70 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5fe48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B10.13]->sizelocvars
  15: ImplicitCastExpr 0x55936cb5fee0 <print.c:178:4, col:7> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5fe88 <col:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
  `-ImplicitCastExpr 0x55936cb5fe70 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5fe48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B10.14] (ImplicitCastExpr, LValueToRValue, int)
  16: IntegerLiteral 0x55936cb5fec0 <print.c:158:19> 'int' 1
1
  17: BinaryOperator 0x55936cb5fef8 <print.c:178:4, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb5fee0 <line:178:4, col:7> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5fe88 <col:4, col:7> 'const int' lvalue ->sizelocvars 0x55936cb1c658
|   `-ImplicitCastExpr 0x55936cb5fe70 <col:4> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5fe48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5fec0 <line:158:19> 'int' 1
[B10.15] == [B10.16]
   T: ([B10.17]) ? ... : ...
   Preds (2): B11 B12
   Succs (2): B8 B9

 [B11]
   1: StringLiteral 0x55936cb5fb20 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb5fb78 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5fb20 <col:22> 'char [1]' lvalue ""
[B11.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B13
   Succs (1): B10

 [B12]
   1: StringLiteral 0x55936cb5fb48 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb5fb90 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5fb48 <col:25> 'char [2]' lvalue "s"
[B12.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B13
   Succs (1): B10

 [B13]
   1: ConditionalOperator 0x55936cb5f968 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb5f8c0 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb5f898 <line:176:4, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb5f880 <line:176:4, col:7> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x55936cb5f868 <col:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x55936cb5f810 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
|   |     `-ImplicitCastExpr 0x55936cb5f7f8 <col:4> 'const Proto *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb5f848 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb5f938 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5f8e0 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb5f950 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5f908 <col:25> 'char [2]' lvalue "s"
([B16.13]) ? [B14.2] : [B15.2]
   2: DeclRefExpr 0x55936cb5f998 <print.c:176:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   3: ImplicitCastExpr 0x55936cb5f9c0 <print.c:176:23> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5f998 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.2] (ImplicitCastExpr, LValueToRValue, const Proto *)
   4: MemberExpr 0x55936cb5f9d8 <print.c:176:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
`-ImplicitCastExpr 0x55936cb5f9c0 <col:23> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5f998 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.3]->nups
   5: ImplicitCastExpr 0x55936cb5fce8 <print.c:176:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5f9d8 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
  `-ImplicitCastExpr 0x55936cb5f9c0 <col:23> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5f998 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.4] (ImplicitCastExpr, LValueToRValue, lu_byte)
   6: ImplicitCastExpr 0x55936cb5fd00 <print.c:176:23, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5fce8 <col:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5f9d8 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
    `-ImplicitCastExpr 0x55936cb5f9c0 <col:23> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5f998 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.5] (ImplicitCastExpr, IntegralCast, int)
   7: DeclRefExpr 0x55936cb5fa10 <print.c:176:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   8: ImplicitCastExpr 0x55936cb5fa38 <print.c:176:23> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.7] (ImplicitCastExpr, LValueToRValue, const Proto *)
   9: MemberExpr 0x55936cb5fa50 <print.c:176:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
`-ImplicitCastExpr 0x55936cb5fa38 <col:23> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.8]->nups
  10: ImplicitCastExpr 0x55936cb5faa8 <print.c:176:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5fa50 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
  `-ImplicitCastExpr 0x55936cb5fa38 <col:23> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.9] (ImplicitCastExpr, LValueToRValue, lu_byte)
  11: ImplicitCastExpr 0x55936cb5fac0 <print.c:176:23, col:26> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5faa8 <col:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5fa50 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
    `-ImplicitCastExpr 0x55936cb5fa38 <col:23> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B13.10] (ImplicitCastExpr, IntegralCast, int)
  12: IntegerLiteral 0x55936cb5fa88 <print.c:158:19> 'int' 1
1
  13: BinaryOperator 0x55936cb5fad8 <print.c:176:23, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb5fac0 <line:176:23, col:26> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5faa8 <col:23, col:26> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5fa50 <col:23, col:26> 'const lu_byte':'const unsigned char' lvalue ->nups 0x55936cb1c7c8
|     `-ImplicitCastExpr 0x55936cb5fa38 <col:23> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5fa10 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5fa88 <line:158:19> 'int' 1
[B13.11] == [B13.12]
   T: ([B13.13]) ? ... : ...
   Preds (2): B14 B15
   Succs (2): B11 B12

 [B14]
   1: StringLiteral 0x55936cb5f8e0 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb5f938 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5f8e0 <col:22> 'char [1]' lvalue ""
[B14.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B16
   Succs (1): B13

 [B15]
   1: StringLiteral 0x55936cb5f908 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb5f950 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5f908 <col:25> 'char [2]' lvalue "s"
[B15.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B16
   Succs (1): B13

 [B16]
   1: ConditionalOperator 0x55936cb5f728 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb5f680 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb5f658 <line:175:38, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb5f640 <line:175:38, col:41> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x55936cb5f628 <col:38, col:41> 'lu_byte':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x55936cb5f5d0 <col:38, col:41> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
|   |     `-ImplicitCastExpr 0x55936cb5f5b8 <col:38> 'const Proto *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb5f608 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb5f6f8 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5f6a0 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb5f710 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5f6c8 <col:25> 'char [2]' lvalue "s"
([B19.8]) ? [B17.2] : [B18.2]
   2: DeclRefExpr 0x55936cb5f758 <print.c:176:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   3: ImplicitCastExpr 0x55936cb5f780 <print.c:176:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5f758 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.2] (ImplicitCastExpr, LValueToRValue, const Proto *)
   4: MemberExpr 0x55936cb5f798 <print.c:176:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
`-ImplicitCastExpr 0x55936cb5f780 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5f758 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.3]->maxstacksize
   5: ImplicitCastExpr 0x55936cb5fcb8 <print.c:176:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5f798 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
  `-ImplicitCastExpr 0x55936cb5f780 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5f758 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.4] (ImplicitCastExpr, LValueToRValue, lu_byte)
   6: ImplicitCastExpr 0x55936cb5fcd0 <print.c:176:4, col:7> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5fcb8 <col:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5f798 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
    `-ImplicitCastExpr 0x55936cb5f780 <col:4> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5f758 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.5] (ImplicitCastExpr, IntegralCast, int)
   7: DeclRefExpr 0x55936cb5f7d0 <print.c:176:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   8: ImplicitCastExpr 0x55936cb5f7f8 <print.c:176:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.7] (ImplicitCastExpr, LValueToRValue, const Proto *)
   9: MemberExpr 0x55936cb5f810 <print.c:176:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
`-ImplicitCastExpr 0x55936cb5f7f8 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.8]->maxstacksize
  10: ImplicitCastExpr 0x55936cb5f868 <print.c:176:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5f810 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
  `-ImplicitCastExpr 0x55936cb5f7f8 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.9] (ImplicitCastExpr, LValueToRValue, lu_byte)
  11: ImplicitCastExpr 0x55936cb5f880 <print.c:176:4, col:7> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5f868 <col:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5f810 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
    `-ImplicitCastExpr 0x55936cb5f7f8 <col:4> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B16.10] (ImplicitCastExpr, IntegralCast, int)
  12: IntegerLiteral 0x55936cb5f848 <print.c:158:19> 'int' 1
1
  13: BinaryOperator 0x55936cb5f898 <print.c:176:4, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb5f880 <line:176:4, col:7> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5f868 <col:4, col:7> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5f810 <col:4, col:7> 'const lu_byte':'const unsigned char' lvalue ->maxstacksize 0x55936cb1c8d0
|     `-ImplicitCastExpr 0x55936cb5f7f8 <col:4> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5f7d0 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5f848 <line:158:19> 'int' 1
[B16.11] == [B16.12]
   T: ([B16.13]) ? ... : ...
   Preds (2): B17 B18
   Succs (2): B14 B15

 [B17]
   1: StringLiteral 0x55936cb5f6a0 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb5f6f8 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5f6a0 <col:22> 'char [1]' lvalue ""
[B17.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B19
   Succs (1): B16

 [B18]
   1: StringLiteral 0x55936cb5f6c8 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb5f710 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5f6c8 <col:25> 'char [2]' lvalue "s"
[B18.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B19
   Succs (1): B16

 [B19]
   1: ConditionalOperator 0x55936cb5f560 <print.c:175:15, col:32> 'char *'
|-ImplicitCastExpr 0x55936cb5f518 <col:15, col:18> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5f500 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5f470 <col:15, col:18> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x55936cb1c878
|     `-ImplicitCastExpr 0x55936cb5d7e8 <col:15> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5d7c0 <col:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ImplicitCastExpr 0x55936cb5f530 <col:28> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5f4a8 <col:28> 'char [2]' lvalue "+"
`-ImplicitCastExpr 0x55936cb5f548 <col:32> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5f4d8 <col:32> 'char [1]' lvalue ""
[B22.27] ? [B20.2] : [B21.2]
   2: DeclRefExpr 0x55936cb5f590 <print.c:175:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   3: ImplicitCastExpr 0x55936cb5f5b8 <print.c:175:38> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B19.2] (ImplicitCastExpr, LValueToRValue, const Proto *)
   4: MemberExpr 0x55936cb5f5d0 <print.c:175:38, col:41> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
`-ImplicitCastExpr 0x55936cb5f5b8 <col:38> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B19.3]->numparams
   5: ImplicitCastExpr 0x55936cb5f628 <print.c:175:38, col:41> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5f5d0 <col:38, col:41> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
  `-ImplicitCastExpr 0x55936cb5f5b8 <col:38> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B19.4] (ImplicitCastExpr, LValueToRValue, lu_byte)
   6: ImplicitCastExpr 0x55936cb5f640 <print.c:175:38, col:41> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5f628 <col:38, col:41> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5f5d0 <col:38, col:41> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
    `-ImplicitCastExpr 0x55936cb5f5b8 <col:38> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B19.5] (ImplicitCastExpr, IntegralCast, int)
   7: IntegerLiteral 0x55936cb5f608 <print.c:158:19> 'int' 1
1
   8: BinaryOperator 0x55936cb5f658 <print.c:175:38, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb5f640 <line:175:38, col:41> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5f628 <col:38, col:41> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x55936cb5f5d0 <col:38, col:41> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
|     `-ImplicitCastExpr 0x55936cb5f5b8 <col:38> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5f590 <col:38> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5f608 <line:158:19> 'int' 1
[B19.6] == [B19.7]
   T: ([B19.8]) ? ... : ...
   Preds (2): B20 B21
   Succs (2): B17 B18

 [B20]
   1: StringLiteral 0x55936cb5f4a8 <print.c:175:28> 'char [2]' lvalue "+"
"+"
   2: ImplicitCastExpr 0x55936cb5f530 <print.c:175:28> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5f4a8 <col:28> 'char [2]' lvalue "+"
[B20.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B22
   Succs (1): B19

 [B21]
   1: StringLiteral 0x55936cb5f4d8 <print.c:175:32> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb5f548 <print.c:175:32> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5f4d8 <col:32> 'char [1]' lvalue ""
[B21.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B22
   Succs (1): B19

 [B22]
   1: ConditionalOperator 0x55936cb5d310 <print.c:158:15, col:25> 'char *'
|-ParenExpr 0x55936cb5d268 <col:15, col:20> 'int'
| `-BinaryOperator 0x55936cb5d240 <line:173:4, line:158:19> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb5d228 <line:173:4, col:7> 'int' <LValueToRValue>
|   | `-MemberExpr 0x55936cb5d1d0 <col:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
|   |   `-ImplicitCastExpr 0x55936cb5d1b8 <col:4> 'const Proto *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55936cb5d190 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb5d208 <line:158:19> 'int' 1
|-ImplicitCastExpr 0x55936cb5d2e0 <col:22> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5d288 <col:22> 'char [1]' lvalue ""
`-ImplicitCastExpr 0x55936cb5d2f8 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5d2b0 <col:25> 'char [2]' lvalue "s"
([B25.21]) ? [B23.2] : [B24.2]
   2: DeclRefExpr 0x55936cb5d340 <print.c:173:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   3: ImplicitCastExpr 0x55936cb5d368 <print.c:173:17> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d340 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.2] (ImplicitCastExpr, LValueToRValue, const Proto *)
   4: MemberExpr 0x55936cb5d380 <print.c:173:17, col:20> 'const int' lvalue ->sizecode 0x55936cb1c538
`-ImplicitCastExpr 0x55936cb5d368 <col:17> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d340 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.3]->sizecode
   5: ImplicitCastExpr 0x55936cb5d448 <print.c:173:17, col:20> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5d380 <col:17, col:20> 'const int' lvalue ->sizecode 0x55936cb1c538
  `-ImplicitCastExpr 0x55936cb5d368 <col:17> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d340 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.4] (ImplicitCastExpr, LValueToRValue, int)
   6: UnaryExprOrTypeTraitExpr 0x55936cb5d3c8 <print.c:20:25, col:33> 'unsigned long' sizeof 'Instruction':'unsigned int'
sizeof(Instruction)
   7: CStyleCastExpr 0x55936cb5d400 <print.c:20:20, col:33> 'int' <IntegralCast>
`-UnaryExprOrTypeTraitExpr 0x55936cb5d3c8 <col:25, col:33> 'unsigned long' sizeof 'Instruction':'unsigned int'
(int)[B22.6] (CStyleCastExpr, IntegralCast, int)
   8: BinaryOperator 0x55936cb5d460 <print.c:173:17, line:20:34> 'int' '*'
|-ImplicitCastExpr 0x55936cb5d448 <line:173:17, col:20> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5d380 <col:17, col:20> 'const int' lvalue ->sizecode 0x55936cb1c538
|   `-ImplicitCastExpr 0x55936cb5d368 <col:17> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5d340 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-ParenExpr 0x55936cb5d428 <line:20:19, col:34> 'int'
  `-CStyleCastExpr 0x55936cb5d400 <col:20, col:33> 'int' <IntegralCast>
    `-UnaryExprOrTypeTraitExpr 0x55936cb5d3c8 <col:25, col:33> 'unsigned long' sizeof 'Instruction':'unsigned int'
[B22.5] * ([B22.7])
   9: DeclRefExpr 0x55936cb5d488 <print.c:173:54> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
  10: ImplicitCastExpr 0x55936cb5d518 <print.c:21:32, col:34> 'const Proto *' <LValueToRValue>
`-ParenExpr 0x55936cb5d4f8 <col:32, col:34> 'const Proto *' lvalue
  `-DeclRefExpr 0x55936cb5d488 <line:173:54> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
([B22.9]) (ImplicitCastExpr, LValueToRValue, const Proto *)
  11: CStyleCastExpr 0x55936cb5d530 <print.c:21:19, col:34> 'const void *' <BitCast>
`-ImplicitCastExpr 0x55936cb5d518 <col:32, col:34> 'const Proto *' <LValueToRValue>
  `-ParenExpr 0x55936cb5d4f8 <col:32, col:34> 'const Proto *' lvalue
    `-DeclRefExpr 0x55936cb5d488 <line:173:54> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
(const void *)[B22.10] (CStyleCastExpr, BitCast, const void *)
  12: CallExpr 0x55936cb5d590 <print.c:170:2, line:173:56> 'int'
|-ImplicitCastExpr 0x55936cb5d578 <line:170:2> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55936cb5cd88 <col:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
|-ImplicitCastExpr 0x55936cb5d618 <col:9> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x55936cb5d600 <col:9> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5cde8 <col:9> 'char [51]' lvalue "\n%s <%s:%d,%d> (%d instruction%s, %d bytes at %p)\n"
|-ConditionalOperator 0x55936cb5cfd0 <line:171:3, col:30> 'char *'
| |-ParenExpr 0x55936cb5cf20 <col:3, col:21> 'int'
| | `-BinaryOperator 0x55936cb5cef8 <col:4, col:20> 'int' '=='
| |   |-ImplicitCastExpr 0x55936cb5cee0 <col:4, col:7> 'int' <LValueToRValue>
| |   | `-MemberExpr 0x55936cb5ce88 <col:4, col:7> 'const int' lvalue ->linedefined 0x55936cb1c6b8
| |   |   `-ImplicitCastExpr 0x55936cb5ce70 <col:4> 'const Proto *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55936cb5ce48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |   `-IntegerLiteral 0x55936cb5cec0 <col:20> 'int' 0
| |-ImplicitCastExpr 0x55936cb5cfa0 <col:23> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb5cf40 <col:23> 'char [5]' lvalue "main"
| `-ImplicitCastExpr 0x55936cb5cfb8 <col:30> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5cf70 <col:30> 'char [9]' lvalue "function"
|-ImplicitCastExpr 0x55936cb5d630 <col:41> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55936cb5d000 <col:41> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
|-ImplicitCastExpr 0x55936cb5d648 <line:172:2, col:5> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5d068 <col:2, col:5> 'const int' lvalue ->linedefined 0x55936cb1c6b8
|   `-ImplicitCastExpr 0x55936cb5d050 <col:2> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5d028 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ImplicitCastExpr 0x55936cb5d660 <col:17, col:20> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5d0e0 <col:17, col:20> 'const int' lvalue ->lastlinedefined 0x55936cb1c718
|   `-ImplicitCastExpr 0x55936cb5d0c8 <col:17> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5d0a0 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ImplicitCastExpr 0x55936cb5d678 <line:173:4, col:7> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5d158 <col:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
|   `-ImplicitCastExpr 0x55936cb5d140 <col:4> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5d118 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|-ConditionalOperator 0x55936cb5d310 <line:158:15, col:25> 'char *'
| |-ParenExpr 0x55936cb5d268 <col:15, col:20> 'int'
| | `-BinaryOperator 0x55936cb5d240 <line:173:4, line:158:19> 'int' '=='
| |   |-ImplicitCastExpr 0x55936cb5d228 <line:173:4, col:7> 'int' <LValueToRValue>
| |   | `-MemberExpr 0x55936cb5d1d0 <col:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
| |   |   `-ImplicitCastExpr 0x55936cb5d1b8 <col:4> 'const Proto *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55936cb5d190 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| |   `-IntegerLiteral 0x55936cb5d208 <line:158:19> 'int' 1
| |-ImplicitCastExpr 0x55936cb5d2e0 <col:22> 'char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x55936cb5d288 <col:22> 'char [1]' lvalue ""
| `-ImplicitCastExpr 0x55936cb5d2f8 <col:25> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x55936cb5d2b0 <col:25> 'char [2]' lvalue "s"
|-BinaryOperator 0x55936cb5d460 <line:173:17, line:20:34> 'int' '*'
| |-ImplicitCastExpr 0x55936cb5d448 <line:173:17, col:20> 'int' <LValueToRValue>
| | `-MemberExpr 0x55936cb5d380 <col:17, col:20> 'const int' lvalue ->sizecode 0x55936cb1c538
| |   `-ImplicitCastExpr 0x55936cb5d368 <col:17> 'const Proto *' <LValueToRValue>
| |     `-DeclRefExpr 0x55936cb5d340 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
| `-ParenExpr 0x55936cb5d428 <line:20:19, col:34> 'int'
|   `-CStyleCastExpr 0x55936cb5d400 <col:20, col:33> 'int' <IntegralCast>
|     `-UnaryExprOrTypeTraitExpr 0x55936cb5d3c8 <col:25, col:33> 'unsigned long' sizeof 'Instruction':'unsigned int'
`-ParenExpr 0x55936cb5d558 <line:21:18, col:35> 'const void *'
  `-CStyleCastExpr 0x55936cb5d530 <col:19, col:34> 'const void *' <BitCast>
    `-ImplicitCastExpr 0x55936cb5d518 <col:32, col:34> 'const Proto *' <LValueToRValue>
      `-ParenExpr 0x55936cb5d4f8 <col:32, col:34> 'const Proto *' lvalue
        `-DeclRefExpr 0x55936cb5d488 <line:173:54> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B28.2]([B28.5], [B25.1], [B25.3], [B25.7], [B25.11], [B25.15], [B22.1], [B22.8], ([B22.11]))
  13: DeclRefExpr 0x55936cb5d690 <print.c:174:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
  14: ImplicitCastExpr 0x55936cb5fbd8 <print.c:174:2> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5d690 <col:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B22.13] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
  15: StringLiteral 0x55936cb5d6f8 <print.c:174:9> 'char [40]' lvalue "%d%s param%s, %d slot%s, %d upvalue%s, "
"%d%s param%s, %d slot%s, %d upvalue%s, "
  16: ImplicitCastExpr 0x55936cb5fc58 <print.c:174:9> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5d6f8 <col:9> 'char [40]' lvalue "%d%s param%s, %d slot%s, %d upvalue%s, "
[B22.15] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  17: ImplicitCastExpr 0x55936cb5fc70 <print.c:174:9> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5fc58 <col:9> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5d6f8 <col:9> 'char [40]' lvalue "%d%s param%s, %d slot%s, %d upvalue%s, "
[B22.16] (ImplicitCastExpr, BitCast, const char *)
  18: DeclRefExpr 0x55936cb5d748 <print.c:175:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
  19: ImplicitCastExpr 0x55936cb5d770 <print.c:175:2> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d748 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.18] (ImplicitCastExpr, LValueToRValue, const Proto *)
  20: MemberExpr 0x55936cb5d788 <print.c:175:2, col:5> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
`-ImplicitCastExpr 0x55936cb5d770 <col:2> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d748 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.19]->numparams
  21: ImplicitCastExpr 0x55936cb5fc88 <print.c:175:2, col:5> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5d788 <col:2, col:5> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
  `-ImplicitCastExpr 0x55936cb5d770 <col:2> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d748 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.20] (ImplicitCastExpr, LValueToRValue, lu_byte)
  22: ImplicitCastExpr 0x55936cb5fca0 <print.c:175:2, col:5> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5fc88 <col:2, col:5> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5d788 <col:2, col:5> 'const lu_byte':'const unsigned char' lvalue ->numparams 0x55936cb1c820
    `-ImplicitCastExpr 0x55936cb5d770 <col:2> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5d748 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.21] (ImplicitCastExpr, IntegralCast, int)
  23: DeclRefExpr 0x55936cb5d7c0 <print.c:175:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
  24: ImplicitCastExpr 0x55936cb5d7e8 <print.c:175:15> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d7c0 <col:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.23] (ImplicitCastExpr, LValueToRValue, const Proto *)
  25: MemberExpr 0x55936cb5f470 <print.c:175:15, col:18> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x55936cb1c878
`-ImplicitCastExpr 0x55936cb5d7e8 <col:15> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d7c0 <col:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.24]->is_vararg
  26: ImplicitCastExpr 0x55936cb5f500 <print.c:175:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x55936cb5f470 <col:15, col:18> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x55936cb1c878
  `-ImplicitCastExpr 0x55936cb5d7e8 <col:15> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d7c0 <col:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.25] (ImplicitCastExpr, LValueToRValue, lu_byte)
  27: ImplicitCastExpr 0x55936cb5f518 <print.c:175:15, col:18> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5f500 <col:15, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x55936cb5f470 <col:15, col:18> 'const lu_byte':'const unsigned char' lvalue ->is_vararg 0x55936cb1c878
    `-ImplicitCastExpr 0x55936cb5d7e8 <col:15> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5d7c0 <col:15> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B22.26] (ImplicitCastExpr, IntegralCast, int)
   T: [B22.27] ? ... : ...
   Preds (2): B23 B24
   Succs (2): B20 B21

 [B23]
   1: StringLiteral 0x55936cb5d288 <print.c:158:22> 'char [1]' lvalue ""
""
   2: ImplicitCastExpr 0x55936cb5d2e0 <print.c:158:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5d288 <col:22> 'char [1]' lvalue ""
[B23.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B25
   Succs (1): B22

 [B24]
   1: StringLiteral 0x55936cb5d2b0 <print.c:158:25> 'char [2]' lvalue "s"
"s"
   2: ImplicitCastExpr 0x55936cb5d2f8 <print.c:158:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5d2b0 <col:25> 'char [2]' lvalue "s"
[B24.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B25
   Succs (1): B22

 [B25]
   1: ConditionalOperator 0x55936cb5cfd0 <print.c:171:3, col:30> 'char *'
|-ParenExpr 0x55936cb5cf20 <col:3, col:21> 'int'
| `-BinaryOperator 0x55936cb5cef8 <col:4, col:20> 'int' '=='
|   |-ImplicitCastExpr 0x55936cb5cee0 <col:4, col:7> 'int' <LValueToRValue>
|   | `-MemberExpr 0x55936cb5ce88 <col:4, col:7> 'const int' lvalue ->linedefined 0x55936cb1c6b8
|   |   `-ImplicitCastExpr 0x55936cb5ce70 <col:4> 'const Proto *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55936cb5ce48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
|   `-IntegerLiteral 0x55936cb5cec0 <col:20> 'int' 0
|-ImplicitCastExpr 0x55936cb5cfa0 <col:23> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5cf40 <col:23> 'char [5]' lvalue "main"
`-ImplicitCastExpr 0x55936cb5cfb8 <col:30> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5cf70 <col:30> 'char [9]' lvalue "function"
([B28.11]) ? [B26.2] : [B27.2]
   2: DeclRefExpr 0x55936cb5d000 <print.c:171:41> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
   3: ImplicitCastExpr 0x55936cb5d630 <print.c:171:41> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d000 <col:41> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B25.2] (ImplicitCastExpr, LValueToRValue, const char *)
   4: DeclRefExpr 0x55936cb5d028 <print.c:172:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   5: ImplicitCastExpr 0x55936cb5d050 <print.c:172:2> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d028 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.4] (ImplicitCastExpr, LValueToRValue, const Proto *)
   6: MemberExpr 0x55936cb5d068 <print.c:172:2, col:5> 'const int' lvalue ->linedefined 0x55936cb1c6b8
`-ImplicitCastExpr 0x55936cb5d050 <col:2> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d028 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.5]->linedefined
   7: ImplicitCastExpr 0x55936cb5d648 <print.c:172:2, col:5> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5d068 <col:2, col:5> 'const int' lvalue ->linedefined 0x55936cb1c6b8
  `-ImplicitCastExpr 0x55936cb5d050 <col:2> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d028 <col:2> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.6] (ImplicitCastExpr, LValueToRValue, int)
   8: DeclRefExpr 0x55936cb5d0a0 <print.c:172:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   9: ImplicitCastExpr 0x55936cb5d0c8 <print.c:172:17> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d0a0 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.8] (ImplicitCastExpr, LValueToRValue, const Proto *)
  10: MemberExpr 0x55936cb5d0e0 <print.c:172:17, col:20> 'const int' lvalue ->lastlinedefined 0x55936cb1c718
`-ImplicitCastExpr 0x55936cb5d0c8 <col:17> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d0a0 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.9]->lastlinedefined
  11: ImplicitCastExpr 0x55936cb5d660 <print.c:172:17, col:20> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5d0e0 <col:17, col:20> 'const int' lvalue ->lastlinedefined 0x55936cb1c718
  `-ImplicitCastExpr 0x55936cb5d0c8 <col:17> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d0a0 <col:17> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.10] (ImplicitCastExpr, LValueToRValue, int)
  12: DeclRefExpr 0x55936cb5d118 <print.c:173:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
  13: ImplicitCastExpr 0x55936cb5d140 <print.c:173:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d118 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.12] (ImplicitCastExpr, LValueToRValue, const Proto *)
  14: MemberExpr 0x55936cb5d158 <print.c:173:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
`-ImplicitCastExpr 0x55936cb5d140 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d118 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.13]->sizecode
  15: ImplicitCastExpr 0x55936cb5d678 <print.c:173:4, col:7> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5d158 <col:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
  `-ImplicitCastExpr 0x55936cb5d140 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d118 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.14] (ImplicitCastExpr, LValueToRValue, int)
  16: DeclRefExpr 0x55936cb5d190 <print.c:173:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
  17: ImplicitCastExpr 0x55936cb5d1b8 <print.c:173:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5d190 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.16] (ImplicitCastExpr, LValueToRValue, const Proto *)
  18: MemberExpr 0x55936cb5d1d0 <print.c:173:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
`-ImplicitCastExpr 0x55936cb5d1b8 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5d190 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.17]->sizecode
  19: ImplicitCastExpr 0x55936cb5d228 <print.c:173:4, col:7> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5d1d0 <col:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
  `-ImplicitCastExpr 0x55936cb5d1b8 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5d190 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B25.18] (ImplicitCastExpr, LValueToRValue, int)
  20: IntegerLiteral 0x55936cb5d208 <print.c:158:19> 'int' 1
1
  21: BinaryOperator 0x55936cb5d240 <print.c:173:4, line:158:19> 'int' '=='
|-ImplicitCastExpr 0x55936cb5d228 <line:173:4, col:7> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5d1d0 <col:4, col:7> 'const int' lvalue ->sizecode 0x55936cb1c538
|   `-ImplicitCastExpr 0x55936cb5d1b8 <col:4> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5d190 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5d208 <line:158:19> 'int' 1
[B25.19] == [B25.20]
   T: ([B25.21]) ? ... : ...
   Preds (2): B26 B27
   Succs (2): B23 B24

 [B26]
   1: StringLiteral 0x55936cb5cf40 <print.c:171:23> 'char [5]' lvalue "main"
"main"
   2: ImplicitCastExpr 0x55936cb5cfa0 <print.c:171:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5cf40 <col:23> 'char [5]' lvalue "main"
[B26.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B28
   Succs (1): B25

 [B27]
   1: StringLiteral 0x55936cb5cf70 <print.c:171:30> 'char [9]' lvalue "function"
"function"
   2: ImplicitCastExpr 0x55936cb5cfb8 <print.c:171:30> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5cf70 <col:30> 'char [9]' lvalue "function"
[B27.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   Preds (1): B28
   Succs (1): B25

 [B28]
   1: DeclRefExpr 0x55936cb5cd88 <print.c:170:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
printf
   2: ImplicitCastExpr 0x55936cb5d578 <print.c:170:2> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55936cb5cd88 <col:2> 'int (const char *, ...)' Function 0x55936ca0d558 'printf' 'int (const char *, ...)'
[B28.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, ...))
   3: StringLiteral 0x55936cb5cde8 <print.c:170:9> 'char [51]' lvalue "\n%s <%s:%d,%d> (%d instruction%s, %d bytes at %p)\n"
"\n%s <%s:%d,%d> (%d instruction%s, %d bytes at %p)\n"
   4: ImplicitCastExpr 0x55936cb5d600 <print.c:170:9> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5cde8 <col:9> 'char [51]' lvalue "\n%s <%s:%d,%d> (%d instruction%s, %d bytes at %p)\n"
[B28.3] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   5: ImplicitCastExpr 0x55936cb5d618 <print.c:170:9> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5d600 <col:9> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5cde8 <col:9> 'char [51]' lvalue "\n%s <%s:%d,%d> (%d instruction%s, %d bytes at %p)\n"
[B28.4] (ImplicitCastExpr, BitCast, const char *)
   6: DeclRefExpr 0x55936cb5ce48 <print.c:171:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   7: ImplicitCastExpr 0x55936cb5ce70 <print.c:171:4> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5ce48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B28.6] (ImplicitCastExpr, LValueToRValue, const Proto *)
   8: MemberExpr 0x55936cb5ce88 <print.c:171:4, col:7> 'const int' lvalue ->linedefined 0x55936cb1c6b8
`-ImplicitCastExpr 0x55936cb5ce70 <col:4> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5ce48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B28.7]->linedefined
   9: ImplicitCastExpr 0x55936cb5cee0 <print.c:171:4, col:7> 'int' <LValueToRValue>
`-MemberExpr 0x55936cb5ce88 <col:4, col:7> 'const int' lvalue ->linedefined 0x55936cb1c6b8
  `-ImplicitCastExpr 0x55936cb5ce70 <col:4> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5ce48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B28.8] (ImplicitCastExpr, LValueToRValue, int)
  10: IntegerLiteral 0x55936cb5cec0 <print.c:171:20> 'int' 0
0
  11: BinaryOperator 0x55936cb5cef8 <print.c:171:4, col:20> 'int' '=='
|-ImplicitCastExpr 0x55936cb5cee0 <col:4, col:7> 'int' <LValueToRValue>
| `-MemberExpr 0x55936cb5ce88 <col:4, col:7> 'const int' lvalue ->linedefined 0x55936cb1c6b8
|   `-ImplicitCastExpr 0x55936cb5ce70 <col:4> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x55936cb5ce48 <col:4> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5cec0 <col:20> 'int' 0
[B28.9] == [B28.10]
   T: ([B28.11]) ? ... : ...
   Preds (3): B29 B30 B32
   Succs (2): B26 B27

 [B29]
   1: StringLiteral 0x55936cb5cc90 <print.c:169:5> 'char [9]' lvalue "(string)"
"(string)"
   2: ImplicitCastExpr 0x55936cb5ccc0 <print.c:169:5> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5cc90 <col:5> 'char [9]' lvalue "(string)"
[B29.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x55936cb5ccd8 <print.c:169:5> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5ccc0 <col:5> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5cc90 <col:5> 'char [9]' lvalue "(string)"
[B29.2] (ImplicitCastExpr, BitCast, const char *)
   4: DeclRefExpr 0x55936cb5cc68 <print.c:169:3> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
   5: BinaryOperator 0x55936cb5ccf0 <print.c:169:3, col:5> 'const char *' '='
|-DeclRefExpr 0x55936cb5cc68 <col:3> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
`-ImplicitCastExpr 0x55936cb5ccd8 <col:5> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5ccc0 <col:5> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5cc90 <col:5> 'char [9]' lvalue "(string)"
[B29.4] = [B29.3]
   Preds (1): B31
   Succs (1): B28

 [B30]
   1: StringLiteral 0x55936cb5cbd8 <print.c:167:5> 'char [10]' lvalue "(bstring)"
"(bstring)"
   2: ImplicitCastExpr 0x55936cb5cc10 <print.c:167:5> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5cbd8 <col:5> 'char [10]' lvalue "(bstring)"
[B30.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x55936cb5cc28 <print.c:167:5> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55936cb5cc10 <col:5> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55936cb5cbd8 <col:5> 'char [10]' lvalue "(bstring)"
[B30.2] (ImplicitCastExpr, BitCast, const char *)
   4: DeclRefExpr 0x55936cb5cbb0 <print.c:167:3> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
   5: BinaryOperator 0x55936cb5cc40 <print.c:167:3, col:5> 'const char *' '='
|-DeclRefExpr 0x55936cb5cbb0 <col:3> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
`-ImplicitCastExpr 0x55936cb5cc28 <col:5> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55936cb5cc10 <col:5> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55936cb5cbd8 <col:5> 'char [10]' lvalue "(bstring)"
[B30.4] = [B30.3]
   Preds (1): B31
   Succs (1): B28

 [B31]
   1: DeclRefExpr 0x55936cb5ca38 <print.c:166:12> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
   2: ImplicitCastExpr 0x55936cb5ca60 <print.c:166:12> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5ca38 <col:12> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B31.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55936cb5ca78 <print.c:166:11, col:12> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55936cb5ca60 <col:12> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5ca38 <col:12> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
*[B31.2]
   4: ImplicitCastExpr 0x55936cb5cb28 <print.c:166:11, col:12> 'char' <LValueToRValue>
`-UnaryOperator 0x55936cb5ca78 <col:11, col:12> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55936cb5ca60 <col:12> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5ca38 <col:12> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B31.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55936cb5cb40 <print.c:166:11, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5cb28 <col:11, col:12> 'char' <LValueToRValue>
  `-UnaryOperator 0x55936cb5ca78 <col:11, col:12> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55936cb5ca60 <col:12> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5ca38 <col:12> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B31.4] (ImplicitCastExpr, IntegralCast, int)
   6: StringLiteral 0x55936cb5ca98 <./lua.h:27:23> 'char [5]' lvalue "\033Lua"
"\033Lua"
   7: ImplicitCastExpr 0x55936cb5cae8 <./lua.h:27:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55936cb5ca98 <col:23> 'char [5]' lvalue "\033Lua"
[B31.6] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   8: IntegerLiteral 0x55936cb5cac8 <print.c:166:29> 'int' 0
0
   9: ArraySubscriptExpr 0x55936cb5cb00 <./lua.h:27:23, print.c:166:30> 'char' lvalue
|-ImplicitCastExpr 0x55936cb5cae8 <./lua.h:27:23> 'char *' <ArrayToPointerDecay>
| `-StringLiteral 0x55936cb5ca98 <col:23> 'char [5]' lvalue "\033Lua"
`-IntegerLiteral 0x55936cb5cac8 <print.c:166:29> 'int' 0
[B31.7][[B31.8]]
  10: ImplicitCastExpr 0x55936cb5cb58 <./lua.h:27:23, print.c:166:30> 'char' <LValueToRValue>
`-ArraySubscriptExpr 0x55936cb5cb00 <./lua.h:27:23, print.c:166:30> 'char' lvalue
  |-ImplicitCastExpr 0x55936cb5cae8 <./lua.h:27:23> 'char *' <ArrayToPointerDecay>
  | `-StringLiteral 0x55936cb5ca98 <col:23> 'char [5]' lvalue "\033Lua"
  `-IntegerLiteral 0x55936cb5cac8 <print.c:166:29> 'int' 0
[B31.9] (ImplicitCastExpr, LValueToRValue, char)
  11: ImplicitCastExpr 0x55936cb5cb70 <./lua.h:27:23, print.c:166:30> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5cb58 <./lua.h:27:23, print.c:166:30> 'char' <LValueToRValue>
  `-ArraySubscriptExpr 0x55936cb5cb00 <./lua.h:27:23, print.c:166:30> 'char' lvalue
    |-ImplicitCastExpr 0x55936cb5cae8 <./lua.h:27:23> 'char *' <ArrayToPointerDecay>
    | `-StringLiteral 0x55936cb5ca98 <col:23> 'char [5]' lvalue "\033Lua"
    `-IntegerLiteral 0x55936cb5cac8 <print.c:166:29> 'int' 0
[B31.10] (ImplicitCastExpr, IntegralCast, int)
  12: BinaryOperator 0x55936cb5cb88 <print.c:166:11, col:30> 'int' '=='
|-ImplicitCastExpr 0x55936cb5cb40 <col:11, col:12> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5cb28 <col:11, col:12> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55936cb5ca78 <col:11, col:12> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55936cb5ca60 <col:12> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5ca38 <col:12> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
`-ImplicitCastExpr 0x55936cb5cb70 <./lua.h:27:23, print.c:166:30> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x55936cb5cb58 <./lua.h:27:23, print.c:166:30> 'char' <LValueToRValue>
    `-ArraySubscriptExpr 0x55936cb5cb00 <./lua.h:27:23, print.c:166:30> 'char' lvalue
      |-ImplicitCastExpr 0x55936cb5cae8 <./lua.h:27:23> 'char *' <ArrayToPointerDecay>
      | `-StringLiteral 0x55936cb5ca98 <col:23> 'char [5]' lvalue "\033Lua"
      `-IntegerLiteral 0x55936cb5cac8 <print.c:166:29> 'int' 0
[B31.5] == [B31.11]
   T: if [B31.12]
   Preds (1): B33
   Succs (2): B30 B29

 [B32]
   1: DeclRefExpr 0x55936cb5c9f0 <print.c:165:3> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
   2: UnaryOperator 0x55936cb5ca18 <print.c:165:3, col:4> 'const char *' postfix '++'
`-DeclRefExpr 0x55936cb5c9f0 <col:3> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B32.1]++
   Preds (2): B33 B34
   Succs (1): B28

 [B33]
   1: DeclRefExpr 0x55936cb5c8f8 <print.c:164:18> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
   2: ImplicitCastExpr 0x55936cb5c920 <print.c:164:18> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5c8f8 <col:18> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B33.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55936cb5c938 <print.c:164:17, col:18> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55936cb5c920 <col:18> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5c8f8 <col:18> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
*[B33.2]
   4: ImplicitCastExpr 0x55936cb5c970 <print.c:164:17, col:18> 'char' <LValueToRValue>
`-UnaryOperator 0x55936cb5c938 <col:17, col:18> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55936cb5c920 <col:18> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5c8f8 <col:18> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B33.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55936cb5c988 <print.c:164:17, col:18> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5c970 <col:17, col:18> 'char' <LValueToRValue>
  `-UnaryOperator 0x55936cb5c938 <col:17, col:18> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55936cb5c920 <col:18> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5c8f8 <col:18> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B33.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55936cb5c958 <print.c:164:21> 'int' 61
'='
   7: BinaryOperator 0x55936cb5c9a0 <print.c:164:17, col:21> 'int' '=='
|-ImplicitCastExpr 0x55936cb5c988 <col:17, col:18> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5c970 <col:17, col:18> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55936cb5c938 <col:17, col:18> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55936cb5c920 <col:18> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5c8f8 <col:18> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
`-CharacterLiteral 0x55936cb5c958 <col:21> 'int' 61
[B33.5] == [B33.6]
   T: if [B34.15] || [B33.7]
   Preds (1): B34
   Succs (2): B32 B31

 [B34]
   1: DeclRefExpr 0x55936cb5c668 <print.c:163:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
f
   2: ImplicitCastExpr 0x55936cb5c690 <print.c:163:23> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5c668 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B34.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x55936cb5c6a8 <print.c:163:23, col:26> 'TString *const' lvalue ->source 0x55936cb1c418
`-ImplicitCastExpr 0x55936cb5c690 <col:23> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5c668 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
[B34.2]->source
   4: ImplicitCastExpr 0x55936cb5c720 <./lobject.h:210:39, col:42> 'TString *' <LValueToRValue>
`-ParenExpr 0x55936cb5c6e0 <col:39, col:42> 'TString *const' lvalue
  `-MemberExpr 0x55936cb5c6a8 <print.c:163:23, col:26> 'TString *const' lvalue ->source 0x55936cb1c418
    `-ImplicitCastExpr 0x55936cb5c690 <col:23> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5c668 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
([B34.3]) (ImplicitCastExpr, LValueToRValue, TString *)
   5: IntegerLiteral 0x55936cb5c700 <./lobject.h:210:46> 'int' 1
1
   6: BinaryOperator 0x55936cb5c738 <./lobject.h:210:39, col:46> 'TString *' '+'
|-ImplicitCastExpr 0x55936cb5c720 <col:39, col:42> 'TString *' <LValueToRValue>
| `-ParenExpr 0x55936cb5c6e0 <col:39, col:42> 'TString *const' lvalue
|   `-MemberExpr 0x55936cb5c6a8 <print.c:163:23, col:26> 'TString *const' lvalue ->source 0x55936cb1c418
|     `-ImplicitCastExpr 0x55936cb5c690 <col:23> 'const Proto *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5c668 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
`-IntegerLiteral 0x55936cb5c700 <./lobject.h:210:46> 'int' 1
[B34.4] + [B34.5]
   7: CStyleCastExpr 0x55936cb5c7c8 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x55936cb5c7a8 <col:26, col:30> 'TString *'
  `-BinaryOperator 0x55936cb5c738 <./lobject.h:210:39, col:46> 'TString *' '+'
    |-ImplicitCastExpr 0x55936cb5c720 <col:39, col:42> 'TString *' <LValueToRValue>
    | `-ParenExpr 0x55936cb5c6e0 <col:39, col:42> 'TString *const' lvalue
    |   `-MemberExpr 0x55936cb5c6a8 <print.c:163:23, col:26> 'TString *const' lvalue ->source 0x55936cb1c418
    |     `-ImplicitCastExpr 0x55936cb5c690 <col:23> 'const Proto *' <LValueToRValue>
    |       `-DeclRefExpr 0x55936cb5c668 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
    `-IntegerLiteral 0x55936cb5c700 <./lobject.h:210:46> 'int' 1
(const char *)([B34.6]) (CStyleCastExpr, BitCast, const char *)
   8: DeclStmt 0x55936cb5c810 <print.c:163:2, col:33>col:14
`-VarDecl 0x55936cb5c608 <col:2, ./llimits.h:75:31> print.c:163:14 used s 'const char *' cinit
  `-ParenExpr 0x55936cb5c7f0 <./llimits.h:75:22, col:31> 'const char *'
    `-CStyleCastExpr 0x55936cb5c7c8 <col:23, col:30> 'const char *' <BitCast>
      `-ParenExpr 0x55936cb5c7a8 <col:26, col:30> 'TString *'
        `-BinaryOperator 0x55936cb5c738 <./lobject.h:210:39, col:46> 'TString *' '+'
          |-ImplicitCastExpr 0x55936cb5c720 <col:39, col:42> 'TString *' <LValueToRValue>
          | `-ParenExpr 0x55936cb5c6e0 <col:39, col:42> 'TString *const' lvalue
          |   `-MemberExpr 0x55936cb5c6a8 <print.c:163:23, col:26> 'TString *const' lvalue ->source 0x55936cb1c418
          |     `-ImplicitCastExpr 0x55936cb5c690 <col:23> 'const Proto *' <LValueToRValue>
          |       `-DeclRefExpr 0x55936cb5c668 <col:23> 'const Proto *' lvalue ParmVar 0x55936cb5c4c0 'f' 'const Proto *'
          `-IntegerLiteral 0x55936cb5c700 <./lobject.h:210:46> 'int' 1
const char *s = ((const char *)((f->source) + 1));
   9: DeclRefExpr 0x55936cb5c828 <print.c:164:7> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
s
  10: ImplicitCastExpr 0x55936cb5c850 <print.c:164:7> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55936cb5c828 <col:7> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B34.9] (ImplicitCastExpr, LValueToRValue, const char *)
  11: UnaryOperator 0x55936cb5c868 <print.c:164:6, col:7> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55936cb5c850 <col:7> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55936cb5c828 <col:7> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
*[B34.10]
  12: ImplicitCastExpr 0x55936cb5c8a0 <print.c:164:6, col:7> 'char' <LValueToRValue>
`-UnaryOperator 0x55936cb5c868 <col:6, col:7> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55936cb5c850 <col:7> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55936cb5c828 <col:7> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B34.11] (ImplicitCastExpr, LValueToRValue, char)
  13: ImplicitCastExpr 0x55936cb5c8b8 <print.c:164:6, col:7> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55936cb5c8a0 <col:6, col:7> 'char' <LValueToRValue>
  `-UnaryOperator 0x55936cb5c868 <col:6, col:7> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55936cb5c850 <col:7> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55936cb5c828 <col:7> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
[B34.12] (ImplicitCastExpr, IntegralCast, int)
  14: CharacterLiteral 0x55936cb5c888 <print.c:164:10> 'int' 64
'@'
  15: BinaryOperator 0x55936cb5c8d0 <print.c:164:6, col:10> 'int' '=='
|-ImplicitCastExpr 0x55936cb5c8b8 <col:6, col:7> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55936cb5c8a0 <col:6, col:7> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55936cb5c868 <col:6, col:7> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55936cb5c850 <col:7> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55936cb5c828 <col:7> 'const char *' lvalue Var 0x55936cb5c608 's' 'const char *'
`-CharacterLiteral 0x55936cb5c888 <col:10> 'int' 64
[B34.13] == [B34.14]
   T: [B34.15] || ...
   Preds (1): B35
   Succs (2): B32 B33

 [B0 (EXIT)]
   Preds (1): B1
