static void codearith(FuncState *fs, OpCode op, expdesc *e1, expdesc *e2)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: DeclRefExpr 0x5637768e2130 <lcode.c:667:20> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x5637768e2218 <lcode.c:667:20> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e2130 <col:20> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x5637768e2158 <lcode.c:667:33> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e2280 <lcode.c:667:33> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e2158 <col:33> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e2180 <lcode.c:667:37> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
op
   6: ImplicitCastExpr 0x5637768e2298 <lcode.c:667:37> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768e2180 <col:37> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
[B1.5] (ImplicitCastExpr, LValueToRValue, OpCode)
   7: IntegerLiteral 0x5637768e21a8 <lcode.c:667:41> 'int' 0
0
   8: DeclRefExpr 0x5637768e21c8 <lcode.c:667:44> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
o1
   9: ImplicitCastExpr 0x5637768e22b0 <lcode.c:667:44> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e21c8 <col:44> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
[B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: DeclRefExpr 0x5637768e21f0 <lcode.c:667:48> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
o2
  11: ImplicitCastExpr 0x5637768e22c8 <lcode.c:667:48> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e21f0 <col:48> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
[B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: CallExpr 0x5637768e2230 <lcode.c:667:20, col:50> 'int'
|-ImplicitCastExpr 0x5637768e2218 <col:20> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e2130 <col:20> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x5637768e2280 <col:33> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e2158 <col:33> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
|-ImplicitCastExpr 0x5637768e2298 <col:37> 'OpCode':'OpCode' <LValueToRValue>
| `-DeclRefExpr 0x5637768e2180 <col:37> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
|-IntegerLiteral 0x5637768e21a8 <col:41> 'int' 0
|-ImplicitCastExpr 0x5637768e22b0 <col:44> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768e21c8 <col:44> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
`-ImplicitCastExpr 0x5637768e22c8 <col:48> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768e21f0 <col:48> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
[B1.2]([B1.4], [B1.6], [B1.7], [B1.9], [B1.11])
  13: DeclRefExpr 0x5637768e2048 <lcode.c:667:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
e1
  14: ImplicitCastExpr 0x5637768e2070 <lcode.c:667:5> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e2048 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B1.13] (ImplicitCastExpr, LValueToRValue, expdesc *)
  15: MemberExpr 0x5637768e2088 <lcode.c:667:5, col:9> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768e2070 <col:5> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e2048 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B1.14]->u
  16: MemberExpr 0x5637768e20c0 <lcode.c:667:5, col:11> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768e2088 <col:5, col:9> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768e2070 <col:5> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768e2048 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B1.15].s
  17: MemberExpr 0x5637768e20f8 <lcode.c:667:5, col:13> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768e20c0 <col:5, col:11> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768e2088 <col:5, col:9> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768e2070 <col:5> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e2048 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B1.16].info
  18: BinaryOperator 0x5637768e22e0 <lcode.c:667:5, col:50> 'int' '='
|-MemberExpr 0x5637768e20f8 <col:5, col:13> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768e20c0 <col:5, col:11> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768e2088 <col:5, col:9> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768e2070 <col:5> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768e2048 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
`-CallExpr 0x5637768e2230 <col:20, col:50> 'int'
  |-ImplicitCastExpr 0x5637768e2218 <col:20> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768e2130 <col:20> 'int (FuncState *, OpCode, int, int, int)' Function 0x56377687fb68 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x5637768e2280 <col:33> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e2158 <col:33> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x5637768e2298 <col:37> 'OpCode':'OpCode' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e2180 <col:37> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
  |-IntegerLiteral 0x5637768e21a8 <col:41> 'int' 0
  |-ImplicitCastExpr 0x5637768e22b0 <col:44> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x5637768e21c8 <col:44> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
  `-ImplicitCastExpr 0x5637768e22c8 <col:48> 'int' <LValueToRValue>
    `-DeclRefExpr 0x5637768e21f0 <col:48> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
[B1.17] = [B1.12]
  19: DeclRefExpr 0x5637768e2380 <lcode.c:668:13> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
VRELOCABLE
  20: ImplicitCastExpr 0x5637768e23a8 <lcode.c:668:13> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768e2380 <col:13> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B1.19] (ImplicitCastExpr, IntegralCast, expkind)
  21: DeclRefExpr 0x5637768e2308 <lcode.c:668:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
e1
  22: ImplicitCastExpr 0x5637768e2330 <lcode.c:668:5> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e2308 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B1.21] (ImplicitCastExpr, LValueToRValue, expdesc *)
  23: MemberExpr 0x5637768e2348 <lcode.c:668:5, col:9> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768e2330 <col:5> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e2308 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B1.22]->k
  24: BinaryOperator 0x5637768e23c0 <lcode.c:668:5, col:13> 'expkind':'expkind' '='
|-MemberExpr 0x5637768e2348 <col:5, col:9> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768e2330 <col:5> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e2308 <col:5> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e23a8 <col:13> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768e2380 <col:13> 'int' EnumConstant 0x56377687d180 'VRELOCABLE' 'int'
[B1.23] = [B1.20]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768e1e00 <lcode.c:664:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   2: ImplicitCastExpr 0x5637768e1e78 <lcode.c:664:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1e00 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e1e28 <lcode.c:664:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e1ec8 <lcode.c:664:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1e28 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e1e50 <lcode.c:664:19> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
e2
   6: ImplicitCastExpr 0x5637768e1ee0 <lcode.c:664:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1e50 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B2.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e1e90 <lcode.c:664:7, col:21> 'void'
|-ImplicitCastExpr 0x5637768e1e78 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1e00 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e1ec8 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1e28 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e1ee0 <col:19> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1e50 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x5637768e1ef8 <lcode.c:665:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   9: ImplicitCastExpr 0x5637768e1f70 <lcode.c:665:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1ef8 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B2.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  10: DeclRefExpr 0x5637768e1f20 <lcode.c:665:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768e1fc0 <lcode.c:665:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1f20 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B2.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768e1f48 <lcode.c:665:19> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
e1
  13: ImplicitCastExpr 0x5637768e1fd8 <lcode.c:665:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1f48 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B2.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: CallExpr 0x5637768e1f88 <lcode.c:665:7, col:21> 'void'
|-ImplicitCastExpr 0x5637768e1f70 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1ef8 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e1fc0 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1f20 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e1fd8 <col:19> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1f48 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B2.9]([B2.11], [B2.13])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5637768e1bf0 <lcode.c:660:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   2: ImplicitCastExpr 0x5637768e1c68 <lcode.c:660:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1bf0 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e1c18 <lcode.c:660:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e1cb8 <lcode.c:660:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1c18 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e1c40 <lcode.c:660:19> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
e1
   6: ImplicitCastExpr 0x5637768e1cd0 <lcode.c:660:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1c40 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B3.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e1c80 <lcode.c:660:7, col:21> 'void'
|-ImplicitCastExpr 0x5637768e1c68 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1bf0 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e1cb8 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1c18 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e1cd0 <col:19> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1c40 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B3.2]([B3.4], [B3.6])
   8: DeclRefExpr 0x5637768e1ce8 <lcode.c:661:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
freeexp
   9: ImplicitCastExpr 0x5637768e1d60 <lcode.c:661:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1ce8 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
[B3.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
  10: DeclRefExpr 0x5637768e1d10 <lcode.c:661:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x5637768e1db0 <lcode.c:661:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1d10 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B3.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x5637768e1d38 <lcode.c:661:19> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
e2
  13: ImplicitCastExpr 0x5637768e1dc8 <lcode.c:661:19> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1d38 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B3.12] (ImplicitCastExpr, LValueToRValue, expdesc *)
  14: CallExpr 0x5637768e1d78 <lcode.c:661:7, col:21> 'void'
|-ImplicitCastExpr 0x5637768e1d60 <col:7> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1ce8 <col:7> 'void (FuncState *, expdesc *)' Function 0x5637768be6f8 'freeexp' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e1db0 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1d10 <col:15> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e1dc8 <col:19> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1d38 <col:19> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B3.9]([B3.11], [B3.13])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: ConditionalOperator 0x5637768e1978 <lcode.c:657:14, col:69> 'int'
|-ParenExpr 0x5637768e1840 <col:14, col:43> 'int'
| `-BinaryOperator 0x5637768e1818 <col:15, col:37> 'int' '&&'
|   |-BinaryOperator 0x5637768e1730 <col:15, col:21> 'int' '!='
|   | |-ImplicitCastExpr 0x5637768e1700 <col:15> 'unsigned int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x5637768e16e8 <col:15> 'OpCode':'OpCode' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5637768e1698 <col:15> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
|   | `-ImplicitCastExpr 0x5637768e1718 <col:21> 'unsigned int' <IntegralCast>
|   |   `-DeclRefExpr 0x5637768e16c0 <col:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
|   `-BinaryOperator 0x5637768e17f0 <col:31, col:37> 'int' '!='
|     |-ImplicitCastExpr 0x5637768e17c0 <col:31> 'unsigned int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5637768e17a8 <col:31> 'OpCode':'OpCode' <LValueToRValue>
|     |   `-DeclRefExpr 0x5637768e1758 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
|     `-ImplicitCastExpr 0x5637768e17d8 <col:37> 'unsigned int' <IntegralCast>
|       `-DeclRefExpr 0x5637768e1780 <col:37> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
|-CallExpr 0x5637768e18f0 <col:47, col:65> 'int'
| |-ImplicitCastExpr 0x5637768e18d8 <col:47> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5637768e1860 <col:47> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
| |-ImplicitCastExpr 0x5637768e1928 <col:59> 'FuncState *' <LValueToRValue>
| | `-DeclRefExpr 0x5637768e1888 <col:59> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
| `-ImplicitCastExpr 0x5637768e1940 <col:63> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e18b0 <col:63> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
`-IntegerLiteral 0x5637768e1958 <col:69> 'int' 0
([B8.6] && [B7.6]) ? [B5.7] : [B6.1]
   2: DeclStmt 0x5637768e19a8 <lcode.c:657:5, col:70>col:9
`-VarDecl 0x5637768e1638 <col:5, col:69> col:9 used o2 'int' cinit
  `-ConditionalOperator 0x5637768e1978 <col:14, col:69> 'int'
    |-ParenExpr 0x5637768e1840 <col:14, col:43> 'int'
    | `-BinaryOperator 0x5637768e1818 <col:15, col:37> 'int' '&&'
    |   |-BinaryOperator 0x5637768e1730 <col:15, col:21> 'int' '!='
    |   | |-ImplicitCastExpr 0x5637768e1700 <col:15> 'unsigned int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x5637768e16e8 <col:15> 'OpCode':'OpCode' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x5637768e1698 <col:15> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
    |   | `-ImplicitCastExpr 0x5637768e1718 <col:21> 'unsigned int' <IntegralCast>
    |   |   `-DeclRefExpr 0x5637768e16c0 <col:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
    |   `-BinaryOperator 0x5637768e17f0 <col:31, col:37> 'int' '!='
    |     |-ImplicitCastExpr 0x5637768e17c0 <col:31> 'unsigned int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5637768e17a8 <col:31> 'OpCode':'OpCode' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5637768e1758 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
    |     `-ImplicitCastExpr 0x5637768e17d8 <col:37> 'unsigned int' <IntegralCast>
    |       `-DeclRefExpr 0x5637768e1780 <col:37> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
    |-CallExpr 0x5637768e18f0 <col:47, col:65> 'int'
    | |-ImplicitCastExpr 0x5637768e18d8 <col:47> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5637768e1860 <col:47> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
    | |-ImplicitCastExpr 0x5637768e1928 <col:59> 'FuncState *' <LValueToRValue>
    | | `-DeclRefExpr 0x5637768e1888 <col:59> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
    | `-ImplicitCastExpr 0x5637768e1940 <col:63> 'expdesc *' <LValueToRValue>
    |   `-DeclRefExpr 0x5637768e18b0 <col:63> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
    `-IntegerLiteral 0x5637768e1958 <col:69> 'int' 0
int o2 = (op != OP_UNM && op != OP_LEN) ? luaK_exp2RK(fs, e2) : 0;
   3: DeclRefExpr 0x5637768e1a38 <lcode.c:658:14> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
   4: ImplicitCastExpr 0x5637768e1ab0 <lcode.c:658:14> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1a38 <col:14> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B4.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   5: DeclRefExpr 0x5637768e1a60 <lcode.c:658:26> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
   6: ImplicitCastExpr 0x5637768e1b00 <lcode.c:658:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1a60 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B4.5] (ImplicitCastExpr, LValueToRValue, FuncState *)
   7: DeclRefExpr 0x5637768e1a88 <lcode.c:658:30> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
e1
   8: ImplicitCastExpr 0x5637768e1b18 <lcode.c:658:30> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1a88 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B4.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: CallExpr 0x5637768e1ac8 <lcode.c:658:14, col:32> 'int'
|-ImplicitCastExpr 0x5637768e1ab0 <col:14> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1a38 <col:14> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e1b00 <col:26> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1a60 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e1b18 <col:30> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1a88 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B4.4]([B4.6], [B4.8])
  10: DeclStmt 0x5637768e1b30 <lcode.c:658:5, col:33>col:9
`-VarDecl 0x5637768e19d8 <col:5, col:32> col:9 used o1 'int' cinit
  `-CallExpr 0x5637768e1ac8 <col:14, col:32> 'int'
    |-ImplicitCastExpr 0x5637768e1ab0 <col:14> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768e1a38 <col:14> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
    |-ImplicitCastExpr 0x5637768e1b00 <col:26> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768e1a60 <col:26> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768e1b18 <col:30> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768e1a88 <col:30> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
int o1 = luaK_exp2RK(fs, e1);
  11: DeclRefExpr 0x5637768e1b48 <lcode.c:659:9> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
o1
  12: ImplicitCastExpr 0x5637768e1b98 <lcode.c:659:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e1b48 <col:9> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
[B4.11] (ImplicitCastExpr, LValueToRValue, int)
  13: DeclRefExpr 0x5637768e1b70 <lcode.c:659:14> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
o2
  14: ImplicitCastExpr 0x5637768e1bb0 <lcode.c:659:14> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768e1b70 <col:14> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
[B4.13] (ImplicitCastExpr, LValueToRValue, int)
  15: BinaryOperator 0x5637768e1bc8 <lcode.c:659:9, col:14> 'int' '>'
|-ImplicitCastExpr 0x5637768e1b98 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1b48 <col:9> 'int' lvalue Var 0x5637768e19d8 'o1' 'int'
`-ImplicitCastExpr 0x5637768e1bb0 <col:14> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1b70 <col:14> 'int' lvalue Var 0x5637768e1638 'o2' 'int'
[B4.12] > [B4.14]
   T: if [B4.15]
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x5637768e1860 <lcode.c:657:47> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
luaK_exp2RK
   2: ImplicitCastExpr 0x5637768e18d8 <lcode.c:657:47> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1860 <col:47> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768e1888 <lcode.c:657:59> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768e1928 <lcode.c:657:59> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768e1888 <col:59> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768e18b0 <lcode.c:657:63> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
e2
   6: ImplicitCastExpr 0x5637768e1940 <lcode.c:657:63> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e18b0 <col:63> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B5.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768e18f0 <lcode.c:657:47, col:65> 'int'
|-ImplicitCastExpr 0x5637768e18d8 <col:47> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1860 <col:47> 'int (FuncState *, expdesc *)' Function 0x5637768d3f88 'luaK_exp2RK' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768e1928 <col:59> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1888 <col:59> 'FuncState *' lvalue ParmVar 0x5637768e1120 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768e1940 <col:63> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e18b0 <col:63> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B5.2]([B5.4], [B5.6])
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: IntegerLiteral 0x5637768e1958 <lcode.c:657:69> 'int' 0
0
   Preds (2): B7 B8
   Succs (1): B4

 [B7]
   1: DeclRefExpr 0x5637768e1758 <lcode.c:657:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
op
   2: ImplicitCastExpr 0x5637768e17a8 <lcode.c:657:31> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768e1758 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
[B7.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x5637768e17c0 <lcode.c:657:31> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e17a8 <col:31> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1758 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
[B7.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x5637768e1780 <lcode.c:657:37> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
OP_LEN
   5: ImplicitCastExpr 0x5637768e17d8 <lcode.c:657:37> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768e1780 <col:37> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
[B7.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: BinaryOperator 0x5637768e17f0 <lcode.c:657:31, col:37> 'int' '!='
|-ImplicitCastExpr 0x5637768e17c0 <col:31> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768e17a8 <col:31> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e1758 <col:31> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x5637768e17d8 <col:37> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768e1780 <col:37> 'int' EnumConstant 0x56377686ba80 'OP_LEN' 'int'
[B7.3] != [B7.5]
   T: ([B8.6] && [B7.6]) ? ... : ...
   Preds (1): B8
   Succs (2): B5 B6

 [B8]
   1: DeclRefExpr 0x5637768e1698 <lcode.c:657:15> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
op
   2: ImplicitCastExpr 0x5637768e16e8 <lcode.c:657:15> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768e1698 <col:15> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
[B8.1] (ImplicitCastExpr, LValueToRValue, OpCode)
   3: ImplicitCastExpr 0x5637768e1700 <lcode.c:657:15> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768e16e8 <col:15> 'OpCode':'OpCode' <LValueToRValue>
  `-DeclRefExpr 0x5637768e1698 <col:15> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
[B8.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: DeclRefExpr 0x5637768e16c0 <lcode.c:657:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
OP_UNM
   5: ImplicitCastExpr 0x5637768e1718 <lcode.c:657:21> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768e16c0 <col:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
[B8.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: BinaryOperator 0x5637768e1730 <lcode.c:657:15, col:21> 'int' '!='
|-ImplicitCastExpr 0x5637768e1700 <col:15> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768e16e8 <col:15> 'OpCode':'OpCode' <LValueToRValue>
|   `-DeclRefExpr 0x5637768e1698 <col:15> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
`-ImplicitCastExpr 0x5637768e1718 <col:21> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768e16c0 <col:21> 'int' EnumConstant 0x56377686b9f0 'OP_UNM' 'int'
[B8.3] != [B8.5]
   T: [B8.6] && ...
   Preds (1): B10
   Succs (2): B7 B6

 [B9]
   1: ReturnStmt 0x5637768e1608 <lcode.c:655:5>
return;
   Preds (1): B10
   Succs (1): B0

 [B10]
   1: DeclRefExpr 0x5637768e1470 <lcode.c:654:7> 'int (OpCode, expdesc *, expdesc *)' Function 0x5637768df138 'constfolding' 'int (OpCode, expdesc *, expdesc *)'
constfolding
   2: ImplicitCastExpr 0x5637768e1568 <lcode.c:654:7> 'int (*)(OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768e1470 <col:7> 'int (OpCode, expdesc *, expdesc *)' Function 0x5637768df138 'constfolding' 'int (OpCode, expdesc *, expdesc *)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(OpCode, expdesc *, expdesc *))
   3: DeclRefExpr 0x5637768e1498 <lcode.c:654:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
op
   4: ImplicitCastExpr 0x5637768e15c0 <lcode.c:654:20> 'OpCode':'OpCode' <LValueToRValue>
`-DeclRefExpr 0x5637768e1498 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
[B10.3] (ImplicitCastExpr, LValueToRValue, OpCode)
   5: DeclRefExpr 0x5637768e14c0 <lcode.c:654:24> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
e1
   6: ImplicitCastExpr 0x5637768e15d8 <lcode.c:654:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e14c0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
[B10.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: DeclRefExpr 0x5637768e14e8 <lcode.c:654:28> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
e2
   8: ImplicitCastExpr 0x5637768e15f0 <lcode.c:654:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768e14e8 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B10.7] (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: CallExpr 0x5637768e1580 <lcode.c:654:7, col:30> 'int'
|-ImplicitCastExpr 0x5637768e1568 <col:7> 'int (*)(OpCode, expdesc *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768e1470 <col:7> 'int (OpCode, expdesc *, expdesc *)' Function 0x5637768df138 'constfolding' 'int (OpCode, expdesc *, expdesc *)'
|-ImplicitCastExpr 0x5637768e15c0 <col:20> 'OpCode':'OpCode' <LValueToRValue>
| `-DeclRefExpr 0x5637768e1498 <col:20> 'OpCode':'OpCode' lvalue ParmVar 0x5637768e1190 'op' 'OpCode':'OpCode'
|-ImplicitCastExpr 0x5637768e15d8 <col:24> 'expdesc *' <LValueToRValue>
| `-DeclRefExpr 0x5637768e14c0 <col:24> 'expdesc *' lvalue ParmVar 0x5637768e1200 'e1' 'expdesc *'
`-ImplicitCastExpr 0x5637768e15f0 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768e14e8 <col:28> 'expdesc *' lvalue ParmVar 0x5637768e1270 'e2' 'expdesc *'
[B10.2]([B10.4], [B10.6], [B10.8])
   T: if [B10.9]
   Preds (1): B11
   Succs (2): B9 B8

 [B0 (EXIT)]
   Preds (2): B1 B9
