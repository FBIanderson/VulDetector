static void body(LexState *ls, expdesc *e, int needself, int line)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x558fa8f1e038 <lparser.c:586:3> 'void (LexState *)' Function 0x558fa8f1b908 'parlist' 'void (LexState *)'
parlist
   2: ImplicitCastExpr 0x558fa8f1e088 <lparser.c:586:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1e038 <col:3> 'void (LexState *)' Function 0x558fa8f1b908 'parlist' 'void (LexState *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x558fa8f1e060 <lparser.c:586:11> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1e0d0 <lparser.c:586:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e060 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f1e0a0 <lparser.c:586:3, col:13> 'void'
|-ImplicitCastExpr 0x558fa8f1e088 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1e038 <col:3> 'void (LexState *)' Function 0x558fa8f1b908 'parlist' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f1e0d0 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1e060 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.2]([B1.4])
   6: DeclRefExpr 0x558fa8f1e0e8 <lparser.c:587:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
   7: ImplicitCastExpr 0x558fa8f1e150 <lparser.c:587:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1e0e8 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B1.6] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   8: DeclRefExpr 0x558fa8f1e110 <lparser.c:587:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f1e1a0 <lparser.c:587:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e110 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: CharacterLiteral 0x558fa8f1e138 <lparser.c:587:17> 'int' 41
')'
  11: CallExpr 0x558fa8f1e168 <lparser.c:587:3, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f1e150 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1e0e8 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f1e1a0 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1e110 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f1e138 <col:17> 'int' 41
[B1.7]([B1.9], [B1.10])
  12: DeclRefExpr 0x558fa8f1e1b8 <lparser.c:588:3> 'void (LexState *)' Function 0x558fa8ee9fe0 'chunk' 'void (LexState *)'
chunk
  13: ImplicitCastExpr 0x558fa8f1e208 <lparser.c:588:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1e1b8 <col:3> 'void (LexState *)' Function 0x558fa8ee9fe0 'chunk' 'void (LexState *)'
[B1.12] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  14: DeclRefExpr 0x558fa8f1e1e0 <lparser.c:588:9> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x558fa8f1e250 <lparser.c:588:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e1e0 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: CallExpr 0x558fa8f1e220 <lparser.c:588:3, col:11> 'void'
|-ImplicitCastExpr 0x558fa8f1e208 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1e1b8 <col:3> 'void (LexState *)' Function 0x558fa8ee9fe0 'chunk' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f1e250 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1e1e0 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.13]([B1.15])
  17: DeclRefExpr 0x558fa8f1e318 <lparser.c:589:31> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  18: ImplicitCastExpr 0x558fa8f1e340 <lparser.c:589:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e318 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.17] (ImplicitCastExpr, LValueToRValue, LexState *)
  19: MemberExpr 0x558fa8f1e358 <lparser.c:589:31, col:35> 'int' lvalue ->linenumber 0x558fa8ea0308
`-ImplicitCastExpr 0x558fa8f1e340 <col:31> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1e318 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.18]->linenumber
  20: ImplicitCastExpr 0x558fa8f1e390 <lparser.c:589:31, col:35> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f1e358 <col:31, col:35> 'int' lvalue ->linenumber 0x558fa8ea0308
  `-ImplicitCastExpr 0x558fa8f1e340 <col:31> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f1e318 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: DeclRefExpr 0x558fa8f1e268 <lparser.c:589:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
new_fs
  22: MemberExpr 0x558fa8f1e290 <lparser.c:589:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
`-DeclRefExpr 0x558fa8f1e268 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B1.21].f
  23: ImplicitCastExpr 0x558fa8f1e2c8 <lparser.c:589:3, col:10> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f1e290 <col:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
  `-DeclRefExpr 0x558fa8f1e268 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B1.22] (ImplicitCastExpr, LValueToRValue, Proto *)
  24: MemberExpr 0x558fa8f1e2e0 <lparser.c:589:3, col:13> 'int' lvalue ->lastlinedefined 0x558fa8e8f6e8
`-ImplicitCastExpr 0x558fa8f1e2c8 <col:3, col:10> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f1e290 <col:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
    `-DeclRefExpr 0x558fa8f1e268 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B1.23]->lastlinedefined
  25: BinaryOperator 0x558fa8f1e3a8 <lparser.c:589:3, col:35> 'int' '='
|-MemberExpr 0x558fa8f1e2e0 <col:3, col:13> 'int' lvalue ->lastlinedefined 0x558fa8e8f6e8
| `-ImplicitCastExpr 0x558fa8f1e2c8 <col:3, col:10> 'Proto *' <LValueToRValue>
|   `-MemberExpr 0x558fa8f1e290 <col:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
|     `-DeclRefExpr 0x558fa8f1e268 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
`-ImplicitCastExpr 0x558fa8f1e390 <col:31, col:35> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f1e358 <col:31, col:35> 'int' lvalue ->linenumber 0x558fa8ea0308
    `-ImplicitCastExpr 0x558fa8f1e340 <col:31> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f1e318 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.24] = [B1.20]
  26: DeclRefExpr 0x558fa8f1e3d0 <lparser.c:590:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
  27: ImplicitCastExpr 0x558fa8f1e498 <lparser.c:590:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1e3d0 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B1.26] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
  28: DeclRefExpr 0x558fa8f1e3f8 <lparser.c:590:15> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  29: ImplicitCastExpr 0x558fa8f1e4f8 <lparser.c:590:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e3f8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.28] (ImplicitCastExpr, LValueToRValue, LexState *)
  30: DeclRefExpr 0x558fa8f1e420 <lparser.c:590:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
TK_END
  31: DeclRefExpr 0x558fa8f1e448 <lparser.c:590:27> 'int' EnumConstant 0x558fa8e9e1d0 'TK_FUNCTION' 'int'
TK_FUNCTION
  32: DeclRefExpr 0x558fa8f1e470 <lparser.c:590:40> 'int' lvalue ParmVar 0x558fa8f1d5d0 'line' 'int'
line
  33: ImplicitCastExpr 0x558fa8f1e510 <lparser.c:590:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e470 <col:40> 'int' lvalue ParmVar 0x558fa8f1d5d0 'line' 'int'
[B1.32] (ImplicitCastExpr, LValueToRValue, int)
  34: CallExpr 0x558fa8f1e4b0 <lparser.c:590:3, col:44> 'void'
|-ImplicitCastExpr 0x558fa8f1e498 <col:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1e3d0 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f1e4f8 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1e3f8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
|-DeclRefExpr 0x558fa8f1e420 <col:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
|-DeclRefExpr 0x558fa8f1e448 <col:27> 'int' EnumConstant 0x558fa8e9e1d0 'TK_FUNCTION' 'int'
`-ImplicitCastExpr 0x558fa8f1e510 <col:40> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1e470 <col:40> 'int' lvalue ParmVar 0x558fa8f1d5d0 'line' 'int'
[B1.27]([B1.29], [B1.30], [B1.31], [B1.33])
  35: DeclRefExpr 0x558fa8f1e528 <lparser.c:591:3> 'void (LexState *)' Function 0x558fa8f092a0 'close_func' 'void (LexState *)'
close_func
  36: ImplicitCastExpr 0x558fa8f1e578 <lparser.c:591:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1e528 <col:3> 'void (LexState *)' Function 0x558fa8f092a0 'close_func' 'void (LexState *)'
[B1.35] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  37: DeclRefExpr 0x558fa8f1e550 <lparser.c:591:14> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  38: ImplicitCastExpr 0x558fa8f1e5c0 <lparser.c:591:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e550 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.37] (ImplicitCastExpr, LValueToRValue, LexState *)
  39: CallExpr 0x558fa8f1e590 <lparser.c:591:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f1e578 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1e528 <col:3> 'void (LexState *)' Function 0x558fa8f092a0 'close_func' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f1e5c0 <col:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1e550 <col:14> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.36]([B1.38])
  40: DeclRefExpr 0x558fa8f1e5d8 <lparser.c:592:3> 'void (LexState *, FuncState *, expdesc *)' Function 0x558fa8f031f0 'pushclosure' 'void (LexState *, FuncState *, expdesc *)'
pushclosure
  41: ImplicitCastExpr 0x558fa8f1e6f8 <lparser.c:592:3> 'void (*)(LexState *, FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1e5d8 <col:3> 'void (LexState *, FuncState *, expdesc *)' Function 0x558fa8f031f0 'pushclosure' 'void (LexState *, FuncState *, expdesc *)'
[B1.40] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, FuncState *, expdesc *))
  42: DeclRefExpr 0x558fa8f1e600 <lparser.c:592:15> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  43: ImplicitCastExpr 0x558fa8f1e750 <lparser.c:592:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e600 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B1.42] (ImplicitCastExpr, LValueToRValue, LexState *)
  44: DeclRefExpr 0x558fa8f1e628 <lparser.c:592:20> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
new_fs
  45: UnaryOperator 0x558fa8f1e650 <lparser.c:592:19, col:20> 'FuncState *' prefix '&'
`-DeclRefExpr 0x558fa8f1e628 <col:20> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
&[B1.44]
  46: DeclRefExpr 0x558fa8f1e670 <lparser.c:592:28> 'expdesc *' lvalue ParmVar 0x558fa8f1d4e0 'e' 'expdesc *'
e
  47: ImplicitCastExpr 0x558fa8f1e768 <lparser.c:592:28> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1e670 <col:28> 'expdesc *' lvalue ParmVar 0x558fa8f1d4e0 'e' 'expdesc *'
[B1.46] (ImplicitCastExpr, LValueToRValue, expdesc *)
  48: CallExpr 0x558fa8f1e710 <lparser.c:592:3, col:29> 'void'
|-ImplicitCastExpr 0x558fa8f1e6f8 <col:3> 'void (*)(LexState *, FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1e5d8 <col:3> 'void (LexState *, FuncState *, expdesc *)' Function 0x558fa8f031f0 'pushclosure' 'void (LexState *, FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f1e750 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1e600 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
|-UnaryOperator 0x558fa8f1e650 <col:19, col:20> 'FuncState *' prefix '&'
| `-DeclRefExpr 0x558fa8f1e628 <col:20> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
`-ImplicitCastExpr 0x558fa8f1e768 <col:28> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1e670 <col:28> 'expdesc *' lvalue ParmVar 0x558fa8f1d4e0 'e' 'expdesc *'
[B1.41]([B1.43], [B1.45], [B1.47])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f1db80 <lparser.c:157:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
new_localvar
   2: ImplicitCastExpr 0x558fa8f1de98 <lparser.c:157:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1db80 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
   3: DeclRefExpr 0x558fa8f1dba8 <lparser.c:583:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f1def0 <lparser.c:583:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1dba8 <col:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f1dbd0 <lparser.c:157:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
   6: ImplicitCastExpr 0x558fa8f1ddd8 <lparser.c:157:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1dbd0 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B2.5] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
   7: DeclRefExpr 0x558fa8f1dbf8 <lparser.c:583:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
   8: ImplicitCastExpr 0x558fa8f1de30 <lparser.c:583:25> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1dbf8 <col:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B2.7] (ImplicitCastExpr, LValueToRValue, LexState *)
   9: StringLiteral 0x558fa8f1dc58 <lparser.c:157:39, line:583:29> 'char [5]' lvalue "self"
"self"
  10: ImplicitCastExpr 0x558fa8f1de48 <lparser.c:157:39, line:583:29> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f1dc58 <line:157:39, line:583:29> 'char [5]' lvalue "self"
[B2.9] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  11: ImplicitCastExpr 0x558fa8f1de60 <lparser.c:157:39, line:583:29> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f1de48 <line:157:39, line:583:29> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f1dc58 <line:157:39, line:583:29> 'char [5]' lvalue "self"
[B2.10] (ImplicitCastExpr, BitCast, const char *)
  12: UnaryExprOrTypeTraitExpr 0x558fa8f1dce0 <lparser.c:157:46, col:54> 'unsigned long' sizeof
`-ParenExpr 0x558fa8f1dcc0 <col:52, col:54> 'char [5]' lvalue
  `-StringLiteral 0x558fa8f1dc90 <line:583:29> 'char [5]' lvalue "self"
sizeof ("self")
  13: UnaryExprOrTypeTraitExpr 0x558fa8f1dd10 <lparser.c:157:56, col:67> 'unsigned long' sizeof 'char'
sizeof(char)
  14: BinaryOperator 0x558fa8f1dd30 <lparser.c:157:46, col:67> 'unsigned long' '/'
|-UnaryExprOrTypeTraitExpr 0x558fa8f1dce0 <col:46, col:54> 'unsigned long' sizeof
| `-ParenExpr 0x558fa8f1dcc0 <col:52, col:54> 'char [5]' lvalue
|   `-StringLiteral 0x558fa8f1dc90 <line:583:29> 'char [5]' lvalue "self"
`-UnaryExprOrTypeTraitExpr 0x558fa8f1dd10 <line:157:56, col:67> 'unsigned long' sizeof 'char'
[B2.12] / [B2.13]
  15: IntegerLiteral 0x558fa8f1dd78 <lparser.c:157:70> 'int' 1
1
  16: ImplicitCastExpr 0x558fa8f1dd98 <lparser.c:157:70> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x558fa8f1dd78 <col:70> 'int' 1
[B2.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: BinaryOperator 0x558fa8f1ddb0 <lparser.c:157:45, col:70> 'unsigned long' '-'
|-ParenExpr 0x558fa8f1dd58 <col:45, col:68> 'unsigned long'
| `-BinaryOperator 0x558fa8f1dd30 <col:46, col:67> 'unsigned long' '/'
|   |-UnaryExprOrTypeTraitExpr 0x558fa8f1dce0 <col:46, col:54> 'unsigned long' sizeof
|   | `-ParenExpr 0x558fa8f1dcc0 <col:52, col:54> 'char [5]' lvalue
|   |   `-StringLiteral 0x558fa8f1dc90 <line:583:29> 'char [5]' lvalue "self"
|   `-UnaryExprOrTypeTraitExpr 0x558fa8f1dd10 <line:157:56, col:67> 'unsigned long' sizeof 'char'
`-ImplicitCastExpr 0x558fa8f1dd98 <col:70> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x558fa8f1dd78 <col:70> 'int' 1
([B2.14]) - [B2.16]
  18: CallExpr 0x558fa8f1ddf0 <lparser.c:157:20, col:71> 'TString *'
|-ImplicitCastExpr 0x558fa8f1ddd8 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1dbd0 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x558fa8f1de30 <line:583:25> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1dbf8 <col:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f1de60 <line:157:39, line:583:29> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x558fa8f1de48 <line:157:39, line:583:29> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x558fa8f1dc58 <line:157:39, line:583:29> 'char [5]' lvalue "self"
`-BinaryOperator 0x558fa8f1ddb0 <line:157:45, col:70> 'unsigned long' '-'
  |-ParenExpr 0x558fa8f1dd58 <col:45, col:68> 'unsigned long'
  | `-BinaryOperator 0x558fa8f1dd30 <col:46, col:67> 'unsigned long' '/'
  |   |-UnaryExprOrTypeTraitExpr 0x558fa8f1dce0 <col:46, col:54> 'unsigned long' sizeof
  |   | `-ParenExpr 0x558fa8f1dcc0 <col:52, col:54> 'char [5]' lvalue
  |   |   `-StringLiteral 0x558fa8f1dc90 <line:583:29> 'char [5]' lvalue "self"
  |   `-UnaryExprOrTypeTraitExpr 0x558fa8f1dd10 <line:157:56, col:67> 'unsigned long' sizeof 'char'
  `-ImplicitCastExpr 0x558fa8f1dd98 <col:70> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x558fa8f1dd78 <col:70> 'int' 1
[B2.6]([B2.8], [B2.11], [B2.17])
  19: IntegerLiteral 0x558fa8f1de78 <lparser.c:583:37> 'int' 0
0
  20: CallExpr 0x558fa8f1deb0 <lparser.c:157:3, col:75> 'void'
|-ImplicitCastExpr 0x558fa8f1de98 <col:3> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1db80 <col:3> 'void (LexState *, TString *, int)' Function 0x558fa8ef3060 'new_localvar' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f1def0 <line:583:25> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1dba8 <col:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
|-CallExpr 0x558fa8f1ddf0 <line:157:20, col:71> 'TString *'
| |-ImplicitCastExpr 0x558fa8f1ddd8 <col:20> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f1dbd0 <col:20> 'TString *(LexState *, const char *, size_t)' Function 0x558fa8ea11f0 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
| |-ImplicitCastExpr 0x558fa8f1de30 <line:583:25> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f1dbf8 <col:25> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
| |-ImplicitCastExpr 0x558fa8f1de60 <line:157:39, line:583:29> 'const char *' <BitCast>
| | `-ImplicitCastExpr 0x558fa8f1de48 <line:157:39, line:583:29> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x558fa8f1dc58 <line:157:39, line:583:29> 'char [5]' lvalue "self"
| `-BinaryOperator 0x558fa8f1ddb0 <line:157:45, col:70> 'unsigned long' '-'
|   |-ParenExpr 0x558fa8f1dd58 <col:45, col:68> 'unsigned long'
|   | `-BinaryOperator 0x558fa8f1dd30 <col:46, col:67> 'unsigned long' '/'
|   |   |-UnaryExprOrTypeTraitExpr 0x558fa8f1dce0 <col:46, col:54> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x558fa8f1dcc0 <col:52, col:54> 'char [5]' lvalue
|   |   |   `-StringLiteral 0x558fa8f1dc90 <line:583:29> 'char [5]' lvalue "self"
|   |   `-UnaryExprOrTypeTraitExpr 0x558fa8f1dd10 <line:157:56, col:67> 'unsigned long' sizeof 'char'
|   `-ImplicitCastExpr 0x558fa8f1dd98 <col:70> 'unsigned long' <IntegralCast>
|     `-IntegerLiteral 0x558fa8f1dd78 <col:70> 'int' 1
`-IntegerLiteral 0x558fa8f1de78 <line:583:37> 'int' 0
[B2.2]([B2.4], [B2.18], [B2.19])
  21: DeclRefExpr 0x558fa8f1df08 <lparser.c:584:5> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
adjustlocalvars
  22: ImplicitCastExpr 0x558fa8f1df78 <lparser.c:584:5> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1df08 <col:5> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
[B2.21] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  23: DeclRefExpr 0x558fa8f1df30 <lparser.c:584:21> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  24: ImplicitCastExpr 0x558fa8f1dfc8 <lparser.c:584:21> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1df30 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B2.23] (ImplicitCastExpr, LValueToRValue, LexState *)
  25: IntegerLiteral 0x558fa8f1df58 <lparser.c:584:25> 'int' 1
1
  26: CallExpr 0x558fa8f1df90 <lparser.c:584:5, col:26> 'void'
|-ImplicitCastExpr 0x558fa8f1df78 <col:5> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1df08 <col:5> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f1dfc8 <col:21> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1df30 <col:21> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
`-IntegerLiteral 0x558fa8f1df58 <col:25> 'int' 1
[B2.22]([B2.24], [B2.25])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclStmt 0x558fa8f1d840 <lparser.c:578:3, col:19>col:13
`-VarDecl 0x558fa8f1d7e0 <col:3, col:13> col:13 used new_fs 'FuncState':'struct FuncState'
FuncState new_fs;
   2: DeclRefExpr 0x558fa8f1d858 <lparser.c:579:3> 'void (LexState *, FuncState *)' Function 0x558fa8f06870 'open_func' 'void (LexState *, FuncState *)'
open_func
   3: ImplicitCastExpr 0x558fa8f1d8f0 <lparser.c:579:3> 'void (*)(LexState *, FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1d858 <col:3> 'void (LexState *, FuncState *)' Function 0x558fa8f06870 'open_func' 'void (LexState *, FuncState *)'
[B3.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, FuncState *))
   4: DeclRefExpr 0x558fa8f1d880 <lparser.c:579:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
   5: ImplicitCastExpr 0x558fa8f1d940 <lparser.c:579:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1d880 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B3.4] (ImplicitCastExpr, LValueToRValue, LexState *)
   6: DeclRefExpr 0x558fa8f1d8a8 <lparser.c:579:18> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
new_fs
   7: UnaryOperator 0x558fa8f1d8d0 <lparser.c:579:17, col:18> 'FuncState *' prefix '&'
`-DeclRefExpr 0x558fa8f1d8a8 <col:18> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
&[B3.6]
   8: CallExpr 0x558fa8f1d908 <lparser.c:579:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f1d8f0 <col:3> 'void (*)(LexState *, FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1d858 <col:3> 'void (LexState *, FuncState *)' Function 0x558fa8f06870 'open_func' 'void (LexState *, FuncState *)'
|-ImplicitCastExpr 0x558fa8f1d940 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1d880 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f1d8d0 <col:17, col:18> 'FuncState *' prefix '&'
  `-DeclRefExpr 0x558fa8f1d8a8 <col:18> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B3.3]([B3.5], [B3.7])
   9: DeclRefExpr 0x558fa8f1da08 <lparser.c:580:27> 'int' lvalue ParmVar 0x558fa8f1d5d0 'line' 'int'
line
  10: ImplicitCastExpr 0x558fa8f1da30 <lparser.c:580:27> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1da08 <col:27> 'int' lvalue ParmVar 0x558fa8f1d5d0 'line' 'int'
[B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x558fa8f1d958 <lparser.c:580:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
new_fs
  12: MemberExpr 0x558fa8f1d980 <lparser.c:580:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
`-DeclRefExpr 0x558fa8f1d958 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B3.11].f
  13: ImplicitCastExpr 0x558fa8f1d9b8 <lparser.c:580:3, col:10> 'Proto *' <LValueToRValue>
`-MemberExpr 0x558fa8f1d980 <col:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
  `-DeclRefExpr 0x558fa8f1d958 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B3.12] (ImplicitCastExpr, LValueToRValue, Proto *)
  14: MemberExpr 0x558fa8f1d9d0 <lparser.c:580:3, col:13> 'int' lvalue ->linedefined 0x558fa8e8f688
`-ImplicitCastExpr 0x558fa8f1d9b8 <col:3, col:10> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x558fa8f1d980 <col:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
    `-DeclRefExpr 0x558fa8f1d958 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
[B3.13]->linedefined
  15: BinaryOperator 0x558fa8f1da48 <lparser.c:580:3, col:27> 'int' '='
|-MemberExpr 0x558fa8f1d9d0 <col:3, col:13> 'int' lvalue ->linedefined 0x558fa8e8f688
| `-ImplicitCastExpr 0x558fa8f1d9b8 <col:3, col:10> 'Proto *' <LValueToRValue>
|   `-MemberExpr 0x558fa8f1d980 <col:3, col:10> 'Proto *' lvalue .f 0x558fa8eb3e58
|     `-DeclRefExpr 0x558fa8f1d958 <col:3> 'FuncState':'struct FuncState' lvalue Var 0x558fa8f1d7e0 'new_fs' 'FuncState':'struct FuncState'
`-ImplicitCastExpr 0x558fa8f1da30 <col:27> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f1da08 <col:27> 'int' lvalue ParmVar 0x558fa8f1d5d0 'line' 'int'
[B3.14] = [B3.10]
  16: DeclRefExpr 0x558fa8f1da70 <lparser.c:581:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
  17: ImplicitCastExpr 0x558fa8f1dad8 <lparser.c:581:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f1da70 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B3.16] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  18: DeclRefExpr 0x558fa8f1da98 <lparser.c:581:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
ls
  19: ImplicitCastExpr 0x558fa8f1db28 <lparser.c:581:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1da98 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
[B3.18] (ImplicitCastExpr, LValueToRValue, LexState *)
  20: CharacterLiteral 0x558fa8f1dac0 <lparser.c:581:17> 'int' 40
'('
  21: CallExpr 0x558fa8f1daf0 <lparser.c:581:3, col:20> 'void'
|-ImplicitCastExpr 0x558fa8f1dad8 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f1da70 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f1db28 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f1da98 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f1d2a0 'ls' 'LexState *'
`-CharacterLiteral 0x558fa8f1dac0 <col:17> 'int' 40
[B3.17]([B3.19], [B3.20])
  22: DeclRefExpr 0x558fa8f1db40 <lparser.c:582:7> 'int' lvalue ParmVar 0x558fa8f1d558 'needself' 'int'
needself
  23: ImplicitCastExpr 0x558fa8f1db68 <lparser.c:582:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f1db40 <col:7> 'int' lvalue ParmVar 0x558fa8f1d558 'needself' 'int'
[B3.22] (ImplicitCastExpr, LValueToRValue, int)
   T: if [B3.23]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
