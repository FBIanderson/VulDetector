static void forbody(LexState *ls, int base, int line, int nvars, int isnum)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: ConditionalOperator 0x558fa8f35760 <lparser.c:1063:23, col:52> 'int'
|-ImplicitCastExpr 0x558fa8f35730 <col:23> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35630 <col:23> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
|-ImplicitCastExpr 0x558fa8f35748 <col:31> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35658 <col:31> 'int' lvalue Var 0x558fa8f33778 'endfor' 'int'
`-CallExpr 0x558fa8f356e8 <col:40, col:52> 'int'
  |-ImplicitCastExpr 0x558fa8f356d0 <col:40> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f35680 <col:40> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x558fa8f35718 <col:50> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f356a8 <col:50> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B4.16] ? [B2.2] : [B3.5]
   2: DeclRefExpr 0x558fa8f357b0 <lparser.c:1063:56> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
prep
   3: ImplicitCastExpr 0x558fa8f357f8 <lparser.c:1063:56> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f357b0 <col:56> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
[B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: IntegerLiteral 0x558fa8f357d8 <lparser.c:1063:63> 'int' 1
1
   5: BinaryOperator 0x558fa8f35810 <lparser.c:1063:56, col:63> 'int' '+'
|-ImplicitCastExpr 0x558fa8f357f8 <col:56> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f357b0 <col:56> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
`-IntegerLiteral 0x558fa8f357d8 <col:63> 'int' 1
[B1.3] + [B1.4]
   6: CallExpr 0x558fa8f35850 <lparser.c:1063:3, col:64> 'void'
|-ImplicitCastExpr 0x558fa8f35838 <col:3> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f355e0 <col:3> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x558fa8f35890 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35608 <col:18> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
|-ParenExpr 0x558fa8f35790 <col:22, col:53> 'int'
| `-ConditionalOperator 0x558fa8f35760 <col:23, col:52> 'int'
|   |-ImplicitCastExpr 0x558fa8f35730 <col:23> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x558fa8f35630 <col:23> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
|   |-ImplicitCastExpr 0x558fa8f35748 <col:31> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x558fa8f35658 <col:31> 'int' lvalue Var 0x558fa8f33778 'endfor' 'int'
|   `-CallExpr 0x558fa8f356e8 <col:40, col:52> 'int'
|     |-ImplicitCastExpr 0x558fa8f356d0 <col:40> 'int (*)(FuncState *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x558fa8f35680 <col:40> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
|     `-ImplicitCastExpr 0x558fa8f35718 <col:50> 'FuncState *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f356a8 <col:50> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
`-BinaryOperator 0x558fa8f35810 <col:56, col:63> 'int' '+'
  |-ImplicitCastExpr 0x558fa8f357f8 <col:56> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f357b0 <col:56> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
  `-IntegerLiteral 0x558fa8f357d8 <col:63> 'int' 1
[B4.12]([B4.14], ([B1.1]), [B1.5])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f35658 <lparser.c:1063:31> 'int' lvalue Var 0x558fa8f33778 'endfor' 'int'
endfor
   2: ImplicitCastExpr 0x558fa8f35748 <lparser.c:1063:31> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35658 <col:31> 'int' lvalue Var 0x558fa8f33778 'endfor' 'int'
[B2.1] (ImplicitCastExpr, LValueToRValue, int)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f35680 <lparser.c:1063:40> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
   2: ImplicitCastExpr 0x558fa8f356d0 <lparser.c:1063:40> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f35680 <col:40> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   3: DeclRefExpr 0x558fa8f356a8 <lparser.c:1063:50> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f35718 <lparser.c:1063:50> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f356a8 <col:50> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x558fa8f356e8 <lparser.c:1063:40, col:52> 'int'
|-ImplicitCastExpr 0x558fa8f356d0 <col:40> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f35680 <col:40> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f35718 <col:50> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f356a8 <col:50> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B3.2]([B3.4])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: ConditionalOperator 0x558fa8f35490 <lparser.c:1060:12, line:1061:66> 'int'
|-ImplicitCastExpr 0x558fa8f35478 <line:1060:12, col:18> 'int' <LValueToRValue>
| `-ParenExpr 0x558fa8f34ee0 <col:12, col:18> 'int' lvalue
|   `-DeclRefExpr 0x558fa8f34eb8 <col:13> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
|-CallExpr 0x558fa8f35220 <./lcode.h:41:35, col:71> 'int'
| |-ImplicitCastExpr 0x558fa8f35208 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f34f00 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
| |-ImplicitCastExpr 0x558fa8f35268 <lparser.c:1060:36> 'FuncState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f34f28 <col:36> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
| |-ImplicitCastExpr 0x558fa8f35280 <col:40> 'OpCode':'OpCode' <IntegralCast>
| | `-DeclRefExpr 0x558fa8f34f50 <col:40> 'int' EnumConstant 0x558fa8eafbd8 'OP_FORLOOP' 'int'
| |-ImplicitCastExpr 0x558fa8f35298 <col:52> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f34f78 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
| `-ImplicitCastExpr 0x558fa8f352b0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
|   `-BinaryOperator 0x558fa8f351e0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
|     |-ParenExpr 0x558fa8f35000 <./lcode.h:41:55, col:59> 'int'
|     | `-ParenExpr 0x558fa8f34fe0 <line:20:17, col:20> 'int'
|     |   `-UnaryOperator 0x558fa8f34fc0 <col:18, col:19> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558fa8f34fa0 <col:19> 'int' 1
|     `-ParenExpr 0x558fa8f351c0 <./lopcodes.h:58:27, col:40> 'int'
|       `-BinaryOperator 0x558fa8f35198 <line:57:26, line:58:39> 'int' '>>'
|         |-ParenExpr 0x558fa8f35158 <line:57:26, col:41> 'int'
|         | `-BinaryOperator 0x558fa8f35130 <col:27, col:40> 'int' '-'
|         |   |-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
|         |   | `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
|         |   |   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
|         |   |   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
|         |   |     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
|         |   |       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
|         |   |       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
|         |   `-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
|         `-IntegerLiteral 0x558fa8f35178 <line:58:39> 'int' 1
`-CallExpr 0x558fa8f353c8 <lparser.c:1061:22, col:66> 'int'
  |-ImplicitCastExpr 0x558fa8f353b0 <col:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f352c8 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
  |-ImplicitCastExpr 0x558fa8f35418 <col:35> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f352f0 <col:35> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
  |-ImplicitCastExpr 0x558fa8f35430 <col:39> 'OpCode':'OpCode' <IntegralCast>
  | `-DeclRefExpr 0x558fa8f35318 <col:39> 'int' EnumConstant 0x558fa8eafc68 'OP_TFORLOOP' 'int'
  |-ImplicitCastExpr 0x558fa8f35448 <col:52> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f35340 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
  |-IntegerLiteral 0x558fa8f35368 <col:58> 'int' 0
  `-ImplicitCastExpr 0x558fa8f35460 <col:61> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f35388 <col:61> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B7.45] ? [B5.22] : [B6.12]
   2: DeclRefExpr 0x558fa8f34e90 <lparser.c:1060:3> 'int' lvalue Var 0x558fa8f33778 'endfor' 'int'
endfor
   3: BinaryOperator 0x558fa8f354c0 <lparser.c:1060:3, line:1061:66> 'int' '='
|-DeclRefExpr 0x558fa8f34e90 <line:1060:3> 'int' lvalue Var 0x558fa8f33778 'endfor' 'int'
`-ConditionalOperator 0x558fa8f35490 <col:12, line:1061:66> 'int'
  |-ImplicitCastExpr 0x558fa8f35478 <line:1060:12, col:18> 'int' <LValueToRValue>
  | `-ParenExpr 0x558fa8f34ee0 <col:12, col:18> 'int' lvalue
  |   `-DeclRefExpr 0x558fa8f34eb8 <col:13> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
  |-CallExpr 0x558fa8f35220 <./lcode.h:41:35, col:71> 'int'
  | |-ImplicitCastExpr 0x558fa8f35208 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x558fa8f34f00 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
  | |-ImplicitCastExpr 0x558fa8f35268 <lparser.c:1060:36> 'FuncState *' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8f34f28 <col:36> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
  | |-ImplicitCastExpr 0x558fa8f35280 <col:40> 'OpCode':'OpCode' <IntegralCast>
  | | `-DeclRefExpr 0x558fa8f34f50 <col:40> 'int' EnumConstant 0x558fa8eafbd8 'OP_FORLOOP' 'int'
  | |-ImplicitCastExpr 0x558fa8f35298 <col:52> 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8f34f78 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
  | `-ImplicitCastExpr 0x558fa8f352b0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
  |   `-BinaryOperator 0x558fa8f351e0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
  |     |-ParenExpr 0x558fa8f35000 <./lcode.h:41:55, col:59> 'int'
  |     | `-ParenExpr 0x558fa8f34fe0 <line:20:17, col:20> 'int'
  |     |   `-UnaryOperator 0x558fa8f34fc0 <col:18, col:19> 'int' prefix '-'
  |     |     `-IntegerLiteral 0x558fa8f34fa0 <col:19> 'int' 1
  |     `-ParenExpr 0x558fa8f351c0 <./lopcodes.h:58:27, col:40> 'int'
  |       `-BinaryOperator 0x558fa8f35198 <line:57:26, line:58:39> 'int' '>>'
  |         |-ParenExpr 0x558fa8f35158 <line:57:26, col:41> 'int'
  |         | `-BinaryOperator 0x558fa8f35130 <col:27, col:40> 'int' '-'
  |         |   |-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
  |         |   | `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
  |         |   |   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
  |         |   |   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
  |         |   |     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
  |         |   |       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
  |         |   |       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
  |         |   `-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
  |         `-IntegerLiteral 0x558fa8f35178 <line:58:39> 'int' 1
  `-CallExpr 0x558fa8f353c8 <lparser.c:1061:22, col:66> 'int'
    |-ImplicitCastExpr 0x558fa8f353b0 <col:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f352c8 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
    |-ImplicitCastExpr 0x558fa8f35418 <col:35> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8f352f0 <col:35> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
    |-ImplicitCastExpr 0x558fa8f35430 <col:39> 'OpCode':'OpCode' <IntegralCast>
    | `-DeclRefExpr 0x558fa8f35318 <col:39> 'int' EnumConstant 0x558fa8eafc68 'OP_TFORLOOP' 'int'
    |-ImplicitCastExpr 0x558fa8f35448 <col:52> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x558fa8f35340 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
    |-IntegerLiteral 0x558fa8f35368 <col:58> 'int' 0
    `-ImplicitCastExpr 0x558fa8f35460 <col:61> 'int' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f35388 <col:61> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B4.2] = [B4.1]
   4: DeclRefExpr 0x558fa8f354e8 <lparser.c:1062:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
luaK_fixline
   5: ImplicitCastExpr 0x558fa8f35560 <lparser.c:1062:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f354e8 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
[B4.4] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
   6: DeclRefExpr 0x558fa8f35510 <lparser.c:1062:16> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x558fa8f355b0 <lparser.c:1062:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35510 <col:16> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B4.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: DeclRefExpr 0x558fa8f35538 <lparser.c:1062:20> 'int' lvalue ParmVar 0x558fa8f33228 'line' 'int'
line
   9: ImplicitCastExpr 0x558fa8f355c8 <lparser.c:1062:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35538 <col:20> 'int' lvalue ParmVar 0x558fa8f33228 'line' 'int'
[B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: CallExpr 0x558fa8f35578 <lparser.c:1062:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f35560 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f354e8 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9770 'luaK_fixline' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f355b0 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35510 <col:16> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f355c8 <col:20> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f35538 <col:20> 'int' lvalue ParmVar 0x558fa8f33228 'line' 'int'
[B4.5]([B4.7], [B4.9])
  11: DeclRefExpr 0x558fa8f355e0 <lparser.c:1063:3> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
luaK_patchlist
  12: ImplicitCastExpr 0x558fa8f35838 <lparser.c:1063:3> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f355e0 <col:3> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
[B4.11] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
  13: DeclRefExpr 0x558fa8f35608 <lparser.c:1063:18> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
  14: ImplicitCastExpr 0x558fa8f35890 <lparser.c:1063:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35608 <col:18> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B4.13] (ImplicitCastExpr, LValueToRValue, FuncState *)
  15: DeclRefExpr 0x558fa8f35630 <lparser.c:1063:23> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
isnum
  16: ImplicitCastExpr 0x558fa8f35730 <lparser.c:1063:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35630 <col:23> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
[B4.15] (ImplicitCastExpr, LValueToRValue, int)
   T: [B4.16] ? ... : ...
   Preds (2): B5 B6
   Succs (2): B2 B3

 [B5]
   1: DeclRefExpr 0x558fa8f34f00 <./lcode.h:41:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
   2: ImplicitCastExpr 0x558fa8f35208 <./lcode.h:41:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34f00 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
   3: DeclRefExpr 0x558fa8f34f28 <lparser.c:1060:36> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f35268 <lparser.c:1060:36> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34f28 <col:36> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B5.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f34f50 <lparser.c:1060:40> 'int' EnumConstant 0x558fa8eafbd8 'OP_FORLOOP' 'int'
OP_FORLOOP
   6: ImplicitCastExpr 0x558fa8f35280 <lparser.c:1060:40> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f34f50 <col:40> 'int' EnumConstant 0x558fa8eafbd8 'OP_FORLOOP' 'int'
[B5.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x558fa8f34f78 <lparser.c:1060:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
base
   8: ImplicitCastExpr 0x558fa8f35298 <lparser.c:1060:52> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34f78 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
[B5.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x558fa8f34fa0 <./lcode.h:20:19> 'int' 1
1
  10: UnaryOperator 0x558fa8f34fc0 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f34fa0 <col:19> 'int' 1
-[B5.9]
  11: IntegerLiteral 0x558fa8f35020 <./lopcodes.h:57:28> 'int' 1
1
  12: IntegerLiteral 0x558fa8f35040 <./lopcodes.h:37:17> 'int' 9
9
  13: IntegerLiteral 0x558fa8f35060 <./lopcodes.h:38:17> 'int' 9
9
  14: BinaryOperator 0x558fa8f35080 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
`-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
[B5.12] + [B5.13]
  15: BinaryOperator 0x558fa8f350c8 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
`-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
    `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
[B5.11] << ([B5.14])
  16: IntegerLiteral 0x558fa8f35110 <./lopcodes.h:57:40> 'int' 1
1
  17: BinaryOperator 0x558fa8f35130 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
| `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
|   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
`-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
([B5.15]) - [B5.16]
  18: IntegerLiteral 0x558fa8f35178 <./lopcodes.h:58:39> 'int' 1
1
  19: BinaryOperator 0x558fa8f35198 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x558fa8f35158 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x558fa8f35130 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
`-IntegerLiteral 0x558fa8f35178 <line:58:39> 'int' 1
([B5.17]) >> [B5.18]
  20: BinaryOperator 0x558fa8f351e0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
|-ParenExpr 0x558fa8f35000 <./lcode.h:41:55, col:59> 'int'
| `-ParenExpr 0x558fa8f34fe0 <line:20:17, col:20> 'int'
|   `-UnaryOperator 0x558fa8f34fc0 <col:18, col:19> 'int' prefix '-'
|     `-IntegerLiteral 0x558fa8f34fa0 <col:19> 'int' 1
`-ParenExpr 0x558fa8f351c0 <./lopcodes.h:58:27, col:40> 'int'
  `-BinaryOperator 0x558fa8f35198 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x558fa8f35158 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x558fa8f35130 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
    `-IntegerLiteral 0x558fa8f35178 <line:58:39> 'int' 1
(([B5.10])) + ([B5.19])
  21: ImplicitCastExpr 0x558fa8f352b0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
`-BinaryOperator 0x558fa8f351e0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
  |-ParenExpr 0x558fa8f35000 <./lcode.h:41:55, col:59> 'int'
  | `-ParenExpr 0x558fa8f34fe0 <line:20:17, col:20> 'int'
  |   `-UnaryOperator 0x558fa8f34fc0 <col:18, col:19> 'int' prefix '-'
  |     `-IntegerLiteral 0x558fa8f34fa0 <col:19> 'int' 1
  `-ParenExpr 0x558fa8f351c0 <./lopcodes.h:58:27, col:40> 'int'
    `-BinaryOperator 0x558fa8f35198 <line:57:26, line:58:39> 'int' '>>'
      |-ParenExpr 0x558fa8f35158 <line:57:26, col:41> 'int'
      | `-BinaryOperator 0x558fa8f35130 <col:27, col:40> 'int' '-'
      |   |-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
      |   | `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
      |   |   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
      |   |   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
      |   |     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
      |   |       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
      |   |       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
      |   `-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
      `-IntegerLiteral 0x558fa8f35178 <line:58:39> 'int' 1
[B5.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: CallExpr 0x558fa8f35220 <./lcode.h:41:35, col:71> 'int'
|-ImplicitCastExpr 0x558fa8f35208 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34f00 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x558fa8f35268 <lparser.c:1060:36> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f34f28 <col:36> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f35280 <col:40> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f34f50 <col:40> 'int' EnumConstant 0x558fa8eafbd8 'OP_FORLOOP' 'int'
|-ImplicitCastExpr 0x558fa8f35298 <col:52> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f34f78 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
`-ImplicitCastExpr 0x558fa8f352b0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
  `-BinaryOperator 0x558fa8f351e0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
    |-ParenExpr 0x558fa8f35000 <./lcode.h:41:55, col:59> 'int'
    | `-ParenExpr 0x558fa8f34fe0 <line:20:17, col:20> 'int'
    |   `-UnaryOperator 0x558fa8f34fc0 <col:18, col:19> 'int' prefix '-'
    |     `-IntegerLiteral 0x558fa8f34fa0 <col:19> 'int' 1
    `-ParenExpr 0x558fa8f351c0 <./lopcodes.h:58:27, col:40> 'int'
      `-BinaryOperator 0x558fa8f35198 <line:57:26, line:58:39> 'int' '>>'
        |-ParenExpr 0x558fa8f35158 <line:57:26, col:41> 'int'
        | `-BinaryOperator 0x558fa8f35130 <col:27, col:40> 'int' '-'
        |   |-ParenExpr 0x558fa8f350f0 <col:27, col:38> 'int'
        |   | `-BinaryOperator 0x558fa8f350c8 <col:28, line:39:34> 'int' '<<'
        |   |   |-IntegerLiteral 0x558fa8f35020 <line:57:28> 'int' 1
        |   |   `-ParenExpr 0x558fa8f350a8 <line:39:18, col:34> 'int'
        |   |     `-BinaryOperator 0x558fa8f35080 <line:37:17, line:38:17> 'int' '+'
        |   |       |-IntegerLiteral 0x558fa8f35040 <line:37:17> 'int' 9
        |   |       `-IntegerLiteral 0x558fa8f35060 <line:38:17> 'int' 9
        |   `-IntegerLiteral 0x558fa8f35110 <line:57:40> 'int' 1
        `-IntegerLiteral 0x558fa8f35178 <line:58:39> 'int' 1
[B5.2]([B5.4], [B5.6], [B5.8], [B5.21])
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x558fa8f352c8 <lparser.c:1061:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x558fa8f353b0 <lparser.c:1061:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f352c8 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x558fa8f352f0 <lparser.c:1061:35> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f35418 <lparser.c:1061:35> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f352f0 <col:35> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f35318 <lparser.c:1061:39> 'int' EnumConstant 0x558fa8eafc68 'OP_TFORLOOP' 'int'
OP_TFORLOOP
   6: ImplicitCastExpr 0x558fa8f35430 <lparser.c:1061:39> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f35318 <col:39> 'int' EnumConstant 0x558fa8eafc68 'OP_TFORLOOP' 'int'
[B6.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x558fa8f35340 <lparser.c:1061:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
base
   8: ImplicitCastExpr 0x558fa8f35448 <lparser.c:1061:52> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35340 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
[B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x558fa8f35368 <lparser.c:1061:58> 'int' 0
0
  10: DeclRefExpr 0x558fa8f35388 <lparser.c:1061:61> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
nvars
  11: ImplicitCastExpr 0x558fa8f35460 <lparser.c:1061:61> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f35388 <col:61> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B6.10] (ImplicitCastExpr, LValueToRValue, int)
  12: CallExpr 0x558fa8f353c8 <lparser.c:1061:22, col:66> 'int'
|-ImplicitCastExpr 0x558fa8f353b0 <col:22> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f352c8 <col:22> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x558fa8f35418 <col:35> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f352f0 <col:35> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f35430 <col:39> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f35318 <col:39> 'int' EnumConstant 0x558fa8eafc68 'OP_TFORLOOP' 'int'
|-ImplicitCastExpr 0x558fa8f35448 <col:52> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f35340 <col:52> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
|-IntegerLiteral 0x558fa8f35368 <col:58> 'int' 0
`-ImplicitCastExpr 0x558fa8f35460 <col:61> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f35388 <col:61> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B6.2]([B6.4], [B6.6], [B6.8], [B6.9], [B6.11])
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: ConditionalOperator 0x558fa8f33ea0 <lparser.c:1053:10, col:77> 'int'
|-ImplicitCastExpr 0x558fa8f33e88 <col:10> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f339e8 <col:10> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
|-CallExpr 0x558fa8f33d30 <./lcode.h:41:35, col:71> 'int'
| |-ImplicitCastExpr 0x558fa8f33d18 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f33a10 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
| |-ImplicitCastExpr 0x558fa8f33d78 <lparser.c:1053:32> 'FuncState *' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f33a38 <col:32> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
| |-ImplicitCastExpr 0x558fa8f33d90 <col:36> 'OpCode':'OpCode' <IntegralCast>
| | `-DeclRefExpr 0x558fa8f33a60 <col:36> 'int' EnumConstant 0x558fa8eafc20 'OP_FORPREP' 'int'
| |-ImplicitCastExpr 0x558fa8f33da8 <col:48> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x558fa8f33a88 <col:48> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
| `-ImplicitCastExpr 0x558fa8f33dc0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
|   `-BinaryOperator 0x558fa8f33cf0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
|     |-ParenExpr 0x558fa8f33b10 <./lcode.h:41:55, col:59> 'int'
|     | `-ParenExpr 0x558fa8f33af0 <line:20:17, col:20> 'int'
|     |   `-UnaryOperator 0x558fa8f33ad0 <col:18, col:19> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558fa8f33ab0 <col:19> 'int' 1
|     `-ParenExpr 0x558fa8f33cd0 <./lopcodes.h:58:27, col:40> 'int'
|       `-BinaryOperator 0x558fa8f33ca8 <line:57:26, line:58:39> 'int' '>>'
|         |-ParenExpr 0x558fa8f33c68 <line:57:26, col:41> 'int'
|         | `-BinaryOperator 0x558fa8f33c40 <col:27, col:40> 'int' '-'
|         |   |-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
|         |   | `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
|         |   |   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
|         |   |   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
|         |   |     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
|         |   |       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
|         |   |       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
|         |   `-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
|         `-IntegerLiteral 0x558fa8f33c88 <line:58:39> 'int' 1
`-CallExpr 0x558fa8f33e40 <lparser.c:1053:65, col:77> 'int'
  |-ImplicitCastExpr 0x558fa8f33e28 <col:65> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f33dd8 <col:65> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x558fa8f33e70 <col:75> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f33e00 <col:75> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B10.22] ? [B8.22] : [B9.5]
   2: DeclRefExpr 0x558fa8f339c0 <lparser.c:1053:3> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
prep
   3: BinaryOperator 0x558fa8f348e0 <lparser.c:1053:3, col:77> 'int' '='
|-DeclRefExpr 0x558fa8f339c0 <col:3> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
`-ConditionalOperator 0x558fa8f33ea0 <col:10, col:77> 'int'
  |-ImplicitCastExpr 0x558fa8f33e88 <col:10> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x558fa8f339e8 <col:10> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
  |-CallExpr 0x558fa8f33d30 <./lcode.h:41:35, col:71> 'int'
  | |-ImplicitCastExpr 0x558fa8f33d18 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x558fa8f33a10 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
  | |-ImplicitCastExpr 0x558fa8f33d78 <lparser.c:1053:32> 'FuncState *' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8f33a38 <col:32> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
  | |-ImplicitCastExpr 0x558fa8f33d90 <col:36> 'OpCode':'OpCode' <IntegralCast>
  | | `-DeclRefExpr 0x558fa8f33a60 <col:36> 'int' EnumConstant 0x558fa8eafc20 'OP_FORPREP' 'int'
  | |-ImplicitCastExpr 0x558fa8f33da8 <col:48> 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x558fa8f33a88 <col:48> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
  | `-ImplicitCastExpr 0x558fa8f33dc0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
  |   `-BinaryOperator 0x558fa8f33cf0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
  |     |-ParenExpr 0x558fa8f33b10 <./lcode.h:41:55, col:59> 'int'
  |     | `-ParenExpr 0x558fa8f33af0 <line:20:17, col:20> 'int'
  |     |   `-UnaryOperator 0x558fa8f33ad0 <col:18, col:19> 'int' prefix '-'
  |     |     `-IntegerLiteral 0x558fa8f33ab0 <col:19> 'int' 1
  |     `-ParenExpr 0x558fa8f33cd0 <./lopcodes.h:58:27, col:40> 'int'
  |       `-BinaryOperator 0x558fa8f33ca8 <line:57:26, line:58:39> 'int' '>>'
  |         |-ParenExpr 0x558fa8f33c68 <line:57:26, col:41> 'int'
  |         | `-BinaryOperator 0x558fa8f33c40 <col:27, col:40> 'int' '-'
  |         |   |-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
  |         |   | `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
  |         |   |   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
  |         |   |   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
  |         |   |     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
  |         |   |       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
  |         |   |       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
  |         |   `-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
  |         `-IntegerLiteral 0x558fa8f33c88 <line:58:39> 'int' 1
  `-CallExpr 0x558fa8f33e40 <lparser.c:1053:65, col:77> 'int'
    |-ImplicitCastExpr 0x558fa8f33e28 <col:65> 'int (*)(FuncState *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f33dd8 <col:65> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
    `-ImplicitCastExpr 0x558fa8f33e70 <col:75> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f33e00 <col:75> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B7.2] = [B7.1]
   4: DeclRefExpr 0x558fa8f34908 <lparser.c:1054:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
enterblock
   5: ImplicitCastExpr 0x558fa8f349c0 <lparser.c:1054:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34908 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
[B7.4] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BlockCnt *, lu_byte))
   6: DeclRefExpr 0x558fa8f34930 <lparser.c:1054:14> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x558fa8f34a18 <lparser.c:1054:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34930 <col:14> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B7.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: DeclRefExpr 0x558fa8f34958 <lparser.c:1054:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f33558 'bl' 'BlockCnt':'struct BlockCnt'
bl
   9: UnaryOperator 0x558fa8f34980 <lparser.c:1054:18, col:19> 'BlockCnt *' prefix '&'
`-DeclRefExpr 0x558fa8f34958 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f33558 'bl' 'BlockCnt':'struct BlockCnt'
&[B7.8]
  10: IntegerLiteral 0x558fa8f349a0 <lparser.c:1054:23> 'int' 0
0
  11: ImplicitCastExpr 0x558fa8f34a30 <lparser.c:1054:23> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f349a0 <col:23> 'int' 0
[B7.10] (ImplicitCastExpr, IntegralCast, lu_byte)
  12: CallExpr 0x558fa8f349d8 <lparser.c:1054:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f349c0 <col:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34908 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
|-ImplicitCastExpr 0x558fa8f34a18 <col:14> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f34930 <col:14> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f34980 <col:18, col:19> 'BlockCnt *' prefix '&'
| `-DeclRefExpr 0x558fa8f34958 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f33558 'bl' 'BlockCnt':'struct BlockCnt'
`-ImplicitCastExpr 0x558fa8f34a30 <col:23> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f349a0 <col:23> 'int' 0
[B7.5]([B7.7], [B7.9], [B7.11])
  13: DeclRefExpr 0x558fa8f34a48 <lparser.c:1055:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
adjustlocalvars
  14: ImplicitCastExpr 0x558fa8f34ac0 <lparser.c:1055:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34a48 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
[B7.13] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  15: DeclRefExpr 0x558fa8f34a70 <lparser.c:1055:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
ls
  16: ImplicitCastExpr 0x558fa8f34b10 <lparser.c:1055:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34a70 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B7.15] (ImplicitCastExpr, LValueToRValue, LexState *)
  17: DeclRefExpr 0x558fa8f34a98 <lparser.c:1055:23> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
nvars
  18: ImplicitCastExpr 0x558fa8f34b28 <lparser.c:1055:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34a98 <col:23> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B7.17] (ImplicitCastExpr, LValueToRValue, int)
  19: CallExpr 0x558fa8f34ad8 <lparser.c:1055:3, col:28> 'void'
|-ImplicitCastExpr 0x558fa8f34ac0 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34a48 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f34b10 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f34a70 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f34b28 <col:23> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f34a98 <col:23> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B7.14]([B7.16], [B7.18])
  20: DeclRefExpr 0x558fa8f34b40 <lparser.c:1056:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
  21: ImplicitCastExpr 0x558fa8f34bb8 <lparser.c:1056:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34b40 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
[B7.20] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  22: DeclRefExpr 0x558fa8f34b68 <lparser.c:1056:20> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
  23: ImplicitCastExpr 0x558fa8f34c08 <lparser.c:1056:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34b68 <col:20> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B7.22] (ImplicitCastExpr, LValueToRValue, FuncState *)
  24: DeclRefExpr 0x558fa8f34b90 <lparser.c:1056:24> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
nvars
  25: ImplicitCastExpr 0x558fa8f34c20 <lparser.c:1056:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34b90 <col:24> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B7.24] (ImplicitCastExpr, LValueToRValue, int)
  26: CallExpr 0x558fa8f34bd0 <lparser.c:1056:3, col:29> 'void'
|-ImplicitCastExpr 0x558fa8f34bb8 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34b40 <col:3> 'void (FuncState *, int)' Function 0x558fa8eb9d18 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f34c08 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f34b68 <col:20> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f34c20 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f34b90 <col:24> 'int' lvalue ParmVar 0x558fa8f332a0 'nvars' 'int'
[B7.21]([B7.23], [B7.25])
  27: DeclRefExpr 0x558fa8f34c38 <lparser.c:1057:3> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
block
  28: ImplicitCastExpr 0x558fa8f34c88 <lparser.c:1057:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34c38 <col:3> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
[B7.27] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  29: DeclRefExpr 0x558fa8f34c60 <lparser.c:1057:9> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
ls
  30: ImplicitCastExpr 0x558fa8f34cd0 <lparser.c:1057:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34c60 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B7.29] (ImplicitCastExpr, LValueToRValue, LexState *)
  31: CallExpr 0x558fa8f34ca0 <lparser.c:1057:3, col:11> 'void'
|-ImplicitCastExpr 0x558fa8f34c88 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34c38 <col:3> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f34cd0 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f34c60 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B7.28]([B7.30])
  32: DeclRefExpr 0x558fa8f34ce8 <lparser.c:1058:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
leaveblock
  33: ImplicitCastExpr 0x558fa8f34d38 <lparser.c:1058:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34ce8 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
[B7.32] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *))
  34: DeclRefExpr 0x558fa8f34d10 <lparser.c:1058:14> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
  35: ImplicitCastExpr 0x558fa8f34d80 <lparser.c:1058:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34d10 <col:14> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B7.34] (ImplicitCastExpr, LValueToRValue, FuncState *)
  36: CallExpr 0x558fa8f34d50 <lparser.c:1058:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f34d38 <col:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34ce8 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
`-ImplicitCastExpr 0x558fa8f34d80 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f34d10 <col:14> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B7.33]([B7.35])
  37: DeclRefExpr 0x558fa8f34d98 <lparser.c:1059:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  38: ImplicitCastExpr 0x558fa8f34e10 <lparser.c:1059:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f34d98 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B7.37] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  39: DeclRefExpr 0x558fa8f34dc0 <lparser.c:1059:20> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
  40: ImplicitCastExpr 0x558fa8f34e60 <lparser.c:1059:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34dc0 <col:20> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B7.39] (ImplicitCastExpr, LValueToRValue, FuncState *)
  41: DeclRefExpr 0x558fa8f34de8 <lparser.c:1059:24> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
prep
  42: ImplicitCastExpr 0x558fa8f34e78 <lparser.c:1059:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f34de8 <col:24> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
[B7.41] (ImplicitCastExpr, LValueToRValue, int)
  43: CallExpr 0x558fa8f34e28 <lparser.c:1059:3, col:28> 'void'
|-ImplicitCastExpr 0x558fa8f34e10 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f34d98 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f34e60 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f34dc0 <col:20> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f34e78 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f34de8 <col:24> 'int' lvalue Var 0x558fa8f33700 'prep' 'int'
[B7.38]([B7.40], [B7.42])
  44: DeclRefExpr 0x558fa8f34eb8 <lparser.c:1060:13> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
isnum
  45: ImplicitCastExpr 0x558fa8f35478 <lparser.c:1060:12, col:18> 'int' <LValueToRValue>
`-ParenExpr 0x558fa8f34ee0 <col:12, col:18> 'int' lvalue
  `-DeclRefExpr 0x558fa8f34eb8 <col:13> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
([B7.44]) (ImplicitCastExpr, LValueToRValue, int)
   T: [B7.45] ? ... : ...
   Preds (2): B8 B9
   Succs (2): B5 B6

 [B8]
   1: DeclRefExpr 0x558fa8f33a10 <./lcode.h:41:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
luaK_codeABx
   2: ImplicitCastExpr 0x558fa8f33d18 <./lcode.h:41:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f33a10 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, unsigned int))
   3: DeclRefExpr 0x558fa8f33a38 <lparser.c:1053:32> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f33d78 <lparser.c:1053:32> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f33a38 <col:32> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f33a60 <lparser.c:1053:36> 'int' EnumConstant 0x558fa8eafc20 'OP_FORPREP' 'int'
OP_FORPREP
   6: ImplicitCastExpr 0x558fa8f33d90 <lparser.c:1053:36> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f33a60 <col:36> 'int' EnumConstant 0x558fa8eafc20 'OP_FORPREP' 'int'
[B8.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x558fa8f33a88 <lparser.c:1053:48> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
base
   8: ImplicitCastExpr 0x558fa8f33da8 <lparser.c:1053:48> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f33a88 <col:48> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
[B8.7] (ImplicitCastExpr, LValueToRValue, int)
   9: IntegerLiteral 0x558fa8f33ab0 <./lcode.h:20:19> 'int' 1
1
  10: UnaryOperator 0x558fa8f33ad0 <./lcode.h:20:18, col:19> 'int' prefix '-'
`-IntegerLiteral 0x558fa8f33ab0 <col:19> 'int' 1
-[B8.9]
  11: IntegerLiteral 0x558fa8f33b30 <./lopcodes.h:57:28> 'int' 1
1
  12: IntegerLiteral 0x558fa8f33b50 <./lopcodes.h:37:17> 'int' 9
9
  13: IntegerLiteral 0x558fa8f33b70 <./lopcodes.h:38:17> 'int' 9
9
  14: BinaryOperator 0x558fa8f33b90 <./lopcodes.h:37:17, line:38:17> 'int' '+'
|-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
`-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
[B8.12] + [B8.13]
  15: BinaryOperator 0x558fa8f33bd8 <./lopcodes.h:57:28, line:39:34> 'int' '<<'
|-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
`-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
  `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
    |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
    `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
[B8.11] << ([B8.14])
  16: IntegerLiteral 0x558fa8f33c20 <./lopcodes.h:57:40> 'int' 1
1
  17: BinaryOperator 0x558fa8f33c40 <./lopcodes.h:57:27, col:40> 'int' '-'
|-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
| `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
|   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
|   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
|     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
|       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
|       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
`-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
([B8.15]) - [B8.16]
  18: IntegerLiteral 0x558fa8f33c88 <./lopcodes.h:58:39> 'int' 1
1
  19: BinaryOperator 0x558fa8f33ca8 <./lopcodes.h:57:26, line:58:39> 'int' '>>'
|-ParenExpr 0x558fa8f33c68 <line:57:26, col:41> 'int'
| `-BinaryOperator 0x558fa8f33c40 <col:27, col:40> 'int' '-'
|   |-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
|   | `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
|   |   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
|   |   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
|   |     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
|   |       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
|   |       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
|   `-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
`-IntegerLiteral 0x558fa8f33c88 <line:58:39> 'int' 1
([B8.17]) >> [B8.18]
  20: BinaryOperator 0x558fa8f33cf0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
|-ParenExpr 0x558fa8f33b10 <./lcode.h:41:55, col:59> 'int'
| `-ParenExpr 0x558fa8f33af0 <line:20:17, col:20> 'int'
|   `-UnaryOperator 0x558fa8f33ad0 <col:18, col:19> 'int' prefix '-'
|     `-IntegerLiteral 0x558fa8f33ab0 <col:19> 'int' 1
`-ParenExpr 0x558fa8f33cd0 <./lopcodes.h:58:27, col:40> 'int'
  `-BinaryOperator 0x558fa8f33ca8 <line:57:26, line:58:39> 'int' '>>'
    |-ParenExpr 0x558fa8f33c68 <line:57:26, col:41> 'int'
    | `-BinaryOperator 0x558fa8f33c40 <col:27, col:40> 'int' '-'
    |   |-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
    |   | `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
    |   |   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
    |   |   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
    |   |     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
    |   |       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
    |   |       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
    |   `-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
    `-IntegerLiteral 0x558fa8f33c88 <line:58:39> 'int' 1
(([B8.10])) + ([B8.19])
  21: ImplicitCastExpr 0x558fa8f33dc0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
`-BinaryOperator 0x558fa8f33cf0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
  |-ParenExpr 0x558fa8f33b10 <./lcode.h:41:55, col:59> 'int'
  | `-ParenExpr 0x558fa8f33af0 <line:20:17, col:20> 'int'
  |   `-UnaryOperator 0x558fa8f33ad0 <col:18, col:19> 'int' prefix '-'
  |     `-IntegerLiteral 0x558fa8f33ab0 <col:19> 'int' 1
  `-ParenExpr 0x558fa8f33cd0 <./lopcodes.h:58:27, col:40> 'int'
    `-BinaryOperator 0x558fa8f33ca8 <line:57:26, line:58:39> 'int' '>>'
      |-ParenExpr 0x558fa8f33c68 <line:57:26, col:41> 'int'
      | `-BinaryOperator 0x558fa8f33c40 <col:27, col:40> 'int' '-'
      |   |-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
      |   | `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
      |   |   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
      |   |   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
      |   |     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
      |   |       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
      |   |       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
      |   `-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
      `-IntegerLiteral 0x558fa8f33c88 <line:58:39> 'int' 1
[B8.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: CallExpr 0x558fa8f33d30 <./lcode.h:41:35, col:71> 'int'
|-ImplicitCastExpr 0x558fa8f33d18 <col:35> 'int (*)(FuncState *, OpCode, int, unsigned int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f33a10 <col:35> 'int (FuncState *, OpCode, int, unsigned int)' Function 0x558fa8eb7fc8 'luaK_codeABx' 'int (FuncState *, OpCode, int, unsigned int)'
|-ImplicitCastExpr 0x558fa8f33d78 <lparser.c:1053:32> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f33a38 <col:32> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f33d90 <col:36> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f33a60 <col:36> 'int' EnumConstant 0x558fa8eafc20 'OP_FORPREP' 'int'
|-ImplicitCastExpr 0x558fa8f33da8 <col:48> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f33a88 <col:48> 'int' lvalue ParmVar 0x558fa8f331b0 'base' 'int'
`-ImplicitCastExpr 0x558fa8f33dc0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'unsigned int' <IntegralCast>
  `-BinaryOperator 0x558fa8f33cf0 <./lcode.h:41:55, ./lopcodes.h:58:40> 'int' '+'
    |-ParenExpr 0x558fa8f33b10 <./lcode.h:41:55, col:59> 'int'
    | `-ParenExpr 0x558fa8f33af0 <line:20:17, col:20> 'int'
    |   `-UnaryOperator 0x558fa8f33ad0 <col:18, col:19> 'int' prefix '-'
    |     `-IntegerLiteral 0x558fa8f33ab0 <col:19> 'int' 1
    `-ParenExpr 0x558fa8f33cd0 <./lopcodes.h:58:27, col:40> 'int'
      `-BinaryOperator 0x558fa8f33ca8 <line:57:26, line:58:39> 'int' '>>'
        |-ParenExpr 0x558fa8f33c68 <line:57:26, col:41> 'int'
        | `-BinaryOperator 0x558fa8f33c40 <col:27, col:40> 'int' '-'
        |   |-ParenExpr 0x558fa8f33c00 <col:27, col:38> 'int'
        |   | `-BinaryOperator 0x558fa8f33bd8 <col:28, line:39:34> 'int' '<<'
        |   |   |-IntegerLiteral 0x558fa8f33b30 <line:57:28> 'int' 1
        |   |   `-ParenExpr 0x558fa8f33bb8 <line:39:18, col:34> 'int'
        |   |     `-BinaryOperator 0x558fa8f33b90 <line:37:17, line:38:17> 'int' '+'
        |   |       |-IntegerLiteral 0x558fa8f33b50 <line:37:17> 'int' 9
        |   |       `-IntegerLiteral 0x558fa8f33b70 <line:38:17> 'int' 9
        |   `-IntegerLiteral 0x558fa8f33c20 <line:57:40> 'int' 1
        `-IntegerLiteral 0x558fa8f33c88 <line:58:39> 'int' 1
[B8.2]([B8.4], [B8.6], [B8.8], [B8.21])
   Preds (1): B10
   Succs (1): B7

 [B9]
   1: DeclRefExpr 0x558fa8f33dd8 <lparser.c:1053:65> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
   2: ImplicitCastExpr 0x558fa8f33e28 <lparser.c:1053:65> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f33dd8 <col:65> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   3: DeclRefExpr 0x558fa8f33e00 <lparser.c:1053:75> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f33e70 <lparser.c:1053:75> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f33e00 <col:75> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x558fa8f33e40 <lparser.c:1053:65, col:77> 'int'
|-ImplicitCastExpr 0x558fa8f33e28 <col:65> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f33dd8 <col:65> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f33e70 <col:75> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f33e00 <col:75> 'FuncState *' lvalue Var 0x558fa8f335e0 'fs' 'FuncState *'
[B9.2]([B9.4])
   Preds (1): B10
   Succs (1): B7

 [B10]
   1: DeclStmt 0x558fa8f335b8 <lparser.c:1048:3, col:14>col:12
`-VarDecl 0x558fa8f33558 <col:3, col:12> col:12 used bl 'BlockCnt':'struct BlockCnt'
BlockCnt bl;
   2: DeclRefExpr 0x558fa8f33640 <lparser.c:1049:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x558fa8f33668 <lparser.c:1049:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f33640 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B10.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x558fa8f33680 <lparser.c:1049:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f33668 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f33640 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B10.3]->fs
   5: ImplicitCastExpr 0x558fa8f336b8 <lparser.c:1049:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f33680 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f33668 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f33640 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B10.4] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   6: DeclStmt 0x558fa8f336d0 <lparser.c:1049:3, col:25>col:14
`-VarDecl 0x558fa8f335e0 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f336b8 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f33680 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f33668 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f33640 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
FuncState *fs = ls->fs;
   7: DeclStmt 0x558fa8f49fd0 <lparser.c:1050:7>col:7
`-VarDecl 0x558fa8f33700 <col:3, col:7> col:7 used prep 'int'
int prep;
   8: DeclStmt 0x558fa8f49fa8 <lparser.c:1050:13>col:13
`-VarDecl 0x558fa8f33778 <col:3, col:13> col:13 used endfor 'int'
int endfor;
   9: DeclRefExpr 0x558fa8f33808 <lparser.c:1051:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
adjustlocalvars
  10: ImplicitCastExpr 0x558fa8f33878 <lparser.c:1051:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f33808 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
[B10.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  11: DeclRefExpr 0x558fa8f33830 <lparser.c:1051:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x558fa8f338c8 <lparser.c:1051:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f33830 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B10.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: IntegerLiteral 0x558fa8f33858 <lparser.c:1051:23> 'int' 3
3
  14: CallExpr 0x558fa8f33890 <lparser.c:1051:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f33878 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f33808 <col:3> 'void (LexState *, int)' Function 0x558fa8ef6740 'adjustlocalvars' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f338c8 <col:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f33830 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
`-IntegerLiteral 0x558fa8f33858 <col:23> 'int' 3
[B10.10]([B10.12], [B10.13])
  15: DeclRefExpr 0x558fa8f338e0 <lparser.c:1052:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
  16: ImplicitCastExpr 0x558fa8f33958 <lparser.c:1052:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f338e0 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B10.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  17: DeclRefExpr 0x558fa8f33908 <lparser.c:1052:13> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
ls
  18: ImplicitCastExpr 0x558fa8f339a8 <lparser.c:1052:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f33908 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
[B10.17] (ImplicitCastExpr, LValueToRValue, LexState *)
  19: DeclRefExpr 0x558fa8f33930 <lparser.c:1052:17> 'int' EnumConstant 0x558fa8e9e020 'TK_DO' 'int'
TK_DO
  20: CallExpr 0x558fa8f33970 <lparser.c:1052:3, col:22> 'void'
|-ImplicitCastExpr 0x558fa8f33958 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f338e0 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f339a8 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f33908 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f33138 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8f33930 <col:17> 'int' EnumConstant 0x558fa8e9e020 'TK_DO' 'int'
[B10.16]([B10.18], [B10.19])
  21: DeclRefExpr 0x558fa8f339e8 <lparser.c:1053:10> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
isnum
  22: ImplicitCastExpr 0x558fa8f33e88 <lparser.c:1053:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f339e8 <col:10> 'int' lvalue ParmVar 0x558fa8f33318 'isnum' 'int'
[B10.21] (ImplicitCastExpr, LValueToRValue, int)
   T: [B10.22] ? ... : ...
   Preds (1): B11
   Succs (2): B8 B9

 [B0 (EXIT)]
   Preds (1): B1
