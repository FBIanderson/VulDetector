static void freereg(FuncState *fs, int reg)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x5637768be468 <lcode.c:217:5> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768be490 <lcode.c:217:5> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768be468 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B1.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768be4a8 <lcode.c:217:5, col:9> 'int' lvalue ->freereg 0x56377687e268
`-ImplicitCastExpr 0x5637768be490 <col:5> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768be468 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B1.2]->freereg
   4: UnaryOperator 0x5637768be4e0 <lcode.c:217:5, col:16> 'int' postfix '--'
`-MemberExpr 0x5637768be4a8 <col:5, col:9> 'int' lvalue ->freereg 0x56377687e268
  `-ImplicitCastExpr 0x5637768be490 <col:5> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768be468 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B1.3]--
   5: IntegerLiteral 0x5637768be500 <./llimits.h:62:31> 'int' 0
0
   6: CStyleCastExpr 0x5637768be530 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x5637768be500 <col:31> 'int' 0
(void)[B1.5] (CStyleCastExpr, ToVoid, void)
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768be330 <lcode.c:216:20> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
reg
   2: ImplicitCastExpr 0x5637768be3d0 <lcode.c:216:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768be330 <col:20> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
[B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x5637768be358 <lcode.c:216:27> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768be380 <lcode.c:216:27> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768be358 <col:27> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: MemberExpr 0x5637768be398 <lcode.c:216:27, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
`-ImplicitCastExpr 0x5637768be380 <col:27> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768be358 <col:27> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B2.4]->nactvar
   6: ImplicitCastExpr 0x5637768be3e8 <lcode.c:216:27, col:31> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5637768be398 <col:27, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
  `-ImplicitCastExpr 0x5637768be380 <col:27> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768be358 <col:27> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B2.5] (ImplicitCastExpr, LValueToRValue, lu_byte)
   7: ImplicitCastExpr 0x5637768be400 <lcode.c:216:27, col:31> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5637768be3e8 <col:27, col:31> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5637768be398 <col:27, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
    `-ImplicitCastExpr 0x5637768be380 <col:27> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768be358 <col:27> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B2.6] (ImplicitCastExpr, IntegralCast, int)
   8: BinaryOperator 0x5637768be418 <lcode.c:216:20, col:31> 'int' '>='
|-ImplicitCastExpr 0x5637768be3d0 <col:20> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768be330 <col:20> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
`-ImplicitCastExpr 0x5637768be400 <col:27, col:31> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x5637768be3e8 <col:27, col:31> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x5637768be398 <col:27, col:31> 'lu_byte':'unsigned char' lvalue ->nactvar 0x56377687e3e0
      `-ImplicitCastExpr 0x5637768be380 <col:27> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768be358 <col:27> 'FuncState *' lvalue ParmVar 0x5637768bdfc0 'fs' 'FuncState *'
[B2.2] >= [B2.7]
   T: if [B3.9] && [B2.8]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: DeclRefExpr 0x5637768be178 <lcode.c:216:12> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
reg
   2: ImplicitCastExpr 0x5637768be2b0 <./lopcodes.h:122:18, col:20> 'int' <LValueToRValue>
`-ParenExpr 0x5637768be1a0 <col:18, col:20> 'int' lvalue
  `-DeclRefExpr 0x5637768be178 <lcode.c:216:12> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
([B3.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768be1c0 <./lopcodes.h:119:17> 'int' 1
1
   4: IntegerLiteral 0x5637768be1e0 <./lopcodes.h:38:17> 'int' 9
9
   5: IntegerLiteral 0x5637768be200 <./lopcodes.h:119:32> 'int' 1
1
   6: BinaryOperator 0x5637768be220 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5637768be1e0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768be200 <line:119:32> 'int' 1
[B3.4] - [B3.5]
   7: BinaryOperator 0x5637768be268 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5637768be1c0 <col:17> 'int' 1
`-ParenExpr 0x5637768be248 <col:22, col:33> 'int'
  `-BinaryOperator 0x5637768be220 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5637768be1e0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768be200 <line:119:32> 'int' 1
[B3.3] << ([B3.6])
   8: BinaryOperator 0x5637768be2c8 <./lopcodes.h:122:18, line:119:34> 'int' '&'
|-ImplicitCastExpr 0x5637768be2b0 <line:122:18, col:20> 'int' <LValueToRValue>
| `-ParenExpr 0x5637768be1a0 <col:18, col:20> 'int' lvalue
|   `-DeclRefExpr 0x5637768be178 <lcode.c:216:12> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
`-ParenExpr 0x5637768be290 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x5637768be268 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5637768be1c0 <col:17> 'int' 1
    `-ParenExpr 0x5637768be248 <col:22, col:33> 'int'
      `-BinaryOperator 0x5637768be220 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5637768be1e0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5637768be200 <line:119:32> 'int' 1
[B3.2] & ([B3.7])
   9: UnaryOperator 0x5637768be310 <lcode.c:216:7, ./lopcodes.h:122:29> 'int' prefix '!'
`-ParenExpr 0x5637768be2f0 <col:17, col:29> 'int'
  `-BinaryOperator 0x5637768be2c8 <col:18, line:119:34> 'int' '&'
    |-ImplicitCastExpr 0x5637768be2b0 <line:122:18, col:20> 'int' <LValueToRValue>
    | `-ParenExpr 0x5637768be1a0 <col:18, col:20> 'int' lvalue
    |   `-DeclRefExpr 0x5637768be178 <lcode.c:216:12> 'int' lvalue ParmVar 0x5637768be038 'reg' 'int'
    `-ParenExpr 0x5637768be290 <./lopcodes.h:119:16, col:34> 'int'
      `-BinaryOperator 0x5637768be268 <col:17, col:33> 'int' '<<'
        |-IntegerLiteral 0x5637768be1c0 <col:17> 'int' 1
        `-ParenExpr 0x5637768be248 <col:22, col:33> 'int'
          `-BinaryOperator 0x5637768be220 <line:38:17, line:119:32> 'int' '-'
            |-IntegerLiteral 0x5637768be1e0 <line:38:17> 'int' 9
            `-IntegerLiteral 0x5637768be200 <line:119:32> 'int' 1
!([B3.8])
   T: [B3.9] && ...
   Preds (1): B4
   Succs (2): B2 B0

 [B0 (EXIT)]
   Preds (3): B1 B2 B3
