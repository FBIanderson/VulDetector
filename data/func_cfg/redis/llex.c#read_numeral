static void read_numeral(LexState *ls, SemInfo *seminfo)
 [B21 (ENTRY)]
   Succs (1): B20

 [B1]
   1: DeclRefExpr 0x561ce7454e28 <llex.c:206:5> 'void (LexState *, SemInfo *)' Function 0x561ce7451a30 'trydecpoint' 'void (LexState *, SemInfo *)'
trydecpoint
   2: ImplicitCastExpr 0x561ce7454ef8 <llex.c:206:5> 'void (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7454e28 <col:5> 'void (LexState *, SemInfo *)' Function 0x561ce7451a30 'trydecpoint' 'void (LexState *, SemInfo *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, SemInfo *))
   3: DeclRefExpr 0x561ce7454e50 <llex.c:206:17> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7454f48 <llex.c:206:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454e50 <col:17> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7454e78 <llex.c:206:21> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
seminfo
   6: ImplicitCastExpr 0x561ce7454f60 <llex.c:206:21> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454e78 <col:21> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
[B1.5] (ImplicitCastExpr, LValueToRValue, SemInfo *)
   7: CallExpr 0x561ce7454f10 <llex.c:206:5, col:28> 'void'
|-ImplicitCastExpr 0x561ce7454ef8 <col:5> 'void (*)(LexState *, SemInfo *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7454e28 <col:5> 'void (LexState *, SemInfo *)' Function 0x561ce7451a30 'trydecpoint' 'void (LexState *, SemInfo *)'
|-ImplicitCastExpr 0x561ce7454f48 <col:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7454e50 <col:17> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7454f60 <col:21> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454e78 <col:21> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
[B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce7454970 <llex.c:203:3> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce74549d8 <llex.c:203:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7454970 <col:3> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7454998 <llex.c:203:8> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7454a28 <llex.c:203:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454998 <col:8> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x561ce74549c0 <llex.c:203:12> 'int' 0
'\x00'
   6: CallExpr 0x561ce74549f0 <llex.c:203:3, col:16> 'void'
|-ImplicitCastExpr 0x561ce74549d8 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7454970 <col:3> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7454a28 <col:8> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7454998 <col:8> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-CharacterLiteral 0x561ce74549c0 <col:12> 'int' 0
[B2.2]([B2.4], [B2.5])
   7: DeclRefExpr 0x561ce7454a40 <llex.c:204:3> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
buffreplace
   8: ImplicitCastExpr 0x561ce7454b20 <llex.c:204:3> 'void (*)(LexState *, char, char)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7454a40 <col:3> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
[B2.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, char, char))
   9: DeclRefExpr 0x561ce7454a68 <llex.c:204:15> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce7454b78 <llex.c:204:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454a68 <col:15> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: CharacterLiteral 0x561ce7454a90 <llex.c:204:19> 'int' 46
'.'
  12: ImplicitCastExpr 0x561ce7454b90 <llex.c:204:19> 'char' <IntegralCast>
`-CharacterLiteral 0x561ce7454a90 <col:19> 'int' 46
[B2.11] (ImplicitCastExpr, IntegralCast, char)
  13: DeclRefExpr 0x561ce7454aa8 <llex.c:204:24> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
  14: ImplicitCastExpr 0x561ce7454ad0 <llex.c:204:24> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454aa8 <col:24> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.13] (ImplicitCastExpr, LValueToRValue, LexState *)
  15: MemberExpr 0x561ce7454ae8 <llex.c:204:24, col:28> 'char' lvalue ->decpoint 0x561ce7426d10
`-ImplicitCastExpr 0x561ce7454ad0 <col:24> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454aa8 <col:24> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.14]->decpoint
  16: ImplicitCastExpr 0x561ce7454ba8 <llex.c:204:24, col:28> 'char' <LValueToRValue>
`-MemberExpr 0x561ce7454ae8 <col:24, col:28> 'char' lvalue ->decpoint 0x561ce7426d10
  `-ImplicitCastExpr 0x561ce7454ad0 <col:24> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7454aa8 <col:24> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.15] (ImplicitCastExpr, LValueToRValue, char)
  17: CallExpr 0x561ce7454b38 <llex.c:204:3, col:36> 'void'
|-ImplicitCastExpr 0x561ce7454b20 <col:3> 'void (*)(LexState *, char, char)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7454a40 <col:3> 'void (LexState *, char, char)' Function 0x561ce7451100 'buffreplace' 'void (LexState *, char, char)'
|-ImplicitCastExpr 0x561ce7454b78 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7454a68 <col:15> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7454b90 <col:19> 'char' <IntegralCast>
| `-CharacterLiteral 0x561ce7454a90 <col:19> 'int' 46
`-ImplicitCastExpr 0x561ce7454ba8 <col:24, col:28> 'char' <LValueToRValue>
  `-MemberExpr 0x561ce7454ae8 <col:24, col:28> 'char' lvalue ->decpoint 0x561ce7426d10
    `-ImplicitCastExpr 0x561ce7454ad0 <col:24> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7454aa8 <col:24> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.8]([B2.10], [B2.12], [B2.16])
  18: DeclRefExpr 0x561ce7454bc0 <llex.c:205:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
luaO_str2d
  19: ImplicitCastExpr 0x561ce7454d88 <llex.c:205:8> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7454bc0 <col:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
[B2.18] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, lua_Number *))
  20: DeclRefExpr 0x561ce7454be8 <llex.c:205:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
  21: ImplicitCastExpr 0x561ce7454c10 <llex.c:205:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.20] (ImplicitCastExpr, LValueToRValue, LexState *)
  22: MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.21]->buff
  23: ImplicitCastExpr 0x561ce7454c80 <./lzio.h:32:28, col:33> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7454c60 <col:28, col:33> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
([B2.22]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  24: MemberExpr 0x561ce7454c98 <./lzio.h:32:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce7454c80 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7454c60 <col:28, col:33> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.23]->buffer
  25: ImplicitCastExpr 0x561ce7454dd8 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
`-ParenExpr 0x561ce7454cd0 <col:27, col:42> 'char *' lvalue
  `-MemberExpr 0x561ce7454c98 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
    `-ImplicitCastExpr 0x561ce7454c80 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce7454c60 <col:28, col:33> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
([B2.24]) (ImplicitCastExpr, LValueToRValue, char *)
  26: ImplicitCastExpr 0x561ce7454df0 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7454dd8 <col:27, col:42> 'char *' <LValueToRValue>
  `-ParenExpr 0x561ce7454cd0 <col:27, col:42> 'char *' lvalue
    `-MemberExpr 0x561ce7454c98 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
      `-ImplicitCastExpr 0x561ce7454c80 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
        `-ParenExpr 0x561ce7454c60 <col:28, col:33> 'Mbuffer *' lvalue
          `-MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
            `-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B2.25] (ImplicitCastExpr, BitCast, const char *)
  27: DeclRefExpr 0x561ce7454cf0 <llex.c:205:43> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
seminfo
  28: ImplicitCastExpr 0x561ce7454d18 <llex.c:205:43> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454cf0 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
[B2.27] (ImplicitCastExpr, LValueToRValue, SemInfo *)
  29: MemberExpr 0x561ce7454d30 <llex.c:205:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
`-ImplicitCastExpr 0x561ce7454d18 <col:43> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454cf0 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
[B2.28]->r
  30: UnaryOperator 0x561ce7454d68 <llex.c:205:42, col:52> 'lua_Number *' prefix '&'
`-MemberExpr 0x561ce7454d30 <col:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
  `-ImplicitCastExpr 0x561ce7454d18 <col:43> 'SemInfo *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7454cf0 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
&[B2.29]
  31: CallExpr 0x561ce7454da0 <llex.c:205:8, col:53> 'int'
|-ImplicitCastExpr 0x561ce7454d88 <col:8> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7454bc0 <col:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
|-ImplicitCastExpr 0x561ce7454df0 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce7454dd8 <col:27, col:42> 'char *' <LValueToRValue>
|   `-ParenExpr 0x561ce7454cd0 <col:27, col:42> 'char *' lvalue
|     `-MemberExpr 0x561ce7454c98 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|       `-ImplicitCastExpr 0x561ce7454c80 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|         `-ParenExpr 0x561ce7454c60 <col:28, col:33> 'Mbuffer *' lvalue
|           `-MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|             `-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
|               `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-UnaryOperator 0x561ce7454d68 <col:42, col:52> 'lua_Number *' prefix '&'
  `-MemberExpr 0x561ce7454d30 <col:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
    `-ImplicitCastExpr 0x561ce7454d18 <col:43> 'SemInfo *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7454cf0 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
[B2.19]([B2.26], [B2.30])
  32: UnaryOperator 0x561ce7454e08 <llex.c:205:7, col:53> 'int' prefix '!'
`-CallExpr 0x561ce7454da0 <col:8, col:53> 'int'
  |-ImplicitCastExpr 0x561ce7454d88 <col:8> 'int (*)(const char *, lua_Number *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7454bc0 <col:8> 'int (const char *, lua_Number *)' Function 0x561ce74064f8 'luaO_str2d' 'int (const char *, lua_Number *)'
  |-ImplicitCastExpr 0x561ce7454df0 <./lzio.h:32:27, col:42> 'const char *' <BitCast>
  | `-ImplicitCastExpr 0x561ce7454dd8 <col:27, col:42> 'char *' <LValueToRValue>
  |   `-ParenExpr 0x561ce7454cd0 <col:27, col:42> 'char *' lvalue
  |     `-MemberExpr 0x561ce7454c98 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |       `-ImplicitCastExpr 0x561ce7454c80 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |         `-ParenExpr 0x561ce7454c60 <col:28, col:33> 'Mbuffer *' lvalue
  |           `-MemberExpr 0x561ce7454c28 <llex.c:205:31, col:35> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |             `-ImplicitCastExpr 0x561ce7454c10 <col:31> 'LexState *' <LValueToRValue>
  |               `-DeclRefExpr 0x561ce7454be8 <col:31> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
  `-UnaryOperator 0x561ce7454d68 <col:42, col:52> 'lua_Number *' prefix '&'
    `-MemberExpr 0x561ce7454d30 <col:43, col:52> 'lua_Number':'double' lvalue ->r 0x561ce7425180
      `-ImplicitCastExpr 0x561ce7454d18 <col:43> 'SemInfo *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7454cf0 <col:43> 'SemInfo *' lvalue ParmVar 0x561ce7452c88 'seminfo' 'SemInfo *'
![B2.31]
   T: if [B2.32]
   Preds (1): B8
   Succs (2): B1 B0

 [B3]
   Preds (1): B4
   Succs (1): B9

 [B4]
   1: ConditionalOperator 0x561ce7454870 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7454488 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7454430 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7454400 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce74543c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce74543b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7454470 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7454450 <col:31> 'int' 0
|-ParenExpr 0x561ce7454750 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7454728 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7454708 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce74546a0 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7454678 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7454660 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7454640 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74545d8 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce74545b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-CallExpr 0x561ce7454828 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7454810 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7454770 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7454858 <llex.c:202:19, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74547d8 <line:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74547c0 <line:202:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.18] ? ([B5.10]) : [B6.7]
   2: DeclRefExpr 0x561ce74542a0 <llex.c:202:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce74542c8 <llex.c:202:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74542a0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B4.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce74542e0 <llex.c:202:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74542c8 <line:202:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74542a0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B4.3]->current
   5: BinaryOperator 0x561ce74548c0 <llex.c:202:19, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce74542e0 <llex.c:202:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce74542c8 <line:202:19> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce74542a0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ParenExpr 0x561ce74548a0 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7454870 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7454488 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7454430 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7454400 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce74543c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce74543b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7454470 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7454450 <col:31> 'int' 0
    |-ParenExpr 0x561ce7454750 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7454728 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7454708 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce74546a0 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7454678 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7454660 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7454640 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74545d8 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce74545b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
    `-CallExpr 0x561ce7454828 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7454810 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7454770 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7454858 <llex.c:202:19, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74547d8 <line:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74547c0 <line:202:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B4.4] = ([B4.1])
   6: BinaryOperator 0x561ce7454908 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7454238 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7454220 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7454158 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7454270 <line:202:19> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7454180 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7454288 <col:19, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce74541e8 <line:202:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce74541d0 <line:202:19> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce74541a8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ParenExpr 0x561ce74548e8 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce74548c0 <line:202:19, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce74542e0 <llex.c:202:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce74542c8 <line:202:19> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce74542a0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
    `-ParenExpr 0x561ce74548a0 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7454870 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7454488 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7454430 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7454400 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce74543c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce74543b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7454470 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7454450 <col:31> 'int' 0
        |-ParenExpr 0x561ce7454750 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7454728 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce7454708 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce74546a0 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7454678 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7454660 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7454640 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce74545d8 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce74545b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
        `-CallExpr 0x561ce7454828 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7454810 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7454770 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7454858 <llex.c:202:19, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce74547d8 <line:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce74547c0 <line:202:19> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
... , 
   Preds (2): B5 B6
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x561ce74544b0 <llex.c:202:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74544d8 <llex.c:202:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B5.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B5.2]->z
   4: ImplicitCastExpr 0x561ce7454548 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
([B5.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7454560 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B5.4]->p
   6: UnaryOperator 0x561ce7454598 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B5.5]++
   7: UnaryOperator 0x561ce74545b8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
*[B5.6]
   8: ImplicitCastExpr 0x561ce7454660 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7454640 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74545d8 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce74545b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(([B5.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7454678 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7454660 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7454640 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74545d8 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce74545b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(unsigned char)[B5.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7454728 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7454708 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce74546a0 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7454678 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7454660 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7454640 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74545d8 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce74545b8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7454598 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7454560 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7454548 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7454528 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74544f0 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74544d8 <line:202:19> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce74544b0 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(int)(([B5.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x561ce7454770 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7454810 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7454770 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7454798 <llex.c:202:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74547c0 <llex.c:202:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74547d8 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74547c0 <line:202:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B6.4]->z
   6: ImplicitCastExpr 0x561ce7454858 <llex.c:202:19, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74547d8 <line:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74547c0 <line:202:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B6.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7454828 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7454810 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7454770 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7454858 <llex.c:202:19, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74547d8 <line:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74547c0 <line:202:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7454798 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B6.2]([B6.6])
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: DeclRefExpr 0x561ce7454158 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7454220 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7454158 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B7.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7454180 <llex.c:202:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7454270 <llex.c:202:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454180 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce74541a8 <llex.c:202:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce74541d0 <llex.c:202:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74541a8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce74541e8 <llex.c:202:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74541d0 <line:202:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74541a8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.6]->current
   8: ImplicitCastExpr 0x561ce7454288 <llex.c:202:19, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce74541e8 <line:202:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce74541d0 <line:202:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74541a8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7454238 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7454220 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7454158 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7454270 <line:202:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7454180 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7454288 <col:19, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce74541e8 <line:202:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce74541d0 <line:202:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74541a8 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.2]([B7.4], [B7.8])
  10: DeclRefExpr 0x561ce7454318 <llex.c:202:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7454340 <llex.c:202:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.11]->z
  13: ImplicitCastExpr 0x561ce74543b0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
([B7.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce74543c8 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce74543b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.13]->n
  15: UnaryOperator 0x561ce7454400 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce74543c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce74543b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B7.14]--
  16: IntegerLiteral 0x561ce7454450 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7454470 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7454450 <col:31> 'int' 0
[B7.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7454488 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7454430 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7454400 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce74543c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce74543b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7454390 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7454358 <llex.c:202:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7454340 <line:202:19> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7454318 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7454470 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7454450 <col:31> 'int' 0
([B7.15]) > [B7.17]
   T: [B7.18] ? ... : ...
   Preds (2): B8 B9
   Succs (2): B5 B6

 [B8]
   1: DeclRefExpr 0x561ce7454060 <llex.c:201:34> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7454088 <llex.c:201:34> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7454060 <col:34> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B8.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74540a0 <llex.c:201:34, col:38> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7454088 <col:34> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7454060 <col:34> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B8.2]->current
   4: ImplicitCastExpr 0x561ce74540f0 <llex.c:201:34, col:38> 'int' <LValueToRValue>
`-MemberExpr 0x561ce74540a0 <col:34, col:38> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7454088 <col:34> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7454060 <col:34> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce74540d8 <llex.c:201:49> 'int' 95
'_'
   6: BinaryOperator 0x561ce7454108 <llex.c:201:34, col:49> 'int' '=='
|-ImplicitCastExpr 0x561ce74540f0 <col:34, col:38> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce74540a0 <col:34, col:38> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7454088 <col:34> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7454060 <col:34> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-CharacterLiteral 0x561ce74540d8 <col:49> 'int' 95
[B8.4] == [B8.5]
   T: while ([B9.17]) || [B8.6]
   Preds (1): B9
   Succs (2): B7 B2

 [B9]
   1: DeclRefExpr 0x561ce7453d40 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce7453d68 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce7453d80 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B9.2]()
   4: UnaryOperator 0x561ce7453da8 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce7453d80 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B9.3]
   5: ImplicitCastExpr 0x561ce7453f28 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce7453dc8 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce7453da8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce7453d80 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B9.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce7453de8 <llex.c:201:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7453e10 <llex.c:201:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B9.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B9.7]->current
   9: ImplicitCastExpr 0x561ce7453ee8 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce7453ec8 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce7453e60 <line:189:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(([B9.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce7453f00 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce7453ee8 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce7453ec8 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce7453e60 <line:189:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(int)[B9.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce7453f40 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce7453f28 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce7453dc8 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce7453da8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce7453d80 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce7453f00 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce7453ee8 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce7453ec8 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce7453e60 <line:189:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B9.5][[B9.10]]
  12: ImplicitCastExpr 0x561ce7453fd0 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce7453f40 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce7453f28 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce7453dc8 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce7453da8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce7453d80 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce7453f00 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce7453ee8 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce7453ec8 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce7453e60 <line:189:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B9.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce7453fe8 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce7453fd0 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce7453f40 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce7453f28 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce7453dc8 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce7453da8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce7453d80 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce7453f00 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce7453ee8 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce7453ec8 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce7453e60 <line:189:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B9.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce7453f68 </usr/include/ctype.h:189:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
_ISalnum
  15: CStyleCastExpr 0x561ce7453fa8 </usr/include/ctype.h:89:37, line:189:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce7453f68 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
(unsigned short)[B9.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce7454000 </usr/include/ctype.h:89:37, line:189:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce7453fa8 <line:89:37, line:189:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce7453f68 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
[B9.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce7454018 </usr/include/ctype.h:89:4, line:189:36> 'int' '&'
|-ImplicitCastExpr 0x561ce7453fe8 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce7453fd0 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce7453f40 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce7453f28 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce7453dc8 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce7453da8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce7453d80 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce7453d68 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce7453d40 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce7453f00 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce7453ee8 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce7453ec8 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce7453e60 <line:189:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce7453e28 <llex.c:201:18, col:22> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce7453e10 <col:18> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce7453de8 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7454000 </usr/include/ctype.h:89:37, line:189:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce7453fa8 <line:89:37, line:189:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce7453f68 <col:36> 'int' EnumConstant 0x561ce7306f78 '_ISalnum' 'int'
[B9.13] & [B9.16]
   T: ([B9.17]) || ...
   Preds (3): B3 B10 B11
   Succs (2): B7 B8

 [B10]
   1: DeclRefExpr 0x561ce7453bf0 <llex.c:200:5> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
check_next
   2: ImplicitCastExpr 0x561ce7453c70 <llex.c:200:5> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7453bf0 <col:5> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, const char *))
   3: DeclRefExpr 0x561ce7453c18 <llex.c:200:16> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7453cc0 <llex.c:200:16> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453c18 <col:16> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce7453c40 <llex.c:200:20> 'char [3]' lvalue "+-"
"+-"
   6: ImplicitCastExpr 0x561ce7453cd8 <llex.c:200:20> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7453c40 <col:20> 'char [3]' lvalue "+-"
[B10.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce7453cf0 <llex.c:200:20> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7453cd8 <col:20> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7453c40 <col:20> 'char [3]' lvalue "+-"
[B10.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x561ce7453c88 <llex.c:200:5, col:24> 'int'
|-ImplicitCastExpr 0x561ce7453c70 <col:5> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7453bf0 <col:5> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
|-ImplicitCastExpr 0x561ce7453cc0 <col:16> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7453c18 <col:16> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7453cf0 <col:20> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x561ce7453cd8 <col:20> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561ce7453c40 <col:20> 'char [3]' lvalue "+-"
[B10.2]([B10.4], [B10.7])
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: DeclRefExpr 0x561ce7453a78 <llex.c:199:7> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
check_next
   2: ImplicitCastExpr 0x561ce7453b58 <llex.c:199:7> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7453a78 <col:7> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
[B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *, const char *))
   3: DeclRefExpr 0x561ce7453aa0 <llex.c:199:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7453ba8 <llex.c:199:18> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453aa0 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B11.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce7453ac8 <llex.c:199:22> 'char [3]' lvalue "Ee"
"Ee"
   6: ImplicitCastExpr 0x561ce7453bc0 <llex.c:199:22> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce7453ac8 <col:22> 'char [3]' lvalue "Ee"
[B11.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce7453bd8 <llex.c:199:22> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce7453bc0 <col:22> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce7453ac8 <col:22> 'char [3]' lvalue "Ee"
[B11.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x561ce7453b70 <llex.c:199:7, col:26> 'int'
|-ImplicitCastExpr 0x561ce7453b58 <col:7> 'int (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7453a78 <col:7> 'int (LexState *, const char *)' Function 0x561ce74503b8 'check_next' 'int (LexState *, const char *)'
|-ImplicitCastExpr 0x561ce7453ba8 <col:18> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7453aa0 <col:18> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7453bd8 <col:22> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x561ce7453bc0 <col:22> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561ce7453ac8 <col:22> 'char [3]' lvalue "Ee"
[B11.2]([B11.4], [B11.7])
   T: if [B11.8]
   Preds (1): B12
   Succs (2): B10 B9

 [B12]
   1: BinaryOperator 0x561ce7453a30 </usr/include/ctype.h:89:3, llex.c:198:51> 'int' '||'
|-ParenExpr 0x561ce7453940 </usr/include/ctype.h:89:3, col:62> 'int'
| `-BinaryOperator 0x561ce7453918 <col:4, line:192:36> 'int' '&'
|   |-ImplicitCastExpr 0x561ce74538e8 <line:89:4, col:33> 'int' <IntegralCast>
|   | `-ImplicitCastExpr 0x561ce74538d0 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x561ce7453840 <col:4, col:33> 'const unsigned short' lvalue
|   |     |-ImplicitCastExpr 0x561ce7453828 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|   |     | `-ParenExpr 0x561ce74536c8 <col:4, col:22> 'const unsigned short *' lvalue
|   |     |   `-UnaryOperator 0x561ce74536a8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|   |     |     `-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
|   |     |       `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|   |     |         `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|   |     `-CStyleCastExpr 0x561ce7453800 <col:24, col:32> 'int' <NoOp>
|   |       `-ImplicitCastExpr 0x561ce74537e8 <col:30, col:32> 'int' <LValueToRValue>
|   |         `-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
|   |           `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
|   |             `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
|   |               `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
|   |                 `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
|   `-ImplicitCastExpr 0x561ce7453900 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
|     `-CStyleCastExpr 0x561ce74538a8 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
|       `-DeclRefExpr 0x561ce7453868 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
`-BinaryOperator 0x561ce7453a08 <llex.c:198:36, col:51> 'int' '=='
  |-ImplicitCastExpr 0x561ce74539f0 <col:36, col:40> 'int' <LValueToRValue>
  | `-MemberExpr 0x561ce74539a0 <col:36, col:40> 'int' lvalue ->current 0x561ce74267f0
  |   `-ImplicitCastExpr 0x561ce7453988 <col:36> 'LexState *' <LValueToRValue>
  |     `-DeclRefExpr 0x561ce7453960 <col:36> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
  `-CharacterLiteral 0x561ce74539d8 <col:51> 'int' 46
([B14.17]) || [B13.6]
   T: do ... while [B12.1]
   Preds (2): B13 B14
   Succs (2): B19 B11

 [B13]
   1: DeclRefExpr 0x561ce7453960 <llex.c:198:36> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7453988 <llex.c:198:36> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453960 <col:36> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B13.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74539a0 <llex.c:198:36, col:40> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7453988 <col:36> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7453960 <col:36> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B13.2]->current
   4: ImplicitCastExpr 0x561ce74539f0 <llex.c:198:36, col:40> 'int' <LValueToRValue>
`-MemberExpr 0x561ce74539a0 <col:36, col:40> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7453988 <col:36> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7453960 <col:36> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CharacterLiteral 0x561ce74539d8 <llex.c:198:51> 'int' 46
'.'
   6: BinaryOperator 0x561ce7453a08 <llex.c:198:36, col:51> 'int' '=='
|-ImplicitCastExpr 0x561ce74539f0 <col:36, col:40> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce74539a0 <col:36, col:40> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce7453988 <col:36> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce7453960 <col:36> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-CharacterLiteral 0x561ce74539d8 <col:51> 'int' 46
[B13.4] == [B13.5]
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: DeclRefExpr 0x561ce7453640 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce7453668 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B14.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce7453680 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B14.2]()
   4: UnaryOperator 0x561ce74536a8 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B14.3]
   5: ImplicitCastExpr 0x561ce7453828 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce74536c8 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce74536a8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B14.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce74536e8 <llex.c:198:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce7453710 <llex.c:198:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B14.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B14.7]->current
   9: ImplicitCastExpr 0x561ce74537e8 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(([B14.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce7453800 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce74537e8 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(int)[B14.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce7453840 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce7453828 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce74536c8 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce74536a8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce7453800 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce74537e8 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B14.5][[B14.10]]
  12: ImplicitCastExpr 0x561ce74538d0 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce7453840 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce7453828 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce74536c8 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce74536a8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce7453800 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce74537e8 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B14.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce74538e8 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce74538d0 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce7453840 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce7453828 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce74536c8 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce74536a8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce7453800 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce74537e8 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B14.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce7453868 </usr/include/ctype.h:192:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
_ISdigit
  15: CStyleCastExpr 0x561ce74538a8 </usr/include/ctype.h:89:37, line:192:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce7453868 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
(unsigned short)[B14.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce7453900 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce74538a8 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce7453868 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B14.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce7453918 </usr/include/ctype.h:89:4, line:192:36> 'int' '&'
|-ImplicitCastExpr 0x561ce74538e8 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce74538d0 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce7453840 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce7453828 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce74536c8 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce74536a8 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce7453680 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce7453668 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce7453640 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce7453800 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce74537e8 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce74537c8 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce7453760 <line:192:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce7453728 <llex.c:198:20, col:24> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce7453710 <col:20> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce74536e8 <col:20> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7453900 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce74538a8 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce7453868 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B14.13] & [B14.16]
   T: ([B14.17]) || ...
   Preds (1): B15
   Succs (2): B12 B13

 [B15]
   1: ConditionalOperator 0x561ce7453548 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7453160 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7453108 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce74530e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce74530b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7453098 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7453148 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7453128 <col:31> 'int' 0
|-ParenExpr 0x561ce7453428 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7453400 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce74533e0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7453378 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7453350 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7453338 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7453318 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74532b0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7453290 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-CallExpr 0x561ce7453500 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce74534e8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7453448 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7453530 <llex.c:197:19, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74534b0 <line:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7453498 <line:197:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.18] ? ([B16.10]) : [B17.7]
   2: DeclRefExpr 0x561ce7452f88 <llex.c:197:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7452fb0 <llex.c:197:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452f88 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B15.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7452fc8 <llex.c:197:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7452fb0 <line:197:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7452f88 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B15.3]->current
   5: BinaryOperator 0x561ce7453598 <llex.c:197:19, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7452fc8 <llex.c:197:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7452fb0 <line:197:19> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7452f88 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ParenExpr 0x561ce7453578 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7453548 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7453160 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7453108 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce74530e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce74530b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7453098 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7453148 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7453128 <col:31> 'int' 0
    |-ParenExpr 0x561ce7453428 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7453400 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce74533e0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7453378 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7453350 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7453338 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7453318 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74532b0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7453290 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
    `-CallExpr 0x561ce7453500 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce74534e8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7453448 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7453530 <llex.c:197:19, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74534b0 <line:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7453498 <line:197:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B15.4] = ([B15.1])
   6: BinaryOperator 0x561ce74535e0 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7452f20 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7452f08 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7452e40 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7452f58 <line:197:19> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7452e68 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7452f70 <col:19, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7452ed0 <line:197:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7452eb8 <line:197:19> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7452e90 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ParenExpr 0x561ce74535c0 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7453598 <line:197:19, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7452fc8 <llex.c:197:19, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7452fb0 <line:197:19> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7452f88 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
    `-ParenExpr 0x561ce7453578 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7453548 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7453160 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7453108 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce74530e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce74530b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7453098 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7453148 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7453128 <col:31> 'int' 0
        |-ParenExpr 0x561ce7453428 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7453400 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce74533e0 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7453378 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7453350 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7453338 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7453318 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce74532b0 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7453290 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
        `-CallExpr 0x561ce7453500 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce74534e8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7453448 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7453530 <llex.c:197:19, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce74534b0 <line:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce7453498 <line:197:19> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
... , 
   Preds (2): B16 B17
   Succs (1): B14

 [B16]
   1: DeclRefExpr 0x561ce7453188 <llex.c:197:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74531b0 <llex.c:197:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B16.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B16.2]->z
   4: ImplicitCastExpr 0x561ce7453220 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
([B16.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7453238 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B16.4]->p
   6: UnaryOperator 0x561ce7453270 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B16.5]++
   7: UnaryOperator 0x561ce7453290 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
*[B16.6]
   8: ImplicitCastExpr 0x561ce7453338 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7453318 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74532b0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7453290 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(([B16.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7453350 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7453338 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7453318 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74532b0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7453290 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(unsigned char)[B16.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7453400 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce74533e0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7453378 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7453350 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7453338 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7453318 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74532b0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7453290 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7453270 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7453238 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7453220 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7453200 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce74531c8 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74531b0 <line:197:19> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7453188 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
(int)(([B16.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B18
   Succs (1): B15

 [B17]
   1: DeclRefExpr 0x561ce7453448 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce74534e8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7453448 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B17.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7453470 <llex.c:197:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7453498 <llex.c:197:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B17.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74534b0 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7453498 <line:197:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B17.4]->z
   6: ImplicitCastExpr 0x561ce7453530 <llex.c:197:19, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74534b0 <line:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7453498 <line:197:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B17.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7453500 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce74534e8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7453448 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7453530 <llex.c:197:19, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74534b0 <line:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7453498 <line:197:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7453470 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B17.2]([B17.6])
   Preds (1): B18
   Succs (1): B15

 [B18]
   1: DeclRefExpr 0x561ce7452e40 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7452f08 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7452e40 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B18.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7452e68 <llex.c:197:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7452f58 <llex.c:197:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452e68 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7452e90 <llex.c:197:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7452eb8 <llex.c:197:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7452e90 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7452ed0 <llex.c:197:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7452eb8 <line:197:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7452e90 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.6]->current
   8: ImplicitCastExpr 0x561ce7452f70 <llex.c:197:19, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7452ed0 <line:197:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7452eb8 <line:197:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7452e90 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7452f20 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7452f08 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7452e40 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7452f58 <line:197:19> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7452e68 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7452f70 <col:19, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7452ed0 <line:197:19, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7452eb8 <line:197:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7452e90 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.2]([B18.4], [B18.8])
  10: DeclRefExpr 0x561ce7453000 <llex.c:197:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7453028 <llex.c:197:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.11]->z
  13: ImplicitCastExpr 0x561ce7453098 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
([B18.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce74530b0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7453098 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.13]->n
  15: UnaryOperator 0x561ce74530e8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce74530b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7453098 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
[B18.14]--
  16: IntegerLiteral 0x561ce7453128 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7453148 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7453128 <col:31> 'int' 0
[B18.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7453160 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7453108 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce74530e8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce74530b0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7453098 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7453078 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7453040 <llex.c:197:19, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7453028 <line:197:19> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7453000 <col:19> 'LexState *' lvalue ParmVar 0x561ce7452c18 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7453148 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7453128 <col:31> 'int' 0
([B18.15]) > [B18.17]
   T: [B18.18] ? ... : ...
   Preds (2): B19 B20
   Succs (2): B16 B17

 [B19]
   Preds (1): B12
   Succs (1): B18

 [B20]
   1: IntegerLiteral 0x561ce7452dc8 <./llimits.h:62:31> 'int' 0
0
   2: CStyleCastExpr 0x561ce7452df8 <./llimits.h:62:25, col:31> 'void' <ToVoid>
`-IntegerLiteral 0x561ce7452dc8 <col:31> 'int' 0
(void)[B20.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B21
   Succs (1): B18

 [B0 (EXIT)]
   Preds (2): B1 B2
