void luaK_setreturns(FuncState *fs, expdesc *e, int nresults)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768c6ac0 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B1.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768c6ad8 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.2]->f
   4: ImplicitCastExpr 0x5637768c6b10 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768c6b28 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.4]->code
   6: ImplicitCastExpr 0x5637768c6c68 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c6b28 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768c6ba8 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
([B1.7]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768c6bc0 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.8]->u
  10: MemberExpr 0x5637768c6bf8 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.9].s
  11: MemberExpr 0x5637768c6c30 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.10].info
  12: ImplicitCastExpr 0x5637768c6c80 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c6c30 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x5637768c6c98 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c6c68 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c6b28 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c6c80 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c6c30 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.6][[B1.12]]
  14: ImplicitCastExpr 0x5637768c7020 <./lopcodes.h:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768c6ce0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768c6cc0 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768c6c98 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768c6c68 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768c6b28 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768c6c80 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768c6c30 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
(([B1.13])) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: IntegerLiteral 0x5637768c6d00 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x5637768c6d30 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
(Instruction)[B1.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x5637768c6d58 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
~[B1.16]
  18: IntegerLiteral 0x5637768c6d98 <./lopcodes.h:38:17> 'int' 9
9
  19: BinaryOperator 0x5637768c6db8 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
([B1.17]) << [B1.18]
  20: UnaryOperator 0x5637768c6e00 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c6de0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c6db8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
~([B1.19])
  21: IntegerLiteral 0x5637768c6e40 <./lopcodes.h:44:17> 'int' 0
0
  22: IntegerLiteral 0x5637768c6e60 <./lopcodes.h:42:18> 'int' 6
6
  23: BinaryOperator 0x5637768c6e80 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
[B1.21] + [B1.22]
  24: IntegerLiteral 0x5637768c6ec8 <./lopcodes.h:40:17> 'int' 8
8
  25: BinaryOperator 0x5637768c6ee8 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
([B1.23]) + [B1.24]
  26: IntegerLiteral 0x5637768c6f30 <./lopcodes.h:37:17> 'int' 9
9
  27: BinaryOperator 0x5637768c6f50 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768c6f10 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768c6ee8 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768c6f30 <line:37:17> 'int' 9
([B1.25]) + [B1.26]
  28: BinaryOperator 0x5637768c6f98 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c6e20 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c6e00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c6de0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c6db8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
`-ParenExpr 0x5637768c6f78 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768c6f50 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768c6f10 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768c6ee8 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768c6f30 <line:37:17> 'int' 9
([B1.20]) << ([B1.27])
  29: UnaryOperator 0x5637768c6fe0 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c6fc0 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c6f98 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c6e20 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c6e00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c6de0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c6db8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768c6f78 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768c6f50 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768c6f10 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768c6ee8 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768c6f30 <line:37:17> 'int' 9
~([B1.28])
  30: BinaryOperator 0x5637768c7038 <./lopcodes.h:89:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768c7020 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768c6ce0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768c6cc0 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768c6c98 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768c6c68 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768c6b28 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768c6c80 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768c6c30 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ParenExpr 0x5637768c7000 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768c6fe0 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768c6fc0 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c6f98 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c6e20 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c6e00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c6de0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c6db8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768c6f78 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768c6f50 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768c6f10 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768c6ee8 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768c6f30 <line:37:17> 'int' 9
[B1.14] & ([B1.29])
  31: DeclRefExpr 0x5637768c7080 <lcode.c:285:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
nresults
  32: ImplicitCastExpr 0x5637768c70c8 <lcode.c:285:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
[B1.31] (ImplicitCastExpr, LValueToRValue, int)
  33: IntegerLiteral 0x5637768c70a8 <lcode.c:285:39> 'int' 1
1
  34: BinaryOperator 0x5637768c70e0 <lcode.c:285:30, col:39> 'int' '+'
|-ImplicitCastExpr 0x5637768c70c8 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
`-IntegerLiteral 0x5637768c70a8 <col:39> 'int' 1
[B1.32] + [B1.33]
  35: CStyleCastExpr 0x5637768c7168 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768c7148 <col:26, col:30> 'int'
  `-BinaryOperator 0x5637768c70e0 <lcode.c:285:30, col:39> 'int' '+'
    |-ImplicitCastExpr 0x5637768c70c8 <col:30> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
    `-IntegerLiteral 0x5637768c70a8 <col:39> 'int' 1
(Instruction)([B1.34]) (CStyleCastExpr, IntegralCast, Instruction)
  36: IntegerLiteral 0x5637768c71b0 <./lopcodes.h:44:17> 'int' 0
0
  37: IntegerLiteral 0x5637768c71d0 <./lopcodes.h:42:18> 'int' 6
6
  38: BinaryOperator 0x5637768c71f0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
[B1.36] + [B1.37]
  39: IntegerLiteral 0x5637768c7238 <./lopcodes.h:40:17> 'int' 8
8
  40: BinaryOperator 0x5637768c7258 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c7218 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c71f0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c7238 <line:40:17> 'int' 8
([B1.38]) + [B1.39]
  41: IntegerLiteral 0x5637768c72a0 <./lopcodes.h:37:17> 'int' 9
9
  42: BinaryOperator 0x5637768c72c0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768c7280 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768c7258 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768c7218 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768c71f0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768c7238 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768c72a0 <line:37:17> 'int' 9
([B1.40]) + [B1.41]
  43: BinaryOperator 0x5637768c7308 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c7190 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768c7168 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x5637768c7148 <col:26, col:30> 'int'
|     `-BinaryOperator 0x5637768c70e0 <lcode.c:285:30, col:39> 'int' '+'
|       |-ImplicitCastExpr 0x5637768c70c8 <col:30> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
|       `-IntegerLiteral 0x5637768c70a8 <col:39> 'int' 1
`-ParenExpr 0x5637768c72e8 <./lopcodes.h:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768c72c0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768c7280 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768c7258 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768c7218 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768c71f0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768c7238 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768c72a0 <line:37:17> 'int' 9
([B1.35]) << ([B1.42])
  44: IntegerLiteral 0x5637768c7350 <./lopcodes.h:71:39> 'int' 0
0
  45: CStyleCastExpr 0x5637768c7380 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
(Instruction)[B1.44] (CStyleCastExpr, IntegralCast, Instruction)
  46: UnaryOperator 0x5637768c73a8 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
~[B1.45]
  47: IntegerLiteral 0x5637768c73e8 <./lopcodes.h:38:17> 'int' 9
9
  48: BinaryOperator 0x5637768c7408 <./lopcodes.h:71:24, line:38:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c73c8 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c73a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c73e8 <line:38:17> 'int' 9
([B1.46]) << [B1.47]
  49: UnaryOperator 0x5637768c7450 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c7430 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c7408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c73c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c73a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c73e8 <line:38:17> 'int' 9
~([B1.48])
  50: IntegerLiteral 0x5637768c7490 <./lopcodes.h:44:17> 'int' 0
0
  51: IntegerLiteral 0x5637768c74b0 <./lopcodes.h:42:18> 'int' 6
6
  52: BinaryOperator 0x5637768c74d0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
[B1.50] + [B1.51]
  53: IntegerLiteral 0x5637768c7518 <./lopcodes.h:40:17> 'int' 8
8
  54: BinaryOperator 0x5637768c7538 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c74f8 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c74d0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c7518 <line:40:17> 'int' 8
([B1.52]) + [B1.53]
  55: IntegerLiteral 0x5637768c7580 <./lopcodes.h:37:17> 'int' 9
9
  56: BinaryOperator 0x5637768c75a0 <./lopcodes.h:46:16, line:37:17> 'int' '+'
|-ParenExpr 0x5637768c7560 <line:46:16, col:31> 'int'
| `-BinaryOperator 0x5637768c7538 <line:45:16, line:40:17> 'int' '+'
|   |-ParenExpr 0x5637768c74f8 <line:45:16, col:33> 'int'
|   | `-BinaryOperator 0x5637768c74d0 <line:44:17, line:42:18> 'int' '+'
|   |   |-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
|   |   `-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
|   `-IntegerLiteral 0x5637768c7518 <line:40:17> 'int' 8
`-IntegerLiteral 0x5637768c7580 <line:37:17> 'int' 9
([B1.54]) + [B1.55]
  57: BinaryOperator 0x5637768c75e8 <./lopcodes.h:71:21, line:47:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c7470 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c7450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c7430 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c7408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c73c8 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c73a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c73e8 <line:38:17> 'int' 9
`-ParenExpr 0x5637768c75c8 <line:47:16, col:31> 'int'
  `-BinaryOperator 0x5637768c75a0 <line:46:16, line:37:17> 'int' '+'
    |-ParenExpr 0x5637768c7560 <line:46:16, col:31> 'int'
    | `-BinaryOperator 0x5637768c7538 <line:45:16, line:40:17> 'int' '+'
    |   |-ParenExpr 0x5637768c74f8 <line:45:16, col:33> 'int'
    |   | `-BinaryOperator 0x5637768c74d0 <line:44:17, line:42:18> 'int' '+'
    |   |   |-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
    |   |   `-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
    |   `-IntegerLiteral 0x5637768c7518 <line:40:17> 'int' 8
    `-IntegerLiteral 0x5637768c7580 <line:37:17> 'int' 9
([B1.49]) << ([B1.56])
  58: BinaryOperator 0x5637768c7630 <./lopcodes.h:90:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768c7330 <line:90:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768c7308 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768c7190 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768c7168 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x5637768c7148 <col:26, col:30> 'int'
|   |     `-BinaryOperator 0x5637768c70e0 <lcode.c:285:30, col:39> 'int' '+'
|   |       |-ImplicitCastExpr 0x5637768c70c8 <col:30> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
|   |       `-IntegerLiteral 0x5637768c70a8 <col:39> 'int' 1
|   `-ParenExpr 0x5637768c72e8 <./lopcodes.h:47:16, col:31> 'int'
|     `-BinaryOperator 0x5637768c72c0 <line:46:16, line:37:17> 'int' '+'
|       |-ParenExpr 0x5637768c7280 <line:46:16, col:31> 'int'
|       | `-BinaryOperator 0x5637768c7258 <line:45:16, line:40:17> 'int' '+'
|       |   |-ParenExpr 0x5637768c7218 <line:45:16, col:33> 'int'
|       |   | `-BinaryOperator 0x5637768c71f0 <line:44:17, line:42:18> 'int' '+'
|       |   |   |-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
|       |   |   `-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
|       |   `-IntegerLiteral 0x5637768c7238 <line:40:17> 'int' 8
|       `-IntegerLiteral 0x5637768c72a0 <line:37:17> 'int' 9
`-ParenExpr 0x5637768c7610 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c75e8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c7470 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c7450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c7430 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c7408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c73c8 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c73a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c73e8 <line:38:17> 'int' 9
    `-ParenExpr 0x5637768c75c8 <line:47:16, col:31> 'int'
      `-BinaryOperator 0x5637768c75a0 <line:46:16, line:37:17> 'int' '+'
        |-ParenExpr 0x5637768c7560 <line:46:16, col:31> 'int'
        | `-BinaryOperator 0x5637768c7538 <line:45:16, line:40:17> 'int' '+'
        |   |-ParenExpr 0x5637768c74f8 <line:45:16, col:33> 'int'
        |   | `-BinaryOperator 0x5637768c74d0 <line:44:17, line:42:18> 'int' '+'
        |   |   |-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
        |   |   `-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
        |   `-IntegerLiteral 0x5637768c7518 <line:40:17> 'int' 8
        `-IntegerLiteral 0x5637768c7580 <line:37:17> 'int' 9
([B1.43]) & ([B1.57])
  59: BinaryOperator 0x5637768c7678 <./lopcodes.h:89:31, line:90:53> 'unsigned int' '|'
|-ParenExpr 0x5637768c7060 <line:89:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768c7038 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768c7020 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768c6ce0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768c6cc0 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768c6c98 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768c6c68 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768c6b28 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768c6c80 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768c6c30 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
|   `-ParenExpr 0x5637768c7000 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768c6fe0 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768c6fc0 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768c6f98 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768c6e20 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768c6e00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768c6de0 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768c6db8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
|           `-ParenExpr 0x5637768c6f78 <line:47:16, col:31> 'int'
|             `-BinaryOperator 0x5637768c6f50 <line:46:16, line:37:17> 'int' '+'
|               |-ParenExpr 0x5637768c6f10 <line:46:16, col:31> 'int'
|               | `-BinaryOperator 0x5637768c6ee8 <line:45:16, line:40:17> 'int' '+'
|               |   |-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
|               |   | `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
|               |   |   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
|               |   |   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
|               |   `-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
|               `-IntegerLiteral 0x5637768c6f30 <line:37:17> 'int' 9
`-ParenExpr 0x5637768c7658 <line:90:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768c7630 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768c7330 <line:90:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768c7308 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768c7190 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768c7168 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x5637768c7148 <col:26, col:30> 'int'
    |   |     `-BinaryOperator 0x5637768c70e0 <lcode.c:285:30, col:39> 'int' '+'
    |   |       |-ImplicitCastExpr 0x5637768c70c8 <col:30> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
    |   |       `-IntegerLiteral 0x5637768c70a8 <col:39> 'int' 1
    |   `-ParenExpr 0x5637768c72e8 <./lopcodes.h:47:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768c72c0 <line:46:16, line:37:17> 'int' '+'
    |       |-ParenExpr 0x5637768c7280 <line:46:16, col:31> 'int'
    |       | `-BinaryOperator 0x5637768c7258 <line:45:16, line:40:17> 'int' '+'
    |       |   |-ParenExpr 0x5637768c7218 <line:45:16, col:33> 'int'
    |       |   | `-BinaryOperator 0x5637768c71f0 <line:44:17, line:42:18> 'int' '+'
    |       |   |   |-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
    |       |   |   `-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
    |       |   `-IntegerLiteral 0x5637768c7238 <line:40:17> 'int' 8
    |       `-IntegerLiteral 0x5637768c72a0 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768c7610 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c75e8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c7470 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c7450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c7430 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c7408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c73c8 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c73a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c73e8 <line:38:17> 'int' 9
        `-ParenExpr 0x5637768c75c8 <line:47:16, col:31> 'int'
          `-BinaryOperator 0x5637768c75a0 <line:46:16, line:37:17> 'int' '+'
            |-ParenExpr 0x5637768c7560 <line:46:16, col:31> 'int'
            | `-BinaryOperator 0x5637768c7538 <line:45:16, line:40:17> 'int' '+'
            |   |-ParenExpr 0x5637768c74f8 <line:45:16, col:33> 'int'
            |   | `-BinaryOperator 0x5637768c74d0 <line:44:17, line:42:18> 'int' '+'
            |   |   |-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
            |   |   `-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
            |   `-IntegerLiteral 0x5637768c7518 <line:40:17> 'int' 8
            `-IntegerLiteral 0x5637768c7580 <line:37:17> 'int' 9
([B1.30]) | ([B1.58])
  60: DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
  61: ImplicitCastExpr 0x5637768c6838 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B1.60]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  62: MemberExpr 0x5637768c6850 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c6838 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.61]->f
  63: ImplicitCastExpr 0x5637768c6888 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c6850 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c6838 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.62] (ImplicitCastExpr, LValueToRValue, Proto *)
  64: MemberExpr 0x5637768c68a0 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c6888 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c6850 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c6838 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.63]->code
  65: ImplicitCastExpr 0x5637768c69e0 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c68a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c6888 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c6850 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c6838 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.64] (ImplicitCastExpr, LValueToRValue, Instruction *)
  66: DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
  67: ImplicitCastExpr 0x5637768c6920 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
([B1.66]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  68: MemberExpr 0x5637768c6938 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c6920 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.67]->u
  69: MemberExpr 0x5637768c6970 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c6938 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c6920 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.68].s
  70: MemberExpr 0x5637768c69a8 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c6970 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c6938 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c6920 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.69].info
  71: ImplicitCastExpr 0x5637768c69f8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c69a8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c6970 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c6938 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c6920 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.70] (ImplicitCastExpr, LValueToRValue, int)
  72: ArraySubscriptExpr 0x5637768c6a10 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c69e0 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c68a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c6888 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c6850 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c6838 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c69f8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c69a8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c6970 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c6938 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c6920 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.65][[B1.71]]
  73: BinaryOperator 0x5637768c76c0 <./lopcodes.h:89:24, line:90:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768c6a58 <line:89:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x5637768c6a38 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x5637768c6a10 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x5637768c69e0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x5637768c68a0 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|     |   `-ImplicitCastExpr 0x5637768c6888 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x5637768c6850 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|     |       `-ImplicitCastExpr 0x5637768c6838 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x5637768c6818 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x5637768c67f0 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768c69f8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x5637768c69a8 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|         `-MemberExpr 0x5637768c6970 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           `-MemberExpr 0x5637768c6938 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|             `-ImplicitCastExpr 0x5637768c6920 <col:38, col:40> 'expdesc *' <LValueToRValue>
|               `-ParenExpr 0x5637768c6900 <col:38, col:40> 'expdesc *' lvalue
|                 `-DeclRefExpr 0x5637768c68d8 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ParenExpr 0x5637768c76a0 <./lopcodes.h:89:30, line:90:54> 'unsigned int'
  `-BinaryOperator 0x5637768c7678 <line:89:31, line:90:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768c7060 <line:89:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768c7038 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768c7020 <line:89:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768c6ce0 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768c6cc0 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768c6c98 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768c6c68 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768c6b28 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768c6b10 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768c6ad8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768c6ac0 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768c6aa0 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768c6a78 <lcode.c:285:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768c6c80 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768c6c30 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768c6bf8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768c6bc0 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768c6ba8 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768c6b88 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768c6b60 <lcode.c:285:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
    |   `-ParenExpr 0x5637768c7000 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768c6fe0 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768c6fc0 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768c6f98 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768c6e20 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768c6e00 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768c6de0 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768c6db8 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768c6d78 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768c6d58 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768c6d30 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768c6d00 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768c6d98 <line:38:17> 'int' 9
    |           `-ParenExpr 0x5637768c6f78 <line:47:16, col:31> 'int'
    |             `-BinaryOperator 0x5637768c6f50 <line:46:16, line:37:17> 'int' '+'
    |               |-ParenExpr 0x5637768c6f10 <line:46:16, col:31> 'int'
    |               | `-BinaryOperator 0x5637768c6ee8 <line:45:16, line:40:17> 'int' '+'
    |               |   |-ParenExpr 0x5637768c6ea8 <line:45:16, col:33> 'int'
    |               |   | `-BinaryOperator 0x5637768c6e80 <line:44:17, line:42:18> 'int' '+'
    |               |   |   |-IntegerLiteral 0x5637768c6e40 <line:44:17> 'int' 0
    |               |   |   `-IntegerLiteral 0x5637768c6e60 <line:42:18> 'int' 6
    |               |   `-IntegerLiteral 0x5637768c6ec8 <line:40:17> 'int' 8
    |               `-IntegerLiteral 0x5637768c6f30 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768c7658 <line:90:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768c7630 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768c7330 <line:90:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768c7308 <./llimits.h:75:22, ./lopcodes.h:47:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768c7190 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768c7168 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x5637768c7148 <col:26, col:30> 'int'
        |   |     `-BinaryOperator 0x5637768c70e0 <lcode.c:285:30, col:39> 'int' '+'
        |   |       |-ImplicitCastExpr 0x5637768c70c8 <col:30> 'int' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x5637768c7080 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
        |   |       `-IntegerLiteral 0x5637768c70a8 <col:39> 'int' 1
        |   `-ParenExpr 0x5637768c72e8 <./lopcodes.h:47:16, col:31> 'int'
        |     `-BinaryOperator 0x5637768c72c0 <line:46:16, line:37:17> 'int' '+'
        |       |-ParenExpr 0x5637768c7280 <line:46:16, col:31> 'int'
        |       | `-BinaryOperator 0x5637768c7258 <line:45:16, line:40:17> 'int' '+'
        |       |   |-ParenExpr 0x5637768c7218 <line:45:16, col:33> 'int'
        |       |   | `-BinaryOperator 0x5637768c71f0 <line:44:17, line:42:18> 'int' '+'
        |       |   |   |-IntegerLiteral 0x5637768c71b0 <line:44:17> 'int' 0
        |       |   |   `-IntegerLiteral 0x5637768c71d0 <line:42:18> 'int' 6
        |       |   `-IntegerLiteral 0x5637768c7238 <line:40:17> 'int' 8
        |       `-IntegerLiteral 0x5637768c72a0 <line:37:17> 'int' 9
        `-ParenExpr 0x5637768c7610 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768c75e8 <col:21, line:47:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768c7470 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768c7450 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768c7430 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768c7408 <col:24, line:38:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768c73c8 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768c73a8 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768c7380 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768c7350 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768c73e8 <line:38:17> 'int' 9
            `-ParenExpr 0x5637768c75c8 <line:47:16, col:31> 'int'
              `-BinaryOperator 0x5637768c75a0 <line:46:16, line:37:17> 'int' '+'
                |-ParenExpr 0x5637768c7560 <line:46:16, col:31> 'int'
                | `-BinaryOperator 0x5637768c7538 <line:45:16, line:40:17> 'int' '+'
                |   |-ParenExpr 0x5637768c74f8 <line:45:16, col:33> 'int'
                |   | `-BinaryOperator 0x5637768c74d0 <line:44:17, line:42:18> 'int' '+'
                |   |   |-IntegerLiteral 0x5637768c7490 <line:44:17> 'int' 0
                |   |   `-IntegerLiteral 0x5637768c74b0 <line:42:18> 'int' 6
                |   `-IntegerLiteral 0x5637768c7518 <line:40:17> 'int' 8
                `-IntegerLiteral 0x5637768c7580 <line:37:17> 'int' 9
(([B1.72])) = ([B1.59])
  74: DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
  75: ImplicitCastExpr 0x5637768c79d8 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B1.74]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  76: MemberExpr 0x5637768c79f0 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.75]->f
  77: ImplicitCastExpr 0x5637768c7a28 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.76] (ImplicitCastExpr, LValueToRValue, Proto *)
  78: MemberExpr 0x5637768c7a40 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.77]->code
  79: ImplicitCastExpr 0x5637768c7b80 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c7a40 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.78] (ImplicitCastExpr, LValueToRValue, Instruction *)
  80: DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
  81: ImplicitCastExpr 0x5637768c7ac0 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
([B1.80]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  82: MemberExpr 0x5637768c7ad8 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.81]->u
  83: MemberExpr 0x5637768c7b10 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.82].s
  84: MemberExpr 0x5637768c7b48 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.83].info
  85: ImplicitCastExpr 0x5637768c7b98 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c7b48 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.84] (ImplicitCastExpr, LValueToRValue, int)
  86: ArraySubscriptExpr 0x5637768c7bb0 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c7b80 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c7a40 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c7b98 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c7b48 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.79][[B1.85]]
  87: ImplicitCastExpr 0x5637768c7e68 <./lopcodes.h:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768c7bf8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768c7bd8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768c7bb0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768c7b80 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768c7a40 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768c7b98 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768c7b48 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
(([B1.86])) (ImplicitCastExpr, LValueToRValue, Instruction)
  88: IntegerLiteral 0x5637768c7c18 <./lopcodes.h:71:39> 'int' 0
0
  89: CStyleCastExpr 0x5637768c7c48 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
(Instruction)[B1.88] (CStyleCastExpr, IntegralCast, Instruction)
  90: UnaryOperator 0x5637768c7c70 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
~[B1.89]
  91: IntegerLiteral 0x5637768c7cb0 <./lopcodes.h:40:17> 'int' 8
8
  92: BinaryOperator 0x5637768c7cd0 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
([B1.90]) << [B1.91]
  93: UnaryOperator 0x5637768c7d18 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c7cf8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c7cd0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
~([B1.92])
  94: IntegerLiteral 0x5637768c7d58 <./lopcodes.h:44:17> 'int' 0
0
  95: IntegerLiteral 0x5637768c7d78 <./lopcodes.h:42:18> 'int' 6
6
  96: BinaryOperator 0x5637768c7d98 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c7d58 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c7d78 <line:42:18> 'int' 6
[B1.94] + [B1.95]
  97: BinaryOperator 0x5637768c7de0 <./lopcodes.h:71:21, line:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c7d38 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c7d18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c7cf8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c7cd0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
`-ParenExpr 0x5637768c7dc0 <line:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768c7d98 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768c7d58 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768c7d78 <line:42:18> 'int' 6
([B1.93]) << ([B1.96])
  98: UnaryOperator 0x5637768c7e28 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c7e08 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c7de0 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c7d38 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c7d18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c7cf8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c7cd0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768c7dc0 <line:45:16, col:33> 'int'
      `-BinaryOperator 0x5637768c7d98 <line:44:17, line:42:18> 'int' '+'
        |-IntegerLiteral 0x5637768c7d58 <line:44:17> 'int' 0
        `-IntegerLiteral 0x5637768c7d78 <line:42:18> 'int' 6
~([B1.97])
  99: BinaryOperator 0x5637768c7e80 <./lopcodes.h:85:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768c7e68 <line:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768c7bf8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768c7bd8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768c7bb0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768c7b80 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768c7a40 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768c7b98 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768c7b48 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ParenExpr 0x5637768c7e48 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768c7e28 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768c7e08 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c7de0 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c7d38 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c7d18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c7cf8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c7cd0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
        `-ParenExpr 0x5637768c7dc0 <line:45:16, col:33> 'int'
          `-BinaryOperator 0x5637768c7d98 <line:44:17, line:42:18> 'int' '+'
            |-IntegerLiteral 0x5637768c7d58 <line:44:17> 'int' 0
            `-IntegerLiteral 0x5637768c7d78 <line:42:18> 'int' 6
[B1.87] & ([B1.98])
 100: DeclRefExpr 0x5637768c7ec8 <lcode.c:286:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
 101: ImplicitCastExpr 0x5637768c7ef0 <lcode.c:286:30> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.100] (ImplicitCastExpr, LValueToRValue, FuncState *)
 102: MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
`-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.101]->freereg
 103: ImplicitCastExpr 0x5637768c7fa0 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768c7f80 <col:26, col:30> 'int' lvalue
  `-MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
    `-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B1.102]) (ImplicitCastExpr, LValueToRValue, int)
 104: CStyleCastExpr 0x5637768c7fb8 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768c7fa0 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768c7f80 <col:26, col:30> 'int' lvalue
    `-MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
      `-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
(Instruction)[B1.103] (CStyleCastExpr, IntegralCast, Instruction)
 105: IntegerLiteral 0x5637768c8000 <./lopcodes.h:44:17> 'int' 0
0
 106: IntegerLiteral 0x5637768c8020 <./lopcodes.h:42:18> 'int' 6
6
 107: BinaryOperator 0x5637768c8040 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c8000 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c8020 <line:42:18> 'int' 6
[B1.105] + [B1.106]
 108: BinaryOperator 0x5637768c8088 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c7fe0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768c7fb8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ImplicitCastExpr 0x5637768c7fa0 <col:26, col:30> 'int' <LValueToRValue>
|     `-ParenExpr 0x5637768c7f80 <col:26, col:30> 'int' lvalue
|       `-MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
|         `-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
|           `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ParenExpr 0x5637768c8068 <./lopcodes.h:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768c8040 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768c8000 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768c8020 <line:42:18> 'int' 6
([B1.104]) << ([B1.107])
 109: IntegerLiteral 0x5637768c80d0 <./lopcodes.h:71:39> 'int' 0
0
 110: CStyleCastExpr 0x5637768c8100 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
(Instruction)[B1.109] (CStyleCastExpr, IntegralCast, Instruction)
 111: UnaryOperator 0x5637768c8128 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
~[B1.110]
 112: IntegerLiteral 0x5637768c8168 <./lopcodes.h:40:17> 'int' 8
8
 113: BinaryOperator 0x5637768c8188 <./lopcodes.h:71:24, line:40:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c8148 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c8128 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c8168 <line:40:17> 'int' 8
([B1.111]) << [B1.112]
 114: UnaryOperator 0x5637768c81d0 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c81b0 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c8188 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c8148 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c8128 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c8168 <line:40:17> 'int' 8
~([B1.113])
 115: IntegerLiteral 0x5637768c8210 <./lopcodes.h:44:17> 'int' 0
0
 116: IntegerLiteral 0x5637768c8230 <./lopcodes.h:42:18> 'int' 6
6
 117: BinaryOperator 0x5637768c8250 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c8210 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c8230 <line:42:18> 'int' 6
[B1.115] + [B1.116]
 118: BinaryOperator 0x5637768c8298 <./lopcodes.h:71:21, line:45:33> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c81f0 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c81d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c81b0 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c8188 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c8148 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c8128 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c8168 <line:40:17> 'int' 8
`-ParenExpr 0x5637768c8278 <line:45:16, col:33> 'int'
  `-BinaryOperator 0x5637768c8250 <line:44:17, line:42:18> 'int' '+'
    |-IntegerLiteral 0x5637768c8210 <line:44:17> 'int' 0
    `-IntegerLiteral 0x5637768c8230 <line:42:18> 'int' 6
([B1.114]) << ([B1.117])
 119: BinaryOperator 0x5637768c82e0 <./lopcodes.h:86:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768c80b0 <line:86:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768c8088 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768c7fe0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768c7fb8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x5637768c7fa0 <col:26, col:30> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x5637768c7f80 <col:26, col:30> 'int' lvalue
|   |       `-MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
|   |         `-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|   `-ParenExpr 0x5637768c8068 <./lopcodes.h:45:16, col:33> 'int'
|     `-BinaryOperator 0x5637768c8040 <line:44:17, line:42:18> 'int' '+'
|       |-IntegerLiteral 0x5637768c8000 <line:44:17> 'int' 0
|       `-IntegerLiteral 0x5637768c8020 <line:42:18> 'int' 6
`-ParenExpr 0x5637768c82c0 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c8298 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c81f0 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c81d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c81b0 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c8188 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c8148 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c8128 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c8168 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768c8278 <line:45:16, col:33> 'int'
      `-BinaryOperator 0x5637768c8250 <line:44:17, line:42:18> 'int' '+'
        |-IntegerLiteral 0x5637768c8210 <line:44:17> 'int' 0
        `-IntegerLiteral 0x5637768c8230 <line:42:18> 'int' 6
([B1.108]) & ([B1.118])
 120: BinaryOperator 0x5637768c8328 <./lopcodes.h:85:31, line:86:53> 'unsigned int' '|'
|-ParenExpr 0x5637768c7ea8 <line:85:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768c7e80 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768c7e68 <line:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768c7bf8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768c7bd8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768c7bb0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768c7b80 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768c7a40 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768c7b98 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768c7b48 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
|   `-ParenExpr 0x5637768c7e48 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768c7e28 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768c7e08 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768c7de0 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768c7d38 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768c7d18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768c7cf8 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768c7cd0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
|           `-ParenExpr 0x5637768c7dc0 <line:45:16, col:33> 'int'
|             `-BinaryOperator 0x5637768c7d98 <line:44:17, line:42:18> 'int' '+'
|               |-IntegerLiteral 0x5637768c7d58 <line:44:17> 'int' 0
|               `-IntegerLiteral 0x5637768c7d78 <line:42:18> 'int' 6
`-ParenExpr 0x5637768c8308 <line:86:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768c82e0 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768c80b0 <line:86:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768c8088 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768c7fe0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768c7fb8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x5637768c7fa0 <col:26, col:30> 'int' <LValueToRValue>
    |   |     `-ParenExpr 0x5637768c7f80 <col:26, col:30> 'int' lvalue
    |   |       `-MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
    |   |         `-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
    |   |           `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
    |   `-ParenExpr 0x5637768c8068 <./lopcodes.h:45:16, col:33> 'int'
    |     `-BinaryOperator 0x5637768c8040 <line:44:17, line:42:18> 'int' '+'
    |       |-IntegerLiteral 0x5637768c8000 <line:44:17> 'int' 0
    |       `-IntegerLiteral 0x5637768c8020 <line:42:18> 'int' 6
    `-ParenExpr 0x5637768c82c0 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c8298 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c81f0 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c81d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c81b0 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c8188 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c8148 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c8128 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c8168 <line:40:17> 'int' 8
        `-ParenExpr 0x5637768c8278 <line:45:16, col:33> 'int'
          `-BinaryOperator 0x5637768c8250 <line:44:17, line:42:18> 'int' '+'
            |-IntegerLiteral 0x5637768c8210 <line:44:17> 'int' 0
            `-IntegerLiteral 0x5637768c8230 <line:42:18> 'int' 6
([B1.99]) | ([B1.119])
 121: DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
 122: ImplicitCastExpr 0x5637768c7750 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B1.121]) (ImplicitCastExpr, LValueToRValue, FuncState *)
 123: MemberExpr 0x5637768c7768 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c7750 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.122]->f
 124: ImplicitCastExpr 0x5637768c77a0 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c7768 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c7750 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.123] (ImplicitCastExpr, LValueToRValue, Proto *)
 125: MemberExpr 0x5637768c77b8 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c77a0 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c7768 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c7750 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.124]->code
 126: ImplicitCastExpr 0x5637768c78f8 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c77b8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c77a0 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c7768 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c7750 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.125] (ImplicitCastExpr, LValueToRValue, Instruction *)
 127: DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
 128: ImplicitCastExpr 0x5637768c7838 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
([B1.127]) (ImplicitCastExpr, LValueToRValue, expdesc *)
 129: MemberExpr 0x5637768c7850 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c7838 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.128]->u
 130: MemberExpr 0x5637768c7888 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c7850 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c7838 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.129].s
 131: MemberExpr 0x5637768c78c0 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c7888 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c7850 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c7838 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.130].info
 132: ImplicitCastExpr 0x5637768c7910 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c78c0 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c7888 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c7850 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c7838 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.131] (ImplicitCastExpr, LValueToRValue, int)
 133: ArraySubscriptExpr 0x5637768c7928 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c78f8 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c77b8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c77a0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c7768 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c7750 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c7910 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c78c0 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c7888 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c7850 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c7838 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B1.126][[B1.132]]
 134: BinaryOperator 0x5637768c8370 <./lopcodes.h:85:24, line:86:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768c7970 <line:85:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x5637768c7950 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x5637768c7928 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x5637768c78f8 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x5637768c77b8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|     |   `-ImplicitCastExpr 0x5637768c77a0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x5637768c7768 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|     |       `-ImplicitCastExpr 0x5637768c7750 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x5637768c7730 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x5637768c7708 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768c7910 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x5637768c78c0 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|         `-MemberExpr 0x5637768c7888 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           `-MemberExpr 0x5637768c7850 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|             `-ImplicitCastExpr 0x5637768c7838 <col:38, col:40> 'expdesc *' <LValueToRValue>
|               `-ParenExpr 0x5637768c7818 <col:38, col:40> 'expdesc *' lvalue
|                 `-DeclRefExpr 0x5637768c77f0 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ParenExpr 0x5637768c8350 <./lopcodes.h:85:30, line:86:54> 'unsigned int'
  `-BinaryOperator 0x5637768c8328 <line:85:31, line:86:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768c7ea8 <line:85:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768c7e80 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768c7e68 <line:85:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768c7bf8 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768c7bd8 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768c7bb0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768c7b80 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768c7a40 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768c7a28 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768c79f0 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768c79d8 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768c79b8 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768c7990 <lcode.c:286:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768c7b98 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768c7b48 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768c7b10 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768c7ad8 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768c7ac0 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768c7aa0 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768c7a78 <lcode.c:286:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
    |   `-ParenExpr 0x5637768c7e48 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768c7e28 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768c7e08 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768c7de0 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768c7d38 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768c7d18 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768c7cf8 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768c7cd0 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768c7c90 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768c7c70 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768c7c48 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768c7c18 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768c7cb0 <line:40:17> 'int' 8
    |           `-ParenExpr 0x5637768c7dc0 <line:45:16, col:33> 'int'
    |             `-BinaryOperator 0x5637768c7d98 <line:44:17, line:42:18> 'int' '+'
    |               |-IntegerLiteral 0x5637768c7d58 <line:44:17> 'int' 0
    |               `-IntegerLiteral 0x5637768c7d78 <line:42:18> 'int' 6
    `-ParenExpr 0x5637768c8308 <line:86:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768c82e0 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768c80b0 <line:86:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768c8088 <./llimits.h:75:22, ./lopcodes.h:45:33> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768c7fe0 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768c7fb8 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ImplicitCastExpr 0x5637768c7fa0 <col:26, col:30> 'int' <LValueToRValue>
        |   |     `-ParenExpr 0x5637768c7f80 <col:26, col:30> 'int' lvalue
        |   |       `-MemberExpr 0x5637768c7f08 <lcode.c:286:30, col:34> 'int' lvalue ->freereg 0x56377687e268
        |   |         `-ImplicitCastExpr 0x5637768c7ef0 <col:30> 'FuncState *' <LValueToRValue>
        |   |           `-DeclRefExpr 0x5637768c7ec8 <col:30> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
        |   `-ParenExpr 0x5637768c8068 <./lopcodes.h:45:16, col:33> 'int'
        |     `-BinaryOperator 0x5637768c8040 <line:44:17, line:42:18> 'int' '+'
        |       |-IntegerLiteral 0x5637768c8000 <line:44:17> 'int' 0
        |       `-IntegerLiteral 0x5637768c8020 <line:42:18> 'int' 6
        `-ParenExpr 0x5637768c82c0 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768c8298 <col:21, line:45:33> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768c81f0 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768c81d0 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768c81b0 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768c8188 <col:24, line:40:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768c8148 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768c8128 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768c8100 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768c80d0 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768c8168 <line:40:17> 'int' 8
            `-ParenExpr 0x5637768c8278 <line:45:16, col:33> 'int'
              `-BinaryOperator 0x5637768c8250 <line:44:17, line:42:18> 'int' '+'
                |-IntegerLiteral 0x5637768c8210 <line:44:17> 'int' 0
                `-IntegerLiteral 0x5637768c8230 <line:42:18> 'int' 6
(([B1.133])) = ([B1.120])
 135: DeclRefExpr 0x5637768c83b8 <lcode.c:287:5> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
luaK_reserveregs
 136: ImplicitCastExpr 0x5637768c8428 <lcode.c:287:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768c83b8 <col:5> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
[B1.135] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
 137: DeclRefExpr 0x5637768c83e0 <lcode.c:287:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
 138: ImplicitCastExpr 0x5637768c8478 <lcode.c:287:22> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768c83e0 <col:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B1.137] (ImplicitCastExpr, LValueToRValue, FuncState *)
 139: IntegerLiteral 0x5637768c8408 <lcode.c:287:26> 'int' 1
1
 140: CallExpr 0x5637768c8440 <lcode.c:287:5, col:27> 'void'
|-ImplicitCastExpr 0x5637768c8428 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768c83b8 <col:5> 'void (FuncState *, int)' Function 0x5637768bdcb0 'luaK_reserveregs' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x5637768c8478 <col:22> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768c83e0 <col:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-IntegerLiteral 0x5637768c8408 <col:26> 'int' 1
[B1.136]([B1.138], [B1.139])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768c66e0 <lcode.c:284:12> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768c6708 <lcode.c:284:12> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768c66e0 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B2.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768c6720 <lcode.c:284:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768c6708 <col:12> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c66e0 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B2.2]->k
   4: ImplicitCastExpr 0x5637768c6780 <lcode.c:284:12, col:15> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768c6720 <col:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768c6708 <col:12> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768c66e0 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B2.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768c6798 <lcode.c:284:12, col:15> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768c6780 <col:12, col:15> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768c6720 <col:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768c6708 <col:12> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768c66e0 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768c6758 <lcode.c:284:20> 'int' EnumConstant 0x56377687d258 'VVARARG' 'int'
VVARARG
   7: ImplicitCastExpr 0x5637768c67b0 <lcode.c:284:20> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768c6758 <col:20> 'int' EnumConstant 0x56377687d258 'VVARARG' 'int'
[B2.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768c67c8 <lcode.c:284:12, col:20> 'int' '=='
|-ImplicitCastExpr 0x5637768c6798 <col:12, col:15> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768c6780 <col:12, col:15> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768c6720 <col:12, col:15> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768c6708 <col:12> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768c66e0 <col:12> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768c67b0 <col:20> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768c6758 <col:20> 'int' EnumConstant 0x56377687d258 'VVARARG' 'int'
[B2.5] == [B2.7]
   T: if [B2.8]
   Preds (1): B4
   Succs (2): B1 B0

 [B3]
   1: DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768c5a18 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B3.1]) (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768c5a30 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.2]->f
   4: ImplicitCastExpr 0x5637768c5a68 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, Proto *)
   5: MemberExpr 0x5637768c5a80 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.4]->code
   6: ImplicitCastExpr 0x5637768c5bc0 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c5a80 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, Instruction *)
   7: DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
   8: ImplicitCastExpr 0x5637768c5b00 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
([B3.7]) (ImplicitCastExpr, LValueToRValue, expdesc *)
   9: MemberExpr 0x5637768c5b18 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.8]->u
  10: MemberExpr 0x5637768c5b50 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.9].s
  11: MemberExpr 0x5637768c5b88 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.10].info
  12: ImplicitCastExpr 0x5637768c5bd8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c5b88 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ArraySubscriptExpr 0x5637768c5bf0 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c5bc0 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c5a80 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c5bd8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c5b88 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.6][[B3.12]]
  14: ImplicitCastExpr 0x5637768c5f10 <./lopcodes.h:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
`-ParenExpr 0x5637768c5c38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
  `-ParenExpr 0x5637768c5c18 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    `-ArraySubscriptExpr 0x5637768c5bf0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
      |-ImplicitCastExpr 0x5637768c5bc0 <col:24, col:33> 'Instruction *' <LValueToRValue>
      | `-MemberExpr 0x5637768c5a80 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
      |   `-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
      |     `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      |       `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
      |         `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
      |           `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
      `-ImplicitCastExpr 0x5637768c5bd8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
        `-MemberExpr 0x5637768c5b88 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
          `-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
            `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
              `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
                `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
                  `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
(([B3.13])) (ImplicitCastExpr, LValueToRValue, Instruction)
  15: IntegerLiteral 0x5637768c5c58 <./lopcodes.h:71:39> 'int' 0
0
  16: CStyleCastExpr 0x5637768c5c88 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
(Instruction)[B3.15] (CStyleCastExpr, IntegralCast, Instruction)
  17: UnaryOperator 0x5637768c5cb0 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
~[B3.16]
  18: IntegerLiteral 0x5637768c5cf0 <./lopcodes.h:37:17> 'int' 9
9
  19: BinaryOperator 0x5637768c5d10 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
([B3.17]) << [B3.18]
  20: UnaryOperator 0x5637768c5d58 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c5d38 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c5d10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
~([B3.19])
  21: IntegerLiteral 0x5637768c5d98 <./lopcodes.h:44:17> 'int' 0
0
  22: IntegerLiteral 0x5637768c5db8 <./lopcodes.h:42:18> 'int' 6
6
  23: BinaryOperator 0x5637768c5dd8 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
[B3.21] + [B3.22]
  24: IntegerLiteral 0x5637768c5e20 <./lopcodes.h:40:17> 'int' 8
8
  25: BinaryOperator 0x5637768c5e40 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c5e00 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c5dd8 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c5e20 <line:40:17> 'int' 8
([B3.23]) + [B3.24]
  26: BinaryOperator 0x5637768c5e88 <./lopcodes.h:71:21, line:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c5d78 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c5d58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c5d38 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c5d10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
`-ParenExpr 0x5637768c5e68 <line:46:16, col:31> 'int'
  `-BinaryOperator 0x5637768c5e40 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5637768c5e00 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5637768c5dd8 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768c5e20 <line:40:17> 'int' 8
([B3.20]) << ([B3.25])
  27: UnaryOperator 0x5637768c5ed0 <./lopcodes.h:74:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c5eb0 <col:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c5e88 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c5d78 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c5d58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c5d38 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c5d10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768c5e68 <line:46:16, col:31> 'int'
      `-BinaryOperator 0x5637768c5e40 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x5637768c5e00 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x5637768c5dd8 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768c5e20 <line:40:17> 'int' 8
~([B3.26])
  28: BinaryOperator 0x5637768c5f28 <./lopcodes.h:93:32, line:74:32> 'unsigned int' '&'
|-ImplicitCastExpr 0x5637768c5f10 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
| `-ParenExpr 0x5637768c5c38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   `-ParenExpr 0x5637768c5c18 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|     `-ArraySubscriptExpr 0x5637768c5bf0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|       |-ImplicitCastExpr 0x5637768c5bc0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|       | `-MemberExpr 0x5637768c5a80 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|       |   `-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
|       |     `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       |       `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
|       |         `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
|       |           `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|       `-ImplicitCastExpr 0x5637768c5bd8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5637768c5b88 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|           `-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|             `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|               `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
|                 `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
|                   `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ParenExpr 0x5637768c5ef0 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
  `-UnaryOperator 0x5637768c5ed0 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    `-ParenExpr 0x5637768c5eb0 <col:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c5e88 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c5d78 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c5d58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c5d38 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c5d10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
        `-ParenExpr 0x5637768c5e68 <line:46:16, col:31> 'int'
          `-BinaryOperator 0x5637768c5e40 <line:45:16, line:40:17> 'int' '+'
            |-ParenExpr 0x5637768c5e00 <line:45:16, col:33> 'int'
            | `-BinaryOperator 0x5637768c5dd8 <line:44:17, line:42:18> 'int' '+'
            |   |-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
            |   `-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
            `-IntegerLiteral 0x5637768c5e20 <line:40:17> 'int' 8
[B3.14] & ([B3.27])
  29: DeclRefExpr 0x5637768c5f70 <lcode.c:282:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
nresults
  30: ImplicitCastExpr 0x5637768c5fb8 <lcode.c:282:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
[B3.29] (ImplicitCastExpr, LValueToRValue, int)
  31: IntegerLiteral 0x5637768c5f98 <lcode.c:282:39> 'int' 1
1
  32: BinaryOperator 0x5637768c5fd0 <lcode.c:282:30, col:39> 'int' '+'
|-ImplicitCastExpr 0x5637768c5fb8 <col:30> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
`-IntegerLiteral 0x5637768c5f98 <col:39> 'int' 1
[B3.30] + [B3.31]
  33: CStyleCastExpr 0x5637768c6058 <./llimits.h:75:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
`-ParenExpr 0x5637768c6038 <col:26, col:30> 'int'
  `-BinaryOperator 0x5637768c5fd0 <lcode.c:282:30, col:39> 'int' '+'
    |-ImplicitCastExpr 0x5637768c5fb8 <col:30> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
    `-IntegerLiteral 0x5637768c5f98 <col:39> 'int' 1
(Instruction)([B3.32]) (CStyleCastExpr, IntegralCast, Instruction)
  34: IntegerLiteral 0x5637768c60a0 <./lopcodes.h:44:17> 'int' 0
0
  35: IntegerLiteral 0x5637768c60c0 <./lopcodes.h:42:18> 'int' 6
6
  36: BinaryOperator 0x5637768c60e0 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c60a0 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c60c0 <line:42:18> 'int' 6
[B3.34] + [B3.35]
  37: IntegerLiteral 0x5637768c6128 <./lopcodes.h:40:17> 'int' 8
8
  38: BinaryOperator 0x5637768c6148 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c6108 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c60e0 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c60a0 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c60c0 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c6128 <line:40:17> 'int' 8
([B3.36]) + [B3.37]
  39: BinaryOperator 0x5637768c6190 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c6080 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
| `-CStyleCastExpr 0x5637768c6058 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   `-ParenExpr 0x5637768c6038 <col:26, col:30> 'int'
|     `-BinaryOperator 0x5637768c5fd0 <lcode.c:282:30, col:39> 'int' '+'
|       |-ImplicitCastExpr 0x5637768c5fb8 <col:30> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
|       `-IntegerLiteral 0x5637768c5f98 <col:39> 'int' 1
`-ParenExpr 0x5637768c6170 <./lopcodes.h:46:16, col:31> 'int'
  `-BinaryOperator 0x5637768c6148 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5637768c6108 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5637768c60e0 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5637768c60a0 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5637768c60c0 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768c6128 <line:40:17> 'int' 8
([B3.33]) << ([B3.38])
  40: IntegerLiteral 0x5637768c61d8 <./lopcodes.h:71:39> 'int' 0
0
  41: CStyleCastExpr 0x5637768c6208 <./lopcodes.h:71:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
`-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
(Instruction)[B3.40] (CStyleCastExpr, IntegralCast, Instruction)
  42: UnaryOperator 0x5637768c6230 <./lopcodes.h:71:25, col:39> 'Instruction':'unsigned int' prefix '~'
`-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
  `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
~[B3.41]
  43: IntegerLiteral 0x5637768c6270 <./lopcodes.h:37:17> 'int' 9
9
  44: BinaryOperator 0x5637768c6290 <./lopcodes.h:71:24, line:37:17> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c6250 <line:71:24, col:40> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c6230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|   `-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
`-IntegerLiteral 0x5637768c6270 <line:37:17> 'int' 9
([B3.42]) << [B3.43]
  45: UnaryOperator 0x5637768c62d8 <./lopcodes.h:71:22, col:44> 'Instruction':'unsigned int' prefix '~'
`-ParenExpr 0x5637768c62b8 <col:23, col:44> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c6290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c6250 <line:71:24, col:40> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c6230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |   `-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
    `-IntegerLiteral 0x5637768c6270 <line:37:17> 'int' 9
~([B3.44])
  46: IntegerLiteral 0x5637768c6318 <./lopcodes.h:44:17> 'int' 0
0
  47: IntegerLiteral 0x5637768c6338 <./lopcodes.h:42:18> 'int' 6
6
  48: BinaryOperator 0x5637768c6358 <./lopcodes.h:44:17, line:42:18> 'int' '+'
|-IntegerLiteral 0x5637768c6318 <line:44:17> 'int' 0
`-IntegerLiteral 0x5637768c6338 <line:42:18> 'int' 6
[B3.46] + [B3.47]
  49: IntegerLiteral 0x5637768c63a0 <./lopcodes.h:40:17> 'int' 8
8
  50: BinaryOperator 0x5637768c63c0 <./lopcodes.h:45:16, line:40:17> 'int' '+'
|-ParenExpr 0x5637768c6380 <line:45:16, col:33> 'int'
| `-BinaryOperator 0x5637768c6358 <line:44:17, line:42:18> 'int' '+'
|   |-IntegerLiteral 0x5637768c6318 <line:44:17> 'int' 0
|   `-IntegerLiteral 0x5637768c6338 <line:42:18> 'int' 6
`-IntegerLiteral 0x5637768c63a0 <line:40:17> 'int' 8
([B3.48]) + [B3.49]
  51: BinaryOperator 0x5637768c6408 <./lopcodes.h:71:21, line:46:31> 'Instruction':'unsigned int' '<<'
|-ParenExpr 0x5637768c62f8 <line:71:21, col:45> 'Instruction':'unsigned int'
| `-UnaryOperator 0x5637768c62d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|   `-ParenExpr 0x5637768c62b8 <col:23, col:44> 'Instruction':'unsigned int'
|     `-BinaryOperator 0x5637768c6290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|       |-ParenExpr 0x5637768c6250 <line:71:24, col:40> 'Instruction':'unsigned int'
|       | `-UnaryOperator 0x5637768c6230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|       |   `-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
|       `-IntegerLiteral 0x5637768c6270 <line:37:17> 'int' 9
`-ParenExpr 0x5637768c63e8 <line:46:16, col:31> 'int'
  `-BinaryOperator 0x5637768c63c0 <line:45:16, line:40:17> 'int' '+'
    |-ParenExpr 0x5637768c6380 <line:45:16, col:33> 'int'
    | `-BinaryOperator 0x5637768c6358 <line:44:17, line:42:18> 'int' '+'
    |   |-IntegerLiteral 0x5637768c6318 <line:44:17> 'int' 0
    |   `-IntegerLiteral 0x5637768c6338 <line:42:18> 'int' 6
    `-IntegerLiteral 0x5637768c63a0 <line:40:17> 'int' 8
([B3.45]) << ([B3.50])
  52: BinaryOperator 0x5637768c6450 <./lopcodes.h:94:4, line:71:49> 'unsigned int' '&'
|-ParenExpr 0x5637768c61b8 <line:94:4, col:32> 'Instruction':'unsigned int'
| `-BinaryOperator 0x5637768c6190 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
|   |-ParenExpr 0x5637768c6080 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
|   | `-CStyleCastExpr 0x5637768c6058 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x5637768c6038 <col:26, col:30> 'int'
|   |     `-BinaryOperator 0x5637768c5fd0 <lcode.c:282:30, col:39> 'int' '+'
|   |       |-ImplicitCastExpr 0x5637768c5fb8 <col:30> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
|   |       `-IntegerLiteral 0x5637768c5f98 <col:39> 'int' 1
|   `-ParenExpr 0x5637768c6170 <./lopcodes.h:46:16, col:31> 'int'
|     `-BinaryOperator 0x5637768c6148 <line:45:16, line:40:17> 'int' '+'
|       |-ParenExpr 0x5637768c6108 <line:45:16, col:33> 'int'
|       | `-BinaryOperator 0x5637768c60e0 <line:44:17, line:42:18> 'int' '+'
|       |   |-IntegerLiteral 0x5637768c60a0 <line:44:17> 'int' 0
|       |   `-IntegerLiteral 0x5637768c60c0 <line:42:18> 'int' 6
|       `-IntegerLiteral 0x5637768c6128 <line:40:17> 'int' 8
`-ParenExpr 0x5637768c6430 <line:71:20, col:49> 'Instruction':'unsigned int'
  `-BinaryOperator 0x5637768c6408 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |-ParenExpr 0x5637768c62f8 <line:71:21, col:45> 'Instruction':'unsigned int'
    | `-UnaryOperator 0x5637768c62d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |   `-ParenExpr 0x5637768c62b8 <col:23, col:44> 'Instruction':'unsigned int'
    |     `-BinaryOperator 0x5637768c6290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |       |-ParenExpr 0x5637768c6250 <line:71:24, col:40> 'Instruction':'unsigned int'
    |       | `-UnaryOperator 0x5637768c6230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |       |   `-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
    |       `-IntegerLiteral 0x5637768c6270 <line:37:17> 'int' 9
    `-ParenExpr 0x5637768c63e8 <line:46:16, col:31> 'int'
      `-BinaryOperator 0x5637768c63c0 <line:45:16, line:40:17> 'int' '+'
        |-ParenExpr 0x5637768c6380 <line:45:16, col:33> 'int'
        | `-BinaryOperator 0x5637768c6358 <line:44:17, line:42:18> 'int' '+'
        |   |-IntegerLiteral 0x5637768c6318 <line:44:17> 'int' 0
        |   `-IntegerLiteral 0x5637768c6338 <line:42:18> 'int' 6
        `-IntegerLiteral 0x5637768c63a0 <line:40:17> 'int' 8
([B3.39]) & ([B3.51])
  53: BinaryOperator 0x5637768c6498 <./lopcodes.h:93:31, line:94:53> 'unsigned int' '|'
|-ParenExpr 0x5637768c5f50 <line:93:31, col:55> 'unsigned int'
| `-BinaryOperator 0x5637768c5f28 <col:32, line:74:32> 'unsigned int' '&'
|   |-ImplicitCastExpr 0x5637768c5f10 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
|   | `-ParenExpr 0x5637768c5c38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
|   |   `-ParenExpr 0x5637768c5c18 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   |     `-ArraySubscriptExpr 0x5637768c5bf0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5637768c5bc0 <col:24, col:33> 'Instruction *' <LValueToRValue>
|   |       | `-MemberExpr 0x5637768c5a80 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   |       |   `-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
|   |       |     `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|   |       |       `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
|   |       |         `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
|   |       |           `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|   |       `-ImplicitCastExpr 0x5637768c5bd8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x5637768c5b88 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|   |           `-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   |             `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|   |               `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
|   |                 `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
|   |                   `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
|   `-ParenExpr 0x5637768c5ef0 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
|     `-UnaryOperator 0x5637768c5ed0 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
|       `-ParenExpr 0x5637768c5eb0 <col:20, col:49> 'Instruction':'unsigned int'
|         `-BinaryOperator 0x5637768c5e88 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
|           |-ParenExpr 0x5637768c5d78 <line:71:21, col:45> 'Instruction':'unsigned int'
|           | `-UnaryOperator 0x5637768c5d58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
|           |   `-ParenExpr 0x5637768c5d38 <col:23, col:44> 'Instruction':'unsigned int'
|           |     `-BinaryOperator 0x5637768c5d10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
|           |       |-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
|           |       | `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
|           |       |   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
|           |       |     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
|           |       `-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
|           `-ParenExpr 0x5637768c5e68 <line:46:16, col:31> 'int'
|             `-BinaryOperator 0x5637768c5e40 <line:45:16, line:40:17> 'int' '+'
|               |-ParenExpr 0x5637768c5e00 <line:45:16, col:33> 'int'
|               | `-BinaryOperator 0x5637768c5dd8 <line:44:17, line:42:18> 'int' '+'
|               |   |-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
|               |   `-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
|               `-IntegerLiteral 0x5637768c5e20 <line:40:17> 'int' 8
`-ParenExpr 0x5637768c6478 <line:94:3, col:53> 'unsigned int'
  `-BinaryOperator 0x5637768c6450 <col:4, line:71:49> 'unsigned int' '&'
    |-ParenExpr 0x5637768c61b8 <line:94:4, col:32> 'Instruction':'unsigned int'
    | `-BinaryOperator 0x5637768c6190 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
    |   |-ParenExpr 0x5637768c6080 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
    |   | `-CStyleCastExpr 0x5637768c6058 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x5637768c6038 <col:26, col:30> 'int'
    |   |     `-BinaryOperator 0x5637768c5fd0 <lcode.c:282:30, col:39> 'int' '+'
    |   |       |-ImplicitCastExpr 0x5637768c5fb8 <col:30> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
    |   |       `-IntegerLiteral 0x5637768c5f98 <col:39> 'int' 1
    |   `-ParenExpr 0x5637768c6170 <./lopcodes.h:46:16, col:31> 'int'
    |     `-BinaryOperator 0x5637768c6148 <line:45:16, line:40:17> 'int' '+'
    |       |-ParenExpr 0x5637768c6108 <line:45:16, col:33> 'int'
    |       | `-BinaryOperator 0x5637768c60e0 <line:44:17, line:42:18> 'int' '+'
    |       |   |-IntegerLiteral 0x5637768c60a0 <line:44:17> 'int' 0
    |       |   `-IntegerLiteral 0x5637768c60c0 <line:42:18> 'int' 6
    |       `-IntegerLiteral 0x5637768c6128 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768c6430 <line:71:20, col:49> 'Instruction':'unsigned int'
      `-BinaryOperator 0x5637768c6408 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
        |-ParenExpr 0x5637768c62f8 <line:71:21, col:45> 'Instruction':'unsigned int'
        | `-UnaryOperator 0x5637768c62d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
        |   `-ParenExpr 0x5637768c62b8 <col:23, col:44> 'Instruction':'unsigned int'
        |     `-BinaryOperator 0x5637768c6290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
        |       |-ParenExpr 0x5637768c6250 <line:71:24, col:40> 'Instruction':'unsigned int'
        |       | `-UnaryOperator 0x5637768c6230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
        |       |   `-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
        |       |     `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
        |       `-IntegerLiteral 0x5637768c6270 <line:37:17> 'int' 9
        `-ParenExpr 0x5637768c63e8 <line:46:16, col:31> 'int'
          `-BinaryOperator 0x5637768c63c0 <line:45:16, line:40:17> 'int' '+'
            |-ParenExpr 0x5637768c6380 <line:45:16, col:33> 'int'
            | `-BinaryOperator 0x5637768c6358 <line:44:17, line:42:18> 'int' '+'
            |   |-IntegerLiteral 0x5637768c6318 <line:44:17> 'int' 0
            |   `-IntegerLiteral 0x5637768c6338 <line:42:18> 'int' 6
            `-IntegerLiteral 0x5637768c63a0 <line:40:17> 'int' 8
([B3.28]) | ([B3.52])
  54: DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
fs
  55: ImplicitCastExpr 0x5637768c5790 <./lcode.h:39:24, col:27> 'FuncState *' <LValueToRValue>
`-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
  `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
([B3.54]) (ImplicitCastExpr, LValueToRValue, FuncState *)
  56: MemberExpr 0x5637768c57a8 <./lcode.h:39:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768c5790 <col:24, col:27> 'FuncState *' <LValueToRValue>
  `-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
    `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.55]->f
  57: ImplicitCastExpr 0x5637768c57e0 <./lcode.h:39:24, col:30> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768c57a8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768c5790 <col:24, col:27> 'FuncState *' <LValueToRValue>
    `-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
      `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.56] (ImplicitCastExpr, LValueToRValue, Proto *)
  58: MemberExpr 0x5637768c57f8 <./lcode.h:39:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
`-ImplicitCastExpr 0x5637768c57e0 <col:24, col:30> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768c57a8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768c5790 <col:24, col:27> 'FuncState *' <LValueToRValue>
      `-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
        `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.57]->code
  59: ImplicitCastExpr 0x5637768c5938 <./lcode.h:39:24, col:33> 'Instruction *' <LValueToRValue>
`-MemberExpr 0x5637768c57f8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
  `-ImplicitCastExpr 0x5637768c57e0 <col:24, col:30> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768c57a8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768c5790 <col:24, col:27> 'FuncState *' <LValueToRValue>
        `-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
          `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
[B3.58] (ImplicitCastExpr, LValueToRValue, Instruction *)
  60: DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
  61: ImplicitCastExpr 0x5637768c5878 <./lcode.h:39:38, col:40> 'expdesc *' <LValueToRValue>
`-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
  `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
([B3.60]) (ImplicitCastExpr, LValueToRValue, expdesc *)
  62: MemberExpr 0x5637768c5890 <./lcode.h:39:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768c5878 <col:38, col:40> 'expdesc *' <LValueToRValue>
  `-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
    `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.61]->u
  63: MemberExpr 0x5637768c58c8 <./lcode.h:39:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768c5890 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768c5878 <col:38, col:40> 'expdesc *' <LValueToRValue>
    `-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
      `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.62].s
  64: MemberExpr 0x5637768c5900 <./lcode.h:39:38, col:47> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768c58c8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768c5890 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768c5878 <col:38, col:40> 'expdesc *' <LValueToRValue>
      `-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
        `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.63].info
  65: ImplicitCastExpr 0x5637768c5950 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
`-MemberExpr 0x5637768c5900 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768c58c8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768c5890 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768c5878 <col:38, col:40> 'expdesc *' <LValueToRValue>
        `-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
          `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.64] (ImplicitCastExpr, LValueToRValue, int)
  66: ArraySubscriptExpr 0x5637768c5968 <./lcode.h:39:24, col:51> 'Instruction':'unsigned int' lvalue
|-ImplicitCastExpr 0x5637768c5938 <col:24, col:33> 'Instruction *' <LValueToRValue>
| `-MemberExpr 0x5637768c57f8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|   `-ImplicitCastExpr 0x5637768c57e0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     `-MemberExpr 0x5637768c57a8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|       `-ImplicitCastExpr 0x5637768c5790 <col:24, col:27> 'FuncState *' <LValueToRValue>
|         `-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
|           `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768c5950 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
  `-MemberExpr 0x5637768c5900 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768c58c8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768c5890 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768c5878 <col:38, col:40> 'expdesc *' <LValueToRValue>
          `-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
            `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B3.59][[B3.65]]
  67: BinaryOperator 0x5637768c6680 <./lopcodes.h:93:24, line:94:54> 'Instruction':'unsigned int' '='
|-ParenExpr 0x5637768c59b0 <line:93:24, col:26> 'Instruction':'unsigned int' lvalue
| `-ParenExpr 0x5637768c5990 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
|   `-ArraySubscriptExpr 0x5637768c5968 <col:24, col:51> 'Instruction':'unsigned int' lvalue
|     |-ImplicitCastExpr 0x5637768c5938 <col:24, col:33> 'Instruction *' <LValueToRValue>
|     | `-MemberExpr 0x5637768c57f8 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
|     |   `-ImplicitCastExpr 0x5637768c57e0 <col:24, col:30> 'Proto *' <LValueToRValue>
|     |     `-MemberExpr 0x5637768c57a8 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
|     |       `-ImplicitCastExpr 0x5637768c5790 <col:24, col:27> 'FuncState *' <LValueToRValue>
|     |         `-ParenExpr 0x5637768c5770 <col:24, col:27> 'FuncState *' lvalue
|     |           `-DeclRefExpr 0x5637768c5748 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
|     `-ImplicitCastExpr 0x5637768c5950 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
|       `-MemberExpr 0x5637768c5900 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
|         `-MemberExpr 0x5637768c58c8 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|           `-MemberExpr 0x5637768c5890 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|             `-ImplicitCastExpr 0x5637768c5878 <col:38, col:40> 'expdesc *' <LValueToRValue>
|               `-ParenExpr 0x5637768c5858 <col:38, col:40> 'expdesc *' lvalue
|                 `-DeclRefExpr 0x5637768c5830 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ParenExpr 0x5637768c64c0 <./lopcodes.h:93:30, line:94:54> 'unsigned int'
  `-BinaryOperator 0x5637768c6498 <line:93:31, line:94:53> 'unsigned int' '|'
    |-ParenExpr 0x5637768c5f50 <line:93:31, col:55> 'unsigned int'
    | `-BinaryOperator 0x5637768c5f28 <col:32, line:74:32> 'unsigned int' '&'
    |   |-ImplicitCastExpr 0x5637768c5f10 <line:93:32, col:34> 'Instruction':'unsigned int' <LValueToRValue>
    |   | `-ParenExpr 0x5637768c5c38 <col:32, col:34> 'Instruction':'unsigned int' lvalue
    |   |   `-ParenExpr 0x5637768c5c18 <./lcode.h:39:23, col:52> 'Instruction':'unsigned int' lvalue
    |   |     `-ArraySubscriptExpr 0x5637768c5bf0 <col:24, col:51> 'Instruction':'unsigned int' lvalue
    |   |       |-ImplicitCastExpr 0x5637768c5bc0 <col:24, col:33> 'Instruction *' <LValueToRValue>
    |   |       | `-MemberExpr 0x5637768c5a80 <col:24, col:33> 'Instruction *' lvalue ->code 0x563776857e38
    |   |       |   `-ImplicitCastExpr 0x5637768c5a68 <col:24, col:30> 'Proto *' <LValueToRValue>
    |   |       |     `-MemberExpr 0x5637768c5a30 <col:24, col:30> 'Proto *' lvalue ->f 0x56377687ddb8
    |   |       |       `-ImplicitCastExpr 0x5637768c5a18 <col:24, col:27> 'FuncState *' <LValueToRValue>
    |   |       |         `-ParenExpr 0x5637768c59f8 <col:24, col:27> 'FuncState *' lvalue
    |   |       |           `-DeclRefExpr 0x5637768c59d0 <lcode.c:282:22> 'FuncState *' lvalue ParmVar 0x5637768c53b8 'fs' 'FuncState *'
    |   |       `-ImplicitCastExpr 0x5637768c5bd8 <./lcode.h:39:38, col:47> 'int' <LValueToRValue>
    |   |         `-MemberExpr 0x5637768c5b88 <col:38, col:47> 'int' lvalue .info 0x56377687d5f8
    |   |           `-MemberExpr 0x5637768c5b50 <col:38, col:45> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |   |             `-MemberExpr 0x5637768c5b18 <col:38, col:43> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |   |               `-ImplicitCastExpr 0x5637768c5b00 <col:38, col:40> 'expdesc *' <LValueToRValue>
    |   |                 `-ParenExpr 0x5637768c5ae0 <col:38, col:40> 'expdesc *' lvalue
    |   |                   `-DeclRefExpr 0x5637768c5ab8 <lcode.c:282:26> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
    |   `-ParenExpr 0x5637768c5ef0 <./lopcodes.h:74:20, col:32> 'Instruction':'unsigned int'
    |     `-UnaryOperator 0x5637768c5ed0 <col:21, line:71:49> 'Instruction':'unsigned int' prefix '~'
    |       `-ParenExpr 0x5637768c5eb0 <col:20, col:49> 'Instruction':'unsigned int'
    |         `-BinaryOperator 0x5637768c5e88 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
    |           |-ParenExpr 0x5637768c5d78 <line:71:21, col:45> 'Instruction':'unsigned int'
    |           | `-UnaryOperator 0x5637768c5d58 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
    |           |   `-ParenExpr 0x5637768c5d38 <col:23, col:44> 'Instruction':'unsigned int'
    |           |     `-BinaryOperator 0x5637768c5d10 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
    |           |       |-ParenExpr 0x5637768c5cd0 <line:71:24, col:40> 'Instruction':'unsigned int'
    |           |       | `-UnaryOperator 0x5637768c5cb0 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
    |           |       |   `-CStyleCastExpr 0x5637768c5c88 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
    |           |       |     `-IntegerLiteral 0x5637768c5c58 <col:39> 'int' 0
    |           |       `-IntegerLiteral 0x5637768c5cf0 <line:37:17> 'int' 9
    |           `-ParenExpr 0x5637768c5e68 <line:46:16, col:31> 'int'
    |             `-BinaryOperator 0x5637768c5e40 <line:45:16, line:40:17> 'int' '+'
    |               |-ParenExpr 0x5637768c5e00 <line:45:16, col:33> 'int'
    |               | `-BinaryOperator 0x5637768c5dd8 <line:44:17, line:42:18> 'int' '+'
    |               |   |-IntegerLiteral 0x5637768c5d98 <line:44:17> 'int' 0
    |               |   `-IntegerLiteral 0x5637768c5db8 <line:42:18> 'int' 6
    |               `-IntegerLiteral 0x5637768c5e20 <line:40:17> 'int' 8
    `-ParenExpr 0x5637768c6478 <line:94:3, col:53> 'unsigned int'
      `-BinaryOperator 0x5637768c6450 <col:4, line:71:49> 'unsigned int' '&'
        |-ParenExpr 0x5637768c61b8 <line:94:4, col:32> 'Instruction':'unsigned int'
        | `-BinaryOperator 0x5637768c6190 <./llimits.h:75:22, ./lopcodes.h:46:31> 'Instruction':'unsigned int' '<<'
        |   |-ParenExpr 0x5637768c6080 <./llimits.h:75:22, col:31> 'Instruction':'unsigned int'
        |   | `-CStyleCastExpr 0x5637768c6058 <col:23, col:30> 'Instruction':'unsigned int' <IntegralCast>
        |   |   `-ParenExpr 0x5637768c6038 <col:26, col:30> 'int'
        |   |     `-BinaryOperator 0x5637768c5fd0 <lcode.c:282:30, col:39> 'int' '+'
        |   |       |-ImplicitCastExpr 0x5637768c5fb8 <col:30> 'int' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x5637768c5f70 <col:30> 'int' lvalue ParmVar 0x5637768c54a0 'nresults' 'int'
        |   |       `-IntegerLiteral 0x5637768c5f98 <col:39> 'int' 1
        |   `-ParenExpr 0x5637768c6170 <./lopcodes.h:46:16, col:31> 'int'
        |     `-BinaryOperator 0x5637768c6148 <line:45:16, line:40:17> 'int' '+'
        |       |-ParenExpr 0x5637768c6108 <line:45:16, col:33> 'int'
        |       | `-BinaryOperator 0x5637768c60e0 <line:44:17, line:42:18> 'int' '+'
        |       |   |-IntegerLiteral 0x5637768c60a0 <line:44:17> 'int' 0
        |       |   `-IntegerLiteral 0x5637768c60c0 <line:42:18> 'int' 6
        |       `-IntegerLiteral 0x5637768c6128 <line:40:17> 'int' 8
        `-ParenExpr 0x5637768c6430 <line:71:20, col:49> 'Instruction':'unsigned int'
          `-BinaryOperator 0x5637768c6408 <col:21, line:46:31> 'Instruction':'unsigned int' '<<'
            |-ParenExpr 0x5637768c62f8 <line:71:21, col:45> 'Instruction':'unsigned int'
            | `-UnaryOperator 0x5637768c62d8 <col:22, col:44> 'Instruction':'unsigned int' prefix '~'
            |   `-ParenExpr 0x5637768c62b8 <col:23, col:44> 'Instruction':'unsigned int'
            |     `-BinaryOperator 0x5637768c6290 <col:24, line:37:17> 'Instruction':'unsigned int' '<<'
            |       |-ParenExpr 0x5637768c6250 <line:71:24, col:40> 'Instruction':'unsigned int'
            |       | `-UnaryOperator 0x5637768c6230 <col:25, col:39> 'Instruction':'unsigned int' prefix '~'
            |       |   `-CStyleCastExpr 0x5637768c6208 <col:26, col:39> 'Instruction':'unsigned int' <IntegralCast>
            |       |     `-IntegerLiteral 0x5637768c61d8 <col:39> 'int' 0
            |       `-IntegerLiteral 0x5637768c6270 <line:37:17> 'int' 9
            `-ParenExpr 0x5637768c63e8 <line:46:16, col:31> 'int'
              `-BinaryOperator 0x5637768c63c0 <line:45:16, line:40:17> 'int' '+'
                |-ParenExpr 0x5637768c6380 <line:45:16, col:33> 'int'
                | `-BinaryOperator 0x5637768c6358 <line:44:17, line:42:18> 'int' '+'
                |   |-IntegerLiteral 0x5637768c6318 <line:44:17> 'int' 0
                |   `-IntegerLiteral 0x5637768c6338 <line:42:18> 'int' 6
                `-IntegerLiteral 0x5637768c63a0 <line:40:17> 'int' 8
(([B3.66])) = ([B3.53])
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x5637768c5638 <lcode.c:281:7> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768c5660 <lcode.c:281:7> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768c5638 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B4.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768c5678 <lcode.c:281:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768c5660 <col:7> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768c5638 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B4.2]->k
   4: ImplicitCastExpr 0x5637768c56d8 <lcode.c:281:7, col:10> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768c5678 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768c5660 <col:7> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768c5638 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B4.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768c56f0 <lcode.c:281:7, col:10> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768c56d8 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768c5678 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768c5660 <col:7> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768c5638 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
[B4.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768c56b0 <lcode.c:281:15> 'int' EnumConstant 0x56377687d210 'VCALL' 'int'
VCALL
   7: ImplicitCastExpr 0x5637768c5708 <lcode.c:281:15> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768c56b0 <col:15> 'int' EnumConstant 0x56377687d210 'VCALL' 'int'
[B4.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768c5720 <lcode.c:281:7, col:15> 'int' '=='
|-ImplicitCastExpr 0x5637768c56f0 <col:7, col:10> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768c56d8 <col:7, col:10> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768c5678 <col:7, col:10> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768c5660 <col:7> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768c5638 <col:7> 'expdesc *' lvalue ParmVar 0x5637768c5428 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768c5708 <col:15> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768c56b0 <col:15> 'int' EnumConstant 0x56377687d210 'VCALL' 'int'
[B4.5] == [B4.7]
   T: if [B4.8]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (3): B1 B2 B3
