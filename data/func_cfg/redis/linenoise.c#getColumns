static int getColumns(int ifd, int ofd)
 [B15 (ENTRY)]
   Succs (1): B14

 [B1]
  failed:
   1: IntegerLiteral 0x56555a497a18 <linenoise.c:330:12> 'int' 80
80
   2: ReturnStmt 0x56555a497a38 <linenoise.c:330:5, col:12>
`-IntegerLiteral 0x56555a497a18 <col:12> 'int' 80
return [B1.1];
   Preds (3): B7 B9 B11
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x56555a497920 <linenoise.c:326:16> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
ws
   2: MemberExpr 0x56555a497948 <linenoise.c:326:16, col:19> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
`-DeclRefExpr 0x56555a497920 <col:16> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B2.1].ws_col
   3: ImplicitCastExpr 0x56555a497980 <linenoise.c:326:16, col:19> 'unsigned short' <LValueToRValue>
`-MemberExpr 0x56555a497948 <col:16, col:19> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
  `-DeclRefExpr 0x56555a497920 <col:16> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B2.2] (ImplicitCastExpr, LValueToRValue, unsigned short)
   4: ImplicitCastExpr 0x56555a497998 <linenoise.c:326:16, col:19> 'int' <IntegralCast>
`-ImplicitCastExpr 0x56555a497980 <col:16, col:19> 'unsigned short' <LValueToRValue>
  `-MemberExpr 0x56555a497948 <col:16, col:19> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
    `-DeclRefExpr 0x56555a497920 <col:16> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B2.3] (ImplicitCastExpr, IntegralCast, int)
   5: ReturnStmt 0x56555a4979b0 <linenoise.c:326:9, col:19>
`-ImplicitCastExpr 0x56555a497998 <col:16, col:19> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x56555a497980 <col:16, col:19> 'unsigned short' <LValueToRValue>
    `-MemberExpr 0x56555a497948 <col:16, col:19> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
      `-DeclRefExpr 0x56555a497920 <col:16> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
return [B2.4];
   Preds (1): B13
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x56555a497878 <linenoise.c:324:16> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
cols
   2: ImplicitCastExpr 0x56555a4978a0 <linenoise.c:324:16> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a497878 <col:16> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x56555a4978b8 <linenoise.c:324:9, col:16>
`-ImplicitCastExpr 0x56555a4978a0 <col:16> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a497878 <col:16> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
return [B3.2];
   Preds (3): B4 B5 B6
   Succs (1): B0

 [B4]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: DeclStmt 0x56555a4972e0 <linenoise.c:318:13, col:25>col:18
`-VarDecl 0x56555a497280 <col:13, col:24> col:18 used seq 'char [32]'
char seq[32];
   2: DeclRefExpr 0x56555a4972f8 <linenoise.c:319:13> 'int (char *, unsigned long, const char *, ...)' Function 0x56555a40c8c8 'snprintf' 'int (char *, unsigned long, const char *, ...)'
snprintf
   3: ImplicitCastExpr 0x56555a497468 <linenoise.c:319:13> 'int (*)(char *, unsigned long, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4972f8 <col:13> 'int (char *, unsigned long, const char *, ...)' Function 0x56555a40c8c8 'snprintf' 'int (char *, unsigned long, const char *, ...)'
[B5.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(char *, unsigned long, const char *, ...))
   4: DeclRefExpr 0x56555a497320 <linenoise.c:319:22> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
seq
   5: ImplicitCastExpr 0x56555a4974c8 <linenoise.c:319:22> 'char *' <ArrayToPointerDecay>
`-DeclRefExpr 0x56555a497320 <col:22> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.4] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   6: IntegerLiteral 0x56555a497348 <linenoise.c:319:26> 'int' 32
32
   7: ImplicitCastExpr 0x56555a4974e0 <linenoise.c:319:26> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x56555a497348 <col:26> 'int' 32
[B5.6] (ImplicitCastExpr, IntegralCast, unsigned long)
   8: StringLiteral 0x56555a497368 <linenoise.c:319:29> 'char [6]' lvalue "\033[%dD"
"\033[%dD"
   9: ImplicitCastExpr 0x56555a4974f8 <linenoise.c:319:29> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x56555a497368 <col:29> 'char [6]' lvalue "\033[%dD"
[B5.8] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  10: ImplicitCastExpr 0x56555a497510 <linenoise.c:319:29> 'const char *' <BitCast>
`-ImplicitCastExpr 0x56555a4974f8 <col:29> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x56555a497368 <col:29> 'char [6]' lvalue "\033[%dD"
[B5.9] (ImplicitCastExpr, BitCast, const char *)
  11: DeclRefExpr 0x56555a497398 <linenoise.c:319:40> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
cols
  12: ImplicitCastExpr 0x56555a4973e8 <linenoise.c:319:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a497398 <col:40> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
[B5.11] (ImplicitCastExpr, LValueToRValue, int)
  13: DeclRefExpr 0x56555a4973c0 <linenoise.c:319:45> 'int' lvalue Var 0x56555a496968 'start' 'int'
start
  14: ImplicitCastExpr 0x56555a497400 <linenoise.c:319:45> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4973c0 <col:45> 'int' lvalue Var 0x56555a496968 'start' 'int'
[B5.13] (ImplicitCastExpr, LValueToRValue, int)
  15: BinaryOperator 0x56555a497418 <linenoise.c:319:40, col:45> 'int' '-'
|-ImplicitCastExpr 0x56555a4973e8 <col:40> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a497398 <col:40> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
`-ImplicitCastExpr 0x56555a497400 <col:45> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4973c0 <col:45> 'int' lvalue Var 0x56555a496968 'start' 'int'
[B5.12] - [B5.14]
  16: CallExpr 0x56555a497480 <linenoise.c:319:13, col:50> 'int'
|-ImplicitCastExpr 0x56555a497468 <col:13> 'int (*)(char *, unsigned long, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4972f8 <col:13> 'int (char *, unsigned long, const char *, ...)' Function 0x56555a40c8c8 'snprintf' 'int (char *, unsigned long, const char *, ...)'
|-ImplicitCastExpr 0x56555a4974c8 <col:22> 'char *' <ArrayToPointerDecay>
| `-DeclRefExpr 0x56555a497320 <col:22> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
|-ImplicitCastExpr 0x56555a4974e0 <col:26> 'unsigned long' <IntegralCast>
| `-IntegerLiteral 0x56555a497348 <col:26> 'int' 32
|-ImplicitCastExpr 0x56555a497510 <col:29> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x56555a4974f8 <col:29> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x56555a497368 <col:29> 'char [6]' lvalue "\033[%dD"
`-BinaryOperator 0x56555a497418 <col:40, col:45> 'int' '-'
  |-ImplicitCastExpr 0x56555a4973e8 <col:40> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x56555a497398 <col:40> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
  `-ImplicitCastExpr 0x56555a497400 <col:45> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a4973c0 <col:45> 'int' lvalue Var 0x56555a496968 'start' 'int'
[B5.3]([B5.5], [B5.7], [B5.10], [B5.15])
  17: DeclRefExpr 0x56555a497528 <linenoise.c:320:17> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
write
  18: ImplicitCastExpr 0x56555a4976b0 <linenoise.c:320:17> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a497528 <col:17> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
[B5.17] (ImplicitCastExpr, FunctionToPointerDecay, ssize_t (*)(int, const void *, size_t))
  19: DeclRefExpr 0x56555a497550 <linenoise.c:320:23> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
ofd
  20: ImplicitCastExpr 0x56555a497708 <linenoise.c:320:23> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a497550 <col:23> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B5.19] (ImplicitCastExpr, LValueToRValue, int)
  21: DeclRefExpr 0x56555a497578 <linenoise.c:320:27> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
seq
  22: ImplicitCastExpr 0x56555a497720 <linenoise.c:320:27> 'char *' <ArrayToPointerDecay>
`-DeclRefExpr 0x56555a497578 <col:27> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.21] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  23: ImplicitCastExpr 0x56555a497738 <linenoise.c:320:27> 'const void *' <BitCast>
`-ImplicitCastExpr 0x56555a497720 <col:27> 'char *' <ArrayToPointerDecay>
  `-DeclRefExpr 0x56555a497578 <col:27> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.22] (ImplicitCastExpr, BitCast, const void *)
  24: DeclRefExpr 0x56555a4975a0 <linenoise.c:320:31> 'unsigned long (const char *)' Function 0x56555a4340e8 'strlen' 'unsigned long (const char *)'
strlen
  25: ImplicitCastExpr 0x56555a497638 <linenoise.c:320:31> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4975a0 <col:31> 'unsigned long (const char *)' Function 0x56555a4340e8 'strlen' 'unsigned long (const char *)'
[B5.24] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long (*)(const char *))
  26: DeclRefExpr 0x56555a4975c8 <linenoise.c:320:38> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
seq
  27: ImplicitCastExpr 0x56555a497680 <linenoise.c:320:38> 'char *' <ArrayToPointerDecay>
`-DeclRefExpr 0x56555a4975c8 <col:38> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.26] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  28: ImplicitCastExpr 0x56555a497698 <linenoise.c:320:38> 'const char *' <BitCast>
`-ImplicitCastExpr 0x56555a497680 <col:38> 'char *' <ArrayToPointerDecay>
  `-DeclRefExpr 0x56555a4975c8 <col:38> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.27] (ImplicitCastExpr, BitCast, const char *)
  29: CallExpr 0x56555a497650 <linenoise.c:320:31, col:41> 'unsigned long'
|-ImplicitCastExpr 0x56555a497638 <col:31> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4975a0 <col:31> 'unsigned long (const char *)' Function 0x56555a4340e8 'strlen' 'unsigned long (const char *)'
`-ImplicitCastExpr 0x56555a497698 <col:38> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x56555a497680 <col:38> 'char *' <ArrayToPointerDecay>
    `-DeclRefExpr 0x56555a4975c8 <col:38> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.25]([B5.28])
  30: CallExpr 0x56555a4976c8 <linenoise.c:320:17, col:42> 'ssize_t':'long'
|-ImplicitCastExpr 0x56555a4976b0 <col:17> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a497528 <col:17> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
|-ImplicitCastExpr 0x56555a497708 <col:23> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a497550 <col:23> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
|-ImplicitCastExpr 0x56555a497738 <col:27> 'const void *' <BitCast>
| `-ImplicitCastExpr 0x56555a497720 <col:27> 'char *' <ArrayToPointerDecay>
|   `-DeclRefExpr 0x56555a497578 <col:27> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
`-CallExpr 0x56555a497650 <col:31, col:41> 'unsigned long'
  |-ImplicitCastExpr 0x56555a497638 <col:31> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x56555a4975a0 <col:31> 'unsigned long (const char *)' Function 0x56555a4340e8 'strlen' 'unsigned long (const char *)'
  `-ImplicitCastExpr 0x56555a497698 <col:38> 'const char *' <BitCast>
    `-ImplicitCastExpr 0x56555a497680 <col:38> 'char *' <ArrayToPointerDecay>
      `-DeclRefExpr 0x56555a4975c8 <col:38> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
[B5.18]([B5.20], [B5.23], [B5.29])
  31: IntegerLiteral 0x56555a497750 <linenoise.c:320:48> 'int' 1
1
  32: UnaryOperator 0x56555a497770 <linenoise.c:320:47, col:48> 'int' prefix '-'
`-IntegerLiteral 0x56555a497750 <col:48> 'int' 1
-[B5.31]
  33: ImplicitCastExpr 0x56555a497790 <linenoise.c:320:47, col:48> 'long' <IntegralCast>
`-UnaryOperator 0x56555a497770 <col:47, col:48> 'int' prefix '-'
  `-IntegerLiteral 0x56555a497750 <col:48> 'int' 1
[B5.32] (ImplicitCastExpr, IntegralCast, long)
  34: BinaryOperator 0x56555a4977a8 <linenoise.c:320:17, col:48> 'int' '=='
|-CallExpr 0x56555a4976c8 <col:17, col:42> 'ssize_t':'long'
| |-ImplicitCastExpr 0x56555a4976b0 <col:17> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x56555a497528 <col:17> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
| |-ImplicitCastExpr 0x56555a497708 <col:23> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x56555a497550 <col:23> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
| |-ImplicitCastExpr 0x56555a497738 <col:27> 'const void *' <BitCast>
| | `-ImplicitCastExpr 0x56555a497720 <col:27> 'char *' <ArrayToPointerDecay>
| |   `-DeclRefExpr 0x56555a497578 <col:27> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
| `-CallExpr 0x56555a497650 <col:31, col:41> 'unsigned long'
|   |-ImplicitCastExpr 0x56555a497638 <col:31> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x56555a4975a0 <col:31> 'unsigned long (const char *)' Function 0x56555a4340e8 'strlen' 'unsigned long (const char *)'
|   `-ImplicitCastExpr 0x56555a497698 <col:38> 'const char *' <BitCast>
|     `-ImplicitCastExpr 0x56555a497680 <col:38> 'char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56555a4975c8 <col:38> 'char [32]' lvalue Var 0x56555a497280 'seq' 'char [32]'
`-ImplicitCastExpr 0x56555a497790 <col:47, col:48> 'long' <IntegralCast>
  `-UnaryOperator 0x56555a497770 <col:47, col:48> 'int' prefix '-'
    `-IntegerLiteral 0x56555a497750 <col:48> 'int' 1
[B5.30] == [B5.33]
   T: if [B5.34]
   Preds (1): B6
   Succs (2): B4 B3

 [B6]
   1: DeclRefExpr 0x56555a497198 <linenoise.c:317:13> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
cols
   2: ImplicitCastExpr 0x56555a4971e8 <linenoise.c:317:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a497198 <col:13> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x56555a4971c0 <linenoise.c:317:20> 'int' lvalue Var 0x56555a496968 'start' 'int'
start
   4: ImplicitCastExpr 0x56555a497200 <linenoise.c:317:20> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4971c0 <col:20> 'int' lvalue Var 0x56555a496968 'start' 'int'
[B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: BinaryOperator 0x56555a497218 <linenoise.c:317:13, col:20> 'int' '>'
|-ImplicitCastExpr 0x56555a4971e8 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a497198 <col:13> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
`-ImplicitCastExpr 0x56555a497200 <col:20> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a4971c0 <col:20> 'int' lvalue Var 0x56555a496968 'start' 'int'
[B6.2] > [B6.4]
   T: if [B6.5]
   Preds (1): B8
   Succs (2): B5 B3

 [B7]
   T: goto failed;
   Preds (1): B8
   Succs (1): B1

 [B8]
   1: DeclRefExpr 0x56555a496f50 <linenoise.c:313:16> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
getCursorPosition
   2: ImplicitCastExpr 0x56555a496fc8 <linenoise.c:313:16> 'int (*)(int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a496f50 <col:16> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
   3: DeclRefExpr 0x56555a496f78 <linenoise.c:313:34> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
ifd
   4: ImplicitCastExpr 0x56555a497018 <linenoise.c:313:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a496f78 <col:34> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
[B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x56555a496fa0 <linenoise.c:313:38> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
ofd
   6: ImplicitCastExpr 0x56555a497030 <linenoise.c:313:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a496fa0 <col:38> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B8.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x56555a496fe0 <linenoise.c:313:16, col:41> 'int'
|-ImplicitCastExpr 0x56555a496fc8 <col:16> 'int (*)(int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a496f50 <col:16> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
|-ImplicitCastExpr 0x56555a497018 <col:34> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a496f78 <col:34> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
`-ImplicitCastExpr 0x56555a497030 <col:38> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a496fa0 <col:38> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B8.2]([B8.4], [B8.6])
   8: DeclRefExpr 0x56555a496f28 <linenoise.c:313:9> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
cols
   9: BinaryOperator 0x56555a497048 <linenoise.c:313:9, col:41> 'int' '='
|-DeclRefExpr 0x56555a496f28 <col:9> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
`-CallExpr 0x56555a496fe0 <col:16, col:41> 'int'
  |-ImplicitCastExpr 0x56555a496fc8 <col:16> 'int (*)(int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x56555a496f50 <col:16> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
  |-ImplicitCastExpr 0x56555a497018 <col:34> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x56555a496f78 <col:34> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
  `-ImplicitCastExpr 0x56555a497030 <col:38> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a496fa0 <col:38> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B8.8] = [B8.7]
  10: DeclRefExpr 0x56555a4970a0 <linenoise.c:314:13> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
cols
  11: ImplicitCastExpr 0x56555a497108 <linenoise.c:314:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a4970a0 <col:13> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
[B8.10] (ImplicitCastExpr, LValueToRValue, int)
  12: IntegerLiteral 0x56555a4970c8 <linenoise.c:314:22> 'int' 1
1
  13: UnaryOperator 0x56555a4970e8 <linenoise.c:314:21, col:22> 'int' prefix '-'
`-IntegerLiteral 0x56555a4970c8 <col:22> 'int' 1
-[B8.12]
  14: BinaryOperator 0x56555a497120 <linenoise.c:314:13, col:22> 'int' '=='
|-ImplicitCastExpr 0x56555a497108 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a4970a0 <col:13> 'int' lvalue Var 0x56555a4969e0 'cols' 'int'
`-UnaryOperator 0x56555a4970e8 <col:21, col:22> 'int' prefix '-'
  `-IntegerLiteral 0x56555a4970c8 <col:22> 'int' 1
[B8.11] == [B8.13]
   T: if [B8.14]
   Preds (1): B10
   Succs (2): B7 B6

 [B9]
   T: goto failed;
   Preds (1): B10
   Succs (1): B1

 [B10]
   1: DeclRefExpr 0x56555a496d20 <linenoise.c:312:13> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
write
   2: ImplicitCastExpr 0x56555a496dc0 <linenoise.c:312:13> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a496d20 <col:13> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, ssize_t (*)(int, const void *, size_t))
   3: DeclRefExpr 0x56555a496d48 <linenoise.c:312:19> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
ofd
   4: ImplicitCastExpr 0x56555a496e18 <linenoise.c:312:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a496d48 <col:19> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: StringLiteral 0x56555a496d70 <linenoise.c:312:23> 'char [7]' lvalue "\033[999C"
"\033[999C"
   6: ImplicitCastExpr 0x56555a496e30 <linenoise.c:312:23> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x56555a496d70 <col:23> 'char [7]' lvalue "\033[999C"
[B10.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x56555a496e48 <linenoise.c:312:23> 'const void *' <BitCast>
`-ImplicitCastExpr 0x56555a496e30 <col:23> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x56555a496d70 <col:23> 'char [7]' lvalue "\033[999C"
[B10.6] (ImplicitCastExpr, BitCast, const void *)
   8: IntegerLiteral 0x56555a496da0 <linenoise.c:312:35> 'int' 6
6
   9: ImplicitCastExpr 0x56555a496e60 <linenoise.c:312:35> 'size_t':'unsigned long' <IntegralCast>
`-IntegerLiteral 0x56555a496da0 <col:35> 'int' 6
[B10.8] (ImplicitCastExpr, IntegralCast, size_t)
  10: CallExpr 0x56555a496dd8 <linenoise.c:312:13, col:36> 'ssize_t':'long'
|-ImplicitCastExpr 0x56555a496dc0 <col:13> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a496d20 <col:13> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
|-ImplicitCastExpr 0x56555a496e18 <col:19> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a496d48 <col:19> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
|-ImplicitCastExpr 0x56555a496e48 <col:23> 'const void *' <BitCast>
| `-ImplicitCastExpr 0x56555a496e30 <col:23> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x56555a496d70 <col:23> 'char [7]' lvalue "\033[999C"
`-ImplicitCastExpr 0x56555a496e60 <col:35> 'size_t':'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x56555a496da0 <col:35> 'int' 6
[B10.2]([B10.4], [B10.7], [B10.9])
  11: IntegerLiteral 0x56555a496e78 <linenoise.c:312:41> 'int' 6
6
  12: ImplicitCastExpr 0x56555a496e98 <linenoise.c:312:41> 'long' <IntegralCast>
`-IntegerLiteral 0x56555a496e78 <col:41> 'int' 6
[B10.11] (ImplicitCastExpr, IntegralCast, long)
  13: BinaryOperator 0x56555a496eb0 <linenoise.c:312:13, col:41> 'int' '!='
|-CallExpr 0x56555a496dd8 <col:13, col:36> 'ssize_t':'long'
| |-ImplicitCastExpr 0x56555a496dc0 <col:13> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x56555a496d20 <col:13> 'ssize_t (int, const void *, size_t)' Function 0x56555a3665d0 'write' 'ssize_t (int, const void *, size_t)'
| |-ImplicitCastExpr 0x56555a496e18 <col:19> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x56555a496d48 <col:19> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
| |-ImplicitCastExpr 0x56555a496e48 <col:23> 'const void *' <BitCast>
| | `-ImplicitCastExpr 0x56555a496e30 <col:23> 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x56555a496d70 <col:23> 'char [7]' lvalue "\033[999C"
| `-ImplicitCastExpr 0x56555a496e60 <col:35> 'size_t':'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x56555a496da0 <col:35> 'int' 6
`-ImplicitCastExpr 0x56555a496e98 <col:41> 'long' <IntegralCast>
  `-IntegerLiteral 0x56555a496e78 <col:41> 'int' 6
[B10.10] != [B10.12]
   T: if [B10.13]
   Preds (1): B12
   Succs (2): B9 B8

 [B11]
   T: goto failed;
   Preds (1): B12
   Succs (1): B1

 [B12]
   1: DeclStmt 0x56555a4c9ae8 <linenoise.c:305:13>col:13
`-VarDecl 0x56555a496968 <col:9, col:13> col:13 used start 'int'
int start;
   2: DeclStmt 0x56555a4c9ad0 <linenoise.c:305:20>col:20
`-VarDecl 0x56555a4969e0 <col:9, col:20> col:20 used cols 'int'
int cols;
   3: DeclRefExpr 0x56555a496a98 <linenoise.c:308:17> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
getCursorPosition
   4: ImplicitCastExpr 0x56555a496b38 <linenoise.c:308:17> 'int (*)(int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a496a98 <col:17> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
[B12.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
   5: DeclRefExpr 0x56555a496ac0 <linenoise.c:308:35> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
ifd
   6: ImplicitCastExpr 0x56555a496b88 <linenoise.c:308:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a496ac0 <col:35> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
[B12.5] (ImplicitCastExpr, LValueToRValue, int)
   7: DeclRefExpr 0x56555a496ae8 <linenoise.c:308:39> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
ofd
   8: ImplicitCastExpr 0x56555a496ba0 <linenoise.c:308:39> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a496ae8 <col:39> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B12.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x56555a496b50 <linenoise.c:308:17, col:42> 'int'
|-ImplicitCastExpr 0x56555a496b38 <col:17> 'int (*)(int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a496a98 <col:17> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
|-ImplicitCastExpr 0x56555a496b88 <col:35> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a496ac0 <col:35> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
`-ImplicitCastExpr 0x56555a496ba0 <col:39> 'int' <LValueToRValue>
  `-DeclRefExpr 0x56555a496ae8 <col:39> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B12.4]([B12.6], [B12.8])
  10: DeclRefExpr 0x56555a496a70 <linenoise.c:308:9> 'int' lvalue Var 0x56555a496968 'start' 'int'
start
  11: BinaryOperator 0x56555a496bb8 <linenoise.c:308:9, col:42> 'int' '='
|-DeclRefExpr 0x56555a496a70 <col:9> 'int' lvalue Var 0x56555a496968 'start' 'int'
`-CallExpr 0x56555a496b50 <col:17, col:42> 'int'
  |-ImplicitCastExpr 0x56555a496b38 <col:17> 'int (*)(int, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x56555a496a98 <col:17> 'int (int, int)' Function 0x56555a494f60 'getCursorPosition' 'int (int, int)'
  |-ImplicitCastExpr 0x56555a496b88 <col:35> 'int' <LValueToRValue>
  | `-DeclRefExpr 0x56555a496ac0 <col:35> 'int' lvalue ParmVar 0x56555a496350 'ifd' 'int'
  `-ImplicitCastExpr 0x56555a496ba0 <col:39> 'int' <LValueToRValue>
    `-DeclRefExpr 0x56555a496ae8 <col:39> 'int' lvalue ParmVar 0x56555a4963c8 'ofd' 'int'
[B12.10] = [B12.9]
  12: DeclRefExpr 0x56555a496be0 <linenoise.c:309:13> 'int' lvalue Var 0x56555a496968 'start' 'int'
start
  13: ImplicitCastExpr 0x56555a496c48 <linenoise.c:309:13> 'int' <LValueToRValue>
`-DeclRefExpr 0x56555a496be0 <col:13> 'int' lvalue Var 0x56555a496968 'start' 'int'
[B12.12] (ImplicitCastExpr, LValueToRValue, int)
  14: IntegerLiteral 0x56555a496c08 <linenoise.c:309:23> 'int' 1
1
  15: UnaryOperator 0x56555a496c28 <linenoise.c:309:22, col:23> 'int' prefix '-'
`-IntegerLiteral 0x56555a496c08 <col:23> 'int' 1
-[B12.14]
  16: BinaryOperator 0x56555a496c60 <linenoise.c:309:13, col:23> 'int' '=='
|-ImplicitCastExpr 0x56555a496c48 <col:13> 'int' <LValueToRValue>
| `-DeclRefExpr 0x56555a496be0 <col:13> 'int' lvalue Var 0x56555a496968 'start' 'int'
`-UnaryOperator 0x56555a496c28 <col:22, col:23> 'int' prefix '-'
  `-IntegerLiteral 0x56555a496c08 <col:23> 'int' 1
[B12.13] == [B12.15]
   T: if [B12.16]
   Preds (2): B13 B14
   Succs (2): B11 B10

 [B13]
   1: DeclRefExpr 0x56555a4967f0 <linenoise.c:303:44> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
ws
   2: MemberExpr 0x56555a496818 <linenoise.c:303:44, col:47> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
`-DeclRefExpr 0x56555a4967f0 <col:44> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B13.1].ws_col
   3: ImplicitCastExpr 0x56555a496870 <linenoise.c:303:44, col:47> 'unsigned short' <LValueToRValue>
`-MemberExpr 0x56555a496818 <col:44, col:47> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
  `-DeclRefExpr 0x56555a4967f0 <col:44> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B13.2] (ImplicitCastExpr, LValueToRValue, unsigned short)
   4: ImplicitCastExpr 0x56555a496888 <linenoise.c:303:44, col:47> 'int' <IntegralCast>
`-ImplicitCastExpr 0x56555a496870 <col:44, col:47> 'unsigned short' <LValueToRValue>
  `-MemberExpr 0x56555a496818 <col:44, col:47> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
    `-DeclRefExpr 0x56555a4967f0 <col:44> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B13.3] (ImplicitCastExpr, IntegralCast, int)
   5: IntegerLiteral 0x56555a496850 <linenoise.c:303:57> 'int' 0
0
   6: BinaryOperator 0x56555a4968a0 <linenoise.c:303:44, col:57> 'int' '=='
|-ImplicitCastExpr 0x56555a496888 <col:44, col:47> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x56555a496870 <col:44, col:47> 'unsigned short' <LValueToRValue>
|   `-MemberExpr 0x56555a496818 <col:44, col:47> 'unsigned short' lvalue .ws_col 0x56555a46fbb8
|     `-DeclRefExpr 0x56555a4967f0 <col:44> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
`-IntegerLiteral 0x56555a496850 <col:57> 'int' 0
[B13.4] == [B13.5]
   T: if [B14.12] || [B13.6]
   Preds (1): B14
   Succs (2): B12 B2

 [B14]
   1: DeclStmt 0x56555a4965c0 <linenoise.c:301:5, col:22>col:20
`-VarDecl 0x56555a496560 <col:5, col:20> col:20 used ws 'struct winsize':'struct winsize'
struct winsize ws;
   2: DeclRefExpr 0x56555a4965d8 <linenoise.c:303:9> 'int (int, unsigned long, ...)' Function 0x56555a488088 'ioctl' 'int (int, unsigned long, ...)'
ioctl
   3: ImplicitCastExpr 0x56555a496718 <linenoise.c:303:9> 'int (*)(int, unsigned long, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x56555a4965d8 <col:9> 'int (int, unsigned long, ...)' Function 0x56555a488088 'ioctl' 'int (int, unsigned long, ...)'
[B14.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, unsigned long, ...))
   4: IntegerLiteral 0x56555a496600 <linenoise.c:303:15> 'int' 1
1
   5: IntegerLiteral 0x56555a496620 </usr/include/asm-generic/ioctls.h:38:20> 'int' 21523
21523
   6: ImplicitCastExpr 0x56555a496770 </usr/include/asm-generic/ioctls.h:38:20> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x56555a496620 <col:20> 'int' 21523
[B14.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: DeclRefExpr 0x56555a496640 <linenoise.c:303:31> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
ws
   8: UnaryOperator 0x56555a4966c8 <linenoise.c:303:30, col:31> 'struct winsize *' prefix '&'
`-DeclRefExpr 0x56555a496640 <col:31> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
&[B14.7]
   9: CallExpr 0x56555a496730 <linenoise.c:303:9, col:33> 'int'
|-ImplicitCastExpr 0x56555a496718 <col:9> 'int (*)(int, unsigned long, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x56555a4965d8 <col:9> 'int (int, unsigned long, ...)' Function 0x56555a488088 'ioctl' 'int (int, unsigned long, ...)'
|-IntegerLiteral 0x56555a496600 <col:15> 'int' 1
|-ImplicitCastExpr 0x56555a496770 </usr/include/asm-generic/ioctls.h:38:20> 'unsigned long' <IntegralCast>
| `-IntegerLiteral 0x56555a496620 <col:20> 'int' 21523
`-UnaryOperator 0x56555a4966c8 <linenoise.c:303:30, col:31> 'struct winsize *' prefix '&'
  `-DeclRefExpr 0x56555a496640 <col:31> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
[B14.3]([B14.4], [B14.6], [B14.8])
  10: IntegerLiteral 0x56555a496788 <linenoise.c:303:39> 'int' 1
1
  11: UnaryOperator 0x56555a4967a8 <linenoise.c:303:38, col:39> 'int' prefix '-'
`-IntegerLiteral 0x56555a496788 <col:39> 'int' 1
-[B14.10]
  12: BinaryOperator 0x56555a4967c8 <linenoise.c:303:9, col:39> 'int' '=='
|-CallExpr 0x56555a496730 <col:9, col:33> 'int'
| |-ImplicitCastExpr 0x56555a496718 <col:9> 'int (*)(int, unsigned long, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x56555a4965d8 <col:9> 'int (int, unsigned long, ...)' Function 0x56555a488088 'ioctl' 'int (int, unsigned long, ...)'
| |-IntegerLiteral 0x56555a496600 <col:15> 'int' 1
| |-ImplicitCastExpr 0x56555a496770 </usr/include/asm-generic/ioctls.h:38:20> 'unsigned long' <IntegralCast>
| | `-IntegerLiteral 0x56555a496620 <col:20> 'int' 21523
| `-UnaryOperator 0x56555a4966c8 <linenoise.c:303:30, col:31> 'struct winsize *' prefix '&'
|   `-DeclRefExpr 0x56555a496640 <col:31> 'struct winsize':'struct winsize' lvalue Var 0x56555a496560 'ws' 'struct winsize':'struct winsize'
`-UnaryOperator 0x56555a4967a8 <col:38, col:39> 'int' prefix '-'
  `-IntegerLiteral 0x56555a496788 <col:39> 'int' 1
[B14.9] == [B14.11]
   T: [B14.12] || ...
   Preds (1): B15
   Succs (2): B12 B13

 [B0 (EXIT)]
   Preds (3): B1 B2 B3
