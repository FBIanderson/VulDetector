void luaK_checkstack(FuncState *fs, int n)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x5637768bd9f0 <lcode.c:204:37> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
newstack
   2: ImplicitCastExpr 0x5637768bda98 <./llimits.h:75:26, col:30> 'int' <LValueToRValue>
`-ParenExpr 0x5637768bda78 <col:26, col:30> 'int' lvalue
  `-ParenExpr 0x5637768bda18 <line:78:36, col:38> 'int' lvalue
    `-DeclRefExpr 0x5637768bd9f0 <lcode.c:204:37> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
(([B1.1])) (ImplicitCastExpr, LValueToRValue, int)
   3: CStyleCastExpr 0x5637768bdab0 <./llimits.h:75:23, col:30> 'lu_byte':'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x5637768bda98 <col:26, col:30> 'int' <LValueToRValue>
  `-ParenExpr 0x5637768bda78 <col:26, col:30> 'int' lvalue
    `-ParenExpr 0x5637768bda18 <line:78:36, col:38> 'int' lvalue
      `-DeclRefExpr 0x5637768bd9f0 <lcode.c:204:37> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
(lu_byte)[B1.2] (CStyleCastExpr, IntegralCast, lu_byte)
   4: DeclRefExpr 0x5637768bd928 <lcode.c:204:5> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
fs
   5: ImplicitCastExpr 0x5637768bd950 <lcode.c:204:5> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bd928 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B1.4] (ImplicitCastExpr, LValueToRValue, FuncState *)
   6: MemberExpr 0x5637768bd968 <lcode.c:204:5, col:9> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768bd950 <col:5> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bd928 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B1.5]->f
   7: ImplicitCastExpr 0x5637768bd9a0 <lcode.c:204:5, col:9> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768bd968 <col:5, col:9> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768bd950 <col:5> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bd928 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B1.6] (ImplicitCastExpr, LValueToRValue, Proto *)
   8: MemberExpr 0x5637768bd9b8 <lcode.c:204:5, col:12> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x5637768587f0
`-ImplicitCastExpr 0x5637768bd9a0 <col:5, col:9> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768bd968 <col:5, col:9> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768bd950 <col:5> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768bd928 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B1.7]->maxstacksize
   9: BinaryOperator 0x5637768bdaf8 <lcode.c:204:5, ./llimits.h:75:31> 'lu_byte':'unsigned char' '='
|-MemberExpr 0x5637768bd9b8 <lcode.c:204:5, col:12> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x5637768587f0
| `-ImplicitCastExpr 0x5637768bd9a0 <col:5, col:9> 'Proto *' <LValueToRValue>
|   `-MemberExpr 0x5637768bd968 <col:5, col:9> 'Proto *' lvalue ->f 0x56377687ddb8
|     `-ImplicitCastExpr 0x5637768bd950 <col:5> 'FuncState *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768bd928 <col:5> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
`-ParenExpr 0x5637768bdad8 <./llimits.h:75:22, col:31> 'lu_byte':'unsigned char'
  `-CStyleCastExpr 0x5637768bdab0 <col:23, col:30> 'lu_byte':'unsigned char' <IntegralCast>
    `-ImplicitCastExpr 0x5637768bda98 <col:26, col:30> 'int' <LValueToRValue>
      `-ParenExpr 0x5637768bda78 <col:26, col:30> 'int' lvalue
        `-ParenExpr 0x5637768bda18 <line:78:36, col:38> 'int' lvalue
          `-DeclRefExpr 0x5637768bd9f0 <lcode.c:204:37> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
[B1.8] = ([B1.3])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768bd730 <lcode.c:203:7> 'void (LexState *, const char *)' Function 0x56377686aed0 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x5637768bd858 <lcode.c:203:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768bd730 <col:7> 'void (LexState *, const char *)' Function 0x56377686aed0 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x5637768bd758 <lcode.c:203:24> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768bd780 <lcode.c:203:24> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bd758 <col:24> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: MemberExpr 0x5637768bd798 <lcode.c:203:24, col:28> 'struct LexState *' lvalue ->ls 0x56377687df60
`-ImplicitCastExpr 0x5637768bd780 <col:24> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bd758 <col:24> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B2.4]->ls
   6: ImplicitCastExpr 0x5637768bd8a8 <lcode.c:203:24, col:28> 'struct LexState *' <LValueToRValue>
`-MemberExpr 0x5637768bd798 <col:24, col:28> 'struct LexState *' lvalue ->ls 0x56377687df60
  `-ImplicitCastExpr 0x5637768bd780 <col:24> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bd758 <col:24> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B2.5] (ImplicitCastExpr, LValueToRValue, struct LexState *)
   7: StringLiteral 0x5637768bd808 <lcode.c:203:32> 'char [35]' lvalue "function or expression too complex"
"function or expression too complex"
   8: ImplicitCastExpr 0x5637768bd8c0 <lcode.c:203:32> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x5637768bd808 <col:32> 'char [35]' lvalue "function or expression too complex"
[B2.7] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   9: ImplicitCastExpr 0x5637768bd8d8 <lcode.c:203:32> 'const char *' <BitCast>
`-ImplicitCastExpr 0x5637768bd8c0 <col:32> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x5637768bd808 <col:32> 'char [35]' lvalue "function or expression too complex"
[B2.8] (ImplicitCastExpr, BitCast, const char *)
  10: CallExpr 0x5637768bd870 <lcode.c:203:7, col:68> 'void'
|-ImplicitCastExpr 0x5637768bd858 <col:7> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768bd730 <col:7> 'void (LexState *, const char *)' Function 0x56377686aed0 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x5637768bd8a8 <col:24, col:28> 'struct LexState *' <LValueToRValue>
| `-MemberExpr 0x5637768bd798 <col:24, col:28> 'struct LexState *' lvalue ->ls 0x56377687df60
|   `-ImplicitCastExpr 0x5637768bd780 <col:24> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768bd758 <col:24> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768bd8d8 <col:32> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x5637768bd8c0 <col:32> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x5637768bd808 <col:32> 'char [35]' lvalue "function or expression too complex"
[B2.2]([B2.6], [B2.9])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5637768bd6a8 <lcode.c:202:9> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
newstack
   2: ImplicitCastExpr 0x5637768bd6f0 <lcode.c:202:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bd6a8 <col:9> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5637768bd6d0 <./llimits.h:93:18> 'int' 250
250
   4: BinaryOperator 0x5637768bd708 <lcode.c:202:9, ./llimits.h:93:18> 'int' '>='
|-ImplicitCastExpr 0x5637768bd6f0 <lcode.c:202:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bd6a8 <col:9> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
`-IntegerLiteral 0x5637768bd6d0 <./llimits.h:93:18> 'int' 250
[B3.2] >= [B3.3]
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x5637768bd438 <lcode.c:200:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768bd460 <lcode.c:200:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bd438 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768bd478 <lcode.c:200:18, col:22> 'int' lvalue ->freereg 0x56377687e268
`-ImplicitCastExpr 0x5637768bd460 <col:18> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bd438 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.2]->freereg
   4: ImplicitCastExpr 0x5637768bd4d8 <lcode.c:200:18, col:22> 'int' <LValueToRValue>
`-MemberExpr 0x5637768bd478 <col:18, col:22> 'int' lvalue ->freereg 0x56377687e268
  `-ImplicitCastExpr 0x5637768bd460 <col:18> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bd438 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x5637768bd4b0 <lcode.c:200:32> 'int' lvalue ParmVar 0x5637768bd238 'n' 'int'
n
   6: ImplicitCastExpr 0x5637768bd4f0 <lcode.c:200:32> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bd4b0 <col:32> 'int' lvalue ParmVar 0x5637768bd238 'n' 'int'
[B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x5637768bd508 <lcode.c:200:18, col:32> 'int' '+'
|-ImplicitCastExpr 0x5637768bd4d8 <col:18, col:22> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768bd478 <col:18, col:22> 'int' lvalue ->freereg 0x56377687e268
|   `-ImplicitCastExpr 0x5637768bd460 <col:18> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768bd438 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768bd4f0 <col:32> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5637768bd4b0 <col:32> 'int' lvalue ParmVar 0x5637768bd238 'n' 'int'
[B4.4] + [B4.6]
   8: DeclStmt 0x5637768bd530 <lcode.c:200:3, col:33>col:7
`-VarDecl 0x5637768bd3d8 <col:3, col:32> col:7 used newstack 'int' cinit
  `-BinaryOperator 0x5637768bd508 <col:18, col:32> 'int' '+'
    |-ImplicitCastExpr 0x5637768bd4d8 <col:18, col:22> 'int' <LValueToRValue>
    | `-MemberExpr 0x5637768bd478 <col:18, col:22> 'int' lvalue ->freereg 0x56377687e268
    |   `-ImplicitCastExpr 0x5637768bd460 <col:18> 'FuncState *' <LValueToRValue>
    |     `-DeclRefExpr 0x5637768bd438 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
    `-ImplicitCastExpr 0x5637768bd4f0 <col:32> 'int' <LValueToRValue>
      `-DeclRefExpr 0x5637768bd4b0 <col:32> 'int' lvalue ParmVar 0x5637768bd238 'n' 'int'
int newstack = fs->freereg + n;
   9: DeclRefExpr 0x5637768bd548 <lcode.c:201:7> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
newstack
  10: ImplicitCastExpr 0x5637768bd638 <lcode.c:201:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5637768bd548 <col:7> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
[B4.9] (ImplicitCastExpr, LValueToRValue, int)
  11: DeclRefExpr 0x5637768bd570 <lcode.c:201:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x5637768bd598 <lcode.c:201:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: MemberExpr 0x5637768bd5b0 <lcode.c:201:18, col:22> 'Proto *' lvalue ->f 0x56377687ddb8
`-ImplicitCastExpr 0x5637768bd598 <col:18> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.12]->f
  14: ImplicitCastExpr 0x5637768bd5e8 <lcode.c:201:18, col:22> 'Proto *' <LValueToRValue>
`-MemberExpr 0x5637768bd5b0 <col:18, col:22> 'Proto *' lvalue ->f 0x56377687ddb8
  `-ImplicitCastExpr 0x5637768bd598 <col:18> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.13] (ImplicitCastExpr, LValueToRValue, Proto *)
  15: MemberExpr 0x5637768bd600 <lcode.c:201:18, col:25> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x5637768587f0
`-ImplicitCastExpr 0x5637768bd5e8 <col:18, col:22> 'Proto *' <LValueToRValue>
  `-MemberExpr 0x5637768bd5b0 <col:18, col:22> 'Proto *' lvalue ->f 0x56377687ddb8
    `-ImplicitCastExpr 0x5637768bd598 <col:18> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.14]->maxstacksize
  16: ImplicitCastExpr 0x5637768bd650 <lcode.c:201:18, col:25> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x5637768bd600 <col:18, col:25> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x5637768587f0
  `-ImplicitCastExpr 0x5637768bd5e8 <col:18, col:22> 'Proto *' <LValueToRValue>
    `-MemberExpr 0x5637768bd5b0 <col:18, col:22> 'Proto *' lvalue ->f 0x56377687ddb8
      `-ImplicitCastExpr 0x5637768bd598 <col:18> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.15] (ImplicitCastExpr, LValueToRValue, lu_byte)
  17: ImplicitCastExpr 0x5637768bd668 <lcode.c:201:18, col:25> 'int' <IntegralCast>
`-ImplicitCastExpr 0x5637768bd650 <col:18, col:25> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x5637768bd600 <col:18, col:25> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x5637768587f0
    `-ImplicitCastExpr 0x5637768bd5e8 <col:18, col:22> 'Proto *' <LValueToRValue>
      `-MemberExpr 0x5637768bd5b0 <col:18, col:22> 'Proto *' lvalue ->f 0x56377687ddb8
        `-ImplicitCastExpr 0x5637768bd598 <col:18> 'FuncState *' <LValueToRValue>
          `-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.16] (ImplicitCastExpr, IntegralCast, int)
  18: BinaryOperator 0x5637768bd680 <lcode.c:201:7, col:25> 'int' '>'
|-ImplicitCastExpr 0x5637768bd638 <col:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5637768bd548 <col:7> 'int' lvalue Var 0x5637768bd3d8 'newstack' 'int'
`-ImplicitCastExpr 0x5637768bd668 <col:18, col:25> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x5637768bd650 <col:18, col:25> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x5637768bd600 <col:18, col:25> 'lu_byte':'unsigned char' lvalue ->maxstacksize 0x5637768587f0
      `-ImplicitCastExpr 0x5637768bd5e8 <col:18, col:22> 'Proto *' <LValueToRValue>
        `-MemberExpr 0x5637768bd5b0 <col:18, col:22> 'Proto *' lvalue ->f 0x56377687ddb8
          `-ImplicitCastExpr 0x5637768bd598 <col:18> 'FuncState *' <LValueToRValue>
            `-DeclRefExpr 0x5637768bd570 <col:18> 'FuncState *' lvalue ParmVar 0x5637768bd1c0 'fs' 'FuncState *'
[B4.10] > [B4.17]
   T: if [B4.18]
   Preds (1): B5
   Succs (2): B3 B0

 [B0 (EXIT)]
   Preds (2): B1 B4
