void luaG_aritherror(lua_State *L, const TValue *p1, const TValue *p2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x555e9726f968 <ldebug.c:592:3> 'void (lua_State *, const TValue *, const char *)' Function 0x555e9726da78 'luaG_typeerror' 'void (lua_State *, const TValue *, const char *)'
luaG_typeerror
   2: ImplicitCastExpr 0x555e9726fa58 <ldebug.c:592:3> 'void (*)(lua_State *, const TValue *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e9726f968 <col:3> 'void (lua_State *, const TValue *, const char *)' Function 0x555e9726da78 'luaG_typeerror' 'void (lua_State *, const TValue *, const char *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, const TValue *, const char *))
   3: DeclRefExpr 0x555e9726f990 <ldebug.c:592:18> 'lua_State *' lvalue ParmVar 0x555e9726f380 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x555e9726fab0 <ldebug.c:592:18> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x555e9726f990 <col:18> 'lua_State *' lvalue ParmVar 0x555e9726f380 'L' 'lua_State *'
[B1.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: DeclRefExpr 0x555e9726f9b8 <ldebug.c:592:21> 'const TValue *' lvalue ParmVar 0x555e9726f460 'p2' 'const TValue *'
p2
   6: ImplicitCastExpr 0x555e9726fac8 <ldebug.c:592:21> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e9726f9b8 <col:21> 'const TValue *' lvalue ParmVar 0x555e9726f460 'p2' 'const TValue *'
[B1.5] (ImplicitCastExpr, LValueToRValue, const TValue *)
   7: StringLiteral 0x555e9726fa18 <ldebug.c:592:25> 'char [22]' lvalue "perform arithmetic on"
"perform arithmetic on"
   8: ImplicitCastExpr 0x555e9726fae0 <ldebug.c:592:25> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x555e9726fa18 <col:25> 'char [22]' lvalue "perform arithmetic on"
[B1.7] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   9: ImplicitCastExpr 0x555e9726faf8 <ldebug.c:592:25> 'const char *' <BitCast>
`-ImplicitCastExpr 0x555e9726fae0 <col:25> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x555e9726fa18 <col:25> 'char [22]' lvalue "perform arithmetic on"
[B1.8] (ImplicitCastExpr, BitCast, const char *)
  10: CallExpr 0x555e9726fa70 <ldebug.c:592:3, col:48> 'void'
|-ImplicitCastExpr 0x555e9726fa58 <col:3> 'void (*)(lua_State *, const TValue *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e9726f968 <col:3> 'void (lua_State *, const TValue *, const char *)' Function 0x555e9726da78 'luaG_typeerror' 'void (lua_State *, const TValue *, const char *)'
|-ImplicitCastExpr 0x555e9726fab0 <col:18> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726f990 <col:18> 'lua_State *' lvalue ParmVar 0x555e9726f380 'L' 'lua_State *'
|-ImplicitCastExpr 0x555e9726fac8 <col:21> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726f9b8 <col:21> 'const TValue *' lvalue ParmVar 0x555e9726f460 'p2' 'const TValue *'
`-ImplicitCastExpr 0x555e9726faf8 <col:25> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x555e9726fae0 <col:25> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x555e9726fa18 <col:25> 'char [22]' lvalue "perform arithmetic on"
[B1.2]([B1.4], [B1.6], [B1.9])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x555e9726f8c8 <ldebug.c:591:10> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
p1
   2: ImplicitCastExpr 0x555e9726f8f0 <ldebug.c:591:10> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e9726f8c8 <col:10> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
[B2.1] (ImplicitCastExpr, LValueToRValue, const TValue *)
   3: DeclRefExpr 0x555e9726f8a0 <ldebug.c:591:5> 'const TValue *' lvalue ParmVar 0x555e9726f460 'p2' 'const TValue *'
p2
   4: BinaryOperator 0x555e9726f908 <ldebug.c:591:5, col:10> 'const TValue *' '='
|-DeclRefExpr 0x555e9726f8a0 <col:5> 'const TValue *' lvalue ParmVar 0x555e9726f460 'p2' 'const TValue *'
`-ImplicitCastExpr 0x555e9726f8f0 <col:10> 'const TValue *' <LValueToRValue>
  `-DeclRefExpr 0x555e9726f8c8 <col:10> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
[B2.3] = [B2.2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclStmt 0x555e9726f668 <ldebug.c:589:3, col:14>col:10
`-VarDecl 0x555e9726f608 <col:3, col:10> col:10 used temp 'TValue':'struct lua_TValue'
TValue temp;
   2: DeclRefExpr 0x555e9726f680 <ldebug.c:590:7> 'const TValue *(const TValue *, TValue *)' Function 0x555e97236440 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
luaV_tonumber
   3: ImplicitCastExpr 0x555e9726f778 <ldebug.c:590:7> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x555e9726f680 <col:7> 'const TValue *(const TValue *, TValue *)' Function 0x555e97236440 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
[B3.2] (ImplicitCastExpr, FunctionToPointerDecay, const TValue *(*)(const TValue *, TValue *))
   4: DeclRefExpr 0x555e9726f6a8 <ldebug.c:590:21> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
p1
   5: ImplicitCastExpr 0x555e9726f7c8 <ldebug.c:590:21> 'const TValue *' <LValueToRValue>
`-DeclRefExpr 0x555e9726f6a8 <col:21> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
[B3.4] (ImplicitCastExpr, LValueToRValue, const TValue *)
   6: DeclRefExpr 0x555e9726f6d0 <ldebug.c:590:26> 'TValue':'struct lua_TValue' lvalue Var 0x555e9726f608 'temp' 'TValue':'struct lua_TValue'
temp
   7: UnaryOperator 0x555e9726f6f8 <ldebug.c:590:25, col:26> 'TValue *' prefix '&'
`-DeclRefExpr 0x555e9726f6d0 <col:26> 'TValue':'struct lua_TValue' lvalue Var 0x555e9726f608 'temp' 'TValue':'struct lua_TValue'
&[B3.6]
   8: CallExpr 0x555e9726f790 <ldebug.c:590:7, col:30> 'const TValue *'
|-ImplicitCastExpr 0x555e9726f778 <col:7> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x555e9726f680 <col:7> 'const TValue *(const TValue *, TValue *)' Function 0x555e97236440 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
|-ImplicitCastExpr 0x555e9726f7c8 <col:21> 'const TValue *' <LValueToRValue>
| `-DeclRefExpr 0x555e9726f6a8 <col:21> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
`-UnaryOperator 0x555e9726f6f8 <col:25, col:26> 'TValue *' prefix '&'
  `-DeclRefExpr 0x555e9726f6d0 <col:26> 'TValue':'struct lua_TValue' lvalue Var 0x555e9726f608 'temp' 'TValue':'struct lua_TValue'
[B3.3]([B3.5], [B3.7])
   9: IntegerLiteral 0x555e9726f7e0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  10: CStyleCastExpr 0x555e9726f818 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x555e9726f7e0 <col:24> 'int' 0
(void *)[B3.9] (CStyleCastExpr, NullToPointer, void *)
  11: ImplicitCastExpr 0x555e9726f860 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
`-ParenExpr 0x555e9726f840 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x555e9726f818 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x555e9726f7e0 <col:24> 'int' 0
([B3.10]) (ImplicitCastExpr, BitCast, const TValue *)
  12: BinaryOperator 0x555e9726f878 <ldebug.c:590:7, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-CallExpr 0x555e9726f790 <ldebug.c:590:7, col:30> 'const TValue *'
| |-ImplicitCastExpr 0x555e9726f778 <col:7> 'const TValue *(*)(const TValue *, TValue *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x555e9726f680 <col:7> 'const TValue *(const TValue *, TValue *)' Function 0x555e97236440 'luaV_tonumber' 'const TValue *(const TValue *, TValue *)'
| |-ImplicitCastExpr 0x555e9726f7c8 <col:21> 'const TValue *' <LValueToRValue>
| | `-DeclRefExpr 0x555e9726f6a8 <col:21> 'const TValue *' lvalue ParmVar 0x555e9726f3f0 'p1' 'const TValue *'
| `-UnaryOperator 0x555e9726f6f8 <col:25, col:26> 'TValue *' prefix '&'
|   `-DeclRefExpr 0x555e9726f6d0 <col:26> 'TValue':'struct lua_TValue' lvalue Var 0x555e9726f608 'temp' 'TValue':'struct lua_TValue'
`-ImplicitCastExpr 0x555e9726f860 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const TValue *' <BitCast>
  `-ParenExpr 0x555e9726f840 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x555e9726f818 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x555e9726f7e0 <col:24> 'int' 0
[B3.8] == [B3.11]
   T: if [B3.12]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
