static void forstat(LexState *ls, int line)
 [B7 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x558fa8f39e18 <lparser.c:1125:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
   2: ImplicitCastExpr 0x558fa8f39ee0 <lparser.c:1125:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f39e18 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
   3: DeclRefExpr 0x558fa8f39e40 <lparser.c:1125:15> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f39f40 <lparser.c:1125:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39e40 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f39e68 <lparser.c:1125:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
TK_END
   6: DeclRefExpr 0x558fa8f39e90 <lparser.c:1125:27> 'int' EnumConstant 0x558fa8e9e188 'TK_FOR' 'int'
TK_FOR
   7: DeclRefExpr 0x558fa8f39eb8 <lparser.c:1125:35> 'int' lvalue ParmVar 0x558fa8f39148 'line' 'int'
line
   8: ImplicitCastExpr 0x558fa8f39f58 <lparser.c:1125:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39eb8 <col:35> 'int' lvalue ParmVar 0x558fa8f39148 'line' 'int'
[B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8f39ef8 <lparser.c:1125:3, col:39> 'void'
|-ImplicitCastExpr 0x558fa8f39ee0 <col:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f39e18 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f39f40 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f39e40 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
|-DeclRefExpr 0x558fa8f39e68 <col:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
|-DeclRefExpr 0x558fa8f39e90 <col:27> 'int' EnumConstant 0x558fa8e9e188 'TK_FOR' 'int'
`-ImplicitCastExpr 0x558fa8f39f58 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f39eb8 <col:35> 'int' lvalue ParmVar 0x558fa8f39148 'line' 'int'
[B1.2]([B1.4], [B1.5], [B1.6], [B1.8])
  10: DeclRefExpr 0x558fa8f39f70 <lparser.c:1126:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
leaveblock
  11: ImplicitCastExpr 0x558fa8f39fc0 <lparser.c:1126:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f39f70 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
[B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *))
  12: DeclRefExpr 0x558fa8f39f98 <lparser.c:1126:14> 'FuncState *' lvalue Var 0x558fa8f39298 'fs' 'FuncState *'
fs
  13: ImplicitCastExpr 0x558fa8f3a008 <lparser.c:1126:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39f98 <col:14> 'FuncState *' lvalue Var 0x558fa8f39298 'fs' 'FuncState *'
[B1.12] (ImplicitCastExpr, LValueToRValue, FuncState *)
  14: CallExpr 0x558fa8f39fd8 <lparser.c:1126:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f39fc0 <col:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f39f70 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
`-ImplicitCastExpr 0x558fa8f3a008 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f39f98 <col:14> 'FuncState *' lvalue Var 0x558fa8f39298 'fs' 'FuncState *'
[B1.11]([B1.13])
   Preds (3): B3 B4 B6
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f392f8 <lparser.c:1114:19> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f39320 <lparser.c:1114:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f392f8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f39338 <lparser.c:1114:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f39320 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f392f8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.2]->fs
   4: ImplicitCastExpr 0x558fa8f39370 <lparser.c:1114:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f39338 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f39320 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f392f8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f39388 <lparser.c:1114:3, col:25>col:14
`-VarDecl 0x558fa8f39298 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f39370 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f39338 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f39320 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f392f8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f39410 <lparser.c:1115:3, col:19>col:12
`-VarDecl 0x558fa8f393b0 <col:3, col:12> col:12 used varname 'TString *'
TString *varname;
   7: DeclStmt 0x558fa8f39498 <lparser.c:1116:3, col:14>col:12
`-VarDecl 0x558fa8f39438 <col:3, col:12> col:12 used bl 'BlockCnt':'struct BlockCnt'
BlockCnt bl;
   8: DeclRefExpr 0x558fa8f394b0 <lparser.c:1117:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
enterblock
   9: ImplicitCastExpr 0x558fa8f39568 <lparser.c:1117:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f394b0 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
[B2.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BlockCnt *, lu_byte))
  10: DeclRefExpr 0x558fa8f394d8 <lparser.c:1117:14> 'FuncState *' lvalue Var 0x558fa8f39298 'fs' 'FuncState *'
fs
  11: ImplicitCastExpr 0x558fa8f395c0 <lparser.c:1117:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f394d8 <col:14> 'FuncState *' lvalue Var 0x558fa8f39298 'fs' 'FuncState *'
[B2.10] (ImplicitCastExpr, LValueToRValue, FuncState *)
  12: DeclRefExpr 0x558fa8f39500 <lparser.c:1117:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f39438 'bl' 'BlockCnt':'struct BlockCnt'
bl
  13: UnaryOperator 0x558fa8f39528 <lparser.c:1117:18, col:19> 'BlockCnt *' prefix '&'
`-DeclRefExpr 0x558fa8f39500 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f39438 'bl' 'BlockCnt':'struct BlockCnt'
&[B2.12]
  14: IntegerLiteral 0x558fa8f39548 <lparser.c:1117:23> 'int' 1
1
  15: ImplicitCastExpr 0x558fa8f395d8 <lparser.c:1117:23> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f39548 <col:23> 'int' 1
[B2.14] (ImplicitCastExpr, IntegralCast, lu_byte)
  16: CallExpr 0x558fa8f39580 <lparser.c:1117:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f39568 <col:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f394b0 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
|-ImplicitCastExpr 0x558fa8f395c0 <col:14> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f394d8 <col:14> 'FuncState *' lvalue Var 0x558fa8f39298 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f39528 <col:18, col:19> 'BlockCnt *' prefix '&'
| `-DeclRefExpr 0x558fa8f39500 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f39438 'bl' 'BlockCnt':'struct BlockCnt'
`-ImplicitCastExpr 0x558fa8f395d8 <col:23> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f39548 <col:23> 'int' 1
[B2.9]([B2.11], [B2.13], [B2.15])
  17: DeclRefExpr 0x558fa8f395f0 <lparser.c:1118:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
  18: ImplicitCastExpr 0x558fa8f39640 <lparser.c:1118:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f395f0 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B2.17] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  19: DeclRefExpr 0x558fa8f39618 <lparser.c:1118:13> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
  20: ImplicitCastExpr 0x558fa8f39688 <lparser.c:1118:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39618 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.19] (ImplicitCastExpr, LValueToRValue, LexState *)
  21: CallExpr 0x558fa8f39658 <lparser.c:1118:3, col:15> 'void'
|-ImplicitCastExpr 0x558fa8f39640 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f395f0 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f39688 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f39618 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.18]([B2.20])
  22: DeclRefExpr 0x558fa8f396c8 <lparser.c:1119:13> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
str_checkname
  23: ImplicitCastExpr 0x558fa8f39718 <lparser.c:1119:13> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f396c8 <col:13> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
[B2.22] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *))
  24: DeclRefExpr 0x558fa8f396f0 <lparser.c:1119:27> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
  25: ImplicitCastExpr 0x558fa8f39760 <lparser.c:1119:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f396f0 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.24] (ImplicitCastExpr, LValueToRValue, LexState *)
  26: CallExpr 0x558fa8f39730 <lparser.c:1119:13, col:29> 'TString *'
|-ImplicitCastExpr 0x558fa8f39718 <col:13> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f396c8 <col:13> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
`-ImplicitCastExpr 0x558fa8f39760 <col:27> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f396f0 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.23]([B2.25])
  27: DeclRefExpr 0x558fa8f396a0 <lparser.c:1119:3> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
varname
  28: BinaryOperator 0x558fa8f39778 <lparser.c:1119:3, col:29> 'TString *' '='
|-DeclRefExpr 0x558fa8f396a0 <col:3> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
`-CallExpr 0x558fa8f39730 <col:13, col:29> 'TString *'
  |-ImplicitCastExpr 0x558fa8f39718 <col:13> 'TString *(*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f396c8 <col:13> 'TString *(LexState *)' Function 0x558fa8eef280 'str_checkname' 'TString *(LexState *)'
  `-ImplicitCastExpr 0x558fa8f39760 <col:27> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f396f0 <col:27> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.27] = [B2.26]
  29: DeclRefExpr 0x558fa8f397a0 <lparser.c:1120:11> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
  30: ImplicitCastExpr 0x558fa8f397c8 <lparser.c:1120:11> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f397a0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.29] (ImplicitCastExpr, LValueToRValue, LexState *)
  31: MemberExpr 0x558fa8f397e0 <lparser.c:1120:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
`-ImplicitCastExpr 0x558fa8f397c8 <col:11> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f397a0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.30]->t
  32: MemberExpr 0x558fa8f39818 <lparser.c:1120:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
`-MemberExpr 0x558fa8f397e0 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
  `-ImplicitCastExpr 0x558fa8f397c8 <col:11> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f397a0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.31].token
  33: ImplicitCastExpr 0x558fa8f39850 <lparser.c:1120:11, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f39818 <col:11, col:17> 'int' lvalue .token 0x558fa8e9ec88
  `-MemberExpr 0x558fa8f397e0 <col:11, col:15> 'Token':'struct Token' lvalue ->t 0x558fa8ea03e0
    `-ImplicitCastExpr 0x558fa8f397c8 <col:11> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f397a0 <col:11> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B2.32] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B2.33]
   Preds (1): B7
   Succs (4): B5 B4 B6 B3

 [B3]
  default:
   1: DeclRefExpr 0x558fa8f39c40 <lparser.c:1123:14> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f39d28 <lparser.c:1123:14> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f39c40 <col:14> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f39c68 <lparser.c:1123:31> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f39d78 <lparser.c:1123:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39c68 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f39cc8 <./luaconf.h:201:19, lparser.c:1123:67> 'char [21]' lvalue "'=' or 'in' expected"
"'=' or 'in' expected"
   6: ImplicitCastExpr 0x558fa8f39d90 <./luaconf.h:201:19, lparser.c:1123:67> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f39cc8 <./luaconf.h:201:19, lparser.c:1123:67> 'char [21]' lvalue "'=' or 'in' expected"
[B3.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f39da8 <./luaconf.h:201:19, lparser.c:1123:67> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f39d90 <./luaconf.h:201:19, lparser.c:1123:67> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f39cc8 <./luaconf.h:201:19, lparser.c:1123:67> 'char [21]' lvalue "'=' or 'in' expected"
[B3.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f39d40 <lparser.c:1123:14, col:78> 'void'
|-ImplicitCastExpr 0x558fa8f39d28 <col:14> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f39c40 <col:14> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f39d78 <col:31> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f39c68 <col:31> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f39da8 <./luaconf.h:201:19, lparser.c:1123:67> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f39d90 <./luaconf.h:201:19, lparser.c:1123:67> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f39cc8 <./luaconf.h:201:19, lparser.c:1123:67> 'char [21]' lvalue "'=' or 'in' expected"
[B3.2]([B3.4], [B3.7])
   Preds (1): B2
   Succs (1): B1

 [B4]
  case TK_IN:
   1: DeclRefExpr 0x558fa8f39ae0 <lparser.c:1122:27> 'void (LexState *, TString *)' Function 0x558fa8f37620 'forlist' 'void (LexState *, TString *)'
forlist
   2: ImplicitCastExpr 0x558fa8f39bb8 <lparser.c:1122:27> 'void (*)(LexState *, TString *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f39ae0 <col:27> 'void (LexState *, TString *)' Function 0x558fa8f37620 'forlist' 'void (LexState *, TString *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *))
   3: DeclRefExpr 0x558fa8f39b08 <lparser.c:1122:35> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f39c08 <lparser.c:1122:35> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39b08 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f39b30 <lparser.c:1122:39> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
varname
   6: ImplicitCastExpr 0x558fa8f39c20 <lparser.c:1122:39> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39b30 <col:39> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
[B4.5] (ImplicitCastExpr, LValueToRValue, TString *)
   7: CallExpr 0x558fa8f39bd0 <lparser.c:1122:27, col:46> 'void'
|-ImplicitCastExpr 0x558fa8f39bb8 <col:27> 'void (*)(LexState *, TString *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f39ae0 <col:27> 'void (LexState *, TString *)' Function 0x558fa8f37620 'forlist' 'void (LexState *, TString *)'
|-ImplicitCastExpr 0x558fa8f39c08 <col:35> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f39b08 <col:35> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f39c20 <col:39> 'TString *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f39b30 <col:39> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
[B4.2]([B4.4], [B4.6])
   T: break;
   Preds (2): B2 B5
   Succs (1): B1

 [B5]
  case ',':
   Preds (1): B2
   Succs (1): B4

 [B6]
  case '=':
   1: DeclRefExpr 0x558fa8f398e8 <lparser.c:1121:15> 'void (LexState *, TString *, int)' Function 0x558fa8f35ac0 'fornum' 'void (LexState *, TString *, int)'
fornum
   2: ImplicitCastExpr 0x558fa8f39988 <lparser.c:1121:15> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f398e8 <col:15> 'void (LexState *, TString *, int)' Function 0x558fa8f35ac0 'fornum' 'void (LexState *, TString *, int)'
[B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, TString *, int))
   3: DeclRefExpr 0x558fa8f39910 <lparser.c:1121:22> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f399e0 <lparser.c:1121:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39910 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x558fa8f39938 <lparser.c:1121:26> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
varname
   6: ImplicitCastExpr 0x558fa8f399f8 <lparser.c:1121:26> 'TString *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39938 <col:26> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
[B6.5] (ImplicitCastExpr, LValueToRValue, TString *)
   7: DeclRefExpr 0x558fa8f39960 <lparser.c:1121:35> 'int' lvalue ParmVar 0x558fa8f39148 'line' 'int'
line
   8: ImplicitCastExpr 0x558fa8f39a10 <lparser.c:1121:35> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f39960 <col:35> 'int' lvalue ParmVar 0x558fa8f39148 'line' 'int'
[B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x558fa8f399a0 <lparser.c:1121:15, col:39> 'void'
|-ImplicitCastExpr 0x558fa8f39988 <col:15> 'void (*)(LexState *, TString *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f398e8 <col:15> 'void (LexState *, TString *, int)' Function 0x558fa8f35ac0 'fornum' 'void (LexState *, TString *, int)'
|-ImplicitCastExpr 0x558fa8f399e0 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f39910 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f390d0 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f399f8 <col:26> 'TString *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f39938 <col:26> 'TString *' lvalue Var 0x558fa8f393b0 'varname' 'TString *'
`-ImplicitCastExpr 0x558fa8f39a10 <col:35> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f39960 <col:35> 'int' lvalue ParmVar 0x558fa8f39148 'line' 'int'
[B6.2]([B6.4], [B6.6], [B6.8])
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B0 (EXIT)]
   Preds (1): B1
