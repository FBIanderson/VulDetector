static int cond(LexState *ls)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: DeclRefExpr 0x558fa8f2f570 <lparser.c:970:3> 'void (FuncState *, expdesc *)' Function 0x558fa8ebbb18 'luaK_goiftrue' 'void (FuncState *, expdesc *)'
luaK_goiftrue
   2: ImplicitCastExpr 0x558fa8f2f658 <lparser.c:970:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2f570 <col:3> 'void (FuncState *, expdesc *)' Function 0x558fa8ebbb18 'luaK_goiftrue' 'void (FuncState *, expdesc *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x558fa8f2f598 <lparser.c:970:17> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f2f5c0 <lparser.c:970:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2f598 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x558fa8f2f5d8 <lparser.c:970:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2f5c0 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2f598 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
[B1.4]->fs
   6: ImplicitCastExpr 0x558fa8f2f6a8 <lparser.c:970:17, col:21> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2f5d8 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2f5c0 <col:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2f598 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
[B1.5] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   7: DeclRefExpr 0x558fa8f2f610 <lparser.c:970:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
v
   8: UnaryOperator 0x558fa8f2f638 <lparser.c:970:25, col:26> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2f610 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
&[B1.7]
   9: CallExpr 0x558fa8f2f670 <lparser.c:970:3, col:27> 'void'
|-ImplicitCastExpr 0x558fa8f2f658 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2f570 <col:3> 'void (FuncState *, expdesc *)' Function 0x558fa8ebbb18 'luaK_goiftrue' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2f6a8 <col:17, col:21> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f2f5d8 <col:17, col:21> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f2f5c0 <col:17> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f2f598 <col:17> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f2f638 <col:25, col:26> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2f610 <col:26> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B1.2]([B1.6], [B1.8])
  10: DeclRefExpr 0x558fa8f2f6c0 <lparser.c:971:10> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
v
  11: MemberExpr 0x558fa8f2f6e8 <lparser.c:971:10, col:12> 'int' lvalue .f 0x558fa8eb1320
`-DeclRefExpr 0x558fa8f2f6c0 <col:10> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B1.10].f
  12: ImplicitCastExpr 0x558fa8f2f720 <lparser.c:971:10, col:12> 'int' <LValueToRValue>
`-MemberExpr 0x558fa8f2f6e8 <col:10, col:12> 'int' lvalue .f 0x558fa8eb1320
  `-DeclRefExpr 0x558fa8f2f6c0 <col:10> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: ReturnStmt 0x558fa8f2f738 <lparser.c:971:3, col:12>
`-ImplicitCastExpr 0x558fa8f2f720 <col:10, col:12> 'int' <LValueToRValue>
  `-MemberExpr 0x558fa8f2f6e8 <col:10, col:12> 'int' lvalue .f 0x558fa8eb1320
    `-DeclRefExpr 0x558fa8f2f6c0 <col:10> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
return [B1.12];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f2f4d0 <lparser.c:969:26> 'int' EnumConstant 0x558fa8eb0968 'VFALSE' 'int'
VFALSE
   2: ImplicitCastExpr 0x558fa8f2f4f8 <lparser.c:969:26> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x558fa8f2f4d0 <col:26> 'int' EnumConstant 0x558fa8eb0968 'VFALSE' 'int'
[B2.1] (ImplicitCastExpr, IntegralCast, expkind)
   3: DeclRefExpr 0x558fa8f2f470 <lparser.c:969:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
v
   4: MemberExpr 0x558fa8f2f498 <lparser.c:969:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f2f470 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B2.3].k
   5: BinaryOperator 0x558fa8f2f510 <lparser.c:969:20, col:26> 'expkind':'expkind' '='
|-MemberExpr 0x558fa8f2f498 <col:20, col:22> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
| `-DeclRefExpr 0x558fa8f2f470 <col:20> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f2f4f8 <col:26> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x558fa8f2f4d0 <col:26> 'int' EnumConstant 0x558fa8eb0968 'VFALSE' 'int'
[B2.4] = [B2.2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclStmt 0x558fa8f2f260 <lparser.c:967:3, col:12>col:11
`-VarDecl 0x558fa8f2f200 <col:3, col:11> col:11 used v 'expdesc':'struct expdesc'
expdesc v;
   2: DeclRefExpr 0x558fa8f2f278 <lparser.c:968:3> 'void (LexState *, expdesc *)' Function 0x558fa8f29f38 'expr' 'void (LexState *, expdesc *)'
expr
   3: ImplicitCastExpr 0x558fa8f2f310 <lparser.c:968:3> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2f278 <col:3> 'void (LexState *, expdesc *)' Function 0x558fa8f29f38 'expr' 'void (LexState *, expdesc *)'
[B3.2] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, expdesc *))
   4: DeclRefExpr 0x558fa8f2f2a0 <lparser.c:968:8> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
ls
   5: ImplicitCastExpr 0x558fa8f2f360 <lparser.c:968:8> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2f2a0 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
[B3.4] (ImplicitCastExpr, LValueToRValue, LexState *)
   6: DeclRefExpr 0x558fa8f2f2c8 <lparser.c:968:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
v
   7: UnaryOperator 0x558fa8f2f2f0 <lparser.c:968:12, col:13> 'expdesc *' prefix '&'
`-DeclRefExpr 0x558fa8f2f2c8 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
&[B3.6]
   8: CallExpr 0x558fa8f2f328 <lparser.c:968:3, col:14> 'void'
|-ImplicitCastExpr 0x558fa8f2f310 <col:3> 'void (*)(LexState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2f278 <col:3> 'void (LexState *, expdesc *)' Function 0x558fa8f29f38 'expr' 'void (LexState *, expdesc *)'
|-ImplicitCastExpr 0x558fa8f2f360 <col:8> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2f2a0 <col:8> 'LexState *' lvalue ParmVar 0x558fa8f2f038 'ls' 'LexState *'
`-UnaryOperator 0x558fa8f2f2f0 <col:12, col:13> 'expdesc *' prefix '&'
  `-DeclRefExpr 0x558fa8f2f2c8 <col:13> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B3.3]([B3.5], [B3.7])
   9: DeclRefExpr 0x558fa8f2f378 <lparser.c:969:7> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
v
  10: MemberExpr 0x558fa8f2f3a0 <lparser.c:969:7, col:9> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
`-DeclRefExpr 0x558fa8f2f378 <col:7> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B3.9].k
  11: ImplicitCastExpr 0x558fa8f2f400 <lparser.c:969:7, col:9> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x558fa8f2f3a0 <col:7, col:9> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
  `-DeclRefExpr 0x558fa8f2f378 <col:7> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B3.10] (ImplicitCastExpr, LValueToRValue, expkind)
  12: ImplicitCastExpr 0x558fa8f2f418 <lparser.c:969:7, col:9> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2f400 <col:7, col:9> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x558fa8f2f3a0 <col:7, col:9> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
    `-DeclRefExpr 0x558fa8f2f378 <col:7> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
[B3.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: DeclRefExpr 0x558fa8f2f3d8 <lparser.c:969:14> 'int' EnumConstant 0x558fa8eb08d8 'VNIL' 'int'
VNIL
  14: ImplicitCastExpr 0x558fa8f2f430 <lparser.c:969:14> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x558fa8f2f3d8 <col:14> 'int' EnumConstant 0x558fa8eb08d8 'VNIL' 'int'
[B3.13] (ImplicitCastExpr, IntegralCast, unsigned int)
  15: BinaryOperator 0x558fa8f2f448 <lparser.c:969:7, col:14> 'int' '=='
|-ImplicitCastExpr 0x558fa8f2f418 <col:7, col:9> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f2f400 <col:7, col:9> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x558fa8f2f3a0 <col:7, col:9> 'expkind':'expkind' lvalue .k 0x558fa8eb0e70
|     `-DeclRefExpr 0x558fa8f2f378 <col:7> 'expdesc':'struct expdesc' lvalue Var 0x558fa8f2f200 'v' 'expdesc':'struct expdesc'
`-ImplicitCastExpr 0x558fa8f2f430 <col:14> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x558fa8f2f3d8 <col:14> 'int' EnumConstant 0x558fa8eb08d8 'VNIL' 'int'
[B3.12] == [B3.14]
   T: if [B3.15]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1
