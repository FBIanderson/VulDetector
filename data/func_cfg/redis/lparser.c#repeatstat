static void repeatstat(LexState *ls, int line)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: DeclRefExpr 0x558fa8f329e0 <lparser.c:1032:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
leaveblock
   2: ImplicitCastExpr 0x558fa8f32a30 <lparser.c:1032:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f329e0 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *))
   3: DeclRefExpr 0x558fa8f32a08 <lparser.c:1032:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f32a78 <lparser.c:1032:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32a08 <col:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x558fa8f32a48 <lparser.c:1032:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f32a30 <col:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f329e0 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
`-ImplicitCastExpr 0x558fa8f32a78 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32a08 <col:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B1.2]([B1.4])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f324d0 <lparser.c:1027:5> 'void (LexState *)' Function 0x558fa8f2f820 'breakstat' 'void (LexState *)'
breakstat
   2: ImplicitCastExpr 0x558fa8f32520 <lparser.c:1027:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f324d0 <col:5> 'void (LexState *)' Function 0x558fa8f2f820 'breakstat' 'void (LexState *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   3: DeclRefExpr 0x558fa8f324f8 <lparser.c:1027:15> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f32568 <lparser.c:1027:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f324f8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CallExpr 0x558fa8f32538 <lparser.c:1027:5, col:17> 'void'
|-ImplicitCastExpr 0x558fa8f32520 <col:5> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f324d0 <col:5> 'void (LexState *)' Function 0x558fa8f2f820 'breakstat' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f32568 <col:15> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f324f8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.2]([B2.4])
   6: DeclRefExpr 0x558fa8f32580 <lparser.c:1028:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
   7: ImplicitCastExpr 0x558fa8f32648 <lparser.c:1028:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f32580 <col:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B2.6] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
   8: DeclRefExpr 0x558fa8f325a8 <lparser.c:1028:22> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f325d0 <lparser.c:1028:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f325a8 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: MemberExpr 0x558fa8f325e8 <lparser.c:1028:22, col:26> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f325d0 <col:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f325a8 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.9]->fs
  11: ImplicitCastExpr 0x558fa8f32698 <lparser.c:1028:22, col:26> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f325e8 <col:22, col:26> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f325d0 <col:22> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f325a8 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.10] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  12: DeclRefExpr 0x558fa8f32620 <lparser.c:1028:30> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
condexit
  13: ImplicitCastExpr 0x558fa8f326b0 <lparser.c:1028:30> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32620 <col:30> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
[B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: CallExpr 0x558fa8f32660 <lparser.c:1028:5, col:38> 'void'
|-ImplicitCastExpr 0x558fa8f32648 <col:5> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f32580 <col:5> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f32698 <col:22, col:26> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f325e8 <col:22, col:26> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f325d0 <col:22> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f325a8 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f326b0 <col:30> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32620 <col:30> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
[B2.7]([B2.11], [B2.13])
  15: DeclRefExpr 0x558fa8f326c8 <lparser.c:1029:5> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
leaveblock
  16: ImplicitCastExpr 0x558fa8f32718 <lparser.c:1029:5> 'void (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f326c8 <col:5> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
[B2.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *))
  17: DeclRefExpr 0x558fa8f326f0 <lparser.c:1029:16> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
  18: ImplicitCastExpr 0x558fa8f32760 <lparser.c:1029:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f326f0 <col:16> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B2.17] (ImplicitCastExpr, LValueToRValue, FuncState *)
  19: CallExpr 0x558fa8f32730 <lparser.c:1029:5, col:18> 'void'
|-ImplicitCastExpr 0x558fa8f32718 <col:5> 'void (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f326c8 <col:5> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
`-ImplicitCastExpr 0x558fa8f32760 <col:16> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f326f0 <col:16> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B2.16]([B2.18])
  20: DeclRefExpr 0x558fa8f32778 <lparser.c:1030:5> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
luaK_patchlist
  21: ImplicitCastExpr 0x558fa8f328f0 <lparser.c:1030:5> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f32778 <col:5> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
[B2.20] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
  22: DeclRefExpr 0x558fa8f327a0 <lparser.c:1030:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
  23: ImplicitCastExpr 0x558fa8f327c8 <lparser.c:1030:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f327a0 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.22] (ImplicitCastExpr, LValueToRValue, LexState *)
  24: MemberExpr 0x558fa8f327e0 <lparser.c:1030:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f327c8 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f327a0 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.23]->fs
  25: ImplicitCastExpr 0x558fa8f32948 <lparser.c:1030:20, col:24> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f327e0 <col:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f327c8 <col:20> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f327a0 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B2.24] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  26: DeclRefExpr 0x558fa8f32818 <lparser.c:1030:28> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
  27: ImplicitCastExpr 0x558fa8f32868 <lparser.c:1030:28> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f32818 <col:28> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B2.26] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
  28: DeclRefExpr 0x558fa8f32840 <lparser.c:1030:38> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
  29: ImplicitCastExpr 0x558fa8f328b0 <lparser.c:1030:38> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32840 <col:38> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B2.28] (ImplicitCastExpr, LValueToRValue, FuncState *)
  30: CallExpr 0x558fa8f32880 <lparser.c:1030:28, col:40> 'int'
|-ImplicitCastExpr 0x558fa8f32868 <col:28> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f32818 <col:28> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f328b0 <col:38> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32840 <col:38> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B2.27]([B2.29])
  31: DeclRefExpr 0x558fa8f328c8 <lparser.c:1030:43> 'int' lvalue Var 0x558fa8f31948 'repeat_init' 'int'
repeat_init
  32: ImplicitCastExpr 0x558fa8f32960 <lparser.c:1030:43> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f328c8 <col:43> 'int' lvalue Var 0x558fa8f31948 'repeat_init' 'int'
[B2.31] (ImplicitCastExpr, LValueToRValue, int)
  33: CallExpr 0x558fa8f32908 <lparser.c:1030:5, col:54> 'void'
|-ImplicitCastExpr 0x558fa8f328f0 <col:5> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f32778 <col:5> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x558fa8f32948 <col:20, col:24> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f327e0 <col:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f327c8 <col:20> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f327a0 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
|-CallExpr 0x558fa8f32880 <col:28, col:40> 'int'
| |-ImplicitCastExpr 0x558fa8f32868 <col:28> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f32818 <col:28> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
| `-ImplicitCastExpr 0x558fa8f328b0 <col:38> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f32840 <col:38> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f32960 <col:43> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f328c8 <col:43> 'int' lvalue Var 0x558fa8f31948 'repeat_init' 'int'
[B2.21]([B2.25], [B2.30], [B2.32])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f32270 <lparser.c:1023:5> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
leaveblock
   2: ImplicitCastExpr 0x558fa8f322c0 <lparser.c:1023:5> 'void (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f32270 <col:5> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *))
   3: DeclRefExpr 0x558fa8f32298 <lparser.c:1023:16> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f32308 <lparser.c:1023:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32298 <col:16> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x558fa8f322d8 <lparser.c:1023:5, col:18> 'void'
|-ImplicitCastExpr 0x558fa8f322c0 <col:5> 'void (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f32270 <col:5> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
`-ImplicitCastExpr 0x558fa8f32308 <col:16> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32298 <col:16> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B3.2]([B3.4])
   6: DeclRefExpr 0x558fa8f32320 <lparser.c:1024:5> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
luaK_patchlist
   7: ImplicitCastExpr 0x558fa8f32410 <lparser.c:1024:5> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f32320 <col:5> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
[B3.6] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
   8: DeclRefExpr 0x558fa8f32348 <lparser.c:1024:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x558fa8f32370 <lparser.c:1024:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32348 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B3.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: MemberExpr 0x558fa8f32388 <lparser.c:1024:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f32370 <col:20> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32348 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B3.9]->fs
  11: ImplicitCastExpr 0x558fa8f32468 <lparser.c:1024:20, col:24> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f32388 <col:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f32370 <col:20> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f32348 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B3.10] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
  12: DeclRefExpr 0x558fa8f323c0 <lparser.c:1024:28> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
condexit
  13: ImplicitCastExpr 0x558fa8f32480 <lparser.c:1024:28> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f323c0 <col:28> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
[B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: DeclRefExpr 0x558fa8f323e8 <lparser.c:1024:38> 'int' lvalue Var 0x558fa8f31948 'repeat_init' 'int'
repeat_init
  15: ImplicitCastExpr 0x558fa8f32498 <lparser.c:1024:38> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f323e8 <col:38> 'int' lvalue Var 0x558fa8f31948 'repeat_init' 'int'
[B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: CallExpr 0x558fa8f32428 <lparser.c:1024:5, col:49> 'void'
|-ImplicitCastExpr 0x558fa8f32410 <col:5> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f32320 <col:5> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x558fa8f32468 <col:20, col:24> 'struct FuncState *' <LValueToRValue>
| `-MemberExpr 0x558fa8f32388 <col:20, col:24> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
|   `-ImplicitCastExpr 0x558fa8f32370 <col:20> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f32348 <col:20> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
|-ImplicitCastExpr 0x558fa8f32480 <col:28> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f323c0 <col:28> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
`-ImplicitCastExpr 0x558fa8f32498 <col:38> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f323e8 <col:38> 'int' lvalue Var 0x558fa8f31948 'repeat_init' 'int'
[B3.7]([B3.11], [B3.13], [B3.15])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclStmt 0x558fa8f31800 <lparser.c:1012:3, col:15>col:7
`-VarDecl 0x558fa8f317a0 <col:3, col:7> col:7 used condexit 'int'
int condexit;
   2: DeclRefExpr 0x558fa8f31888 <lparser.c:1013:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x558fa8f318b0 <lparser.c:1013:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31888 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x558fa8f318c8 <lparser.c:1013:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f318b0 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31888 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.3]->fs
   5: ImplicitCastExpr 0x558fa8f31900 <lparser.c:1013:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f318c8 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f318b0 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f31888 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.4] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   6: DeclStmt 0x558fa8f31918 <lparser.c:1013:3, col:25>col:14
`-VarDecl 0x558fa8f31828 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f31900 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f318c8 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f318b0 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f31888 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
FuncState *fs = ls->fs;
   7: DeclRefExpr 0x558fa8f319a8 <lparser.c:1014:21> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
luaK_getlabel
   8: ImplicitCastExpr 0x558fa8f319f8 <lparser.c:1014:21> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f319a8 <col:21> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
[B4.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   9: DeclRefExpr 0x558fa8f319d0 <lparser.c:1014:35> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
  10: ImplicitCastExpr 0x558fa8f31a40 <lparser.c:1014:35> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f319d0 <col:35> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B4.9] (ImplicitCastExpr, LValueToRValue, FuncState *)
  11: CallExpr 0x558fa8f31a10 <lparser.c:1014:21, col:37> 'int'
|-ImplicitCastExpr 0x558fa8f319f8 <col:21> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f319a8 <col:21> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f31a40 <col:35> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f319d0 <col:35> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B4.8]([B4.10])
  12: DeclStmt 0x558fa8f31a58 <lparser.c:1014:3, col:38>col:7
`-VarDecl 0x558fa8f31948 <col:3, col:37> col:7 used repeat_init 'int' cinit
  `-CallExpr 0x558fa8f31a10 <col:21, col:37> 'int'
    |-ImplicitCastExpr 0x558fa8f319f8 <col:21> 'int (*)(FuncState *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x558fa8f319a8 <col:21> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
    `-ImplicitCastExpr 0x558fa8f31a40 <col:35> 'FuncState *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f319d0 <col:35> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
int repeat_init = luaK_getlabel(fs);
  13: DeclStmt 0x558fa8f495d8 <lparser.c:1015:12>col:12
`-VarDecl 0x558fa8f31a80 <col:3, col:12> col:12 used bl1 'BlockCnt':'struct BlockCnt'
BlockCnt bl1;
  14: DeclStmt 0x558fa8f495c0 <lparser.c:1015:17>col:17
`-VarDecl 0x558fa8f31af0 <col:3, col:17> col:17 used bl2 'BlockCnt':'struct BlockCnt'
BlockCnt bl2;
  15: DeclRefExpr 0x558fa8f31b80 <lparser.c:1016:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
enterblock
  16: ImplicitCastExpr 0x558fa8f31c38 <lparser.c:1016:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31b80 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
[B4.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BlockCnt *, lu_byte))
  17: DeclRefExpr 0x558fa8f31ba8 <lparser.c:1016:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
  18: ImplicitCastExpr 0x558fa8f31c90 <lparser.c:1016:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31ba8 <col:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B4.17] (ImplicitCastExpr, LValueToRValue, FuncState *)
  19: DeclRefExpr 0x558fa8f31bd0 <lparser.c:1016:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31a80 'bl1' 'BlockCnt':'struct BlockCnt'
bl1
  20: UnaryOperator 0x558fa8f31bf8 <lparser.c:1016:18, col:19> 'BlockCnt *' prefix '&'
`-DeclRefExpr 0x558fa8f31bd0 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31a80 'bl1' 'BlockCnt':'struct BlockCnt'
&[B4.19]
  21: IntegerLiteral 0x558fa8f31c18 <lparser.c:1016:24> 'int' 1
1
  22: ImplicitCastExpr 0x558fa8f31ca8 <lparser.c:1016:24> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f31c18 <col:24> 'int' 1
[B4.21] (ImplicitCastExpr, IntegralCast, lu_byte)
  23: CallExpr 0x558fa8f31c50 <lparser.c:1016:3, col:25> 'void'
|-ImplicitCastExpr 0x558fa8f31c38 <col:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31b80 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
|-ImplicitCastExpr 0x558fa8f31c90 <col:14> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f31ba8 <col:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f31bf8 <col:18, col:19> 'BlockCnt *' prefix '&'
| `-DeclRefExpr 0x558fa8f31bd0 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31a80 'bl1' 'BlockCnt':'struct BlockCnt'
`-ImplicitCastExpr 0x558fa8f31ca8 <col:24> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f31c18 <col:24> 'int' 1
[B4.16]([B4.18], [B4.20], [B4.22])
  24: DeclRefExpr 0x558fa8f31cc0 <lparser.c:1017:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
enterblock
  25: ImplicitCastExpr 0x558fa8f31d78 <lparser.c:1017:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31cc0 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
[B4.24] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BlockCnt *, lu_byte))
  26: DeclRefExpr 0x558fa8f31ce8 <lparser.c:1017:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
fs
  27: ImplicitCastExpr 0x558fa8f31dd0 <lparser.c:1017:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31ce8 <col:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
[B4.26] (ImplicitCastExpr, LValueToRValue, FuncState *)
  28: DeclRefExpr 0x558fa8f31d10 <lparser.c:1017:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
bl2
  29: UnaryOperator 0x558fa8f31d38 <lparser.c:1017:18, col:19> 'BlockCnt *' prefix '&'
`-DeclRefExpr 0x558fa8f31d10 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
&[B4.28]
  30: IntegerLiteral 0x558fa8f31d58 <lparser.c:1017:24> 'int' 0
0
  31: ImplicitCastExpr 0x558fa8f31de8 <lparser.c:1017:24> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f31d58 <col:24> 'int' 0
[B4.30] (ImplicitCastExpr, IntegralCast, lu_byte)
  32: CallExpr 0x558fa8f31d90 <lparser.c:1017:3, col:25> 'void'
|-ImplicitCastExpr 0x558fa8f31d78 <col:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31cc0 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
|-ImplicitCastExpr 0x558fa8f31dd0 <col:14> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f31ce8 <col:14> 'FuncState *' lvalue Var 0x558fa8f31828 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f31d38 <col:18, col:19> 'BlockCnt *' prefix '&'
| `-DeclRefExpr 0x558fa8f31d10 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
`-ImplicitCastExpr 0x558fa8f31de8 <col:24> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f31d58 <col:24> 'int' 0
[B4.25]([B4.27], [B4.29], [B4.31])
  33: DeclRefExpr 0x558fa8f31e00 <lparser.c:1018:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
  34: ImplicitCastExpr 0x558fa8f31e50 <lparser.c:1018:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31e00 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B4.33] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  35: DeclRefExpr 0x558fa8f31e28 <lparser.c:1018:13> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
  36: ImplicitCastExpr 0x558fa8f31e98 <lparser.c:1018:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31e28 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.35] (ImplicitCastExpr, LValueToRValue, LexState *)
  37: CallExpr 0x558fa8f31e68 <lparser.c:1018:3, col:15> 'void'
|-ImplicitCastExpr 0x558fa8f31e50 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31e00 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f31e98 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31e28 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.34]([B4.36])
  38: DeclRefExpr 0x558fa8f31ed0 <lparser.c:1019:3> 'void (LexState *)' Function 0x558fa8ee9fe0 'chunk' 'void (LexState *)'
chunk
  39: ImplicitCastExpr 0x558fa8f31f20 <lparser.c:1019:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31ed0 <col:3> 'void (LexState *)' Function 0x558fa8ee9fe0 'chunk' 'void (LexState *)'
[B4.38] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  40: DeclRefExpr 0x558fa8f31ef8 <lparser.c:1019:9> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
  41: ImplicitCastExpr 0x558fa8f31f68 <lparser.c:1019:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31ef8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.40] (ImplicitCastExpr, LValueToRValue, LexState *)
  42: CallExpr 0x558fa8f31f38 <lparser.c:1019:3, col:11> 'void'
|-ImplicitCastExpr 0x558fa8f31f20 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31ed0 <col:3> 'void (LexState *)' Function 0x558fa8ee9fe0 'chunk' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f31f68 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31ef8 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.39]([B4.41])
  43: DeclRefExpr 0x558fa8f31f80 <lparser.c:1020:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
  44: ImplicitCastExpr 0x558fa8f32048 <lparser.c:1020:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31f80 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B4.43] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
  45: DeclRefExpr 0x558fa8f31fa8 <lparser.c:1020:15> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
  46: ImplicitCastExpr 0x558fa8f320a8 <lparser.c:1020:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31fa8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.45] (ImplicitCastExpr, LValueToRValue, LexState *)
  47: DeclRefExpr 0x558fa8f31fd0 <lparser.c:1020:19> 'int' EnumConstant 0x558fa8e9e4e8 'TK_UNTIL' 'int'
TK_UNTIL
  48: DeclRefExpr 0x558fa8f31ff8 <lparser.c:1020:29> 'int' EnumConstant 0x558fa8e9e3c8 'TK_REPEAT' 'int'
TK_REPEAT
  49: DeclRefExpr 0x558fa8f32020 <lparser.c:1020:40> 'int' lvalue ParmVar 0x558fa8f31648 'line' 'int'
line
  50: ImplicitCastExpr 0x558fa8f320c0 <lparser.c:1020:40> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32020 <col:40> 'int' lvalue ParmVar 0x558fa8f31648 'line' 'int'
[B4.49] (ImplicitCastExpr, LValueToRValue, int)
  51: CallExpr 0x558fa8f32060 <lparser.c:1020:3, col:44> 'void'
|-ImplicitCastExpr 0x558fa8f32048 <col:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31f80 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f320a8 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f31fa8 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
|-DeclRefExpr 0x558fa8f31fd0 <col:19> 'int' EnumConstant 0x558fa8e9e4e8 'TK_UNTIL' 'int'
|-DeclRefExpr 0x558fa8f31ff8 <col:29> 'int' EnumConstant 0x558fa8e9e3c8 'TK_REPEAT' 'int'
`-ImplicitCastExpr 0x558fa8f320c0 <col:40> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32020 <col:40> 'int' lvalue ParmVar 0x558fa8f31648 'line' 'int'
[B4.44]([B4.46], [B4.47], [B4.48], [B4.50])
  52: DeclRefExpr 0x558fa8f32100 <lparser.c:1021:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
cond
  53: ImplicitCastExpr 0x558fa8f32150 <lparser.c:1021:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f32100 <col:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
[B4.52] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
  54: DeclRefExpr 0x558fa8f32128 <lparser.c:1021:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
ls
  55: ImplicitCastExpr 0x558fa8f32198 <lparser.c:1021:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f32128 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.54] (ImplicitCastExpr, LValueToRValue, LexState *)
  56: CallExpr 0x558fa8f32168 <lparser.c:1021:14, col:21> 'int'
|-ImplicitCastExpr 0x558fa8f32150 <col:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f32100 <col:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f32198 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f32128 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.53]([B4.55])
  57: DeclRefExpr 0x558fa8f320d8 <lparser.c:1021:3> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
condexit
  58: BinaryOperator 0x558fa8f321b0 <lparser.c:1021:3, col:21> 'int' '='
|-DeclRefExpr 0x558fa8f320d8 <col:3> 'int' lvalue Var 0x558fa8f317a0 'condexit' 'int'
`-CallExpr 0x558fa8f32168 <col:14, col:21> 'int'
  |-ImplicitCastExpr 0x558fa8f32150 <col:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f32100 <col:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
  `-ImplicitCastExpr 0x558fa8f32198 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f32128 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f315d0 'ls' 'LexState *'
[B4.57] = [B4.56]
  59: DeclRefExpr 0x558fa8f321d8 <lparser.c:1022:8> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
bl2
  60: MemberExpr 0x558fa8f32200 <lparser.c:1022:8, col:12> 'lu_byte':'unsigned char' lvalue .upval 0x558fa8ee9e18
`-DeclRefExpr 0x558fa8f321d8 <col:8> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
[B4.59].upval
  61: ImplicitCastExpr 0x558fa8f32238 <lparser.c:1022:8, col:12> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f32200 <col:8, col:12> 'lu_byte':'unsigned char' lvalue .upval 0x558fa8ee9e18
  `-DeclRefExpr 0x558fa8f321d8 <col:8> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
[B4.60] (ImplicitCastExpr, LValueToRValue, lu_byte)
  62: UnaryOperator 0x558fa8f32250 <lparser.c:1022:7, col:12> 'int' prefix '!'
`-ImplicitCastExpr 0x558fa8f32238 <col:8, col:12> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f32200 <col:8, col:12> 'lu_byte':'unsigned char' lvalue .upval 0x558fa8ee9e18
    `-DeclRefExpr 0x558fa8f321d8 <col:8> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f31af0 'bl2' 'BlockCnt':'struct BlockCnt'
![B4.61]
   T: if [B4.62]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1
