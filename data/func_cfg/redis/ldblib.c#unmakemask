static char *unmakemask(int mask, char *smask)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: CharacterLiteral 0x5615b2490db0 <ldblib.c:240:14> 'int' 0
'\x00'
   2: ImplicitCastExpr 0x5615b2490dc8 <ldblib.c:240:14> 'char' <IntegralCast>
`-CharacterLiteral 0x5615b2490db0 <col:14> 'int' 0
[B1.1] (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x5615b2490d08 <ldblib.c:240:3> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
smask
   4: ImplicitCastExpr 0x5615b2490d58 <ldblib.c:240:3> 'char *' <LValueToRValue>
`-DeclRefExpr 0x5615b2490d08 <col:3> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
[B1.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: DeclRefExpr 0x5615b2490d30 <ldblib.c:240:9> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
i
   6: ImplicitCastExpr 0x5615b2490d70 <ldblib.c:240:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x5615b2490d30 <col:9> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x5615b2490d88 <ldblib.c:240:3, col:10> 'char' lvalue
|-ImplicitCastExpr 0x5615b2490d58 <col:3> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x5615b2490d08 <col:3> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
`-ImplicitCastExpr 0x5615b2490d70 <col:9> 'int' <LValueToRValue>
  `-DeclRefExpr 0x5615b2490d30 <col:9> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B1.4][[B1.6]]
   8: BinaryOperator 0x5615b2490de0 <ldblib.c:240:3, col:14> 'char' '='
|-ArraySubscriptExpr 0x5615b2490d88 <col:3, col:10> 'char' lvalue
| |-ImplicitCastExpr 0x5615b2490d58 <col:3> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x5615b2490d08 <col:3> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
| `-ImplicitCastExpr 0x5615b2490d70 <col:9> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x5615b2490d30 <col:9> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
`-ImplicitCastExpr 0x5615b2490dc8 <col:14> 'char' <IntegralCast>
  `-CharacterLiteral 0x5615b2490db0 <col:14> 'int' 0
[B1.7] = [B1.2]
   9: DeclRefExpr 0x5615b2490e08 <ldblib.c:241:10> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
smask
  10: ImplicitCastExpr 0x5615b2490e30 <ldblib.c:241:10> 'char *' <LValueToRValue>
`-DeclRefExpr 0x5615b2490e08 <col:10> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
[B1.9] (ImplicitCastExpr, LValueToRValue, char *)
  11: ReturnStmt 0x5615b2490e48 <ldblib.c:241:3, col:10>
`-ImplicitCastExpr 0x5615b2490e30 <col:10> 'char *' <LValueToRValue>
  `-DeclRefExpr 0x5615b2490e08 <col:10> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
return [B1.10];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: CharacterLiteral 0x5615b2490c78 <ldblib.c:239:41> 'int' 108
'l'
   2: ImplicitCastExpr 0x5615b2490c90 <ldblib.c:239:41> 'char' <IntegralCast>
`-CharacterLiteral 0x5615b2490c78 <col:41> 'int' 108
[B2.1] (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x5615b2490bc8 <ldblib.c:239:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
smask
   4: ImplicitCastExpr 0x5615b2490c38 <ldblib.c:239:28> 'char *' <LValueToRValue>
`-DeclRefExpr 0x5615b2490bc8 <col:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
[B2.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: DeclRefExpr 0x5615b2490bf0 <ldblib.c:239:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
i
   6: UnaryOperator 0x5615b2490c18 <ldblib.c:239:34, col:35> 'int' postfix '++'
`-DeclRefExpr 0x5615b2490bf0 <col:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B2.5]++
   7: ArraySubscriptExpr 0x5615b2490c50 <ldblib.c:239:28, col:37> 'char' lvalue
|-ImplicitCastExpr 0x5615b2490c38 <col:28> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x5615b2490bc8 <col:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
`-UnaryOperator 0x5615b2490c18 <col:34, col:35> 'int' postfix '++'
  `-DeclRefExpr 0x5615b2490bf0 <col:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B2.4][[B2.6]]
   8: BinaryOperator 0x5615b2490ca8 <ldblib.c:239:28, col:41> 'char' '='
|-ArraySubscriptExpr 0x5615b2490c50 <col:28, col:37> 'char' lvalue
| |-ImplicitCastExpr 0x5615b2490c38 <col:28> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x5615b2490bc8 <col:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
| `-UnaryOperator 0x5615b2490c18 <col:34, col:35> 'int' postfix '++'
|   `-DeclRefExpr 0x5615b2490bf0 <col:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
`-ImplicitCastExpr 0x5615b2490c90 <col:41> 'char' <IntegralCast>
  `-CharacterLiteral 0x5615b2490c78 <col:41> 'int' 108
[B2.7] = [B2.2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x5615b2490ad8 <ldblib.c:239:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
mask
   2: ImplicitCastExpr 0x5615b2490b88 <ldblib.c:239:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5615b2490ad8 <col:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5615b2490b00 <./lua.h:323:23> 'int' 1
1
   4: IntegerLiteral 0x5615b2490b20 <./lua.h:313:22> 'int' 2
2
   5: BinaryOperator 0x5615b2490b40 <./lua.h:323:23, line:313:22> 'int' '<<'
|-IntegerLiteral 0x5615b2490b00 <line:323:23> 'int' 1
`-IntegerLiteral 0x5615b2490b20 <line:313:22> 'int' 2
[B3.3] << [B3.4]
   6: BinaryOperator 0x5615b2490ba0 <ldblib.c:239:7, ./lua.h:323:40> 'int' '&'
|-ImplicitCastExpr 0x5615b2490b88 <ldblib.c:239:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5615b2490ad8 <col:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
`-ParenExpr 0x5615b2490b68 <./lua.h:323:22, col:40> 'int'
  `-BinaryOperator 0x5615b2490b40 <col:23, line:313:22> 'int' '<<'
    |-IntegerLiteral 0x5615b2490b00 <line:323:23> 'int' 1
    `-IntegerLiteral 0x5615b2490b20 <line:313:22> 'int' 2
[B3.2] & ([B3.5])
   T: if [B3.6]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: CharacterLiteral 0x5615b2490a48 <ldblib.c:238:40> 'int' 114
'r'
   2: ImplicitCastExpr 0x5615b2490a60 <ldblib.c:238:40> 'char' <IntegralCast>
`-CharacterLiteral 0x5615b2490a48 <col:40> 'int' 114
[B4.1] (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x5615b2490998 <ldblib.c:238:27> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
smask
   4: ImplicitCastExpr 0x5615b2490a08 <ldblib.c:238:27> 'char *' <LValueToRValue>
`-DeclRefExpr 0x5615b2490998 <col:27> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
[B4.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: DeclRefExpr 0x5615b24909c0 <ldblib.c:238:33> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
i
   6: UnaryOperator 0x5615b24909e8 <ldblib.c:238:33, col:34> 'int' postfix '++'
`-DeclRefExpr 0x5615b24909c0 <col:33> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B4.5]++
   7: ArraySubscriptExpr 0x5615b2490a20 <ldblib.c:238:27, col:36> 'char' lvalue
|-ImplicitCastExpr 0x5615b2490a08 <col:27> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x5615b2490998 <col:27> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
`-UnaryOperator 0x5615b24909e8 <col:33, col:34> 'int' postfix '++'
  `-DeclRefExpr 0x5615b24909c0 <col:33> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B4.4][[B4.6]]
   8: BinaryOperator 0x5615b2490a78 <ldblib.c:238:27, col:40> 'char' '='
|-ArraySubscriptExpr 0x5615b2490a20 <col:27, col:36> 'char' lvalue
| |-ImplicitCastExpr 0x5615b2490a08 <col:27> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x5615b2490998 <col:27> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
| `-UnaryOperator 0x5615b24909e8 <col:33, col:34> 'int' postfix '++'
|   `-DeclRefExpr 0x5615b24909c0 <col:33> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
`-ImplicitCastExpr 0x5615b2490a60 <col:40> 'char' <IntegralCast>
  `-CharacterLiteral 0x5615b2490a48 <col:40> 'int' 114
[B4.7] = [B4.2]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x5615b24908a8 <ldblib.c:238:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
mask
   2: ImplicitCastExpr 0x5615b2490958 <ldblib.c:238:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5615b24908a8 <col:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x5615b24908d0 <./lua.h:322:22> 'int' 1
1
   4: IntegerLiteral 0x5615b24908f0 <./lua.h:312:21> 'int' 1
1
   5: BinaryOperator 0x5615b2490910 <./lua.h:322:22, line:312:21> 'int' '<<'
|-IntegerLiteral 0x5615b24908d0 <line:322:22> 'int' 1
`-IntegerLiteral 0x5615b24908f0 <line:312:21> 'int' 1
[B5.3] << [B5.4]
   6: BinaryOperator 0x5615b2490970 <ldblib.c:238:7, ./lua.h:322:38> 'int' '&'
|-ImplicitCastExpr 0x5615b2490958 <ldblib.c:238:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5615b24908a8 <col:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
`-ParenExpr 0x5615b2490938 <./lua.h:322:21, col:38> 'int'
  `-BinaryOperator 0x5615b2490910 <col:22, line:312:21> 'int' '<<'
    |-IntegerLiteral 0x5615b24908d0 <line:322:22> 'int' 1
    `-IntegerLiteral 0x5615b24908f0 <line:312:21> 'int' 1
[B5.2] & ([B5.5])
   T: if [B5.6]
   Preds (2): B6 B7
   Succs (2): B4 B3

 [B6]
   1: CharacterLiteral 0x5615b2490818 <ldblib.c:237:41> 'int' 99
'c'
   2: ImplicitCastExpr 0x5615b2490830 <ldblib.c:237:41> 'char' <IntegralCast>
`-CharacterLiteral 0x5615b2490818 <col:41> 'int' 99
[B6.1] (ImplicitCastExpr, IntegralCast, char)
   3: DeclRefExpr 0x5615b2490768 <ldblib.c:237:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
smask
   4: ImplicitCastExpr 0x5615b24907d8 <ldblib.c:237:28> 'char *' <LValueToRValue>
`-DeclRefExpr 0x5615b2490768 <col:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
[B6.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: DeclRefExpr 0x5615b2490790 <ldblib.c:237:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
i
   6: UnaryOperator 0x5615b24907b8 <ldblib.c:237:34, col:35> 'int' postfix '++'
`-DeclRefExpr 0x5615b2490790 <col:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B6.5]++
   7: ArraySubscriptExpr 0x5615b24907f0 <ldblib.c:237:28, col:37> 'char' lvalue
|-ImplicitCastExpr 0x5615b24907d8 <col:28> 'char *' <LValueToRValue>
| `-DeclRefExpr 0x5615b2490768 <col:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
`-UnaryOperator 0x5615b24907b8 <col:34, col:35> 'int' postfix '++'
  `-DeclRefExpr 0x5615b2490790 <col:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
[B6.4][[B6.6]]
   8: BinaryOperator 0x5615b2490848 <ldblib.c:237:28, col:41> 'char' '='
|-ArraySubscriptExpr 0x5615b24907f0 <col:28, col:37> 'char' lvalue
| |-ImplicitCastExpr 0x5615b24907d8 <col:28> 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x5615b2490768 <col:28> 'char *' lvalue ParmVar 0x5615b2490438 'smask' 'char *'
| `-UnaryOperator 0x5615b24907b8 <col:34, col:35> 'int' postfix '++'
|   `-DeclRefExpr 0x5615b2490790 <col:34> 'int' lvalue Var 0x5615b24905e0 'i' 'int'
`-ImplicitCastExpr 0x5615b2490830 <col:41> 'char' <IntegralCast>
  `-CharacterLiteral 0x5615b2490818 <col:41> 'int' 99
[B6.7] = [B6.2]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: IntegerLiteral 0x5615b2490640 <ldblib.c:236:11> 'int' 0
0
   2: DeclStmt 0x5615b2490660 <ldblib.c:236:3, col:12>col:7
`-VarDecl 0x5615b24905e0 <col:3, col:11> col:7 used i 'int' cinit
  `-IntegerLiteral 0x5615b2490640 <col:11> 'int' 0
int i = 0;
   3: DeclRefExpr 0x5615b2490678 <ldblib.c:237:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
mask
   4: ImplicitCastExpr 0x5615b2490728 <ldblib.c:237:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x5615b2490678 <col:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
[B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5615b24906a0 <./lua.h:321:23> 'int' 1
1
   6: IntegerLiteral 0x5615b24906c0 <./lua.h:311:22> 'int' 0
0
   7: BinaryOperator 0x5615b24906e0 <./lua.h:321:23, line:311:22> 'int' '<<'
|-IntegerLiteral 0x5615b24906a0 <line:321:23> 'int' 1
`-IntegerLiteral 0x5615b24906c0 <line:311:22> 'int' 0
[B7.5] << [B7.6]
   8: BinaryOperator 0x5615b2490740 <ldblib.c:237:7, ./lua.h:321:40> 'int' '&'
|-ImplicitCastExpr 0x5615b2490728 <ldblib.c:237:7> 'int' <LValueToRValue>
| `-DeclRefExpr 0x5615b2490678 <col:7> 'int' lvalue ParmVar 0x5615b24903c0 'mask' 'int'
`-ParenExpr 0x5615b2490708 <./lua.h:321:22, col:40> 'int'
  `-BinaryOperator 0x5615b24906e0 <col:23, line:311:22> 'int' '<<'
    |-IntegerLiteral 0x5615b24906a0 <line:321:23> 'int' 1
    `-IntegerLiteral 0x5615b24906c0 <line:311:22> 'int' 0
[B7.4] & ([B7.7])
   T: if [B7.8]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (1): B1
