static int report(lua_State *L, int status)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: DeclRefExpr 0x55cfe635e3d8 <lua.c:72:10> 'int' lvalue ParmVar 0x55cfe635d810 'status' 'int'
status
   2: ImplicitCastExpr 0x55cfe635e400 <lua.c:72:10> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe635e3d8 <col:10> 'int' lvalue ParmVar 0x55cfe635d810 'status' 'int'
[B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ReturnStmt 0x55cfe635e418 <lua.c:72:3, col:10>
`-ImplicitCastExpr 0x55cfe635e400 <col:10> 'int' <LValueToRValue>
  `-DeclRefExpr 0x55cfe635e3d8 <col:10> 'int' lvalue ParmVar 0x55cfe635d810 'status' 'int'
return [B1.2];
   Preds (3): B2 B5 B6
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x55cfe635e090 <lua.c:69:5> 'void (const char *, const char *)' Function 0x55cfe635cdb0 'l_message' 'void (const char *, const char *)'
l_message
   2: ImplicitCastExpr 0x55cfe635e138 <lua.c:69:5> 'void (*)(const char *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55cfe635e090 <col:5> 'void (const char *, const char *)' Function 0x55cfe635cdb0 'l_message' 'void (const char *, const char *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *))
   3: DeclRefExpr 0x55cfe635e0b8 <lua.c:69:15> 'const char *' lvalue Var 0x55cfe635a9b8 'progname' 'const char *'
progname
   4: ImplicitCastExpr 0x55cfe635e188 <lua.c:69:15> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe635e0b8 <col:15> 'const char *' lvalue Var 0x55cfe635a9b8 'progname' 'const char *'
[B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: DeclRefExpr 0x55cfe635e0e0 <lua.c:69:25> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
msg
   6: ImplicitCastExpr 0x55cfe635e1a0 <lua.c:69:25> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe635e0e0 <col:25> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
[B2.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: CallExpr 0x55cfe635e150 <lua.c:69:5, col:28> 'void'
|-ImplicitCastExpr 0x55cfe635e138 <col:5> 'void (*)(const char *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55cfe635e090 <col:5> 'void (const char *, const char *)' Function 0x55cfe635cdb0 'l_message' 'void (const char *, const char *)'
|-ImplicitCastExpr 0x55cfe635e188 <col:15> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe635e0b8 <col:15> 'const char *' lvalue Var 0x55cfe635a9b8 'progname' 'const char *'
`-ImplicitCastExpr 0x55cfe635e1a0 <col:25> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55cfe635e0e0 <col:25> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x55cfe635e1b8 <./lua.h:254:23> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x55cfe6338e00 'lua_settop' 'void (lua_State *, int)':'void (lua_State *, int)'
lua_settop
   9: ImplicitCastExpr 0x55cfe635e308 <./lua.h:254:23> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55cfe635e1b8 <col:23> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x55cfe6338e00 'lua_settop' 'void (lua_State *, int)':'void (lua_State *, int)'
[B2.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(lua_State *, int))
  10: DeclRefExpr 0x55cfe635e1e0 <lua.c:70:13> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
L
  11: ImplicitCastExpr 0x55cfe635e358 <lua.c:70:13> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55cfe635e1e0 <col:13> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
[B2.10] (ImplicitCastExpr, LValueToRValue, lua_State *)
  12: IntegerLiteral 0x55cfe635e208 <lua.c:70:16> 'int' 1
1
  13: UnaryOperator 0x55cfe635e248 <./lua.h:254:37, col:40> 'int' prefix '-'
`-ParenExpr 0x55cfe635e228 <col:38, col:40> 'int'
  `-IntegerLiteral 0x55cfe635e208 <lua.c:70:16> 'int' 1
-([B2.12])
  14: IntegerLiteral 0x55cfe635e268 <./lua.h:254:42> 'int' 1
1
  15: BinaryOperator 0x55cfe635e288 <./lua.h:254:37, col:42> 'int' '-'
|-UnaryOperator 0x55cfe635e248 <col:37, col:40> 'int' prefix '-'
| `-ParenExpr 0x55cfe635e228 <col:38, col:40> 'int'
|   `-IntegerLiteral 0x55cfe635e208 <lua.c:70:16> 'int' 1
`-IntegerLiteral 0x55cfe635e268 <./lua.h:254:42> 'int' 1
[B2.13] - [B2.14]
  16: CallExpr 0x55cfe635e320 <./lua.h:254:23, col:43> 'void'
|-ImplicitCastExpr 0x55cfe635e308 <col:23> 'void (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55cfe635e1b8 <col:23> 'void (lua_State *, int)':'void (lua_State *, int)' Function 0x55cfe6338e00 'lua_settop' 'void (lua_State *, int)':'void (lua_State *, int)'
|-ImplicitCastExpr 0x55cfe635e358 <lua.c:70:13> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe635e1e0 <col:13> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
`-BinaryOperator 0x55cfe635e288 <./lua.h:254:37, col:42> 'int' '-'
  |-UnaryOperator 0x55cfe635e248 <col:37, col:40> 'int' prefix '-'
  | `-ParenExpr 0x55cfe635e228 <col:38, col:40> 'int'
  |   `-IntegerLiteral 0x55cfe635e208 <lua.c:70:16> 'int' 1
  `-IntegerLiteral 0x55cfe635e268 <./lua.h:254:42> 'int' 1
[B2.9]([B2.11], [B2.15])
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: StringLiteral 0x55cfe635dfb8 <lua.c:68:28> 'char [31]' lvalue "(error object is not a string)"
"(error object is not a string)"
   2: ImplicitCastExpr 0x55cfe635e000 <lua.c:68:28> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55cfe635dfb8 <col:28> 'char [31]' lvalue "(error object is not a string)"
[B3.1] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   3: ImplicitCastExpr 0x55cfe635e018 <lua.c:68:28> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55cfe635e000 <col:28> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55cfe635dfb8 <col:28> 'char [31]' lvalue "(error object is not a string)"
[B3.2] (ImplicitCastExpr, BitCast, const char *)
   4: DeclRefExpr 0x55cfe635df58 <lua.c:68:22> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
msg
   5: BinaryOperator 0x55cfe635e030 <lua.c:68:22, col:28> 'const char *' '='
|-DeclRefExpr 0x55cfe635df58 <col:22> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
`-ImplicitCastExpr 0x55cfe635e018 <col:28> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55cfe635e000 <col:28> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55cfe635dfb8 <col:28> 'char [31]' lvalue "(error object is not a string)"
[B3.4] = [B3.3]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: DeclRefExpr 0x55cfe635dc30 <./lua.h:279:27> 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)' Function 0x55cfe633b9c8 'lua_tolstring' 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)'
lua_tolstring
   2: ImplicitCastExpr 0x55cfe635ddb8 <./lua.h:279:27> 'const char *(*)(lua_State *, int, size_t *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55cfe635dc30 <col:27> 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)' Function 0x55cfe633b9c8 'lua_tolstring' 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(lua_State *, int, size_t *))
   3: DeclRefExpr 0x55cfe635dc58 <lua.c:67:36> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55cfe635de10 <lua.c:67:36> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55cfe635dc58 <col:36> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
[B4.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: IntegerLiteral 0x55cfe635dc80 <lua.c:67:40> 'int' 1
1
   6: UnaryOperator 0x55cfe635dca0 <lua.c:67:39, col:40> 'int' prefix '-'
`-IntegerLiteral 0x55cfe635dc80 <col:40> 'int' 1
-[B4.5]
   7: IntegerLiteral 0x55cfe635dce0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   8: CStyleCastExpr 0x55cfe635dd18 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55cfe635dce0 <col:24> 'int' 0
(void *)[B4.7] (CStyleCastExpr, NullToPointer, void *)
   9: ImplicitCastExpr 0x55cfe635de28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'size_t *' <NullToPointer>
`-ParenExpr 0x55cfe635dd40 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55cfe635dd18 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55cfe635dce0 <col:24> 'int' 0
([B4.8]) (ImplicitCastExpr, NullToPointer, size_t *)
  10: CallExpr 0x55cfe635ddd0 <./lua.h:279:27, col:53> 'const char *'
|-ImplicitCastExpr 0x55cfe635ddb8 <col:27> 'const char *(*)(lua_State *, int, size_t *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55cfe635dc30 <col:27> 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)' Function 0x55cfe633b9c8 'lua_tolstring' 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)'
|-ImplicitCastExpr 0x55cfe635de10 <lua.c:67:36> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe635dc58 <col:36> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
|-ParenExpr 0x55cfe635dcc0 <./lua.h:279:44, col:46> 'int'
| `-UnaryOperator 0x55cfe635dca0 <lua.c:67:39, col:40> 'int' prefix '-'
|   `-IntegerLiteral 0x55cfe635dc80 <col:40> 'int' 1
`-ImplicitCastExpr 0x55cfe635de28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'size_t *' <NullToPointer>
  `-ParenExpr 0x55cfe635dd40 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55cfe635dd18 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55cfe635dce0 <col:24> 'int' 0
[B4.2]([B4.4], ([B4.6]), [B4.9])
  11: DeclStmt 0x55cfe635de40 <lua.c:67:5, col:42>col:17
`-VarDecl 0x55cfe635dbd0 <col:5, ./lua.h:279:53> lua.c:67:17 used msg 'const char *' cinit
  `-CallExpr 0x55cfe635ddd0 <./lua.h:279:27, col:53> 'const char *'
    |-ImplicitCastExpr 0x55cfe635ddb8 <col:27> 'const char *(*)(lua_State *, int, size_t *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x55cfe635dc30 <col:27> 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)' Function 0x55cfe633b9c8 'lua_tolstring' 'const char *(lua_State *, int, size_t *)':'const char *(lua_State *, int, size_t *)'
    |-ImplicitCastExpr 0x55cfe635de10 <lua.c:67:36> 'lua_State *' <LValueToRValue>
    | `-DeclRefExpr 0x55cfe635dc58 <col:36> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
    |-ParenExpr 0x55cfe635dcc0 <./lua.h:279:44, col:46> 'int'
    | `-UnaryOperator 0x55cfe635dca0 <lua.c:67:39, col:40> 'int' prefix '-'
    |   `-IntegerLiteral 0x55cfe635dc80 <col:40> 'int' 1
    `-ImplicitCastExpr 0x55cfe635de28 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'size_t *' <NullToPointer>
      `-ParenExpr 0x55cfe635dd40 <col:16, col:25> 'void *'
        `-CStyleCastExpr 0x55cfe635dd18 <col:17, col:24> 'void *' <NullToPointer>
          `-IntegerLiteral 0x55cfe635dce0 <col:24> 'int' 0
const char *msg = lua_tolstring(L, (-1), ((void *)0));
  12: DeclRefExpr 0x55cfe635de58 <lua.c:68:9> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
msg
  13: ImplicitCastExpr 0x55cfe635df00 <lua.c:68:9> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55cfe635de58 <col:9> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
[B4.12] (ImplicitCastExpr, LValueToRValue, const char *)
  14: IntegerLiteral 0x55cfe635de80 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
  15: CStyleCastExpr 0x55cfe635deb8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x55cfe635de80 <col:24> 'int' 0
(void *)[B4.14] (CStyleCastExpr, NullToPointer, void *)
  16: ImplicitCastExpr 0x55cfe635df18 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
`-ParenExpr 0x55cfe635dee0 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x55cfe635deb8 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x55cfe635de80 <col:24> 'int' 0
([B4.15]) (ImplicitCastExpr, BitCast, const char *)
  17: BinaryOperator 0x55cfe635df30 <lua.c:68:9, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25> 'int' '=='
|-ImplicitCastExpr 0x55cfe635df00 <lua.c:68:9> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe635de58 <col:9> 'const char *' lvalue Var 0x55cfe635dbd0 'msg' 'const char *'
`-ImplicitCastExpr 0x55cfe635df18 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <BitCast>
  `-ParenExpr 0x55cfe635dee0 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x55cfe635deb8 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x55cfe635de80 <col:24> 'int' 0
[B4.13] == [B4.16]
   T: if [B4.17]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x55cfe635d980 <./lua.h:267:26> 'int (lua_State *, int)':'int (lua_State *, int)' Function 0x55cfe633a488 'lua_type' 'int (lua_State *, int)':'int (lua_State *, int)'
lua_type
   2: ImplicitCastExpr 0x55cfe635da88 <./lua.h:267:26> 'int (*)(lua_State *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55cfe635d980 <col:26> 'int (lua_State *, int)':'int (lua_State *, int)' Function 0x55cfe633a488 'lua_type' 'int (lua_State *, int)':'int (lua_State *, int)'
[B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, int))
   3: DeclRefExpr 0x55cfe635d9a8 <lua.c:66:28> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
L
   4: ImplicitCastExpr 0x55cfe635dad8 <lua.c:66:28> 'lua_State *' <LValueToRValue>
`-DeclRefExpr 0x55cfe635d9a8 <col:28> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
[B5.3] (ImplicitCastExpr, LValueToRValue, lua_State *)
   5: IntegerLiteral 0x55cfe635d9d0 <lua.c:66:32> 'int' 1
1
   6: UnaryOperator 0x55cfe635d9f0 <lua.c:66:31, col:32> 'int' prefix '-'
`-IntegerLiteral 0x55cfe635d9d0 <col:32> 'int' 1
-[B5.5]
   7: CallExpr 0x55cfe635daa0 <./lua.h:267:26, col:41> 'int'
|-ImplicitCastExpr 0x55cfe635da88 <col:26> 'int (*)(lua_State *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55cfe635d980 <col:26> 'int (lua_State *, int)':'int (lua_State *, int)' Function 0x55cfe633a488 'lua_type' 'int (lua_State *, int)':'int (lua_State *, int)'
|-ImplicitCastExpr 0x55cfe635dad8 <lua.c:66:28> 'lua_State *' <LValueToRValue>
| `-DeclRefExpr 0x55cfe635d9a8 <col:28> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
`-ParenExpr 0x55cfe635da10 <./lua.h:267:38, col:40> 'int'
  `-UnaryOperator 0x55cfe635d9f0 <lua.c:66:31, col:32> 'int' prefix '-'
    `-IntegerLiteral 0x55cfe635d9d0 <col:32> 'int' 1
[B5.2]([B5.4], ([B5.6]))
   8: IntegerLiteral 0x55cfe635daf0 <./lua.h:74:19> 'int' 0
0
   9: BinaryOperator 0x55cfe635db10 <./lua.h:267:26, line:74:19> 'int' '=='
|-CallExpr 0x55cfe635daa0 <line:267:26, col:41> 'int'
| |-ImplicitCastExpr 0x55cfe635da88 <col:26> 'int (*)(lua_State *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55cfe635d980 <col:26> 'int (lua_State *, int)':'int (lua_State *, int)' Function 0x55cfe633a488 'lua_type' 'int (lua_State *, int)':'int (lua_State *, int)'
| |-ImplicitCastExpr 0x55cfe635dad8 <lua.c:66:28> 'lua_State *' <LValueToRValue>
| | `-DeclRefExpr 0x55cfe635d9a8 <col:28> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
| `-ParenExpr 0x55cfe635da10 <./lua.h:267:38, col:40> 'int'
|   `-UnaryOperator 0x55cfe635d9f0 <lua.c:66:31, col:32> 'int' prefix '-'
|     `-IntegerLiteral 0x55cfe635d9d0 <col:32> 'int' 1
`-IntegerLiteral 0x55cfe635daf0 <./lua.h:74:19> 'int' 0
[B5.7] == [B5.8]
  10: UnaryOperator 0x55cfe635db58 <lua.c:66:17, ./lua.h:267:54> 'int' prefix '!'
`-ParenExpr 0x55cfe635db38 <col:25, col:54> 'int'
  `-BinaryOperator 0x55cfe635db10 <col:26, line:74:19> 'int' '=='
    |-CallExpr 0x55cfe635daa0 <line:267:26, col:41> 'int'
    | |-ImplicitCastExpr 0x55cfe635da88 <col:26> 'int (*)(lua_State *, int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55cfe635d980 <col:26> 'int (lua_State *, int)':'int (lua_State *, int)' Function 0x55cfe633a488 'lua_type' 'int (lua_State *, int)':'int (lua_State *, int)'
    | |-ImplicitCastExpr 0x55cfe635dad8 <lua.c:66:28> 'lua_State *' <LValueToRValue>
    | | `-DeclRefExpr 0x55cfe635d9a8 <col:28> 'lua_State *' lvalue ParmVar 0x55cfe635d798 'L' 'lua_State *'
    | `-ParenExpr 0x55cfe635da10 <./lua.h:267:38, col:40> 'int'
    |   `-UnaryOperator 0x55cfe635d9f0 <lua.c:66:31, col:32> 'int' prefix '-'
    |     `-IntegerLiteral 0x55cfe635d9d0 <col:32> 'int' 1
    `-IntegerLiteral 0x55cfe635daf0 <./lua.h:74:19> 'int' 0
!([B5.9])
   T: if [B6.2] && [B5.10]
   Preds (1): B6
   Succs (2): B4 B1

 [B6]
   1: DeclRefExpr 0x55cfe635d958 <lua.c:66:7> 'int' lvalue ParmVar 0x55cfe635d810 'status' 'int'
status
   2: ImplicitCastExpr 0x55cfe635db78 <lua.c:66:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x55cfe635d958 <col:7> 'int' lvalue ParmVar 0x55cfe635d810 'status' 'int'
[B6.1] (ImplicitCastExpr, LValueToRValue, int)
   T: [B6.2] && ...
   Preds (1): B7
   Succs (2): B5 B1

 [B0 (EXIT)]
   Preds (1): B1
