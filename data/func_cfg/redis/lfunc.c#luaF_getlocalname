const char *luaF_getlocalname(const Proto *f, int local_number, int pc)
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: IntegerLiteral 0x558bbfdb9088 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:24> 'int' 0
0
   2: CStyleCastExpr 0x558bbfdb90c0 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:17, col:24> 'void *' <NullToPointer>
`-IntegerLiteral 0x558bbfdb9088 <col:24> 'int' 0
(void *)[B1.1] (CStyleCastExpr, NullToPointer, void *)
   3: ImplicitCastExpr 0x558bbfdb9108 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:16, col:25> 'const char *' <NullToPointer>
`-ParenExpr 0x558bbfdb90e8 <col:16, col:25> 'void *'
  `-CStyleCastExpr 0x558bbfdb90c0 <col:17, col:24> 'void *' <NullToPointer>
    `-IntegerLiteral 0x558bbfdb9088 <col:24> 'int' 0
([B1.2]) (ImplicitCastExpr, NullToPointer, const char *)
   4: ReturnStmt 0x558bbfdb9120 <lfunc.c:172:3, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/stddef.h:105:25>
`-ImplicitCastExpr 0x558bbfdb9108 <col:16, col:25> 'const char *' <NullToPointer>
  `-ParenExpr 0x558bbfdb90e8 <col:16, col:25> 'void *'
    `-CStyleCastExpr 0x558bbfdb90c0 <col:17, col:24> 'void *' <NullToPointer>
      `-IntegerLiteral 0x558bbfdb9088 <col:24> 'int' 0
return [B1.3];
   Preds (2): B6 B7
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558bbfdb8a68 <lfunc.c:165:64> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
i
   2: UnaryOperator 0x558bbfdb8a90 <lfunc.c:165:64, col:65> 'int' postfix '++'
`-DeclRefExpr 0x558bbfdb8a68 <col:64> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B2.1]++
   Preds (2): B4 B5
   Succs (1): B7

 [B3]
   1: DeclRefExpr 0x558bbfdb8d30 <lfunc.c:169:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
f
   2: ImplicitCastExpr 0x558bbfdb8d58 <lfunc.c:169:23> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B3.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x558bbfdb8d70 <lfunc.c:169:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
`-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B3.2]->locvars
   4: ImplicitCastExpr 0x558bbfdb8dd0 <lfunc.c:169:23, col:26> 'struct LocVar *' <LValueToRValue>
`-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
  `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B3.3] (ImplicitCastExpr, LValueToRValue, struct LocVar *)
   5: DeclRefExpr 0x558bbfdb8da8 <lfunc.c:169:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
i
   6: ImplicitCastExpr 0x558bbfdb8de8 <lfunc.c:169:34> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x558bbfdb8e00 <lfunc.c:169:23, col:35> 'struct LocVar':'struct LocVar' lvalue
|-ImplicitCastExpr 0x558bbfdb8dd0 <col:23, col:26> 'struct LocVar *' <LValueToRValue>
| `-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
|   `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
`-ImplicitCastExpr 0x558bbfdb8de8 <col:34> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B3.4][[B3.6]]
   8: MemberExpr 0x558bbfdb8e28 <lfunc.c:169:23, col:37> 'TString *' lvalue .varname 0x558bbfd7ef90
`-ArraySubscriptExpr 0x558bbfdb8e00 <col:23, col:35> 'struct LocVar':'struct LocVar' lvalue
  |-ImplicitCastExpr 0x558bbfdb8dd0 <col:23, col:26> 'struct LocVar *' <LValueToRValue>
  | `-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
  |   `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
  `-ImplicitCastExpr 0x558bbfdb8de8 <col:34> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B3.7].varname
   9: ImplicitCastExpr 0x558bbfdb8ea0 <./lobject.h:210:39, col:42> 'TString *' <LValueToRValue>
`-ParenExpr 0x558bbfdb8e60 <col:39, col:42> 'TString *' lvalue
  `-MemberExpr 0x558bbfdb8e28 <lfunc.c:169:23, col:37> 'TString *' lvalue .varname 0x558bbfd7ef90
    `-ArraySubscriptExpr 0x558bbfdb8e00 <col:23, col:35> 'struct LocVar':'struct LocVar' lvalue
      |-ImplicitCastExpr 0x558bbfdb8dd0 <col:23, col:26> 'struct LocVar *' <LValueToRValue>
      | `-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
      |   `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
      `-ImplicitCastExpr 0x558bbfdb8de8 <col:34> 'int' <LValueToRValue>
        `-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
([B3.8]) (ImplicitCastExpr, LValueToRValue, TString *)
  10: IntegerLiteral 0x558bbfdb8e80 <./lobject.h:210:46> 'int' 1
1
  11: BinaryOperator 0x558bbfdb8eb8 <./lobject.h:210:39, col:46> 'TString *' '+'
|-ImplicitCastExpr 0x558bbfdb8ea0 <col:39, col:42> 'TString *' <LValueToRValue>
| `-ParenExpr 0x558bbfdb8e60 <col:39, col:42> 'TString *' lvalue
|   `-MemberExpr 0x558bbfdb8e28 <lfunc.c:169:23, col:37> 'TString *' lvalue .varname 0x558bbfd7ef90
|     `-ArraySubscriptExpr 0x558bbfdb8e00 <col:23, col:35> 'struct LocVar':'struct LocVar' lvalue
|       |-ImplicitCastExpr 0x558bbfdb8dd0 <col:23, col:26> 'struct LocVar *' <LValueToRValue>
|       | `-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
|       |   `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
|       |     `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
|       `-ImplicitCastExpr 0x558bbfdb8de8 <col:34> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
`-IntegerLiteral 0x558bbfdb8e80 <./lobject.h:210:46> 'int' 1
[B3.9] + [B3.10]
  12: CStyleCastExpr 0x558bbfdb8f48 <./llimits.h:75:23, col:30> 'const char *' <BitCast>
`-ParenExpr 0x558bbfdb8f28 <col:26, col:30> 'TString *'
  `-BinaryOperator 0x558bbfdb8eb8 <./lobject.h:210:39, col:46> 'TString *' '+'
    |-ImplicitCastExpr 0x558bbfdb8ea0 <col:39, col:42> 'TString *' <LValueToRValue>
    | `-ParenExpr 0x558bbfdb8e60 <col:39, col:42> 'TString *' lvalue
    |   `-MemberExpr 0x558bbfdb8e28 <lfunc.c:169:23, col:37> 'TString *' lvalue .varname 0x558bbfd7ef90
    |     `-ArraySubscriptExpr 0x558bbfdb8e00 <col:23, col:35> 'struct LocVar':'struct LocVar' lvalue
    |       |-ImplicitCastExpr 0x558bbfdb8dd0 <col:23, col:26> 'struct LocVar *' <LValueToRValue>
    |       | `-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
    |       |   `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
    |       `-ImplicitCastExpr 0x558bbfdb8de8 <col:34> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
    `-IntegerLiteral 0x558bbfdb8e80 <./lobject.h:210:46> 'int' 1
(const char *)([B3.11]) (CStyleCastExpr, BitCast, const char *)
  13: ReturnStmt 0x558bbfdb8f90 <lfunc.c:169:9, ./llimits.h:75:31>
`-ParenExpr 0x558bbfdb8f70 <col:22, col:31> 'const char *'
  `-CStyleCastExpr 0x558bbfdb8f48 <col:23, col:30> 'const char *' <BitCast>
    `-ParenExpr 0x558bbfdb8f28 <col:26, col:30> 'TString *'
      `-BinaryOperator 0x558bbfdb8eb8 <./lobject.h:210:39, col:46> 'TString *' '+'
        |-ImplicitCastExpr 0x558bbfdb8ea0 <col:39, col:42> 'TString *' <LValueToRValue>
        | `-ParenExpr 0x558bbfdb8e60 <col:39, col:42> 'TString *' lvalue
        |   `-MemberExpr 0x558bbfdb8e28 <lfunc.c:169:23, col:37> 'TString *' lvalue .varname 0x558bbfd7ef90
        |     `-ArraySubscriptExpr 0x558bbfdb8e00 <col:23, col:35> 'struct LocVar':'struct LocVar' lvalue
        |       |-ImplicitCastExpr 0x558bbfdb8dd0 <col:23, col:26> 'struct LocVar *' <LValueToRValue>
        |       | `-MemberExpr 0x558bbfdb8d70 <col:23, col:26> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
        |       |   `-ImplicitCastExpr 0x558bbfdb8d58 <col:23> 'const Proto *' <LValueToRValue>
        |       |     `-DeclRefExpr 0x558bbfdb8d30 <col:23> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
        |       `-ImplicitCastExpr 0x558bbfdb8de8 <col:34> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x558bbfdb8da8 <col:34> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
        `-IntegerLiteral 0x558bbfdb8e80 <./lobject.h:210:46> 'int' 1
return ([B3.12]);
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x558bbfdb8c60 <lfunc.c:167:7> 'int' lvalue ParmVar 0x558bbfdb8480 'local_number' 'int'
local_number
   2: UnaryOperator 0x558bbfdb8c88 <lfunc.c:167:7, col:19> 'int' postfix '--'
`-DeclRefExpr 0x558bbfdb8c60 <col:7> 'int' lvalue ParmVar 0x558bbfdb8480 'local_number' 'int'
[B4.1]--
   3: DeclRefExpr 0x558bbfdb8ca8 <lfunc.c:168:11> 'int' lvalue ParmVar 0x558bbfdb8480 'local_number' 'int'
local_number
   4: ImplicitCastExpr 0x558bbfdb8cf0 <lfunc.c:168:11> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8ca8 <col:11> 'int' lvalue ParmVar 0x558bbfdb8480 'local_number' 'int'
[B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x558bbfdb8cd0 <lfunc.c:168:27> 'int' 0
0
   6: BinaryOperator 0x558bbfdb8d08 <lfunc.c:168:11, col:27> 'int' '=='
|-ImplicitCastExpr 0x558bbfdb8cf0 <col:11> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558bbfdb8ca8 <col:11> 'int' lvalue ParmVar 0x558bbfdb8480 'local_number' 'int'
`-IntegerLiteral 0x558bbfdb8cd0 <col:27> 'int' 0
[B4.4] == [B4.5]
   T: if [B4.6]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: DeclRefExpr 0x558bbfdb8ab0 <lfunc.c:166:9> 'int' lvalue ParmVar 0x558bbfdb84f8 'pc' 'int'
pc
   2: ImplicitCastExpr 0x558bbfdb8c08 <lfunc.c:166:9> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8ab0 <col:9> 'int' lvalue ParmVar 0x558bbfdb84f8 'pc' 'int'
[B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x558bbfdb8ad8 <lfunc.c:166:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
f
   4: ImplicitCastExpr 0x558bbfdb8b00 <lfunc.c:166:14> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B5.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x558bbfdb8b18 <lfunc.c:166:14, col:17> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
`-ImplicitCastExpr 0x558bbfdb8b00 <col:14> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B5.4]->locvars
   6: ImplicitCastExpr 0x558bbfdb8b78 <lfunc.c:166:14, col:17> 'struct LocVar *' <LValueToRValue>
`-MemberExpr 0x558bbfdb8b18 <col:14, col:17> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
  `-ImplicitCastExpr 0x558bbfdb8b00 <col:14> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B5.5] (ImplicitCastExpr, LValueToRValue, struct LocVar *)
   7: DeclRefExpr 0x558bbfdb8b50 <lfunc.c:166:25> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
i
   8: ImplicitCastExpr 0x558bbfdb8b90 <lfunc.c:166:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8b50 <col:25> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B5.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ArraySubscriptExpr 0x558bbfdb8ba8 <lfunc.c:166:14, col:26> 'struct LocVar':'struct LocVar' lvalue
|-ImplicitCastExpr 0x558bbfdb8b78 <col:14, col:17> 'struct LocVar *' <LValueToRValue>
| `-MemberExpr 0x558bbfdb8b18 <col:14, col:17> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
|   `-ImplicitCastExpr 0x558bbfdb8b00 <col:14> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
`-ImplicitCastExpr 0x558bbfdb8b90 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb8b50 <col:25> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B5.6][[B5.8]]
  10: MemberExpr 0x558bbfdb8bd0 <lfunc.c:166:14, col:28> 'int' lvalue .endpc 0x558bbfd7f050
`-ArraySubscriptExpr 0x558bbfdb8ba8 <col:14, col:26> 'struct LocVar':'struct LocVar' lvalue
  |-ImplicitCastExpr 0x558bbfdb8b78 <col:14, col:17> 'struct LocVar *' <LValueToRValue>
  | `-MemberExpr 0x558bbfdb8b18 <col:14, col:17> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
  |   `-ImplicitCastExpr 0x558bbfdb8b00 <col:14> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
  `-ImplicitCastExpr 0x558bbfdb8b90 <col:25> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb8b50 <col:25> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B5.9].endpc
  11: ImplicitCastExpr 0x558bbfdb8c20 <lfunc.c:166:14, col:28> 'int' <LValueToRValue>
`-MemberExpr 0x558bbfdb8bd0 <col:14, col:28> 'int' lvalue .endpc 0x558bbfd7f050
  `-ArraySubscriptExpr 0x558bbfdb8ba8 <col:14, col:26> 'struct LocVar':'struct LocVar' lvalue
    |-ImplicitCastExpr 0x558bbfdb8b78 <col:14, col:17> 'struct LocVar *' <LValueToRValue>
    | `-MemberExpr 0x558bbfdb8b18 <col:14, col:17> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
    |   `-ImplicitCastExpr 0x558bbfdb8b00 <col:14> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
    `-ImplicitCastExpr 0x558bbfdb8b90 <col:25> 'int' <LValueToRValue>
      `-DeclRefExpr 0x558bbfdb8b50 <col:25> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B5.10] (ImplicitCastExpr, LValueToRValue, int)
  12: BinaryOperator 0x558bbfdb8c38 <lfunc.c:166:9, col:28> 'int' '<'
|-ImplicitCastExpr 0x558bbfdb8c08 <col:9> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558bbfdb8ab0 <col:9> 'int' lvalue ParmVar 0x558bbfdb84f8 'pc' 'int'
`-ImplicitCastExpr 0x558bbfdb8c20 <col:14, col:28> 'int' <LValueToRValue>
  `-MemberExpr 0x558bbfdb8bd0 <col:14, col:28> 'int' lvalue .endpc 0x558bbfd7f050
    `-ArraySubscriptExpr 0x558bbfdb8ba8 <col:14, col:26> 'struct LocVar':'struct LocVar' lvalue
      |-ImplicitCastExpr 0x558bbfdb8b78 <col:14, col:17> 'struct LocVar *' <LValueToRValue>
      | `-MemberExpr 0x558bbfdb8b18 <col:14, col:17> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
      |   `-ImplicitCastExpr 0x558bbfdb8b00 <col:14> 'const Proto *' <LValueToRValue>
      |     `-DeclRefExpr 0x558bbfdb8ad8 <col:14> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
      `-ImplicitCastExpr 0x558bbfdb8b90 <col:25> 'int' <LValueToRValue>
        `-DeclRefExpr 0x558bbfdb8b50 <col:25> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B5.2] < [B5.11]
   T: if [B5.12]
   Preds (1): B6
   Succs (2): B4 B2

 [B6]
   1: DeclRefExpr 0x558bbfdb8890 <lfunc.c:165:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
f
   2: ImplicitCastExpr 0x558bbfdb88b8 <lfunc.c:165:35> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B6.1] (ImplicitCastExpr, LValueToRValue, const Proto *)
   3: MemberExpr 0x558bbfdb88d0 <lfunc.c:165:35, col:38> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
`-ImplicitCastExpr 0x558bbfdb88b8 <col:35> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B6.2]->locvars
   4: ImplicitCastExpr 0x558bbfdb8930 <lfunc.c:165:35, col:38> 'struct LocVar *' <LValueToRValue>
`-MemberExpr 0x558bbfdb88d0 <col:35, col:38> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
  `-ImplicitCastExpr 0x558bbfdb88b8 <col:35> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B6.3] (ImplicitCastExpr, LValueToRValue, struct LocVar *)
   5: DeclRefExpr 0x558bbfdb8908 <lfunc.c:165:46> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
i
   6: ImplicitCastExpr 0x558bbfdb8948 <lfunc.c:165:46> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8908 <col:46> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B6.5] (ImplicitCastExpr, LValueToRValue, int)
   7: ArraySubscriptExpr 0x558bbfdb8960 <lfunc.c:165:35, col:47> 'struct LocVar':'struct LocVar' lvalue
|-ImplicitCastExpr 0x558bbfdb8930 <col:35, col:38> 'struct LocVar *' <LValueToRValue>
| `-MemberExpr 0x558bbfdb88d0 <col:35, col:38> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
|   `-ImplicitCastExpr 0x558bbfdb88b8 <col:35> 'const Proto *' <LValueToRValue>
|     `-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
`-ImplicitCastExpr 0x558bbfdb8948 <col:46> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb8908 <col:46> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B6.4][[B6.6]]
   8: MemberExpr 0x558bbfdb8988 <lfunc.c:165:35, col:49> 'int' lvalue .startpc 0x558bbfd7eff0
`-ArraySubscriptExpr 0x558bbfdb8960 <col:35, col:47> 'struct LocVar':'struct LocVar' lvalue
  |-ImplicitCastExpr 0x558bbfdb8930 <col:35, col:38> 'struct LocVar *' <LValueToRValue>
  | `-MemberExpr 0x558bbfdb88d0 <col:35, col:38> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
  |   `-ImplicitCastExpr 0x558bbfdb88b8 <col:35> 'const Proto *' <LValueToRValue>
  |     `-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
  `-ImplicitCastExpr 0x558bbfdb8948 <col:46> 'int' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb8908 <col:46> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B6.7].startpc
   9: ImplicitCastExpr 0x558bbfdb89e8 <lfunc.c:165:35, col:49> 'int' <LValueToRValue>
`-MemberExpr 0x558bbfdb8988 <col:35, col:49> 'int' lvalue .startpc 0x558bbfd7eff0
  `-ArraySubscriptExpr 0x558bbfdb8960 <col:35, col:47> 'struct LocVar':'struct LocVar' lvalue
    |-ImplicitCastExpr 0x558bbfdb8930 <col:35, col:38> 'struct LocVar *' <LValueToRValue>
    | `-MemberExpr 0x558bbfdb88d0 <col:35, col:38> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
    |   `-ImplicitCastExpr 0x558bbfdb88b8 <col:35> 'const Proto *' <LValueToRValue>
    |     `-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
    `-ImplicitCastExpr 0x558bbfdb8948 <col:46> 'int' <LValueToRValue>
      `-DeclRefExpr 0x558bbfdb8908 <col:46> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B6.8] (ImplicitCastExpr, LValueToRValue, int)
  10: DeclRefExpr 0x558bbfdb89c0 <lfunc.c:165:60> 'int' lvalue ParmVar 0x558bbfdb84f8 'pc' 'int'
pc
  11: ImplicitCastExpr 0x558bbfdb8a00 <lfunc.c:165:60> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb89c0 <col:60> 'int' lvalue ParmVar 0x558bbfdb84f8 'pc' 'int'
[B6.10] (ImplicitCastExpr, LValueToRValue, int)
  12: BinaryOperator 0x558bbfdb8a18 <lfunc.c:165:35, col:60> 'int' '<='
|-ImplicitCastExpr 0x558bbfdb89e8 <col:35, col:49> 'int' <LValueToRValue>
| `-MemberExpr 0x558bbfdb8988 <col:35, col:49> 'int' lvalue .startpc 0x558bbfd7eff0
|   `-ArraySubscriptExpr 0x558bbfdb8960 <col:35, col:47> 'struct LocVar':'struct LocVar' lvalue
|     |-ImplicitCastExpr 0x558bbfdb8930 <col:35, col:38> 'struct LocVar *' <LValueToRValue>
|     | `-MemberExpr 0x558bbfdb88d0 <col:35, col:38> 'struct LocVar *const' lvalue ->locvars 0x558bbfd7e610
|     |   `-ImplicitCastExpr 0x558bbfdb88b8 <col:35> 'const Proto *' <LValueToRValue>
|     |     `-DeclRefExpr 0x558bbfdb8890 <col:35> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
|     `-ImplicitCastExpr 0x558bbfdb8948 <col:46> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558bbfdb8908 <col:46> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
`-ImplicitCastExpr 0x558bbfdb8a00 <col:60> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb89c0 <col:60> 'int' lvalue ParmVar 0x558bbfdb84f8 'pc' 'int'
[B6.9] <= [B6.11]
   T: for (...; [B7.7] && [B6.12]; ...)
   Preds (1): B7
   Succs (2): B5 B1

 [B7]
   1: DeclRefExpr 0x558bbfdb8798 <lfunc.c:165:15> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
i
   2: ImplicitCastExpr 0x558bbfdb8838 <lfunc.c:165:15> 'int' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb8798 <col:15> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
[B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: DeclRefExpr 0x558bbfdb87c0 <lfunc.c:165:17> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
f
   4: ImplicitCastExpr 0x558bbfdb87e8 <lfunc.c:165:17> 'const Proto *' <LValueToRValue>
`-DeclRefExpr 0x558bbfdb87c0 <col:17> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B7.3] (ImplicitCastExpr, LValueToRValue, const Proto *)
   5: MemberExpr 0x558bbfdb8800 <lfunc.c:165:17, col:20> 'const int' lvalue ->sizelocvars 0x558bbfd7eba8
`-ImplicitCastExpr 0x558bbfdb87e8 <col:17> 'const Proto *' <LValueToRValue>
  `-DeclRefExpr 0x558bbfdb87c0 <col:17> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B7.4]->sizelocvars
   6: ImplicitCastExpr 0x558bbfdb8850 <lfunc.c:165:17, col:20> 'int' <LValueToRValue>
`-MemberExpr 0x558bbfdb8800 <col:17, col:20> 'const int' lvalue ->sizelocvars 0x558bbfd7eba8
  `-ImplicitCastExpr 0x558bbfdb87e8 <col:17> 'const Proto *' <LValueToRValue>
    `-DeclRefExpr 0x558bbfdb87c0 <col:17> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x558bbfdb8868 <lfunc.c:165:15, col:20> 'int' '<'
|-ImplicitCastExpr 0x558bbfdb8838 <col:15> 'int' <LValueToRValue>
| `-DeclRefExpr 0x558bbfdb8798 <col:15> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
`-ImplicitCastExpr 0x558bbfdb8850 <col:17, col:20> 'int' <LValueToRValue>
  `-MemberExpr 0x558bbfdb8800 <col:17, col:20> 'const int' lvalue ->sizelocvars 0x558bbfd7eba8
    `-ImplicitCastExpr 0x558bbfdb87e8 <col:17> 'const Proto *' <LValueToRValue>
      `-DeclRefExpr 0x558bbfdb87c0 <col:17> 'const Proto *' lvalue ParmVar 0x558bbfdb83e8 'f' 'const Proto *'
[B7.2] < [B7.6]
   T: [B7.7] && ...
   Preds (2): B2 B8
   Succs (2): B6 B1

 [B8]
   1: DeclStmt 0x558bbfdb8710 <lfunc.c:164:3, col:8>col:7
`-VarDecl 0x558bbfdb86b0 <col:3, col:7> col:7 used i 'int'
int i;
   2: IntegerLiteral 0x558bbfdb8750 <lfunc.c:165:12> 'int' 0
0
   3: DeclRefExpr 0x558bbfdb8728 <lfunc.c:165:8> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
i
   4: BinaryOperator 0x558bbfdb8770 <lfunc.c:165:8, col:12> 'int' '='
|-DeclRefExpr 0x558bbfdb8728 <col:8> 'int' lvalue Var 0x558bbfdb86b0 'i' 'int'
`-IntegerLiteral 0x558bbfdb8750 <col:12> 'int' 0
[B8.3] = [B8.2]
   Preds (1): B9
   Succs (1): B7

 [B0 (EXIT)]
   Preds (2): B1 B3
