static void whilestat(LexState *ls, int line)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x558fa8f30868 <lparser.c:993:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f30890 <lparser.c:993:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30868 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f308a8 <lparser.c:993:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f30890 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30868 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.2]->fs
   4: ImplicitCastExpr 0x558fa8f308e0 <lparser.c:993:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f308a8 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f30890 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f30868 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f308f8 <lparser.c:993:3, col:25>col:14
`-VarDecl 0x558fa8f30808 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f308e0 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f308a8 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f30890 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f30868 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclStmt 0x558fa8f30988 <lparser.c:994:3, col:16>col:7
`-VarDecl 0x558fa8f30928 <col:3, col:7> col:7 used whileinit 'int'
int whileinit;
   7: DeclStmt 0x558fa8f30a18 <lparser.c:995:3, col:15>col:7
`-VarDecl 0x558fa8f309b8 <col:3, col:7> col:7 used condexit 'int'
int condexit;
   8: DeclStmt 0x558fa8f30aa0 <lparser.c:996:3, col:14>col:12
`-VarDecl 0x558fa8f30a40 <col:3, col:12> col:12 used bl 'BlockCnt':'struct BlockCnt'
BlockCnt bl;
   9: DeclRefExpr 0x558fa8f30ab8 <lparser.c:997:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
luaX_next
  10: ImplicitCastExpr 0x558fa8f30b08 <lparser.c:997:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30ab8 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
[B1.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  11: DeclRefExpr 0x558fa8f30ae0 <lparser.c:997:13> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x558fa8f30b50 <lparser.c:997:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30ae0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: CallExpr 0x558fa8f30b20 <lparser.c:997:3, col:15> 'void'
|-ImplicitCastExpr 0x558fa8f30b08 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30ab8 <col:3> 'void (LexState *)' Function 0x558fa8ea1430 'luaX_next' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f30b50 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30ae0 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.10]([B1.12])
  14: DeclRefExpr 0x558fa8f30b90 <lparser.c:998:15> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
luaK_getlabel
  15: ImplicitCastExpr 0x558fa8f30be0 <lparser.c:998:15> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30b90 <col:15> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
[B1.14] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
  16: DeclRefExpr 0x558fa8f30bb8 <lparser.c:998:29> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
fs
  17: ImplicitCastExpr 0x558fa8f30c28 <lparser.c:998:29> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30bb8 <col:29> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.16] (ImplicitCastExpr, LValueToRValue, FuncState *)
  18: CallExpr 0x558fa8f30bf8 <lparser.c:998:15, col:31> 'int'
|-ImplicitCastExpr 0x558fa8f30be0 <col:15> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30b90 <col:15> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f30c28 <col:29> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30bb8 <col:29> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.15]([B1.17])
  19: DeclRefExpr 0x558fa8f30b68 <lparser.c:998:3> 'int' lvalue Var 0x558fa8f30928 'whileinit' 'int'
whileinit
  20: BinaryOperator 0x558fa8f30c40 <lparser.c:998:3, col:31> 'int' '='
|-DeclRefExpr 0x558fa8f30b68 <col:3> 'int' lvalue Var 0x558fa8f30928 'whileinit' 'int'
`-CallExpr 0x558fa8f30bf8 <col:15, col:31> 'int'
  |-ImplicitCastExpr 0x558fa8f30be0 <col:15> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f30b90 <col:15> 'int (FuncState *)' Function 0x558fa8ebe300 'luaK_getlabel' 'int (FuncState *)'
  `-ImplicitCastExpr 0x558fa8f30c28 <col:29> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f30bb8 <col:29> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.19] = [B1.18]
  21: DeclRefExpr 0x558fa8f30c90 <lparser.c:999:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
cond
  22: ImplicitCastExpr 0x558fa8f30d38 <lparser.c:999:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30c90 <col:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
[B1.21] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(LexState *))
  23: DeclRefExpr 0x558fa8f30cb8 <lparser.c:999:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
ls
  24: ImplicitCastExpr 0x558fa8f30d80 <lparser.c:999:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30cb8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.23] (ImplicitCastExpr, LValueToRValue, LexState *)
  25: CallExpr 0x558fa8f30d50 <lparser.c:999:14, col:21> 'int'
|-ImplicitCastExpr 0x558fa8f30d38 <col:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30c90 <col:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
`-ImplicitCastExpr 0x558fa8f30d80 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30cb8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.22]([B1.24])
  26: DeclRefExpr 0x558fa8f30c68 <lparser.c:999:3> 'int' lvalue Var 0x558fa8f309b8 'condexit' 'int'
condexit
  27: BinaryOperator 0x558fa8f30d98 <lparser.c:999:3, col:21> 'int' '='
|-DeclRefExpr 0x558fa8f30c68 <col:3> 'int' lvalue Var 0x558fa8f309b8 'condexit' 'int'
`-CallExpr 0x558fa8f30d50 <col:14, col:21> 'int'
  |-ImplicitCastExpr 0x558fa8f30d38 <col:14> 'int (*)(LexState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f30c90 <col:14> 'int (LexState *)' Function 0x558fa8f2f148 'cond' 'int (LexState *)'
  `-ImplicitCastExpr 0x558fa8f30d80 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f30cb8 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.26] = [B1.25]
  28: DeclRefExpr 0x558fa8f30dc0 <lparser.c:1000:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
enterblock
  29: ImplicitCastExpr 0x558fa8f30e78 <lparser.c:1000:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30dc0 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
[B1.28] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, BlockCnt *, lu_byte))
  30: DeclRefExpr 0x558fa8f30de8 <lparser.c:1000:14> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
fs
  31: ImplicitCastExpr 0x558fa8f30ed0 <lparser.c:1000:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30de8 <col:14> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.30] (ImplicitCastExpr, LValueToRValue, FuncState *)
  32: DeclRefExpr 0x558fa8f30e10 <lparser.c:1000:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f30a40 'bl' 'BlockCnt':'struct BlockCnt'
bl
  33: UnaryOperator 0x558fa8f30e38 <lparser.c:1000:18, col:19> 'BlockCnt *' prefix '&'
`-DeclRefExpr 0x558fa8f30e10 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f30a40 'bl' 'BlockCnt':'struct BlockCnt'
&[B1.32]
  34: IntegerLiteral 0x558fa8f30e58 <lparser.c:1000:23> 'int' 1
1
  35: ImplicitCastExpr 0x558fa8f30ee8 <lparser.c:1000:23> 'lu_byte':'unsigned char' <IntegralCast>
`-IntegerLiteral 0x558fa8f30e58 <col:23> 'int' 1
[B1.34] (ImplicitCastExpr, IntegralCast, lu_byte)
  36: CallExpr 0x558fa8f30e90 <lparser.c:1000:3, col:24> 'void'
|-ImplicitCastExpr 0x558fa8f30e78 <col:3> 'void (*)(FuncState *, BlockCnt *, lu_byte)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30dc0 <col:3> 'void (FuncState *, BlockCnt *, lu_byte)' Function 0x558fa8f00400 'enterblock' 'void (FuncState *, BlockCnt *, lu_byte)'
|-ImplicitCastExpr 0x558fa8f30ed0 <col:14> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f30de8 <col:14> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f30e38 <col:18, col:19> 'BlockCnt *' prefix '&'
| `-DeclRefExpr 0x558fa8f30e10 <col:19> 'BlockCnt':'struct BlockCnt' lvalue Var 0x558fa8f30a40 'bl' 'BlockCnt':'struct BlockCnt'
`-ImplicitCastExpr 0x558fa8f30ee8 <col:23> 'lu_byte':'unsigned char' <IntegralCast>
  `-IntegerLiteral 0x558fa8f30e58 <col:23> 'int' 1
[B1.29]([B1.31], [B1.33], [B1.35])
  37: DeclRefExpr 0x558fa8f30f00 <lparser.c:1001:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
checknext
  38: ImplicitCastExpr 0x558fa8f30f78 <lparser.c:1001:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30f00 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
[B1.37] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
  39: DeclRefExpr 0x558fa8f30f28 <lparser.c:1001:13> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
ls
  40: ImplicitCastExpr 0x558fa8f30fc8 <lparser.c:1001:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30f28 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.39] (ImplicitCastExpr, LValueToRValue, LexState *)
  41: DeclRefExpr 0x558fa8f30f50 <lparser.c:1001:17> 'int' EnumConstant 0x558fa8e9e020 'TK_DO' 'int'
TK_DO
  42: CallExpr 0x558fa8f30f90 <lparser.c:1001:3, col:22> 'void'
|-ImplicitCastExpr 0x558fa8f30f78 <col:3> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30f00 <col:3> 'void (LexState *, int)' Function 0x558fa8eedcb0 'checknext' 'void (LexState *, int)'
|-ImplicitCastExpr 0x558fa8f30fc8 <col:13> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f30f28 <col:13> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
`-DeclRefExpr 0x558fa8f30f50 <col:17> 'int' EnumConstant 0x558fa8e9e020 'TK_DO' 'int'
[B1.38]([B1.40], [B1.41])
  43: DeclRefExpr 0x558fa8f30fe0 <lparser.c:1002:3> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
block
  44: ImplicitCastExpr 0x558fa8f31030 <lparser.c:1002:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30fe0 <col:3> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
[B1.43] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
  45: DeclRefExpr 0x558fa8f31008 <lparser.c:1002:9> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
ls
  46: ImplicitCastExpr 0x558fa8f31078 <lparser.c:1002:9> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31008 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.45] (ImplicitCastExpr, LValueToRValue, LexState *)
  47: CallExpr 0x558fa8f31048 <lparser.c:1002:3, col:11> 'void'
|-ImplicitCastExpr 0x558fa8f31030 <col:3> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30fe0 <col:3> 'void (LexState *)' Function 0x558fa8f2a638 'block' 'void (LexState *)'
`-ImplicitCastExpr 0x558fa8f31078 <col:9> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31008 <col:9> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.44]([B1.46])
  48: DeclRefExpr 0x558fa8f31090 <lparser.c:1003:3> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
luaK_patchlist
  49: ImplicitCastExpr 0x558fa8f311b8 <lparser.c:1003:3> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31090 <col:3> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
[B1.48] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int, int))
  50: DeclRefExpr 0x558fa8f310b8 <lparser.c:1003:18> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
fs
  51: ImplicitCastExpr 0x558fa8f31210 <lparser.c:1003:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f310b8 <col:18> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.50] (ImplicitCastExpr, LValueToRValue, FuncState *)
  52: DeclRefExpr 0x558fa8f310e0 <lparser.c:1003:22> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
  53: ImplicitCastExpr 0x558fa8f31130 <lparser.c:1003:22> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f310e0 <col:22> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B1.52] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
  54: DeclRefExpr 0x558fa8f31108 <lparser.c:1003:32> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
fs
  55: ImplicitCastExpr 0x558fa8f31178 <lparser.c:1003:32> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31108 <col:32> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.54] (ImplicitCastExpr, LValueToRValue, FuncState *)
  56: CallExpr 0x558fa8f31148 <lparser.c:1003:22, col:34> 'int'
|-ImplicitCastExpr 0x558fa8f31130 <col:22> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f310e0 <col:22> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f31178 <col:32> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31108 <col:32> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.53]([B1.55])
  57: DeclRefExpr 0x558fa8f31190 <lparser.c:1003:37> 'int' lvalue Var 0x558fa8f30928 'whileinit' 'int'
whileinit
  58: ImplicitCastExpr 0x558fa8f31228 <lparser.c:1003:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31190 <col:37> 'int' lvalue Var 0x558fa8f30928 'whileinit' 'int'
[B1.57] (ImplicitCastExpr, LValueToRValue, int)
  59: CallExpr 0x558fa8f311d0 <lparser.c:1003:3, col:46> 'void'
|-ImplicitCastExpr 0x558fa8f311b8 <col:3> 'void (*)(FuncState *, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31090 <col:3> 'void (FuncState *, int, int)' Function 0x558fa8ebdb48 'luaK_patchlist' 'void (FuncState *, int, int)'
|-ImplicitCastExpr 0x558fa8f31210 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f310b8 <col:18> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
|-CallExpr 0x558fa8f31148 <col:22, col:34> 'int'
| |-ImplicitCastExpr 0x558fa8f31130 <col:22> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x558fa8f310e0 <col:22> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
| `-ImplicitCastExpr 0x558fa8f31178 <col:32> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x558fa8f31108 <col:32> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f31228 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31190 <col:37> 'int' lvalue Var 0x558fa8f30928 'whileinit' 'int'
[B1.49]([B1.51], [B1.56], [B1.58])
  60: DeclRefExpr 0x558fa8f31240 <lparser.c:1004:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
check_match
  61: ImplicitCastExpr 0x558fa8f31308 <lparser.c:1004:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31240 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
[B1.60] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int, int, int))
  62: DeclRefExpr 0x558fa8f31268 <lparser.c:1004:15> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
ls
  63: ImplicitCastExpr 0x558fa8f31368 <lparser.c:1004:15> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31268 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
[B1.62] (ImplicitCastExpr, LValueToRValue, LexState *)
  64: DeclRefExpr 0x558fa8f31290 <lparser.c:1004:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
TK_END
  65: DeclRefExpr 0x558fa8f312b8 <lparser.c:1004:27> 'int' EnumConstant 0x558fa8e9e530 'TK_WHILE' 'int'
TK_WHILE
  66: DeclRefExpr 0x558fa8f312e0 <lparser.c:1004:37> 'int' lvalue ParmVar 0x558fa8f306b8 'line' 'int'
line
  67: ImplicitCastExpr 0x558fa8f31380 <lparser.c:1004:37> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f312e0 <col:37> 'int' lvalue ParmVar 0x558fa8f306b8 'line' 'int'
[B1.66] (ImplicitCastExpr, LValueToRValue, int)
  68: CallExpr 0x558fa8f31320 <lparser.c:1004:3, col:41> 'void'
|-ImplicitCastExpr 0x558fa8f31308 <col:3> 'void (*)(LexState *, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31240 <col:3> 'void (LexState *, int, int, int)' Function 0x558fa8eee1e0 'check_match' 'void (LexState *, int, int, int)'
|-ImplicitCastExpr 0x558fa8f31368 <col:15> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f31268 <col:15> 'LexState *' lvalue ParmVar 0x558fa8f30640 'ls' 'LexState *'
|-DeclRefExpr 0x558fa8f31290 <col:19> 'int' EnumConstant 0x558fa8e9e0f8 'TK_END' 'int'
|-DeclRefExpr 0x558fa8f312b8 <col:27> 'int' EnumConstant 0x558fa8e9e530 'TK_WHILE' 'int'
`-ImplicitCastExpr 0x558fa8f31380 <col:37> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f312e0 <col:37> 'int' lvalue ParmVar 0x558fa8f306b8 'line' 'int'
[B1.61]([B1.63], [B1.64], [B1.65], [B1.67])
  69: DeclRefExpr 0x558fa8f31398 <lparser.c:1005:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
leaveblock
  70: ImplicitCastExpr 0x558fa8f313e8 <lparser.c:1005:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31398 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
[B1.69] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *))
  71: DeclRefExpr 0x558fa8f313c0 <lparser.c:1005:14> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
fs
  72: ImplicitCastExpr 0x558fa8f31430 <lparser.c:1005:14> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f313c0 <col:14> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.71] (ImplicitCastExpr, LValueToRValue, FuncState *)
  73: CallExpr 0x558fa8f31400 <lparser.c:1005:3, col:16> 'void'
|-ImplicitCastExpr 0x558fa8f313e8 <col:3> 'void (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31398 <col:3> 'void (FuncState *)' Function 0x558fa8f00c80 'leaveblock' 'void (FuncState *)'
`-ImplicitCastExpr 0x558fa8f31430 <col:14> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f313c0 <col:14> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.70]([B1.72])
  74: DeclRefExpr 0x558fa8f31448 <lparser.c:1006:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
luaK_patchtohere
  75: ImplicitCastExpr 0x558fa8f314c0 <lparser.c:1006:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f31448 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
[B1.74] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int))
  76: DeclRefExpr 0x558fa8f31470 <lparser.c:1006:20> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
fs
  77: ImplicitCastExpr 0x558fa8f31510 <lparser.c:1006:20> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31470 <col:20> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
[B1.76] (ImplicitCastExpr, LValueToRValue, FuncState *)
  78: DeclRefExpr 0x558fa8f31498 <lparser.c:1006:24> 'int' lvalue Var 0x558fa8f309b8 'condexit' 'int'
condexit
  79: ImplicitCastExpr 0x558fa8f31528 <lparser.c:1006:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f31498 <col:24> 'int' lvalue Var 0x558fa8f309b8 'condexit' 'int'
[B1.78] (ImplicitCastExpr, LValueToRValue, int)
  80: CallExpr 0x558fa8f314d8 <lparser.c:1006:3, col:32> 'void'
|-ImplicitCastExpr 0x558fa8f314c0 <col:3> 'void (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f31448 <col:3> 'void (FuncState *, int)' Function 0x558fa8ebdd90 'luaK_patchtohere' 'void (FuncState *, int)'
|-ImplicitCastExpr 0x558fa8f31510 <col:20> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f31470 <col:20> 'FuncState *' lvalue Var 0x558fa8f30808 'fs' 'FuncState *'
`-ImplicitCastExpr 0x558fa8f31528 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f31498 <col:24> 'int' lvalue Var 0x558fa8f309b8 'condexit' 'int'
[B1.75]([B1.77], [B1.79])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1
