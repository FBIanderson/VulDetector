static void breakstat(LexState *ls)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: DeclRefExpr 0x558fa8f30328 <lparser.c:987:3> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
luaK_concat
   2: ImplicitCastExpr 0x558fa8f30578 <lparser.c:987:3> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30328 <col:3> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, int *, int))
   3: DeclRefExpr 0x558fa8f30350 <lparser.c:987:15> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f305d0 <lparser.c:987:15> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30350 <col:15> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f30378 <lparser.c:987:20> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   6: ImplicitCastExpr 0x558fa8f303a0 <lparser.c:987:20> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30378 <col:20> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B1.5] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   7: MemberExpr 0x558fa8f303b8 <lparser.c:987:20, col:24> 'int' lvalue ->breaklist 0x558fa8ee9d68
`-ImplicitCastExpr 0x558fa8f303a0 <col:20> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30378 <col:20> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B1.6]->breaklist
   8: UnaryOperator 0x558fa8f303f0 <lparser.c:987:19, col:24> 'int *' prefix '&'
`-MemberExpr 0x558fa8f303b8 <col:20, col:24> 'int' lvalue ->breaklist 0x558fa8ee9d68
  `-ImplicitCastExpr 0x558fa8f303a0 <col:20> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f30378 <col:20> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
&[B1.7]
   9: DeclRefExpr 0x558fa8f30410 <lparser.c:987:35> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
luaK_jump
  10: ImplicitCastExpr 0x558fa8f304b8 <lparser.c:987:35> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f30410 <col:35> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
[B1.9] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
  11: DeclRefExpr 0x558fa8f30438 <lparser.c:987:45> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
fs
  12: ImplicitCastExpr 0x558fa8f30500 <lparser.c:987:45> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30438 <col:45> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, FuncState *)
  13: CallExpr 0x558fa8f304d0 <lparser.c:987:35, col:47> 'int'
|-ImplicitCastExpr 0x558fa8f304b8 <col:35> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30410 <col:35> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
`-ImplicitCastExpr 0x558fa8f30500 <col:45> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30438 <col:45> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B1.10]([B1.12])
  14: CallExpr 0x558fa8f30590 <lparser.c:987:3, col:48> 'void'
|-ImplicitCastExpr 0x558fa8f30578 <col:3> 'void (*)(FuncState *, int *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f30328 <col:3> 'void (FuncState *, int *, int)' Function 0x558fa8ebe0f0 'luaK_concat' 'void (FuncState *, int *, int)'
|-ImplicitCastExpr 0x558fa8f305d0 <col:15> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f30350 <col:15> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
|-UnaryOperator 0x558fa8f303f0 <col:19, col:24> 'int *' prefix '&'
| `-MemberExpr 0x558fa8f303b8 <col:20, col:24> 'int' lvalue ->breaklist 0x558fa8ee9d68
|   `-ImplicitCastExpr 0x558fa8f303a0 <col:20> 'BlockCnt *' <LValueToRValue>
|     `-DeclRefExpr 0x558fa8f30378 <col:20> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
`-CallExpr 0x558fa8f304d0 <col:35, col:47> 'int'
  |-ImplicitCastExpr 0x558fa8f304b8 <col:35> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x558fa8f30410 <col:35> 'int (FuncState *)' Function 0x558fa8ebd5c8 'luaK_jump' 'int (FuncState *)'
  `-ImplicitCastExpr 0x558fa8f30500 <col:45> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f30438 <col:45> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B1.2]([B1.4], [B1.8], [B1.13])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x558fa8f300f8 <lparser.c:986:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
luaK_codeABC
   2: ImplicitCastExpr 0x558fa8f30228 <lparser.c:986:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f300f8 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, OpCode, int, int, int))
   3: DeclRefExpr 0x558fa8f30120 <lparser.c:986:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x558fa8f30290 <lparser.c:986:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30120 <col:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x558fa8f30148 <lparser.c:986:22> 'int' EnumConstant 0x558fa8eafcf8 'OP_CLOSE' 'int'
OP_CLOSE
   6: ImplicitCastExpr 0x558fa8f302a8 <lparser.c:986:22> 'OpCode':'OpCode' <IntegralCast>
`-DeclRefExpr 0x558fa8f30148 <col:22> 'int' EnumConstant 0x558fa8eafcf8 'OP_CLOSE' 'int'
[B2.5] (ImplicitCastExpr, IntegralCast, OpCode)
   7: DeclRefExpr 0x558fa8f30170 <lparser.c:986:32> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   8: ImplicitCastExpr 0x558fa8f30198 <lparser.c:986:32> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f30170 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B2.7] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   9: MemberExpr 0x558fa8f301b0 <lparser.c:986:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
`-ImplicitCastExpr 0x558fa8f30198 <col:32> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f30170 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B2.8]->nactvar
  10: ImplicitCastExpr 0x558fa8f302c0 <lparser.c:986:32, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f301b0 <col:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
  `-ImplicitCastExpr 0x558fa8f30198 <col:32> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f30170 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B2.9] (ImplicitCastExpr, LValueToRValue, lu_byte)
  11: ImplicitCastExpr 0x558fa8f302d8 <lparser.c:986:32, col:36> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f302c0 <col:32, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f301b0 <col:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
    `-ImplicitCastExpr 0x558fa8f30198 <col:32> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f30170 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B2.10] (ImplicitCastExpr, IntegralCast, int)
  12: IntegerLiteral 0x558fa8f301e8 <lparser.c:986:45> 'int' 0
0
  13: IntegerLiteral 0x558fa8f30208 <lparser.c:986:48> 'int' 0
0
  14: CallExpr 0x558fa8f30240 <lparser.c:986:5, col:49> 'int'
|-ImplicitCastExpr 0x558fa8f30228 <col:5> 'int (*)(FuncState *, OpCode, int, int, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f300f8 <col:5> 'int (FuncState *, OpCode, int, int, int)' Function 0x558fa8eb9498 'luaK_codeABC' 'int (FuncState *, OpCode, int, int, int)'
|-ImplicitCastExpr 0x558fa8f30290 <col:18> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f30120 <col:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
|-ImplicitCastExpr 0x558fa8f302a8 <col:22> 'OpCode':'OpCode' <IntegralCast>
| `-DeclRefExpr 0x558fa8f30148 <col:22> 'int' EnumConstant 0x558fa8eafcf8 'OP_CLOSE' 'int'
|-ImplicitCastExpr 0x558fa8f302d8 <col:32, col:36> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x558fa8f302c0 <col:32, col:36> 'lu_byte':'unsigned char' <LValueToRValue>
|   `-MemberExpr 0x558fa8f301b0 <col:32, col:36> 'lu_byte':'unsigned char' lvalue ->nactvar 0x558fa8ee9dc0
|     `-ImplicitCastExpr 0x558fa8f30198 <col:32> 'BlockCnt *' <LValueToRValue>
|       `-DeclRefExpr 0x558fa8f30170 <col:32> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
|-IntegerLiteral 0x558fa8f301e8 <col:45> 'int' 0
`-IntegerLiteral 0x558fa8f30208 <col:48> 'int' 0
[B2.2]([B2.4], [B2.6], [B2.11], [B2.12], [B2.13])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x558fa8f300b8 <lparser.c:985:7> 'int' lvalue Var 0x558fa8f2fb10 'upval' 'int'
upval
   2: ImplicitCastExpr 0x558fa8f300e0 <lparser.c:985:7> 'int' <LValueToRValue>
`-DeclRefExpr 0x558fa8f300b8 <col:7> 'int' lvalue Var 0x558fa8f2fb10 'upval' 'int'
[B3.1] (ImplicitCastExpr, LValueToRValue, int)
   T: if [B3.2]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: DeclRefExpr 0x558fa8f2ff60 <lparser.c:984:5> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
luaX_syntaxerror
   2: ImplicitCastExpr 0x558fa8f2ffe8 <lparser.c:984:5> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x558fa8f2ff60 <col:5> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *))
   3: DeclRefExpr 0x558fa8f2ff88 <lparser.c:984:22> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x558fa8f30038 <lparser.c:984:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2ff88 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x558fa8f2ffb0 <lparser.c:984:26> 'char [17]' lvalue "no loop to break"
"no loop to break"
   6: ImplicitCastExpr 0x558fa8f30050 <lparser.c:984:26> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x558fa8f2ffb0 <col:26> 'char [17]' lvalue "no loop to break"
[B4.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x558fa8f30068 <lparser.c:984:26> 'const char *' <BitCast>
`-ImplicitCastExpr 0x558fa8f30050 <col:26> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x558fa8f2ffb0 <col:26> 'char [17]' lvalue "no loop to break"
[B4.6] (ImplicitCastExpr, BitCast, const char *)
   8: CallExpr 0x558fa8f30000 <lparser.c:984:5, col:44> 'void'
|-ImplicitCastExpr 0x558fa8f2ffe8 <col:5> 'void (*)(LexState *, const char *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x558fa8f2ff60 <col:5> 'void (LexState *, const char *)' Function 0x558fa8ea1c10 'luaX_syntaxerror' 'void (LexState *, const char *)'
|-ImplicitCastExpr 0x558fa8f30038 <col:22> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x558fa8f2ff88 <col:22> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
`-ImplicitCastExpr 0x558fa8f30068 <col:26> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x558fa8f30050 <col:26> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x558fa8f2ffb0 <col:26> 'char [17]' lvalue "no loop to break"
[B4.2]([B4.4], [B4.7])
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: DeclRefExpr 0x558fa8f2ff00 <lparser.c:983:8> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8f2ff28 <lparser.c:983:8> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2ff00 <col:8> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B5.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   3: UnaryOperator 0x558fa8f2ff40 <lparser.c:983:7, col:8> 'int' prefix '!'
`-ImplicitCastExpr 0x558fa8f2ff28 <col:8> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2ff00 <col:8> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
![B5.2]
   T: if [B5.3]
   Preds (2): B8 B9
   Succs (2): B4 B3

 [B6]
   Preds (1): B7
   Succs (1): B9

 [B7]
   1: DeclRefExpr 0x558fa8f2fcc0 <lparser.c:980:5> 'int' lvalue Var 0x558fa8f2fb10 'upval' 'int'
upval
   2: DeclRefExpr 0x558fa8f2fce8 <lparser.c:980:14> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   3: ImplicitCastExpr 0x558fa8f2fd10 <lparser.c:980:14> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2fce8 <col:14> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.2] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   4: MemberExpr 0x558fa8f2fd28 <lparser.c:980:14, col:18> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
`-ImplicitCastExpr 0x558fa8f2fd10 <col:14> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2fce8 <col:14> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.3]->upval
   5: ImplicitCastExpr 0x558fa8f2fd60 <lparser.c:980:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f2fd28 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
  `-ImplicitCastExpr 0x558fa8f2fd10 <col:14> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2fce8 <col:14> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.4] (ImplicitCastExpr, LValueToRValue, lu_byte)
   6: ImplicitCastExpr 0x558fa8f2fd78 <lparser.c:980:14, col:18> 'int' <IntegralCast>
`-ImplicitCastExpr 0x558fa8f2fd60 <col:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f2fd28 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
    `-ImplicitCastExpr 0x558fa8f2fd10 <col:14> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2fce8 <col:14> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.5] (ImplicitCastExpr, IntegralCast, int)
   7: CompoundAssignOperator 0x558fa8f2fd90 <lparser.c:980:5, col:18> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x558fa8f2fcc0 <col:5> 'int' lvalue Var 0x558fa8f2fb10 'upval' 'int'
`-ImplicitCastExpr 0x558fa8f2fd78 <col:14, col:18> 'int' <IntegralCast>
  `-ImplicitCastExpr 0x558fa8f2fd60 <col:14, col:18> 'lu_byte':'unsigned char' <LValueToRValue>
    `-MemberExpr 0x558fa8f2fd28 <col:14, col:18> 'lu_byte':'unsigned char' lvalue ->upval 0x558fa8ee9e18
      `-ImplicitCastExpr 0x558fa8f2fd10 <col:14> 'BlockCnt *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2fce8 <col:14> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.1] |= [B7.6]
   8: DeclRefExpr 0x558fa8f2fdf0 <lparser.c:981:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   9: ImplicitCastExpr 0x558fa8f2fe18 <lparser.c:981:10> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2fdf0 <col:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.8] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
  10: MemberExpr 0x558fa8f2fe30 <lparser.c:981:10, col:14> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
`-ImplicitCastExpr 0x558fa8f2fe18 <col:10> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2fdf0 <col:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.9]->previous
  11: ImplicitCastExpr 0x558fa8f2fe68 <lparser.c:981:10, col:14> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8f2fe30 <col:10, col:14> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
  `-ImplicitCastExpr 0x558fa8f2fe18 <col:10> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2fdf0 <col:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.10] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
  12: DeclRefExpr 0x558fa8f2fdc8 <lparser.c:981:5> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
  13: BinaryOperator 0x558fa8f2fe80 <lparser.c:981:5, col:14> 'BlockCnt *' '='
|-DeclRefExpr 0x558fa8f2fdc8 <col:5> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
`-ImplicitCastExpr 0x558fa8f2fe68 <col:10, col:14> 'struct BlockCnt *' <LValueToRValue>
  `-MemberExpr 0x558fa8f2fe30 <col:10, col:14> 'struct BlockCnt *' lvalue ->previous 0x558fa8ee9d08
    `-ImplicitCastExpr 0x558fa8f2fe18 <col:10> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2fdf0 <col:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B7.12] = [B7.11]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: DeclRefExpr 0x558fa8f2fbd0 <lparser.c:979:17> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8f2fbf8 <lparser.c:979:17> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2fbd0 <col:17> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B8.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   3: MemberExpr 0x558fa8f2fc10 <lparser.c:979:17, col:21> 'lu_byte':'unsigned char' lvalue ->isbreakable 0x558fa8ee9e70
`-ImplicitCastExpr 0x558fa8f2fbf8 <col:17> 'BlockCnt *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2fbd0 <col:17> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B8.2]->isbreakable
   4: ImplicitCastExpr 0x558fa8f2fc48 <lparser.c:979:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
`-MemberExpr 0x558fa8f2fc10 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->isbreakable 0x558fa8ee9e70
  `-ImplicitCastExpr 0x558fa8f2fbf8 <col:17> 'BlockCnt *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2fbd0 <col:17> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B8.3] (ImplicitCastExpr, LValueToRValue, lu_byte)
   5: UnaryOperator 0x558fa8f2fc60 <lparser.c:979:16, col:21> 'int' prefix '!'
`-ImplicitCastExpr 0x558fa8f2fc48 <col:17, col:21> 'lu_byte':'unsigned char' <LValueToRValue>
  `-MemberExpr 0x558fa8f2fc10 <col:17, col:21> 'lu_byte':'unsigned char' lvalue ->isbreakable 0x558fa8ee9e70
    `-ImplicitCastExpr 0x558fa8f2fbf8 <col:17> 'BlockCnt *' <LValueToRValue>
      `-DeclRefExpr 0x558fa8f2fbd0 <col:17> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
![B8.4]
   T: while [B9.2] && [B8.5]
   Preds (1): B9
   Succs (2): B7 B5

 [B9]
   1: DeclRefExpr 0x558fa8f2fba8 <lparser.c:979:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
bl
   2: ImplicitCastExpr 0x558fa8f2fc80 <lparser.c:979:10> 'BlockCnt *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2fba8 <col:10> 'BlockCnt *' lvalue Var 0x558fa8f2f9f0 'bl' 'BlockCnt *'
[B9.1] (ImplicitCastExpr, LValueToRValue, BlockCnt *)
   T: [B9.2] && ...
   Preds (2): B6 B10
   Succs (2): B8 B5

 [B10]
   1: DeclRefExpr 0x558fa8f2f938 <lparser.c:976:19> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x558fa8f2f960 <lparser.c:976:19> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2f938 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
[B10.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x558fa8f2f978 <lparser.c:976:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
`-ImplicitCastExpr 0x558fa8f2f960 <col:19> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2f938 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
[B10.2]->fs
   4: ImplicitCastExpr 0x558fa8f2f9b0 <lparser.c:976:19, col:23> 'struct FuncState *' <LValueToRValue>
`-MemberExpr 0x558fa8f2f978 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
  `-ImplicitCastExpr 0x558fa8f2f960 <col:19> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2f938 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, struct FuncState *)
   5: DeclStmt 0x558fa8f2f9c8 <lparser.c:976:3, col:25>col:14
`-VarDecl 0x558fa8f2f8d8 <col:3, col:23> col:14 used fs 'FuncState *' cinit
  `-ImplicitCastExpr 0x558fa8f2f9b0 <col:19, col:23> 'struct FuncState *' <LValueToRValue>
    `-MemberExpr 0x558fa8f2f978 <col:19, col:23> 'struct FuncState *' lvalue ->fs 0x558fa8ea05f0
      `-ImplicitCastExpr 0x558fa8f2f960 <col:19> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2f938 <col:19> 'LexState *' lvalue ParmVar 0x558fa8f2f798 'ls' 'LexState *'
FuncState *fs = ls->fs;
   6: DeclRefExpr 0x558fa8f2fa50 <lparser.c:977:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
fs
   7: ImplicitCastExpr 0x558fa8f2fa78 <lparser.c:977:18> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x558fa8f2fa50 <col:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B10.6] (ImplicitCastExpr, LValueToRValue, FuncState *)
   8: MemberExpr 0x558fa8f2fa90 <lparser.c:977:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
`-ImplicitCastExpr 0x558fa8f2fa78 <col:18> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x558fa8f2fa50 <col:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B10.7]->bl
   9: ImplicitCastExpr 0x558fa8f2fac8 <lparser.c:977:18, col:22> 'struct BlockCnt *' <LValueToRValue>
`-MemberExpr 0x558fa8f2fa90 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
  `-ImplicitCastExpr 0x558fa8f2fa78 <col:18> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x558fa8f2fa50 <col:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
[B10.8] (ImplicitCastExpr, LValueToRValue, struct BlockCnt *)
  10: DeclStmt 0x558fa8f2fae0 <lparser.c:977:3, col:24>col:13
`-VarDecl 0x558fa8f2f9f0 <col:3, col:22> col:13 used bl 'BlockCnt *' cinit
  `-ImplicitCastExpr 0x558fa8f2fac8 <col:18, col:22> 'struct BlockCnt *' <LValueToRValue>
    `-MemberExpr 0x558fa8f2fa90 <col:18, col:22> 'struct BlockCnt *' lvalue ->bl 0x558fa8eb4170
      `-ImplicitCastExpr 0x558fa8f2fa78 <col:18> 'FuncState *' <LValueToRValue>
        `-DeclRefExpr 0x558fa8f2fa50 <col:18> 'FuncState *' lvalue Var 0x558fa8f2f8d8 'fs' 'FuncState *'
BlockCnt *bl = fs->bl;
  11: IntegerLiteral 0x558fa8f2fb70 <lparser.c:978:15> 'int' 0
0
  12: DeclStmt 0x558fa8f2fb90 <lparser.c:978:3, col:16>col:7
`-VarDecl 0x558fa8f2fb10 <col:3, col:15> col:7 used upval 'int' cinit
  `-IntegerLiteral 0x558fa8f2fb70 <col:15> 'int' 0
int upval = 0;
   Preds (1): B11
   Succs (1): B9

 [B0 (EXIT)]
   Preds (1): B1
