static const char *classend(MatchState *ms, const char *p)
 [B16 (ENTRY)]
   Succs (1): B1

 [B1]
   1: DeclRefExpr 0x55fb421c5fe8 <lstrlib.c:203:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: UnaryOperator 0x55fb421c6010 <lstrlib.c:203:12, col:13> 'const char *' postfix '++'
`-DeclRefExpr 0x55fb421c5fe8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B1.1]++
   3: UnaryOperator 0x55fb421c6030 <lstrlib.c:203:11, col:13> 'const char' lvalue prefix '*'
`-UnaryOperator 0x55fb421c6010 <col:12, col:13> 'const char *' postfix '++'
  `-DeclRefExpr 0x55fb421c5fe8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*[B1.2]
   4: ImplicitCastExpr 0x55fb421c6050 <lstrlib.c:203:11, col:13> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6030 <col:11, col:13> 'const char' lvalue prefix '*'
  `-UnaryOperator 0x55fb421c6010 <col:12, col:13> 'const char *' postfix '++'
    `-DeclRefExpr 0x55fb421c5fe8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c6068 <lstrlib.c:203:11, col:13> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c6050 <col:11, col:13> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6030 <col:11, col:13> 'const char' lvalue prefix '*'
    `-UnaryOperator 0x55fb421c6010 <col:12, col:13> 'const char *' postfix '++'
      `-DeclRefExpr 0x55fb421c5fe8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B1.4] (ImplicitCastExpr, IntegralCast, int)
   T: switch [B1.5]
   Preds (1): B16
   Succs (3): B12 B15 B2

 [B2]
  default:
   1: DeclRefExpr 0x55fb421c6d48 <lstrlib.c:220:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6d70 <lstrlib.c:220:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c6d48 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B2.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: ReturnStmt 0x55fb421c6d88 <lstrlib.c:220:7, col:14>
`-ImplicitCastExpr 0x55fb421c6d70 <col:14> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c6d48 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
return [B2.2];
   Preds (1): B1
   Succs (1): B0

 [B3]
   1: DeclRefExpr 0x55fb421c6c80 <lstrlib.c:217:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6cc8 <lstrlib.c:217:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c6c80 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B3.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x55fb421c6ca8 <lstrlib.c:217:16> 'int' 1
1
   4: BinaryOperator 0x55fb421c6ce0 <lstrlib.c:217:14, col:16> 'const char *' '+'
|-ImplicitCastExpr 0x55fb421c6cc8 <col:14> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55fb421c6c80 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-IntegerLiteral 0x55fb421c6ca8 <col:16> 'int' 1
[B3.2] + [B3.3]
   5: ReturnStmt 0x55fb421c6d08 <lstrlib.c:217:7, col:16>
`-BinaryOperator 0x55fb421c6ce0 <col:14, col:16> 'const char *' '+'
  |-ImplicitCastExpr 0x55fb421c6cc8 <col:14> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55fb421c6c80 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
  `-IntegerLiteral 0x55fb421c6ca8 <col:16> 'int' 1
return [B3.4];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: DeclRefExpr 0x55fb421c6b90 <lstrlib.c:216:17> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6bb8 <lstrlib.c:216:17> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c6b90 <col:17> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B4.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421c6bd0 <lstrlib.c:216:16, col:17> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb421c6bb8 <col:17> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c6b90 <col:17> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*[B4.2]
   4: ImplicitCastExpr 0x55fb421c6c08 <lstrlib.c:216:16, col:17> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6bd0 <col:16, col:17> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55fb421c6bb8 <col:17> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c6b90 <col:17> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B4.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c6c20 <lstrlib.c:216:16, col:17> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c6c08 <col:16, col:17> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6bd0 <col:16, col:17> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb421c6bb8 <col:17> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421c6b90 <col:17> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B4.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55fb421c6bf0 <lstrlib.c:216:22> 'int' 93
']'
   7: BinaryOperator 0x55fb421c6c38 <lstrlib.c:216:16, col:22> 'int' '!='
|-ImplicitCastExpr 0x55fb421c6c20 <col:16, col:17> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55fb421c6c08 <col:16, col:17> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55fb421c6bd0 <col:16, col:17> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55fb421c6bb8 <col:17> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb421c6b90 <col:17> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-CharacterLiteral 0x55fb421c6bf0 <col:22> 'int' 93
[B4.5] != [B4.6]
   T: do ... while [B4.7]
   Preds (3): B5 B6 B7
   Succs (2): B10 B3

 [B5]
   1: DeclRefExpr 0x55fb421c6af0 <lstrlib.c:215:11> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: UnaryOperator 0x55fb421c6b18 <lstrlib.c:215:11, col:12> 'const char *' postfix '++'
`-DeclRefExpr 0x55fb421c6af0 <col:11> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B5.1]++
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: DeclRefExpr 0x55fb421c69c8 <lstrlib.c:214:33> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c69f0 <lstrlib.c:214:33> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c69c8 <col:33> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B6.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421c6a08 <lstrlib.c:214:32, col:33> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb421c69f0 <col:33> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c69c8 <col:33> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*[B6.2]
   4: ImplicitCastExpr 0x55fb421c6a40 <lstrlib.c:214:32, col:33> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6a08 <col:32, col:33> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55fb421c69f0 <col:33> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c69c8 <col:33> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B6.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c6a58 <lstrlib.c:214:32, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c6a40 <col:32, col:33> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6a08 <col:32, col:33> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb421c69f0 <col:33> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421c69c8 <col:33> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B6.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55fb421c6a28 <lstrlib.c:214:38> 'int' 0
'\x00'
   7: BinaryOperator 0x55fb421c6aa0 <lstrlib.c:214:32, col:38> 'int' '!='
|-ImplicitCastExpr 0x55fb421c6a58 <col:32, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55fb421c6a40 <col:32, col:33> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55fb421c6a08 <col:32, col:33> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55fb421c69f0 <col:33> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb421c69c8 <col:33> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-CharacterLiteral 0x55fb421c6a28 <col:38> 'int' 0
[B6.5] != [B6.6]
   T: if [B7.7] && [B6.7]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: DeclRefExpr 0x55fb421c68d0 <lstrlib.c:214:15> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: UnaryOperator 0x55fb421c68f8 <lstrlib.c:214:15, col:16> 'const char *' postfix '++'
`-DeclRefExpr 0x55fb421c68d0 <col:15> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B7.1]++
   3: UnaryOperator 0x55fb421c6938 <lstrlib.c:214:13, col:18> 'const char' lvalue prefix '*'
`-ParenExpr 0x55fb421c6918 <col:14, col:18> 'const char *'
  `-UnaryOperator 0x55fb421c68f8 <col:15, col:16> 'const char *' postfix '++'
    `-DeclRefExpr 0x55fb421c68d0 <col:15> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*([B7.2])
   4: ImplicitCastExpr 0x55fb421c6970 <lstrlib.c:214:13, col:18> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6938 <col:13, col:18> 'const char' lvalue prefix '*'
  `-ParenExpr 0x55fb421c6918 <col:14, col:18> 'const char *'
    `-UnaryOperator 0x55fb421c68f8 <col:15, col:16> 'const char *' postfix '++'
      `-DeclRefExpr 0x55fb421c68d0 <col:15> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B7.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c6988 <lstrlib.c:214:13, col:18> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c6970 <col:13, col:18> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6938 <col:13, col:18> 'const char' lvalue prefix '*'
    `-ParenExpr 0x55fb421c6918 <col:14, col:18> 'const char *'
      `-UnaryOperator 0x55fb421c68f8 <col:15, col:16> 'const char *' postfix '++'
        `-DeclRefExpr 0x55fb421c68d0 <col:15> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B7.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55fb421c6958 <lstrlib.c:182:16> 'int' 37
'%'
   7: BinaryOperator 0x55fb421c69a0 <lstrlib.c:214:13, line:182:16> 'int' '=='
|-ImplicitCastExpr 0x55fb421c6988 <line:214:13, col:18> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55fb421c6970 <col:13, col:18> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55fb421c6938 <col:13, col:18> 'const char' lvalue prefix '*'
|     `-ParenExpr 0x55fb421c6918 <col:14, col:18> 'const char *'
|       `-UnaryOperator 0x55fb421c68f8 <col:15, col:16> 'const char *' postfix '++'
|         `-DeclRefExpr 0x55fb421c68d0 <col:15> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-CharacterLiteral 0x55fb421c6958 <line:182:16> 'int' 37
[B7.5] == [B7.6]
   T: [B7.7] && ...
   Preds (2): B8 B9
   Succs (2): B6 B4

 [B8]
   1: DeclRefExpr 0x55fb421c6708 <lstrlib.c:213:11> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x55fb421a7478 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
luaL_error
   2: ImplicitCastExpr 0x55fb421c6800 <lstrlib.c:213:11> 'int (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55fb421c6708 <col:11> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x55fb421a7478 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
[B8.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const char *, ...))
   3: DeclRefExpr 0x55fb421c6730 <lstrlib.c:213:22> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
ms
   4: ImplicitCastExpr 0x55fb421c6758 <lstrlib.c:213:22> 'MatchState *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c6730 <col:22> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
[B8.3] (ImplicitCastExpr, LValueToRValue, MatchState *)
   5: MemberExpr 0x55fb421c6770 <lstrlib.c:213:22, col:26> 'lua_State *' lvalue ->L 0x55fb421c36a0
`-ImplicitCastExpr 0x55fb421c6758 <col:22> 'MatchState *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c6730 <col:22> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
[B8.4]->L
   6: ImplicitCastExpr 0x55fb421c6850 <lstrlib.c:213:22, col:26> 'lua_State *' <LValueToRValue>
`-MemberExpr 0x55fb421c6770 <col:22, col:26> 'lua_State *' lvalue ->L 0x55fb421c36a0
  `-ImplicitCastExpr 0x55fb421c6758 <col:22> 'MatchState *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c6730 <col:22> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
[B8.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: StringLiteral 0x55fb421c67a8 <lstrlib.c:213:29, col:71> 'char [32]' lvalue "malformed pattern (missing ']')"
"malformed pattern (missing ']')"
   8: ImplicitCastExpr 0x55fb421c6868 <lstrlib.c:213:29, col:71> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55fb421c67a8 <col:29, col:71> 'char [32]' lvalue "malformed pattern (missing ']')"
[B8.7] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   9: ImplicitCastExpr 0x55fb421c6880 <lstrlib.c:213:29, col:71> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55fb421c6868 <col:29, col:71> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55fb421c67a8 <col:29, col:71> 'char [32]' lvalue "malformed pattern (missing ']')"
[B8.8] (ImplicitCastExpr, BitCast, const char *)
  10: CallExpr 0x55fb421c6818 <lstrlib.c:213:11, col:74> 'int'
|-ImplicitCastExpr 0x55fb421c6800 <col:11> 'int (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55fb421c6708 <col:11> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x55fb421a7478 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x55fb421c6850 <col:22, col:26> 'lua_State *' <LValueToRValue>
| `-MemberExpr 0x55fb421c6770 <col:22, col:26> 'lua_State *' lvalue ->L 0x55fb421c36a0
|   `-ImplicitCastExpr 0x55fb421c6758 <col:22> 'MatchState *' <LValueToRValue>
|     `-DeclRefExpr 0x55fb421c6730 <col:22> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
`-ImplicitCastExpr 0x55fb421c6880 <col:29, col:71> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55fb421c6868 <col:29, col:71> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55fb421c67a8 <col:29, col:71> 'char [32]' lvalue "malformed pattern (missing ']')"
[B8.2]([B8.6], [B8.9])
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: DeclRefExpr 0x55fb421c6638 <lstrlib.c:212:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6660 <lstrlib.c:212:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c6638 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B9.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421c6678 <lstrlib.c:212:13, col:14> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb421c6660 <col:14> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c6638 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*[B9.2]
   4: ImplicitCastExpr 0x55fb421c66b0 <lstrlib.c:212:13, col:14> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6678 <col:13, col:14> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55fb421c6660 <col:14> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c6638 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B9.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c66c8 <lstrlib.c:212:13, col:14> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c66b0 <col:13, col:14> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6678 <col:13, col:14> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb421c6660 <col:14> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421c6638 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B9.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55fb421c6698 <lstrlib.c:212:19> 'int' 0
'\x00'
   7: BinaryOperator 0x55fb421c66e0 <lstrlib.c:212:13, col:19> 'int' '=='
|-ImplicitCastExpr 0x55fb421c66c8 <col:13, col:14> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55fb421c66b0 <col:13, col:14> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55fb421c6678 <col:13, col:14> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55fb421c6660 <col:14> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb421c6638 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-CharacterLiteral 0x55fb421c6698 <col:19> 'int' 0
[B9.5] == [B9.6]
   T: if [B9.7]
   Preds (3): B10 B11 B12
   Succs (2): B8 B7

 [B10]
   Preds (1): B4
   Succs (1): B9

 [B11]
   1: DeclRefExpr 0x55fb421c65b8 <lstrlib.c:210:22> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: UnaryOperator 0x55fb421c65e0 <lstrlib.c:210:22, col:23> 'const char *' postfix '++'
`-DeclRefExpr 0x55fb421c65b8 <col:22> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B11.1]++
   Preds (1): B12
   Succs (1): B9

 [B12]
  case '[':
   1: DeclRefExpr 0x55fb421c64e8 <lstrlib.c:210:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6510 <lstrlib.c:210:12> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c64e8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B12.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421c6528 <lstrlib.c:210:11, col:12> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb421c6510 <col:12> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c64e8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*[B12.2]
   4: ImplicitCastExpr 0x55fb421c6560 <lstrlib.c:210:11, col:12> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6528 <col:11, col:12> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55fb421c6510 <col:12> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c64e8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B12.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c6578 <lstrlib.c:210:11, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c6560 <col:11, col:12> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6528 <col:11, col:12> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb421c6510 <col:12> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421c64e8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B12.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55fb421c6548 <lstrlib.c:210:17> 'int' 94
'^'
   7: BinaryOperator 0x55fb421c6590 <lstrlib.c:210:11, col:17> 'int' '=='
|-ImplicitCastExpr 0x55fb421c6578 <col:11, col:12> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55fb421c6560 <col:11, col:12> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55fb421c6528 <col:11, col:12> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55fb421c6510 <col:12> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb421c64e8 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-CharacterLiteral 0x55fb421c6548 <col:17> 'int' 94
[B12.5] == [B12.6]
   T: if [B12.7]
   Preds (1): B1
   Succs (2): B11 B9

 [B13]
   1: DeclRefExpr 0x55fb421c63d8 <lstrlib.c:207:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6420 <lstrlib.c:207:14> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c63d8 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B13.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: IntegerLiteral 0x55fb421c6400 <lstrlib.c:207:16> 'int' 1
1
   4: BinaryOperator 0x55fb421c6438 <lstrlib.c:207:14, col:16> 'const char *' '+'
|-ImplicitCastExpr 0x55fb421c6420 <col:14> 'const char *' <LValueToRValue>
| `-DeclRefExpr 0x55fb421c63d8 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-IntegerLiteral 0x55fb421c6400 <col:16> 'int' 1
[B13.2] + [B13.3]
   5: ReturnStmt 0x55fb421c6460 <lstrlib.c:207:7, col:16>
`-BinaryOperator 0x55fb421c6438 <col:14, col:16> 'const char *' '+'
  |-ImplicitCastExpr 0x55fb421c6420 <col:14> 'const char *' <LValueToRValue>
  | `-DeclRefExpr 0x55fb421c63d8 <col:14> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
  `-IntegerLiteral 0x55fb421c6400 <col:16> 'int' 1
return [B13.4];
   Preds (2): B14 B15
   Succs (1): B0

 [B14]
   1: DeclRefExpr 0x55fb421c61d0 <lstrlib.c:206:9> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x55fb421a7478 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
luaL_error
   2: ImplicitCastExpr 0x55fb421c6308 <lstrlib.c:206:9> 'int (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
`-DeclRefExpr 0x55fb421c61d0 <col:9> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x55fb421a7478 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
[B14.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(lua_State *, const char *, ...))
   3: DeclRefExpr 0x55fb421c61f8 <lstrlib.c:206:20> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
ms
   4: ImplicitCastExpr 0x55fb421c6220 <lstrlib.c:206:20> 'MatchState *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c61f8 <col:20> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
[B14.3] (ImplicitCastExpr, LValueToRValue, MatchState *)
   5: MemberExpr 0x55fb421c6238 <lstrlib.c:206:20, col:24> 'lua_State *' lvalue ->L 0x55fb421c36a0
`-ImplicitCastExpr 0x55fb421c6220 <col:20> 'MatchState *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c61f8 <col:20> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
[B14.4]->L
   6: ImplicitCastExpr 0x55fb421c6358 <lstrlib.c:206:20, col:24> 'lua_State *' <LValueToRValue>
`-MemberExpr 0x55fb421c6238 <col:20, col:24> 'lua_State *' lvalue ->L 0x55fb421c36a0
  `-ImplicitCastExpr 0x55fb421c6220 <col:20> 'MatchState *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c61f8 <col:20> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
[B14.5] (ImplicitCastExpr, LValueToRValue, lua_State *)
   7: StringLiteral 0x55fb421c62a8 <lstrlib.c:206:27, col:72> 'char [35]' lvalue "malformed pattern (ends with '%%')"
"malformed pattern (ends with '%%')"
   8: ImplicitCastExpr 0x55fb421c6370 <lstrlib.c:206:27, col:72> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x55fb421c62a8 <col:27, col:72> 'char [35]' lvalue "malformed pattern (ends with '%%')"
[B14.7] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   9: ImplicitCastExpr 0x55fb421c6388 <lstrlib.c:206:27, col:72> 'const char *' <BitCast>
`-ImplicitCastExpr 0x55fb421c6370 <col:27, col:72> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x55fb421c62a8 <col:27, col:72> 'char [35]' lvalue "malformed pattern (ends with '%%')"
[B14.8] (ImplicitCastExpr, BitCast, const char *)
  10: CallExpr 0x55fb421c6320 <lstrlib.c:206:9, col:75> 'int'
|-ImplicitCastExpr 0x55fb421c6308 <col:9> 'int (*)(lua_State *, const char *, ...)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x55fb421c61d0 <col:9> 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)' Function 0x55fb421a7478 'luaL_error' 'int (lua_State *, const char *, ...)':'int (lua_State *, const char *, ...)'
|-ImplicitCastExpr 0x55fb421c6358 <col:20, col:24> 'lua_State *' <LValueToRValue>
| `-MemberExpr 0x55fb421c6238 <col:20, col:24> 'lua_State *' lvalue ->L 0x55fb421c36a0
|   `-ImplicitCastExpr 0x55fb421c6220 <col:20> 'MatchState *' <LValueToRValue>
|     `-DeclRefExpr 0x55fb421c61f8 <col:20> 'MatchState *' lvalue ParmVar 0x55fb421c5da0 'ms' 'MatchState *'
`-ImplicitCastExpr 0x55fb421c6388 <col:27, col:72> 'const char *' <BitCast>
  `-ImplicitCastExpr 0x55fb421c6370 <col:27, col:72> 'char *' <ArrayToPointerDecay>
    `-StringLiteral 0x55fb421c62a8 <col:27, col:72> 'char [35]' lvalue "malformed pattern (ends with '%%')"
[B14.2]([B14.6], [B14.9])
   Preds (1): B15
   Succs (1): B13

 [B15]
  case '%':
   1: DeclRefExpr 0x55fb421c6100 <lstrlib.c:205:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
p
   2: ImplicitCastExpr 0x55fb421c6128 <lstrlib.c:205:12> 'const char *' <LValueToRValue>
`-DeclRefExpr 0x55fb421c6100 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B15.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: UnaryOperator 0x55fb421c6140 <lstrlib.c:205:11, col:12> 'const char' lvalue prefix '*'
`-ImplicitCastExpr 0x55fb421c6128 <col:12> 'const char *' <LValueToRValue>
  `-DeclRefExpr 0x55fb421c6100 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
*[B15.2]
   4: ImplicitCastExpr 0x55fb421c6178 <lstrlib.c:205:11, col:12> 'char' <LValueToRValue>
`-UnaryOperator 0x55fb421c6140 <col:11, col:12> 'const char' lvalue prefix '*'
  `-ImplicitCastExpr 0x55fb421c6128 <col:12> 'const char *' <LValueToRValue>
    `-DeclRefExpr 0x55fb421c6100 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B15.3] (ImplicitCastExpr, LValueToRValue, char)
   5: ImplicitCastExpr 0x55fb421c6190 <lstrlib.c:205:11, col:12> 'int' <IntegralCast>
`-ImplicitCastExpr 0x55fb421c6178 <col:11, col:12> 'char' <LValueToRValue>
  `-UnaryOperator 0x55fb421c6140 <col:11, col:12> 'const char' lvalue prefix '*'
    `-ImplicitCastExpr 0x55fb421c6128 <col:12> 'const char *' <LValueToRValue>
      `-DeclRefExpr 0x55fb421c6100 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
[B15.4] (ImplicitCastExpr, IntegralCast, int)
   6: CharacterLiteral 0x55fb421c6160 <lstrlib.c:205:17> 'int' 0
'\x00'
   7: BinaryOperator 0x55fb421c61a8 <lstrlib.c:205:11, col:17> 'int' '=='
|-ImplicitCastExpr 0x55fb421c6190 <col:11, col:12> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x55fb421c6178 <col:11, col:12> 'char' <LValueToRValue>
|   `-UnaryOperator 0x55fb421c6140 <col:11, col:12> 'const char' lvalue prefix '*'
|     `-ImplicitCastExpr 0x55fb421c6128 <col:12> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb421c6100 <col:12> 'const char *' lvalue ParmVar 0x55fb421c5e18 'p' 'const char *'
`-CharacterLiteral 0x55fb421c6160 <col:17> 'int' 0
[B15.5] == [B15.6]
   T: if [B15.7]
   Preds (1): B1
   Succs (2): B14 B13

 [B0 (EXIT)]
   Preds (3): B2 B3 B13
