int luaK_exp2RK(FuncState *fs, expdesc *e)
 [B19 (ENTRY)]
   Succs (1): B2

 [B1]
   1: DeclRefExpr 0x5637768d5808 <lcode.c:468:10> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
luaK_exp2anyreg
   2: ImplicitCastExpr 0x5637768d5880 <lcode.c:468:10> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d5808 <col:10> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
[B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d5830 <lcode.c:468:26> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d58d0 <lcode.c:468:26> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5830 <col:26> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B1.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d5858 <lcode.c:468:30> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d58e8 <lcode.c:468:30> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5858 <col:30> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B1.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d5898 <lcode.c:468:10, col:31> 'int'
|-ImplicitCastExpr 0x5637768d5880 <col:10> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d5808 <col:10> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d58d0 <col:26> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d5830 <col:26> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d58e8 <col:30> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d5858 <col:30> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B1.2]([B1.4], [B1.6])
   8: ReturnStmt 0x5637768d5900 <lcode.c:468:3, col:31>
`-CallExpr 0x5637768d5898 <col:10, col:31> 'int'
  |-ImplicitCastExpr 0x5637768d5880 <col:10> 'int (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d5808 <col:10> 'int (FuncState *, expdesc *)' Function 0x5637768d2a20 'luaK_exp2anyreg' 'int (FuncState *, expdesc *)'
  |-ImplicitCastExpr 0x5637768d58d0 <col:26> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d5830 <col:26> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
  `-ImplicitCastExpr 0x5637768d58e8 <col:30> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d5858 <col:30> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
return [B1.7];
   Preds (3): B3 B4 B10
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x5637768d4080 <lcode.c:445:3> 'void (FuncState *, expdesc *)' Function 0x5637768d3920 'luaK_exp2val' 'void (FuncState *, expdesc *)'
luaK_exp2val
   2: ImplicitCastExpr 0x5637768d40f8 <lcode.c:445:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d4080 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768d3920 'luaK_exp2val' 'void (FuncState *, expdesc *)'
[B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(FuncState *, expdesc *))
   3: DeclRefExpr 0x5637768d40a8 <lcode.c:445:16> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d4148 <lcode.c:445:16> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d40a8 <col:16> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B2.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d40d0 <lcode.c:445:20> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d4160 <lcode.c:445:20> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d40d0 <col:20> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B2.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: CallExpr 0x5637768d4110 <lcode.c:445:3, col:21> 'void'
|-ImplicitCastExpr 0x5637768d40f8 <col:3> 'void (*)(FuncState *, expdesc *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d4080 <col:3> 'void (FuncState *, expdesc *)' Function 0x5637768d3920 'luaK_exp2val' 'void (FuncState *, expdesc *)'
|-ImplicitCastExpr 0x5637768d4148 <col:16> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d40a8 <col:16> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d4160 <col:20> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d40d0 <col:20> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B2.2]([B2.4], [B2.6])
   8: DeclRefExpr 0x5637768d4178 <lcode.c:446:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   9: ImplicitCastExpr 0x5637768d41a0 <lcode.c:446:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4178 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B2.8] (ImplicitCastExpr, LValueToRValue, expdesc *)
  10: MemberExpr 0x5637768d41b8 <lcode.c:446:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d41a0 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d4178 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B2.9]->k
  11: ImplicitCastExpr 0x5637768d41f0 <lcode.c:446:11, col:14> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d41b8 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d41a0 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d4178 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B2.10] (ImplicitCastExpr, LValueToRValue, expkind)
  12: ImplicitCastExpr 0x5637768d4208 <lcode.c:446:11, col:14> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d41f0 <col:11, col:14> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d41b8 <col:11, col:14> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d41a0 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d4178 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B2.11] (ImplicitCastExpr, IntegralCast, unsigned int)
   T: switch [B2.12]
   Preds (1): B19
   Succs (6): B6 B7 B8 B9 B18 B3

 [B3]
  default:
   T: break;
   Preds (1): B2
   Succs (1): B1

 [B4]
   T: break;
   Preds (1): B6
   Succs (1): B1

 [B5]
   1: DeclRefExpr 0x5637768d5478 <lcode.c:462:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d54a0 <lcode.c:462:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B5.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d54b8 <lcode.c:462:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d54a0 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B5.2]->u
   4: MemberExpr 0x5637768d54f0 <lcode.c:462:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d54b8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d54a0 <col:22> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B5.3].s
   5: MemberExpr 0x5637768d5528 <lcode.c:462:22, col:29> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d54f0 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d54b8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d54a0 <col:22> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B5.4].info
   6: ImplicitCastExpr 0x5637768d5670 <./lopcodes.h:130:19, col:21> 'int' <LValueToRValue>
`-ParenExpr 0x5637768d5560 <col:19, col:21> 'int' lvalue
  `-MemberExpr 0x5637768d5528 <lcode.c:462:22, col:29> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768d54f0 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768d54b8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768d54a0 <col:22> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
([B5.5]) (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5637768d5580 <./lopcodes.h:119:17> 'int' 1
1
   8: IntegerLiteral 0x5637768d55a0 <./lopcodes.h:38:17> 'int' 9
9
   9: IntegerLiteral 0x5637768d55c0 <./lopcodes.h:119:32> 'int' 1
1
  10: BinaryOperator 0x5637768d55e0 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5637768d55a0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768d55c0 <line:119:32> 'int' 1
[B5.8] - [B5.9]
  11: BinaryOperator 0x5637768d5628 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5637768d5580 <col:17> 'int' 1
`-ParenExpr 0x5637768d5608 <col:22, col:33> 'int'
  `-BinaryOperator 0x5637768d55e0 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5637768d55a0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768d55c0 <line:119:32> 'int' 1
[B5.7] << ([B5.10])
  12: BinaryOperator 0x5637768d5688 <./lopcodes.h:130:19, line:119:34> 'int' '|'
|-ImplicitCastExpr 0x5637768d5670 <line:130:19, col:21> 'int' <LValueToRValue>
| `-ParenExpr 0x5637768d5560 <col:19, col:21> 'int' lvalue
|   `-MemberExpr 0x5637768d5528 <lcode.c:462:22, col:29> 'int' lvalue .info 0x56377687d5f8
|     `-MemberExpr 0x5637768d54f0 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|       `-MemberExpr 0x5637768d54b8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|         `-ImplicitCastExpr 0x5637768d54a0 <col:22> 'expdesc *' <LValueToRValue>
|           `-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ParenExpr 0x5637768d5650 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x5637768d5628 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5637768d5580 <col:17> 'int' 1
    `-ParenExpr 0x5637768d5608 <col:22, col:33> 'int'
      `-BinaryOperator 0x5637768d55e0 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5637768d55a0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5637768d55c0 <line:119:32> 'int' 1
[B5.6] | ([B5.11])
  13: ReturnStmt 0x5637768d56d0 <lcode.c:462:9, ./lopcodes.h:130:30>
`-ParenExpr 0x5637768d56b0 <col:18, col:30> 'int'
  `-BinaryOperator 0x5637768d5688 <col:19, line:119:34> 'int' '|'
    |-ImplicitCastExpr 0x5637768d5670 <line:130:19, col:21> 'int' <LValueToRValue>
    | `-ParenExpr 0x5637768d5560 <col:19, col:21> 'int' lvalue
    |   `-MemberExpr 0x5637768d5528 <lcode.c:462:22, col:29> 'int' lvalue .info 0x56377687d5f8
    |     `-MemberExpr 0x5637768d54f0 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |       `-MemberExpr 0x5637768d54b8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |         `-ImplicitCastExpr 0x5637768d54a0 <col:22> 'expdesc *' <LValueToRValue>
    |           `-DeclRefExpr 0x5637768d5478 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
    `-ParenExpr 0x5637768d5650 <./lopcodes.h:119:16, col:34> 'int'
      `-BinaryOperator 0x5637768d5628 <col:17, col:33> 'int' '<<'
        |-IntegerLiteral 0x5637768d5580 <col:17> 'int' 1
        `-ParenExpr 0x5637768d5608 <col:22, col:33> 'int'
          `-BinaryOperator 0x5637768d55e0 <line:38:17, line:119:32> 'int' '-'
            |-IntegerLiteral 0x5637768d55a0 <line:38:17> 'int' 9
            `-IntegerLiteral 0x5637768d55c0 <line:119:32> 'int' 1
return ([B5.12]);
   Preds (1): B6
   Succs (1): B0

 [B6]
  case VK:
   1: DeclRefExpr 0x5637768d51f8 <lcode.c:461:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d5220 <lcode.c:461:11> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d51f8 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B6.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d5238 <lcode.c:461:11, col:14> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d5220 <col:11> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d51f8 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B6.2]->u
   4: MemberExpr 0x5637768d5270 <lcode.c:461:11, col:16> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d5238 <col:11, col:14> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d5220 <col:11> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d51f8 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B6.3].s
   5: MemberExpr 0x5637768d52a8 <lcode.c:461:11, col:18> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d5270 <col:11, col:16> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d5238 <col:11, col:14> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d5220 <col:11> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d51f8 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B6.4].info
   6: ImplicitCastExpr 0x5637768d5438 <lcode.c:461:11, col:18> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d52a8 <col:11, col:18> 'int' lvalue .info 0x56377687d5f8
  `-MemberExpr 0x5637768d5270 <col:11, col:16> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    `-MemberExpr 0x5637768d5238 <col:11, col:14> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d5220 <col:11> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d51f8 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B6.5] (ImplicitCastExpr, LValueToRValue, int)
   7: IntegerLiteral 0x5637768d52e0 <./lopcodes.h:119:17> 'int' 1
1
   8: IntegerLiteral 0x5637768d5300 <./lopcodes.h:38:17> 'int' 9
9
   9: IntegerLiteral 0x5637768d5320 <./lopcodes.h:119:32> 'int' 1
1
  10: BinaryOperator 0x5637768d5340 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5637768d5300 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768d5320 <line:119:32> 'int' 1
[B6.8] - [B6.9]
  11: BinaryOperator 0x5637768d5388 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5637768d52e0 <col:17> 'int' 1
`-ParenExpr 0x5637768d5368 <col:22, col:33> 'int'
  `-BinaryOperator 0x5637768d5340 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5637768d5300 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768d5320 <line:119:32> 'int' 1
[B6.7] << ([B6.10])
  12: IntegerLiteral 0x5637768d53d0 <./lopcodes.h:127:29> 'int' 1
1
  13: BinaryOperator 0x5637768d53f0 <./lopcodes.h:119:16, line:127:29> 'int' '-'
|-ParenExpr 0x5637768d53b0 <line:119:16, col:34> 'int'
| `-BinaryOperator 0x5637768d5388 <col:17, col:33> 'int' '<<'
|   |-IntegerLiteral 0x5637768d52e0 <col:17> 'int' 1
|   `-ParenExpr 0x5637768d5368 <col:22, col:33> 'int'
|     `-BinaryOperator 0x5637768d5340 <line:38:17, line:119:32> 'int' '-'
|       |-IntegerLiteral 0x5637768d5300 <line:38:17> 'int' 9
|       `-IntegerLiteral 0x5637768d5320 <line:119:32> 'int' 1
`-IntegerLiteral 0x5637768d53d0 <line:127:29> 'int' 1
([B6.11]) - [B6.12]
  14: BinaryOperator 0x5637768d5450 <lcode.c:461:11, ./lopcodes.h:127:30> 'int' '<='
|-ImplicitCastExpr 0x5637768d5438 <lcode.c:461:11, col:18> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d52a8 <col:11, col:18> 'int' lvalue .info 0x56377687d5f8
|   `-MemberExpr 0x5637768d5270 <col:11, col:16> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|     `-MemberExpr 0x5637768d5238 <col:11, col:14> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768d5220 <col:11> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768d51f8 <col:11> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ParenExpr 0x5637768d5418 <./lopcodes.h:127:20, col:30> 'int'
  `-BinaryOperator 0x5637768d53f0 <line:119:16, line:127:29> 'int' '-'
    |-ParenExpr 0x5637768d53b0 <line:119:16, col:34> 'int'
    | `-BinaryOperator 0x5637768d5388 <col:17, col:33> 'int' '<<'
    |   |-IntegerLiteral 0x5637768d52e0 <col:17> 'int' 1
    |   `-ParenExpr 0x5637768d5368 <col:22, col:33> 'int'
    |     `-BinaryOperator 0x5637768d5340 <line:38:17, line:119:32> 'int' '-'
    |       |-IntegerLiteral 0x5637768d5300 <line:38:17> 'int' 9
    |       `-IntegerLiteral 0x5637768d5320 <line:119:32> 'int' 1
    `-IntegerLiteral 0x5637768d53d0 <line:127:29> 'int' 1
[B6.6] <= ([B6.13])
   T: if [B6.14]
   Preds (1): B2
   Succs (2): B5 B4

 [B7]
  case VKNUM:
   Preds (1): B2
   Succs (1): B8

 [B8]
  case VTRUE:
   Preds (2): B7 B2
   Succs (1): B9

 [B9]
  case VFALSE:
   Preds (2): B8 B2
   Succs (1): B18

 [B10]
   T: break;
   Preds (1): B18
   Succs (1): B1

 [B11]
   1: ConditionalOperator 0x5637768d4d70 <lcode.c:452:23, line:454:66> 'int'
|-ParenExpr 0x5637768d47d8 <line:452:23, col:36> 'int'
| `-BinaryOperator 0x5637768d47b0 <col:24, col:32> 'int' '=='
|   |-ImplicitCastExpr 0x5637768d4780 <col:24, col:27> 'unsigned int' <IntegralCast>
|   | `-ImplicitCastExpr 0x5637768d4768 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
|   |   `-MemberExpr 0x5637768d4708 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
|   |     `-ImplicitCastExpr 0x5637768d46f0 <col:24> 'expdesc *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
|   `-ImplicitCastExpr 0x5637768d4798 <col:32> 'unsigned int' <IntegralCast>
|     `-DeclRefExpr 0x5637768d4740 <col:32> 'int' EnumConstant 0x563776877e58 'VNIL' 'int'
|-CallExpr 0x5637768d4860 <col:41, col:48> 'int'
| |-ImplicitCastExpr 0x5637768d4848 <col:41> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5637768d47f8 <col:41> 'int (FuncState *)' Function 0x5637768c4ab0 'nilK' 'int (FuncState *)'
| `-ImplicitCastExpr 0x5637768d4890 <col:46> 'FuncState *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768d4820 <col:46> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
`-ConditionalOperator 0x5637768d4d40 <line:453:23, line:454:66> 'int'
  |-ParenExpr 0x5637768d49b8 <line:453:23, col:37> 'int'
  | `-BinaryOperator 0x5637768d4990 <col:24, col:32> 'int' '=='
  |   |-ImplicitCastExpr 0x5637768d4960 <col:24, col:27> 'unsigned int' <IntegralCast>
  |   | `-ImplicitCastExpr 0x5637768d4948 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
  |   |   `-MemberExpr 0x5637768d48e8 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
  |   |     `-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
  |   |       `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
  |   `-ImplicitCastExpr 0x5637768d4978 <col:32> 'unsigned int' <IntegralCast>
  |     `-DeclRefExpr 0x5637768d4920 <col:32> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
  |-CallExpr 0x5637768d4af0 <col:41, col:67> 'int'
  | |-ImplicitCastExpr 0x5637768d4ad8 <col:41> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x5637768d49d8 <col:41> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
  | |-ImplicitCastExpr 0x5637768d4b28 <col:54> 'FuncState *' <LValueToRValue>
  | | `-DeclRefExpr 0x5637768d4a00 <col:54> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
  | `-ImplicitCastExpr 0x5637768d4b40 <col:58, col:63> 'lua_Number':'double' <LValueToRValue>
  |   `-MemberExpr 0x5637768d4aa0 <col:58, col:63> 'lua_Number':'double' lvalue .nval 0x56377687d748
  |     `-MemberExpr 0x5637768d4a68 <col:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  |       `-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
  |         `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
  `-CallExpr 0x5637768d4cf0 <line:454:41, col:66> 'int'
    |-ImplicitCastExpr 0x5637768d4cd8 <col:41> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x5637768d4b58 <col:41> 'int (FuncState *, int)' Function 0x5637768c3530 'boolK' 'int (FuncState *, int)'
    |-ImplicitCastExpr 0x5637768d4d28 <col:47> 'FuncState *' <LValueToRValue>
    | `-DeclRefExpr 0x5637768d4b80 <col:47> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
    `-ParenExpr 0x5637768d4cb8 <col:51, col:65> 'int'
      `-BinaryOperator 0x5637768d4c90 <col:52, col:60> 'int' '=='
        |-ImplicitCastExpr 0x5637768d4c60 <col:52, col:55> 'unsigned int' <IntegralCast>
        | `-ImplicitCastExpr 0x5637768d4c48 <col:52, col:55> 'expkind':'expkind' <LValueToRValue>
        |   `-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
        |     `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
        |       `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
        `-ImplicitCastExpr 0x5637768d4c78 <col:60> 'unsigned int' <IntegralCast>
          `-DeclRefExpr 0x5637768d4c20 <col:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
([B17.8]) ? [B12.5] : [B13.1]
   2: DeclRefExpr 0x5637768d45e0 <lcode.c:452:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   3: ImplicitCastExpr 0x5637768d4608 <lcode.c:452:9> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d45e0 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.2] (ImplicitCastExpr, LValueToRValue, expdesc *)
   4: MemberExpr 0x5637768d4620 <lcode.c:452:9, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d4608 <col:9> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d45e0 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.3]->u
   5: MemberExpr 0x5637768d4658 <lcode.c:452:9, col:14> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d4620 <col:9, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d4608 <col:9> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d45e0 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.4].s
   6: MemberExpr 0x5637768d4690 <lcode.c:452:9, col:16> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d4658 <col:9, col:14> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d4620 <col:9, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d4608 <col:9> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d45e0 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.5].info
   7: BinaryOperator 0x5637768d4da0 <lcode.c:452:9, line:454:66> 'int' '='
|-MemberExpr 0x5637768d4690 <line:452:9, col:16> 'int' lvalue .info 0x56377687d5f8
| `-MemberExpr 0x5637768d4658 <col:9, col:14> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|   `-MemberExpr 0x5637768d4620 <col:9, col:12> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|     `-ImplicitCastExpr 0x5637768d4608 <col:9> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d45e0 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ConditionalOperator 0x5637768d4d70 <col:23, line:454:66> 'int'
  |-ParenExpr 0x5637768d47d8 <line:452:23, col:36> 'int'
  | `-BinaryOperator 0x5637768d47b0 <col:24, col:32> 'int' '=='
  |   |-ImplicitCastExpr 0x5637768d4780 <col:24, col:27> 'unsigned int' <IntegralCast>
  |   | `-ImplicitCastExpr 0x5637768d4768 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
  |   |   `-MemberExpr 0x5637768d4708 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
  |   |     `-ImplicitCastExpr 0x5637768d46f0 <col:24> 'expdesc *' <LValueToRValue>
  |   |       `-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
  |   `-ImplicitCastExpr 0x5637768d4798 <col:32> 'unsigned int' <IntegralCast>
  |     `-DeclRefExpr 0x5637768d4740 <col:32> 'int' EnumConstant 0x563776877e58 'VNIL' 'int'
  |-CallExpr 0x5637768d4860 <col:41, col:48> 'int'
  | |-ImplicitCastExpr 0x5637768d4848 <col:41> 'int (*)(FuncState *)' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x5637768d47f8 <col:41> 'int (FuncState *)' Function 0x5637768c4ab0 'nilK' 'int (FuncState *)'
  | `-ImplicitCastExpr 0x5637768d4890 <col:46> 'FuncState *' <LValueToRValue>
  |   `-DeclRefExpr 0x5637768d4820 <col:46> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
  `-ConditionalOperator 0x5637768d4d40 <line:453:23, line:454:66> 'int'
    |-ParenExpr 0x5637768d49b8 <line:453:23, col:37> 'int'
    | `-BinaryOperator 0x5637768d4990 <col:24, col:32> 'int' '=='
    |   |-ImplicitCastExpr 0x5637768d4960 <col:24, col:27> 'unsigned int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5637768d4948 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
    |   |   `-MemberExpr 0x5637768d48e8 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
    |   |     `-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
    |   `-ImplicitCastExpr 0x5637768d4978 <col:32> 'unsigned int' <IntegralCast>
    |     `-DeclRefExpr 0x5637768d4920 <col:32> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
    |-CallExpr 0x5637768d4af0 <col:41, col:67> 'int'
    | |-ImplicitCastExpr 0x5637768d4ad8 <col:41> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5637768d49d8 <col:41> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
    | |-ImplicitCastExpr 0x5637768d4b28 <col:54> 'FuncState *' <LValueToRValue>
    | | `-DeclRefExpr 0x5637768d4a00 <col:54> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
    | `-ImplicitCastExpr 0x5637768d4b40 <col:58, col:63> 'lua_Number':'double' <LValueToRValue>
    |   `-MemberExpr 0x5637768d4aa0 <col:58, col:63> 'lua_Number':'double' lvalue .nval 0x56377687d748
    |     `-MemberExpr 0x5637768d4a68 <col:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |       `-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
    |         `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
    `-CallExpr 0x5637768d4cf0 <line:454:41, col:66> 'int'
      |-ImplicitCastExpr 0x5637768d4cd8 <col:41> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5637768d4b58 <col:41> 'int (FuncState *, int)' Function 0x5637768c3530 'boolK' 'int (FuncState *, int)'
      |-ImplicitCastExpr 0x5637768d4d28 <col:47> 'FuncState *' <LValueToRValue>
      | `-DeclRefExpr 0x5637768d4b80 <col:47> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
      `-ParenExpr 0x5637768d4cb8 <col:51, col:65> 'int'
        `-BinaryOperator 0x5637768d4c90 <col:52, col:60> 'int' '=='
          |-ImplicitCastExpr 0x5637768d4c60 <col:52, col:55> 'unsigned int' <IntegralCast>
          | `-ImplicitCastExpr 0x5637768d4c48 <col:52, col:55> 'expkind':'expkind' <LValueToRValue>
          |   `-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
          |     `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
          |       `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
          `-ImplicitCastExpr 0x5637768d4c78 <col:60> 'unsigned int' <IntegralCast>
            `-DeclRefExpr 0x5637768d4c20 <col:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B11.6] = [B11.1]
   8: DeclRefExpr 0x5637768d4e40 <lcode.c:455:16> 'int' EnumConstant 0x563776877f30 'VK' 'int'
VK
   9: ImplicitCastExpr 0x5637768d4e68 <lcode.c:455:16> 'expkind':'expkind' <IntegralCast>
`-DeclRefExpr 0x5637768d4e40 <col:16> 'int' EnumConstant 0x563776877f30 'VK' 'int'
[B11.8] (ImplicitCastExpr, IntegralCast, expkind)
  10: DeclRefExpr 0x5637768d4dc8 <lcode.c:455:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
  11: ImplicitCastExpr 0x5637768d4df0 <lcode.c:455:9> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4dc8 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.10] (ImplicitCastExpr, LValueToRValue, expdesc *)
  12: MemberExpr 0x5637768d4e08 <lcode.c:455:9, col:12> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d4df0 <col:9> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d4dc8 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.11]->k
  13: BinaryOperator 0x5637768d4e80 <lcode.c:455:9, col:16> 'expkind':'expkind' '='
|-MemberExpr 0x5637768d4e08 <col:9, col:12> 'expkind':'expkind' lvalue ->k 0x56377687d440
| `-ImplicitCastExpr 0x5637768d4df0 <col:9> 'expdesc *' <LValueToRValue>
|   `-DeclRefExpr 0x5637768d4dc8 <col:9> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d4e68 <col:16> 'expkind':'expkind' <IntegralCast>
  `-DeclRefExpr 0x5637768d4e40 <col:16> 'int' EnumConstant 0x563776877f30 'VK' 'int'
[B11.12] = [B11.9]
  14: DeclRefExpr 0x5637768d4ea8 <lcode.c:456:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
  15: ImplicitCastExpr 0x5637768d4ed0 <lcode.c:456:22> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.14] (ImplicitCastExpr, LValueToRValue, expdesc *)
  16: MemberExpr 0x5637768d4ee8 <lcode.c:456:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d4ed0 <col:22> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.15]->u
  17: MemberExpr 0x5637768d4f20 <lcode.c:456:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
`-MemberExpr 0x5637768d4ee8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d4ed0 <col:22> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.16].s
  18: MemberExpr 0x5637768d4f58 <lcode.c:456:22, col:29> 'int' lvalue .info 0x56377687d5f8
`-MemberExpr 0x5637768d4f20 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
  `-MemberExpr 0x5637768d4ee8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d4ed0 <col:22> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B11.17].info
  19: ImplicitCastExpr 0x5637768d50a0 <./lopcodes.h:130:19, col:21> 'int' <LValueToRValue>
`-ParenExpr 0x5637768d4f90 <col:19, col:21> 'int' lvalue
  `-MemberExpr 0x5637768d4f58 <lcode.c:456:22, col:29> 'int' lvalue .info 0x56377687d5f8
    `-MemberExpr 0x5637768d4f20 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
      `-MemberExpr 0x5637768d4ee8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
        `-ImplicitCastExpr 0x5637768d4ed0 <col:22> 'expdesc *' <LValueToRValue>
          `-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
([B11.18]) (ImplicitCastExpr, LValueToRValue, int)
  20: IntegerLiteral 0x5637768d4fb0 <./lopcodes.h:119:17> 'int' 1
1
  21: IntegerLiteral 0x5637768d4fd0 <./lopcodes.h:38:17> 'int' 9
9
  22: IntegerLiteral 0x5637768d4ff0 <./lopcodes.h:119:32> 'int' 1
1
  23: BinaryOperator 0x5637768d5010 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5637768d4fd0 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768d4ff0 <line:119:32> 'int' 1
[B11.21] - [B11.22]
  24: BinaryOperator 0x5637768d5058 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5637768d4fb0 <col:17> 'int' 1
`-ParenExpr 0x5637768d5038 <col:22, col:33> 'int'
  `-BinaryOperator 0x5637768d5010 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5637768d4fd0 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768d4ff0 <line:119:32> 'int' 1
[B11.20] << ([B11.23])
  25: BinaryOperator 0x5637768d50b8 <./lopcodes.h:130:19, line:119:34> 'int' '|'
|-ImplicitCastExpr 0x5637768d50a0 <line:130:19, col:21> 'int' <LValueToRValue>
| `-ParenExpr 0x5637768d4f90 <col:19, col:21> 'int' lvalue
|   `-MemberExpr 0x5637768d4f58 <lcode.c:456:22, col:29> 'int' lvalue .info 0x56377687d5f8
|     `-MemberExpr 0x5637768d4f20 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
|       `-MemberExpr 0x5637768d4ee8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|         `-ImplicitCastExpr 0x5637768d4ed0 <col:22> 'expdesc *' <LValueToRValue>
|           `-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ParenExpr 0x5637768d5080 <./lopcodes.h:119:16, col:34> 'int'
  `-BinaryOperator 0x5637768d5058 <col:17, col:33> 'int' '<<'
    |-IntegerLiteral 0x5637768d4fb0 <col:17> 'int' 1
    `-ParenExpr 0x5637768d5038 <col:22, col:33> 'int'
      `-BinaryOperator 0x5637768d5010 <line:38:17, line:119:32> 'int' '-'
        |-IntegerLiteral 0x5637768d4fd0 <line:38:17> 'int' 9
        `-IntegerLiteral 0x5637768d4ff0 <line:119:32> 'int' 1
[B11.19] | ([B11.24])
  26: ReturnStmt 0x5637768d5100 <lcode.c:456:9, ./lopcodes.h:130:30>
`-ParenExpr 0x5637768d50e0 <col:18, col:30> 'int'
  `-BinaryOperator 0x5637768d50b8 <col:19, line:119:34> 'int' '|'
    |-ImplicitCastExpr 0x5637768d50a0 <line:130:19, col:21> 'int' <LValueToRValue>
    | `-ParenExpr 0x5637768d4f90 <col:19, col:21> 'int' lvalue
    |   `-MemberExpr 0x5637768d4f58 <lcode.c:456:22, col:29> 'int' lvalue .info 0x56377687d5f8
    |     `-MemberExpr 0x5637768d4f20 <col:22, col:27> 'struct (anonymous struct at ./lparser.h:40:5)':'struct expdesc::(anonymous at ./lparser.h:40:5)' lvalue .s 0x56377687d6f0
    |       `-MemberExpr 0x5637768d4ee8 <col:22, col:25> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    |         `-ImplicitCastExpr 0x5637768d4ed0 <col:22> 'expdesc *' <LValueToRValue>
    |           `-DeclRefExpr 0x5637768d4ea8 <col:22> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
    `-ParenExpr 0x5637768d5080 <./lopcodes.h:119:16, col:34> 'int'
      `-BinaryOperator 0x5637768d5058 <col:17, col:33> 'int' '<<'
        |-IntegerLiteral 0x5637768d4fb0 <col:17> 'int' 1
        `-ParenExpr 0x5637768d5038 <col:22, col:33> 'int'
          `-BinaryOperator 0x5637768d5010 <line:38:17, line:119:32> 'int' '-'
            |-IntegerLiteral 0x5637768d4fd0 <line:38:17> 'int' 9
            `-IntegerLiteral 0x5637768d4ff0 <line:119:32> 'int' 1
return ([B11.25]);
   Preds (2): B12 B13
   Succs (1): B0

 [B12]
   1: DeclRefExpr 0x5637768d47f8 <lcode.c:452:41> 'int (FuncState *)' Function 0x5637768c4ab0 'nilK' 'int (FuncState *)'
nilK
   2: ImplicitCastExpr 0x5637768d4848 <lcode.c:452:41> 'int (*)(FuncState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d47f8 <col:41> 'int (FuncState *)' Function 0x5637768c4ab0 'nilK' 'int (FuncState *)'
[B12.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *))
   3: DeclRefExpr 0x5637768d4820 <lcode.c:452:46> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d4890 <lcode.c:452:46> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4820 <col:46> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B12.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: CallExpr 0x5637768d4860 <lcode.c:452:41, col:48> 'int'
|-ImplicitCastExpr 0x5637768d4848 <col:41> 'int (*)(FuncState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d47f8 <col:41> 'int (FuncState *)' Function 0x5637768c4ab0 'nilK' 'int (FuncState *)'
`-ImplicitCastExpr 0x5637768d4890 <col:46> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d4820 <col:46> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B12.2]([B12.4])
   Preds (1): B17
   Succs (1): B11

 [B13]
   1: ConditionalOperator 0x5637768d4d40 <lcode.c:453:23, line:454:66> 'int'
|-ParenExpr 0x5637768d49b8 <line:453:23, col:37> 'int'
| `-BinaryOperator 0x5637768d4990 <col:24, col:32> 'int' '=='
|   |-ImplicitCastExpr 0x5637768d4960 <col:24, col:27> 'unsigned int' <IntegralCast>
|   | `-ImplicitCastExpr 0x5637768d4948 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
|   |   `-MemberExpr 0x5637768d48e8 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
|   |     `-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
|   `-ImplicitCastExpr 0x5637768d4978 <col:32> 'unsigned int' <IntegralCast>
|     `-DeclRefExpr 0x5637768d4920 <col:32> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
|-CallExpr 0x5637768d4af0 <col:41, col:67> 'int'
| |-ImplicitCastExpr 0x5637768d4ad8 <col:41> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x5637768d49d8 <col:41> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
| |-ImplicitCastExpr 0x5637768d4b28 <col:54> 'FuncState *' <LValueToRValue>
| | `-DeclRefExpr 0x5637768d4a00 <col:54> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
| `-ImplicitCastExpr 0x5637768d4b40 <col:58, col:63> 'lua_Number':'double' <LValueToRValue>
|   `-MemberExpr 0x5637768d4aa0 <col:58, col:63> 'lua_Number':'double' lvalue .nval 0x56377687d748
|     `-MemberExpr 0x5637768d4a68 <col:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
|       `-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
|         `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-CallExpr 0x5637768d4cf0 <line:454:41, col:66> 'int'
  |-ImplicitCastExpr 0x5637768d4cd8 <col:41> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x5637768d4b58 <col:41> 'int (FuncState *, int)' Function 0x5637768c3530 'boolK' 'int (FuncState *, int)'
  |-ImplicitCastExpr 0x5637768d4d28 <col:47> 'FuncState *' <LValueToRValue>
  | `-DeclRefExpr 0x5637768d4b80 <col:47> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
  `-ParenExpr 0x5637768d4cb8 <col:51, col:65> 'int'
    `-BinaryOperator 0x5637768d4c90 <col:52, col:60> 'int' '=='
      |-ImplicitCastExpr 0x5637768d4c60 <col:52, col:55> 'unsigned int' <IntegralCast>
      | `-ImplicitCastExpr 0x5637768d4c48 <col:52, col:55> 'expkind':'expkind' <LValueToRValue>
      |   `-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
      |     `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
      |       `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
      `-ImplicitCastExpr 0x5637768d4c78 <col:60> 'unsigned int' <IntegralCast>
        `-DeclRefExpr 0x5637768d4c20 <col:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
([B16.8]) ? [B14.10] : [B15.13]
   Preds (2): B14 B15
   Succs (1): B11

 [B14]
   1: DeclRefExpr 0x5637768d49d8 <lcode.c:453:41> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
luaK_numberK
   2: ImplicitCastExpr 0x5637768d4ad8 <lcode.c:453:41> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d49d8 <col:41> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
[B14.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, lua_Number))
   3: DeclRefExpr 0x5637768d4a00 <lcode.c:453:54> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d4b28 <lcode.c:453:54> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4a00 <col:54> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B14.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d4a28 <lcode.c:453:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d4a50 <lcode.c:453:58> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B14.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768d4a68 <lcode.c:453:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
`-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B14.6]->u
   8: MemberExpr 0x5637768d4aa0 <lcode.c:453:58, col:63> 'lua_Number':'double' lvalue .nval 0x56377687d748
`-MemberExpr 0x5637768d4a68 <col:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
  `-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B14.7].nval
   9: ImplicitCastExpr 0x5637768d4b40 <lcode.c:453:58, col:63> 'lua_Number':'double' <LValueToRValue>
`-MemberExpr 0x5637768d4aa0 <col:58, col:63> 'lua_Number':'double' lvalue .nval 0x56377687d748
  `-MemberExpr 0x5637768d4a68 <col:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
    `-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B14.8] (ImplicitCastExpr, LValueToRValue, lua_Number)
  10: CallExpr 0x5637768d4af0 <lcode.c:453:41, col:67> 'int'
|-ImplicitCastExpr 0x5637768d4ad8 <col:41> 'int (*)(FuncState *, lua_Number)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d49d8 <col:41> 'int (FuncState *, lua_Number)' Function 0x5637768c2dd8 'luaK_numberK' 'int (FuncState *, lua_Number)'
|-ImplicitCastExpr 0x5637768d4b28 <col:54> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d4a00 <col:54> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
`-ImplicitCastExpr 0x5637768d4b40 <col:58, col:63> 'lua_Number':'double' <LValueToRValue>
  `-MemberExpr 0x5637768d4aa0 <col:58, col:63> 'lua_Number':'double' lvalue .nval 0x56377687d748
    `-MemberExpr 0x5637768d4a68 <col:58, col:61> 'union (anonymous union at ./lparser.h:39:3)':'union expdesc::(anonymous at ./lparser.h:39:3)' lvalue ->u 0x56377687d830
      `-ImplicitCastExpr 0x5637768d4a50 <col:58> 'expdesc *' <LValueToRValue>
        `-DeclRefExpr 0x5637768d4a28 <col:58> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B14.2]([B14.4], [B14.9])
   Preds (1): B16
   Succs (1): B13

 [B15]
   1: DeclRefExpr 0x5637768d4b58 <lcode.c:454:41> 'int (FuncState *, int)' Function 0x5637768c3530 'boolK' 'int (FuncState *, int)'
boolK
   2: ImplicitCastExpr 0x5637768d4cd8 <lcode.c:454:41> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x5637768d4b58 <col:41> 'int (FuncState *, int)' Function 0x5637768c3530 'boolK' 'int (FuncState *, int)'
[B15.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(FuncState *, int))
   3: DeclRefExpr 0x5637768d4b80 <lcode.c:454:47> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
fs
   4: ImplicitCastExpr 0x5637768d4d28 <lcode.c:454:47> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4b80 <col:47> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B15.3] (ImplicitCastExpr, LValueToRValue, FuncState *)
   5: DeclRefExpr 0x5637768d4ba8 <lcode.c:454:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   6: ImplicitCastExpr 0x5637768d4bd0 <lcode.c:454:52> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B15.5] (ImplicitCastExpr, LValueToRValue, expdesc *)
   7: MemberExpr 0x5637768d4be8 <lcode.c:454:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B15.6]->k
   8: ImplicitCastExpr 0x5637768d4c48 <lcode.c:454:52, col:55> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B15.7] (ImplicitCastExpr, LValueToRValue, expkind)
   9: ImplicitCastExpr 0x5637768d4c60 <lcode.c:454:52, col:55> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d4c48 <col:52, col:55> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B15.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: DeclRefExpr 0x5637768d4c20 <lcode.c:454:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
VTRUE
  11: ImplicitCastExpr 0x5637768d4c78 <lcode.c:454:60> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d4c20 <col:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B15.10] (ImplicitCastExpr, IntegralCast, unsigned int)
  12: BinaryOperator 0x5637768d4c90 <lcode.c:454:52, col:60> 'int' '=='
|-ImplicitCastExpr 0x5637768d4c60 <col:52, col:55> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768d4c48 <col:52, col:55> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d4c78 <col:60> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d4c20 <col:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B15.9] == [B15.11]
  13: CallExpr 0x5637768d4cf0 <lcode.c:454:41, col:66> 'int'
|-ImplicitCastExpr 0x5637768d4cd8 <col:41> 'int (*)(FuncState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x5637768d4b58 <col:41> 'int (FuncState *, int)' Function 0x5637768c3530 'boolK' 'int (FuncState *, int)'
|-ImplicitCastExpr 0x5637768d4d28 <col:47> 'FuncState *' <LValueToRValue>
| `-DeclRefExpr 0x5637768d4b80 <col:47> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
`-ParenExpr 0x5637768d4cb8 <col:51, col:65> 'int'
  `-BinaryOperator 0x5637768d4c90 <col:52, col:60> 'int' '=='
    |-ImplicitCastExpr 0x5637768d4c60 <col:52, col:55> 'unsigned int' <IntegralCast>
    | `-ImplicitCastExpr 0x5637768d4c48 <col:52, col:55> 'expkind':'expkind' <LValueToRValue>
    |   `-MemberExpr 0x5637768d4be8 <col:52, col:55> 'expkind':'expkind' lvalue ->k 0x56377687d440
    |     `-ImplicitCastExpr 0x5637768d4bd0 <col:52> 'expdesc *' <LValueToRValue>
    |       `-DeclRefExpr 0x5637768d4ba8 <col:52> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
    `-ImplicitCastExpr 0x5637768d4c78 <col:60> 'unsigned int' <IntegralCast>
      `-DeclRefExpr 0x5637768d4c20 <col:60> 'int' EnumConstant 0x563776877ea0 'VTRUE' 'int'
[B15.2]([B15.4], ([B15.12]))
   Preds (1): B16
   Succs (1): B13

 [B16]
   1: DeclRefExpr 0x5637768d48a8 <lcode.c:453:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d48d0 <lcode.c:453:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B16.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d48e8 <lcode.c:453:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B16.2]->k
   4: ImplicitCastExpr 0x5637768d4948 <lcode.c:453:24, col:27> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d48e8 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B16.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768d4960 <lcode.c:453:24, col:27> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d4948 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d48e8 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B16.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768d4920 <lcode.c:453:32> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
VKNUM
   7: ImplicitCastExpr 0x5637768d4978 <lcode.c:453:32> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d4920 <col:32> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
[B16.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768d4990 <lcode.c:453:24, col:32> 'int' '=='
|-ImplicitCastExpr 0x5637768d4960 <col:24, col:27> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768d4948 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768d48e8 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768d48d0 <col:24> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d48a8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d4978 <col:32> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d4920 <col:32> 'int' EnumConstant 0x563776877f78 'VKNUM' 'int'
[B16.5] == [B16.7]
   T: ([B16.8]) ? ... : ...
   Preds (1): B17
   Succs (2): B14 B15

 [B17]
   1: DeclRefExpr 0x5637768d46c8 <lcode.c:452:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
e
   2: ImplicitCastExpr 0x5637768d46f0 <lcode.c:452:24> 'expdesc *' <LValueToRValue>
`-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B17.1] (ImplicitCastExpr, LValueToRValue, expdesc *)
   3: MemberExpr 0x5637768d4708 <lcode.c:452:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
`-ImplicitCastExpr 0x5637768d46f0 <col:24> 'expdesc *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B17.2]->k
   4: ImplicitCastExpr 0x5637768d4768 <lcode.c:452:24, col:27> 'expkind':'expkind' <LValueToRValue>
`-MemberExpr 0x5637768d4708 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
  `-ImplicitCastExpr 0x5637768d46f0 <col:24> 'expdesc *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B17.3] (ImplicitCastExpr, LValueToRValue, expkind)
   5: ImplicitCastExpr 0x5637768d4780 <lcode.c:452:24, col:27> 'unsigned int' <IntegralCast>
`-ImplicitCastExpr 0x5637768d4768 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
  `-MemberExpr 0x5637768d4708 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
    `-ImplicitCastExpr 0x5637768d46f0 <col:24> 'expdesc *' <LValueToRValue>
      `-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
[B17.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: DeclRefExpr 0x5637768d4740 <lcode.c:452:32> 'int' EnumConstant 0x563776877e58 'VNIL' 'int'
VNIL
   7: ImplicitCastExpr 0x5637768d4798 <lcode.c:452:32> 'unsigned int' <IntegralCast>
`-DeclRefExpr 0x5637768d4740 <col:32> 'int' EnumConstant 0x563776877e58 'VNIL' 'int'
[B17.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: BinaryOperator 0x5637768d47b0 <lcode.c:452:24, col:32> 'int' '=='
|-ImplicitCastExpr 0x5637768d4780 <col:24, col:27> 'unsigned int' <IntegralCast>
| `-ImplicitCastExpr 0x5637768d4768 <col:24, col:27> 'expkind':'expkind' <LValueToRValue>
|   `-MemberExpr 0x5637768d4708 <col:24, col:27> 'expkind':'expkind' lvalue ->k 0x56377687d440
|     `-ImplicitCastExpr 0x5637768d46f0 <col:24> 'expdesc *' <LValueToRValue>
|       `-DeclRefExpr 0x5637768d46c8 <col:24> 'expdesc *' lvalue ParmVar 0x5637768d3ef0 'e' 'expdesc *'
`-ImplicitCastExpr 0x5637768d4798 <col:32> 'unsigned int' <IntegralCast>
  `-DeclRefExpr 0x5637768d4740 <col:32> 'int' EnumConstant 0x563776877e58 'VNIL' 'int'
[B17.5] == [B17.7]
   T: ([B17.8]) ? ... : ...
   Preds (1): B18
   Succs (2): B12 B16

 [B18]
  case VNIL:
   1: DeclRefExpr 0x5637768d43d0 <lcode.c:451:11> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
fs
   2: ImplicitCastExpr 0x5637768d43f8 <lcode.c:451:11> 'FuncState *' <LValueToRValue>
`-DeclRefExpr 0x5637768d43d0 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B18.1] (ImplicitCastExpr, LValueToRValue, FuncState *)
   3: MemberExpr 0x5637768d4410 <lcode.c:451:11, col:15> 'int' lvalue ->nk 0x56377687e2c8
`-ImplicitCastExpr 0x5637768d43f8 <col:11> 'FuncState *' <LValueToRValue>
  `-DeclRefExpr 0x5637768d43d0 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B18.2]->nk
   4: ImplicitCastExpr 0x5637768d45a0 <lcode.c:451:11, col:15> 'int' <LValueToRValue>
`-MemberExpr 0x5637768d4410 <col:11, col:15> 'int' lvalue ->nk 0x56377687e2c8
  `-ImplicitCastExpr 0x5637768d43f8 <col:11> 'FuncState *' <LValueToRValue>
    `-DeclRefExpr 0x5637768d43d0 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
[B18.3] (ImplicitCastExpr, LValueToRValue, int)
   5: IntegerLiteral 0x5637768d4448 <./lopcodes.h:119:17> 'int' 1
1
   6: IntegerLiteral 0x5637768d4468 <./lopcodes.h:38:17> 'int' 9
9
   7: IntegerLiteral 0x5637768d4488 <./lopcodes.h:119:32> 'int' 1
1
   8: BinaryOperator 0x5637768d44a8 <./lopcodes.h:38:17, line:119:32> 'int' '-'
|-IntegerLiteral 0x5637768d4468 <line:38:17> 'int' 9
`-IntegerLiteral 0x5637768d4488 <line:119:32> 'int' 1
[B18.6] - [B18.7]
   9: BinaryOperator 0x5637768d44f0 <./lopcodes.h:119:17, col:33> 'int' '<<'
|-IntegerLiteral 0x5637768d4448 <col:17> 'int' 1
`-ParenExpr 0x5637768d44d0 <col:22, col:33> 'int'
  `-BinaryOperator 0x5637768d44a8 <line:38:17, line:119:32> 'int' '-'
    |-IntegerLiteral 0x5637768d4468 <line:38:17> 'int' 9
    `-IntegerLiteral 0x5637768d4488 <line:119:32> 'int' 1
[B18.5] << ([B18.8])
  10: IntegerLiteral 0x5637768d4538 <./lopcodes.h:127:29> 'int' 1
1
  11: BinaryOperator 0x5637768d4558 <./lopcodes.h:119:16, line:127:29> 'int' '-'
|-ParenExpr 0x5637768d4518 <line:119:16, col:34> 'int'
| `-BinaryOperator 0x5637768d44f0 <col:17, col:33> 'int' '<<'
|   |-IntegerLiteral 0x5637768d4448 <col:17> 'int' 1
|   `-ParenExpr 0x5637768d44d0 <col:22, col:33> 'int'
|     `-BinaryOperator 0x5637768d44a8 <line:38:17, line:119:32> 'int' '-'
|       |-IntegerLiteral 0x5637768d4468 <line:38:17> 'int' 9
|       `-IntegerLiteral 0x5637768d4488 <line:119:32> 'int' 1
`-IntegerLiteral 0x5637768d4538 <line:127:29> 'int' 1
([B18.9]) - [B18.10]
  12: BinaryOperator 0x5637768d45b8 <lcode.c:451:11, ./lopcodes.h:127:30> 'int' '<='
|-ImplicitCastExpr 0x5637768d45a0 <lcode.c:451:11, col:15> 'int' <LValueToRValue>
| `-MemberExpr 0x5637768d4410 <col:11, col:15> 'int' lvalue ->nk 0x56377687e2c8
|   `-ImplicitCastExpr 0x5637768d43f8 <col:11> 'FuncState *' <LValueToRValue>
|     `-DeclRefExpr 0x5637768d43d0 <col:11> 'FuncState *' lvalue ParmVar 0x5637768d3e80 'fs' 'FuncState *'
`-ParenExpr 0x5637768d4580 <./lopcodes.h:127:20, col:30> 'int'
  `-BinaryOperator 0x5637768d4558 <line:119:16, line:127:29> 'int' '-'
    |-ParenExpr 0x5637768d4518 <line:119:16, col:34> 'int'
    | `-BinaryOperator 0x5637768d44f0 <col:17, col:33> 'int' '<<'
    |   |-IntegerLiteral 0x5637768d4448 <col:17> 'int' 1
    |   `-ParenExpr 0x5637768d44d0 <col:22, col:33> 'int'
    |     `-BinaryOperator 0x5637768d44a8 <line:38:17, line:119:32> 'int' '-'
    |       |-IntegerLiteral 0x5637768d4468 <line:38:17> 'int' 9
    |       `-IntegerLiteral 0x5637768d4488 <line:119:32> 'int' 1
    `-IntegerLiteral 0x5637768d4538 <line:127:29> 'int' 1
[B18.4] <= ([B18.11])
   T: if [B18.12]
   Preds (2): B2 B9
   Succs (2): B17 B10

 [B0 (EXIT)]
   Preds (3): B1 B5 B11
