static void read_string(LexState *ls, int del, SemInfo *seminfo)
 [B55 (ENTRY)]
   Succs (1): B54

 [B1]
   1: ConditionalOperator 0x561ce7461008 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce7460c20 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7460bc8 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7460ba8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce7460b70 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce7460b58 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7460c08 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7460be8 <col:31> 'int' 0
|-ParenExpr 0x561ce7460ee8 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7460ec0 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7460ea0 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce7460e38 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7460e10 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7460df8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7460dd8 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce7460d70 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce7460d50 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce7460fc0 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7460fa8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7460f08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7460ff0 <llex.c:328:17, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce7460f70 <line:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7460f58 <line:328:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.18] ? ([B2.10]) : [B3.7]
   2: DeclRefExpr 0x561ce7460a48 <llex.c:328:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce7460a70 <llex.c:328:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460a48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7460a88 <llex.c:328:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7460a70 <line:328:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7460a48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.3]->current
   5: BinaryOperator 0x561ce7461058 <llex.c:328:17, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7460a88 <llex.c:328:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce7460a70 <line:328:17> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7460a48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce7461038 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7461008 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce7460c20 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7460bc8 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7460ba8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce7460b70 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce7460b58 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7460c08 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7460be8 <col:31> 'int' 0
    |-ParenExpr 0x561ce7460ee8 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7460ec0 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7460ea0 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce7460e38 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7460e10 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7460df8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7460dd8 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce7460d70 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce7460d50 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce7460fc0 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7460fa8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7460f08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7460ff0 <llex.c:328:17, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce7460f70 <line:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7460f58 <line:328:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.4] = ([B1.1])
   6: BinaryOperator 0x561ce74611d0 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce74609e0 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce74609c8 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7460900 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7460a18 <line:328:17> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce7460928 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7460a30 <col:17, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7460990 <line:328:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce7460978 <line:328:17> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce7460950 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce7461080 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce7461058 <line:328:17, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7460a88 <llex.c:328:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce7460a70 <line:328:17> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce7460a48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ParenExpr 0x561ce7461038 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7461008 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce7460c20 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7460bc8 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7460ba8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce7460b70 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce7460b58 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7460c08 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7460be8 <col:31> 'int' 0
        |-ParenExpr 0x561ce7460ee8 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7460ec0 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce7460ea0 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce7460e38 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7460e10 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7460df8 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7460dd8 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce7460d70 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce7460d50 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        `-CallExpr 0x561ce7460fc0 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7460fa8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7460f08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7460ff0 <llex.c:328:17, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce7460f70 <line:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce7460f58 <line:328:17> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
... , 
   7: DeclRefExpr 0x561ce7461290 <llex.c:329:17> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
luaX_newstring
   8: ImplicitCastExpr 0x561ce74615c8 <llex.c:329:17> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7461290 <col:17> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
[B1.7] (ImplicitCastExpr, FunctionToPointerDecay, TString *(*)(LexState *, const char *, size_t))
   9: DeclRefExpr 0x561ce74612b8 <llex.c:329:32> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce7461620 <llex.c:329:32> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74612b8 <col:32> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: DeclRefExpr 0x561ce74612e0 <llex.c:329:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  12: ImplicitCastExpr 0x561ce7461308 <llex.c:329:48> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.11] (ImplicitCastExpr, LValueToRValue, LexState *)
  13: MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.12]->buff
  14: ImplicitCastExpr 0x561ce7461378 <./lzio.h:32:28, col:33> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B1.13]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  15: MemberExpr 0x561ce7461390 <./lzio.h:32:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
`-ImplicitCastExpr 0x561ce7461378 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.14]->buffer
  16: ImplicitCastExpr 0x561ce7461408 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
`-ParenExpr 0x561ce74613c8 <col:27, col:42> 'char *' lvalue
  `-MemberExpr 0x561ce7461390 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
    `-ImplicitCastExpr 0x561ce7461378 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B1.15]) (ImplicitCastExpr, LValueToRValue, char *)
  17: IntegerLiteral 0x561ce74613e8 <llex.c:329:60> 'int' 1
1
  18: BinaryOperator 0x561ce7461420 <./lzio.h:32:27, llex.c:329:60> 'char *' '+'
|-ImplicitCastExpr 0x561ce7461408 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
| `-ParenExpr 0x561ce74613c8 <col:27, col:42> 'char *' lvalue
|   `-MemberExpr 0x561ce7461390 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|     `-ImplicitCastExpr 0x561ce7461378 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|       `-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
|         `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|           `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-IntegerLiteral 0x561ce74613e8 <col:60> 'int' 1
[B1.16] + [B1.17]
  19: ImplicitCastExpr 0x561ce7461638 <./lzio.h:32:27, llex.c:329:60> 'const char *' <BitCast>
`-BinaryOperator 0x561ce7461420 <./lzio.h:32:27, llex.c:329:60> 'char *' '+'
  |-ImplicitCastExpr 0x561ce7461408 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
  | `-ParenExpr 0x561ce74613c8 <col:27, col:42> 'char *' lvalue
  |   `-MemberExpr 0x561ce7461390 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |     `-ImplicitCastExpr 0x561ce7461378 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |       `-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
  |         `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |           `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
  |             `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
  `-IntegerLiteral 0x561ce74613e8 <col:60> 'int' 1
[B1.18] (ImplicitCastExpr, BitCast, const char *)
  20: DeclRefExpr 0x561ce7461448 <llex.c:330:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  21: ImplicitCastExpr 0x561ce7461470 <llex.c:330:49> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.20] (ImplicitCastExpr, LValueToRValue, LexState *)
  22: MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
`-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.21]->buff
  23: ImplicitCastExpr 0x561ce74614e0 <./lzio.h:34:29, col:34> 'Mbuffer *' <LValueToRValue>
`-ParenExpr 0x561ce74614c0 <col:29, col:34> 'Mbuffer *' lvalue
  `-MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    `-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B1.22]) (ImplicitCastExpr, LValueToRValue, Mbuffer *)
  24: MemberExpr 0x561ce74614f8 <./lzio.h:34:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
`-ImplicitCastExpr 0x561ce74614e0 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
  `-ParenExpr 0x561ce74614c0 <col:29, col:34> 'Mbuffer *' lvalue
    `-MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
      `-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B1.23]->n
  25: ImplicitCastExpr 0x561ce7461570 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
`-ParenExpr 0x561ce7461530 <col:28, col:38> 'size_t':'unsigned long' lvalue
  `-MemberExpr 0x561ce74614f8 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
    `-ImplicitCastExpr 0x561ce74614e0 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
      `-ParenExpr 0x561ce74614c0 <col:29, col:34> 'Mbuffer *' lvalue
        `-MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
          `-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B1.24]) (ImplicitCastExpr, LValueToRValue, size_t)
  26: IntegerLiteral 0x561ce7461550 <llex.c:330:61> 'int' 2
2
  27: ImplicitCastExpr 0x561ce7461588 <llex.c:330:61> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7461550 <col:61> 'int' 2
[B1.26] (ImplicitCastExpr, IntegralCast, unsigned long)
  28: BinaryOperator 0x561ce74615a0 <./lzio.h:34:28, llex.c:330:61> 'unsigned long' '-'
|-ImplicitCastExpr 0x561ce7461570 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
| `-ParenExpr 0x561ce7461530 <col:28, col:38> 'size_t':'unsigned long' lvalue
|   `-MemberExpr 0x561ce74614f8 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
|     `-ImplicitCastExpr 0x561ce74614e0 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
|       `-ParenExpr 0x561ce74614c0 <col:29, col:34> 'Mbuffer *' lvalue
|         `-MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|           `-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7461588 <col:61> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7461550 <col:61> 'int' 2
[B1.25] - [B1.27]
  29: CallExpr 0x561ce74615e0 <llex.c:329:17, line:330:62> 'TString *'
|-ImplicitCastExpr 0x561ce74615c8 <line:329:17> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7461290 <col:17> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
|-ImplicitCastExpr 0x561ce7461620 <col:32> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74612b8 <col:32> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce7461638 <./lzio.h:32:27, llex.c:329:60> 'const char *' <BitCast>
| `-BinaryOperator 0x561ce7461420 <./lzio.h:32:27, llex.c:329:60> 'char *' '+'
|   |-ImplicitCastExpr 0x561ce7461408 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
|   | `-ParenExpr 0x561ce74613c8 <col:27, col:42> 'char *' lvalue
|   |   `-MemberExpr 0x561ce7461390 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
|   |     `-ImplicitCastExpr 0x561ce7461378 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
|   |       `-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
|   |         `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
|   |           `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
|   |             `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
|   `-IntegerLiteral 0x561ce74613e8 <col:60> 'int' 1
`-BinaryOperator 0x561ce74615a0 <./lzio.h:34:28, llex.c:330:61> 'unsigned long' '-'
  |-ImplicitCastExpr 0x561ce7461570 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
  | `-ParenExpr 0x561ce7461530 <col:28, col:38> 'size_t':'unsigned long' lvalue
  |   `-MemberExpr 0x561ce74614f8 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
  |     `-ImplicitCastExpr 0x561ce74614e0 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
  |       `-ParenExpr 0x561ce74614c0 <col:29, col:34> 'Mbuffer *' lvalue
  |         `-MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |           `-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
  |             `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
  `-ImplicitCastExpr 0x561ce7461588 <col:61> 'unsigned long' <IntegralCast>
    `-IntegerLiteral 0x561ce7461550 <col:61> 'int' 2
[B1.8]([B1.10], [B1.19], [B1.28])
  30: DeclRefExpr 0x561ce7461218 <llex.c:329:3> 'SemInfo *' lvalue ParmVar 0x561ce745b570 'seminfo' 'SemInfo *'
seminfo
  31: ImplicitCastExpr 0x561ce7461240 <llex.c:329:3> 'SemInfo *' <LValueToRValue>
`-DeclRefExpr 0x561ce7461218 <col:3> 'SemInfo *' lvalue ParmVar 0x561ce745b570 'seminfo' 'SemInfo *'
[B1.30] (ImplicitCastExpr, LValueToRValue, SemInfo *)
  32: MemberExpr 0x561ce7461258 <llex.c:329:3, col:12> 'TString *' lvalue ->ts 0x561ce74251d8
`-ImplicitCastExpr 0x561ce7461240 <col:3> 'SemInfo *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7461218 <col:3> 'SemInfo *' lvalue ParmVar 0x561ce745b570 'seminfo' 'SemInfo *'
[B1.31]->ts
  33: BinaryOperator 0x561ce7461650 <llex.c:329:3, line:330:62> 'TString *' '='
|-MemberExpr 0x561ce7461258 <line:329:3, col:12> 'TString *' lvalue ->ts 0x561ce74251d8
| `-ImplicitCastExpr 0x561ce7461240 <col:3> 'SemInfo *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce7461218 <col:3> 'SemInfo *' lvalue ParmVar 0x561ce745b570 'seminfo' 'SemInfo *'
`-CallExpr 0x561ce74615e0 <col:17, line:330:62> 'TString *'
  |-ImplicitCastExpr 0x561ce74615c8 <line:329:17> 'TString *(*)(LexState *, const char *, size_t)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7461290 <col:17> 'TString *(LexState *, const char *, size_t)' Function 0x561ce74488f8 'luaX_newstring' 'TString *(LexState *, const char *, size_t)'
  |-ImplicitCastExpr 0x561ce7461620 <col:32> 'LexState *' <LValueToRValue>
  | `-DeclRefExpr 0x561ce74612b8 <col:32> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
  |-ImplicitCastExpr 0x561ce7461638 <./lzio.h:32:27, llex.c:329:60> 'const char *' <BitCast>
  | `-BinaryOperator 0x561ce7461420 <./lzio.h:32:27, llex.c:329:60> 'char *' '+'
  |   |-ImplicitCastExpr 0x561ce7461408 <./lzio.h:32:27, col:42> 'char *' <LValueToRValue>
  |   | `-ParenExpr 0x561ce74613c8 <col:27, col:42> 'char *' lvalue
  |   |   `-MemberExpr 0x561ce7461390 <col:28, col:36> 'char *' lvalue ->buffer 0x561ce74137f8
  |   |     `-ImplicitCastExpr 0x561ce7461378 <col:28, col:33> 'Mbuffer *' <LValueToRValue>
  |   |       `-ParenExpr 0x561ce7461358 <col:28, col:33> 'Mbuffer *' lvalue
  |   |         `-MemberExpr 0x561ce7461320 <llex.c:329:48, col:52> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
  |   |           `-ImplicitCastExpr 0x561ce7461308 <col:48> 'LexState *' <LValueToRValue>
  |   |             `-DeclRefExpr 0x561ce74612e0 <col:48> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
  |   `-IntegerLiteral 0x561ce74613e8 <col:60> 'int' 1
  `-BinaryOperator 0x561ce74615a0 <./lzio.h:34:28, llex.c:330:61> 'unsigned long' '-'
    |-ImplicitCastExpr 0x561ce7461570 <./lzio.h:34:28, col:38> 'size_t':'unsigned long' <LValueToRValue>
    | `-ParenExpr 0x561ce7461530 <col:28, col:38> 'size_t':'unsigned long' lvalue
    |   `-MemberExpr 0x561ce74614f8 <col:29, col:37> 'size_t':'unsigned long' lvalue ->n 0x561ce7413850
    |     `-ImplicitCastExpr 0x561ce74614e0 <col:29, col:34> 'Mbuffer *' <LValueToRValue>
    |       `-ParenExpr 0x561ce74614c0 <col:29, col:34> 'Mbuffer *' lvalue
    |         `-MemberExpr 0x561ce7461488 <llex.c:330:49, col:53> 'Mbuffer *' lvalue ->buff 0x561ce7426c60
    |           `-ImplicitCastExpr 0x561ce7461470 <col:49> 'LexState *' <LValueToRValue>
    |             `-DeclRefExpr 0x561ce7461448 <col:49> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ImplicitCastExpr 0x561ce7461588 <col:61> 'unsigned long' <IntegralCast>
      `-IntegerLiteral 0x561ce7461550 <col:61> 'int' 2
[B1.32] = [B1.29]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: DeclRefExpr 0x561ce7460c48 <llex.c:328:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce7460c70 <llex.c:328:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B2.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B2.2]->z
   4: ImplicitCastExpr 0x561ce7460ce0 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B2.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7460cf8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B2.4]->p
   6: UnaryOperator 0x561ce7460d30 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B2.5]++
   7: UnaryOperator 0x561ce7460d50 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B2.6]
   8: ImplicitCastExpr 0x561ce7460df8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7460dd8 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce7460d70 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce7460d50 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B2.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7460e10 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7460df8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7460dd8 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce7460d70 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce7460d50 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B2.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7460ec0 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7460ea0 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce7460e38 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7460e10 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7460df8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7460dd8 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce7460d70 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce7460d50 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce7460d30 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7460cf8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7460ce0 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7460cc0 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7460c88 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce7460c70 <line:328:17> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce7460c48 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B2.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: DeclRefExpr 0x561ce7460f08 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7460fa8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7460f08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce7460f30 <llex.c:328:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7460f58 <llex.c:328:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B3.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce7460f70 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7460f58 <line:328:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B3.4]->z
   6: ImplicitCastExpr 0x561ce7460ff0 <llex.c:328:17, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce7460f70 <line:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce7460f58 <line:328:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B3.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7460fc0 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7460fa8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7460f08 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7460ff0 <llex.c:328:17, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce7460f70 <line:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7460f58 <line:328:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7460f30 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B3.2]([B3.6])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: DeclRefExpr 0x561ce7460900 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce74609c8 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7460900 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce7460928 <llex.c:328:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7460a18 <llex.c:328:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460928 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce7460950 <llex.c:328:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce7460978 <llex.c:328:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460950 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7460990 <llex.c:328:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce7460978 <line:328:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7460950 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.6]->current
   8: ImplicitCastExpr 0x561ce7460a30 <llex.c:328:17, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7460990 <line:328:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce7460978 <line:328:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce7460950 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce74609e0 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce74609c8 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7460900 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7460a18 <line:328:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce7460928 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7460a30 <col:17, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7460990 <line:328:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce7460978 <line:328:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7460950 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.2]([B4.4], [B4.8])
  10: DeclRefExpr 0x561ce7460ac0 <llex.c:328:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7460ae8 <llex.c:328:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.11]->z
  13: ImplicitCastExpr 0x561ce7460b58 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B4.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce7460b70 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce7460b58 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.13]->n
  15: UnaryOperator 0x561ce7460ba8 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce7460b70 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce7460b58 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B4.14]--
  16: IntegerLiteral 0x561ce7460be8 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7460c08 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7460be8 <col:31> 'int' 0
[B4.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce7460c20 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7460bc8 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7460ba8 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce7460b70 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce7460b58 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce7460b38 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7460b00 <llex.c:328:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7460ae8 <line:328:17> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7460ac0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7460c08 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7460be8 <col:31> 'int' 0
([B4.15]) > [B4.17]
   T: [B4.18] ? ... : ...
   Preds (1): B50
   Succs (2): B2 B3

 [B5]
   Preds (7): B7 B11 B16 B34 B35 B47 B49
   Succs (1): B50

 [B6]
   1: DeclRefExpr 0x561ce745c038 <llex.c:281:13> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745c060 <llex.c:281:13> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745c038 <col:13> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B6.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745c078 <llex.c:281:13, col:17> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745c060 <col:13> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745c038 <col:13> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B6.2]->current
   4: ImplicitCastExpr 0x561ce745c0b0 <llex.c:281:13, col:17> 'int' <LValueToRValue>
`-MemberExpr 0x561ce745c078 <col:13, col:17> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce745c060 <col:13> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745c038 <col:13> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B6.3] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B6.4]
   Preds (1): B50
   Succs (5): B46 B48 B47 B49 B10

 [B7]
   1: ConditionalOperator 0x561ce7460788 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce74603a0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce7460348 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce7460328 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce74602f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce74602d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce7460388 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce7460368 <col:31> 'int' 0
|-ParenExpr 0x561ce7460668 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce7460640 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce7460620 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce74605b8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce7460590 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce7460578 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce7460558 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce74604f0 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce74604d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce7460740 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce7460728 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce7460688 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce7460770 <llex.c:325:23, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce74606f0 <line:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74606d8 <line:325:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.18] ? ([B8.10]) : [B9.7]
   2: DeclRefExpr 0x561ce74601c8 <llex.c:325:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce74601f0 <llex.c:325:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74601c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B7.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce7460208 <llex.c:325:23, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74601f0 <line:325:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74601c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B7.3]->current
   5: BinaryOperator 0x561ce74607d8 <llex.c:325:23, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce7460208 <llex.c:325:23, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce74601f0 <line:325:23> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce74601c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce74607b8 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce7460788 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce74603a0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce7460348 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce7460328 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce74602f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce74602d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce7460388 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce7460368 <col:31> 'int' 0
    |-ParenExpr 0x561ce7460668 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce7460640 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce7460620 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce74605b8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce7460590 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce7460578 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce7460558 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce74604f0 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce74604d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce7460740 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce7460728 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce7460688 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce7460770 <llex.c:325:23, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce74606f0 <line:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74606d8 <line:325:23> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B7.4] = ([B7.1])
   6: BinaryOperator 0x561ce7460820 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce7460160 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce7460148 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce7460080 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce7460198 <line:325:23> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce74600a8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce74601b0 <col:23, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce7460110 <line:325:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce74600f8 <line:325:23> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce74600d0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce7460800 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce74607d8 <line:325:23, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce7460208 <llex.c:325:23, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce74601f0 <line:325:23> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce74601c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ParenExpr 0x561ce74607b8 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce7460788 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce74603a0 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce7460348 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce7460328 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce74602f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce74602d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce7460388 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce7460368 <col:31> 'int' 0
        |-ParenExpr 0x561ce7460668 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce7460640 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce7460620 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce74605b8 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce7460590 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce7460578 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce7460558 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce74604f0 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce74604d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        `-CallExpr 0x561ce7460740 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce7460728 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce7460688 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce7460770 <llex.c:325:23, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce74606f0 <line:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce74606d8 <line:325:23> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
... , 
   Preds (2): B8 B9
   Succs (1): B5

 [B8]
   1: DeclRefExpr 0x561ce74603c8 <llex.c:325:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce74603f0 <llex.c:325:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B8.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B8.2]->z
   4: ImplicitCastExpr 0x561ce7460460 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B8.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce7460478 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B8.4]->p
   6: UnaryOperator 0x561ce74604b0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B8.5]++
   7: UnaryOperator 0x561ce74604d0 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B8.6]
   8: ImplicitCastExpr 0x561ce7460578 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce7460558 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce74604f0 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce74604d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B8.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce7460590 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce7460578 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce7460558 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce74604f0 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce74604d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B8.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce7460640 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce7460620 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce74605b8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce7460590 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce7460578 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce7460558 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce74604f0 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce74604d0 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce74604b0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce7460478 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce7460460 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce7460440 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce7460408 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce74603f0 <line:325:23> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce74603c8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B8.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B10
   Succs (1): B7

 [B9]
   1: DeclRefExpr 0x561ce7460688 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce7460728 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7460688 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B9.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce74606b0 <llex.c:325:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce74606d8 <llex.c:325:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B9.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce74606f0 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce74606d8 <line:325:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B9.4]->z
   6: ImplicitCastExpr 0x561ce7460770 <llex.c:325:23, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce74606f0 <line:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce74606d8 <line:325:23> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B9.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce7460740 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce7460728 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7460688 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce7460770 <llex.c:325:23, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce74606f0 <line:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce74606d8 <line:325:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74606b0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B9.2]([B9.6])
   Preds (1): B10
   Succs (1): B7

 [B10]
  default:
   1: DeclRefExpr 0x561ce7460080 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce7460148 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce7460080 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce74600a8 <llex.c:325:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce7460198 <llex.c:325:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74600a8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce74600d0 <llex.c:325:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce74600f8 <llex.c:325:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce74600d0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce7460110 <llex.c:325:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce74600f8 <line:325:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce74600d0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.6]->current
   8: ImplicitCastExpr 0x561ce74601b0 <llex.c:325:23, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce7460110 <line:325:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce74600f8 <line:325:23> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce74600d0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce7460160 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce7460148 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce7460080 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce7460198 <line:325:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce74600a8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce74601b0 <col:23, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce7460110 <line:325:23, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce74600f8 <line:325:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce74600d0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.2]([B10.4], [B10.8])
  10: DeclRefExpr 0x561ce7460240 <llex.c:325:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce7460268 <llex.c:325:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.11]->z
  13: ImplicitCastExpr 0x561ce74602d8 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B10.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce74602f0 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce74602d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.13]->n
  15: UnaryOperator 0x561ce7460328 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce74602f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce74602d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B10.14]--
  16: IntegerLiteral 0x561ce7460368 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce7460388 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce7460368 <col:31> 'int' 0
[B10.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce74603a0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce7460348 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce7460328 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce74602f0 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce74602d8 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce74602b8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce7460280 <llex.c:325:23, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce7460268 <line:325:23> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce7460240 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce7460388 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce7460368 <col:31> 'int' 0
([B10.15]) > [B10.17]
   T: [B10.18] ? ... : ...
   Preds (1): B6
   Succs (2): B8 B9

 [B11]
   1: ConditionalOperator 0x561ce745ffa0 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce745fbb8 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce745fb60 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce745fb40 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce745fb08 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce745faf0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce745fad0 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745fba0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce745fb80 <col:31> 'int' 0
|-ParenExpr 0x561ce745fe80 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745fe58 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745fe38 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce745fdd0 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce745fda8 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce745fd90 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce745fd70 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce745fd08 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce745fce8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce745fcc8 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce745ff58 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745ff40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745fea0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745ff88 <llex.c:321:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745ff08 <line:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745fef0 <line:321:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745fec8 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B14.16] ? ([B12.10]) : [B13.7]
   2: DeclRefExpr 0x561ce745f9e0 <llex.c:321:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745fa08 <llex.c:321:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745f9e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B11.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745fa20 <llex.c:321:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745fa08 <line:321:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745f9e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B11.3]->current
   5: BinaryOperator 0x561ce745fff0 <llex.c:321:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce745fa20 <llex.c:321:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce745fa08 <line:321:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745f9e0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745ffd0 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745ffa0 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce745fbb8 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce745fb60 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce745fb40 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce745fb08 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce745faf0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce745fad0 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce745fba0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce745fb80 <col:31> 'int' 0
    |-ParenExpr 0x561ce745fe80 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745fe58 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745fe38 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce745fdd0 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce745fda8 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce745fd90 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce745fd70 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce745fd08 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce745fce8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce745fcc8 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce745ff58 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745ff40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745fea0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745ff88 <llex.c:321:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745ff08 <line:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745fef0 <line:321:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745fec8 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B11.4] = ([B11.1])
   T: continue;
   Preds (2): B12 B13
   Succs (1): B5

 [B12]
   1: DeclRefExpr 0x561ce745fbe0 <llex.c:321:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745fc08 <llex.c:321:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B12.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B12.2]->z
   4: ImplicitCastExpr 0x561ce745fc78 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B12.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745fc90 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B12.4]->p
   6: UnaryOperator 0x561ce745fcc8 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B12.5]++
   7: UnaryOperator 0x561ce745fce8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce745fcc8 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B12.6]
   8: ImplicitCastExpr 0x561ce745fd90 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce745fd70 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce745fd08 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce745fce8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce745fcc8 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B12.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce745fda8 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce745fd90 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce745fd70 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce745fd08 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce745fce8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce745fcc8 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B12.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745fe58 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745fe38 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce745fdd0 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce745fda8 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce745fd90 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce745fd70 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce745fd08 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce745fce8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce745fcc8 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce745fc90 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce745fc78 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce745fc58 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce745fc20 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce745fc08 <line:321:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce745fbe0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B12.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B14
   Succs (1): B11

 [B13]
   1: DeclRefExpr 0x561ce745fea0 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745ff40 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745fea0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B13.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745fec8 <llex.c:321:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745fef0 <llex.c:321:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745fec8 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B13.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745ff08 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745fef0 <line:321:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745fec8 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B13.4]->z
   6: ImplicitCastExpr 0x561ce745ff88 <llex.c:321:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745ff08 <line:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745fef0 <line:321:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745fec8 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B13.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745ff58 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745ff40 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745fea0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745ff88 <llex.c:321:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745ff08 <line:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745fef0 <line:321:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745fec8 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B13.2]([B13.6])
   Preds (1): B14
   Succs (1): B11

 [B14]
   1: DeclRefExpr 0x561ce745f8e8 <llex.c:320:9> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce745f960 <llex.c:320:9> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745f8e8 <col:9> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B14.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce745f910 <llex.c:320:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745f9b0 <llex.c:320:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745f910 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B14.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce745f938 <llex.c:320:18> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   6: ImplicitCastExpr 0x561ce745f9c8 <llex.c:320:18> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745f938 <col:18> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B14.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x561ce745f978 <llex.c:320:9, col:19> 'void'
|-ImplicitCastExpr 0x561ce745f960 <col:9> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745f8e8 <col:9> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce745f9b0 <col:14> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745f910 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745f9c8 <col:18> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce745f938 <col:18> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B14.2]([B14.4], [B14.6])
   8: DeclRefExpr 0x561ce745fa58 <llex.c:321:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   9: ImplicitCastExpr 0x561ce745fa80 <llex.c:321:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B14.8] (ImplicitCastExpr, LValueToRValue, LexState *)
  10: MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B14.9]->z
  11: ImplicitCastExpr 0x561ce745faf0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745fad0 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B14.10]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  12: MemberExpr 0x561ce745fb08 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce745faf0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745fad0 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B14.11]->n
  13: UnaryOperator 0x561ce745fb40 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce745fb08 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce745faf0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745fad0 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B14.12]--
  14: IntegerLiteral 0x561ce745fb80 <./lzio.h:22:31> 'int' 0
0
  15: ImplicitCastExpr 0x561ce745fba0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce745fb80 <col:31> 'int' 0
[B14.14] (ImplicitCastExpr, IntegralCast, unsigned long)
  16: BinaryOperator 0x561ce745fbb8 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce745fb60 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce745fb40 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce745fb08 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce745faf0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce745fad0 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce745fa98 <llex.c:321:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce745fa80 <line:321:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745fa58 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745fba0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce745fb80 <col:31> 'int' 0
([B14.13]) > [B14.15]
   T: [B14.16] ? ... : ...
   Preds (7): B37 B38 B39 B40 B41 B42 B43
   Succs (2): B12 B13

 [B15]
   1: ConditionalOperator 0x561ce745cc08 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce745c7e0 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce745c788 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce745c768 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce745c730 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce745c718 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce745c6f8 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745c7c8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce745c7a8 <col:31> 'int' 0
|-ParenExpr 0x561ce745caa8 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745ca80 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745ca60 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce745c9f8 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce745c9d0 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce745c9b8 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce745c998 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce745c930 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce745c910 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce745c8f0 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce745cbc0 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745cba8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745cac8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745cbf0 <llex.c:291:14, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745cb70 <line:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745cb18 <line:291:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745caf0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B46.10] ? ([B44.10]) : [B45.7]
   2: DeclRefExpr 0x561ce745c608 <llex.c:291:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745c630 <llex.c:291:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745c608 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B15.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745c648 <llex.c:291:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745c630 <line:291:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745c608 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B15.3]->current
   5: BinaryOperator 0x561ce745cc58 <llex.c:291:14, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce745c648 <llex.c:291:14, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce745c630 <line:291:14> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745c608 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745cc38 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745cc08 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce745c7e0 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce745c788 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce745c768 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce745c730 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce745c718 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce745c6f8 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce745c7c8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce745c7a8 <col:31> 'int' 0
    |-ParenExpr 0x561ce745caa8 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745ca80 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745ca60 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce745c9f8 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce745c9d0 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce745c9b8 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce745c998 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce745c930 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce745c910 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce745c8f0 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce745cbc0 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745cba8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745cac8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745cbf0 <llex.c:291:14, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745cb70 <line:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745cb18 <line:291:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745caf0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B15.4] = ([B15.1])
   6: DeclRefExpr 0x561ce745cca0 <llex.c:292:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce745ccc8 <llex.c:292:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745cca0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B15.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce745cce0 <llex.c:292:17, col:21> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745ccc8 <col:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745cca0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B15.7]->current
   9: ImplicitCastExpr 0x561ce745cd18 <llex.c:292:17, col:21> 'int' <LValueToRValue>
`-MemberExpr 0x561ce745cce0 <col:17, col:21> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce745ccc8 <col:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745cca0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B15.8] (ImplicitCastExpr, LValueToRValue, int)
   T: switch [B15.9]
   Preds (2): B44 B45
   Succs (11): B34 B36 B35 B37 B38 B39 B40 B41
     B42 B43 B33

 [B16]
   T: continue;
   Preds (2): B17 B29
   Succs (1): B5

 [B17]
   1: DeclRefExpr 0x561ce745f690 <llex.c:315:15> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce745f708 <llex.c:315:15> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745f690 <col:15> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B17.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce745f6b8 <llex.c:315:20> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745f758 <llex.c:315:20> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745f6b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B17.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce745f6e0 <llex.c:315:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   6: ImplicitCastExpr 0x561ce745f770 <llex.c:315:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745f6e0 <col:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B17.5] (ImplicitCastExpr, LValueToRValue, int)
   7: CallExpr 0x561ce745f720 <llex.c:315:15, col:25> 'void'
|-ImplicitCastExpr 0x561ce745f708 <col:15> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745f690 <col:15> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce745f758 <col:20> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745f6b8 <col:20> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745f770 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce745f6e0 <col:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B17.2]([B17.4], [B17.6])
   Preds (2): B18 B19
   Succs (1): B16

 [B18]
   1: DeclRefExpr 0x561ce745f4b8 <llex.c:314:17> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x561ce745f5b8 <llex.c:314:17> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745f4b8 <col:17> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B18.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x561ce745f4e0 <llex.c:314:31> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745f610 <llex.c:314:31> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745f4e0 <col:31> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B18.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce745f548 <llex.c:314:35> 'char [26]' lvalue "escape sequence too large"
"escape sequence too large"
   6: ImplicitCastExpr 0x561ce745f628 <llex.c:314:35> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce745f548 <col:35> 'char [26]' lvalue "escape sequence too large"
[B18.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce745f640 <llex.c:314:35> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce745f628 <col:35> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce745f548 <col:35> 'char [26]' lvalue "escape sequence too large"
[B18.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x561ce745f590 <llex.c:314:64> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
TK_STRING
   9: CallExpr 0x561ce745f5d0 <llex.c:314:17, col:73> 'void'
|-ImplicitCastExpr 0x561ce745f5b8 <col:17> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745f4b8 <col:17> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce745f610 <col:31> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745f4e0 <col:31> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce745f640 <col:35> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce745f628 <col:35> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561ce745f548 <col:35> 'char [26]' lvalue "escape sequence too large"
`-DeclRefExpr 0x561ce745f590 <col:64> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
[B18.2]([B18.4], [B18.7], [B18.8])
   Preds (1): B19
   Succs (1): B17

 [B19]
   1: DeclRefExpr 0x561ce745f380 <llex.c:313:19> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   2: ImplicitCastExpr 0x561ce745f478 <llex.c:313:19> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745f380 <col:19> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B19.1] (ImplicitCastExpr, LValueToRValue, int)
   3: IntegerLiteral 0x561ce745f3a8 <<built-in>:35:23> 'int' 127
127
   4: IntegerLiteral 0x561ce745f3c8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' 2
2
   5: BinaryOperator 0x561ce745f3e8 <<built-in>:35:23, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' '*'
|-IntegerLiteral 0x561ce745f3a8 <<built-in>:35:23> 'int' 127
`-IntegerLiteral 0x561ce745f3c8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' 2
[B19.3] * [B19.4]
   6: IntegerLiteral 0x561ce745f410 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:38> 'int' 1
1
   7: BinaryOperator 0x561ce745f430 <<built-in>:35:23, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:38> 'int' '+'
|-BinaryOperator 0x561ce745f3e8 <<built-in>:35:23, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' '*'
| |-IntegerLiteral 0x561ce745f3a8 <<built-in>:35:23> 'int' 127
| `-IntegerLiteral 0x561ce745f3c8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' 2
`-IntegerLiteral 0x561ce745f410 <col:38> 'int' 1
[B19.5] + [B19.6]
   8: BinaryOperator 0x561ce745f490 <llex.c:313:19, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:39> 'int' '>'
|-ImplicitCastExpr 0x561ce745f478 <llex.c:313:19> 'int' <LValueToRValue>
| `-DeclRefExpr 0x561ce745f380 <col:19> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-ParenExpr 0x561ce745f458 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:19, col:39> 'int'
  `-BinaryOperator 0x561ce745f430 <<built-in>:35:23, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:38> 'int' '+'
    |-BinaryOperator 0x561ce745f3e8 <<built-in>:35:23, /home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' '*'
    | |-IntegerLiteral 0x561ce745f3a8 <<built-in>:35:23> 'int' 127
    | `-IntegerLiteral 0x561ce745f3c8 </home/anderson/Documents/llvm/build/lib/clang/6.0.1/include/limits.h:70:34> 'int' 2
    `-IntegerLiteral 0x561ce745f410 <col:38> 'int' 1
[B19.2] > ([B19.7])
   T: if [B19.8]
   Preds (1): B20
   Succs (2): B18 B17

 [B20]
   1: BinaryOperator 0x561ce745f338 <llex.c:312:24, /usr/include/ctype.h:89:62> 'int' '&&'
|-BinaryOperator 0x561ce745ea80 <llex.c:312:24, col:28> 'int' '<'
| |-UnaryOperator 0x561ce745ea40 <col:24, col:26> 'int' prefix '++'
| | `-DeclRefExpr 0x561ce745ea18 <col:26> 'int' lvalue Var 0x561ce745e0a8 'i' 'int'
| `-IntegerLiteral 0x561ce745ea60 <col:28> 'int' 3
`-ParenExpr 0x561ce745f318 </usr/include/ctype.h:89:3, col:62> 'int'
  `-BinaryOperator 0x561ce745f2f0 <col:4, line:192:36> 'int' '&'
    |-ImplicitCastExpr 0x561ce745f2c0 <line:89:4, col:33> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x561ce745f2a8 <col:4, col:33> 'unsigned short' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x561ce745f218 <col:4, col:33> 'const unsigned short' lvalue
    |     |-ImplicitCastExpr 0x561ce745f200 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    |     | `-ParenExpr 0x561ce745eb30 <col:4, col:22> 'const unsigned short *' lvalue
    |     |   `-UnaryOperator 0x561ce745eb10 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     |     `-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
    |     |       `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |     |         `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    |     `-CStyleCastExpr 0x561ce745f1d8 <col:24, col:32> 'int' <NoOp>
    |       `-ImplicitCastExpr 0x561ce745f1c0 <col:30, col:32> 'int' <LValueToRValue>
    |         `-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
    |           `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
    |             `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
    |               `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
    |                 `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ImplicitCastExpr 0x561ce745f2d8 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
      `-CStyleCastExpr 0x561ce745f280 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
        `-DeclRefExpr 0x561ce745f240 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B22.4] && ([B21.17])
   T: do ... while [B20.1]
   Preds (2): B21 B22
   Succs (2): B27 B19

 [B21]
   1: DeclRefExpr 0x561ce745eaa8 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce745ead0 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B21.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce745eae8 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B21.2]()
   4: UnaryOperator 0x561ce745eb10 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B21.3]
   5: ImplicitCastExpr 0x561ce745f200 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce745eb30 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce745eb10 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B21.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce745f0c0 <llex.c:312:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce745f0e8 <llex.c:312:41> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B21.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B21.7]->current
   9: ImplicitCastExpr 0x561ce745f1c0 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B21.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce745f1d8 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce745f1c0 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)[B21.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce745f218 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce745f200 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce745eb30 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce745eb10 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce745f1d8 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce745f1c0 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B21.5][[B21.10]]
  12: ImplicitCastExpr 0x561ce745f2a8 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce745f218 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce745f200 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce745eb30 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce745eb10 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce745f1d8 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce745f1c0 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B21.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce745f2c0 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce745f2a8 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce745f218 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce745f200 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce745eb30 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce745eb10 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce745f1d8 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce745f1c0 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B21.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce745f240 </usr/include/ctype.h:192:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
_ISdigit
  15: CStyleCastExpr 0x561ce745f280 </usr/include/ctype.h:89:37, line:192:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce745f240 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
(unsigned short)[B21.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce745f2d8 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce745f280 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce745f240 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B21.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce745f2f0 </usr/include/ctype.h:89:4, line:192:36> 'int' '&'
|-ImplicitCastExpr 0x561ce745f2c0 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce745f2a8 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce745f218 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce745f200 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce745eb30 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce745eb10 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce745eae8 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce745ead0 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce745eaa8 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce745f1d8 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce745f1c0 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce745f1a0 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce745f138 <line:192:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce745f100 <llex.c:312:41, col:45> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce745f0e8 <col:41> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce745f0c0 <col:41> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745f2d8 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce745f280 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce745f240 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B21.13] & [B21.16]
   Preds (1): B22
   Succs (1): B20

 [B22]
   1: DeclRefExpr 0x561ce745ea18 <llex.c:312:26> 'int' lvalue Var 0x561ce745e0a8 'i' 'int'
i
   2: UnaryOperator 0x561ce745ea40 <llex.c:312:24, col:26> 'int' prefix '++'
`-DeclRefExpr 0x561ce745ea18 <col:26> 'int' lvalue Var 0x561ce745e0a8 'i' 'int'
++[B22.1]
   3: IntegerLiteral 0x561ce745ea60 <llex.c:312:28> 'int' 3
3
   4: BinaryOperator 0x561ce745ea80 <llex.c:312:24, col:28> 'int' '<'
|-UnaryOperator 0x561ce745ea40 <col:24, col:26> 'int' prefix '++'
| `-DeclRefExpr 0x561ce745ea18 <col:26> 'int' lvalue Var 0x561ce745e0a8 'i' 'int'
`-IntegerLiteral 0x561ce745ea60 <col:28> 'int' 3
[B22.2] < [B22.3]
   T: [B22.4] && ...
   Preds (1): B23
   Succs (2): B21 B20

 [B23]
   1: ConditionalOperator 0x561ce745e960 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce745e578 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce745e520 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce745e500 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce745e4c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce745e4b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce745e490 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745e560 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce745e540 <col:31> 'int' 0
|-ParenExpr 0x561ce745e840 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745e818 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745e7f8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce745e790 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce745e768 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce745e750 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce745e730 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce745e6c8 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce745e6a8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce745e688 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce745e918 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745e900 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745e860 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745e948 <llex.c:311:22, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745e8c8 <line:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745e8b0 <line:311:22> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745e888 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.22] ? ([B24.10]) : [B25.7]
   2: DeclRefExpr 0x561ce745e3a0 <llex.c:311:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745e3c8 <llex.c:311:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745e3a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B23.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745e3e0 <llex.c:311:22, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745e3c8 <line:311:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745e3a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B23.3]->current
   5: BinaryOperator 0x561ce745e9b0 <llex.c:311:22, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce745e3e0 <llex.c:311:22, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce745e3c8 <line:311:22> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745e3a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745e990 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745e960 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce745e578 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce745e520 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce745e500 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce745e4c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce745e4b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce745e490 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce745e560 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce745e540 <col:31> 'int' 0
    |-ParenExpr 0x561ce745e840 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745e818 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745e7f8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce745e790 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce745e768 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce745e750 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce745e730 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce745e6c8 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce745e6a8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce745e688 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce745e918 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745e900 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745e860 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745e948 <llex.c:311:22, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745e8c8 <line:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745e8b0 <line:311:22> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745e888 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B23.4] = ([B23.1])
   Preds (2): B24 B25
   Succs (1): B22

 [B24]
   1: DeclRefExpr 0x561ce745e5a0 <llex.c:311:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745e5c8 <llex.c:311:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B24.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B24.2]->z
   4: ImplicitCastExpr 0x561ce745e638 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B24.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745e650 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B24.4]->p
   6: UnaryOperator 0x561ce745e688 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B24.5]++
   7: UnaryOperator 0x561ce745e6a8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce745e688 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B24.6]
   8: ImplicitCastExpr 0x561ce745e750 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce745e730 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce745e6c8 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce745e6a8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce745e688 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B24.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce745e768 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce745e750 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce745e730 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce745e6c8 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce745e6a8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce745e688 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B24.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745e818 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745e7f8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce745e790 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce745e768 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce745e750 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce745e730 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce745e6c8 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce745e6a8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce745e688 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce745e650 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce745e638 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce745e618 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce745e5e0 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce745e5c8 <line:311:22> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce745e5a0 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B24.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B26
   Succs (1): B23

 [B25]
   1: DeclRefExpr 0x561ce745e860 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745e900 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745e860 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B25.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745e888 <llex.c:311:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745e8b0 <llex.c:311:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745e888 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B25.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745e8c8 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745e8b0 <line:311:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745e888 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B25.4]->z
   6: ImplicitCastExpr 0x561ce745e948 <llex.c:311:22, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745e8c8 <line:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745e8b0 <line:311:22> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745e888 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B25.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745e918 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745e900 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745e860 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745e948 <llex.c:311:22, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745e8c8 <line:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745e8b0 <line:311:22> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745e888 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B25.2]([B25.6])
   Preds (1): B26
   Succs (1): B23

 [B26]
   1: IntegerLiteral 0x561ce745e1d8 <llex.c:310:21> 'int' 10
10
   2: DeclRefExpr 0x561ce745e1f8 <llex.c:310:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: ImplicitCastExpr 0x561ce745e220 <llex.c:310:24> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745e1f8 <col:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B26.2] (ImplicitCastExpr, LValueToRValue, int)
   4: BinaryOperator 0x561ce745e238 <llex.c:310:21, col:24> 'int' '*'
|-IntegerLiteral 0x561ce745e1d8 <col:21> 'int' 10
`-ImplicitCastExpr 0x561ce745e220 <col:24> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce745e1f8 <col:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
[B26.1] * [B26.3]
   5: DeclRefExpr 0x561ce745e260 <llex.c:310:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce745e288 <llex.c:310:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745e260 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce745e2a0 <llex.c:310:29, col:33> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745e288 <col:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745e260 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.6]->current
   8: ImplicitCastExpr 0x561ce745e2f0 <llex.c:310:29, col:33> 'int' <LValueToRValue>
`-MemberExpr 0x561ce745e2a0 <col:29, col:33> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce745e288 <col:29> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745e260 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CharacterLiteral 0x561ce745e2d8 <llex.c:310:41> 'int' 48
'0'
  10: BinaryOperator 0x561ce745e308 <llex.c:310:29, col:41> 'int' '-'
|-ImplicitCastExpr 0x561ce745e2f0 <col:29, col:33> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce745e2a0 <col:29, col:33> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce745e288 <col:29> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce745e260 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CharacterLiteral 0x561ce745e2d8 <col:41> 'int' 48
[B26.8] - [B26.9]
  11: BinaryOperator 0x561ce745e350 <llex.c:310:21, col:44> 'int' '+'
|-BinaryOperator 0x561ce745e238 <col:21, col:24> 'int' '*'
| |-IntegerLiteral 0x561ce745e1d8 <col:21> 'int' 10
| `-ImplicitCastExpr 0x561ce745e220 <col:24> 'int' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745e1f8 <col:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-ParenExpr 0x561ce745e330 <col:28, col:44> 'int'
  `-BinaryOperator 0x561ce745e308 <col:29, col:41> 'int' '-'
    |-ImplicitCastExpr 0x561ce745e2f0 <col:29, col:33> 'int' <LValueToRValue>
    | `-MemberExpr 0x561ce745e2a0 <col:29, col:33> 'int' lvalue ->current 0x561ce74267f0
    |   `-ImplicitCastExpr 0x561ce745e288 <col:29> 'LexState *' <LValueToRValue>
    |     `-DeclRefExpr 0x561ce745e260 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CharacterLiteral 0x561ce745e2d8 <col:41> 'int' 48
[B26.4] + ([B26.10])
  12: DeclRefExpr 0x561ce745e1b0 <llex.c:310:17> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
  13: BinaryOperator 0x561ce745e378 <llex.c:310:17, col:44> 'int' '='
|-DeclRefExpr 0x561ce745e1b0 <col:17> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-BinaryOperator 0x561ce745e350 <col:21, col:44> 'int' '+'
  |-BinaryOperator 0x561ce745e238 <col:21, col:24> 'int' '*'
  | |-IntegerLiteral 0x561ce745e1d8 <col:21> 'int' 10
  | `-ImplicitCastExpr 0x561ce745e220 <col:24> 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x561ce745e1f8 <col:24> 'int' lvalue Var 0x561ce745c590 'c' 'int'
  `-ParenExpr 0x561ce745e330 <col:28, col:44> 'int'
    `-BinaryOperator 0x561ce745e308 <col:29, col:41> 'int' '-'
      |-ImplicitCastExpr 0x561ce745e2f0 <col:29, col:33> 'int' <LValueToRValue>
      | `-MemberExpr 0x561ce745e2a0 <col:29, col:33> 'int' lvalue ->current 0x561ce74267f0
      |   `-ImplicitCastExpr 0x561ce745e288 <col:29> 'LexState *' <LValueToRValue>
      |     `-DeclRefExpr 0x561ce745e260 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
      `-CharacterLiteral 0x561ce745e2d8 <col:41> 'int' 48
[B26.12] = [B26.11]
  14: DeclRefExpr 0x561ce745e418 <llex.c:311:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  15: ImplicitCastExpr 0x561ce745e440 <llex.c:311:22> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.14] (ImplicitCastExpr, LValueToRValue, LexState *)
  16: MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.15]->z
  17: ImplicitCastExpr 0x561ce745e4b0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745e490 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B26.16]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  18: MemberExpr 0x561ce745e4c8 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce745e4b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745e490 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.17]->n
  19: UnaryOperator 0x561ce745e500 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce745e4c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce745e4b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745e490 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B26.18]--
  20: IntegerLiteral 0x561ce745e540 <./lzio.h:22:31> 'int' 0
0
  21: ImplicitCastExpr 0x561ce745e560 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce745e540 <col:31> 'int' 0
[B26.20] (ImplicitCastExpr, IntegralCast, unsigned long)
  22: BinaryOperator 0x561ce745e578 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce745e520 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce745e500 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce745e4c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce745e4b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce745e490 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce745e458 <llex.c:311:22, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce745e440 <line:311:22> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745e418 <col:22> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745e560 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce745e540 <col:31> 'int' 0
([B26.19]) > [B26.21]
   T: [B26.22] ? ... : ...
   Preds (2): B27 B28
   Succs (2): B24 B25

 [B27]
   Preds (1): B20
   Succs (1): B26

 [B28]
   1: IntegerLiteral 0x561ce745e108 <llex.c:307:23> 'int' 0
0
   2: DeclStmt 0x561ce745e128 <llex.c:307:15, col:24>col:19
`-VarDecl 0x561ce745e0a8 <col:15, col:23> col:19 used i 'int' cinit
  `-IntegerLiteral 0x561ce745e108 <col:23> 'int' 0
int i = 0;
   3: IntegerLiteral 0x561ce745e168 <llex.c:308:19> 'int' 0
0
   4: DeclRefExpr 0x561ce745e140 <llex.c:308:15> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   5: BinaryOperator 0x561ce745e188 <llex.c:308:15, col:19> 'int' '='
|-DeclRefExpr 0x561ce745e140 <col:15> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-IntegerLiteral 0x561ce745e168 <col:19> 'int' 0
[B28.4] = [B28.3]
   Preds (1): B33
   Succs (1): B26

 [B29]
   1: ConditionalOperator 0x561ce745dfb0 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce745dbc8 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce745db70 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce745db50 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce745db18 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce745db00 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745dbb0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce745db90 <col:31> 'int' 0
|-ParenExpr 0x561ce745de90 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745de68 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745de48 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce745dde0 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce745ddb8 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce745dda0 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce745dd80 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce745dd18 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce745dcf8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce745df68 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745df50 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745deb0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745df98 <llex.c:305:29, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745df18 <line:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745df00 <line:305:29> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.18] ? ([B30.10]) : [B31.7]
   2: DeclRefExpr 0x561ce745d9f0 <llex.c:305:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745da18 <llex.c:305:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745d9f0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B29.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745da30 <llex.c:305:29, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745da18 <line:305:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745d9f0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B29.3]->current
   5: BinaryOperator 0x561ce745e000 <llex.c:305:29, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce745da30 <llex.c:305:29, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce745da18 <line:305:29> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745d9f0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745dfe0 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745dfb0 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce745dbc8 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce745db70 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce745db50 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce745db18 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce745db00 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce745dbb0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce745db90 <col:31> 'int' 0
    |-ParenExpr 0x561ce745de90 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745de68 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745de48 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce745dde0 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce745ddb8 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce745dda0 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce745dd80 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce745dd18 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce745dcf8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce745df68 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745df50 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745deb0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745df98 <llex.c:305:29, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745df18 <line:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745df00 <line:305:29> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B29.4] = ([B29.1])
   6: BinaryOperator 0x561ce745e048 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce745d988 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce745d970 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce745d8a8 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce745d9c0 <line:305:29> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce745d8d0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745d9d8 <col:29, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce745d938 <line:305:29, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce745d920 <line:305:29> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce745d8f8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745e028 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce745e000 <line:305:29, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce745da30 <llex.c:305:29, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce745da18 <line:305:29> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce745d9f0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ParenExpr 0x561ce745dfe0 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce745dfb0 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce745dbc8 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce745db70 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce745db50 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce745db18 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce745db00 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce745dbb0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce745db90 <col:31> 'int' 0
        |-ParenExpr 0x561ce745de90 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce745de68 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce745de48 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce745dde0 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce745ddb8 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce745dda0 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce745dd80 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce745dd18 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce745dcf8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        `-CallExpr 0x561ce745df68 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce745df50 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce745deb0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce745df98 <llex.c:305:29, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce745df18 <line:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce745df00 <line:305:29> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
... , 
   Preds (2): B30 B31
   Succs (1): B16

 [B30]
   1: DeclRefExpr 0x561ce745dbf0 <llex.c:305:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745dc18 <llex.c:305:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B30.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B30.2]->z
   4: ImplicitCastExpr 0x561ce745dc88 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B30.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745dca0 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B30.4]->p
   6: UnaryOperator 0x561ce745dcd8 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B30.5]++
   7: UnaryOperator 0x561ce745dcf8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B30.6]
   8: ImplicitCastExpr 0x561ce745dda0 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce745dd80 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce745dd18 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce745dcf8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B30.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce745ddb8 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce745dda0 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce745dd80 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce745dd18 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce745dcf8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B30.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745de68 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745de48 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce745dde0 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce745ddb8 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce745dda0 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce745dd80 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce745dd18 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce745dcf8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce745dcd8 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce745dca0 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce745dc88 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce745dc68 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce745dc30 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce745dc18 <line:305:29> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce745dbf0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B30.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B32
   Succs (1): B29

 [B31]
   1: DeclRefExpr 0x561ce745deb0 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745df50 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745deb0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B31.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745ded8 <llex.c:305:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745df00 <llex.c:305:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B31.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745df18 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745df00 <line:305:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B31.4]->z
   6: ImplicitCastExpr 0x561ce745df98 <llex.c:305:29, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745df18 <line:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745df00 <line:305:29> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B31.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745df68 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745df50 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745deb0 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745df98 <llex.c:305:29, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745df18 <line:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745df00 <line:305:29> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745ded8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B31.2]([B31.6])
   Preds (1): B32
   Succs (1): B29

 [B32]
   1: DeclRefExpr 0x561ce745d8a8 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce745d970 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745d8a8 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B32.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce745d8d0 <llex.c:305:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745d9c0 <llex.c:305:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745d8d0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce745d8f8 <llex.c:305:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce745d920 <llex.c:305:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745d8f8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce745d938 <llex.c:305:29, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745d920 <line:305:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745d8f8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.6]->current
   8: ImplicitCastExpr 0x561ce745d9d8 <llex.c:305:29, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce745d938 <line:305:29, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce745d920 <line:305:29> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745d8f8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce745d988 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce745d970 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745d8a8 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce745d9c0 <line:305:29> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745d8d0 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745d9d8 <col:29, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce745d938 <line:305:29, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce745d920 <line:305:29> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745d8f8 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.2]([B32.4], [B32.8])
  10: DeclRefExpr 0x561ce745da68 <llex.c:305:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce745da90 <llex.c:305:29> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.11]->z
  13: ImplicitCastExpr 0x561ce745db00 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B32.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce745db18 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce745db00 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.13]->n
  15: UnaryOperator 0x561ce745db50 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce745db18 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce745db00 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B32.14]--
  16: IntegerLiteral 0x561ce745db90 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce745dbb0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce745db90 <col:31> 'int' 0
[B32.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce745dbc8 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce745db70 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce745db50 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce745db18 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce745db00 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce745dae0 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce745daa8 <llex.c:305:29, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce745da90 <line:305:29> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745da68 <col:29> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745dbb0 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce745db90 <col:31> 'int' 0
([B32.15]) > [B32.17]
   T: [B32.18] ? ... : ...
   Preds (1): B33
   Succs (2): B30 B31

 [B33]
  default:
   1: DeclRefExpr 0x561ce745d568 </usr/include/ctype.h:89:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
__ctype_b_loc
   2: ImplicitCastExpr 0x561ce745d590 </usr/include/ctype.h:89:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B33.1] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned short **(*)(void))
   3: CallExpr 0x561ce745d5a8 </usr/include/ctype.h:89:6, col:21> 'const unsigned short **'
`-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
[B33.2]()
   4: UnaryOperator 0x561ce745d5d0 </usr/include/ctype.h:89:5, col:21> 'const unsigned short *' lvalue prefix '*'
`-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
  `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
*[B33.3]
   5: ImplicitCastExpr 0x561ce745d750 </usr/include/ctype.h:89:4, col:22> 'const unsigned short *' <LValueToRValue>
`-ParenExpr 0x561ce745d5f0 <col:4, col:22> 'const unsigned short *' lvalue
  `-UnaryOperator 0x561ce745d5d0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    `-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
      `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
([B33.4]) (ImplicitCastExpr, LValueToRValue, const unsigned short *)
   6: DeclRefExpr 0x561ce745d610 <llex.c:304:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   7: ImplicitCastExpr 0x561ce745d638 <llex.c:304:26> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B33.6] (ImplicitCastExpr, LValueToRValue, LexState *)
   8: MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B33.7]->current
   9: ImplicitCastExpr 0x561ce745d710 </usr/include/ctype.h:89:30, col:32> 'int' <LValueToRValue>
`-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
  `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
    `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
      `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B33.8])) (ImplicitCastExpr, LValueToRValue, int)
  10: CStyleCastExpr 0x561ce745d728 </usr/include/ctype.h:89:24, col:32> 'int' <NoOp>
`-ImplicitCastExpr 0x561ce745d710 <col:30, col:32> 'int' <LValueToRValue>
  `-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
    `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
      `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
        `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)[B33.9] (CStyleCastExpr, NoOp, int)
  11: ArraySubscriptExpr 0x561ce745d768 </usr/include/ctype.h:89:4, col:33> 'const unsigned short' lvalue
|-ImplicitCastExpr 0x561ce745d750 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
| `-ParenExpr 0x561ce745d5f0 <col:4, col:22> 'const unsigned short *' lvalue
|   `-UnaryOperator 0x561ce745d5d0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     `-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
|       `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
`-CStyleCastExpr 0x561ce745d728 <col:24, col:32> 'int' <NoOp>
  `-ImplicitCastExpr 0x561ce745d710 <col:30, col:32> 'int' <LValueToRValue>
    `-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
      `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
        `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
          `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B33.5][[B33.10]]
  12: ImplicitCastExpr 0x561ce745d7f8 </usr/include/ctype.h:89:4, col:33> 'unsigned short' <LValueToRValue>
`-ArraySubscriptExpr 0x561ce745d768 <col:4, col:33> 'const unsigned short' lvalue
  |-ImplicitCastExpr 0x561ce745d750 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
  | `-ParenExpr 0x561ce745d5f0 <col:4, col:22> 'const unsigned short *' lvalue
  |   `-UnaryOperator 0x561ce745d5d0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
  |     `-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
  |       `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
  |         `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
  `-CStyleCastExpr 0x561ce745d728 <col:24, col:32> 'int' <NoOp>
    `-ImplicitCastExpr 0x561ce745d710 <col:30, col:32> 'int' <LValueToRValue>
      `-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
        `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
          `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
            `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
              `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B33.11] (ImplicitCastExpr, LValueToRValue, unsigned short)
  13: ImplicitCastExpr 0x561ce745d810 </usr/include/ctype.h:89:4, col:33> 'int' <IntegralCast>
`-ImplicitCastExpr 0x561ce745d7f8 <col:4, col:33> 'unsigned short' <LValueToRValue>
  `-ArraySubscriptExpr 0x561ce745d768 <col:4, col:33> 'const unsigned short' lvalue
    |-ImplicitCastExpr 0x561ce745d750 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    | `-ParenExpr 0x561ce745d5f0 <col:4, col:22> 'const unsigned short *' lvalue
    |   `-UnaryOperator 0x561ce745d5d0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     `-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
    |       `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    `-CStyleCastExpr 0x561ce745d728 <col:24, col:32> 'int' <NoOp>
      `-ImplicitCastExpr 0x561ce745d710 <col:30, col:32> 'int' <LValueToRValue>
        `-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
          `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
            `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
              `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B33.12] (ImplicitCastExpr, IntegralCast, int)
  14: DeclRefExpr 0x561ce745d790 </usr/include/ctype.h:192:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
_ISdigit
  15: CStyleCastExpr 0x561ce745d7d0 </usr/include/ctype.h:89:37, line:192:36> 'unsigned short' <IntegralCast>
`-DeclRefExpr 0x561ce745d790 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
(unsigned short)[B33.14] (CStyleCastExpr, IntegralCast, unsigned short)
  16: ImplicitCastExpr 0x561ce745d828 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
`-CStyleCastExpr 0x561ce745d7d0 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
  `-DeclRefExpr 0x561ce745d790 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B33.15] (ImplicitCastExpr, IntegralCast, int)
  17: BinaryOperator 0x561ce745d840 </usr/include/ctype.h:89:4, line:192:36> 'int' '&'
|-ImplicitCastExpr 0x561ce745d810 <line:89:4, col:33> 'int' <IntegralCast>
| `-ImplicitCastExpr 0x561ce745d7f8 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   `-ArraySubscriptExpr 0x561ce745d768 <col:4, col:33> 'const unsigned short' lvalue
|     |-ImplicitCastExpr 0x561ce745d750 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|     | `-ParenExpr 0x561ce745d5f0 <col:4, col:22> 'const unsigned short *' lvalue
|     |   `-UnaryOperator 0x561ce745d5d0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
|     |     `-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
|     |       `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|     |         `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
|     `-CStyleCastExpr 0x561ce745d728 <col:24, col:32> 'int' <NoOp>
|       `-ImplicitCastExpr 0x561ce745d710 <col:30, col:32> 'int' <LValueToRValue>
|         `-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
|           `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
|             `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
|               `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745d828 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
  `-CStyleCastExpr 0x561ce745d7d0 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
    `-DeclRefExpr 0x561ce745d790 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
[B33.13] & [B33.16]
  18: UnaryOperator 0x561ce745d888 <llex.c:304:17, /usr/include/ctype.h:89:62> 'int' prefix '!'
`-ParenExpr 0x561ce745d868 <col:3, col:62> 'int'
  `-BinaryOperator 0x561ce745d840 <col:4, line:192:36> 'int' '&'
    |-ImplicitCastExpr 0x561ce745d810 <line:89:4, col:33> 'int' <IntegralCast>
    | `-ImplicitCastExpr 0x561ce745d7f8 <col:4, col:33> 'unsigned short' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x561ce745d768 <col:4, col:33> 'const unsigned short' lvalue
    |     |-ImplicitCastExpr 0x561ce745d750 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
    |     | `-ParenExpr 0x561ce745d5f0 <col:4, col:22> 'const unsigned short *' lvalue
    |     |   `-UnaryOperator 0x561ce745d5d0 <col:5, col:21> 'const unsigned short *' lvalue prefix '*'
    |     |     `-CallExpr 0x561ce745d5a8 <col:6, col:21> 'const unsigned short **'
    |     |       `-ImplicitCastExpr 0x561ce745d590 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
    |     |         `-DeclRefExpr 0x561ce745d568 <col:6> 'const unsigned short **(void)' Function 0x561ce73070f0 '__ctype_b_loc' 'const unsigned short **(void)'
    |     `-CStyleCastExpr 0x561ce745d728 <col:24, col:32> 'int' <NoOp>
    |       `-ImplicitCastExpr 0x561ce745d710 <col:30, col:32> 'int' <LValueToRValue>
    |         `-ParenExpr 0x561ce745d6f0 <col:30, col:32> 'int' lvalue
    |           `-ParenExpr 0x561ce745d688 <line:192:31, col:33> 'int' lvalue
    |             `-MemberExpr 0x561ce745d650 <llex.c:304:26, col:30> 'int' lvalue ->current 0x561ce74267f0
    |               `-ImplicitCastExpr 0x561ce745d638 <col:26> 'LexState *' <LValueToRValue>
    |                 `-DeclRefExpr 0x561ce745d610 <col:26> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ImplicitCastExpr 0x561ce745d828 </usr/include/ctype.h:89:37, line:192:36> 'int' <IntegralCast>
      `-CStyleCastExpr 0x561ce745d7d0 <line:89:37, line:192:36> 'unsigned short' <IntegralCast>
        `-DeclRefExpr 0x561ce745d790 <col:36> 'int' EnumConstant 0x561ce7305500 '_ISdigit' 'int'
!([B33.17])
   T: if [B33.18]
   Preds (1): B15
   Succs (2): B32 B28

 [B34]
  case (-1):
   T: continue;
   Preds (1): B15
   Succs (1): B5

 [B35]
  case '\r':
   1: DeclRefExpr 0x561ce745d340 <llex.c:301:22> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce745d3a8 <llex.c:301:22> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745d340 <col:22> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B35.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce745d368 <llex.c:301:27> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745d3f8 <llex.c:301:27> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745d368 <col:27> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B35.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: CharacterLiteral 0x561ce745d390 <llex.c:301:31> 'int' 10
'\n'
   6: CallExpr 0x561ce745d3c0 <llex.c:301:22, col:35> 'void'
|-ImplicitCastExpr 0x561ce745d3a8 <col:22> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745d340 <col:22> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce745d3f8 <col:27> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745d368 <col:27> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CharacterLiteral 0x561ce745d390 <col:31> 'int' 10
[B35.2]([B35.4], [B35.5])
   7: DeclRefExpr 0x561ce745d410 <llex.c:301:38> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
inclinenumber
   8: ImplicitCastExpr 0x561ce745d460 <llex.c:301:38> 'void (*)(LexState *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745d410 <col:38> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
[B35.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *))
   9: DeclRefExpr 0x561ce745d438 <llex.c:301:52> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  10: ImplicitCastExpr 0x561ce745d4a8 <llex.c:301:52> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745d438 <col:52> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B35.9] (ImplicitCastExpr, LValueToRValue, LexState *)
  11: CallExpr 0x561ce745d478 <llex.c:301:38, col:54> 'void'
|-ImplicitCastExpr 0x561ce745d460 <col:38> 'void (*)(LexState *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745d410 <col:38> 'void (LexState *)' Function 0x561ce7449990 'inclinenumber' 'void (LexState *)'
`-ImplicitCastExpr 0x561ce745d4a8 <col:52> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745d438 <col:52> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B35.8]([B35.10])
   T: continue;
   Preds (2): B15 B36
   Succs (1): B5

 [B36]
  case '\n':
   Preds (1): B15
   Succs (1): B35

 [B37]
  case 'v':
   1: CharacterLiteral 0x561ce745d258 <llex.c:299:25> 'int' 11
'\v'
   2: DeclRefExpr 0x561ce745d230 <llex.c:299:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745d270 <llex.c:299:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745d230 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745d258 <col:25> 'int' 11
[B37.2] = [B37.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B38]
  case 't':
   1: CharacterLiteral 0x561ce745d198 <llex.c:298:25> 'int' 9
'\t'
   2: DeclRefExpr 0x561ce745d170 <llex.c:298:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745d1b0 <llex.c:298:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745d170 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745d198 <col:25> 'int' 9
[B38.2] = [B38.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B39]
  case 'r':
   1: CharacterLiteral 0x561ce745d0d8 <llex.c:297:25> 'int' 13
'\r'
   2: DeclRefExpr 0x561ce745d0b0 <llex.c:297:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745d0f0 <llex.c:297:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745d0b0 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745d0d8 <col:25> 'int' 13
[B39.2] = [B39.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B40]
  case 'n':
   1: CharacterLiteral 0x561ce745d018 <llex.c:296:25> 'int' 10
'\n'
   2: DeclRefExpr 0x561ce745cff0 <llex.c:296:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745d030 <llex.c:296:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745cff0 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745d018 <col:25> 'int' 10
[B40.2] = [B40.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B41]
  case 'f':
   1: CharacterLiteral 0x561ce745cf58 <llex.c:295:25> 'int' 12
'\f'
   2: DeclRefExpr 0x561ce745cf30 <llex.c:295:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745cf70 <llex.c:295:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745cf30 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745cf58 <col:25> 'int' 12
[B41.2] = [B41.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B42]
  case 'b':
   1: CharacterLiteral 0x561ce745ce98 <llex.c:294:25> 'int' 8
'\b'
   2: DeclRefExpr 0x561ce745ce70 <llex.c:294:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745ceb0 <llex.c:294:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745ce70 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745ce98 <col:25> 'int' 8
[B42.2] = [B42.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B43]
  case 'a':
   1: CharacterLiteral 0x561ce745cdd8 <llex.c:293:25> 'int' 7
'\a'
   2: DeclRefExpr 0x561ce745cdb0 <llex.c:293:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
c
   3: BinaryOperator 0x561ce745cdf0 <llex.c:293:21, col:25> 'int' '='
|-DeclRefExpr 0x561ce745cdb0 <col:21> 'int' lvalue Var 0x561ce745c590 'c' 'int'
`-CharacterLiteral 0x561ce745cdd8 <col:25> 'int' 7
[B43.2] = [B43.1]
   T: break;
   Preds (1): B15
   Succs (1): B14

 [B44]
   1: DeclRefExpr 0x561ce745c808 <llex.c:291:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745c830 <llex.c:291:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B44.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B44.2]->z
   4: ImplicitCastExpr 0x561ce745c8a0 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B44.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745c8b8 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B44.4]->p
   6: UnaryOperator 0x561ce745c8f0 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B44.5]++
   7: UnaryOperator 0x561ce745c910 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce745c8f0 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B44.6]
   8: ImplicitCastExpr 0x561ce745c9b8 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce745c998 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce745c930 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce745c910 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce745c8f0 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B44.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce745c9d0 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce745c9b8 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce745c998 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce745c930 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce745c910 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce745c8f0 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B44.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745ca80 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745ca60 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce745c9f8 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce745c9d0 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce745c9b8 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce745c998 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce745c930 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce745c910 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce745c8f0 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce745c8b8 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce745c8a0 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce745c880 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce745c848 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce745c830 <line:291:14> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce745c808 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B44.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B46
   Succs (1): B15

 [B45]
   1: DeclRefExpr 0x561ce745cac8 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745cba8 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745cac8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B45.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745caf0 <llex.c:291:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745cb18 <llex.c:291:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745caf0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B45.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745cb70 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745cb18 <line:291:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745caf0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B45.4]->z
   6: ImplicitCastExpr 0x561ce745cbf0 <llex.c:291:14, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745cb70 <line:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745cb18 <line:291:14> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745caf0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B45.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745cbc0 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745cba8 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745cac8 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745cbf0 <llex.c:291:14, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745cb70 <line:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745cb18 <line:291:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745caf0 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B45.2]([B45.6])
   Preds (1): B46
   Succs (1): B15

 [B46]
  case '\\':
   1: DeclStmt 0x561ce745c5f0 <llex.c:290:9, col:14>col:13
`-VarDecl 0x561ce745c590 <col:9, col:13> col:13 used c 'int'
int c;
   2: DeclRefExpr 0x561ce745c680 <llex.c:291:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745c6a8 <llex.c:291:14> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B46.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B46.3]->z
   5: ImplicitCastExpr 0x561ce745c718 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745c6f8 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B46.4]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   6: MemberExpr 0x561ce745c730 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce745c718 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745c6f8 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B46.5]->n
   7: UnaryOperator 0x561ce745c768 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce745c730 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce745c718 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745c6f8 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B46.6]--
   8: IntegerLiteral 0x561ce745c7a8 <./lzio.h:22:31> 'int' 0
0
   9: ImplicitCastExpr 0x561ce745c7c8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce745c7a8 <col:31> 'int' 0
[B46.8] (ImplicitCastExpr, IntegralCast, unsigned long)
  10: BinaryOperator 0x561ce745c7e0 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce745c788 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce745c768 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce745c730 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce745c718 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce745c6f8 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce745c6c0 <llex.c:291:14, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce745c6a8 <line:291:14> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745c680 <col:14> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745c7c8 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce745c7a8 <col:31> 'int' 0
([B46.7]) > [B46.9]
   T: [B46.10] ? ... : ...
   Preds (1): B6
   Succs (2): B44 B45

 [B47]
  case '\r':
   1: DeclRefExpr 0x561ce745c3c8 <llex.c:287:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x561ce745c480 <llex.c:287:9> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745c3c8 <col:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B47.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x561ce745c3f0 <llex.c:287:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745c4d8 <llex.c:287:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745c3f0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B47.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce745c418 <llex.c:287:27> 'char [18]' lvalue "unfinished string"
"unfinished string"
   6: ImplicitCastExpr 0x561ce745c4f0 <llex.c:287:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce745c418 <col:27> 'char [18]' lvalue "unfinished string"
[B47.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce745c508 <llex.c:287:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce745c4f0 <col:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce745c418 <col:27> 'char [18]' lvalue "unfinished string"
[B47.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x561ce745c458 <llex.c:287:48> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
TK_STRING
   9: CallExpr 0x561ce745c498 <llex.c:287:9, col:57> 'void'
|-ImplicitCastExpr 0x561ce745c480 <col:9> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745c3c8 <col:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce745c4d8 <col:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745c3f0 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce745c508 <col:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce745c4f0 <col:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561ce745c418 <col:27> 'char [18]' lvalue "unfinished string"
`-DeclRefExpr 0x561ce745c458 <col:48> 'int' EnumConstant 0x561ce7424f38 'TK_STRING' 'int'
[B47.2]([B47.4], [B47.7], [B47.8])
   T: continue;
   Preds (2): B6 B48
   Succs (1): B5

 [B48]
  case '\n':
   Preds (1): B6
   Succs (1): B47

 [B49]
  case (-1):
   1: DeclRefExpr 0x561ce745c190 <llex.c:283:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
luaX_lexerror
   2: ImplicitCastExpr 0x561ce745c280 <llex.c:283:9> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745c190 <col:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
[B49.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, const char *, int))
   3: DeclRefExpr 0x561ce745c1b8 <llex.c:283:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745c2d8 <llex.c:283:23> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745c1b8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B49.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: StringLiteral 0x561ce745c218 <llex.c:283:27> 'char [18]' lvalue "unfinished string"
"unfinished string"
   6: ImplicitCastExpr 0x561ce745c2f0 <llex.c:283:27> 'char *' <ArrayToPointerDecay>
`-StringLiteral 0x561ce745c218 <col:27> 'char [18]' lvalue "unfinished string"
[B49.5] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   7: ImplicitCastExpr 0x561ce745c308 <llex.c:283:27> 'const char *' <BitCast>
`-ImplicitCastExpr 0x561ce745c2f0 <col:27> 'char *' <ArrayToPointerDecay>
  `-StringLiteral 0x561ce745c218 <col:27> 'char [18]' lvalue "unfinished string"
[B49.6] (ImplicitCastExpr, BitCast, const char *)
   8: DeclRefExpr 0x561ce745c258 <llex.c:283:48> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
TK_EOS
   9: CallExpr 0x561ce745c298 <llex.c:283:9, col:54> 'void'
|-ImplicitCastExpr 0x561ce745c280 <col:9> 'void (*)(LexState *, const char *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745c190 <col:9> 'void (LexState *, const char *, int)' Function 0x561ce7447618 'luaX_lexerror' 'void (LexState *, const char *, int)'
|-ImplicitCastExpr 0x561ce745c2d8 <col:23> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745c1b8 <col:23> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
|-ImplicitCastExpr 0x561ce745c308 <col:27> 'const char *' <BitCast>
| `-ImplicitCastExpr 0x561ce745c2f0 <col:27> 'char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561ce745c218 <col:27> 'char [18]' lvalue "unfinished string"
`-DeclRefExpr 0x561ce745c258 <col:48> 'int' EnumConstant 0x561ce7424f80 'TK_EOS' 'int'
[B49.2]([B49.4], [B49.7], [B49.8])
   T: continue;
   Preds (1): B6
   Succs (1): B5

 [B50]
   1: DeclRefExpr 0x561ce745bf40 <llex.c:280:10> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745bf68 <llex.c:280:10> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745bf40 <col:10> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B50.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745bf80 <llex.c:280:10, col:14> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745bf68 <col:10> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745bf40 <col:10> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B50.2]->current
   4: ImplicitCastExpr 0x561ce745bfe0 <llex.c:280:10, col:14> 'int' <LValueToRValue>
`-MemberExpr 0x561ce745bf80 <col:10, col:14> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce745bf68 <col:10> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745bf40 <col:10> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B50.3] (ImplicitCastExpr, LValueToRValue, int)
   5: DeclRefExpr 0x561ce745bfb8 <llex.c:280:25> 'int' lvalue ParmVar 0x561ce745b500 'del' 'int'
del
   6: ImplicitCastExpr 0x561ce745bff8 <llex.c:280:25> 'int' <LValueToRValue>
`-DeclRefExpr 0x561ce745bfb8 <col:25> 'int' lvalue ParmVar 0x561ce745b500 'del' 'int'
[B50.5] (ImplicitCastExpr, LValueToRValue, int)
   7: BinaryOperator 0x561ce745c010 <llex.c:280:10, col:25> 'int' '!='
|-ImplicitCastExpr 0x561ce745bfe0 <col:10, col:14> 'int' <LValueToRValue>
| `-MemberExpr 0x561ce745bf80 <col:10, col:14> 'int' lvalue ->current 0x561ce74267f0
|   `-ImplicitCastExpr 0x561ce745bf68 <col:10> 'LexState *' <LValueToRValue>
|     `-DeclRefExpr 0x561ce745bf40 <col:10> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745bff8 <col:25> 'int' <LValueToRValue>
  `-DeclRefExpr 0x561ce745bfb8 <col:25> 'int' lvalue ParmVar 0x561ce745b500 'del' 'int'
[B50.4] != [B50.6]
   T: while [B50.7]
   Preds (2): B5 B51
   Succs (2): B6 B4

 [B51]
   1: ConditionalOperator 0x561ce745be60 <./lzio.h:22:20, col:69> 'int'
|-BinaryOperator 0x561ce745ba78 <col:20, col:31> 'int' '>'
| |-ParenExpr 0x561ce745ba20 <col:20, col:29> 'size_t':'unsigned long'
| | `-UnaryOperator 0x561ce745ba00 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
| |   `-MemberExpr 0x561ce745b9c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
| |     `-ImplicitCastExpr 0x561ce745b9b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
| |       `-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
| |         `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
| |           `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
| |             `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745ba60 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561ce745ba40 <col:31> 'int' 0
|-ParenExpr 0x561ce745bd40 <./llimits.h:75:22, col:31> 'int'
| `-CStyleCastExpr 0x561ce745bd18 <col:23, col:30> 'int' <IntegralCast>
|   `-ParenExpr 0x561ce745bcf8 <col:26, col:30> 'unsigned char'
|     `-ParenExpr 0x561ce745bc90 <col:22, col:31> 'unsigned char'
|       `-CStyleCastExpr 0x561ce745bc68 <col:23, col:30> 'unsigned char' <IntegralCast>
|         `-ImplicitCastExpr 0x561ce745bc50 <col:26, col:30> 'char' <LValueToRValue>
|           `-ParenExpr 0x561ce745bc30 <col:26, col:30> 'const char' lvalue
|             `-ParenExpr 0x561ce745bbc8 <./lzio.h:20:51, col:53> 'const char' lvalue
|               `-UnaryOperator 0x561ce745bba8 <line:22:45, col:52> 'const char' lvalue prefix '*'
|                 `-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
|                   `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
|                     `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
|                       `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
|                         `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|                           `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
|                             `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-CallExpr 0x561ce745be18 <./lzio.h:22:58, col:69> 'int'
  |-ImplicitCastExpr 0x561ce745be00 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561ce745bd60 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
  `-ImplicitCastExpr 0x561ce745be48 <llex.c:279:17, line:28:43> 'ZIO *' <LValueToRValue>
    `-MemberExpr 0x561ce745bdc8 <line:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745bdb0 <line:279:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.18] ? ([B52.10]) : [B53.7]
   2: DeclRefExpr 0x561ce745b8a0 <llex.c:279:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   3: ImplicitCastExpr 0x561ce745b8c8 <llex.c:279:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745b8a0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B51.2] (ImplicitCastExpr, LValueToRValue, LexState *)
   4: MemberExpr 0x561ce745b8e0 <llex.c:279:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745b8c8 <line:279:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745b8a0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B51.3]->current
   5: BinaryOperator 0x561ce745beb0 <llex.c:279:17, ./lzio.h:22:70> 'int' '='
|-MemberExpr 0x561ce745b8e0 <llex.c:279:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
| `-ImplicitCastExpr 0x561ce745b8c8 <line:279:17> 'LexState *' <LValueToRValue>
|   `-DeclRefExpr 0x561ce745b8a0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745be90 <./lzio.h:22:19, col:70> 'int'
  `-ConditionalOperator 0x561ce745be60 <col:20, col:69> 'int'
    |-BinaryOperator 0x561ce745ba78 <col:20, col:31> 'int' '>'
    | |-ParenExpr 0x561ce745ba20 <col:20, col:29> 'size_t':'unsigned long'
    | | `-UnaryOperator 0x561ce745ba00 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
    | |   `-MemberExpr 0x561ce745b9c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
    | |     `-ImplicitCastExpr 0x561ce745b9b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    | |       `-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
    | |         `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    | |           `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
    | |             `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    | `-ImplicitCastExpr 0x561ce745ba60 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x561ce745ba40 <col:31> 'int' 0
    |-ParenExpr 0x561ce745bd40 <./llimits.h:75:22, col:31> 'int'
    | `-CStyleCastExpr 0x561ce745bd18 <col:23, col:30> 'int' <IntegralCast>
    |   `-ParenExpr 0x561ce745bcf8 <col:26, col:30> 'unsigned char'
    |     `-ParenExpr 0x561ce745bc90 <col:22, col:31> 'unsigned char'
    |       `-CStyleCastExpr 0x561ce745bc68 <col:23, col:30> 'unsigned char' <IntegralCast>
    |         `-ImplicitCastExpr 0x561ce745bc50 <col:26, col:30> 'char' <LValueToRValue>
    |           `-ParenExpr 0x561ce745bc30 <col:26, col:30> 'const char' lvalue
    |             `-ParenExpr 0x561ce745bbc8 <./lzio.h:20:51, col:53> 'const char' lvalue
    |               `-UnaryOperator 0x561ce745bba8 <line:22:45, col:52> 'const char' lvalue prefix '*'
    |                 `-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
    |                   `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    |                     `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
    |                       `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
    |                         `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    |                           `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
    |                             `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-CallExpr 0x561ce745be18 <./lzio.h:22:58, col:69> 'int'
      |-ImplicitCastExpr 0x561ce745be00 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x561ce745bd60 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
      `-ImplicitCastExpr 0x561ce745be48 <llex.c:279:17, line:28:43> 'ZIO *' <LValueToRValue>
        `-MemberExpr 0x561ce745bdc8 <line:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745bdb0 <line:279:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B51.4] = ([B51.1])
   6: BinaryOperator 0x561ce745bef8 <llex.c:48:28, line:28:45> 'int' ','
|-CallExpr 0x561ce745b838 <line:48:28, col:48> 'void'
| |-ImplicitCastExpr 0x561ce745b820 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561ce745b758 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
| |-ImplicitCastExpr 0x561ce745b870 <line:279:17> 'LexState *' <LValueToRValue>
| | `-DeclRefExpr 0x561ce745b780 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
| `-ImplicitCastExpr 0x561ce745b888 <col:17, line:48:41> 'int' <LValueToRValue>
|   `-MemberExpr 0x561ce745b7e8 <line:279:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
|     `-ImplicitCastExpr 0x561ce745b7d0 <line:279:17> 'LexState *' <LValueToRValue>
|       `-DeclRefExpr 0x561ce745b7a8 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ParenExpr 0x561ce745bed8 <line:28:18, col:45> 'int'
  `-BinaryOperator 0x561ce745beb0 <line:279:17, ./lzio.h:22:70> 'int' '='
    |-MemberExpr 0x561ce745b8e0 <llex.c:279:17, line:28:23> 'int' lvalue ->current 0x561ce74267f0
    | `-ImplicitCastExpr 0x561ce745b8c8 <line:279:17> 'LexState *' <LValueToRValue>
    |   `-DeclRefExpr 0x561ce745b8a0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
    `-ParenExpr 0x561ce745be90 <./lzio.h:22:19, col:70> 'int'
      `-ConditionalOperator 0x561ce745be60 <col:20, col:69> 'int'
        |-BinaryOperator 0x561ce745ba78 <col:20, col:31> 'int' '>'
        | |-ParenExpr 0x561ce745ba20 <col:20, col:29> 'size_t':'unsigned long'
        | | `-UnaryOperator 0x561ce745ba00 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
        | |   `-MemberExpr 0x561ce745b9c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
        | |     `-ImplicitCastExpr 0x561ce745b9b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
        | |       `-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
        | |         `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        | |           `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
        | |             `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        | `-ImplicitCastExpr 0x561ce745ba60 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
        |   `-IntegerLiteral 0x561ce745ba40 <col:31> 'int' 0
        |-ParenExpr 0x561ce745bd40 <./llimits.h:75:22, col:31> 'int'
        | `-CStyleCastExpr 0x561ce745bd18 <col:23, col:30> 'int' <IntegralCast>
        |   `-ParenExpr 0x561ce745bcf8 <col:26, col:30> 'unsigned char'
        |     `-ParenExpr 0x561ce745bc90 <col:22, col:31> 'unsigned char'
        |       `-CStyleCastExpr 0x561ce745bc68 <col:23, col:30> 'unsigned char' <IntegralCast>
        |         `-ImplicitCastExpr 0x561ce745bc50 <col:26, col:30> 'char' <LValueToRValue>
        |           `-ParenExpr 0x561ce745bc30 <col:26, col:30> 'const char' lvalue
        |             `-ParenExpr 0x561ce745bbc8 <./lzio.h:20:51, col:53> 'const char' lvalue
        |               `-UnaryOperator 0x561ce745bba8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        |                 `-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
        |                   `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
        |                     `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
        |                       `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
        |                         `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        |                           `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
        |                             `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
        `-CallExpr 0x561ce745be18 <./lzio.h:22:58, col:69> 'int'
          |-ImplicitCastExpr 0x561ce745be00 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561ce745bd60 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
          `-ImplicitCastExpr 0x561ce745be48 <llex.c:279:17, line:28:43> 'ZIO *' <LValueToRValue>
            `-MemberExpr 0x561ce745bdc8 <line:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
              `-ImplicitCastExpr 0x561ce745bdb0 <line:279:17> 'LexState *' <LValueToRValue>
                `-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
... , 
   Preds (2): B52 B53
   Succs (1): B50

 [B52]
   1: DeclRefExpr 0x561ce745baa0 <llex.c:279:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   2: ImplicitCastExpr 0x561ce745bac8 <llex.c:279:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B52.1] (ImplicitCastExpr, LValueToRValue, LexState *)
   3: MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B52.2]->z
   4: ImplicitCastExpr 0x561ce745bb38 <./lzio.h:22:46, col:48> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B52.3]) (ImplicitCastExpr, LValueToRValue, ZIO *)
   5: MemberExpr 0x561ce745bb50 <./lzio.h:22:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
`-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B52.4]->p
   6: UnaryOperator 0x561ce745bb88 <./lzio.h:22:46, col:52> 'const char *' postfix '++'
`-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
  `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B52.5]++
   7: UnaryOperator 0x561ce745bba8 <./lzio.h:22:45, col:52> 'const char' lvalue prefix '*'
`-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
  `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
    `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
      `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
        `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
          `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
            `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
*[B52.6]
   8: ImplicitCastExpr 0x561ce745bc50 <./llimits.h:75:26, col:30> 'char' <LValueToRValue>
`-ParenExpr 0x561ce745bc30 <col:26, col:30> 'const char' lvalue
  `-ParenExpr 0x561ce745bbc8 <./lzio.h:20:51, col:53> 'const char' lvalue
    `-UnaryOperator 0x561ce745bba8 <line:22:45, col:52> 'const char' lvalue prefix '*'
      `-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
        `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
          `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
            `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
              `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
                  `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(([B52.7])) (ImplicitCastExpr, LValueToRValue, char)
   9: CStyleCastExpr 0x561ce745bc68 <./llimits.h:75:23, col:30> 'unsigned char' <IntegralCast>
`-ImplicitCastExpr 0x561ce745bc50 <col:26, col:30> 'char' <LValueToRValue>
  `-ParenExpr 0x561ce745bc30 <col:26, col:30> 'const char' lvalue
    `-ParenExpr 0x561ce745bbc8 <./lzio.h:20:51, col:53> 'const char' lvalue
      `-UnaryOperator 0x561ce745bba8 <line:22:45, col:52> 'const char' lvalue prefix '*'
        `-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
          `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
            `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
              `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
                `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                  `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
                    `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(unsigned char)[B52.8] (CStyleCastExpr, IntegralCast, unsigned char)
  10: CStyleCastExpr 0x561ce745bd18 <./llimits.h:75:23, col:30> 'int' <IntegralCast>
`-ParenExpr 0x561ce745bcf8 <col:26, col:30> 'unsigned char'
  `-ParenExpr 0x561ce745bc90 <col:22, col:31> 'unsigned char'
    `-CStyleCastExpr 0x561ce745bc68 <col:23, col:30> 'unsigned char' <IntegralCast>
      `-ImplicitCastExpr 0x561ce745bc50 <col:26, col:30> 'char' <LValueToRValue>
        `-ParenExpr 0x561ce745bc30 <col:26, col:30> 'const char' lvalue
          `-ParenExpr 0x561ce745bbc8 <./lzio.h:20:51, col:53> 'const char' lvalue
            `-UnaryOperator 0x561ce745bba8 <line:22:45, col:52> 'const char' lvalue prefix '*'
              `-UnaryOperator 0x561ce745bb88 <col:46, col:52> 'const char *' postfix '++'
                `-MemberExpr 0x561ce745bb50 <col:46, col:51> 'const char *' lvalue ->p 0x561ce7415620
                  `-ImplicitCastExpr 0x561ce745bb38 <col:46, col:48> 'ZIO *' <LValueToRValue>
                    `-ParenExpr 0x561ce745bb18 <col:46, col:48> 'ZIO *' lvalue
                      `-MemberExpr 0x561ce745bae0 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
                        `-ImplicitCastExpr 0x561ce745bac8 <line:279:17> 'LexState *' <LValueToRValue>
                          `-DeclRefExpr 0x561ce745baa0 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
(int)(([B52.9])) (CStyleCastExpr, IntegralCast, int)
   Preds (1): B54
   Succs (1): B51

 [B53]
   1: DeclRefExpr 0x561ce745bd60 <./lzio.h:22:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
luaZ_fill
   2: ImplicitCastExpr 0x561ce745be00 <./lzio.h:22:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745bd60 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
[B53.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(ZIO *))
   3: DeclRefExpr 0x561ce745bd88 <llex.c:279:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745bdb0 <llex.c:279:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B53.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: MemberExpr 0x561ce745bdc8 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745bdb0 <line:279:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B53.4]->z
   6: ImplicitCastExpr 0x561ce745be48 <llex.c:279:17, line:28:43> 'ZIO *' <LValueToRValue>
`-MemberExpr 0x561ce745bdc8 <line:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
  `-ImplicitCastExpr 0x561ce745bdb0 <line:279:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B53.5] (ImplicitCastExpr, LValueToRValue, ZIO *)
   7: CallExpr 0x561ce745be18 <./lzio.h:22:58, col:69> 'int'
|-ImplicitCastExpr 0x561ce745be00 <col:58> 'int (*)(ZIO *)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745bd60 <col:58> 'int (ZIO *)' Function 0x561ce7415860 'luaZ_fill' 'int (ZIO *)'
`-ImplicitCastExpr 0x561ce745be48 <llex.c:279:17, line:28:43> 'ZIO *' <LValueToRValue>
  `-MemberExpr 0x561ce745bdc8 <line:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745bdb0 <line:279:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745bd88 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B53.2]([B53.6])
   Preds (1): B54
   Succs (1): B51

 [B54]
   1: DeclRefExpr 0x561ce745b758 <llex.c:48:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
save
   2: ImplicitCastExpr 0x561ce745b820 <llex.c:48:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x561ce745b758 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
[B54.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(LexState *, int))
   3: DeclRefExpr 0x561ce745b780 <llex.c:279:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   4: ImplicitCastExpr 0x561ce745b870 <llex.c:279:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745b780 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.3] (ImplicitCastExpr, LValueToRValue, LexState *)
   5: DeclRefExpr 0x561ce745b7a8 <llex.c:279:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
   6: ImplicitCastExpr 0x561ce745b7d0 <llex.c:279:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745b7a8 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.5] (ImplicitCastExpr, LValueToRValue, LexState *)
   7: MemberExpr 0x561ce745b7e8 <llex.c:279:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
`-ImplicitCastExpr 0x561ce745b7d0 <line:279:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745b7a8 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.6]->current
   8: ImplicitCastExpr 0x561ce745b888 <llex.c:279:17, line:48:41> 'int' <LValueToRValue>
`-MemberExpr 0x561ce745b7e8 <line:279:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
  `-ImplicitCastExpr 0x561ce745b7d0 <line:279:17> 'LexState *' <LValueToRValue>
    `-DeclRefExpr 0x561ce745b7a8 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CallExpr 0x561ce745b838 <llex.c:48:28, col:48> 'void'
|-ImplicitCastExpr 0x561ce745b820 <col:28> 'void (*)(LexState *, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561ce745b758 <col:28> 'void (LexState *, int)' Function 0x561ce7440ca0 'save' 'void (LexState *, int)'
|-ImplicitCastExpr 0x561ce745b870 <line:279:17> 'LexState *' <LValueToRValue>
| `-DeclRefExpr 0x561ce745b780 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745b888 <col:17, line:48:41> 'int' <LValueToRValue>
  `-MemberExpr 0x561ce745b7e8 <line:279:17, line:48:41> 'int' lvalue ->current 0x561ce74267f0
    `-ImplicitCastExpr 0x561ce745b7d0 <line:279:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745b7a8 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.2]([B54.4], [B54.8])
  10: DeclRefExpr 0x561ce745b918 <llex.c:279:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
ls
  11: ImplicitCastExpr 0x561ce745b940 <llex.c:279:17> 'LexState *' <LValueToRValue>
`-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.10] (ImplicitCastExpr, LValueToRValue, LexState *)
  12: MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
`-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
  `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.11]->z
  13: ImplicitCastExpr 0x561ce745b9b0 <./lzio.h:22:21, col:23> 'ZIO *' <LValueToRValue>
`-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
  `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
    `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
      `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
([B54.12]) (ImplicitCastExpr, LValueToRValue, ZIO *)
  14: MemberExpr 0x561ce745b9c8 <./lzio.h:22:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
`-ImplicitCastExpr 0x561ce745b9b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
  `-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
    `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
      `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
        `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.13]->n
  15: UnaryOperator 0x561ce745ba00 <./lzio.h:22:21, col:27> 'size_t':'unsigned long' postfix '--'
`-MemberExpr 0x561ce745b9c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
  `-ImplicitCastExpr 0x561ce745b9b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
    `-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
      `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
        `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
          `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
[B54.14]--
  16: IntegerLiteral 0x561ce745ba40 <./lzio.h:22:31> 'int' 0
0
  17: ImplicitCastExpr 0x561ce745ba60 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
`-IntegerLiteral 0x561ce745ba40 <col:31> 'int' 0
[B54.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: BinaryOperator 0x561ce745ba78 <./lzio.h:22:20, col:31> 'int' '>'
|-ParenExpr 0x561ce745ba20 <col:20, col:29> 'size_t':'unsigned long'
| `-UnaryOperator 0x561ce745ba00 <col:21, col:27> 'size_t':'unsigned long' postfix '--'
|   `-MemberExpr 0x561ce745b9c8 <col:21, col:26> 'size_t':'unsigned long' lvalue ->n 0x561ce74155c0
|     `-ImplicitCastExpr 0x561ce745b9b0 <col:21, col:23> 'ZIO *' <LValueToRValue>
|       `-ParenExpr 0x561ce745b990 <col:21, col:23> 'ZIO *' lvalue
|         `-MemberExpr 0x561ce745b958 <llex.c:279:17, line:28:43> 'ZIO *' lvalue ->z 0x561ce7426c08
|           `-ImplicitCastExpr 0x561ce745b940 <line:279:17> 'LexState *' <LValueToRValue>
|             `-DeclRefExpr 0x561ce745b918 <col:17> 'LexState *' lvalue ParmVar 0x561ce745b488 'ls' 'LexState *'
`-ImplicitCastExpr 0x561ce745ba60 <./lzio.h:22:31> 'unsigned long' <IntegralCast>
  `-IntegerLiteral 0x561ce745ba40 <col:31> 'int' 0
([B54.15]) > [B54.17]
   T: [B54.18] ? ... : ...
   Preds (1): B55
   Succs (2): B52 B53

 [B0 (EXIT)]
   Preds (1): B1
